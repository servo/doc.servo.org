initSidebarItems({"fn":[["layout_node_from_unsafe_layout_node",""],["layout_node_to_unsafe_layout_node",""]],"struct":[["LayoutElement","A wrapper around elements that ensures layout can only ever access safe properties."],["LayoutNode","A wrapper so that layout can access only the methods that it should have access to. Layout must only ever see these and must never see instances of `LayoutJS`."],["LayoutNodeChildrenIterator",""],["LayoutNodeReverseChildrenIterator",""],["LayoutTreeIterator",""],["ThreadSafeLayoutElement","A wrapper around elements that ensures layout can only ever access safe properties and cannot race on elements."],["ThreadSafeLayoutNode","A thread-safe version of `LayoutNode`, used during flow construction. This type of layout node does not allow any parents or siblings of nodes to be accessed, to avoid races."],["ThreadSafeLayoutNodeChildrenIterator",""]],"trait":[["PostorderDomTraversal","A bottom-up traversal, with a optional in-order pass."],["PostorderNodeMutTraversal","A bottom-up, parallelizable traversal."],["PreorderDomTraversal","A top-down traversal."],["TLayoutNode","Allows some convenience methods on generic layout nodes."]],"enum":[["PseudoElementType",""]],"type":[["UnsafeLayoutNode","Opaque type stored in type-unsafe work queues for parallel layout. Must be transmutable to and from LayoutNode/ThreadSafeLayoutNode."]]});