initSidebarItems({"enum":[["ConstructionItem","Represents the output of flow construction for a DOM node that has not yet resulted in a complete flow. Construction items bubble up the tree until they find a `Flow` to be attached to."],["ConstructionResult","The results of flow construction for a DOM node."]],"fn":[["bidi_control_chars","If the ‘unicode-bidi’ property has a value other than ‘normal’, return the bidi control codes to inject before and after the text content of the element."],["control_chars_to_fragment",""],["has_padding_or_border","Returns true if this node has non-zero padding or border."],["is_image_data",""],["strip_ignorable_whitespace_from_end","Strips ignorable whitespace from the end of a list of fragments."],["strip_ignorable_whitespace_from_start","Strips ignorable whitespace from the start of a list of fragments."]],"struct":[["FlowConstructor","An object that knows how to create flows."],["InlineBlockSplit","Represents an {ib} split that has not yet found the containing block that it belongs to. This is somewhat tricky. An example may be helpful. For this DOM fragment:"],["InlineFragmentsAccumulator","Holds inline fragments that we’re gathering for children of an inline node."],["InlineFragmentsConstructionResult","Represents inline fragments and {ib} splits that are bubbling up from an inline."],["IntermediateInlineFragments","Holds inline fragments and absolute descendants."],["Legalizer","Maintains a stack of anonymous boxes needed to ensure that the flow tree is legal. The tree is legal if it follows the rules in CSS 2.1 § 17.2.1."]],"trait":[["NodeUtils","A utility trait with some useful methods for node queries."]]});