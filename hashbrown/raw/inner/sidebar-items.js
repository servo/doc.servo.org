initSidebarItems({"constant":[["DELETED","Control byte value for a deleted bucket."],["EMPTY","Control byte value for an empty bucket."]],"enum":[["Fallibility","Whether memory allocation errors should return an error or abort."]],"fn":[["bucket_mask_to_capacity","Returns the maximum effective capacity for the given bucket mask, taking the maximum load factor into account."],["calculate_layout","Returns a Layout which describes the allocation required for a hash table, and the offset of the control bytes in the allocation. (the offset is also one past last element of buckets)"],["capacity_to_buckets","Returns the number of buckets needed to hold the given number of items, taking the maximum load factor into account."],["h1","Primary hash function, used to select the initial bucket to probe from."],["h2","Secondary hash function, saved in the low 7 bits of the control byte."],["is_full","Checks whether a control byte represents a full bucket (top bit is clear)."],["is_special","Checks whether a control byte represents a special value (top bit is set)."],["likely",""],["offset_from",""],["special_is_empty","Checks whether a special control value is EMPTY (just check 1 bit)."],["unlikely",""]],"mod":[["bitmask",""],["sse2",""]],"struct":[["Bucket","A reference to a hash table bucket containing a `T`."],["ProbeSeq","Probe sequence based on triangular numbers, which is guaranteed (since our table size is a power of two) to visit every group of elements exactly once."],["RawDrain","Iterator which consumes elements without freeing the table storage."],["RawIntoIter","Iterator which consumes a table and returns elements."],["RawIter","Iterator which returns a raw pointer to every full bucket in the table."],["RawIterHash","Iterator over occupied buckets that could match a given hash."],["RawIterRange","Iterator over a sub-range of a table. Unlike `RawIter` this iterator does not track an item count."],["RawTable","A raw hash table with an unsafe API."]],"trait":[["RawTableClone","Specialization of `clone_from` for `Copy` types"]]});