initSidebarItems({"macro":[["uses_lifetimes","Generator for `UsesLifetimes` impls that unions the used lifetimes of the selected fields."],["uses_type_params","Generator for `UsesTypeParam` impls that unions the used type parameters of the selected fields."]],"mod":[["ast","Utility types for working with the AST."],["codegen",""],["derive","Functions to derive `darling`â€™s traits from well-formed input, without directly depending on `proc_macro`."],["error","The `darling::Error` type and its internals."],["from_derive_input",""],["from_field",""],["from_generic_param",""],["from_generics",""],["from_meta",""],["from_type_param",""],["from_variant",""],["macros_private",""],["macros_public","Macros that should be exported from both `darling_core` and `darling`. Note that these are sym-linked into the main code, and so cannot declare on items that are exported differently in `darling_core` vs. `darling`."],["options",""],["usage","Traits and types used for tracking the usage of generic parameters through a proc-macro input."],["util","Utility types for attribute parsing."]],"trait":[["FromDeriveInput","Creates an instance by parsing an entire proc-macro `derive` input, including the, identity, generics, and visibility of the type."],["FromField","Creates an instance by parsing an individual field and its attributes."],["FromGenericParam","Creates an instance by parsing a specific `syn::GenericParam`. This can be a type param, a lifetime, or a const param."],["FromGenerics","Creates an instance by parsing an entire generics declaration, including the `where` clause."],["FromMeta","Create an instance from an item in an attribute declaration."],["FromTypeParam","Creates an instance by parsing an individual type_param and its attributes."],["FromVariant","Creates an instance from a specified `syn::Variant`."]]});