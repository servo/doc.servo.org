initSidebarItems({"constant":[["ForOfIterator_NOT_ARRAY",""],["NotableStringInfo_MAX_SAVED_CHARS",""],["RegExpFlag_AllFlags",""],["RegExpFlag_DotAll",""],["RegExpFlag_Global",""],["RegExpFlag_HasIndices",""],["RegExpFlag_IgnoreCase",""],["RegExpFlag_Multiline",""],["RegExpFlag_NoFlags",""],["RegExpFlag_Sticky",""],["RegExpFlag_Unicode",""],["TenuredHeap_flagsMask",""],["TenuredHeap_maskBits",""]],"enum":[["AsmJSOption",""],["AutoGCRooterKind",""],["AutoSetAsyncStackForNewCalls_AsyncCallKind",""],["CompartmentIterResult",""],["CompartmentSpecifier","Specification for which compartment/zone a newly created realm should use."],["DOMProxyShadowsResult",""],["Dispatchable_MaybeShuttingDown",""],["DynamicImportStatus","Passed to FinishDynamicModuleImport to indicate the result of the dynamic import operation."],["ErrorReportBuilder_SniffingBehavior",""],["Error_ErrorKind",""],["ExceptionStackBehavior",""],["ForOfIterator_NonIterableBehavior",""],["GCNurseryProgress","Describes the progress of an observed nursery collection."],["GCProgress",""],["GCReason",""],["Handle_CallerIdentity",""],["Handle_Disambiguator",""],["HeapState",""],["IdTraceAction",""],["IsArrayAnswer","The answer to a successful query as to whether an object is an Array per ES6’s internal |IsArray| operation (as exposed by |Array.isArray|)."],["MemoryUse",""],["MimeType",""],["ObjectOpResult_SpecialCodes",""],["OnNewGlobalHookOption","During global creation, we fire notifications to callbacks registered via the Debugger API. These callbacks are arbitrary script, and can touch the global in arbitrary ways. When that happens, the global should not be in a half-baked state. But this creates a problem for consumers that need to set slots on the global to put it in a consistent state."],["ProfilingCategory",""],["ProfilingCategoryPair",""],["PromiseRejectionHandlingState",""],["PromiseState",""],["PromiseUserInputEventHandlingState",""],["PropertyResult_Kind",""],["ReadableStreamMode",""],["ReadableStreamReaderMode",""],["RealmBehaviors_Override_Mode",""],["RootKind",""],["SavedFrameResult",""],["SavedFrameSelfHosted",""],["ServoSizes_Kind",""],["SmallestEncoding",""],["SourceOwnership",""],["StackKind",""],["StructuredCloneScope","Indicates the “scope of validity” of serialized data."],["SymbolCode",""],["TabSizes_Kind",""],["TenuredHeap__bindgen_ty_1",""],["TraceKind",""],["TracerKind",""],["TranscodeResult",""],["TransferableOwnership",""],["ValueType",""],["WeakEdgeTraceAction",""],["WeakMapTraceAction",""],["WeakRefSpecifier","Specification for whether weak refs should be enabled and if so whether the FinalizationRegistry.cleanupSome method should be present."]],"fn":[["AbortIncrementalGC","If IsIncrementalGCInProgress(cx), this call aborts the ongoing collection and performs whatever work needs to be done to return the collector to its idle state. This may take an arbitrarily long time. When this function returns, IsIncrementalGCInProgress(cx) will always be false."],["AddAssociatedMemory","Advise the GC of external memory owned by a JSObject. This is used to determine when to collect zones. Calls must be matched by calls to RemoveAssociatedMemory() when the memory is deallocated or no longer owned by the object."],["AddPersistentRoot",""],["AddPersistentRoot1",""],["AddPromiseReactions","Unforgeable, optimized version of the JS builtin Promise.prototype.then."],["AddPromiseReactionsIgnoringUnhandledRejection","Unforgeable, optimized version of the JS builtin Promise.prototype.then."],["AddServoSizeOf",""],["AddSizeOfTab",""],["ArrayBufferHasData","Return true if the ArrayBuffer |obj| contains any data, i.e. it is not a detached ArrayBuffer.  (ArrayBuffer.prototype is not an ArrayBuffer.)"],["AssertObjectBelongsToCurrentThread","Asserts (in debug and release builds) that `obj` belongs to the current thread’s context."],["BuildStackString","Given a SavedFrame JSObject stack, stringify it in the same format as Error.prototype.stack. The stringified stack out parameter is placed in the cx’s compartment. Defaults to the empty string."],["Call",""],["CallOriginalPromiseReject","Calls the current compartment’s original Promise.reject on the original Promise constructor, with `resolutionValue` passed as an argument."],["CallOriginalPromiseResolve","Calls the current compartment’s original Promise.resolve on the original Promise constructor, with `resolutionValue` passed as an argument."],["CallOriginalPromiseThen","Create a Promise with the given fulfill/reject handlers, that will be fulfilled/rejected with the value/reason that the promise `promise` is fulfilled/rejected with."],["CanCompileOffThread",""],["CanDecodeOffThread",""],["CancelMultiOffThreadScriptsDecoder",""],["CancelOffThreadModule",""],["CancelOffThreadScript",""],["CancelOffThreadScriptDecoder",""],["CaptureCurrentStack","Capture the current call stack as a chain of SavedFrame JSObjects, and set |stackp| to the SavedFrame for the youngest stack frame, or nullptr if there are no JS frames on the stack."],["CheckCompileOptionsMatch",""],["CheckRegExpSyntax","Check whether the given source is a valid regexp. If the regexp parses successfully, returns true and sets |error| to undefined. If the regexp has a syntax error, returns true, sets |error| to that error object, and clears the exception. Returns false on OOM or over-recursion."],["ClearKeptObjects","Clear kept alive objects in JS WeakRef. https://tc39.es/proposal-weakrefs/#sec-clear-kept-objects"],["ClearRegExpStatics",""],["CloneAndExecuteScript","Like the above, but handles a cross-compartment script. If the script is cross-compartment, it is cloned into the current compartment before executing."],["CloneAndExecuteScript1","Like CloneAndExecuteScript above, but allows executing under a non-syntactic environment chain."],["CollectGlobalStats",""],["CollectRuntimeStats",""],["Compile","Compile the provided script using the given options.  Return the script on success, or return null on failure (usually with an error reported)."],["Compile1","Compile the provided script using the given options.  Return the script on success, or return null on failure (usually with an error reported)."],["CompileAndStartIncrementalEncoding","Compile the provided script using the given options, and register an encoder on is script source, such that all functions can be encoded as they are parsed. This strategy is used to avoid blocking the main thread in a non-interruptible way."],["CompileAndStartIncrementalEncoding1",""],["CompileFunction","Compile a function with envChain plus the global as its scope chain. envChain must contain objects in the current compartment of cx.  The actual scope chain used for the function will consist of With wrappers for those objects, followed by the current global of the compartment cx is in.  This global must not be explicitly included in the scope chain."],["CompileFunction1","Compile a function with envChain plus the global as its scope chain. envChain must contain objects in the current compartment of cx.  The actual scope chain used for the function will consist of With wrappers for those objects, followed by the current global of the compartment cx is in.  This global must not be explicitly included in the scope chain."],["CompileFunctionUtf8","Identical to the CompileFunction overload above for UTF-8, but with Rust-friendly ergonomics."],["CompileModule","Parse the given source buffer as a module in the scope of the current global of cx and return a source text module record."],["CompileModule1","Parse the given source buffer as a module in the scope of the current global of cx and return a source text module record.  An error is reported if a UTF-8 encoding error is encountered."],["CompileOffThread",""],["CompileOffThread1",""],["CompileOffThreadModule",""],["CompileOffThreadModule1",""],["CompileUtf8File","Compile the UTF-8 contents of the given file into a script.  It is an error if the file contains invalid UTF-8.  Return the script on success, or return null on failure (usually with an error reported)."],["CompileUtf8Path","Compile the UTF-8 contents of the file at the given path into a script. (The path itself is in the system encoding, not [necessarily] UTF-8.)  It is an error if the file’s contents are invalid UTF-8.  Return the script on success, or return null on failure (usually with an error reported)."],["Construct","Invoke a constructor. This is the C++ equivalent of `rval = Reflect.construct(fun, args, newTarget)`."],["Construct1","Invoke a constructor. This is the C++ equivalent of `rval = new fun(...args)`."],["ContextOptionsRef",""],["ConvertSavedFrameToPlainObject","Given a SavedFrame object, convert it and its transitive parents to plain objects. Because SavedFrame objects store their properties on the prototype, they cannot be usefully stringified to JSON. Assigning their properties to plain objects allow those objects to be stringified and the saved frame stack can be encoded as a string."],["CopyArrayBuffer","Create a new ArrayBuffer, whose bytes are set to the values of the bytes in the provided ArrayBuffer."],["CopyAsyncStack",""],["CreateError",""],["CreateMappedArrayBufferContents","Create memory mapped ArrayBuffer contents. Caller must take care of closing fd after calling this function."],["CurrentGlobalOrNull","Get the current realm’s global. Returns nullptr if no realm has been entered."],["DayFromTime",""],["DayFromYear",""],["DayWithinYear",""],["DecodeMultiOffThreadScripts",""],["DecodeOffThreadScript",""],["DecodeOffThreadScript1",""],["DecodeScript",""],["DecodeScript1",""],["DecodeScriptAndStartIncrementalEncoding",""],["DecodeScriptMaybeStencil",""],["DeflateStringToUTF8Buffer",""],["DescribeScriptedCaller","Return the current filename, line number and column number of the most currently running frame. Returns true if a scripted frame was found, false otherwise."],["DetachArrayBuffer","Detach an ArrayBuffer, causing all associated views to no longer refer to the ArrayBuffer’s original attached memory."],["DisableIncrementalGC","Incremental GC defaults to enabled, but may be disabled for testing or in embeddings that have not yet implemented barriers on their native classes. There is not currently a way to re-enable incremental GC once it has been disabled on the runtime."],["DisableNurseryBigInts",""],["DisableNurseryStrings",""],["DisableWasmHugeMemory","Attempt to disable Wasm’s usage of reserving a large virtual memory allocation to avoid bounds checking overhead. This must be called before any Wasm module or memory is created in this process, or else this function will fail."],["EnableNurseryBigInts",""],["EnableNurseryStrings",""],["EncodeScript",""],["EnterRealm","NB: This API is infallible; a nullptr return value does not indicate error."],["Evaluate","Evaluate the given source buffer in the scope of the current global of cx, and return the completion value in |rval|."],["Evaluate1","As above, but providing an explicit scope chain.  envChain must not include the global object on it; that’s implicit.  It needs to contain the other objects that should end up on the script’s scope chain."],["Evaluate2","Evaluate the provided UTF-8 data in the scope of the current global of |cx|, and return the completion value in |rval|.  If the data contains invalid UTF-8, an error is reported."],["EvaluateUtf8Path","Evaluate the UTF-8 contents of the file at the given path, and return the completion value in |rval|.  (The path itself is in the system encoding, not [necessarily] UTF-8.)  If the contents contain any malformed UTF-8, an error is reported."],["ExceptionStackOrNull","If the given object is an exception object (or an unwrappable cross-compartment wrapper for one), return the stack for that exception, if any.  Will return null if the given object is not an exception object (including if it’s null or a security wrapper that can’t be unwrapped) or if the exception has no stack."],["ExecuteRegExp",""],["ExecuteRegExpNoStatics",""],["ExplainGCReason","Get a statically allocated C string explaining the given GC reason."],["ExposeScriptToDebugger",""],["FindSmallestEncoding",""],["FinishDynamicModuleImport","This must be called after a dynamic import operation is complete."],["FinishDynamicModuleImport_NoTLA","This must be called after a dynamic import operation is complete."],["FinishIncrementalEncoding",""],["FinishIncrementalGC","If IsIncrementalGCInProgress(cx), this call finishes the ongoing collection by performing an arbitrarily long slice. If !IsIncrementalGCInProgress(cx), this is equivalent to NonIncrementalGC. When this function returns, IsIncrementalGCInProgress(cx) will always be false."],["FinishMultiOffThreadScriptsDecoder",""],["FinishOffThreadModule",""],["FinishOffThreadScript",""],["FinishOffThreadScriptAndStartIncrementalEncoding",""],["FinishOffThreadScriptDecoder",""],["ForceLexicalInitialization","Set all of the uninitialized lexicals on an object to undefined. Return true if any lexicals were initialized and false otherwise."],["FromPropertyDescriptor",""],["GCThingTraceKind",""],["GCTraceKindSize","Returns the base size in bytes of the GC thing of kind |kind|."],["GCTraceKindToAscii","Returns a static string equivalent of |kind|."],["GetArrayBufferByteLength","Return the available byte length of an ArrayBuffer."],["GetArrayBufferData","Return a pointer to the start of the data referenced by a typed array. The data is still owned by the typed array, and should not be modified on another thread. Furthermore, the pointer can become invalid on GC (if the data is small and fits inside the array’s GC header), so callers must take care not to hold on across anything that could GC."],["GetArrayBufferLengthAndData",""],["GetArrayLength","Store |*lengthp = ToLength(obj.length)| and return true on success, else return false."],["GetBuiltinClass","Determine the ECMAScript “class” – Date, String, RegExp, and all the other builtin object types (described in ECMAScript in terms of an objecting having “an [[ArrayBufferData]] internal slot” or similar language for other kinds of object – of the provided object."],["GetCurrentRealmOrNull",""],["GetDeflatedUTF8StringLength",""],["GetFirstArgumentAsTypeHint","If args.get(0) is one of the strings “string”, “number”, or “default”, set result to JSTYPE_STRING, JSTYPE_NUMBER, or JSTYPE_UNDEFINED accordingly and return true. Otherwise, return false with a TypeError pending."],["GetFunctionRealm",""],["GetIsSecureContext",""],["GetJSTimers",""],["GetModuleDynamicImportHook","Get the HostImportModuleDynamically hook for the runtime."],["GetModuleMetadataHook","Get the hook for populating the import.meta metadata object."],["GetModulePrivate","Get the private value associated with a source text module record."],["GetModuleResolveHook","Get the HostResolveImportedModule hook for the runtime."],["GetModuleScript",""],["GetNonCCWObjectGlobal","Get the global object associated with an object’s realm. The object must not be a cross-compartment wrapper (because CCWs are shared by all realms in the compartment)."],["GetNurseryCellZone",""],["GetObjectAsArrayBuffer","Attempt to unwrap |obj| as an ArrayBuffer."],["GetObjectRealmOrNull",""],["GetObjectZone",""],["GetOptimizedEncodingBuildId","Some cached data is, in addition to being build-specific, CPU-specific: the cached data depends on CPU features like a particular level of SSE support."],["GetPendingExceptionStack",""],["GetProfilingCategoryPairInfo",""],["GetPromiseAllocationSite","Returns a js::SavedFrame linked list of the stack that lead to the given Promise’s allocation."],["GetPromiseConstructor","Returns the current compartment’s original Promise constructor."],["GetPromiseID","Returns the given Promise’s process-unique ID."],["GetPromiseIsHandled","Returns whether the given promise’s rejection is already handled or not."],["GetPromisePrototype","Returns the current compartment’s original Promise.prototype."],["GetPromiseResolutionSite",""],["GetPromiseResult","Returns the given Promise’s result: either the resolution value for fulfilled promises, or the rejection reason for rejected ones."],["GetPromiseState","Returns the given Promise’s state as a JS::PromiseState enum value."],["GetPromiseUserInputEventHandlingState","Returns the given Promise’s activation behavior state flag per above as a JS::PromiseUserInputEventHandlingState value.  All promises are created with the DontCare state by default."],["GetRealmArrayPrototype",""],["GetRealmErrorPrototype",""],["GetRealmFunctionPrototype",""],["GetRealmGlobalOrNull",""],["GetRealmIteratorPrototype",""],["GetRealmObjectPrototype",""],["GetRealmPrincipals",""],["GetRealmPrivate",""],["GetRealmWeakMapKey",""],["GetRegExpFlags","Given a RegExp object (or a wrapper around one), return the set of all JS::RegExpFlag::* for it."],["GetRegExpSource","Return the source text for a RegExp object (or a wrapper around one), or null on failure."],["GetRequestedModuleSourcePos",""],["GetRequestedModuleSpecifier",""],["GetRequestedModules",""],["GetSavedFrameAsyncCause","Given a SavedFrame JSObject, get its asyncCause string. Defaults to nullptr."],["GetSavedFrameAsyncParent","Given a SavedFrame JSObject, get its asyncParent SavedFrame object or nullptr if there is no asyncParent. The `asyncParentp` out parameter is NOT guaranteed to be in the cx’s compartment. Defaults to nullptr."],["GetSavedFrameColumn","Given a SavedFrame JSObject, get its column property. Defaults to 0."],["GetSavedFrameFunctionDisplayName","Given a SavedFrame JSObject, get its functionDisplayName string, or nullptr if SpiderMonkey was unable to infer a name for the captured frame’s function. Defaults to nullptr."],["GetSavedFrameLine","Given a SavedFrame JSObject, get its line property. Defaults to 0."],["GetSavedFrameParent","Given a SavedFrame JSObject, get its parent SavedFrame object or nullptr if it is the oldest frame in the stack. The `parentp` out parameter is NOT guaranteed to be in the cx’s compartment. Defaults to nullptr."],["GetSavedFrameSource","Given a SavedFrame JSObject, get its source property. Defaults to the empty string."],["GetSavedFrameSourceId","Given a SavedFrame JSObject, get an ID identifying its ScriptSource. Defaults to 0."],["GetScriptPrivate","Get the private value associated with a script. Note that this value is shared by all nested scripts compiled from a single source file."],["GetScriptTranscodingBuildId","Script bytecode is dependent on the buildId and a few other things."],["GetScriptedCallerGlobal",""],["GetScriptedCallerPrivate",""],["GetSelfHostedFunction",""],["GetSymbolCode","Return the SymbolCode telling what sort of symbol `symbol` is."],["GetSymbolDescription","Get the [[Description]] attribute of the given symbol."],["GetSymbolFor","Symbol.for as specified in ES6."],["GetWaitForAllPromise","Unforgeable version of the JS builtin Promise.all."],["GetWarningReporter",""],["GetWasmModule",""],["GetWeakMapEntry",""],["GetWellKnownSymbol","Get one of the well-known symbols defined by ES6. A single set of well-known symbols is shared by all compartments in a JSRuntime."],["HeapBigIntPostWriteBarrier",""],["HeapBigIntWriteBarriers",""],["HeapObjectPostWriteBarrier",""],["HeapObjectWriteBarriers",""],["HeapScriptWriteBarriers",""],["HeapStringPostWriteBarrier",""],["HeapStringWriteBarriers",""],["HeapValuePostWriteBarrier",""],["HeapValueWriteBarriers",""],["HideScriptedCaller","Informs the JS engine that the scripted caller should be hidden. This can be used by the embedding to maintain an override of the scripted caller in its calculations, by hiding the scripted caller in the JS engine and pushing data onto a separate stack, which it inspects when DescribeScriptedCaller returns null."],["IdentifyStandardConstructor",""],["IdentifyStandardInstance",""],["IdentifyStandardInstanceOrPrototype",""],["IdentifyStandardPrototype",""],["IncrementalGCHasForegroundWork","Return whether an incremental GC has work to do on the foreground thread and would make progress if a slice was run now. If this returns false then the GC is waiting for background threads to finish their work and a slice started now would return immediately."],["IncrementalGCSlice","Perform a slice of an ongoing incremental collection. When this function returns, the collection may not be complete. It must be called repeatedly until !IsIncrementalGCInProgress(cx)."],["IncrementalPreWriteBarrier",""],["IncrementalPreWriteBarrier1",""],["InformalValueTypeName",""],["InitConsumeStreamCallback",""],["InitDispatchToEventLoop",""],["InitPipeToHandling","Dictate embedder-specific details necessary to implement certain aspects of the |ReadableStream.prototype.pipeTo| function.  This should be performed exactly once, for a single context associated with a |JSRuntime|."],["InitRealmStandardClasses",""],["InitSelfHostedCode","Initialize the runtime’s self-hosted code. Embeddings should call this exactly once per runtime/context, before the first JS_NewGlobalObject call."],["InstanceofOperator",""],["InternalGCReason","Return true if the GC reason is internal to the JS engine."],["IsArray","ES6 7.2.2."],["IsArray1","Identical to IsArray above, but the nature of the object (if successfully determined) is communicated via |*answer|.  In particular this method returns true and sets |*answer = IsArrayAnswer::RevokedProxy| when called on a revoked proxy."],["IsArrayBufferObject",""],["IsArrayObject","Determine whether |value| is an Array object or a wrapper around one.  (An ES6 proxy whose target is an Array object, e.g. |var target = [], handler = {}; Proxy.revocable(target, handler).proxy|, is not considered to be an Array.)"],["IsArrayObject1","Determine whether |obj| is an Array object or a wrapper around one.  (An ES6 proxy whose target is an Array object, e.g. |var target = [], handler = {}; Proxy.revocable(target, handler).proxy|, is not considered to be an Array.)"],["IsAsyncStackCaptureEnabledForRealm","Returns true if capturing stack trace data to associate with an asynchronous operation is currently enabled for the current context realm."],["IsCallable","Return true if the given object is callable. In ES6 terms, an object is callable if it has a [[Call]] internal method."],["IsConstructor","Return true if the given object is a constructor. In ES6 terms, an object is a constructor if it has a [[Construct]] internal method. The expression `new obj()` throws a TypeError if obj is not a constructor."],["IsDetachedArrayBufferObject","Check whether the obj is a detached ArrayBufferObject. Note that this may return false if a security wrapper is encountered that denies the unwrapping."],["IsGCPoisoning","Whether we are poisoning unused/released data for error detection. Governed by the JS_GC_ALLOW_EXTRA_POISONING #ifdef as well as the $JSGC_EXTRA_POISONING environment variable."],["IsGCScheduled","Returns true if any zone in the system has been scheduled for GC with one of the functions above or by the JS engine."],["IsGenerationalGCEnabled","Returns true if generational allocation and collection is currently enabled on the given runtime."],["IsIdleGCTaskNeeded",""],["IsIncrementalBarrierNeeded",""],["IsIncrementalGCEnabled","Returns true if incremental GC is enabled. Simply having incremental GC enabled is not sufficient to ensure incremental collections are happening. See the comment “Incremental GC” above for reasons why incremental GC may be suppressed. Inspection of the “nonincremental reason” field of the GCDescription returned by GCSliceCallback may help narrow down the cause if collections are not happening incrementally when expected."],["IsIncrementalGCInProgress","Returns true while an incremental GC is ongoing, both when actively collecting and between slices."],["IsIncrementalGCInProgress1","Returns true while an incremental GC is ongoing, both when actively collecting and between slices."],["IsLargeArrayBufferView",""],["IsMapObject","On success, returns true, setting |*isMap| to true if |obj| is a Map object or a wrapper around one, or to false if not.  Returns false on failure."],["IsMappedArrayBufferObject","Check whether the obj is ArrayBufferObject and memory mapped. Note that this may return false if a security wrapper is encountered that denies the unwrapping."],["IsMaybeWrappedSavedFrame","Return true iff the given object is either a SavedFrame object or wrapper around a SavedFrame object, and it is not the SavedFrame.prototype object."],["IsProfileTimelineRecordingEnabled",""],["IsPromiseObject","Returns true if the given object is an unwrapped PromiseObject, false otherwise."],["IsReadableStream","Returns true if the given object is a ReadableStream object or an unwrappable wrapper for one, false otherwise."],["IsReadableStreamDefaultReader","Returns true if the given object is a ReadableStreamDefaultReader object or an unwrappable wrapper for one, false otherwise."],["IsReadableStreamReader","Returns true if the given object is a ReadableStreamDefaultReader or ReadableStreamBYOBReader object or an unwrappable wrapper for one, false otherwise."],["IsSetObject","On success, returns true, setting |*isSet| to true if |obj| is a Set object or a wrapper around one, or to false if not.  Returns false on failure."],["IsUnwrappedSavedFrame","Return true iff the given object is a SavedFrame object and not the SavedFrame.prototype object."],["IsWasmModuleObject",""],["IsWeakMapObject",""],["IterateRealms","This function calls |realmCallback| on every realm. Beware that there is no guarantee that the realm will survive after the callback returns. Also, barriers are disabled via the TraceSession."],["IterateRealmsInCompartment","Like IterateRealms, but only iterates realms in |compartment|."],["IterateRealmsWithPrincipals","Like IterateRealms, but only call the callback for realms using |principals|."],["JobQueueIsEmpty","Inform the runtime that the job queue is empty and the embedding is going to execute its last promise job. The runtime may now choose to skip creating promise jobs for asynchronous execution and instead continue execution synchronously. More specifically, this optimization is used to skip the standard job queuing behavior for `await` operations in async functions."],["JobQueueMayNotBeEmpty","Inform the runtime that job queue is no longer empty. The runtime can now no longer skip creating promise jobs for asynchronous execution, because pending jobs in the job queue must be executed first to preserve the FIFO (first in - first out) property of the queue. This effectively undoes JobQueueIsEmpty and re-enables the standard job queuing behavior."],["LeaveRealm",""],["LooselyEqual","Store |v1 == v2| to |*equal| – loose equality, which may perform user-modifiable conversions on |v1| or |v2|."],["LossyTwoByteCharsToNewLatin1CharsZ",""],["LossyUTF8CharsToNewLatin1CharsZ",""],["LossyUTF8CharsToNewTwoByteCharsZ",""],["LossyUTF8CharsToNewTwoByteCharsZ1",""],["MakeDate",""],["MakeDate1",""],["MapClear",""],["MapDelete",""],["MapEntries",""],["MapForEach",""],["MapGet",""],["MapHas",""],["MapKeys",""],["MapSet",""],["MapSize",""],["MapValues",""],["MinorGcToJSON",""],["ModuleEvaluate",""],["ModuleInstantiate",""],["MonthFromTime",""],["NewArrayBuffer","Create a new ArrayBuffer with the given byte length."],["NewArrayBufferWithContents","Create a new ArrayBuffer with the given |contents|, which may be null only if |nbytes == 0|.  |contents| must be allocated compatible with deallocation by |JS_free|."],["NewArrayBufferWithUserOwnedContents","Create a new ArrayBuffer with the given non-null |contents|."],["NewArrayObject","Create an Array from the current realm with the given contents."],["NewArrayObject1","Create an Array from the current realm with the given length and allocate memory for all its elements.  (The elements nonetheless will not exist as properties on the returned array until values have been assigned to them.)"],["NewDateObject",""],["NewDateObject1","Create a new Date object for a year/month/day-of-month/hour/minute/second."],["NewExternalArrayBuffer","Create a new ArrayBuffer with the given contents. The contents must not be modified by any other code, internal or external."],["NewFunctionFromSpec","Create a new function based on the given JSFunctionSpec, *fs. id is the result of a successful call to `PropertySpecNameToId(cx, fs->name, &id)` or `PropertySpecNameToPermanentId(cx, fs->name, &id)`."],["NewFunctionFromSpec1","Same as above, but without an id arg, for callers who don’t have the id already."],["NewMapObject",""],["NewMappedArrayBufferWithContents","Create a new mapped ArrayBuffer with the given memory mapped contents. It must be legal to free the contents pointer by unmapping it. On success, ownership is transferred to the new mapped ArrayBuffer."],["NewPromiseObject","Returns a new instance of the Promise builtin class in the current compartment, with the right slot layout."],["NewReadableDefaultStreamObject","Returns a new instance of the ReadableStream builtin class in the current compartment, configured as a default stream. If a |proto| is passed, that gets set as the instance’s [[Prototype]] instead of the original value of |ReadableStream.prototype|."],["NewReadableExternalSourceStreamObject","Returns a new instance of the ReadableStream builtin class in the current compartment."],["NewRegExpObject","Create a new RegExp for the given Latin-1-encoded bytes and flags."],["NewSetObject",""],["NewSymbol","Create a new Symbol with the given description. This function never returns a Symbol that is in the Runtime-wide symbol registry."],["NewUCRegExpObject","Create a new RegExp for the given source and flags."],["NewWeakMapObject",""],["NonIncrementalGC","Performs a non-incremental collection of all selected zones."],["NotifyGCRootsRemoved",""],["NumberToString","Store in |out| the null-terminated, base-10 result of |ToString| applied to |d| per https://tc39.es/ecma262/#sec-tostring-applied-to-the-number-type. (This will produce “NaN”, “-Infinity”, or “Infinity” for non-finite |d|.)"],["ObjectIsDate","On success, returns true, setting |*isDate| to true if |obj| is a Date object or a wrapper around one, or to false if not.  Returns false on failure."],["ObjectIsRegExp","On success, returns true, setting |*isRegExp| to true if |obj| is a RegExp object or a wrapper around one, or to false if not.  Returns false on failure."],["ObjectToCompletePropertyDescriptor",""],["OrdinaryHasInstance",""],["OrdinaryToPrimitive","ES6 draft 20141224, 7.1.1, second algorithm."],["PeakSizeOfTemporary",""],["PrepareForFullGC","Schedule all zones to be collected in the next GC."],["PrepareForIncrementalGC","When performing an incremental GC, the zones that were selected for the previous incremental slice must be selected in subsequent slices as well. This function selects those slices automatically."],["PrepareZoneForGC","Schedule the given zone to be collected as part of the next GC."],["PrintError",""],["PrintError1",""],["PropertySpecNameEqualsId",""],["PropertySpecNameToPermanentId","Create a jsid that does not need to be marked for GC."],["ProtoKeyToId",""],["ReadableStreamCancel","Cancels the given ReadableStream with the given reason and returns a Promise resolved according to the result."],["ReadableStreamClose","Close the given ReadableStream. This is equivalent to `controller.close()` in JS."],["ReadableStreamDefaultReaderRead","C++ equivalent of the `reader.read()` method on default readers (https://streams.spec.whatwg.org/#default-reader-read)."],["ReadableStreamEnqueue","Enqueues the given chunk in the given ReadableStream."],["ReadableStreamError","Errors the given ReadableStream, causing all future interactions to fail with the given error value."],["ReadableStreamGetDesiredSize","Retrieves the desired combined size of additional chunks to fill the given ReadableStream’s queue. Stores the result in |value| and sets |hasValue| to true on success, returns false on failure."],["ReadableStreamGetExternalUnderlyingSource","Returns the embedding-provided underlying source of the given |stream|."],["ReadableStreamGetMode","Returns the stream’s ReadableStreamMode. If the mode is |Byte| or |ExternalSource|, it’s possible to acquire a BYOB reader for more optimized operations."],["ReadableStreamGetReader","Creates a reader of the type specified by the mode option and locks the stream to the new reader."],["ReadableStreamIsDisturbed","Returns true if the given ReadableStream is disturbed, false if not."],["ReadableStreamIsLocked","Returns true if the given ReadableStream is locked, false if not."],["ReadableStreamIsReadable","Returns true if the given ReadableStream is readable, false if not."],["ReadableStreamReaderCancel","C++ equivalent of `reader.cancel(reason)` (both https://streams.spec.whatwg.org/#default-reader-cancel and https://streams.spec.whatwg.org/#byob-reader-cancel)."],["ReadableStreamReaderIsClosed","Returns true if the given ReadableStream reader is locked, false otherwise."],["ReadableStreamReaderReleaseLock","C++ equivalent of `reader.releaseLock()` (both https://streams.spec.whatwg.org/#default-reader-release-lock and https://streams.spec.whatwg.org/#byob-reader-release-lock)."],["ReadableStreamReleaseCCObject","Break the cycle between this object and the nsISupportsObject_alreadyAddreffed passed in NewReadableExternalSourceStreamObject()."],["ReadableStreamReleaseExternalUnderlyingSource","Releases the embedding-provided underlying source of the given |stream|, returning the stream into an unlocked state."],["ReadableStreamTee","Tees the given ReadableStream and stores the two resulting streams in outparams. Returns false if the operation fails, e.g. because the stream is locked."],["ReadableStreamUpdateDataAvailableFromSource","Update the amount of data available at the underlying source of the given |stream|."],["RealmBehaviorsRef",""],["RealmBehaviorsRef1",""],["RealmCreationOptionsRef",""],["RealmCreationOptionsRef1",""],["RejectPromise","Rejects the given `promise` with the given `rejectionValue`."],["ReleaseMappedArrayBufferContents","Release the allocated resource of mapped ArrayBuffer contents before the object is created. If a new object has been created by JS::NewMappedArrayBufferWithContents() with this content, then JS::DetachArrayBuffer() should be used instead to release the resource used by the object."],["RemoveAssociatedMemory","Advise the GC that external memory reported by JS::AddAssociatedMemory() is no longer owned by a JSObject. Calls must match those to AddAssociatedMemory()."],["ResetTimeZone","Re-query the system to determine the current time zone adjustment from UTC, including any component due to DST.  If the time zone has changed, this will cause all Date object non-UTC methods and formatting functions to produce appropriately adjusted results."],["ResolvePromise","Resolves the given Promise with the given `resolutionValue`."],["RunIdleTimeGCTask",""],["RuntimeHeapState",""],["SameValue","Stores |SameValue(v1, v2)| to |*equal| – using the SameValue operation defined in ECMAScript, initially exposed to script as |Object.is|.  SameValue behaves identically to strict equality, except that it equates two NaN values and does not equate differently-signed zeroes.  It performs no conversions on |v1| or |v2| before comparing."],["SetAdd",""],["SetArrayLength","Perform |obj.length = length| as if in strict mode code, with a fast path for the case where |obj| is an Array."],["SetClear",""],["SetDOMProxyInformation",""],["SetDelete",""],["SetDestroyRealmCallback",""],["SetDoCycleCollectionCallback","The purge gray callback is called after any COMPARTMENT_REVIVED GC in which the majority of compartments have been marked gray."],["SetEntries",""],["SetFilenameValidationCallback",""],["SetForEach",""],["SetGCNurseryCollectionCallback","Set the nursery collection callback for the given runtime. When set, it will be called at the start and end of every nursery collection."],["SetGCSliceCallback","The GC slice callback is called at the beginning and end of each slice. This callback may be used for GC notifications as well as to perform additional marking."],["SetGetElementCallback",""],["SetHas",""],["SetHostCleanupFinalizationRegistryCallback",""],["SetJobQueue","Tell SpiderMonkey to use `queue` to schedule promise reactions."],["SetKeys",""],["SetLargeArrayBuffersEnabled","Enable or disable support for large (>= 2 GB) ArrayBuffers on 64-bit builds. Has no effect on 32-bit builds."],["SetLowMemoryState",""],["SetModuleDynamicImportHook","Set the HostImportModuleDynamically hook for the runtime to the given function."],["SetModuleMetadataHook","Set the hook for populating the import.meta metadata object to the given function."],["SetModulePrivate","Set a private value associated with a source text module record."],["SetModuleResolveHook","Set the HostResolveImportedModule hook for the runtime to the given function."],["SetOutOfMemoryCallback",""],["SetPendingExceptionStack",""],["SetPrivate","Set the private value for |obj|."],["SetProcessBuildIdOp","Embedder hook to set the buildId-generating function."],["SetProcessLargeAllocationFailureCallback",""],["SetProfileTimelineRecordingEnabled","Tell JS engine whether Profile Timeline Recording is enabled or not. If Profile Timeline Recording is enabled, data shown there like stack won’t be optimized out. This is global state and not associated with specific runtime or context."],["SetProfilingThreadCallbacks",""],["SetPromiseRejectionTrackerCallback","Sets the callback that’s invoked whenever a Promise is rejected without a rejection handler, and when a Promise that was previously rejected without a handler gets a handler attached."],["SetPromiseUserInputEventHandlingState","Sets the given Promise’s activation behavior state flag per above as a JS::PromiseUserInputEventHandlingState value."],["SetRealmNameCallback",""],["SetRealmNonLive",""],["SetRealmPrincipals",""],["SetRealmPrivate",""],["SetReduceMicrosecondTimePrecisionCallback",""],["SetRegExpInput",""],["SetScriptPrivate","Set a private value associated with a script. Note that this value is shared by all nested scripts compiled from a single source file."],["SetScriptPrivateReferenceHooks","Set the script private finalize hook for the runtime to the given function."],["SetSettledPromiseIsHandled",""],["SetSize",""],["SetTimeResolutionUsec",""],["SetUseOffThreadParseGlobal",""],["SetValues",""],["SetWaitCallback",""],["SetWarningReporter",""],["SetWeakMapEntry",""],["ShutdownAsyncTasks","When a JSRuntime is destroyed it implicitly cancels all async tasks in progress, releasing any roots held by the task. However, this is not soon enough for cycle collection, which needs to have roots dropped earlier so that the cycle collector can transitively remove roots for a future GC. For these and other cases, the set of pending async tasks can be canceled with this call earlier than JSRuntime destruction."],["SkipZoneForGC","Undoes the effect of the Prepare methods above. The given zone will not be collected in the next GC."],["StartIncrementalGC","Begin an incremental collection and perform one slice worth of work. When this function returns, the collection may not be complete. IncrementalGCSlice() must be called repeatedly until !IsIncrementalGCInProgress(cx)."],["StealArrayBufferContents","Steal the contents of the given ArrayBuffer. The ArrayBuffer has its length set to 0 and its contents array cleared. The caller takes ownership of the return value and must free it or transfer ownership via JS::NewArrayBufferWithContents when done using it."],["StealPendingExceptionStack",""],["StrictlyEqual","Store |v1 === v2| to |*equal| – strict equality, which performs no conversions on |v1| or |v2| before comparing."],["StringIsASCII",""],["StringIsASCII1",""],["SystemCompartmentCount",""],["SystemRealmCount",""],["ThrowOnModuleEvaluationFailure",""],["ToJSONMaybeSafely","An API akin to JS_Stringify but with the goal of not having observable side-effects when the stringification is performed.  This means it does not allow a replacer or a custom space and has the following constraints on its input:"],["ToPrimitive","Convert obj to a primitive value. On success, store the result in vp and return true."],["TraceChildren",""],["UTF8CharsToNewLatin1CharsZ",""],["UTF8CharsToNewTwoByteCharsZ",""],["UTF8CharsToNewTwoByteCharsZ1",""],["UnhideScriptedCaller",""],["UnmarkGrayGCThingRecursively","Unsets the gray bit for anything reachable from |thing|. |kind| should not be JS::TraceKind::Shape. |thing| should be non-null. The return value indicates if anything was unmarked."],["UnsafeTraceRoot",""],["UnsafeTraceRoot1",""],["UnsafeTraceRoot10",""],["UnsafeTraceRoot11",""],["UnsafeTraceRoot2",""],["UnsafeTraceRoot3",""],["UnsafeTraceRoot4",""],["UnsafeTraceRoot5",""],["UnsafeTraceRoot6",""],["UnsafeTraceRoot7",""],["UnsafeTraceRoot8",""],["UnsafeTraceRoot9",""],["UnwrapArrayBuffer",""],["UserCompartmentCount",""],["UserRealmCount",""],["Utf8ToOneUcs4Char",""],["WarnASCII","Report a warning represented by the sprintf-like conversion of ASCII format filled from trailing ASCII arguments."],["WarnLatin1","Report a warning represented by the sprintf-like conversion of Latin-1 format filled from trailing Latin-1 arguments."],["WarnUTF8","Report a warning represented by the sprintf-like conversion of UTF-8 format filled from trailing UTF-8 arguments."],["WasIncrementalGC","Returns true if the most recent GC ran incrementally."],["YearFromTime",""],["ZoneIsCollecting",""]],"mod":[["dbg",""],["detail",""],["shadow",""]],"static":[["NullHandleValue",""],["TracingContext_InvalidIndex",""],["TrueHandleValue",""],["UndefinedHandleValue",""]],"struct":[["AllFrames","Capture all frames."],["AutoAssertGCCallback","Assert that code is only ever called from a GC callback, disable the static rooting hazard analysis and assert if any allocation that could potentially trigger a GC occurs while this guard object is live."],["AutoAssertNoGC","Diagnostic assert (see MOZ_DIAGNOSTIC_ASSERT) that GC cannot occur while this class is live. This class does not disable the static rooting hazard analysis."],["AutoCheckCannotGC",""],["AutoClearTracingContext",""],["AutoDebuggerJobQueueInterruption","[SMDOC] Protecting the debuggee’s job/microtask queue from debugger activity."],["AutoDisableGenerationalGC","Ensure that generational GC is disabled within some scope."],["AutoEnterCycleCollection",""],["AutoFilename",""],["AutoGCRooter",""],["AutoHideScriptedCaller",""],["AutoHoldPrincipals",""],["AutoRequireNoGC","Pass a subclass of this “abstract” class to callees to require that they never GC. Subclasses can use assertions or the hazard analysis to ensure no GC happens."],["AutoSaveExceptionState","Save and later restore the current exception state of a given JSContext. This is useful for implementing behavior in C++ that’s like try/catch or try/finally in JS."],["AutoSetAsyncStackForNewCalls","Supply an alternative stack to incorporate into captured SavedFrame backtraces as the imputed caller of asynchronous JavaScript calls, like async function resumptions and DOM callbacks."],["AutoSuppressGCAnalysis",""],["AutoSuppressWarningReporter","A simple RAII class that clears the registered warning reporter on construction and restores it on destruction."],["AutoTracingDetails",""],["AutoTracingIndex",""],["AutoTracingName",""],["BigInt",""],["CallArgs",""],["CallbackTracer",""],["ClassInfo",""],["ClippedTime",""],["CloneDataPolicy",""],["CodeSizes","Data for tracking JIT-code memory usage."],["Compartment",""],["CompileOptions","Compilation options stored on the stack. An instance of this type simply holds references to dynamically allocated resources (element; filename; source map URL) that are owned by something else. If you create an instance of this type, it’s up to you to guarantee that everything you store in it will outlive it."],["ConstLatin1Chars",""],["ConstTwoByteChars",""],["ConstUTF8CharsZ",""],["ContextOptions",""],["CustomAutoRooter","Custom rooting behavior for internal and external clients."],["CustomAutoRooter__bindgen_vtable",""],["DeletePolicy",""],["Dispatchable","The Dispatchable interface allows the embedding to call SpiderMonkey on a JSContext thread when requested via DispatchToEventLoopCallback."],["Dispatchable__bindgen_vtable",""],["Error","Type representing a JS error or exception. At the moment this only “represents” an error in a rather abstract way."],["ErrorReportBuilder",""],["ExceptionStack",""],["ExpandoAndGeneration",""],["FirstSubsumedFrame","Capture the first frame with the given principals. By default, do not consider self-hosted frames with the given principals as satisfying the stack capture."],["ForOfIterator","A convenience class for imitating a JS for-of loop. Typical usage:"],["FreePolicy",""],["GCCellPtr","A GC pointer, tagged with the trace kind."],["GCDescription",""],["GCPointerPolicy",""],["GCPolicy",""],["GCSizes","Data for tracking GC memory usage."],["GlobalStats","Measurements that not associated with any individual runtime."],["Handle","Reference to a T that has been rooted elsewhere. This is most useful as a parameter type, which guarantees that the T lvalue is properly rooted. See “Move GC Stack Rooting” above."],["HandleObjectVector",""],["HandleValueArray","A generic handle to an array of rooted values."],["HelperThreadStats",""],["IgnoreGCPolicy",""],["IsBaseTraceType",""],["JSTimers","Timing information for telemetry purposes"],["JobQueue","Abstract base class for an ECMAScript Job Queue: https://www.ecma-international.org/ecma-262/9.0/index.html#sec-jobs-and-job-queues"],["JobQueue_SavedJobQueue","A saved job queue, represented however the JobQueue implementation pleases. Use AutoDebuggerJobQueueInterruption rather than trying to construct one of these directly; see documentation there."],["JobQueue_SavedJobQueue__bindgen_vtable",""],["JobQueue__bindgen_vtable",""],["Latin1Chars",""],["Latin1CharsZ",""],["MapTypeToRootKind",""],["MapTypeToTraceKind",""],["MaxFrames","Capture at most this many frames."],["MutableHandle","Similar to a handle, but the underlying storage can be changed. This is useful for outparams."],["MutableHandleIdVector",""],["MutableHandleObjectVector",""],["NonGCPointerPolicy",""],["NotableClassInfo","Holds data about a notable class (one whose combined object and shape instances use more than a certain amount of memory) so we can report it individually."],["NotableScriptSourceInfo","Holds data about a notable script source file (one whose combined script sources use more than a certain amount of memory) so we can report it individually."],["NotableStringInfo","Holds data about a notable string (one which, counting all duplicates, uses more than a certain amount of memory) so we can report it individually."],["OOM",""],["ObjectOpResult","Per ES6, the [[DefineOwnProperty]] internal method has three different possible outcomes:"],["ObjectPrivateVisitor",""],["ObjectPrivateVisitor__bindgen_vtable",""],["OffThreadToken",""],["OptimizedEncodingListener",""],["OptimizedEncodingListener__bindgen_vtable",""],["OwningCompileOptions","Compilation options, with dynamic lifetime. An instance of this type makes a copy of / holds / roots all dynamically allocated resources (principals; elements; strings) that it refers to. Its destructor frees / drops / unroots them. This is heavier than CompileOptions, below, but unlike CompileOptions, it can outlive any given stack frame."],["PersistentRooted","A copyable, assignable global GC root type with arbitrary lifetime, an infallible constructor, and automatic unrooting on destruction."],["PersistentRootedVector",""],["ProfilingCategoryPairInfo",""],["PropertyDescriptor","A structure that represents a property on an object, or the absence of a property.  Use {,Mutable}Handle to interact with instances of this structure rather than interacting directly with member fields."],["PropertyKey",""],["PropertyResult",""],["ReadOnlyCompileOptions","The class representing a full set of compile options."],["ReadableStreamUnderlyingSource","Abstract base class for external underlying sources."],["ReadableStreamUnderlyingSource__bindgen_vtable",""],["Realm",""],["RealmBehaviors","RealmBehaviors specifies behaviors of a realm that can be changed after the realm’s been created."],["RealmBehaviors_Override",""],["RealmCreationOptions","RealmCreationOptions specifies options relevant to creating a new realm, that are either immutable characteristics of that realm or that are discarded after the realm has been created."],["RealmOptions","RealmOptions specifies realm characteristics: both those that can’t be changed on a realm once it’s been created (RealmCreationOptions), and those that can be changed on an existing realm (RealmBehaviors)."],["RealmStats",""],["RegExpFlag","Regular expression flag values, suitable for initializing a collection of regular expression flags as defined below in |RegExpFlags|.  Flags are listed in alphabetical order by syntax – /d, /g, /i, /m, /s, /u, /y."],["RegExpFlags","A collection of regular expression flags.  Individual flag values may be combined into a collection using bitwise operators."],["Rooted_CtorDispatcher",""],["RootingContext",""],["Runtime",""],["RuntimeSizes","These measurements relate directly to the JSRuntime, and not to zones, compartments, and realms within it."],["RuntimeStats",""],["RuntimeStats__bindgen_vtable",""],["ScriptSourceInfo","This class holds information about the memory taken up by script sources from a particular file."],["ServoSizes","These are the measurements used by Servo."],["ShapeInfo",""],["SourceText",""],["StackGCVector",""],["StreamConsumer",""],["StreamConsumer__bindgen_vtable",""],["StringInfo","This class holds information about the memory taken up by identical copies of a particular string.  Multiple JSStrings may have their sizes aggregated together into one StringInfo object.  Note that two strings with identical chars will not be aggregated together if one is a short string and the other is not."],["StructGCPolicy",""],["Symbol",""],["TabSizes",""],["TenuredHeap","The TenuredHeap class is similar to the Heap class above in that it encapsulates the GC concerns of an on-heap reference to a JS object. However, it has two important differences:"],["TraceOptions",""],["TracingContext",""],["TracingContext_Functor",""],["TracingContext_Functor__bindgen_vtable",""],["TranscodeSource",""],["TransitiveCompileOptions","The common base class for the CompileOptions hierarchy."],["TransitiveCompileOptions__bindgen_vtable",""],["TwoByteChars",""],["TwoByteCharsZ",""],["UTF8Chars",""],["UTF8CharsZ",""],["UnusedGCThingSizes",""],["UnusedZero",""],["Value","[SMDOC] JS::Value type"],["WasmModule","The WasmModule interface allows the embedding to hold a reference to the underying C++ implementation of a JS WebAssembly.Module object for purposes of efficient postMessage() and (de)serialization from a random thread."],["WasmModule__bindgen_vtable",""],["WritableStreamUnderlyingSink",""],["WritableStreamUnderlyingSink__bindgen_vtable",""],["Zone",""],["ZoneStats",""]],"type":[["AbortSignalIsAborted","The signature of a function that, when passed an |AbortSignal| instance, will return the value of its “aborted” flag."],["AfterWaitCallback",""],["AutoRooterListHeads",""],["BeforeWaitCallback",""],["BufferContentsFreeFunc",""],["BuildIdCharVector","Vector of characters used for holding build ids."],["BuildIdOp","Return the buildId (represented as a sequence of characters) associated with the currently-executing build. If the JS engine is embedded such that a single cache entry can be observed by different compiled versions of the JS engine, it is critical that the buildId shall change for each new build of the JS engine."],["ConstCharPtr",""],["ConstLatin1Chars_Base",""],["ConstLatin1Chars_CharT",""],["ConstTwoByteChars_Base",""],["ConstTwoByteChars_CharT",""],["ConstUTF8CharsZ_CharT",""],["ConsumeStreamCallback",""],["DOMProxyShadowsCheck",""],["DestroyRealmCallback",""],["DispatchToEventLoopCallback","Callback to dispatch a JS::Dispatchable to a JSContext’s thread’s event loop."],["DoCycleCollectionCallback",""],["FilenameValidationCallback","Install a process-wide callback to validate script filenames. The JS engine will invoke this callback for each JS script it parses or XDR decodes."],["GCNurseryCollectionCallback","A nursery collection callback receives the progress of the nursery collection and the reason for the collection."],["GCSliceCallback",""],["GCVector_ElementType",""],["HandleBigInt",""],["HandleFunction",""],["HandleId",""],["HandleIdVector",""],["HandleObject",""],["HandleScript",""],["HandleString",""],["HandleSymbol",""],["HandleValue",""],["HandleValueVector",""],["Handle_ElementType",""],["Heap",""],["Heap_ElementType",""],["IdVector",""],["IsAcceptableThis",""],["IterateRealmCallback",""],["LargeAllocationFailureCallback","If a large allocation fails when calling pod_{calloc,realloc}CanGC, the JS engine may call the large-allocation-failure callback, if set, to allow the embedding to flush caches, possibly perform shrinking GCs, etc. to make some room. The allocation will then be retried (and may still fail.) This callback can be called on any thread and must be set at most once in a process."],["Latin1Char",""],["Latin1CharsZ_Base",""],["Latin1CharsZ_CharT",""],["Latin1Chars_Base",""],["Latin1Chars_CharT",""],["ModuleDynamicImportHook",""],["ModuleMetadataHook",""],["ModuleResolveHook",""],["MutableHandleBigInt",""],["MutableHandleFunction",""],["MutableHandleId",""],["MutableHandleObject",""],["MutableHandleScript",""],["MutableHandleString",""],["MutableHandleSymbol",""],["MutableHandleValue",""],["MutableHandleValueVector",""],["MutableHandle_ElementType",""],["NativeImpl",""],["ObjectPrivateVisitor_GetISupportsFun",""],["OffThreadCompileCallback",""],["OptimizedEncodingBytes","The ConsumeStreamCallback is called from an active JSContext, passing a StreamConsumer that wishes to consume the given host object as a stream of bytes with the given MIME type. On failure, the embedding must report the appropriate error on ‘cx’. On success, the embedding must call consumer->consumeChunk() repeatedly on any thread until exactly one of:"],["OutOfMemoryCallback","Unlike the error reporter, which is only called if the exception for an OOM bubbles up and is not caught, the OutOfMemoryCallback is called immediately at the OOM site to allow the embedding to capture the current state of heap allocation before anything is freed. If the large-allocation-failure callback is called at all (not all allocation sites call the large-allocation-failure callback on failure), it is called before the out-of-memory callback; the out-of-memory callback is only called if the allocation still fails after the large-allocation-failure callback has returned."],["PersistentRootedBigInt",""],["PersistentRootedFunction",""],["PersistentRootedId",""],["PersistentRootedIdVector",""],["PersistentRootedObject",""],["PersistentRootedObjectVector",""],["PersistentRootedScript",""],["PersistentRootedString",""],["PersistentRootedSymbol",""],["PersistentRootedValue",""],["PersistentRootedVector_Base",""],["PersistentRootedVector_Vec",""],["PersistentRooted_ElementType",""],["PersistentRooted_ListBase",""],["PersistentRooted_Ptr",""],["PersistentRooted_PtrTraits",""],["PromiseRejectionTrackerCallback",""],["RealmNameCallback",""],["RealmStatsVector",""],["RealmStats_ClassesHashMap",""],["ReduceMicrosecondTimePrecisionCallback",""],["RegExpFlags_Flag",""],["RegisterThreadCallback",""],["ReportStreamErrorCallback",""],["Result","`Result` is intended to be the return type of JSAPI calls and internal functions that can run JS code or allocate memory from the JS GC heap. Such functions can:"],["Rooted",""],["RootedBigInt",""],["RootedFunction",""],["RootedId",""],["RootedListHeads",""],["RootedObject",""],["RootedScript",""],["RootedString",""],["RootedSymbol",""],["RootedValue",""],["RootedVector_Base",""],["RootedVector_Vec",""],["Rooted_ElementType",""],["Rooted_Ptr",""],["Rooted_PtrTraits",""],["RuntimeSizes_ScriptSourcesHashMap",""],["ScriptPrivateReferenceHook","Hooks called when references to a script private value are created or destroyed. This allows use of a reference counted object as the script private."],["ScriptVector",""],["SourceText_CharT",""],["StackCapture",""],["StackGCVector_Base",""],["StringVector",""],["TenuredHeap_ElementType",""],["TranscodeBuffer",""],["TranscodeRange",""],["TranscodeSources",""],["TwoByteCharsZ_Base",""],["TwoByteCharsZ_CharT",""],["TwoByteChars_Base",""],["TwoByteChars_CharT",""],["UTF8CharsZ_Base",""],["UTF8CharsZ_CharT",""],["UTF8Chars_Base",""],["UTF8Chars_CharT",""],["UniqueChars",""],["UniqueLatin1Chars",""],["UniqueOptimizedEncodingBytes",""],["UniqueTwoByteChars",""],["UnregisterThreadCallback",""],["UnusedZero_StorageType",""],["ValueVector",""],["Value_PayloadType",""],["WarningReporter",""],["ZoneStatsVector",""],["ZoneStats_StringsHashMap",""]],"union":[["PropertyResult__bindgen_ty_1",""],["RealmCreationOptions__bindgen_ty_1",""]]});