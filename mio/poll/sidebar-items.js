initSidebarItems({"constant":[["AWAKEN",""],["DROPPED_MASK",""],["DROPPED_SHIFT",""],["INTEREST_SHIFT",""],["MASK_2",""],["MASK_4",""],["MAX_REFCOUNT",""],["POLL_OPT_SHIFT",""],["QUEUED_MASK",""],["QUEUED_SHIFT",""],["READINESS_SHIFT",""],["TOKEN_RD_SHIFT",""],["TOKEN_WR_SHIFT",""]],"enum":[["Dequeue","Returned by `dequeue_node`. Represents the different states as described by the queue documentation on 1024cores.net."]],"fn":[["enqueue_with_wakeup",""],["is_send",""],["is_sync",""],["new_registration",""],["release_node",""],["selector",""],["token",""],["validate_args",""]],"struct":[["AtomicState","Stores the ReadinessNode state in an AtomicUsize. This wrapper around the atomic variable handles encoding / decoding `ReadinessState` values."],["Events","A collection of readiness events."],["IntoIter","Owned `Events` iterator."],["Iter","`Events` iterator."],["Poll","Polls for readiness events on all registered values."],["ReadinessNode","Node shared by a `Registration` / `SetReadiness` pair as well as the node queued into the MPSC channel."],["ReadinessQueue",""],["ReadinessQueueInner",""],["ReadinessState","Tracks all state for a single `ReadinessNode`. The state is packed into a `usize` variable from low to high bit as follows:"],["Registration","Handle to a user space `Poll` registration."],["RegistrationInner",""],["SelectorId","Used to associate an IO type with a Selector"],["SetReadiness","Updates the readiness state of the associated `Registration`."]]});