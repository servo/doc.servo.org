initSidebarItems({"enum":[["Bound","An endpoint of a range of keys."],["Cow","A clone-on-write smart pointer."],["Result","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`])."]],"macro":[["Clone","Derive macro generating an impl of the trait `Clone`."],["Debug","Derive macro generating an impl of the trait `Debug`."],["Default","Derive macro generating an impl of the trait `Default`."],["Hash","Derive macro generating an impl of the trait `Hash`."]],"mod":[["borrow","A module for working with borrowed data."],["btree_map","A map based on a B-Tree."],["char","A character type."],["clone","The `Clone` trait for types that cannot be ‘implicitly copied’."],["cmp","Functionality for ordering and comparison."],["convert","Traits for conversions between types."],["core",""],["default","The `Default` trait for types which may have meaningful default values."],["error","Traits for working with Errors."],["fmt","Utilities for formatting and printing `String`s."],["hash","Generic hashing support."],["iter","Composable external iteration."],["marker","Primitive traits and types representing basic properties of types."],["mem","Basic functions for dealing with memory."],["num","Additional functionality for numerics."],["ops","Overloadable operators."],["result","Error handling with the `Result` type."],["slice","A dynamically-sized view into a contiguous sequence, `[T]`."],["str","Unicode string slices."],["vec","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."]],"struct":[["BTreeMap","A map based on a B-Tree."],["Box","A pointer type for heap allocation."],["Cell","A mutable memory location."],["PhantomData","Zero-sized type used to mark things that “act like” they own a `T`."],["RefCell","A mutable memory location with dynamically checked borrow rules"],["String","A UTF-8–encoded, growable string."],["Vec","A contiguous growable array type, written as `Vec<T>` and pronounced ‘vector’."]],"trait":[["Clone","A common trait for the ability to explicitly duplicate an object."],["Debug","`?` formatting."],["Default","A trait for giving a type a useful default value."],["Display","Format trait for an empty format, `{}`."],["From","Used to do value-to-value conversions while consuming the input value. It is the reciprocal of [`Into`]."],["FusedIterator","An iterator that always continues to yield `None` when exhausted."],["Hash","A hashable type."],["Into","A value-to-value conversion that consumes the input value. The opposite of [`From`]."],["RangeBounds","`RangeBounds` is implemented by Rust’s built-in range types, produced by range syntax like `..`, `a..`, `..b`, `..=c`, `d..e`, or `f..=g`."],["ToOwned","A generalization of `Clone` to borrowed data."],["ToString","A trait for converting a value to a `String`."]]});