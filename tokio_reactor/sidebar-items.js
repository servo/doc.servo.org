initSidebarItems({"constant":[["CURRENT_REACTOR","Tracks the reactor for the current execution context."],["MAX_SOURCES",""],["TOKEN_SHIFT",""],["TOKEN_WAKEUP",""]],"enum":[["Direction",""]],"fn":[["_assert_kinds",""],["set_default","Sets `handle` as the default reactor, returning a guard that unsets it when dropped."],["set_fallback",""],["with_default","Set the default reactor for the duration of the closure"]],"mod":[["background",""],["platform",""],["poll_evented",""],["registration",""],["sharded_rwlock","A scalable reader-writer lock."]],"static":[["HANDLE_FALLBACK","The global fallback reactor."]],"struct":[["Background","Handle to the reactor running on a background thread."],["DefaultGuard","Ensure that the default reactor is removed from the thread-local context when leaving the scope. This handles cases that involve panicking."],["Handle","A reference to a reactor."],["HandlePriv","Like `Handle`, but never `None`."],["Inner",""],["PollEvented","Associates an I/O resource that implements the `std::io::Read` and/or `std::io::Write` traits with the reactor that drives it."],["Reactor","The core reactor, or event loop."],["Registration","Associates an I/O resource with the reactor instance that drives it."],["ScheduledIo",""],["SetFallbackError","Error returned from `Handle::set_fallback`."],["Shutdown","Future that resolves when the reactor thread has shutdown."],["Turn","Return value from the `turn` method on `Reactor`."]]});