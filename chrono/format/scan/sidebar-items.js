initSidebarItems({"fn":[["char","Tries to consume exactly one given character."],["colon_or_space","Consumes any number (including zero) of colon or spaces."],["equals","Returns true when two slices are equal case-insensitively (in ASCII). Assumes that the `pattern` is already converted to lower case."],["nanosecond","Tries to consume at least one digits as a fractional second. Returns the number of whole nanoseconds (0–999,999,999)."],["nanosecond_fixed","Tries to consume a fixed number of digits as a fractional second. Returns the number of whole nanoseconds (0–999,999,999)."],["number","Tries to parse the non-negative number from `min` to `max` digits."],["short_month0","Tries to parse the month index (0 through 11) with the first three ASCII letters."],["short_or_long_month0","Tries to parse the month index (0 through 11) with short or long month names. It prefers long month names to short month names when both are possible."],["short_or_long_weekday","Tries to parse the weekday with short or long weekday names. It prefers long weekday names to short weekday names when both are possible."],["short_weekday","Tries to parse the weekday with the first three ASCII letters."],["space","Tries to consume one or more whitespace."],["timezone_offset","Tries to parse `[-+]\\d\\d` continued by `\\d\\d`. Return an offset in seconds if possible."],["timezone_offset_2822","Same as `timezone_offset` but also allows for RFC 2822 legacy timezones. May return `None` which indicates an insufficient offset data (i.e. `-0000`)."],["timezone_offset_internal",""],["timezone_offset_permissive","Same as `timezone_offset` but also allows for `z`/`Z` which is the same as `+00:00`, and allows missing minutes entirely."],["timezone_offset_zulu","Same as `timezone_offset` but also allows for `z`/`Z` which is the same as `+00:00`."]]});