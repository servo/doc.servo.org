initSidebarItems({"fn":[["execute","Runs an unzip-like operation into default `ParallelExtend` collections."],["execute_into","Runs an unzip-like operation into `ParallelExtend` collections."],["partition","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers."],["partition_map","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers."],["unzip","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers."],["unzip_indexed","Unzips an `IndexedParallelIterator` into two arbitrary `Consumer`s."]],"struct":[["Partition","An `UnzipOp` that routes items depending on a predicate function."],["PartitionMap","An `UnzipOp` that routes items depending on how they are mapped `Either`."],["UnEither","An `UnzipOp` that routes items depending on their `Either` variant."],["Unzip","An `UnzipOp` that splits a tuple directly into the two consumers."],["UnzipA","A fake iterator to intercept the `Consumer` for type `A`."],["UnzipB","A fake iterator to intercept the `Consumer` for type `B`."],["UnzipConsumer","`Consumer` that unzips into two other `Consumer`s"],["UnzipFolder","`Folder` that unzips into two other `Folder`s"],["UnzipReducer","`Reducer` that unzips into two other `Reducer`s"]],"trait":[["UnzipOp","This trait abstracts the different ways we can “unzip” one parallel iterator into two distinct consumers, which we can handle almost identically apart from how to process the individual items."]]});