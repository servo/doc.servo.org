initSidebarItems({"constant":[["MAX_RECEIVERS","Max number of receivers. Reserve space to lock."]],"enum":[["RecvError","An error returned from the `recv` function on a `Receiver`."],["TryRecvError","An error returned from the `try_recv` function on a `Receiver`."]],"fn":[["channel","Create a bounded, multi-producer, multi-consumer channel where each sent value is broadcasted to all active receivers."],["is_unpin",""]],"struct":[["Borrow","`AsMut<T>` is not implemented for `T` (coherence). Explicitly implementing `AsMut` for `Receiver` would be included in the public API of the receiver type. Instead, `Borrow` is used internally to bridge the gap."],["Receiver","Receiving-half of the `broadcast` channel."],["Recv","Receive a value future"],["RecvGuard",""],["SendError","Error returned by [`Sender::send`][Sender::send]."],["Sender","Sending-half of the `broadcast` channel."],["Shared","Data shared between senders and receivers"],["Slot","Slot in the buffer"],["Tail","Next position to write a value"],["Waiter","An entry in the wait queue"]]});