initSidebarItems({"enum":[["Kind","The runtime executor is either a thread-pool or a current-thread executor."]],"mod":[["basic_scheduler",""],["blocking","Abstracts out the APIs necessary to `Runtime` for integrating the blocking pool. When the `blocking` feature flag is not enabled, these APIs are shells. This isolates the complexity of dealing with conditional compilation."],["builder",""],["context","Thread local runtime context"],["enter",""],["handle",""],["io","Abstracts out the APIs necessary to `Runtime` for integrating the I/O driver. When the `time` feature flag is not enabled. These APIs are shells. This isolates the complexity of dealing with conditional compilation."],["park","Parks the runtime."],["queue","Run-queue structures to support a work-stealing scheduler"],["shell",""],["spawner",""],["task",""],["thread_pool","Threadpool"],["time","Abstracts out the APIs necessary to `Runtime` for integrating the time driver. When the `time` feature flag is not enabled. These APIs are shells. This isolates the complexity of dealing with conditional compilation."]],"struct":[["Builder","Builds Tokio Runtime with custom configuration values."],["Handle","Handle to the runtime."],["Runtime","The Tokio runtime."],["TryCurrentError","Error returned by `try_current` when no Runtime has been started"]],"type":[["Callback","After thread starts / before thread stops"]]});