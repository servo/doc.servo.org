(function() {var implementors = {};
implementors['core'] = [];implementors['unicase'] = ["<a class='stability Unstable' title='Unstable: Instead of taking this bound generically, this trait will be replaced with one of slicing syntax (&amp;foo[..]), deref coercions, or a more generic conversion trait'></a>impl&lt;S: <a class='trait' href='core/ops/trait.Deref.html' title='core::ops::Deref'>Deref</a>&lt;Target=<a href='std/primitive.str.html'>str</a>&gt;&gt; <a class='trait' href='core/str/trait.Str.html' title='core::str::Str'>Str</a> for <a class='struct' href='unicase/struct.UniCase.html' title='unicase::UniCase'>UniCase</a>&lt;S&gt;",];implementors['util'] = ["<a class='stability Unstable' title='Unstable: Instead of taking this bound generically, this trait will be replaced with one of slicing syntax (&amp;foo[..]), deref coercions, or a more generic conversion trait'></a>impl <a class='trait' href='core/str/trait.Str.html' title='core::str::Str'>Str</a> for <a class='struct' href='util/str/struct.LowercaseString.html' title='util::str::LowercaseString'>LowercaseString</a>",];implementors['style'] = ["<a class='stability Unstable' title='Unstable: Instead of taking this bound generically, this trait will be replaced with one of slicing syntax (&amp;foo[..]), deref coercions, or a more generic conversion trait'></a>impl <a class='trait' href='core/str/trait.Str.html' title='core::str::Str'>Str</a> for <a class='struct' href='util/str/struct.LowercaseString.html' title='util::str::LowercaseString'>LowercaseString</a>",];implementors['script'] = ["<a class='stability Unstable' title='Unstable: Instead of taking this bound generically, this trait will be replaced with one of slicing syntax (&amp;foo[..]), deref coercions, or a more generic conversion trait'></a>impl <a class='trait' href='core/str/trait.Str.html' title='core::str::Str'>Str</a> for <a class='enum' href='script/dom/attr/enum.AttrValue.html' title='script::dom::attr::AttrValue'>AttrValue</a>",];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
