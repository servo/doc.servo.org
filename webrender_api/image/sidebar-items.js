initSidebarItems({"constant":[["DEFAULT_TILE_SIZE","The default tile size for blob images and regular images larger than the maximum texture size."],["_DERIVE_peek_poke_Peek_FOR_ColorDepth",""],["_DERIVE_peek_poke_Peek_FOR_ImageKey",""],["_DERIVE_peek_poke_Poke_FOR_ColorDepth",""],["_DERIVE_peek_poke_Poke_FOR_ImageKey",""]],"enum":[["BlobImageError","Error code for when blob rasterization failed."],["ColorDepth","Specifies the color depth of an image. Currently only used for YUV images."],["DirtyRect","The possible states of a Dirty rect."],["ExternalImageSource","The source for an external image."],["ExternalImageType","Storage format identifier for externally-managed images."],["ImageData","Represents the backing store of an arbitrary series of pixels for display by WebRender. This storage can take several forms."],["ImageFormat","Specifies the format of a series of pixels, in driver terms."],["TextureTarget","Specifies the type of texture target in driver terms."]],"mod":[["serde_image_data_raw",""]],"struct":[["BlobImageDescriptor","Metadata (but not storage) for a blob image."],["BlobImageKey","An opaque identifier describing a blob image registered with WebRender. This is used as a handle to reference blob images, and can be used as an image in display items."],["BlobImageParams","Input parameters for the BlobImageRasterizer."],["BlobImageRequest","A key identifying blob image rasterization work requested from the blob image rasterizer."],["ExternalImage","The data that an external client should provide about an external image. For instance, if providing video frames, the application could call wr.render() whenever a new video frame is ready. Note that the UV coords are supplied in texel-space!"],["ExternalImageData","Descriptor for external image resources. See `ImageData`."],["ExternalImageId","An arbitrary identifier for an external image provided by the application. It must be a unique identifier for each external image."],["ImageDescriptor","Metadata (but not storage) describing an image In WebRender."],["ImageDescriptorFlags","Various flags that are part of an image descriptor."],["ImageKey","An opaque identifier describing an image registered with WebRender. This is used as a handle to reference images, and is used as the hash map key for the actual image storage in the `ResourceCache`."],["RasterizedBlobImage","Representation of a rasterized blob image. This is obtained by passing `BlobImageData` to the embedding via the rasterization callback."]],"trait":[["AsyncBlobImageRasterizer","A group of rasterization requests to execute synchronously on the scene builder thread."],["BlobImageHandler","A handler on the render backend that can create rasterizer objects which will be sent to the scene builder thread to execute the rasterization."],["BlobImageResources","The resources exposed by the resource cache available for use by the blob rasterizer."],["ExternalImageHandler","The interfaces that an application can implement to support providing external image buffers. When the application passes an external image to WR, it should keep that external image life time. People could check the epoch id in RenderNotifier at the client side to make sure that the external image is not used by WR. Then, do the clean up for that external image."],["OutputImageHandler","Allows callers to receive a texture with the contents of a specific pipeline copied to it."]],"type":[["BlobImageData","Backing store for blob image command streams."],["BlobImageResult","Result type for blob raserization."]]});