initSidebarItems({"constant":[["_DERIVE_peek_poke_Peek_FOR_DocumentId",""],["_DERIVE_peek_poke_Peek_FOR_IdNamespace",""],["_DERIVE_peek_poke_Peek_FOR_PipelineId",""],["_DERIVE_peek_poke_Peek_FOR_PropertyBinding",""],["_DERIVE_peek_poke_Peek_FOR_PropertyBindingId",""],["_DERIVE_peek_poke_Peek_FOR_PropertyBindingKey",""],["_DERIVE_peek_poke_Poke_FOR_DocumentId",""],["_DERIVE_peek_poke_Poke_FOR_IdNamespace",""],["_DERIVE_peek_poke_Poke_FOR_PipelineId",""],["_DERIVE_peek_poke_Poke_FOR_PropertyBinding",""],["_DERIVE_peek_poke_Poke_FOR_PropertyBindingId",""],["_DERIVE_peek_poke_Poke_FOR_PropertyBindingKey",""]],"enum":[["AddFont","Creates a font resource."],["ApiMsg","Message sent by the `RenderApi` to the render backend thread."],["Checkpoint","A stage of the rendering pipeline."],["ClipIntern",""],["DebugCommand","Update of the state of built-in debugging facilities."],["FilterDataIntern",""],["FrameMsg","Frame messages affect frame generation (applied after building the scene)."],["PrimitiveKeyKind","Information specific to a primitive type that uniquely identifies a primitive template by key."],["PropertyBinding","A binding property can either be a specific value (the normal, non-animated case) or point to a binding location to fetch the current value from. Note that Binding has also a non-animated value, the value is used for the case where the animation is still in-delay phase (i.e. the animation doesn’t produce any animation values)."],["ResourceUpdate","Update of a persistent resource in WebRender."],["SceneMsg","Frame messages affect building the scene."],["ScrollClamping","Describe whether or not scrolling should be clamped by the content bounds."],["ScrollLocation",""]],"struct":[["AddBlobImage","Creates a blob-image resource with provided parameters."],["AddFontInstance","Creates a font instance resource."],["AddImage","Creates an image resource with provided parameters."],["CaptureBits","Bit flags for WR stages to store in a capture."],["CapturedDocument","Information about a loaded capture of each document that is returned by `RenderBackend`."],["ClearCache","Mask for clearing caches in debug commands."],["DebugFlags","Flags to enable/disable various builtin debugging tools."],["DocumentId","A key uniquely identifying a WebRender document."],["DocumentTransaction",""],["DynamicProperties","When using `generate_frame()`, a list of `PropertyValue` structures can optionally be supplied to provide the current value of any animated properties."],["EdgeAaSegmentMask","Each bit of the edge AA mask is: 0, when the edge of the primitive needs to be considered for AA 1, when the edge of the segment needs to be considered for AA"],["Epoch","An epoch identifies the state of a pipeline in time."],["ExternalEvent","An opaque pointer-sized value."],["HitTestFlags",""],["HitTestItem","Describe an item that matched a hit-test query."],["HitTestResult","Returned by `RenderApi::hit_test`."],["HitTesterRequest","A hit tester requested to the render backend thread but not necessarily ready yet."],["IdNamespace","ID namespaces uniquely identify different users of WebRender’s API."],["InternerSubReport",""],["InterningMemoryReport","Memory report for interning-related data structures. cbindgen:derive-eq=false"],["MemoryReport","Collection of heap sizes, in bytes. cbindgen:derive-eq=false"],["NotificationRequest","A request to notify a handler when the transaction reaches certain stages of the rendering pipeline."],["PipelineId","From the point of view of WR, `PipelineId` is completely opaque and generic as long as it’s clonable, serializable, comparable, and hashable."],["PropertyBindingId","A key to identify an animated property binding."],["PropertyBindingKey","A unique key that is used for connecting animated property values to bindings in the display list."],["PropertyValue","The current value of an animated property. This is supplied by the calling code."],["QualitySettings","Various settings that the caller can select based on desired tradeoffs between rendering quality and performance / power usage."],["RenderApi","The main entry point to interact with WebRender."],["RenderApiSender","Allows the API to communicate with WebRender."],["ResourceId",""],["ScrollNodeState",""],["Transaction","A Transaction is a group of commands to apply atomically to a document."],["TransactionMsg","Represents a transaction in the format sent through the channel."],["UpdateBlobImage","Updates an already existing blob-image resource."],["UpdateImage","Updates an already existing image resource."],["ZoomFactor","Represents a zoom factor."]],"trait":[["ApiHitTester","An object that can perform hit-testing without doing synchronous queries to the RenderBackendThread."],["NotificationHandler","A handler to notify when a transaction reaches certain stages of the rendering pipeline."],["RenderNotifier","A handler to integrate WebRender with the thread that contains the `Renderer`."]],"type":[["DocumentLayer","Documents are rendered in the ascending order of their associated layer values."],["PipelineSourceId","This type carries no valuable semantics for WR. However, it reflects the fact that clients (Servo) may generate pipelines by different semi-independent sources. These pipelines still belong to the same `IdNamespace` and the same `DocumentId`. Having this extra Id field enables them to generate `PipelineId` without collision."],["TileSize","Width and height in device pixels of image tiles."],["VoidPtrToSizeFn","A C function that takes a pointer to a heap allocation and returns its size."]]});