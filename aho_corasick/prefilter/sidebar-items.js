initSidebarItems({"enum":[["Candidate","A candidate is the result of running a prefilter on a haystack at a particular position. The result is either no match, a confirmed match or a possible match."]],"fn":[["freq_rank","Return the frequency rank of the given byte. The higher the rank, the more common the byte (heuristically speaking)."],["next","Return the next candidate reported by the given prefilter while simultaneously updating the given prestate."],["opposite_ascii_case","If the given byte is an ASCII letter, then return it in the opposite case. e.g., Given `b'A'`, this returns `b'a'`, and given `b'a'`, this returns `b'A'`. If a non-ASCII letter is given, then the given byte is returned."]],"struct":[["Builder","A builder for constructing the best possible prefilter. When constructed, this builder will heuristically select the best prefilter it can build, if any, and discard the rest."],["ByteSet","A set of bytes."],["Packed","A type that wraps a packed searcher and implements the `Prefilter` interface."],["PrefilterObj","A convenience object for representing any type that implements Prefilter and is cloneable."],["PrefilterState","PrefilterState tracks state associated with the effectiveness of a prefilter. It is used to track how many bytes, on average, are skipped by the prefilter. If this average dips below a certain threshold over time, then the state renders the prefilter inert and stops using it."],["RareByteOffset","Offsets associated with an occurrence of a “rare” byte in any of the patterns used to construct a single Aho-Corasick automaton."],["RareByteOffsets","A set of byte offsets, keyed by byte."],["RareBytesBuilder","A builder for constructing a rare byte prefilter."],["RareBytesOne","A prefilter for scanning for a single “rare” byte."],["RareBytesThree","A prefilter for scanning for three “rare” bytes."],["RareBytesTwo","A prefilter for scanning for two “rare” bytes."],["StartBytesBuilder","A builder for constructing a starting byte prefilter."],["StartBytesOne","A prefilter for scanning for a single starting byte."],["StartBytesThree","A prefilter for scanning for three starting bytes."],["StartBytesTwo","A prefilter for scanning for two starting bytes."]],"trait":[["Prefilter","A prefilter describes the behavior of fast literal scanners for quickly skipping past bytes in the haystack that we know cannot possibly participate in a match."]]});