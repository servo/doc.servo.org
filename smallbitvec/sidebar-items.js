initSidebarItems({"constant":[["HEAP_FLAG","If the rightmost bit of `data` is set, then the remaining bits of `data` are a pointer to a heap allocation."]],"enum":[["InternalStorage","A typed representation of a `SmallBitVec`â€™s internal storage."]],"fn":[["bits_per_storage","The number of bits in one `Storage`."],["buffer_len","The minimum number of `Storage` elements to hold at least `cap` bits."],["header_len","The number of `Storage` elements to allocate to hold a header."],["inline_bits","Total number of bits per word."],["inline_capacity","For an inline vector, all bits except two can be used as storage capacity:"],["inline_index","An inline vector with the nth bit set."],["inline_ones","An inline vector with the leftmost `n` bits set."],["inline_shift","Left shift amount to access the nth bit"]],"macro":[["const_debug_assert_le",""],["sbvec","Creates a [`SmallBitVec`] containing the arguments."]],"struct":[["Header","Data stored at the start of the heap allocation."],["IntoIter","An iterator that owns a SmallBitVec and yields its bits as `bool` values."],["Iter","An iterator that borrows a SmallBitVec and yields its bits as `bool` values."],["SmallBitVec","A resizable bit vector, optimized for size and inline storage."],["VecRange","An immutable view of a range of bits from a borrowed SmallBitVec."]],"type":[["Storage","The allocation will contain a `Header` followed by a [Storage] buffer."]]});