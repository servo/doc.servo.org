searchState.loadedDescShard("option_operations", 0, "<code>option-operations</code> provides traits and auto-implementations …\nTrait for inner types participating in <code>option-operations</code>.\nTraits for the addition <code>OptionOperations</code>.\nTraits for the division <code>OptionOperations</code>.\nTrait for the equality <code>OptionOperations</code>.\nError type which can be returned by some <code>OptionOperations</code>.\nTraits for the minimun and maximum <code>OptionOperations</code>.\nTraits for the multiplication <code>OptionOperations</code>.\nTrait for the order <code>OptionOperations</code>.\nTraits for the remainder <code>OptionOperations</code>.\nTraits for the substraction <code>OptionOperations</code>.\nTrait for values and <code>Option</code>s addition.\nTrait for values and <code>Option</code>s addition assignment.\nTrait for values and <code>Option</code>s checked addition.\nTrait for values and <code>Option</code>s overflowing addition.\nTrait for values and <code>Option</code>s saturating addition.\nTrait for values and <code>Option</code>s wrapping addition.\nThe resulting inner type after applying the addition.\nThe resulting inner type after applying the addition.\nThe resulting inner type after applying the addition.\nThe resulting inner type after applying the addition.\nThe resulting inner type after applying the addition.\nComputes the addition.\nPerforms the addition assignment.\nComputes the checked addition.\nReturns a tuple of the addition along with a boolean …\nComputes the addition saturating at the numeric bounds …\nComputes the addition wrapping at the numeric bounds …\nTrait for values and <code>Option</code>s checked division.\nTrait for values and <code>Option</code>s division.\nTrait for values and <code>Option</code>s division assignment.\nTrait for values and <code>Option</code>s overflowing division.\nTrait for values and <code>Option</code>s wrapping division.\nThe resulting inner type after applying the division.\nThe resulting inner type after applying the division.\nThe resulting inner type after applying the division.\nThe resulting inner type after applying the division.\nComputes the checked division.\nComputes the division.\nPerforms the division assignment.\nReturns a tuple of the division along with a boolean …\nComputes the division wrapping at the numeric bounds …\nTrait for the equality <code>OptionOperations</code>.\nTests whether <code>self</code> is equal to <code>other</code>.\nTests whether <code>self</code> is not equal to <code>other</code>.\nDivision by zero attempted with an <code>OptionOperations</code>.\nError type which can be returned by some <code>OptionOperations</code>.\nAn <code>OptionOperations</code> overflowed.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this <code>Error</code> results from a division by zero.\nReturns <code>true</code> if this <code>Error</code> results from an overflow.\nTrait for values and <code>Option</code>s that can be compared to get …\nCompares and returns the maximum of two values.\nCompares and returns the minimum of two values.\nTrait for values and <code>Option</code>s checked multiplication.\nTrait for values and <code>Option</code>s multiplication.\nTrait for values and <code>Option</code>s multiplication assignment.\nTrait for values and <code>Option</code>s overflowing multiplication.\nTrait for values and <code>Option</code>s saturating multiplication.\nTrait for values and <code>Option</code>s wrapping multiplication.\nThe resulting inner type after applying the multiplication.\nThe resulting inner type after applying the multiplication.\nThe resulting inner type after applying the multiplication.\nThe resulting inner type after applying the multiplication.\nThe resulting inner type after applying the multiplication.\nComputes the checked multiplication.\nComputes the multiplication.\nPerforms the multiplication assignment.\nReturns a tuple of the multiplication along with a boolean …\nComputes the multiplication saturating at the numeric …\nComputes the multiplication wrapping at the numeric bounds …\nTrait for values and <code>Option</code>s that can be compared for a …\nReturns an ordering between <code>self</code> and <code>rhs</code> values if one …\nTests whether <code>self</code> is greater or equal to <code>rhs</code>.\nTests whether <code>self</code> is greater than <code>rhs</code>.\nTests whether <code>self</code> is less or equal to <code>rhs</code>.\nTests whether <code>self</code> is less than <code>rhs</code>.\nTrait for values and <code>Option</code>s checked remainder.\nTrait for values and <code>Option</code>s overflowing remainder.\nTrait for values and <code>Option</code>s remainder.\nTrait for values and <code>Option</code>s remainder assignment.\nTrait for values and <code>Option</code>s wrapping remainder.\nThe resulting inner type after applying the remainder.\nThe resulting inner type after applying the remainder.\nThe resulting inner type after applying the remainder.\nThe resulting inner type after applying the remainder.\nComputes the checked remainder.\nReturns a tuple of the remainder along with a boolean …\nComputes the remainder.\nPerforms the remainder assignment.\nComputes the remainder wrapping at the numeric bounds …\nTrait for values and <code>Option</code>s checked substraction.\nTrait for values and <code>Option</code>s overflowing substraction.\nTrait for values and <code>Option</code>s saturating substraction.\nTrait for values and <code>Option</code>s substraction.\nTrait for values and <code>Option</code>s substraction assignment.\nTrait for values and <code>Option</code>s wrapping substraction.\nThe resulting inner type after applying the substraction.\nThe resulting inner type after applying the substraction.\nThe resulting inner type after applying the substraction.\nThe resulting inner type after applying the substraction.\nThe resulting inner type after applying the substraction.\nComputes the checked substraction.\nReturns a tuple of the substraction along with a boolean …\nComputes the substraction saturating at the numeric bounds …\nComputes the substraction.\nPerforms the substraction assignment.\nComputes the substraction wrapping at the numeric bounds …")