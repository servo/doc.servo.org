searchState.loadedDescShard("egui", 1, "Controls the text wrapping and elision.\nA row can be at most <code>max_width</code> wide but can wrap in any …\nA selected text range (could be a range of length zero).\nA selected text range (could be a range of length zero).\nHandles text selection in labels (NOT in <code>crate::TextEdit</code>)s.\nAny label hovered this frame?\nHave we reached the widget containing the primary …\nHave we reached the widget containing the secondary …\nAre we in drag-to-select state?\nPainted selections this frame.\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nThe current selection, if any.\nText cursor changes/interaction, without modifying the …\nAccumulated text to copy.\nA selected text range (could be a range of length zero).\nA selected text range (could be a range of length zero).\nThe range of selected character indices.\nIs <code>self</code> a super-set of the other range?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the selected range contains no characters.\nMove a text cursor based on keyboard\nCheck for events that modify the cursor range.\nCheck for key presses that are moving the cursor.\nThe empty range.\nThe empty range.\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nSelect all the text in a galley\nIf there is a selection, None is returned. If the two ends …\nreturns the two ends ordered\nReturns the two ends ordered.\nTurn on to help debug this\nHandles text selection in labels (NOT in <code>crate::TextEdit</code>)s.\nOne end of a text selection, inside any widget.\nAny label hovered this frame?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHave we reached the widget containing the primary …\nHave we reached the widget containing the secondary …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAre we in drag-to-select state?\nHandle text selection state for a label or similar widget.\nThe selection is in this layer.\nReturns the painted selections, if any.\nPainted selections this frame.\nLast known screen position\nWhen selecting with a mouse, this is where the mouse was …\nReturns true if the cursor changed\nWhen selecting with a mouse, this is where the mouse was …\nThe current selection, if any.\nAccumulated text to copy.\nThe state of a text cursor selection.\nThis is what is easiest to work with when editing text, so …\nThe currently selected range of characters.\nThe thin rectangle of one end of the selection, e.g. the …\nAccepts and returns character offset (NOT byte offset!).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHandle clicking and/or dragging text.\nSets the currently selected range of characters.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPaint one end of the selection, e.g. the primary cursor.\nPaint one end of the selection, e.g. the primary cursor, …\nAdds text selection rectangles to the galley.\nThis is what you use to place widgets.\nAdd a <code>Widget</code> to this <code>Ui</code> at a location dependent on the …\nAdd a single <code>Widget</code> that is possibly disabled, i.e. greyed …\nAdd a section that is possibly disabled, i.e. greyed out …\nAdd a <code>Widget</code> to this <code>Ui</code> with a given size. The widget will …\nAdd extra space before the next widget.\nAdd a single <code>Widget</code> that is possibly invisible.\nAdd a section that is possibly invisible, i.e. greyed out …\nAllocate a rect without interacting with it.\nAllocate at least as much space as needed, and interact …\nReturns a <code>Rect</code> with exactly what you asked for.\nAllocated space (<code>UiBuilder::max_rect</code>) and then add content …\nConvenience function to get a region to paint on.\nAllocate a specific part of the <code>Ui</code>.\nAllocate space for a widget and check for interaction in …\nReserve this much space and move the cursor. Returns where …\nReserve this much space and move the cursor. Returns where …\nAllocated the given space and then adds content to that …\nAllocated the given rectangle and then adds content to …\nAllocated the given space and then adds content to that …\nSame as <code>ui.next_auto_id().with(id_salt)</code>\nThe available height at the moment, given the current …\nIn case of a wrapping layout, how much space is left on …\nThe available space at the moment, given the current …\nIn case of a wrapping layout, how much space is left on …\nThe available width at the moment, given the current …\nUsage: <code>if ui.button(&quot;Click me&quot;).clicked() { … }</code>\nThis will make the next added widget centered and …\nShow a checkbox.\nCreate a new <code>Ui</code> at a specific region.\nCreate a new <code>Ui</code> at a specific region with a specific id.\nScreen-space rectangle for clipping what we paint in this …\nClose the menu we are in (including submenus), if any.\nShow text as monospace with a gray background.\nA <code>TextEdit</code> for code editing.\nA <code>CollapsingHeader</code> that starts out collapsed.\nShows a button with the given color. If the user clicks …\nShows a button with the given color. If the user clicks …\nShows a button with the given color. If the user clicks …\nShows a button with the given color. If the user clicks …\nShows a button with the given color. If the user clicks …\nShows a button with the given color. If the user clicks …\nShows a button with the given color. If the user clicks …\nShows a button with the given color. If the user clicks …\nShow colored text.\nTemporarily split a <code>Ui</code> into several columns.\nTemporarily split a <code>Ui</code> into several columns.\nGet a reference to the parent <code>Context</code>.\nWhere the next widget will be put.\nRead-only access to the shared <code>IdTypeMap</code>, which stores …\nRead-write access to the shared <code>IdTypeMap</code>, which stores …\nShows where the next widget is going to be placed\nCalling <code>disable()</code> will cause the <code>Ui</code> to deny all future …\nCreate something that can be drag-and-dropped.\nSurround the given ui with a frame which changes colors …\nModify an angle. The given angle should be in radians, but …\nModify an angle. The given angle should be in radians, but …\nIf false we are unresponsive to input, and all widgets …\nMove to the next row in a grid layout or wrapping layout. …\nExpand the <code>min_rect</code> and <code>max_rect</code> of this ui to include a …\nEnsure we are big enough to contain the given x-coordinate.\nEnsure we are big enough to contain the given y-coordinate.\nRead-only access to <code>Fonts</code>.\nUsed for animation, kind of hacky\nReturns the argument unchanged.\nPut into a <code>Frame::group</code>, visually grouping the contents …\nShow large text.\nStart a ui with horizontal layout. After you have called …\nLike <code>Self::horizontal</code>, but allocates the full vertical …\nLike <code>Self::horizontal</code>, but aligns content with top.\nStart a ui with horizontal layout that wraps to a new row …\nLink to a web page.\nShortcut for <code>add(Hyperlink::from_label_and_url(label, url))</code>…\nGenerated based on id of parent ui together with an …\nGenerated based on id of parent ui together with an …\nShow an image available at the given <code>uri</code>.\nCreate a child ui which is indented to the right.\nRead-only access to the shared <code>InputState</code>.\nRead-write access to the shared <code>InputState</code>.\nCheck for clicks, drags and/or hover on a specific region …\nInteract with the background of this <code>Ui</code>, i.e. behind all …\nDeprecated: use <code>Self::interact</code> instead.\nCalls <code>U::from(self)</code>.\nIf <code>false</code>, the <code>Ui</code> does not allow any interaction and the …\nCan be used for culling: if <code>false</code>, then no part of <code>rect</code> …\nSet to true in special cases where we do one frame where …\nIf <code>false</code>, any widgets added to the <code>Ui</code> will be invisible …\nShow some text.\nUse this to paint stuff within this <code>Ui</code>.\nRead the <code>Layout</code>.\nLooks like a hyperlink.\nUse this to generate widget ids for widgets that have …\nNew widgets will <em>try</em> to fit within this rectangle.\nRead-only access to the shared <code>Memory</code>.\nRead-write access to the shared <code>Memory</code>.\nCreate a menu button that when clicked will show the given …\nCreate a menu button with an image that when clicked will …\nCreate a menu button with an image and a text that when …\nIndicates whether this Ui belongs to a Menu.\nWhere and how large the <code>Ui</code> is already. All widgets that …\nWhether <code>Ui::remember_min_rect</code> should be called when the <code>Ui</code> …\nSize of content; same as <code>min_rect().size()</code>\nShow monospace (fixed width) text.\nLike <code>Self::set_opacity</code>, but multiplies the given value …\nCreate a new top-level <code>Ui</code>.\nCreate a child <code>Ui</code> with the properties of the given builder.\nThis is the <code>Id</code> that will be assigned to the next widget …\nThis is used to create a unique interact ID for some …\nWhere do we expect a zero-sized widget to be placed?\nRead the current opacity of the underlying painter.\nRead-only access to the shared <code>PlatformOutput</code>.\nRead-write access to the shared <code>PlatformOutput</code>.\nUse this to paint stuff within this <code>Ui</code>.\nSpecifies paint layer, clip rectangle and a reference to …\nCreate a painter for a sub-region of this Ui.\nHandles the <code>Ui</code> size and the placement of new widgets.\nCreate a child Ui with an explicit <code>Id</code>.\nPush another level onto the <code>UiStack</code>.\nAdd a <code>Widget</code> to this <code>Ui</code> at a specific location (manual …\nShow a <code>RadioButton</code>. Often you want to use <code>Self::radio_value</code>…\nShow a <code>RadioButton</code>. It is selected if …\nIs the pointer (mouse/touch) above this rectangle in this …\nShow this rectangle to the user if certain debug options …\nUpdate the <code>WidgetRect</code> created in <code>Ui::new</code> or <code>Ui::new_child</code> …\nReset to the default style set in <code>Context</code>.\nRead the <code>Ui</code>s background <code>Response</code>. It’s <code>Sense</code> will be …\nCreate a scoped child ui.\nCreate a child, add content to it, and then allocate only …\nCreate a child, add content to it, and then allocate only …\nAdjust the scroll position of any parent <code>crate::ScrollArea</code> …\nSame as <code>Self::scroll_to_cursor</code>, but allows you to specify …\nAdjust the scroll position of any parent <code>crate::ScrollArea</code> …\nSame as <code>Self::scroll_to_rect</code>, but allows you to specify …\nScroll this many points in the given direction, in the …\nSame as <code>Self::scroll_with_delta</code>, but allows you to specify …\nShow a label which can be selected or not.\nShow selectable text. It is selected if …\nThe sense for the ui background.\nShortcut for <code>add(Separator::default())</code>\nScreen-space rectangle for clipping what we paint in this …\nCalling <code>set_enabled(false)</code> will cause the <code>Ui</code> to deny all …\nSet both the minimum and maximum height.\n<code>ui.set_height_range(min..=max);</code> is equivalent to …\nCalling <code>set_invisible()</code> will cause all further widgets to …\nSet the maximum height of the ui. You won’t be able to …\nSet the maximum size of the ui. You won’t be able to …\nSet the maximum width of the ui. You won’t be able to …\nSet the minimum height of the ui. This can’t shrink the …\nSet the minimum size of the ui. This can’t shrink the …\nSet the minimum width of the ui. This can’t shrink the …\nMake the widget in this <code>Ui</code> semi-transparent.\nSet row height in horizontal wrapping layout.\nSet to true in special cases where we do one frame where …\nChanges apply to this <code>Ui</code> and its subsequent children.\nCalling <code>set_visible(false)</code> will cause all further widgets …\nSet both the minimum and maximum width.\n<code>ui.set_width_range(min..=max);</code> is equivalent to …\nConstrain the rectangle in which we can paint.\nHelper: shrinks the max height to the current height, so …\nHelper: shrinks the max width to the current width, so …\nSet to true in special cases where we do one frame where …\nPretend like <code>count</code> widgets have been allocated.\nShow small text.\nA button as small as normal body text.\nThe current spacing options for this <code>Ui</code>. Short for …\nMutably borrow internal <code>Spacing</code>. Changes apply to this <code>Ui</code> …\nShortcut for <code>add(Spinner::new())</code>\nGet a reference to this <code>Ui</code>’s <code>UiStack</code>.\nThe <code>UiStack</code> for this <code>Ui</code>.\nShow text that stand out a bit (e.g. slightly brighter).\nStyle options for this <code>Ui</code> and its children.\nThe <code>Style</code> (visuals, spacing, etc) of this ui. Commonly …\nMutably borrow internal <code>Style</code>. Changes apply to this <code>Ui</code> …\nA <code>TextEdit</code> for multiple lines. Pressing enter key will …\nNo newlines (<code>\\n</code>) allowed. Pressing enter key will result …\nThe height of text of this text style\nHow to vertically align text\nActs like a checkbox, but looks like a <code>SelectableLabel</code>.\nIs the pointer (mouse/touch) above the current <code>Ui</code>?\nThis is a globally unique ID of this <code>Ui</code>, based on where in …\nThis is a globally unique ID of this <code>Ui</code>, based on where in …\nStart a ui with vertical layout. Widgets will be …\nStart a ui with vertical layout. Widgets will be …\nStart a ui with vertical layout. Widgets will be …\nThe current visuals settings of this <code>Ui</code>. Short for …\nMutably borrow internal <code>visuals</code>. Changes apply to this <code>Ui</code> …\nShow text that is weaker (fainter color).\nRedirect shapes to another paint layer.\nThe new layout will take up all available space.\nCreate a new Scope and transform its contents via a …\nWhich wrap mode should the text use in this <code>Ui</code>?\nShould text wrap in this <code>Ui</code>?\nBuild a <code>Ui</code> as the chlild of another <code>Ui</code>.\nMake the new <code>Ui</code> disabled, i.e. grayed-out and …\nReturns the argument unchanged.\nSeed the child <code>Ui</code> with this <code>id_salt</code>, which will be mixed …\nCalls <code>U::from(self)</code>.\nMake the contents invisible.\nOverride the layout.\nSet the max rectangle, within which widgets will go.\nSet if you want sense clicks and/or drags. Default is …\nSet to true in special cases where we do one frame where …\nOverride the style.\nProvide some information about the new <code>Ui</code> being built.\nA bottom <code>crate::TopBottomPanel</code>.\nA <code>crate::CentralPanel</code>.\nA <code>crate::Frame</code>.\nAn <code>crate::Area</code> that is not of any other kind.\nA left <code>crate::SidePanel</code>.\nThe content of a regular menu.\nA picker, such as color picker.\nThe content of a popup menu.\nA <code>crate::Resize</code>.\nA right <code>crate::SidePanel</code>.\nA <code>crate::ScrollArea</code>.\nA table cell (from the <code>egui_extras</code> crate).\nA tooltip, as shown by e.g. <code>crate::Response::on_hover_ui</code>.\nA top <code>crate::TopBottomPanel</code>.\nWhat kind is this <code>crate::Ui</code>?\nInformation about a <code>crate::Ui</code> and its parents.\nInformation about a <code>crate::Ui</code> to be included in the …\nIterator that walks up a stack of <code>StackFrame</code>s.\nUser-chosen tags.\nA <code>crate::Window</code>.\nCheck if this node is or is contained in a <code>crate::Ui</code> of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value of a tag.\nGet the value of a tag.\nThis this <code>crate::Ui</code> a <code>crate::Frame</code> with a visible stroke?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this any kind of <code>crate::Area</code>?\nIs this any kind of panel?\nIs this <code>crate::Ui</code> a panel?\nIs this a root <code>crate::Ui</code>, i.e. created with …\nReturn an iterator that walks the stack from this node to …\nCreate a new <code>UiStackInfo</code> with the given kind and an empty …\nUser tags.\nInsert a tag with no value.\nInsert a tag with some value.\nThis struct tracks recent values of some time series.\nValues must be added with a monotonically increasing time, …\nAverage times rate. If you are keeping track of individual …\nComputing the same thing each frame can be expensive, so …\nAmount of time contained from start to end in this <code>History</code>.\nRemove samples that are too old.\nReturns the argument unchanged.\nHash the given value with a predictable hasher.\nHash the given value with the given hasher.\nCalls <code>U::from(self)</code>.\n<code>(time, value)</code> pairs Time difference between values can be …\nCurrent number of values kept in history\nMean time difference between values in this <code>History</code>.\nExample:\nTotal number of values seen. Includes those that have been …\nCalculate a smooth velocity (per second) over the entire …\nSomething that does an expensive computation that we want …\nCaches the results of a computation for one frame. If it …\nMust be called once per frame to clear the cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet from cache (if the same key was used last frame) or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of values currently in the cache.\nTotal number of cached values\nCall once per frame to evict cache.\nCall once per frame to evict cache.\nVery stupid/simple key-value cache. TODO(emilk): improve\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStores values identified by an <code>Id</code> AND a the …\nA serialized value\nLike <code>std::any::TypeId</code>, but can be serialized and …\nA value, maybe serializable.\nCount the number of values are stored with the given type.\nCount how many values are stored but not yet deserialized.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncreased by one each time we re-serialize an element that …\nRead a value, optionally deserializing it if available.\nRead a value without trying to deserialize a persisted …\nInsert a value that will be persisted next time you start …\nInsert a value that will not be persisted.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum number of bytes that will be used to store the …\nCreate a value that will be persisted.\nCreate a value that won’t be persisted.\nRemove the state of this type and id.\nNote all state of the given type.\nRemove and fetch the state of this type and id.\nThe ron data we can deserialize.\nSee <code>Self::max_bytes_per_type</code>.\nThe type of the stored value.\nThe type of value we are storing.\nHow to clone the value.\nThe actual value.\nRepresents how the current state is changing\nAutomatic undo system.\nAdd an undo point if, and only if, there has been a change …\nIf the state is changing so often that we never get to …\nCall this as often as you want (e.g. every frame) and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDo we have an undo point different from the given state?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the state is currently changing\nMaximum number of undos. If your state is resource …\nStores redos immediately after a sequence of undos. Gets …\nWhen that state hasn’t changed for this many seconds, …\nNew undoes are added to the back. Two adjacent undo points …\nCreate a new <code>Undoer</code> with the given <code>Settings</code>.\nBegin resizing the viewport with the left mouse button …\nCancel the closing that was signaled by …\nRequest this viewport to be closed.\nThis should be used on the windows that are popped up by …\nWill probably not work as expected!\nShow window decorations, i.e. the chrome around the content\nA viewport run independently from the parent viewport.\nThe user-code that shows the ui in the viewport, used for …\nA desktop feature. This can include a single window …\nThis is a dialog window.\nThis indicates the window is being dragged. This property …\nA dock or panel feature. Typically a Window Manager would …\nA dropdown menu that usually appears when the user clicks …\nThe fallback, when the egui integration doesn’t support …\nSet which window buttons are enabled\nBring the window into focus (native only).\nTurn borderless fullscreen on/off.\nSet the IME cursor editing area.\nThe window icon.\nImage data for an application icon.\nA viewport run inside the parent viewport.\nViewport for immediate rendering.\nRender the given viewport, calling the given ui callback.\nShould be bigger than 0\nShould be bigger than 0\nMaximize or unmaximize window.\nPinnable menu windows. “Torn off” from the main …\nShould be bigger than 0\nEnable mouse pass-through: mouse clicks pass through the …\nThis is a normal, top-level window.\nThe window is a notification. This property is typically …\nSet the outer position of the viewport, i.e. moves the …\nA popup menu that usually appears when the user right …\nThe <code>ViewportId</code> of the root viewport.\nThe <code>ViewportIdPair</code> of the root viewport, which is its own …\nRequest a copy of the current selection.\nRequest cut of the current selection\nRequest a paste from the clipboard to the current focused …\nIf the window is unfocused, attract the user’s attention …\nCan the window be resized?\nShould be bigger than 0\nThe root viewport; i.e. the original window.\nTake a screenshot.\nThe window is a splash screen displayed as an application …\nMoves the window with the left mouse button until the …\nSet the window title.\nToolbar windows. “Torn off” from the main application.\nA tooltip window. Usually used to show additional …\nTurn the window transparent or not.\nA small persistent utility window, such as a palette or …\nControl the building of a new egui viewport (i.e. native …\nThe different types of viewports supported by egui.\nAn output viewport-command from egui to the backend, e.g. …\nA unique identifier of a viewport.\nA fast hash map from <code>ViewportId</code> to <code>T</code>.\nA pair of <code>ViewportId</code>, used to identify a viewport and its …\nA fast hash set of <code>ViewportId</code>.\nDescribes a viewport, i.e. a native window.\nSet the visibility of the window.\nSet window to be always-on-top, always-on-bottom, or …\nThis is wayland only. See <code>Self::with_app_id</code>.\nAdd on new output.\nThe window attrbiutes such as title, position, size, etc.\nConstruct a command to center the viewport on the monitor, …\nWhether clamp the window’s size to monitor’s size. The …\nWhat type of viewport are we?\nCommands to change the viewport, e.g. window title and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImage height. This should be a multiple of 4.\nId of us and our parent.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nId of our parent viewport.\nUpdate this <code>ViewportBuilder</code> with a delta, returning a list …\nThe desired outer position of the window.\nSchedule a repaint of this viewport after this delay.\nThis command requires the parent viewport to repaint.\nRGBA pixels, with separate/unmultiplied alpha.\nThe title of the viewport. <code>eframe</code> will use this as the …\nThe user-code that shows the GUI.\nThe user-code that shows the GUI, used for deferred …\nImage width. This should be a multiple of 4.\nWhether the window will be initially focused or not.\nThis window is always on top\nOn Wayland\nSets whether clamp the window’s size to monitor’s …\nDoes not work on X11.\nSets whether the window should have a border, a title bar, …\nOn Windows: enable drag and drop support. Drag and drop can\nSets whether the window should be put into fullscreen upon …\nmacOS: Makes the window content appear behind the titlebar.\nThe application icon, e.g. in the Windows task bar or the …\nRequests the window to be of specific dimensions.\nSets the maximum dimensions a window can have.\nDoes not work on X11.\nRequest that the window is maximized upon creation.\nSets the minimum dimensions a window can have.\nDoes not work on X11.\nOn desktop: mouse clicks pass through the window, used for …\nThe initial “outer” position of the window, i.e. where …\nSets whether the window is resizable or not.\nwindows: Whether show or hide the window icon in the …\nSets the initial title of the window in the title bar.\nmacOS: Set to <code>false</code> to hide the window title.\nmacOS: Set to <code>false</code> to hide the titlebar button (close, …\nmacOS: Set to <code>false</code> to make the titlebar transparent, …\nSets whether the background of the window should be …\nSets whether the window will be initially visible or …\nControl if window is always-on-top, always-on-bottom, or …\nOn X11\nUsed to store each widget’s Id, Rect and Sense each …\nStores the <code>WidgetRect</code>s of all widgets generated during a …\nAll widgets, by id, and their order in their respective …\nAll widgets, in painting order.\nClear the contents while retaining allocated memory.\nIs the widget enabled?\nReturns the argument unchanged.\nReturns the argument unchanged.\nAll widgets in this layer, sorted back-to-front.\nThe globally unique widget id.\nInfo about some widgets.\nInsert the given widget rect in the given layer.\nWhere the widget is.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat layer the widget is on.\nAll known layers with widgets.\nIn which layer, and in which order in that layer?\nThe full widget rectangle.\nHow the widget responds to interaction.\nUse exactly this galley when painting the text.\nUse this <code>LayoutJob</code> when laying out the text.\nText and optional style choices for it.\nThis is how you specify text for a widget.\nAppend to an existing <code>LayoutJob</code>\nFill-color behind the text.\nPrefer using <code>RichText</code> directly!\nMonospace label with different background color.\nPrefer using <code>RichText</code> directly!\nOverride text color.\nOverride text color if, and only if, this is a <code>RichText</code>.\nExtra spacing between letters, in points.\nSet the <code>TextStyle</code> unless it has already been set\nSet the <code>TextStyle</code> unless it has already been set\nSelect the font family.\nSelect the font and size. This overrides the value from …\nRead the font height of the selected text style.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUse <code>TextStyle::Heading</code>.\nPrefer using <code>RichText</code> directly!\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLayout with wrap mode based on the containing <code>Ui</code>.\nTilt the characters to the right.\nPrefer using <code>RichText</code> directly!\nExplicit line height of the text in points.\nUse <code>TextStyle::Monospace</code>.\nPrefer using <code>RichText</code> directly!\nAlign text to top. Only applicable together with …\nPrefer using <code>RichText</code> directly!\nSelect the font size (in points). This overrides the value …\nSmaller text.\nPrefer using <code>RichText</code> directly!\nFor e.g. exponents.\nPrefer using <code>RichText</code> directly!\nDraw a line through the text, crossing it out.\nPrefer using <code>RichText</code> directly!\nExtra strong text (stronger color).\nPrefer using <code>RichText</code> directly!\nOverride the <code>TextStyle</code>.\nOverride the <code>TextStyle</code> if, and only if, this is a <code>RichText</code>.\nDraw a line under the text.\nPrefer using <code>RichText</code> directly!\nExtra weak text (fainter color).\nPrefer using <code>RichText</code> directly!\nAlways clamp values, even existing ones.\nClickable button with text.\nLoad the image from some raw bytes.\nBoolean on/off control with text label.\nA numeric value that you can change by dragging the …\nUsers cannot enter new values that are outside the range.\nFit the image to an exact size.\nFit the image to a fraction of the available size.\nStores the durations between each frame of a gif\nA clickable hyperlink, e.g. to …\nA widget which displays an image.\nA clickable image within a frame.\nThis type determines how the image should try to fit …\nThis type determines the constraints on how the size of an …\nThis type tells the <code>Ui</code> how to load an image.\nStatic text.\nClickable text, that looks like a hyperlink.\nValues are not clamped.\nFit the image to its original size, scaled by some factor.\nA simple progress bar.\nOne out of several alternatives, either selected or not.\nOne out of several alternatives, either selected or not. …\nA visual separator. A horizontal or vertical line …\nControl a number with a slider.\nSpecifies how values in a <code>Slider</code> are clamped.\nSpecifies the orientation of a <code>Slider</code>.\nA spinner widget used to indicate loading.\nLoad the image from an existing texture.\nLoad the image from a URI, e.g. …\nAnything implementing Widget can be added to a <code>Ui</code> with …\nHelper so that you can do e.g. <code>TextEdit::State::load</code>.\nA solid color to put behind the image. Useful for …\nColor picker widgets.\nextracts uri and frame index\nNone means default for interact\nDetermines how the image should shrink/expand/stretch/etc. …\nShow larger buttons for switching between light and dark …\nShow a small button to switch to/from dark/light mode …\nShow larger buttons for switching between light and dark …\nShow a small button to switch to/from dark/light mode …\nchecks if bytes are gifs\nWhether or not the final size should maintain the original …\nDetermines the maximum size of the image.\nShow a button to reset a value to its default. The button …\nShow a button to reset a value to its default. The button …\nRotate the image about an origin by some angle\nRound the corners of the image.\nUses the style’s <code>interact_size</code> if <code>None</code>.\nSets the minimal step of the widget value\nMultiply image color with this. Default is WHITE (no tint).\nAllocate space, interact, paint, and return a <code>Response</code>.\nSelect UV range. Default is (0,0) in top-left, (1,1) …\nThe unique identifier for this image, e.g. …\nClickable button with text.\nOverride background fill color. Note that this will …\nNone means default for interact\nTurn off the frame\nReturns the argument unchanged.\nCreates a button with an image. The size of the image as …\nCreates a button with an image to the left of the text. …\nCalls <code>U::from(self)</code>.\nSet the minimum size of the button.\nSet the rounding of the button.\nIf <code>true</code>, mark this button as “selected”.\nBy default, buttons senses clicks. Change this to a …\nShow some text on the right side of the button, in weak …\nMake this a small button, suitable for embedding into text.\nOverride button stroke. Note that this will override any …\nSet <code>Self::wrap_mode</code> to <code>TextWrapMode::Truncate</code>.\nSet <code>Self::wrap_mode</code> to <code>TextWrapMode::Wrap</code>.\nSet the wrap mode for the text.\nBoolean on/off control with text label.\nReturns the argument unchanged.\nDisplay an indeterminate state (neither checked nor …\nCalls <code>U::from(self)</code>.\nWhat options to show for alpha\nShow both blend and additive options.\nNumber of vertices per dimension in the color sliders. We …\nOnly show normal blend options for alpha.\nSet alpha to 1.0, and show no option for it.\nShows a button with the given color. If the user clicks …\nShows a button with the given color. If the user clicks …\nShows a button with the given color. If the user clicks …\nShows a button with the given color. If the user clicks …\nShows a color picker where the user can change the given …\nShows a color picker where the user can change the given …\nArguments\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWe use a negative alpha for additive colors within this …\nShows 4 <code>DragValue</code> widgets to be used to edit the RGBA f32 …\nShow a color with background checkers to demonstrate …\nShow a color with background checkers to demonstrate …\nShows 4 <code>DragValue</code> widgets to be used to edit the RGBA u8 …\nA numeric value that you can change by dragging the …\nCombined into one function (rather than two) to make it …\nSet <code>custom_formatter</code> and <code>custom_parser</code> to display and …\nIf set to <code>true</code>, existing values will be clamped to …\nSets valid range for the value.\nClamp the given value with careful handling of negative …\nSet custom formatter defining how numbers are converted …\nSet custom parser defining how the text input is parsed …\nThe default egui parser of numbers.\nSet an exact number of decimals to display. Values will …\nReturns the argument unchanged.\nSet <code>custom_formatter</code> and <code>custom_parser</code> to display and …\nCalls <code>U::from(self)</code>.\nSet a maximum number of decimals to display. Values will …\nSet a minimum number of decimals to display. Normally you …\nSet <code>custom_formatter</code> and <code>custom_parser</code> to display and …\nShow a prefix before the number, e.g. “x: “\nSets valid range for dragging the value.\nHow much the value changes when dragged one point (logical …\nAdd a suffix to the number, this can be e.g. a unit (“°…\nUpdate the value on each key press when text-editing the …\nA clickable hyperlink, e.g. to …\nClickable text, that looks like a hyperlink.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlways open this hyperlink in a new browser tab.\nLoad the image from some raw bytes.\nFit the image to an exact size.\nFit the image to a fraction of the available size.\nStores the durations between each frame of a gif\nA widget which displays an image.\nThis type determines how the image should try to fit …\nThis type determines the constraints on how the size of an …\nThis type tells the <code>Ui</code> how to load an image.\nFit the image to its original size, scaled by some factor.\nLoad the image from an existing texture.\nLoad the image from a URI, e.g. …\nA solid color to put behind the image. Useful for …\nA solid color to put behind the image. Useful for …\nReturns the size the image will occupy in the final UI.\nCalculate the final on-screen size in points.\nextracts uri and frame index\ngif uris contain the uri &amp; the frame that will be displayed\nDetermines how the image should shrink/expand/stretch/etc. …\nFit the image to an exact size.\nFit the image to a fraction of the available space.\nFit the image to its original size with some scaling.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad the image from some raw bytes.\nLoad the image from an existing texture.\nLoad the image from a URI.\ncalculates at which frame the gif is\nchecks if bytes are gifs\nSize hint for e.g. rasterizing an svg.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nchecks if uri is a gif file\nErrors\nLoad the image from its <code>Image::source</code>, returning the …\nWhether or not the <code>ImageFit</code> should maintain the image’s …\nWhether or not the final size should maintain the original …\nSet the max height of the image.\nSet the max size of the image.\nDetermines the maximum size of the image.\nSet the max width of the image.\nLoad the image from some source.\nPaint the image in the given rectangle.\nRotate the image about an origin by some angle\nRotate the image about an origin by some angle\nRound the corners of the image.\nRound the corners of the image.\nMake the image respond to clicks and/or drags.\nShow a spinner when the image is loading.\nFit the image to 100% of its available size, shrinking it …\nAttach tooltips like “Loading…” or “Failed …\nTexture options used when creating the texture.\nSize of the texture, if known.\nMultiply image color with this. Default is WHITE (no tint).\nMultiply image color with this. Default is WHITE (no tint).\nReturns the URI of the image.\nGet the <code>uri</code> that this image was constructed from.\nSelect UV range. Default is (0,0) in top-left, (1,1) …\nSelect UV range. Default is (0,0) in top-left, (1,1) …\nThe unique identifier for this image, e.g. …\nA clickable image within a frame.\nTurn off the frame\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSet rounding for the <code>ImageButton</code>. If the underlying image …\nIf <code>true</code>, mark this button as “selected”.\nBy default, buttons senses clicks. Change this to a …\nMultiply image color with this. Default is WHITE (no tint).\nSelect UV range. Default is (0,0) in top-left, (1,1) …\nStatic text.\nSet <code>Self::wrap_mode</code> to <code>TextWrapMode::Extend</code>, disabling …\nReturns the argument unchanged.\nSets the horizontal alignment of the Label to the given …\nCalls <code>U::from(self)</code>.\nDo layout and position the galley in the ui, without …\nCan the user select the text with the mouse?\nMake the label respond to clicks and/or drags.\nSet <code>Self::wrap_mode</code> to <code>TextWrapMode::Truncate</code>.\nSet <code>Self::wrap_mode</code> to <code>TextWrapMode::Wrap</code>.\nSet the wrap mode for the text.\nA simple progress bar.\nWhether to display a loading animation when progress <code>&lt; 1</code>. …\nThe desired height of the bar. Will use the default …\nThe desired width of the bar. Will use all horizontal …\nThe fill color of the bar.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProgress in the <code>[0, 1]</code> range, where <code>1</code> means “completed”…\nSet the rounding of the progress bar.\nShow the progress in percent on the progress bar.\nA custom text to display on the progress bar.\nOne out of several alternatives, either selected or not.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOne out of several alternatives, either selected or not. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA visual separator. A horizontal or vertical line …\nReturns the argument unchanged.\nExtend each end of the separator line by this much.\nExplicitly ask for a horizontal line.\nCalls <code>U::from(self)</code>.\nContract each end of the separator line by this much.\nHow much space we take up. The line is painted in the …\nExplicitly ask for a vertical line.\nAlways clamp values, even existing ones.\nUsers cannot enter new values that are outside the range.\nCombined into one function (rather than two) to make it …\nWhen the user asks for an infinitely large range (e.g. …\nValues are not clamped.\nControl a number with a slider.\nSpecifies how values in a <code>Slider</code> are clamped.\nSpecifies the orientation of a <code>Slider</code>.\nJust the slider, no text\nSet <code>custom_formatter</code> and <code>custom_parser</code> to display and …\nControls when the values will be clamped to the range.\ndelta(value) / delta(points)\nSet custom formatter defining how numbers are converted …\nSet custom parser defining how the text input is parsed …\nWhen dragging the value, how fast does it move?\nSet an exact number of decimals to display.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChange the shape of the slider handle\nSet <code>custom_formatter</code> and <code>custom_parser</code> to display and …\nHelper: equivalent to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor logarithmic sliders, the largest positive value we are …\nFor logarithmic sliders, the largest positive value we are …\nMake this a logarithmic slider. This is great for when the …\nwhere to put the zero cutoff for logarithmic sliders that …\nSet a maximum number of decimals to display.\nSet a minimum number of decimals to display.\nCreates a new horizontal slider.\nSet <code>custom_formatter</code> and <code>custom_parser</code> to display and …\nVertical or horizontal slider? The default is horizontal.\nShow a prefix before the number, e.g. “x: “\nControl whether or not the slider shows the current value. …\nJust the slider, no text\nFor logarithmic sliders that includes zero: what is the …\nFor logarithmic sliders, the smallest positive value we …\nTurn smart aim on/off. Default is ON. There is almost no …\nSets the minimal step of the widget value\nSets the minimal change of the value.\nAdd a suffix to the number, this can be e.g. a unit (“°…\nShow a text next to the slider (e.g. explaining what the …\nDisplay trailing color behind the slider’s circle. …\nFor instance, <code>position</code> is the mouse position and …\nMake this a vertical slider.\nA spinner widget used to indicate loading.\nSets the spinner’s color.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new spinner that uses the style’s <code>interact_size</code> …\nPaint the spinner in the given rectangle.\nSets the spinner’s size. The size sets both the height …\nUses the style’s <code>interact_size</code> if <code>None</code>.\nTrait constraining what types <code>crate::TextEdit</code> may use as …\nA text region that the user can edit the contents of.\nThe output from a <code>TextEdit</code>.\nThe text edit state stored between frames.\nReturns this buffer as a <code>str</code>.\nControls the text selection.\nWhere the text cursor is.\nDeletes a range of text <code>char_range</code> from this buffer.\nHow the text was displayed.\nWhere the text in <code>Self::galley</code> ended up on the screen.\nInserts text <code>text</code> into this buffer at character index …\nCan this text be edited?\nWhen did the user last press a key? Used to pause the …\nThe interaction response.\nThe state we stored after the run.\nThe text was clipped to this rectangle when painted.\nWrapped in Arc for cheaper clones.\nA text region that the user can edit the contents of.\nSets the limit for the amount of characters can be entered\nReturns <code>Some(new_cursor)</code> if we did mutate <code>text</code>.\nWhen <code>true</code> (default), overflowing text will be clipped.\nBuild a <code>TextEdit</code> focused on code editing. By default it …\nWhen <code>true</code> (default), the cursor will initially be placed …\nSet the number of rows to show by default. The default for …\nSet to 0.0 to keep as small as possible. Set to …\nCheck for (keyboard) events to edit the cursor and/or text.\nPick a <code>crate::FontId</code> or <code>TextStyle</code>.\nDefault is <code>true</code>. If set to <code>false</code> there will be no frame …\nReturns the argument unchanged.\nShow a faint hint text when the text field is empty.\nSet a specific style for the hint text.\nSet the horizontal align of the inner text.\nUse if you want to set an explicit <code>Id</code> for this widget.\nA source for the unique <code>Id</code>, e.g. …\nA source for the unique <code>Id</code>, e.g. …\nDefault is <code>true</code>. If set to <code>false</code> then you cannot interact …\nCalls <code>U::from(self)</code>.\nOverride how text is being shown inside the <code>TextEdit</code>.\nWhen <code>false</code> (default), pressing TAB will move focus to the …\nSet margin of text. Default is <code>Margin::symmetric(4.0, 2.0)</code>\nSet the minimum size of the <code>TextEdit</code>.\nA <code>TextEdit</code> for multiple lines. Pressing enter key will …\nIf true, hide the letters from view and prevent copying …\nSet the return key combination.\nShow the <code>TextEdit</code>, returning a rich <code>TextEditOutput</code>.\nNo newlines (<code>\\n</code>) allowed. Pressing enter key will result …\nSet the vertical align of the inner text.\nThe output from a <code>TextEdit</code>.\nWhere the text cursor is.\nReturns the argument unchanged.\nHow the text was displayed.\nWhere the text in <code>Self::galley</code> ended up on the screen.\nCalls <code>U::from(self)</code>.\nThe interaction response.\nThe state we stored after the run.\nThe text was clipped to this rectangle when painted.\nThe text edit state stored between frames.\nThe currently selected range of characters.\nControls the text selection.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhen did the user last press a key? Used to pause the …\nStores redos immediately after a sequence of undos. Gets …\nSets the currently selected range of characters.\nWrapped in Arc for cheaper clones.\nNew undoes are added to the back. Two adjacent undo points …\nTrait constraining what types <code>crate::TextEdit</code> may use as …\nReturns this buffer as a <code>str</code>.\nReads the given character range.\nReads the given character range.\nClears all characters in this buffer\nClears all characters in this buffer\nDeletes a range of text <code>char_range</code> from this buffer.\nInserts text <code>text</code> into this buffer at character index …\nCan this text be edited?\nReplaces all contents of this string with <code>text</code>\nReplaces all contents of this string with <code>text</code>\nClears all characters in this buffer and returns a string …\nClears all characters in this buffer and returns a string …")