searchState.loadedDescShard("egui", 0, "<code>egui</code>:  an easy-to-use GUI in pure Rust!\nIndicated an alias, e.g. a shortcut\nleft/center/right or top/center/bottom alignment for e.g. …\nTwo-dimension alignment, e.g. <code>Align2::LEFT_TOP</code>.\nSomething can be scrolled in any direction (panned).\nConvenience for <code>Self::Max</code>\n<code>\\</code>\n`, also known as “backquote” or “grave”\nA bottom <code>crate::TopBottomPanel</code>.\nBackend-specific painting.\nTouch operation has been disrupted by something (various …\nHover a cell in a table\nHorizontal or vertical center.\nA <code>crate::CentralPanel</code>.\nCircle with optional outline and fill.\nStretches the edge pixels to fill beyond the texture’s …\nA <code>Mesh</code> or <code>PaintCallback</code> within a clip rectangle.\nThe user clicked the close-button on the window, or …\n<code>:</code>\nRGBA image.\nThis format is used for space-efficient color …\nA 2D RGBA color image in RAM.\n<code>,</code>\nIME composition ended with this final result.\nYour handle to egui.\nA context menu is available\nThe integration detected a “copy” event (e.g. Cmd+C).\nIndicate that a copy will be made\nRequest an elevated amount of animations and flair for the …\nFor precision work\nA cubic Bézier Curve.\nA mouse cursor icon.\nThe integration detected a “cut” event (e.g. Cmd+X).\n+Y\nDark mode: light text on a dark background.\nDark mode: light text on a dark background.\nNormal cursor icon, whatever that is.\nLayout direction, one of <code>LeftToRight</code>, <code>RightToLeft</code>, <code>TopDown</code>…\nNotifies when the IME was disabled.\nTracking of drag-and-drop payload.\nA file dropped into egui.\nInfinite range that contains everything, from -∞ to …\nInfinite rectangle that contains every point.\nEllipse with optional outline and fill.\nNotifies when the IME was enabled.\nUser lifted the finger or pen from the surface, or slid …\n<code>=</code>\nAn input event generated by the integration.\nControls which events that a focused widget will have …\nThe text should expand the <code>Ui</code> size when reaching its …\nThe first extra mouse button on some mice. In web …\nThe second extra mouse button on some mice. In web …\nUsed for the font texture.\nA <code>.ttf</code> or <code>.otf</code> file and a font face index.\nDescribes the font data and the sizes to use.\nFont of unknown size.\nHow to select a sized font.\nA single-channel image designed for the font texture.\nExtra scale and vertical tweak to apply to all text of a …\nA <code>crate::Frame</code>.\nWhat egui emits each frame from <code>crate::Context::run</code>.\nText that has been laid out, ready for painting.\nAn <code>crate::Area</code> that is not of any other kind.\nThe thing you are hovering can be grabbed\nYou are grabbing the thing you are hovering\nA simple grid layout.\nQuestion mark\nA file about to be dropped into egui.\negui tracks widgets frame-to-frame using <code>Id</code>s.\n<code>IdMap&lt;V&gt;</code> is a <code>HashMap&lt;Id, V&gt;</code> optimized by knowing that <code>Id</code> …\nAn image stored in RAM.\nIME Event\nIME event.\nRequest a standard amount of attention-grabbing actions.\nReturned when we wrap some ui-code and want to return both …\nInput state that egui updates each frame.\nKeyboard keys.\nA key was pressed or released.\nA keyboard shortcut, e.g. <code>Ctrl+Alt+W</code>.\nConvenience for <code>Self::Min</code>\n-X\nLinear magnification and minification.\nLinear magnification and minification, but with the …\nLinear magnification and minification, but with the …\nThe layout of a <code>Ui</code>, e.g. “vertical &amp; centered”.\nA left <code>crate::SidePanel</code>.\nLight mode: dark text on a light background.\nLight mode: dark text on a light background.\nNumber of lines\nA line between two points.\nLinearly interpolate the nearest neighbors, creating a …\ne.g. a hyperlink\nThe minus character: …\nTextures allocated using <code>TextureManager</code>.\nA value for all four sides of a rectangle, often used to …\nRight or bottom.\nThe data that egui persists between frames.\nThe content of a regular menu.\nTextured triangles in two dimensions.\nA general triangle mesh.\nThe tertiary mouse button is usually the middle mouse …\nLeft or top.\n<code>-</code>\nMirrors the texture with each repetition, creating …\nNames of different modifier keys.\nState of the modifier keys. These must be fed to egui.\nA font where each character is the same width (<code>w</code> is the …\nThe mouse moved, the units are unspecified. Represents the …\nA raw mouse wheel event as sent by the backend.\nThe unit associated with the numeric value of a mouse …\nUser moves a touch point along the surface. This event is …\nOmnidirectional move icon (e.g. arrows in all cardinal …\nAll you probably need to know about a multi-touch gesture.\nAn invalid <code>Rangef</code> filled with <code>f32::NAN</code>.\nAn invalid <code>Rect</code> filled with <code>f32::NAN</code>.\nNearest magnification and minification.\nNearest magnification and minification, but with the …\nNearest magnification and minification, but with the …\nNo shadow at all.\nSame as <code>Stroke::default</code>.\nThe inverse of <code>Self::EVERYTHING</code>: stretches from positive …\nThe inverse of <code>Self::EVERYTHING</code>: stretches from positive …\nNumber of pointer buttons supported by egui, i.e. the …\nOne of the names in <code>FontDefinitions::families</code>.\nShow the nearest pixel value.\nCan’t drop here\nShow no cursor\nPaint nothing. This can be useful as a placeholder.\nForbidden\n<code>0</code> (from main row or numpad)\n<code>1</code> (from main row or numpad)\n<code>2</code> (from main row or numpad)\n<code>3</code> (from main row or numpad)\n<code>4</code> (from main row or numpad)\n<code>5</code> (from main row or numpad)\n<code>6</code> (from main row or numpad)\n<code>7</code> (from main row or numpad)\n<code>8</code> (from main row or numpad)\n<code>9</code> (from main row or numpad)\nExtends <code>f32</code>, <code>Vec2</code> etc with <code>at_least</code> and <code>at_most</code> as aliases …\nWhat URL to open, and how.\nSome global options that you can read and write.\nIf you cannot fit any of the above slots.\nAn ugly color that is planned to be replaced before making …\nNumber of pages\nIf you want to paint some 3D shapes inside an egui region, …\nInformation passed along with <code>PaintCallback</code> (…\nHelper to paint shapes and text to a specific region on a …\nThe integration detected a “paste” event (e.g. Cmd+V).\nA series of lines between points. The path can have a …\n<code>.</code>\nA picker, such as color picker.\n<code>|</code>, a vertical bar\nThe non-rendering part of what egui emits each frame.\n<code>+</code>\nNumber of ui points (logical pixels)\nMouse button (or similar for touch input)\nA mouse button was pressed or released (or a touch started …\nThe mouse left the screen, or the last/primary touch input …\nThe mouse or touch moved to a new place.\nMouse or touch state.\nPointing hand, used for e.g. web links\nThe content of a popup menu.\nA position on screen.\nA new IME candidate is being suggested.\nThe primary mouse button is usually the left one.\nShows that processing is being done, but that the program …\nA font where some characters are wider than other (e.g. ‘…\nA quadratic Bézier Curve.\n<code>?</code>\n<code>&#39;</code>\nConvenience for <code>Self::Max</code>\n+X\nA group of radio buttons.\nInclusive range of floats, i.e. <code>min..=max</code>, but more …\nWhat the integrations provides to egui at the start of …\nA rectangular region of space.\nRectangle with optional outline and fill.\nWhat called <code>Context::request_repaint</code> or …\nTiles the texture across the surface, repeating it …\nInformation given to the backend about when it is time to …\nReset the attention request and interrupt related …\nA <code>crate::Resize</code>.\nResize a column\nResize something rightwards (e.g. when dragging the …\nHorizontal resize <code>-</code> to make something wider or more narrow …\nDiagonal resize <code>/</code> (right-up to/from left-down)\nResize something up (e.g. when dragging the top edge of …\nResize something up and right (e.g. when dragging the …\nResize something up and left (e.g. when dragging the …\nDiagonal resize <code>\\</code> (left-up to/from right-down)\nResize a row\nResize something downwards (e.g. when dragging the bottom …\nResize something down and right (e.g. when dragging the …\nResize something down and left (e.g. when dragging the …\nVertical resize <code>|</code> (up-down or down-up)\nResize something leftwards (e.g. when dragging the left …\nThe result of adding a widget to a <code>Ui</code>.\n0-1 linear space <code>RGBA</code> color with premultiplied alpha.\nA right <code>crate::SidePanel</code>.\nHow rounded the corners of things should be\nThe reply of a screenshot requested with …\nA <code>crate::ScrollArea</code>.\nThe secondary mouse button is usually the right one, and …\n<code>;</code>\nWhat sort of interaction is a widget sensitive to?\nThe color and fuzziness of a fuzzy shape.\nA paint primitive such as a circle or a piece of text. …\n<code>/</code>\nUser just placed a touch point on the touch surface\nDescribes the width and color of a line.\nFollow the system’s theme preference.\nConvenience for <code>Self::Min</code>\nA table cell (from the <code>egui_extras</code> crate).\nText.\nText input, e.g. via keyboard.\nText caret, e.g. “Click here to edit text”\nFormatting option for a section of text.\nHow to wrap and elide text.\nHow the texture texels are filtered.\nUsed to paint images.\nWhat texture to use in a <code>Mesh</code> mesh.\nHow the texture texels are filtered.\nDefines how textures are wrapped around objects when …\nWhat has been allocated and freed during the last period.\nDark or Light theme.\nThe user’s theme preference.\nA tooltip, as shown by e.g. <code>crate::Response::on_hover_ui</code>.\nA top <code>crate::TopBottomPanel</code>.\nOn touch screens, report this <em>in addition to</em> …\nthis is a <code>u64</code> as values of this kind can always be …\nUnique identification of a touch occurrence (finger or pen …\nIn what phase a touch event is in.\nThe text should be elided using “…” when reaching …\n-Y\nThis is what you use to place widgets.\nBuild a <code>Ui</code> as the chlild of another <code>Ui</code>.\nWhat kind is this <code>crate::Ui</code>?\nInformation about a <code>crate::Ui</code> and its parents.\nInformation about a <code>crate::Ui</code> to be included in the …\nIterator that walks up a stack of <code>StackFrame</code>s.\nUser-chosen tags.\nYour own texture, defined in any which way you want. The …\nTypes of attention to request from a user when a native …\nRecursively nest more shapes - sometimes a convenience to …\nA vector has a direction and length. A <code>Vec2</code> is often used …\nTwo bools, one for each axis (X and Y).\nVertical text caret, e.g. “Click here to edit vertical …\nAn input event from the backend into egui, about a …\nInformation about the current viewport, given as input …\nNot yet ready, try later.\nDescribes a widget such as a <code>crate::Button</code> or a …\nUsed to store each widget’s Id, Rect and Sense each …\nStores the <code>WidgetRect</code>s of all widgets generated during a …\nThe different types of built-in widgets in egui\nA <code>crate::Window</code>.\nThe native window gained or lost focused (e.g. the user …\nThe text should wrap to the next line when reaching the <code>Ui</code> …\nRight\nDown\nThe zero position, the origin. The top left corner in a …\nA <code>Rect</code> filled with zeroes.\nNo rounding on any corner.\nZoom scale factor this frame (e.g. from a pinch gesture).\nEnhance!\nLet’s get a better overview\nFor use in tests; especially doctests.\nFor use in tests; especially doctests.\nUniformly colored rectangle.\nRectangle with a texture and color.\nAdd a triangle.\nReturns an additive version of self\nReturn an additive version of this color (alpha = 0)\nReturns a range of given size within a specified range.\ne.g. center a size within a given frame\nAre both <code>x</code> and <code>y</code> true?\nEither of the alt keys are down (option ⌥ on Mac).\nUsed e.g. to anchor a piece of text to a part of the …\nUse this anchor to position something around <code>pos</code>, e.g. …\nMeasures the angle of the vector.\nCreate a unit vector with the given CW angle (in radians).\nTrue if any member is NaN.\nTrue if any member is NaN.\nTrue if any member is NaN.\nAppend all the indices and vertices of <code>other</code> to <code>self</code>.\nAppend all the indices and vertices of <code>other</code> to <code>self</code> …\nFlip <code>min</code> and <code>max</code> if needed, so that <code>min &lt;= max</code> after.\nA view of the underlying data as <code>&amp;[u8]</code>\nA view of the underlying data as <code>&amp;mut [u8]</code>\nThe argument is the rectangle of the shadow caster.\nWidth / height\nwidth / height\nMore readable version of <code>self.max(lower_limit)</code>\nMake sure each corner has a rounding of at least this.\nMore readable version of <code>self.min(upper_limit)</code>\nMake sure each corner has a rounding of at most this.\nWhen using this font’s metrics to layout a row, shift …\nCursor to the first character.\nThe width of the blur, i.e. the width of the fuzzy …\n<code>max.y</code>\n<code>max.y</code>\nList of all the builtin font names used by <code>epaint</code>.\nAll widgets, by id, and their order in their respective …\nAll widgets, in painting order.\n<code>width x height x bytes_per_pixel</code>\nSet by the <code>eframe</code> web backend.\nReturns the amount of memory used by the vertices and …\nCan be used to cache computations from one frame to …\nCalculate a bounding rectangle.\nPaint something custom (e.g. 3D stuff).\nThe center of the range\nEquivalent to <code>x.clamp(min, max)</code>\nReturn the given points clamped to be inside the rectangle …\nRestore to default state, but without freeing memory.\nButtons, sliders, windows, …\nClip rectangle in points.\nClip / scissor rectangle. Only show the part of the <code>Mesh</code> …\nEverything painted in this <code>Painter</code> will be clipped against …\nThe “scissor” or “clip” rectangle. This is what …\nA line that closes back to the start point again.\nColor of the opaque center of the shadow.\nText color\nAdd a colored vertex.\nOn Windows and Linux, set this to the same value as <code>ctrl</code>. …\nWhat goes between the names\nContainers are pieces of the UI which wraps other pieces …\nA convex polygon with a fill and optional stroke.\nIf set, put this text in the system clipboard. Ignore if …\nHow to align things on the cross axis. For vertical …\nJustify the cross axis? For vertical layouts justify mean …\nEither of the control keys are down. When checking for …\nSource of fonts and destination of shapes\nUsed for optionally showing a tooltip and checking for …\nThe number of fully completed passes, of the entire …\nThe contents of some editable text (for <code>TextEdit</code> fields).\nCursor at the given position within the galley.\nSet the cursor to this icon.\nThe default style for new <code>Ui</code>:s in dark mode.\nTurn a line into dashes.\nTurn a line into dashes. If you need to create many dashed …\nTurn a line into dashes with different dash/gap lengths …\nTurn a line into dashes with different dash/gap lengths …\nAll the data sent between egui and the backend\nThis map stores some superficial state for all widgets …\nThis is an example of how to create a plugin for egui.\nSpecifies the default fonts if the feature <code>default_fonts</code> …\nThe default is linear for both magnification and …\nThe epaint font texture.\nRepaint after this duration. If zero, repaint as soon as …\nHow much the pointer moved compared to last frame, in …\nCurrent direction of pointer.\nThe distance from the rect to the position, squared.\nThe distance from the rect to the position.\nThe dot-product of two vectors.\nTurn a line into equally spaced dots.\nSliders, windows, scroll bars, scroll areas, …\nDragged files dropped into egui.\nSet to true the text was truncated due to …\nNo fonts.\nIf false we are unresponsive to input, and all widgets …\nWhether the widget is enabled.\nIs the widget enabled?\nCursor to one-past last character.\nIf <code>true</code>, pressing escape will act on the widget, and NOT …\nIn-order events received this frame.\nEvents that may be useful to e.g. a screen reader.\nIn-order events received this frame\nA <code>Rect</code> that contains every point above a certain y …\nA <code>Rect</code> that contains every point below a certain y …\nA <code>Rect</code> that contains every point to the left of the given …\nA <code>Rect</code> that contains every point to the right of the given …\nAn example color image, useful for tests.\nExpand by this much on each side, keeping the center\nExpand by this much in each direction, keeping the center\nExpand by this much in each direction, keeping the center\nExpand to include the given x coordinate\nExpand to include the given y coordinate\nExtra spacing between letters, in points.\nIf set, all shapes will have their colors modified to be …\nWhich theme to use in case <code>Self::theme_preference</code> is …\nWhich fonts (names) to use for each <code>FontFamily</code>.\nWhat font family to use.\nWhat file had the call that requested the repaint?\nFlip the min and the max\nThis widget wants focus.\nThe native window has the keyboard focus (i.e. is …\nIs the window focused and able to receive input?\nThe native window has the keyboard focus (i.e. is …\nThe content of a <code>.ttf</code> or <code>.otf</code> file.\nList of font names and their definitions.\nCurrent force of the touch (average of the forces of the …\nTextures to free after painting.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTransparent black\nCreate a <code>ColorImage</code> from flat opaque gray data.\nAlternative method to <code>from_gray</code>. Create a <code>ColorImage</code> from …\nParses a color from a hex string.\nleft-top corner plus a size (stretching right-down).\nBounding-box around the points.\nA zero-sized rect at a specific point.\nCreate a <code>ColorImage</code> from flat RGB data.\nFrom <code>sRGBA</code> with premultiplied alpha.\nFrom <code>sRGBA</code> WITHOUT premultiplied alpha.\nCreate a <code>ColorImage</code> from flat un-multiplied RGBA data.\nReturns the bounding rectangle of the two points.\nTransparent white\nAre we in fullscreen mode?\nAny uncolored parts of the <code>Galley</code> (using …\nAll text color in the <code>Galley</code> will be replaced with the …\nMultiply with 0.5 to make color half as opaque, …\nUsed to get a unique ID when implementing one of the …\nCreate a <code>Hyperlink</code> to the current <code>file!()</code> on github.\nCreate a <code>Hyperlink</code> to the current <code>file!()</code> (and line) on …\nHelpers for zooming the whole GUI of an app (changing …\nSet to <code>true</code> if the pointer has moved too much (since being …\nA horizontal line.\nIf <code>true</code>, pressing horizontal arrows will act on the …\nDragged files hovering over egui.\nGenerated based on id of parent ui together with an …\nThe <code>Id</code> of the widget/area this response pertains.\nThe globally unique widget id.\nAn image at the given position.\nThis is set if, and only if, the user is currently editing …\nInclude an image in the binary.\nWhich font face in the file to use. When in doubt, use <code>0</code>.\nDraw as triangles (i.e. the length is always multiple of …\nInfo about some widgets.\nWhat the user closure returned.\nThe inner rectangle of the native window, in monitor space …\nInput state management configuration.\nInput state management configuration.\nOptions related to input state handling.\nHow perceptually intense (bright) is the color?\nLatest position of the mouse, but ignoring any …\nThe rectangle sensing interaction.\nWhere the widget is.\nHow mouse and touch interzcts with widgets.\nThe intersection of two <code>Rect</code>, i.e. the area covered by …\nThe overlap of two ranges, i.e. the range that is …\nDo the two ranges intersect?\nDoes this Rect intersect the given ray (where <code>d</code> is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe intrinsic / desired size of the widget.\nShowing UI:s for egui/epaint types.\nIs the alpha=0 ?\nIs the alpha=0 ?\nTrue if width is zero or color is transparent\nTrue if all members are also finite.\nTrue if all members are also finite.\nTrue if all members are also finite.\n<code>width &lt; 0 || height &lt; 0</code>\n<code>width &gt; 0 &amp;&amp; height &gt; 0</code>\nAre the margin on every side the same?\nDo all corners have the same rounding?\nAre all indices within the bounds of the contained …\nThe job that this galley is the result of. Contains the …\nThe text on labels, buttons, checkboxes etc.\nWhen did the pointer get click last? Used to check for …\nWhen did the pointer get click two clicks ago? Used to …\nSet by the <code>eframe</code> web backend.\nWhen was the pointer last moved? Used for things like …\nTime of the last scroll event.\nLatest reported pointer position. When tapping a touch …\nWhere we paint\nWhich layer the widget is part of.\nWhat layer the widget is on.\nTransforms per layer\nHandles paint layers, i.e. how things are sometimes …\n<code>min.x</code>\n<code>min.x</code>\nLinear interpolation.\nLinearly interpolate towards another point, so that …\nLinearly interpolate so that <code>[0, 0]</code> is <code>Self::min</code> and <code>[1, 1]</code>…\nLerp this color towards <code>other</code> by <code>t</code> in gamma space.\nLinearly self towards other rect.\nThe default style for new <code>Ui</code>:s in light mode.\nA line through many points.\nWhat line number of the call that requested the repaint?\nExplicit line height of the text in points.\nMultiplier for the scroll speed when reported in …\nA line between two points. More efficient than calling …\nMultiply with 0.5 to make color half as opaque in linear …\nImage loading\nThe Mac ⌘ Command key. Should always be set to <code>false</code> on …\nHow to filter when magnifying (when texels are larger than …\nHow to align things on the main axis.\nMain axis direction\nJustify the main axis?\nIf true, wrap around when reading the end of the main …\nHow much larger than the parent rect are we in each …\nThe other corner, opposing <code>Self::min</code>. Usually the right …\nReturns the maximum of <code>self.x</code> and <code>self.y</code>.\nMaximum number of passes to run in one frame.\nMaximum size of one side of the font texture.\nMaximum size of one side of a texture.\nAre we maximized?\nMenu bar functionality (very basic so far).\nIndicates whether this Ui belongs to a Menu.\nTight bounding box around all the meshes in all the rows. …\nWith the <code>eframe</code> web backend, this is set to the mime-type …\nWith the <code>eframe</code> web backend, this is set to the mime-type …\nOne of the corners of the rectangle, usually the left top …\nReturns the minimum of <code>self.x</code> and <code>self.y</code>.\nWhether <code>Ui::remember_min_rect</code> should be called when the <code>Ui</code> …\nHow to filter when minifying (when texels are smaller than …\nAre we minimized?\nHow to filter between texture mipmaps.\nWhich modifier keys are down at the start of the frame?\nWhich modifier keys are down at the start of the frame?\nCurrent monitor size in egui points.\nHow much the mouse moved since the last frame, in …\nMultiply with e.g. 0.5 to make us half transparent\nIs there a mutable <code>TextEdit</code> under the cursor? Use by <code>eframe</code>…\nHelper module that adds extra checks when the …\nDebug-name.\nName of the file. Set by the <code>eframe</code> web backend.\nThe OS native pixels-per-point.\nRadius of the rounding of the North-East (right top) …\nIf you are using egui, use <code>egui::Context::load_texture</code> …\nCreate an image filled with the given color.\nnew fonts that will be applied at the start of the next …\nIf <code>true</code>, open the url in a new tab. If <code>false</code> open it in …\nThis is used to create a unique interact ID for some …\nSafe normalize: returns zero if input is zero.\nHow many ui passes is this the sum of?\nTotal number of indices in all the row meshes.\nNumber of touches (fingers) on the surface. Value is ≥ 2 …\nTotal number of vertices in all the row meshes.\nRadius of the rounding of the North-West (left top) corner.\nMove the shadow by this much.\nIf set, all shapes will have their colors modified with …\nIf set, open this url.\nGlobal egui options.\nThe outer rectangle of the native window, in monitor space …\nAll the data egui returns to the backend at the end of …\nSpecifies paint layer, clip rectangle and a reference to …\nParent viewport, if known.\nSet by the <code>egui-winit</code> backend.\nSet by the <code>egui-winit</code> backend.\nIf set, something is currently being dragged\nThe pixels, row by row, from top to bottom.\nThe coverage value.\nPixels per point.\nThe number of physical pixels for each logical point. …\nThe number of physical pixels per logical ui point, for …\nAlso known as device pixel ratio, &gt; 1 for high resolution …\nHandles the <code>Ui</code> size and the placement of new widgets.\nNon-rendering related output.\nState of the mouse or simple touch gestures which can be …\nAll button events that occurred this frame\nWhich popup-window is open (if any)? Could be a combo box, …\n<code>pos2(x, y) == Pos2::new(x, y)</code>\nReturns a 0-width Rect.\nReturns a 0-width Rect.\nReturns a 0-width Rect.\nReturns a 0-width Rect.\nRecent movement of the pointer. Used for calculating …\nReturns the point on the rect’s frame or in the center …\nShould be set to the expected time between frames when …\nEstimated time until next frame (provided we repaint right …\nIf true, the most common glyphs (ASCII) are pre-rendered …\nWhere did the current click/drag originate? <code>None</code> if no …\nWhen did the current click/drag originate? <code>None</code> if no …\nThe previous text value.\nWhat to paint - either a <code>Mesh</code> or a <code>PaintCallback</code>.\nThe raw input we got this frame from the backend.\nYou probably want to use <code>Self::smooth_scroll_delta</code> instead.\nExplicit reason; human readable.\nWhere to paint.\nBounding rect.\nThe area of the screen we are talking about.\nThe full widget rectangle.\nIf <code>true</code>, <code>egui</code> will discard the loaded image data after the …\nCreate a new Image from a patch of the current image. This …\nClone a sub-region as a new image.\nLinearly remap a value from one range to another, so that …\nLike <code>remap</code>, but also clamps the value so that the returned …\nIf any widget moves or changes id, repaint everything.\nWas <code>crate::Context::request_discard</code> called during the …\nMake room for this many additional triangles (will reserve …\nMake room for this many additional vertices. See also …\nThe response of the area.\n<code>max.x</code>\n<code>max.x</code>\nRotates the vector by 90°, i.e positive X to positive Y …\nRotate by some angle about an origin, in-place.\nRotate the bounds (will expand the <code>Rect</code>)\nRotation in radians. Moving fingers around each other will …\nRows of text, from top to bottom.\nThe same margin on every side.\nScale the shape by <code>factor</code>, in-place.\nScale the font’s glyphs by this much. this is only a …\nScale up by this factor in each direction, keeping the …\nScale up by this factor in each direction, keeping the …\nThis is a signal to any backend that we want the …\nPosition and size of the area that egui should use, in …\nPosition and size of the egui area.\nFull size of the screen, in pixels.\nControls the speed at which we zoom in when doing ctrl/cmd …\nRadius of the rounding of the South-East (right bottom) …\nThe current value of checkboxes and radio buttons.\nThe sense for the ui background.\nThe senses (click and/or drag) that the widget was …\nHow the widget responds to interaction.\nAssign a new image to an existing texture.\nNew or changed textures. Apply before painting.\n<code>max.y</code>\nKeep size\nkeep min\n<code>min.x</code>\nAssign a new image to a subregion of the whole texture.\n<code>max.x</code>\n<code>min.y</code>\nkeep min\nWhat to paint.\nEither of the shift keys are down.\nShrink by this much on each side, keeping the center\nShrink by this much in each direction, keeping the center\nShrink by this much in each direction, keeping the center\nSigned distance to the edge of the box.\n<code>rect.size() == Vec2 { x: rect.width(), y: rect.height() }</code>\nwidth x height\nwidth, height.\nwidth, height\nHeight in points.\nwidth x height\nSet to true in special cases where we do one frame where …\nHow many points the user scrolled, smoothed over a few …\nThe length of the range, i.e. <code>max - min</code>.\nThe default egui fonts supports around 1216 emojis in …\nSet both <code>x</code> and <code>y</code> to the same value.\nSplit rectangle in left and right halves. <code>t</code> is expected to …\nSplit rectangle in left and right halves at the given <code>x</code> …\nThis is for platforms that only support 16-bit index …\nSplit rectangle in top and bottom halves. <code>t</code> is expected to …\nSplit rectangle in top and bottom halves at the given <code>y</code> …\nExpand the shadow in all directions by this much.\n<code>[2, 1]</code> for wide screen, and <code>[1, 2]</code> for portrait, etc. At …\nReturns the textures as <code>sRGBA</code> premultiplied pixels, row by …\nTime since last frame (in seconds), but gracefully handles …\nThe <code>UiStack</code> for this <code>Ui</code>.\nPosition of the pointer at the time the gesture started.\nPoint in time when the gesture started.\nDid <code>Self::is_decidedly_dragging</code> go from <code>false</code> to <code>true</code> this …\negui theme (spacing, colors, etc).\nThe <code>Style</code> (visuals, spacing, etc) of this ui. Commonly …\nTotal margins on both sides\nRadius of the rounding of the South-West (left bottom) …\nMargins with the same size on opposing sides\nDoes the OS use dark or light mode?\nThe current system theme, used to choose between dark and …\nIf <code>true</code>, pressing tab will act on the widget, and NOT move …\nControls the tessellator.\nThe full, non-elided text of the input job.\nHelpers regarding text selection for labels and text edit.\nSelected range of characters in <code>Self::current_text_value</code>.\nThe texture to use when drawing these triangles.\nTexture changes since last frame (including the font …\nPreference for selection between dark and light …\nMonotonically increasing time, in seconds. Relative to …\nTime in seconds. Relative to whatever. Used for animation.\nLatest known time\nName of the viewport, if known.\nPremultiplied RGBA\nPremultiplied RGBA\nConvert <code>Min =&gt; 0.0</code>, <code>Center =&gt; 0.5</code> or <code>Max =&gt; 1.0</code>.\nFormats the color as a hex string.\nConverts to floating point values in the range 0-1 without …\nReturns an opaque version of self\nReturns an opaque version of self\nTreat this vector as a position. <code>v.to_pos2()</code> is equivalent …\nunmultiply the alpha\nConvert <code>Min =&gt; -1.0</code>, <code>Center =&gt; 0.0</code> or <code>Max =&gt; 1.0</code>.\n-1, 0, or +1 for each axis\nunmultiply the alpha\nPremultiplied RGBA\nPremultiplied RGBA\nThe vector from origin to this position. <code>p.to_vec2()</code> is …\n<code>min.y</code>\n<code>min.y</code>\nState of touches, except those covered by <code>PointerState</code> …\nTransform the mesh in-place with the given transform.\nMove the shape by this many points, in-place.\nTranslate location by this much, in-place\nMove the shape by <code>delta</code>, in-place.\nRelative movement (comparing previous frame and current …\nExtra scale and vertical tweak to apply to all text of …\nThe type of widget this is.\nThe union of two bounding rectangle, i.e. the minimum <code>Rect</code> …\nThis is a globally unique ID of this <code>Ui</code>, based on where in …\nUsed for smoothing the scroll delta.\nUsed for smoothing the scroll delta when zooming.\nTime since last frame, in seconds.\nMiscellaneous tools used by the rest of egui.\nIf you use a small font and <code>Align::TOP</code> you can get the …\nThe current value of sliders etc.\n<code>vec2(x, y) == Vec2::new(x, y)</code>\nCurrent velocity of pointer.\nIf <code>true</code>, pressing vertical arrows will act on the widget, …\nThe vertex data indexed by <code>indices</code>.\negui supports multiple viewports, corresponding to …\nViewport in points.\nThis is used to specify what viewport that should repaint.\nThe id of the active viewport.\nThe viewport rectangle. This is what you would use in e.g. …\nAll the active viewports, including the root.\nInformation about all egui viewports.\nThe visual bounding rectangle (includes stroke widths)\nA vertical line.\nHelper function that adds a label when compiling with …\nCheck reusing of <code>Id</code>s, and show a visual warning on screen …\nWidgets are pieces of GUI such as <code>Label</code>, <code>Button</code>, <code>Slider</code> …\nHow to wrap the texture when the texture coordinates are …\nReturns an alignment by the X (horizontal) axis\nHow far to the right.\nRightwards. Width.\nReturns an alignment by the Y (vertical) axis\nHow far down.\nDownwards. Height.\nShift font’s glyphs downwards by this amount of logical …\nShift font’s glyphs downwards by this fraction of the …\nSwizzle the axes.\nProportional zoom factor (pinch gesture).\n2D non-proportional zoom factor (pinch gesture).\nGlobal zoom factor of the UI.\nZoom scale factor this frame (e.g. from ctrl-scroll or …\nIf <code>true</code>, egui will change the scale of the ui (…\nWhat mouse button? For touches, use <code>PointerButton::Primary</code>.\nThe direction of the vector indicates how to move the …\nHashed device identifier (if available; may be zero). Can …\nDescribes how hard the touch device was pressed. May …\nUnique identifier of a finger/pen. Value is stable from …\nMost of the time, it’s the logical key, heeding the …\nThe state of the modifier keys at the time of the event.\nThe state of the modifier keys at the time of the event.\nThe state of the modifier keys at the time of the event.\nOne of: start move end cancel.\nThe physical key, corresponding to the actual position on …\nWhere is the pointer?\nPosition of the touch (or where the touch was last …\nWas it pressed or released?\nWas it the button/touch pressed this frame, or released?\nIf this is a <code>pressed</code> event, is it a key-repeat?\nThe unit of <code>delta</code>: points, lines, or pages.\nSee <code>crate::Context::animate_bool</code> for documentation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhen did <code>value</code> last toggle?\nIndicate whether a popup will be shown above or below the …\nAn area on the screen that can be moved by dragging.\nState of an <code>Area</code> that is persisted between frames.\nA drop-down selection menu with a descriptive label.\nA function that paints the <code>ComboBox</code> icon\nA region that can be resized by dragging the bottom right …\nPut some widgets on the left and right sides of a ui.\nBuilder for a floating window which can be dragged, …\nArea is a <code>Ui</code> that has no parent, it floats on the …\nFrame container\nIf false, clicks goes straight through to what is behind …\nAt what time was this area first shown?\nPanels are <code>Ui</code> regions taking up e.g. the left side of a <code>Ui</code> …\nThe anchor point of the area, i.e. where on the area the …\nLast known position of the pivot.\nShow popup windows, tooltips, context menus etc.\nIf false, we are no enabled\nLast known size.\nAn area on the screen that can be moved by dragging.\nState of an <code>Area</code> that is persisted between frames.\nSet anchor and distance.\nConstrains this area to <code>Context::screen_rect</code>?\nConstrain the movement of the window to the given …\nPositions the window but you can still move it.\nSee <code>Self::default_size</code>.\nThe size used for the <code>Ui::max_rect</code> the first frame.\nSee <code>Self::default_size</code>.\nIf false, no content responds to click and widgets will be …\nIf <code>true</code>, quickly fade in the area.\nPositions the window and prevents it from being moved\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLet’s you change the <code>id</code> that you assigned in <code>Self::new</code>.\nIf false, clicks goes straight through to what is behind …\nIf false, clicks goes straight through to what is behind …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChange the <code>UiKind</code> of the arena.\nAt what time was this area first shown?\nThe left top positions of the area.\nLoad the state of an <code>Area</code> from memory.\nMoveable by dragging the area?\nThe <code>id</code> must be globally unique.\n<code>order(Order::Foreground)</code> for an Area that should always be …\nWhere the “root” of the area is.\nThe anchor point of the area, i.e. where on the area the …\nLast known position of the pivot.\nWhere the area is on screen.\nExplicitly set a sense.\nMove the left top positions of the area.\nLast known size.\nWe always make windows invisible the first frame to hide …\nA header which can be collapsed/expanded, revealing a …\nThe response from showing a <code>CollapsingHeader</code>.\nThis is a a building block for building collapsing regions.\nFrom <code>CollapsingState::show_header</code>.\nA function that paints an icon indicating if the region is …\nReturns the response of the collapsing button, the custom …\nNone iff collapsed.\nNone iff collapsed.\nReturns the response of the collapsing button, the custom …\nBy default, the <code>CollapsingHeader</code> is collapsed. Call …\nIf you set this to <code>false</code>, the <code>CollapsingHeader</code> will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWas the <code>CollapsingHeader</code> fully closed (and not being …\nWas the <code>CollapsingHeader</code> fully open (and not being …\nResponse of the actual clickable header.\nUse the provided function to render a different …\nExplicitly set the source of the <code>Id</code> of this widget, …\nExplicitly set the source of the <code>Id</code> of this widget, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>CollapsingHeader</code> starts out collapsed unless you call …\nCalling <code>.open(Some(true))</code> will make the collapsing header …\nHeight of the region when open. Used for animations\n0 for closed, 1 for open, with tweening\n0.0 if fully closed, 1.0 if fully open, and something …\nPaint the arrow icon that indicated if the region is open …\nShould the <code>CollapsingHeader</code> show a background behind it? …\nShow body if we are open, with a nice animation between …\nShow body if we are open, with a nice animation between …\nWill toggle when clicked, etc.\nWill toggle when clicked, etc.\nWill toggle when clicked, etc.\nShows header and body (if expanded).\nPaint this <code>CollapsingState</code>’s toggle button. Takes an …\nIndicate whether a popup will be shown above or below the …\nA drop-down selection menu with a descriptive label.\nA function that paints the <code>ComboBox</code> icon\nReturns the argument unchanged.\nReturns the argument unchanged.\nWithout label.\nWithout label.\nLabel shown next to the combo box\nSet the maximum outer height of the menu.\nUse the provided function to render a different <code>ComboBox</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the <code>ComboBox</code> with the given id has its popup menu …\nCreate new <code>ComboBox</code> with id and label\nWhat we show as the currently selected value\nShow a list of items with the given selected index.\nShow the combo box, with the given ui code for the menu …\nSet <code>Self::wrap_mode</code> to <code>TextWrapMode::Truncate</code>.\nConvert a <code>ComboBox</code> id to the id used to store it’s popup …\nSet the outer width of the button and menu.\nSet <code>Self::wrap_mode</code> to <code>TextWrapMode::Wrap</code>.\nControls the wrap mode used for the selected text.\nAdd a background, frame and/or margin to a rectangular …\nAllocate the space that was used by <code>Self::content_ui</code>.\nBegin a dynamically colored frame.\nA canvas to draw on.\nAdd your widgets to this UI so it ends up within the frame.\nA dark canvas to draw on.\nConvenience for calling <code>Self::allocate_space</code> and …\nThe frame that was prepared.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor when you want to group a few widgets together within a …\nMargin within the painted frame.\nMargin within the painted frame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpacity multiplier in gamma space.\nMargin outside the painted frame.\nMargin outside the painted frame.\nPaint the frame.\nPaint this frame as a shape.\nShow the given ui surrounded by this frame.\nShow using dynamic dispatch.\ninner margin plus outer margin.\nThis is where we will insert the frame shape so it ends up …\nA panel that covers the remainder of the screen, i.e. …\nState regarding panels.\n<code>Left</code> or <code>Right</code>\nA panel that covers the entire left or right side of a <code>Ui</code> …\nA panel that covers the entire top or bottom of a <code>Ui</code> or …\n<code>Top</code> or <code>Bottom</code>\nThe id should be globally unique, e.g. …\nThe initial height of the <code>TopBottomPanel</code>, including …\nThe initial wrapping width of the <code>SidePanel</code>, including …\nEnforce this exact height, including margins.\nEnforce this exact width, including margins.\nChange the background color, margins, etc.\nChange the background color, margins, etc.\nChange the background color, margins, etc.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe allowable height range for the panel, including …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe id should be globally unique, e.g. …\nMaximum height of the panel, including margins.\nMaximum width of the panel, including margins.\nMinimum height of the panel, including margins.\nMinimum width of the panel, including margins.\nThe id should be globally unique, e.g. <code>Id::new(&quot;my_panel&quot;)</code>.\nThe id should be globally unique, e.g. <code>Id::new(&quot;my_panel&quot;)</code>.\nCan panel be resized by dragging the edge of it?\nCan panel be resized by dragging the edge of it?\nThe id should be globally unique, e.g. …\nShow the panel at the top level.\nShow the panel at the top level.\nShow the panel at the top level.\nShow the panel if <code>is_expanded</code> is <code>true</code>, otherwise don’t …\nShow the panel if <code>is_expanded</code> is <code>true</code>, otherwise don’t …\nShow either a collapsed or a expanded panel, with a nice …\nShow either a collapsed or a expanded panel, with a nice …\nShow either a collapsed or a expanded panel, with a nice …\nShow either a collapsed or a expanded panel, with a nice …\nShow the panel if <code>is_expanded</code> is <code>true</code>, otherwise don’t …\nShow the panel if <code>is_expanded</code> is <code>true</code>, otherwise don’t …\nShow the panel at the top level.\nShow the panel at the top level.\nShow the panel at the top level.\nShow the panel inside a <code>Ui</code>.\nShow the panel inside a <code>Ui</code>.\nShow the panel inside a <code>Ui</code>.\nShow the panel inside a <code>Ui</code>.\nShow the panel inside a <code>Ui</code>.\nShow the panel inside a <code>Ui</code>.\nShow a separator line, even when not interacting with it?\nShow a separator line, even when not interacting with it?\nThe size of the panel (from previous frame).\nThe id should be globally unique, e.g. …\nThe allowable width range for the panel, including margins.\nPopup will be closed on click anywhere, inside or outside …\nPopup will be closed if the click happened somewhere else …\nClicks will be ignored. Popup might be closed manually by …\nDetermines popup’s close behavior\nReturns <code>(PIVOT, POS)</code> to mean: put the <code>PIVOT</code> corner of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhat is the id of the next tooltip for this widget?\nShows a popup above or below another widget.\nHelper for <code>popup_above_or_below_widget</code>.\nShow a tooltip at the current pointer position (if any).\nShow a tooltip at the given position.\nShow a tooltip at the current pointer position (if any).\nShow a tooltip under the given area.\nShow some text at the current pointer position (if any).\nWas this popup visible last frame?\nA region that can be resized by dragging the bottom right …\nNot manually resizable, just takes the size of its …\nPreferred / suggested height. Actual height will depend on …\nPreferred / suggested width. Actual width will depend on …\nThis is the size that the user has picked by dragging the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAssign an explicit and globally unique id.\nA source for the unique <code>Id</code>, e.g. …\nA source for the unique <code>Id</code>, e.g. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nActual size of content last frame\nWon’t expand to larger than this\nWon’t expand to larger than this\nWon’t expand to larger than this\nWon’t shrink to smaller than this\nWon’t shrink to smaller than this\nWon’t shrink to smaller than this\nExternally requested size (e.g. by Window) for the next …\nCan you resize it with the mouse?\nIf false, we are no enabled\nHide scroll bar even if they are needed.\nAlways show the scroll bar, even if the contents fit in …\nAdd vertical and/or horizontal scrolling to a contained <code>Ui</code>.\nIndicate whether the horizontal and vertical scroll bars …\nShow scroll bars only when the content size exceeds the …\nShould the scroll area animate <code>scroll_to_*</code> functions?\nIf false, <code>scroll_to_*</code> functions will not be animated\nFor each axis, should the containing area shrink if the …\nCreate a bi-directional (horizontal and vertical) scroll …\nThe content were to large to fit large frame.\nThe size of the content. If this is larger than …\nHow much horizontal and vertical space are used up by the …\nCan the user drag the scroll area to scroll?\nControl the scrolling behavior.\nReturns content size and state\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a horizontal scroll area.\nSet the horizontal scroll offset position.\nTurn on/off scrolling on the horizontal axis.\n<code>Id</code> of the <code>ScrollArea</code>.\nA source for the unique <code>Id</code>, e.g. …\nA source for the unique <code>Id</code>, e.g. …\nWhat the user closure returned.\nWhere on the screen the content is (excludes scroll bars).\nWhere on the screen the content is (excludes scroll bars).\nArea that can be dragged. This is the size of the content …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs any scrolling enabled?\nThe maximum height of the outer frame of the scroll area.\nThe maximum width of the outer frame of the scroll area.\nThe minimum height of a vertical scroll area which …\nThe minimum width of a horizontal scroll area which …\nCreate a scroll area where both direction of scrolling is …\nCreate a scroll area where you decide which axis has …\nPositive offset means scrolling down/right\nIf set, quickly but smoothly scroll to this target offset.\nTurn on/off scrolling on the horizontal/vertical axes.\nTurn on/off scrolling on the horizontal/vertical axes.\nDid the user interact (hover or drag) the scroll bars last …\nSpecify within which screen-space rectangle to show the …\nSet the visibility of both horizontal and vertical scroll …\nDoes this <code>ScrollArea</code> have horizontal/vertical scrolling …\nDo we have horizontal/vertical scrolling enabled?\nSet the horizontal and vertical scroll offset position.\nMouse offset relative to the top of the handle when …\nIs the scroll sticky. This is true while scroll handle is …\nIf false, we ignore scroll events.\nShow the <code>ScrollArea</code>, and add the contents to the viewport.\nSmoothly interpolated boolean of whether or not to show …\nEfficiently show only the visible part of a large number …\nWere the scroll bars visible last frame?\nThis can be used to only paint the visible part of the …\nThe current state of the scroll area.\nThe scroll handle will stick to the bottom position even …\nIf true for vertical or horizontal the scroll wheel will …\nThe scroll handle will stick to the rightmost position …\nMomentum, used for kinetic scrolling\nGet the current kinetic scrolling velocity.\nCreate a vertical scroll area.\nSet the vertical scroll offset position.\nRelative coordinates: the offset and size of the view of …\nTurn on/off scrolling on the vertical axis.\nPut some widgets on the left and right sides of a ui.\nReturns the argument unchanged.\nThe minimum height of the sides.\nCalls <code>U::from(self)</code>.\nThe horizontal spacing between the left and right UIs.\nWhich sides can be resized?\nResizing the window edges.\nA minitature version of <code>Response</code>, for each side of the …\nBuilder for a floating window which can be dragged, …\nSet anchor and distance.\nNot resizable, just takes the size of its contents. Also …\nPaints the “Close” button of the window and processes …\nPaints the “Close” button at the right side of the …\nCan the window be collapsed by clicking on its title?\nConstrains this window to <code>Context::screen_rect</code>.\nConstrain the movement of the window to the given …\nSet current position of the window. If the window is …\nSet initial height of the window.\nSet initial collapsed state of the window\nSet initial position of the window.\nSet initial position and size of the window.\nSet initial size of the window.\nSet initial width of the window.\nEnable/disable scrolling on the window by dragging with …\nIf <code>false</code> the window will be grayed out and non-interactive.\nIf <code>true</code>, quickly fade in the <code>Window</code> when it first appears.\nIf <code>true</code>, quickly fade out the <code>Window</code> when it closes.\nSets the window position and prevents it from being …\nSets the window pos and size and prevents it from being …\nSets the window size and prevents it from being resized by …\nChange the background color, margins, etc.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnable/disable horizontal scrolling. <code>false</code> by default.\nAssign a unique id to the Window. Required if the title …\nA title Id used for dragging windows\nIf false, clicks goes straight through to what is behind …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet maximum height of the window.\nSet maximum size of the window, equivalent to calling both …\nSet maximum width of the window.\nSet minimum height of the window.\nSize of the title bar in a collapsed state (if window is …\nSet minimum size of the window, equivalent to calling both …\nSet minimum width of the window.\nIf <code>false</code> the window will be immovable.\nUsage: …\nThe window title is used as a unique <code>Id</code> and must be …\nCall this to add a close-button to the window title bar.\n<code>order(Order::Foreground)</code> for a Window that should always …\nFill in parts of the window frame when we resize by …\nWhere the “root” of the window is.\nSize of the title bar in an expanded state. This size …\nCan the user resize the window by dragging its edges?\nUsage: …\nEnable/disable horizontal/vertical scrolling. <code>false</code> by …\nEnable/disable horizontal/vertical scrolling. <code>false</code> by …\nReturns <code>None</code> if the window is not open (if <code>Window::open</code> …\nShow title bar on top of the window? If <code>false</code>, the window …\nPrepared text in the title\nFinishes painting of the title bar when the window content …\nEnable/disable vertical scrolling. <code>false</code> by default.\nYour handle to egui.\nGeneric event callback.\nCallbacks that users can register\nWhat called <code>Context::request_repaint</code> or …\nInformation given to the backend about when it is time to …\nPer-viewport state related to repaint scheduling.\nState stored per viewport.\nAdd a new bytes loader.\nAdd a new image loader.\nAdd a new texture loader.\nMutate the <code>Style</code>s used by all subsequent windows, panels …\nReturns a value in the range [0, 1], to indicate “how on…\nLike <code>Self::animate_bool</code>, but uses an easing function that …\nLike <code>Self::animate_bool</code> but allows you to control the …\nLike <code>Self::animate_bool</code> but allows you to control the …\nLike <code>Self::animate_bool</code> but allows you to control the …\nSmoothly animate an <code>f32</code> value.\nHow much space is still available after panels has been …\nSee <code>Self::begin_pass</code>.\nAn alternative to calling <code>Self::run</code>.\nThis is where we update the repaint logic.\nThe latest delta\nWhat caused repaints during this pass?\nIf the given <code>Id</code> has been used previously the same pass at …\nThe type of viewport.\nClear memory of any animations.\nConstrain the position of a window/area so it fits within …\nCopy the given text to the system clipboard.\nCreate a widget and check for interaction.\nThe total number of completed passes (usually there is one …\nMonotonically increasing counter.\nThe total number of completed passes (usually there is one …\nThe number of fully completed passes, of the entire …\nRead-only access to <code>IdTypeMap</code>, which stores superficial …\nRead-write access to <code>IdTypeMap</code>, which stores superficial …\nWhether or not to debug widget layout on hover.\nPaint on top of everything else\nCalled at the end of the pass.\nPrint this text next to the cursor at the end of the pass.\nRepaint after this duration. If zero, repaint as soon as …\nThis widget just started being dragged this pass.\nThis widget was being dragged, but was released this pass\nThe widget currently being dragged, if any.\nIs something else being dragged?\nIf <code>true</code>, <code>Self::show_viewport_deferred</code> and …\nCall at the end of each frame if you called …\nCall at the end of each frame if you called …\nWhat file had the call that requested the repaint?\nRead-only access to <code>Fonts</code>.\nSince we could have multiple viewports across multiple …\nRelease all memory and textures related to images used in …\nRelease all memory and textures related to the given image …\nFormat the given shortcut in a human-readable way (e.g. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDo all interaction for an existing widget, without …\nRead-only access to <code>GraphicLayers</code>, where painted …\nRead-write access to <code>GraphicLayers</code>, where painted …\nHas a repaint been requested for the current viewport?\nHas a repaint been requested for the given viewport?\nHighlight this widget, to make it look like it is hovered, …\nWhich widgets are under the pointer?\nAssociate some static bytes with a <code>uri</code>.\nRead-only access to <code>InputState</code>.\nThis will create a <code>InputState::default()</code> if there is no …\nRead-write access to <code>InputState</code>.\nThis will create a <code>InputState::default()</code> if there is no …\nShow the state of egui, including its input and output.\nWhat widgets are being interacted with this pass?\nRead you what widgets are currently being interacted with.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this specific widget being dragged?\nIs an egui context menu open?\nReturns <code>true</code> if the chain of bytes, image, or texture …\nIs the pointer (mouse/touch) over any egui area?\nIs egui currently using the pointer position (e.g. …\nWhat is the last viewport rendered?\nTop-most layer at the given position.\nGet a full-screen painter for a new or existing layer\nWhat line number of the call that requested the repaint?\nAllocate a texture.\nThe loaders of bytes, images, and textures.\nRead-only access to <code>Memory</code>.\nRead-write access to <code>Memory</code>.\nShows the contents of <code>Self::memory</code>.\nMoves the given area to the top in its <code>Order</code>.\nCalls <code>InputState::multi_touch</code>.\nThe number of physical pixels for each logical point on …\nCapture the file and line number of the call site.\nCapture the file and line number of the call site, as well …\nSet during the pass, becomes active at the start of the …\nCall the given callback at the start of each pass of each …\nCall the given callback at the end of each pass of each …\nOpen an URL in a browser.\nRead-only access to <code>Options</code>.\nRead-write access to <code>Options</code>.\nWhat operating system are we running on?\nRead-only access to <code>PlatformOutput</code>.\nRead-write access to <code>PlatformOutput</code>.\nWhile positive, keep requesting repaints. Decrement at the …\nReturn the <code>ViewportId</code> of his parent.\nReturn the <code>ViewportId</code> of his parent.\nRead-only access to <code>PassState</code>.\nRead-write access to <code>PassState</code>.\nThe number of physical pixels for each logical point.\nIf it is a good idea to show a tooltip, where is pointer?\nIf you detect a click or drag and wants to know where it …\nLatest reported pointer position.\nWhat triggered a repaint the previous pass? (i.e: why are …\nThe final <code>PassState</code> from last pass.\nWhat was the output of <code>repaint_delay</code> on the previous pass?\nRead-only access to the <code>PassState</code> from the previous pass.\nDo read-only (shared access) transaction on Context\nRead the response of some widget, which may be called …\nExplicit reason; human readable.\nDoes the given rectangle contain the mouse pointer?\nThis is called by <code>Response::widget_info</code>, but can also be …\nState related to repaint scheduling.\nWhy are we repainting?\nThe duration which the backend will poll for new events …\nRequest to discard the visual output of this pass, and to …\nCall this if there is need to repaint the UI, i.e. if you …\nRequest repaint after at most the specified duration …\nRequest repaint after at most the specified duration …\nRepaint after this many seconds.\nCall this if there is need to repaint the UI, i.e. if you …\nWas a repaint requested last pass for the current viewport?\nWas a repaint requested last pass for the given viewport?\nUseful for pixel-perfect rendering of lines that are one …\nUseful for pixel-perfect rendering of filled shapes\nUseful for pixel-perfect rendering of filled shapes\nUseful for pixel-perfect rendering of filled shapes\nUseful for pixel-perfect rendering of lines that are one …\nUseful for pixel-perfect rendering of filled shapes\nRun the ui code for one 1.\nPosition and size of the egui area.\nSend a command to the current viewport.\nSend a command to a specific viewport.\nSet the cursor icon.\nTurn on/off whether or not to debug widget layout on hover.\nSet which widget is being dragged.\nIf <code>true</code>, <code>Self::show_viewport_deferred</code> and …\nTell <code>egui</code> which fonts to use.\nFor integrations: Set this to render a sync viewport.\nSet the operating system we are running on.\nSet the number of physical pixels for each logical point. …\nFor integrations: this callback will be called when an …\nThe currently active <code>Style</code> used by all new windows, panels …\nThe <code>Style</code> used by all new windows, panels etc. Use …\nMark the <code>child</code> layer as a sublayer of <code>parent</code>.\nThe <code>Theme</code> used to select between dark and light <code>Self::style</code>\nTransform the graphics of the given layer.\nThe <code>crate::Visuals</code> used by all subsequent windows, panels …\nThe <code>crate::Visuals</code> used by all subsequent windows, panels …\nSets zoom factor of the UI. Will become active at the …\nShow a ui for settings (style and tessellation options).\nShow a deferred viewport, creating a new native window, if …\nShow an immediate viewport, creating a new native window, …\nStop dragging any widget.\nThe currently active <code>Style</code> used by all subsequent windows, …\nMutate the currently active <code>Style</code> used by all subsequent …\nMutate the <code>Style</code> used by all subsequent windows, panels …\nThe <code>Style</code> used by all subsequent windows, panels etc.\nEdit the <code>Style</code>.\nDoes the OS use dark or light mode? This is used when the …\nTessellate the given shapes into triangle meshes.\nRead-only access to <code>TessellationOptions</code>.\nRead-write access to <code>TessellationOptions</code>.\nLow-level texture manager.\nAll viewports share the same texture manager and texture …\nShow stats about the allocated textures.\nThe <code>Theme</code> used to select the appropriate <code>Style</code> (dark or …\nState that is collected during a pass and then cleared.\nRetrieve the <code>LayerId</code> of the top level windows.\nTransform all the graphics at the given layer.\nMove all the graphics at the given layer.\nTry loading the bytes from the given uri using any …\nTry loading the image from the given uri using any …\nTry loading the texture from the given uri using any …\nLoad fonts unless already loaded.\nHas this viewport been updated this pass?\nHow much space is used by panels and windows.\nHow much space is used by panels and windows.\nThe current active viewport\nRead the state of the current viewport.\nRead the state of a specific current viewport.\nReturn the <code>ViewportId</code> of the current viewport.\nReturn the <code>ViewportId</code> of the current viewport.\nThis is used to specify what viewport that should repaint.\nHow deeply nested are we?\nThe user-code that shows the GUI, used for deferred …\nIf <code>true</code>, egui is currently listening on text input (e.g. …\nTrue if egui is currently interested in the pointer (mouse …\nReturns <code>true</code> if the widget with the given <code>Id</code> contains the …\nWill the visual output of this pass be discarded?\nCall the provided function with the given ID pushed on the …\nDo read-write (exclusive access) transaction on Context\nGlobal zoom factor of the UI.\nThe input needed by egui.\nAll the data egui returns to the backend at the end of …\nOn Mac: ⌘ Command key, elsewhere: Ctrl key\nTouch operation has been disrupted by something (various …\nThe user clicked the close-button on the window, or …\nIME composition ended with this final result.\nThe integration detected a “copy” event (e.g. Cmd+C).\nThe integration detected a “cut” event (e.g. Cmd+X).\nNotifies when the IME was disabled.\nA file dropped into egui.\nNotifies when the IME was enabled.\nUser lifted the finger or pen from the surface, or slid …\nAn input event generated by the integration.\nControls which events that a focused widget will have …\nThe first extra mouse button on some mice. In web …\nThe second extra mouse button on some mice. In web …\nA file about to be dropped into egui.\nIME Event\nIME event.\nA key was pressed or released.\nA keyboard shortcut, e.g. <code>Ctrl+Alt+W</code>.\nNumber of lines\nThe Mac ⌘ Command key\nThe tertiary mouse button is usually the middle mouse …\nNames of different modifier keys.\nState of the modifier keys. These must be fed to egui.\nThe mouse moved, the units are unspecified. Represents the …\nA raw mouse wheel event as sent by the backend.\nThe unit associated with the numeric value of a mouse …\nUser moves a touch point along the surface. This event is …\nAlt, Ctrl, Shift, Cmd\nNumber of pointer buttons supported by egui, i.e. the …\nNumber of pages\nThe integration detected a “paste” event (e.g. Cmd+V).\nNumber of ui points (logical pixels)\nMouse button (or similar for touch input)\nA mouse button was pressed or released (or a touch started …\nThe mouse left the screen, or the last/primary touch input …\nThe mouse or touch moved to a new place.\nA new IME candidate is being suggested.\nThe primary mouse button is usually the left one.\nWhat the integrations provides to egui at the start of …\n⌥ ⌃ ⇧ ⌘ - NOTE: not supported by the default egui …\nThe reply of a screenshot requested with …\nThe secondary mouse button is usually the right one, and …\nUser just placed a touch point on the touch surface\nText input, e.g. via keyboard.\nOn touch screens, report this <em>in addition to</em> …\nthis is a <code>u64</code> as values of this kind can always be …\nUnique identification of a touch occurrence (finger or pen …\nIn what phase a touch event is in.\nAn input event from the backend into egui, about a …\nInformation about the current viewport, given as input …\nThe native window gained or lost focused (e.g. the user …\nZoom scale factor this frame (e.g. from a pinch gesture).\nEither of the alt keys are down (option ⌥ on Mac).\nAdd on new input.\nSet by the <code>eframe</code> web backend.\nThis viewport has been told to close.\nChecks only cmd/ctrl, not alt/shift.\nOn Windows and Linux, set this to the same value as <code>ctrl</code>. …\ntrue if only <code>Self::ctrl</code> or only <code>Self::mac_cmd</code> is pressed.\nWhat goes between the names\nWhether another set of modifiers is contained in this set …\nEither of the control keys are down. When checking for …\nDragged files dropped into egui.\nIf <code>true</code>, pressing escape will act on the widget, and NOT …\nIn-order events received this frame.\nThe native window has the keyboard focus (i.e. is …\nIs the window focused and able to receive input?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAre we in fullscreen mode?\nIf <code>true</code>, pressing horizontal arrows will act on the …\nDragged files hovering over egui.\nThe inner rectangle of the native window, in monitor space …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet by the <code>eframe</code> web backend.\nThe Mac ⌘ Command key. Should always be set to <code>false</code> on …\nCheck for equality but with proper handling of …\nChecks that the <code>ctrl/cmd</code> matches, and that the <code>shift/alt</code> …\nMaximum size of one side of the font texture.\nAre we maximized?\nWith the <code>eframe</code> web backend, this is set to the mime-type …\nWith the <code>eframe</code> web backend, this is set to the mime-type …\nAre we minimized?\nWhich modifier keys are down at the start of the frame?\nCurrent monitor size in egui points.\nName of the file. Set by the <code>eframe</code> web backend.\nThe OS native pixels-per-point.\nThe outer rectangle of the native window, in monitor space …\nParent viewport, if known.\nSet by the <code>egui-winit</code> backend.\nSet by the <code>egui-winit</code> backend.\nShould be set to the expected time between frames when …\nPosition and size of the area that egui should use, in …\nEither of the shift keys are down.\nIs shift the only pressed button?\nDoes the OS use dark or light mode?\nIf <code>true</code>, pressing tab will act on the widget, and NOT move …\nHelper: move volatile (deltas and events), clone the rest.\nHelper: move <code>Self::events</code>, clone the other fields.\nMonotonically increasing time, in seconds. Relative to …\nName of the viewport, if known.\nIf <code>true</code>, pressing vertical arrows will act on the widget, …\nInfo about the active viewport\nThe id of the active viewport.\nInformation about all egui viewports.\nWhat mouse button? For touches, use <code>PointerButton::Primary</code>.\nThe direction of the vector indicates how to move the …\nHashed device identifier (if available; may be zero). Can …\nDescribes how hard the touch device was pressed. May …\nUnique identifier of a finger/pen. Value is stable from …\nMost of the time, it’s the logical key, heeding the …\nThe state of the modifier keys at the time of the event.\nThe state of the modifier keys at the time of the event.\nThe state of the modifier keys at the time of the event.\nOne of: start move end cancel.\nThe physical key, corresponding to the actual position on …\nWhere is the pointer?\nPosition of the touch (or where the touch was last …\nWas it pressed or released?\nWas it the button/touch pressed this frame, or released?\nIf this is a <code>pressed</code> event, is it a key-repeat?\nThe unit of <code>delta</code>: points, lines, or pages.\nAll egui keys\n<code>\\</code>\n`, also known as “backquote” or “grave”\n<code>:</code>\n<code>,</code>\n<code>=</code>\nKeyboard keys.\n<code>-</code>\n<code>0</code> (from main row or numpad)\n<code>1</code> (from main row or numpad)\n<code>2</code> (from main row or numpad)\n<code>3</code> (from main row or numpad)\n<code>4</code> (from main row or numpad)\n<code>5</code> (from main row or numpad)\n<code>6</code> (from main row or numpad)\n<code>7</code> (from main row or numpad)\n<code>8</code> (from main row or numpad)\n<code>9</code> (from main row or numpad)\n<code>.</code>\n<code>|</code>, a vertical bar\n<code>+</code>\n<code>?</code>\n<code>&#39;</code>\n<code>;</code>\n<code>/</code>\nReturns the argument unchanged.\nConverts <code>&quot;A&quot;</code> to <code>Key::A</code>, <code>Space</code> to <code>Key::Space</code>, etc.\nCalls <code>U::from(self)</code>.\nHuman-readable English name.\nEmoji or name representing the key\nIndicated an alias, e.g. a shortcut\nSomething can be scrolled in any direction (panned).\nHover a cell in a table\nA widget was clicked.\nA context menu is available\nIndicate that a copy will be made\nRequest an elevated amount of animations and flair for the …\nFor precision work\nA mouse cursor icon.\nNormal cursor icon, whatever that is.\nA widget was double-clicked.\nA widget gained keyboard focus (by tab key).\nWhat egui emits each frame from <code>crate::Context::run</code>.\nThe thing you are hovering can be grabbed\nYou are grabbing the thing you are hovering\nQuestion mark\nInformation about text being edited.\nRequest a standard amount of attention-grabbing actions.\nOmnidirectional move icon (e.g. arrows in all cardinal …\nCan’t drop here\nShow no cursor\nForbidden\nWhat URL to open, and how.\nThings that happened during this frame that the …\nThe non-rendering part of what egui emits each frame.\nPointing hand, used for e.g. web links\nShows that processing is being done, but that the program …\nReset the attention request and interrupt related …\nResize a column\nResize something rightwards (e.g. when dragging the …\nHorizontal resize <code>-</code> to make something wider or more narrow …\nDiagonal resize <code>/</code> (right-up to/from left-down)\nResize something up (e.g. when dragging the top edge of …\nResize something up and right (e.g. when dragging the …\nResize something up and left (e.g. when dragging the …\nDiagonal resize <code>\\</code> (left-up to/from right-down)\nResize a row\nResize something downwards (e.g. when dragging the bottom …\nResize something down and right (e.g. when dragging the …\nResize something down and left (e.g. when dragging the …\nVertical resize <code>|</code> (up-down or down-up)\nResize something leftwards (e.g. when dragging the left …\nText caret, e.g. “Click here to edit text”\nText selection was updated.\nA widget was triple-clicked.\nTypes of attention to request from a user when a native …\nA widget’s value changed.\nVertical text caret, e.g. “Click here to edit vertical …\nNot yet ready, try later.\nDescribes a widget such as a <code>crate::Button</code> or a …\nEnhance!\nLet’s get a better overview\nAdd on new output.\nAdd on new output.\nIf set, put this text in the system clipboard. Ignore if …\nThe contents of some editable text (for <code>TextEdit</code> fields).\nSet the cursor to this icon.\nWhere the primary cursor is.\nThis can be used by a text-to-speech system to describe …\nWhether the widget is enabled.\nEvents that may be useful to e.g. a screen reader.\nThis can be used by a text-to-speech system to describe …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis is set if, and only if, the user is currently editing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe text on labels, buttons, checkboxes etc.\nIs there a mutable <code>TextEdit</code> under the cursor? Use by <code>eframe</code>…\nIf <code>true</code>, open the url in a new tab. If <code>false</code> open it in …\nHow many ui passes is this the sum of?\nIf set, open this url.\nThe number of physical pixels per logical ui point, for …\nNon-rendering related output.\nThe previous text value.\nWhere the <code>crate::TextEdit</code> is located on screen.\nWas <code>crate::Context::request_discard</code> called during the …\nWas <code>crate::Context::request_discard</code> called?\ncheckboxes, radio-buttons etc\nThe current value of checkboxes and radio buttons.\nWhat to paint.\nTake everything ephemeral (everything except <code>cursor_icon</code> …\nSelected range of characters in <code>Self::current_text_value</code>.\nTexture changes since last frame (including the font …\nThe type of widget this is.\nThe current value of sliders etc.\nAll the active viewports, including the root.\nA plugin for easily showing debug-text on-screen.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrint this text next to the cursor at the end of the pass.\nRegister this plugin on the given egui context, so that it …\nTracking of drag-and-drop payload.\nClears the payload, setting it to <code>None</code>.\nReturns the argument unchanged.\nAre we carrying a payload?\nAre we carrying a payload of the given type?\nCalls <code>U::from(self)</code>.\nRetrieve the payload, if any.\nIf set, something is currently being dragged\nSet a drag-and-drop payload.\nRetrieve and clear the payload, if any.\nA simple grid layout.\nState accumulated during the current frame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFirst frame (no previous know state).\nSet soft maximum width (wrapping width) of each column.\nSet minimum width of each column. Default: …\nSet minimum height of each row. Default: …\nCreate a new <code>Grid</code> with a locally unique identifier.\nSetting this will allow the last column to expand to take …\nState previous frame (if any). This can be used to predict …\nSet spacing between columns/rows. Default: …\nChange which row number the grid starts on. This can be …\nIf <code>true</code>, add a subtle background color to every other row.\nSetting this will allow for dynamic coloring of rows of …\nThe suggested keyboard shortcuts for global gui zooming.\nMake everything larger by increasing <code>Context::zoom_factor</code>.\nShow buttons for zooming the ui.\nMake everything smaller by decreasing <code>Context::zoom_factor</code>.\nLet the user scale the GUI (change <code>Context::zoom_factor</code>) …\nPrimary keyboard shortcut for zooming in (<code>Cmd</code> + <code>+</code>).\nSecondary keyboard shortcut for zooming in (<code>Cmd</code> + <code>=</code>).\nKeyboard shortcut for zooming in (<code>Cmd</code> + <code>-</code>).\nKeyboard shortcut for resetting zoom in (<code>Cmd</code> + <code>0</code>).\nResult of a hit-test against <code>WidgetRects</code>.\nIf the user would start a clicking now, this is what would …\nAll widgets that contains the pointer, back-to-front.\nIf the user would start a dragging now, this is what would …\nReturns the argument unchanged.\nFind the top or closest widgets to the given position, …\nCalls <code>U::from(self)</code>.\negui tracks widgets frame-to-frame using <code>Id</code>s.\n<code>IdMap&lt;V&gt;</code> is a <code>HashMap&lt;Id, V&gt;</code> optimized by knowing that <code>Id</code> …\n<code>IdSet</code> is a <code>HashSet&lt;Id&gt;</code> optimized by knowing that <code>Id</code> has …\nA special <code>Id</code>, in particular as a key to <code>crate::Memory::data</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a new <code>Id</code> by hashing some source (e.g. a string or …\nShort and readable summary\nThe inner value of the <code>Id</code>.\nGenerate a new <code>Id</code> by hashing the parent <code>Id</code> and the given …\nA pointer (mouse or touch) click.\nOptions for input state handling.\nInput state that egui updates each frame.\nMouse or touch state.\nHow imprecise do we expect the mouse/touch input to be? …\nWere there any type of click this frame?\nIs any pointer button currently down?\nWas any pointer button pressed (<code>!down -&gt; down</code>) this frame?\nWas any pointer button released (<code>down -&gt; !down</code>) this frame?\nTrue if there currently are any fingers touching egui.\nWas the given pointer button given clicked this frame?\nWas the button given double clicked this frame?\nIs this button currently down?\nWas the button given pressed this frame?\nWas the button given released this frame?\nWas the button given triple clicked this frame?\nCheck for a key press. If found, <code>true</code> is returned and the …\nCheck if the given shortcut has been pressed.\nIf the pointer button is down, will it register as a click …\n1 or 2 (double-click) or 3 (triple-click)\nCount presses of a key. If non-zero, the presses are …\nScans <code>events</code> for device IDs of touch devices we have not …\nHow much the pointer moved compared to last frame, in …\nHow much the pointer moved compared to last frame, in …\nCurrent direction of the pointer.\nCurrent direction of pointer.\nIn-order events received this frame\nGet all events that matches the given filter.\nThe native window has the keyboard focus (i.e. is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet to <code>true</code> if the pointer has moved too much (since being …\nDo we have a pointer?\nTrue if we have ever received a touch event.\nIf it is a good idea to show a tooltip, where is pointer?\nInput state management configuration.\nInput state management configuration.\nIf you detect a click or drag and wants to know where it …\nLatest position of the mouse, but ignoring any …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJust because the mouse is down doesn’t mean we are …\nA long press is something we detect on touch screens to …\nA long press is something we detect on touch screens to …\nIs the pointer currently moving? This is smoothed so a few …\nIs the pointer currently still? This is smoothed so a few …\nIs the given key currently held down?\nWas the given key pressed this frame?\nWas the given key released this frame?\nWhen did the pointer get click last? Used to check for …\nWhen did the pointer get click two clicks ago? Used to …\nWhen was the pointer last moved? Used for things like …\nTime of the last scroll event.\nLatest reported pointer position. When tapping a touch …\nLatest reported pointer position. When tapping a touch …\nAfter a pointer-down event, if the pointer moves more than …\nIf the pointer is down for longer than this it will no …\nThe new pointer press must come within this many seconds …\nMaximum size of one side of a texture.\nIs the middle button currently down?\nWhich modifier keys are down at the start of the frame?\nAllows you to check for e.g. shift-click\nHow much the mouse moved since the last frame, in …\nHow much the mouse moved since the last frame, in …\nReturns details about the currently ongoing multi-touch …\nHow many times was the given key pressed this frame?\nSize of a physical pixel in logical gui coordinates …\nAlso known as device pixel ratio, &gt; 1 for high resolution …\nAlso known as device pixel ratio, &gt; 1 for high resolution …\nState of the mouse or simple touch gestures which can be …\nAll button events that occurred this frame\nRecent movement of the pointer. Used for calculating …\nEstimated time until next frame (provided we repaint right …\nWhere did the current click/drag originate? <code>None</code> if no …\nWhere did the current click/drag originate? <code>None</code> if no …\nWhen did the current click/drag originate? <code>None</code> if no …\nWhen did the current click/drag originate? <code>None</code> if no …\nWas the primary button clicked this frame?\nIs the primary button currently down?\nWas the primary button pressed this frame?\nWas the primary button released this frame?\nThe raw input we got this frame from the backend.\nYou probably want to use <code>Self::smooth_scroll_delta</code> instead.\nPosition and size of the egui area.\nWas the secondary button clicked this frame?\nIs the secondary button currently down?\nWas the secondary button pressed this frame?\nWas the secondary button released this frame?\nHow many points the user scrolled, smoothed over a few …\nTime since last frame (in seconds), but gracefully handles …\nDid <code>Self::is_decidedly_dragging</code> go from <code>false</code> to <code>true</code> this …\nTime in seconds. Relative to whatever. Used for animation.\nLatest known time\nHow long has it been (in seconds) since the pointer was …\nHow long has it been (in seconds) since the pointer was …\nHow long has it been (in seconds) since the use last …\nState of touches, except those covered by <code>PointerState</code> …\nShow the options in the ui.\nUsed for smoothing the scroll delta.\nUsed for smoothing the scroll delta when zooming.\nTime since last frame, in seconds.\nCurrent velocity of pointer.\nCurrent velocity of pointer.\nInfo about the active viewport\nThe <code>crate::Context</code> will call this at the end of each frame …\nZoom scale factor this frame (e.g. from ctrl-scroll or …\n2D non-proportional zoom scale factor this frame (e.g. …\nZoom scale factor this frame (e.g. from ctrl-scroll or …\nDescribes an individual touch (finger or digitizer) on the …\nGesture data that can change over time\nAll you probably need to know about a multi-touch gesture.\nThe current state (for a specific touch device) of touch …\nActive touches, if any.\nAre there currently any fingers touching the surface?\nused for non-proportional zooming\nused for proportional zooming\n<code>None</code> if less than two fingers\nTechnical identifier of the touch device. This is used to …\nCurrent force of the touch (average of the forces of the …\nCurrent force of the touch. A value in the interval [0.0 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf a gesture has been recognized (i.e. when exactly two …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of touches (fingers) on the surface. Value is ≥ 2 …\nCurrent position of this touch, in device coordinates (not …\nRotation in radians. Moving fingers around each other will …\nPosition of the pointer at the time the gesture started.\nPoint in time when the gesture started.\nRelative movement (comparing previous frame and current …\nProportional zoom factor (pinch gesture).\n2D non-proportional zoom factor (pinch gesture).\nCalculated at the start of each frame based on:\nThe widget that got clicked this frame.\nAll widgets that contain the pointer this frame, …\nDrag started on this widget this frame.\nThis widget was let go this frame, after having been …\nThis widget is being dragged this frame.\nReturns the argument unchanged.\nA small set of widgets (usually 0-1) that the pointer is …\nCalls <code>U::from(self)</code>.\nThis widget was long-pressed on a touch screen, so trigger …\nPainted behind all floating windows\nDebug layer, always painted last / on top\nPopups, menus etc that should always be painted on top of …\nThis is where painted <code>Shape</code>s end up during a frame.\nAn identifier for a paint layer. Also acts as an …\nNormal moveable windows that you reorder by click\nDifferent layer categories\nA list of <code>Shape</code>s paired with a clip rectangle.\nSpecial layer between panels and windows\nA unique identifier of a specific <code>Shape</code> in a <code>PaintList</code>.\nThings floating on top of everything else, like tooltips. …\nReturns the index of the new <code>Shape</code> that can be used with …\nRead-only access to all held shapes.\nGet or insert the <code>PaintList</code> for the given <code>LayerId</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>PaintList</code> for the given <code>LayerId</code>.\nGet the <code>PaintList</code> for the given <code>LayerId</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMutate the shape at the given index, if any.\nSet the given shape to be empty (a <code>Shape::Noop</code>).\nModify an existing <code>Shape</code>.\nShort and readable summary\nShort and readable summary\nTransform each <code>Shape</code> and clip rectangle by this much, …\nTransform each <code>Shape</code> and clip rectangle in range by this …\nLayout direction, one of <code>LeftToRight</code>, <code>RightToLeft</code>, <code>TopDown</code>…\nThe layout of a <code>Ui</code>, e.g. “vertical &amp; centered”.\nThis describes the bounds and existing contents of an <code>Ui</code>. …\nAdvance cursor after a widget was added to a specific …\nAdvance the cursor by this many points, and allocate in …\ne.g. for when aligning text within a button.\nGiven the cursor in the region, how much space is available\nAmount of space available for a widget. For wrapping …\nPlace elements vertically, bottom up.\nFor when you want to add a single widget to a layout, and …\nHow to align things on the cross axis. For vertical …\nJustify the cross axis? For vertical layouts justify mean …\nWhere the next widget will be put.\nMove to the next row in a wrapping layout. Otherwise does …\nExpand the <code>min_rect</code> and <code>max_rect</code> of this ui to include a …\nEnsure we are big enough to contain the given X-coordinate.\nEnsure we are big enough to contain the given Y-coordinate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ne.g. for when aligning text within a button.\ne.g. for adjusting the placement of something.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApply justify (fill width/height) and/or alignment after …\nPlace elements horizontally, left to right.\nHow to align things on the main axis.\nMain axis direction\nJustify the main axis?\nIf true, wrap around when reading the end of the main …\nThe maximum size of this <code>Ui</code>. This is a <em>soft max</em> meaning …\nThis is the minimal size of the <code>Ui</code>. When adding new …\nReturns where to put the next widget that is of the given …\nWhere would the next tiny widget be centered?\nShows where the next widget is going to be placed\nPlace elements horizontally, right to left.\nSet row height in horizontal wrapping layout.\nPlace elements vertically, top to bottom.\nTop-down layout justified so that buttons etc fill the …\ne.g. for when aligning text within a button.\nThe alignment to use on the cross axis.\nJustify widgets along the cross axis?\nThe alignment to use on the main axis.\nJustify widgets on the main axis?\nWrap widgets when we overflow the main axis?\nRepresents a byte buffer.\nRepresents a loader capable of loading raw unstructured …\nRepresents bytes which are currently being loaded.\nMaps URI:s to <code>Bytes</code>, e.g. found with <code>include_bytes!</code>.\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nScale to height.\nAn <code>ImageLoader</code> decodes raw bytes into a <code>ColorImage</code>.\nRepresents an image which is currently being loaded.\nRepresents a failed attempt at loading an image.\nThe loaders of bytes, images, and textures.\nRuntime error: Loading was attempted, but failed (e.g. “…\nProgrammer error: There are no image loaders installed.\nProgrammer error: Failed to find the bytes for this image …\nProgrammer error: Failed to parse the bytes as an image …\nProgrammer error: no matching <code>TextureLoader</code>. Because of …\nA specific loader does not support this scheme, protocol …\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nBytes are being loaded.\nImage is loading.\nTexture is loading.\nBytes are loaded.\nImage is loaded.\nTexture is loaded.\nScale original size by some factor.\nScale to size.\nGiven as a hint for image loading requests.\nA texture with a known size.\nA <code>TextureLoader</code> uploads a <code>ColorImage</code> to the GPU, returning …\nRepresents a texture is currently being loaded.\nScale to width.\nIf the loader caches any data, this should return the size …\nIf the loader caches any data, this should return the size …\nIf the loader caches any data, this should return the size …\nImplementations may use this to perform work at the end of …\nImplementations may use this to perform work at the end of …\nImplementations may use this to perform work at the end of …\nForget the given <code>uri</code>.\nForget the given <code>uri</code>.\nForget the given <code>uri</code>.\nForget all URIs ever given to this loader.\nForget all URIs ever given to this loader.\nForget all URIs ever given to this loader.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch the id and size from a <code>TextureHandle</code>.\nUsed to get a unique ID when implementing one of the …\nUnique ID of this loader.\nUnique ID of this loader.\nUnique ID of this loader.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry loading the bytes from the given uri.\nTry loading the image from the given uri.\nTry loading the texture from the given uri.\nCreate a <code>SizedTexture</code> from a texture <code>id</code> with a specific …\nFile contents, e.g. the contents of a <code>.png</code>.\nMime type of the content, e.g. <code>image/png</code>.\nSet if known (e.g. from a HTTP header, or by parsing the …\nSet if known (e.g. from a HTTP header, or by parsing the …\nSet if known (e.g. from a HTTP header, or by parsing the …\nSet if known (e.g. from a HTTP header, or by parsing the …\nMaps URI:s to <code>Bytes</code>, e.g. found with <code>include_bytes!</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKeeps track of <code>Area</code>s, which are free-floating <code>Ui</code>s. These …\nSelect the widget below the current focused widget.\nKeeps tracks of what widget has keyboard focus\nThe widget with focus.\nThe state of the interaction in egui, i.e. what is being …\nSelect the widget to the left of the current focused …\nThe data that egui persists between frames.\nSelect the next widget that wants focus.\nDon’t change focus.\nSome global options that you can read and write.\nSelect the previous widget that had focus.\nSelect the widget to the right of the current focused …\nSelect the widget closest above the current focused widget.\nIs any popup open?\nObtain the previous rectangle of an area.\nAccess memory of the <code>Area</code>s, such as <code>Window</code>s.\nAccess memory of the <code>Area</code>s, such as <code>Window</code>s.\nCan be used to cache computations from one frame to …\nClose the open popup, if any.\nThe default style for new <code>Ui</code>:s in dark mode.\nThis map stores some superficial state for all widgets …\nGet the id of the widget being dragged, if any.\nIs something else being dragged?\nIf true, all windows, menus, tooltips, etc., will be …\nWhich theme to use in case <code>Self::theme_preference</code> is …\nSet when looking for widget with navigational keys like …\nA cache of widget IDs that are interested in focus with …\nWhich widget has keyboard focus?\nWhich widget currently has keyboard focus?\nThe widget with keyboard focus (i.e. a text input field).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if the layer gained focus this frame. returns <code>true</code> …\nIf set, the next widget that is interested in focus will …\nCheck if the layer had focus last frame. returns <code>true</code> if …\nDoes this widget have keyboard focus?\nThe ID of a widget to give the focus to in the next frame.\nThe ID of a widget that had keyboard focus during the …\nOptions related to input state handling.\nRegister this widget as being interested in getting …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs any widget being dragged?\nIs this specific widget being dragged?\nIs the given popup open?\nAre we currently clicking or dragging an egui widget?\nThe last widget interested in focus.\nTop-most layer at the given position.\nTop-most layer at the given position.\nAn iterator over all layers. Back-to-front, top is last.\nTransforms per layer\nThe default style for new <code>Ui</code>:s in light mode.\nMultiplier for the scroll speed when reported in …\nCheck if the layer lost focus last frame. returns <code>true</code> if …\nMaximum number of passes to run in one frame.\nnew fonts that will be applied at the start of the next …\nOpen the given popup and close all others.\nGlobal egui options.\nBack-to-front, top is last.\nBack-to-front,  top is last.\nFor each layer, which <code>Self::order</code> is it in?\nWhich popup-window is open (if any)? Could be a combo box, …\nA widget interested in clicks that has a mouse press on it.\nA widget interested in drags that has a mouse press on it.\nIf true, the most common glyphs (ASCII) are pre-rendered …\nIf <code>true</code>, <code>egui</code> will discard the loaded image data after the …\nIf any widget moves or changes id, repaint everything.\nGive keyboard focus to a specific widget. See also …\nForget window positions, sizes etc. Can be used to …\nThis is a signal to any backend that we want the …\nControls the speed at which we zoom in when doing ctrl/cmd …\nSet which widget is being dragged.\nIf true, all windows, menus, tooltips etc are to be …\nSet an event filter for a widget.\nMark the <code>child</code> layer as a sublayer of <code>parent</code>.\nStop dragging any widget.\nStop editing the active <code>TextEdit</code> (if any).\nList of sublayers for each layer.\nSurrender keyboard focus for a specific widget. See also …\nThe current system theme, used to choose between dark and …\nControls the tessellator.\nThe currently active theme (may depend on the system …\nPreference for selection between dark and light …\nToggle the given popup between closed and open.\nShow the options in the ui.\nWhen an area wants to be on top, it is assigned here. This …\nCheck reusing of <code>Id</code>s, and show a visual warning on screen …\nGlobal zoom factor of the UI.\nIf <code>true</code>, egui will change the scale of the ui (…\nDark mode: light text on a dark background.\nDark mode: light text on a dark background.\nLight mode: dark text on a light background.\nLight mode: dark text on a light background.\nFollow the system’s theme preference.\nDark or Light theme.\nThe user’s theme preference.\nDefault style for this theme.\nDefault visuals for this theme.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChooses between <code>Self::Dark</code> or <code>Self::Light</code> based on a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShow radio-buttons to switch between light mode, dark mode …\nShow small toggle-button for light and dark mode. This is …\nWhat is saved between frames.\nMenu root associated with an Id from a Response\nStores the state for the context menu.\nComponents of menu state, public for advanced usage.\nCheck if position is in the menu hierarchy’s area.\nThe menu bar goes well in a <code>crate::TopBottomPanel::top</code>, …\nShow a menu at pointer if primary-clicked response.\nCascade close response to menu root.\nClose menu hierarchy.\nRespond to secondary (right) clicks.\nInteraction with a context menu (secondary click).\nResponse to secondary clicks (right-clicks) by showing the …\nReturns <code>true</code> if the context menu is opened for this widget.\nUsed to hash different <code>Id</code>s for sub-menus\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if pointer is hovering current submenu.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a top level menu in a menu bar. This would be …\nConstruct a top level menu with a custom button in a menu …\nConstruct a top level menu with an image in a menu bar. …\nwrapper for the contents of every menu.\nCheck if pointer is moving towards current submenu.\nThe <code>icon</code> can be an emoji (e.g. <code>⏵</code> right arrow), shown …\nOpen submenu at position, if not already open.\nBounding box of this menu (without the sub-menu), …\nUsed to check if any menu in the tree wants to close\nShow a menu at pointer if right-clicked response.\nInteraction with a stationary menu, i.e. fixed in another …\nBuild a top level menu with an image button.\nBuild a top level menu with a button.\nThe opened sub-menu and its <code>Id</code>\nConstruct a nested sub menu in another menu.\nSense button interaction opening and closing submenu.\nProvides interior mutability.\nAn RAII implementation of a “scoped lock” of a mutex. …\nProvides interior mutability.\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAndroid OS\nApple iPhone OS\nmacOS\nLinux or Unix other than Android\nAn <code>enum</code> of common operating systems.\nUnknown OS - could be wasm\nWindows\nReturns the argument unchanged.\nUses the compile-time <code>target_arch</code> to identify the OS.\nHelper: try to guess from the user-agent of a browser.\nCalls <code>U::from(self)</code>.\nIndicated an alias, e.g. a shortcut\nSomething can be scrolled in any direction (panned).\nHover a cell in a table\nA widget was clicked.\nA context menu is available\nIndicate that a copy will be made\nRequest an elevated amount of animations and flair for the …\nFor precision work\nA mouse cursor icon.\nNormal cursor icon, whatever that is.\nA widget was double-clicked.\nA widget gained keyboard focus (by tab key).\nWhat egui emits each frame from <code>crate::Context::run</code>.\nThe thing you are hovering can be grabbed\nYou are grabbing the thing you are hovering\nQuestion mark\nInformation about text being edited.\nRequest a standard amount of attention-grabbing actions.\nOmnidirectional move icon (e.g. arrows in all cardinal …\nCan’t drop here\nShow no cursor\nForbidden\nWhat URL to open, and how.\nThings that happened during this frame that the …\nThe non-rendering part of what egui emits each frame.\nPointing hand, used for e.g. web links\nShows that processing is being done, but that the program …\nReset the attention request and interrupt related …\nResize a column\nResize something rightwards (e.g. when dragging the …\nHorizontal resize <code>-</code> to make something wider or more narrow …\nDiagonal resize <code>/</code> (right-up to/from left-down)\nResize something up (e.g. when dragging the top edge of …\nResize something up and right (e.g. when dragging the …\nResize something up and left (e.g. when dragging the …\nDiagonal resize <code>\\</code> (left-up to/from right-down)\nResize a row\nResize something downwards (e.g. when dragging the bottom …\nResize something down and right (e.g. when dragging the …\nResize something down and left (e.g. when dragging the …\nVertical resize <code>|</code> (up-down or down-up)\nResize something leftwards (e.g. when dragging the left …\nText caret, e.g. “Click here to edit text”\nText selection was updated.\nA widget was triple-clicked.\nTypes of attention to request from a user when a native …\nA widget’s value changed.\nVertical text caret, e.g. “Click here to edit vertical …\nNot yet ready, try later.\nDescribes a widget such as a <code>crate::Button</code> or a …\nEnhance!\nLet’s get a better overview\nIf set, put this text in the system clipboard. Ignore if …\nThe contents of some editable text (for <code>TextEdit</code> fields).\nSet the cursor to this icon.\nWhere the primary cursor is.\nWhether the widget is enabled.\nEvents that may be useful to e.g. a screen reader.\nThis is set if, and only if, the user is currently editing …\nThe text on labels, buttons, checkboxes etc.\nIs there a mutable <code>TextEdit</code> under the cursor? Use by <code>eframe</code>…\nIf <code>true</code>, open the url in a new tab. If <code>false</code> open it in …\nHow many ui passes is this the sum of?\nIf set, open this url.\nThe number of physical pixels per logical ui point, for …\nNon-rendering related output.\nThe previous text value.\nWhere the <code>crate::TextEdit</code> is located on screen.\nWas <code>crate::Context::request_discard</code> called during the …\nThe current value of checkboxes and radio buttons.\nWhat to paint.\nSelected range of characters in <code>Self::current_text_value</code>.\nTexture changes since last frame (including the font …\nThe type of widget this is.\nThe current value of sliders etc.\nAll the active viewports, including the root.\nHelper to paint shapes and text to a specific region on a …\nIt is up to the caller to make sure there is room for this.\nShow an arrow starting at <code>origin</code> and going in the …\nEverything painted in this <code>Painter</code> will be clipped against …\nEverything painted in this <code>Painter</code> will be clipped against …\nGet a reference to the parent <code>Context</code>.\nSource of fonts and destination of shapes\nText with a background.\nAdd many shapes at once.\nIf set, all shapes will have their colors modified to be …\nRead-only access to the shared <code>Fonts</code>.\nAccess all shapes added this frame.\nReturns the argument unchanged.\nPaint text that has already been laid out in a <code>Galley</code>.\nPaint text that has already been laid out in a <code>Galley</code>.\nPaints a horizontal line.\nAn image at the given position.\nCalls <code>U::from(self)</code>.\nIf <code>false</code>, nothing you paint will show up.\nWhere we paint\nWhere we paint\nWill wrap text at the given width and line break at <code>\\n</code>.\nLay out this text layut job in a galley.\nWill line break at <code>\\n</code>.\nPaints a line from the first point to the second.\nLike <code>Self::set_opacity</code>, but multiplies the given value …\nCreate a painter to a specific layer within a certain clip …\nRead the current opacity of the underlying painter.\nIf set, all shapes will have their colors modified with …\nUseful for pixel-perfect rendering of lines that are one …\nUseful for pixel-perfect rendering.\nUseful for pixel-perfect rendering.\nUseful for pixel-perfect rendering of filled shapes.\nUseful for pixel-perfect rendering of lines that are one …\nUseful for pixel-perfect rendering.\nModify an existing <code>Shape</code>.\nEverything painted in this <code>Painter</code> will be clipped against …\nIf set, colors will be modified to look like this\nIf <code>false</code>, nothing added to the painter will be visible\nRedirect where you are painting.\nSet the opacity (alpha multiplier) of everything painted …\nConstrain the rectangle in which we can paint.\nLay out and paint some text.\nPaints a vertical line.\nCreate a painter for a sub-region of this <code>Painter</code>.\nRedirect where you are painting.\nState that is collected during a pass, then saved for the …\nReset at the start of each frame.\nHow should we align the rect within the visible area? If …\nShrink <code>available_rect</code>.\nShrink <code>available_rect</code>.\nShrink <code>available_rect</code>.\nShrink <code>available_rect</code>.\nHow should the scroll be animated?\nHow much space is still available after panels has been …\nStarts off as the <code>screen_rect</code>, shrinks as panels are added.\nBounding rectangle for all widget and all previous …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHighlight these widgets the next pass.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPer-layer state.\nIs there any open popup (menus, combo-boxes, etc)?\nThe current scroll area should scroll by this much.\nThe current scroll area should scroll to this range …\nHow many tooltips have been shown for this widget this …\nStarts off as the <code>screen_rect</code>, shrinks as panels are added.\nHow much space is used by panels.\nAll <code>Id</code>s that were used this pass.\nIf a tooltip has been shown this frame, where was it? This …\nWhich widget is showing a tooltip (if any)?\nAll widgets produced this pass.\nAdvance cursor after a widget was added to a specific …\nAdvance the cursor by this many points. <code>Self::min_rect</code> …\nAmount of space available for a widget. For wrapping …\nMove to the next row in a grid layout or wrapping layout. …\nExpand the <code>min_rect</code> and <code>max_rect</code> of this ui to include a …\nExpand the <code>min_rect</code> and <code>max_rect</code> of this ui to include a …\nExpand the <code>min_rect</code> and <code>max_rect</code> of this ui to include a …\nReturns the argument unchanged.\nIf set this will take precedence over <code>crate::layout</code>.\nCalls <code>U::from(self)</code>.\nApply justify or alignment after calling <code>next_space</code>.\nReturns where to put the next widget that is of the given …\nWhere do we expect a zero-sized widget to be placed?\nSet the maximum height of the ui. You won’t be able to …\nSet the maximum width of the ui. You won’t be able to …\nSet the minimum height of the ui. This can’t shrink the …\nSet the minimum width of the ui. This can’t shrink the …\nSet row height in horizontal wrapping layout.\nProfiling macro for feature “puffin”\nProfiling macro for feature “puffin”\nReturned when we wrap some ui-code and want to return both …\nThe result of adding a widget to a <code>Ui</code>.\nWas the underlying data changed?\nReturns true if this widget was clicked this frame by the …\nReturns true if this widget was clicked this frame by the …\n<code>true</code> if there was a click <em>outside</em> the rect of this widget.\nReturns true if the pointer is contained by the response …\nResponse to secondary clicks (right-clicks) by showing the …\nReturns whether a context menu is currently open for this …\nUsed for optionally showing a tooltip and checking for …\nDrag-and-Drop: Return what is being held over this widget, …\nDrag-and-Drop: Return what is being dropped onto this …\nIf the user started dragging this widget this frame, store …\nReturns true if this widget was double-clicked this frame …\nReturns true if this widget was double-clicked this frame …\nIf dragged, how many points were we dragged and in what …\nIf dragged, how far did the mouse move? This will use raw …\nThe widget was being dragged, but now it has been released.\nThe widget was being dragged by the button, but now it has …\nDid a drag on this widgets begin this frame?\nDid a drag on this widgets by the button begin this frame?\nThe widget was being dragged, but now it has been released.\nThe widget was being dragged by the button, but now it has …\nThe widget is being dragged.\nSee <code>Self::dragged</code>.\nWas the widget enabled? If false, there was no interaction …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrue if this widget has keyboard focus this frame, but didn…\nThis widget has the keyboard focus (i.e. is receiving key …\nHighlight this widget, to make it look like it is hovered, …\nIf it is a good idea to show a tooltip, where is pointer?\nThe pointer is hovering above this widget or the widget …\nThe <code>Id</code> of the widget/area this response pertains.\nWhat the user closure returned.\nSense more interactions (e.g. sense clicks on a <code>Response</code> …\nWhere the pointer (mouse/touch) were when when this widget …\nThe rectangle sensing interaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe intrinsic / desired size of the widget.\nIs the pointer button currently down on this widget?\nWas the tooltip open last frame?\nAssociate a label with a control for accessibility.\nWhich layer the widget is part of.\nWas this long-pressed on a touch screen?\nThe widget had keyboard focus and lost it, either because …\nReport the data shown by this widget changed.\nReturns true if this widget was clicked this frame by the …\nShow this text when hovering if the widget is disabled.\nShow this UI when hovering if the widget is disabled.\nWhen hovered or dragged, use this icon for the mouse …\nWhen hovered, use this icon for the mouse cursor.\nShow this text if the widget was hovered (i.e. a tooltip).\nLike <code>on_hover_text</code>, but show the text next to cursor.\nShow this UI if the widget was hovered (i.e. a tooltip).\nLike <code>on_hover_ui</code>, but show the ui next to cursor.\nDraw a debug rectangle over the response displaying the …\nThe area of the screen we are talking about.\nRequest that this widget get keyboard focus.\nThe response of the area.\nAdjust the scroll position until this UI becomes visible.\nLike <code>Self::scroll_to_me</code>, but allows you to specify the …\nReturns true if this widget was clicked this frame by the …\nThe senses (click and/or drag) that the widget was …\nAlways show this tooltip, even if disabled and the user isn…\nAlways show this tooltip, even if disabled and the user isn…\nSurrender keyboard focus for this widget.\nReturns true if this widget was triple-clicked this frame …\nReturns true if this widget was triple-clicked this frame …\nA logical “or” operation. For instance …\nFor accessibility.\nReturns a response with a modified <code>Self::rect</code>.\nWhat sort of interaction is a widget sensitive to?\nSense clicks and hover, but not drags.\nButtons, sliders, windows, …\nSense both clicks, drags and hover (e.g. a slider or …\nSense drags and hover, but not clicks.\nSliders, windows, scroll bars, scroll areas, …\nThis widget wants focus.\nSenses no clicks or drags, but can be focused with the …\nReturns the argument unchanged.\nSenses no clicks or drags. Only senses mouse hover.\nReturns true if we sense either clicks or drags.\nCalls <code>U::from(self)</code>.\nThe logical “or” of two <code>Sense</code>s.\nThe word <code>git</code>.\nThe Github logo.\nThe Android logo.\nThe Apple logo.\nTux, the Linux penguin.\nThe Windows logo.\nThe Twitter bird.\nNormal labels. Easily readable, doesn’t take up too much …\nButtons. Maybe slightly bigger than <code>Self::Body</code>.\nCircular handle\nOptions for help debug egui by adding extra visualization\nDefault text style - will use <code>TextStyle::Body</code>, unless …\nDirectly select size and font family\nA way to select <code>FontId</code>, either by picking one directly or …\nRGB is 0-255 in gamma space.\nShape of the handle for sliders and similar widgets.\nHeading. Probably larger than <code>Self::Body</code>.\nHow and when interaction happens.\n0-1 in linear space.\nSame size as <code>Self::Body</code>, but used when monospace is …\nA user-chosen style, found in <code>Style::text_styles</code>.\nHow to format numbers in e.g. a <code>crate::DragValue</code>.\nHow to display numeric color values.\nRectangular handle\nScroll animation configuration, used when programmatically …\nControls the spacing and visuals of a <code>crate::ScrollArea</code>.\nSelected text, selected elements etc\nUsed when small text is needed.\nControls the sizes and distances between widgets.\nSpecifies the look and feel of egui.\nUse a <code>TextStyle</code> to look up the <code>FontId</code> in <code>Style::text_styles</code>…\nLook and feel of the text cursor.\nAlias for a <code>FontId</code> (font of a certain size).\nControls the visual style (colors etc) of egui.\nbg = background, fg = foreground.\nThe visuals of widgets for different states of interaction.\nThe style of an interactive widget as you are clicking or …\nThe opaqueness of the background when the user is hovering …\nThe opaqueness of the handle when the user is hovering the …\nWidth of a solid vertical scrollbar, or height of a …\nIf true and scrolling is enabled for only one direction, …\nHow many seconds a typical animation should last.\nMargin between contents and scroll bar.\nMargin between scroll bar and the outer container (e.g. …\nThe width of the scroll bars at it largest.\nBackground color of widgets that must have a background …\nFor surrounding rectangle of things that need it, like …\nShould the cursor blink?\nShow a background behind buttons.\nButton size is text size plus this on each side\nAllow child widgets to be just on the border and still …\nBackground color behind code-styled monospaced labels.\nShow a background behind collapsing headers.\nHeight of a combo-box before showing scroll bars.\nDefault (minimum) width of a <code>ComboBox</code>.\nDefault dark theme.\nIf true, the visuals are overall dark with light text. If …\nOptions to help debug why egui behaves strangely.\nAlways show callstack to ui on hover.\nShow callstack for the current widget on hover if all …\nThe size used for the <code>Ui::max_rect</code> the first frame.\nThe default text styles of the default egui theme.\nThe opaqueness of the background when the user is neither …\nThe opaqueness of the handle when the user is neither …\nThe style to use for <code>DragValue</code> text.\nScroll with a fixed duration, regardless of distance.\nThe min / max scroll duration.\nA good color for error text (e.g. red).\nMake the frame this much larger.\nShow tooltips explaining <code>DragValue</code>:s etc when hovered.\nVery dark or light color (for corresponding theme). Used …\nWhen fading out things, we fade the colors towards this.\nSomething just barely different from the background color. …\nStroke and text color of the interactive part of a …\nNo scroll bars until you hover the scroll area, at which …\nIf <code>true</code>, scroll bars float above the content, partially …\nHow much space is allocated for a floating scroll bar?\nThe thin width of floating scroll bars that the user is …\nIf true, use colors with more contrast. Good for floating …\nFormat the given number with the given number of decimals.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturned a “grayed out” version of the given color.\nMake sure the scroll handle is at least this big\nShape of the handle for sliders and similar widgets.\nIf we show the hover ui, include where the next widget is …\nThe style of an interactive widget while you hover it, or …\nThe color used for <code>crate::Hyperlink</code>,\nReturns small icon rectangle and big icon rectangle\nCheckboxes, radio button and collapsing headers have an …\nCheckboxes, radio button and collapsing headers have an …\nCheckboxes, radio button and collapsing headers have an …\nShow a spinner when loading an image.\nThe style of an interactive widget, such as a button, at …\nIndent collapsing regions etc by this much.\nEnd indented regions with a horizontal line\nDraw a vertical lien left of indented region, in e.g. …\nUse this style for interactive things. Note that you must …\nThe opaqueness of the background when the user is hovering …\nShould the cursor change when the user hovers over an …\nThe opaqueness of the handle when the user is hovering …\nHow close a widget must be to the mouse to have a chance …\nMinimum size of a <code>DragValue</code>, color picker button, and …\nHow and when interaction happens.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHorizontal and vertical spacing between widgets.\nDefault light theme.\nHorizontal and vertical margins within a menu frame.\nHorizontal distance between a menu and a submenu.\nThe default wrapping width of a menu.\nCan the user select text that span multiple labels?\nThe first argument is the number to be formatted. The …\nNew scroll animation\nNo animation, scroll instantly.\nStyle to use for non-interactive widgets.\nThe style of a widget that you cannot interact with.\nHow to format numbers as strings, e.g. in a …\nHow to display numeric color values.\nWhen blinking, this is how long the cursor is invisible.\nWhen blinking, this is how long the cursor is visible.\nThe style of a button that has an open menu beneath it …\nIf set this will change the font family and size for all …\nOverride default text color for all text.\nIf set this will change the default <code>TextStyle</code> for all …\nHow to vertically align text.\nPanel background color\nWith what speed should we scroll? (Default: 1000.0)\nShow where the text cursor would be if you clicked?\nRadius of the interactive area of the corner of a window …\nRadius of the interactive area of the side of a window …\nLook up this <code>TextStyle</code> in <code>Style::text_styles</code>.\nButton frames etc.\nControls the spacing of a <code>crate::ScrollArea</code>.\nThe animation that should be used when scrolling a …\nCan you select the text on a <code>crate::Label</code> by default?\nShow which widgets make their parent higher\nShow which widgets make their parent wider\nShow an overlay on all interactive widgets.\nIf <code>false</code>, tooltips will show up anytime you hover …\nIf true, highlight widgets that are not aligned to integer …\nShow interesting widgets under the mouse cursor.\nDefault rail height of a <code>Slider</code>.\nShow trailing color behind the circle of a <code>Slider</code>. Default …\nDefault width of a <code>Slider</code>.\nSolid scroll bars that always use up space\nSizes and distances between widgets\nWhether or not Grids and Tables should be striped by …\nThe color and width of the text cursor\nHow the text cursor acts.\nDefault width of a <code>crate::TextEdit</code>.\nAll known text styles.\nThe <code>FontFamily</code> and size you want to use for a specific …\nThin scroll bars that expand on hover\nDelay in seconds before showing tooltips after the mouse …\nIf you have waited for a tooltip and then hover some other …\nWidth of a tooltip (<code>on_hover_ui</code>, <code>on_hover_text</code> etc).\nShow the URL of hyperlinks in a tooltip when hovered.\nColors etc.\nA good color for warning text (e.g. orange).\nBackground color of widgets that can <em>optionally</em> have a …\nVisual styles of widgets\nWindow background color.\nHighlight the topmost window.\nHorizontal and vertical margins within a window frame.\nIf set, labels, buttons, etc. will use this to determine …\nIf set, labels, buttons, etc. will use this to determine …\nAspect ratio of the rectangle. Set to &lt; 1.0 to make it …\nCharacter cursor.\nA <code>.ttf</code> or <code>.otf</code> file and a font face index.\nDescribes the font data and the sizes to use.\nFont of unknown size.\nThe collection of fonts used by <code>epaint</code>.\nText that has been laid out, ready for painting.\nDescribes the task of laying out text.\nA font where each character is the same width (<code>w</code> is the …\nOne of the names in <code>FontDefinitions::families</code>.\nA font where some characters are wider than other (e.g. ‘…\nOne <code>\\t</code> character is this many spaces wide.\nFormatting option for a section of text.\nControls the text wrapping and elision of a <code>LayoutJob</code>.\nHelper for adding a new section when building a <code>LayoutJob</code>.\nCall at the start of each frame with the latest known …\nIf <code>true</code>: Allow breaking between any characters. If <code>false</code> …\nIf <code>true</code>, all <code>\\n</code> characters will result in a new <em>paragraph</em>, …\nRange into the galley text\nText color\nThe wrap with, with a small margin in some cases.\nSet to true the text was truncated due to …\nExtra spacing between letters, in points.\nList of all known font families.\nWhich fonts (names) to use for each <code>FontFamily</code>.\nThe first row must be at least this high. This is in case …\nThe content of a <code>.ttf</code> or <code>.otf</code> file.\nHow full is the font atlas?\nList of font names and their definitions.\nThe height of the tallest font used in the job.\nCall at the end of each frame (before painting) to get the …\nCurrent size of the font image. Pass this to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>TextWrapping</code> from a <code>TextWrapMode</code> and an available …\nWidth of this character in points.\nHow to horizontally align the text (<code>Align::LEFT</code>, …\nCan we display this glyph?\nCan we display all the glyphs in this text?\nThe full font atlas image.\nCharacter offset (NOT byte offset!).\nWhich font face in the file to use. When in doubt, use <code>0</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe job that this galley is the result of. Contains the …\nJustify text so that word-wrapped rows fill the whole …\nWill wrap text at the given width and line break at <code>\\n</code>.\nLike <code>Self::layout</code>, made for when you want to pick a color …\nLayout some text.\nWill line break at <code>\\n</code>.\nCan be used for first row indentation.\nExplicit line height of the text in points.\nMaximum amount of rows the text galley should have.\nWrap text so that no row is wider than this.\nTight bounding box around all the meshes in all the rows. …\nCreate a new <code>Fonts</code> for text layout. This call is …\nA row can be as long as it need to be.\nTotal number of indices in all the row meshes.\nTotal number of vertices in all the row meshes.\nCharacter to use to represent elided text.\nThe number of physical pixels for each logical point. …\nIf this cursors sits right at the border of a wrapped row …\nBounding rect.\nRounding to the closest ui point (not pixel!) allows the …\nHeight of one row of text in points\nRows of text, from top to bottom.\nThe different section, which can have different fonts, …\nBreak on <code>\\n</code> and at the given wrap width.\nDoes not break on <code>\\n</code>, but shows the replacement character …\nThe complete text of this job, referenced by <code>LayoutSection</code>.\nThe font atlas. Pass this to <code>crate::Tessellator</code>.\nElide text that doesn’t fit within the given width, …\nExtra scale and vertical tweak to apply to all text of …\nIf you use a small font and <code>Align::TOP</code> you can get the …")