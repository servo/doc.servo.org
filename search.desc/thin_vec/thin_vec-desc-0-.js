searchState.loadedDescShard("thin_vec", 0, "<code>ThinVec</code> is exactly the same as <code>Vec</code>, except that it stores …\nA draining iterator for <code>ThinVec&lt;T&gt;</code>.\nSingleton that all empty collections share. Note: can’t …\nAn iterator that moves out of a vector.\nA splicing iterator for <code>ThinVec</code>.\nSee the crate’s top level documentation for a …\nGets the align necessary to allocate a <code>ThinVec&lt;T&gt;</code>\nGets the size necessary to allocate a <code>ThinVec&lt;T&gt;</code> with the …\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nExtracts a mutable slice of the entire vector.\nReturns the remaining items of this iterator as a mutable …\nExtracts a slice containing the entire vector.\nReturns the remaining items of this iterator as a slice.\nReturns the remaining items of this iterator as a slice.\nReturns the number of elements the vector can hold without …\nClears the vector, removing all values.\nRemoves consecutive repeated elements in the vector.\nRemoves consecutive elements in the vector according to a …\nRemoves consecutive elements in the vector that resolve to …\nRemoves the specified range from the vector in bulk, …\nThe one-past-the-end index of the drain range, or …\nClones and appends all elements in a slice to the <code>ThinVec</code>.\nThe range from <code>self.vec.len</code> to <code>self.tail_start</code> contains …\nReturns the argument unchanged.\nAllocate a <code>ThinVec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nReturns the argument unchanged.\nConvert a boxed slice into a vector by transferring …\nAllocate a <code>ThinVec&lt;T&gt;</code> and move <code>s</code>’s items into it.\nConvert a <code>std::Vec</code> into a <code>ThinVec</code>.\nAllocate a <code>ThinVec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nAllocate a <code>ThinVec&lt;u8&gt;</code> and fill it with a UTF-8 string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if the vector has the capacity to hold any …\nAllocates a header (and array) for a <code>ThinVec&lt;T&gt;</code> with the …\nInserts an element at position <code>index</code> within the vector, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the vector contains no elements.\nAn iterator over the elements we’re removing.\nGets the layout necessary to allocate a <code>ThinVec&lt;T&gt;</code>\nReturns the number of elements in the vector, also …\nMakes room for inserting more elements before the tail.\nCreates a new empty ThinVec.\nGets the padding necessary for the array of a <code>ThinVec&lt;T&gt;</code>\nRemoves the last element from a vector and returns it, or …\nAppends an element to the back of a collection.\nResize the buffer and update its capacity, without …\nRemoves and returns the element at position <code>index</code> within …\nReserve capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for <code>additional</code> more elements …\nResizes the <code>Vec</code> in-place so that <code>len()</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector as much as possible.\nCreates a splicing iterator that replaces the specified …\nSplits the collection into two at the given index.\nRemoves an element from the vector and returns it.\nThe length of the tail.\nCreates a <code>ThinVec</code> containing the arguments.\nShortens the vector, keeping the first <code>len</code> elements and …\nThe actual ThinVec, which we need to hold onto to undo the …\nConstructs a new, empty <code>ThinVec&lt;T&gt;</code> with at least the …")