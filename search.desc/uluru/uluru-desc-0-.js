searchState.loadedDescShard("uluru", 0, "A simple, fast, least-recently-used (LRU) cache.\nAn entry in an <code>LRUCache</code>.\nIterator over values in an <code>LRUCache</code>, from …\nMutable iterator over values in an <code>LRUCache</code>, from …\nA LRU cache using a statically-sized array for storage.\nEvict all elements from the cache.\nThe most-recently-used entry is at index <code>head</code>. The entries …\nReturns the first item in the cache that matches the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the front entry in the list (most recently used).\nReturns a mutable reference to the front entry in the list …\nReturns the n-th entry in the list (most recently used).\nIndex of the first entry. If the cache is empty, ignore …\nInsert a given key in the cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the cache is empty.\nIterate over the contents of this cache in order from …\nIterate mutably over the contents of this cache in order …\nReturns the number of elements in the cache.\nPerforms a lookup on the cache with the given test …\nCreate an empty cache.\nIndex of the next entry. If this entry is the tail, ignore …\nRemove the last entry from the linked list. Returns the …\nIndex of the previous entry. If this entry is the head, …\nInsert a new entry at the head of the list.\nRemove an entry from the linked list.\nIndex of the last entry. If the cache is empty, ignore …\nTouches the first item in the cache that matches the given …\nTouch a given entry, putting it first in the list.")