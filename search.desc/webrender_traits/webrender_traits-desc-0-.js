searchState.loadedDescShard("webrender_traits", 0, "Add a font with the given data and font key.\nAdd an instance of a font with the given instance key.\nAdd an image with the given data and <code>ImageKey</code>.\nRegister a new image.\nAdd a system font with the given font key and handle.\nThe result of a hit test in the compositor.\nA mechanism to send messages from ScriptThread to the …\nDelete a previously registered image registration.\nAn image owned by the embedding, and referenced by …\nGenerate a new batch of font keys which can be used to …\nCreate a new image key. The result will be returned via the\nGet the available screen size (without toolbars and docks) …\nGet the client window size and position.\nGet the size of the screen that the client window inhabits.\nPerform a hit test operation. The result will be returned …\nSerializable image updates that must be performed by …\nA simple series of bytes, provided by the embedding and …\nRemove the given font resources from our WebRender …\nInform WebRender of a new display list for the given …\nInform WebRender of the existence of this pipeline.\nPerform a scroll operation.\nSerialized <code>ImageData</code>. It contains IPC byte channel …\nThe address of a node. Layout sends these back. They must …\nUpdate an existing image registration.\nPerform a resource update operation.\nThis trait is used as a bridge between the different GL …\nWebRender External Image Handler implementation.\nList of Webrender external images to be shared among all …\nType of Webrender External Image Handler.\nThe cursor that should be used when hovering the item hit …\nDefines data structures which are consumed by the …\nCreate a new <code>CrossProcessCompositorApi</code> struct that does …\nWebrender external images.\nMap of all generated external images.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>UntrustedNodeAddress</code> from the given pointer …\nCreate a new image key. Blocks until the key is available.\nPerform a hit test operation. Blocks until the operation …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLock the external image. Then, WR could start to read the …\nMedia player handler.\nId generator for the next external image identifier.\nThe node address of the hit test result.\nThe pipeline id of the resulting item.\nThe hit test point in the item’s viewport.\nThe hit test point relative to the item itself.\nThe scroll tree node associated with this hit test item.\nInform WebRender of a new display list for the given …\nInform WebRender of the existence of this pipeline.\nPerform a scroll operation.\nGet the sender for this proxy.\nUnlock the external image. The WR should not read the image\nPerform an image resource update operation.\nWebGL handler.\nWebGPU handler.\nA descriptor of this display list used to construct this …\nThe CompositorDisplayListInfo that describes the display …\nAn ipc::IpcBytesReceiver used to send the raw data of the …\nA data structure which stores compositor-side information …\nInformation that Servo keeps alongside WebRender display …\nThis node can only be scrolled by script events.\nThis node can be scrolled by input and script events.\nThe scroll sensitivity of a scroll node ie whether it can …\nA tree of spatial nodes, which mirrors the spatial nodes …\nA node in a tree of scroll nodes. This may either be a …\nAn id for a ScrollTreeNode in the ScrollTree. This …\nData stored for nodes in the ScrollTree that actually …\nAdd or re-use a duplicate HitTestInfo entry in this …\nAdd a scroll node to this ScrollTree returning the id of …\nThe size of this display list’s content.\nThe cursor of this node’s hit test item.\nThe epoch of the display list.\nGet the external id of this node.\nThe external scroll id of this node, used to track it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an immutable reference to the node with the given …\nGet a mutable reference to the node with the given index.\nAn array of <code>HitTestInfo</code> which is used to store information …\nThe index of this scroll tree node in the tree’s array …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new CompositorDisplayListInfo with the root …\nThe id of the node of this hit test item.\nA list of compositor-side scroll nodes that describe the …\nGet the offset id of this node if it applies.\nThe current offset of this scroll node.\nThe index of the parent of this node in the tree. If this …\nThe WebRender PipelineId of this display list.\nThe <code>ScrollTreeNodeId</code> of the root reference frame of this …\nThe <code>ScrollTreeNodeId</code> of the topmost scrolling frame of …\nScroll this node given a WebRender ScrollLocation. Returns …\nScrolling data which will not be None if this is a …\nScroll the given scroll node on this scroll tree. If the …\nWhether this <code>ScrollableNode</code> is sensitive to input events.\nA ScrollTree used by the compositor to scroll the contents …\nThe id of the ScrollTree associated with this hit test …\nAmount that this <code>ScrollableNode</code> can scroll in both …\nSet the offset for this node, returns false if this was a …\nGiven an <code>ExternalScrollId</code> and an offset, update the scroll …\nThe WebRender spatial id of this scroll tree node.\nThe size of the viewport that this display list renders …\nA Servo rendering context, which holds all of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvoke a closure with the surface associated with the …")