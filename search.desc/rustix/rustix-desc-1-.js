searchState.loadedDescShard("rustix", 1, "Returns a description of the events.\nReturns the file name of this event, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>inotify_init1(flags)</code>—Creates a new inotify object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the internal buffer is empty and will be …\nCreate a new iterator from the given file descriptor and …\nRead the next inotify event.\n<code>inotify_rm_watch(self, wd)</code>—Removes a watch from this …\nReturns the watch for which this event occurs.\n<code>FS_APPEND_FL</code>\n<code>FS_COMPR_FL</code>\n<code>FS_DIRSYNC_FL</code>\n<code>FS_*</code> constants for use with <code>ioctl_getflags</code>.\n<code>FS_IMMUTABLE_FL</code>\n<code>FS_JOURNAL_DATA_FL</code>\n<code>FS_NOATIME_FL</code>\n<code>FS_NOCOW_FL</code>\n<code>FS_NODUMP_FL</code>\n<code>FS_NOTAIL_FL</code>\n<code>FS_PROJINHERIT_FL</code>\n<code>FS_SECRM_FL</code>\n<code>FS_SYNC_FL</code>\n<code>FS_TOPDIR_FL</code>\n<code>FS_UNRM_FL</code>\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\n<code>ioctl(fd, EXT4_IOC_RESIZE_FS, blocks)</code>—Resize ext4 …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ioctl(fd, BLKPBSZGET)</code>—Returns the physical block size of …\n<code>ioctl(fd, BLKSSZGET)</code>—Returns the logical block size of a …\n<code>ioctl(fd, FICLONE, src_fd)</code>—Share data between open files.\n<code>ioctl(fd, FS_IOC_GETFLAGS)</code>—Returns the inode flags …\n<code>ioctl(fd, FS_IOC_SETFLAGS)</code>—Modify the inode flags …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>major(dev)</code>\n<code>makedev(maj, min)</code>\n<code>minor(dev)</code>\n<code>memfd_create(name, flags)</code>\n…\nA directory iterator implemented with getdents.\nA raw directory entry, similar to <code>std::fs::DirEntry</code>.\nReturns the file name of this directory entry.\nReturns the type of this directory entry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the inode number of this directory entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the internal buffer is empty and will be …\nCreate a new iterator from the given file descriptor and …\nIdentical to <code>Iterator::next</code> except that <code>Iterator::Item</code> …\nReturns the seek cookie to the next directory entry.\nSets the offset to the current position plus the specified …\nSets the offset to the current position plus the specified …\nSets the offset to the size of this object plus the …\nSets the offset to the current position plus the specified …\nEnumeration of possible methods to seek within an I/O …\nSets the offset to the provided number of bytes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>sendfile(out_fd, in_fd, offset, count)</code>\n<code>statx(dirfd, path, flags, mask, statxbuf)</code>\nThe first <code>statx</code> call failed. We can get a variety of error …\nThe first <code>statx</code> call. We don’t know if <code>statx</code> is …\n<code>sync</code>—Flush cached filesystem data for all filesystems.\n<code>XATTR_CREATE</code>\n<code>XATTR_REPLACE</code>\n<code>XATTR_*</code> constants for use with <code>setxattr</code>, and other …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n<code>fgetxattr(fd, name, value.as_ptr(), value.len())</code>—Get …\n<code>flistxattr(fd, list.as_ptr(), list.len())</code>—List extended …\n<code>fremovexattr(fd, name)</code>—Remove an extended filesystem …\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\n<code>fsetxattr(fd, name, value.as_ptr(), value.len(), flags)</code>…\n<code>getxattr(path, name, value.as_ptr(), value.len())</code>—Get …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\n<code>lgetxattr(path, name, value.as_ptr(), value.len())</code>—Get …\n<code>listxattr(path, list.as_ptr(), list.len())</code>—List extended …\n<code>llistxattr(path, list.as_ptr(), list.len())</code>—List …\n<code>lremovexattr(path, name)</code>—Remove an extended filesystem …\n<code>setxattr(path, name, value.as_ptr(), value.len(), flags)</code>…\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\n<code>removexattr(path, name)</code>—Remove an extended filesystem …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\n<code>setxattr(path, name, value.as_ptr(), value.len(), flags)</code>…\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>O_*</code> constants for use with <code>dup2</code>.\nContains the error value\n<code>errno</code>—An error code.\n<code>FD_*</code> constants for use with <code>fcntl_getfd</code> and <code>fcntl_setfd</code>.\nA buffer type used with <code>Write::write_vectored</code>.\nA buffer type used with <code>Read::read_vectored</code>.\nContains the success value\n<code>RWF_*</code> constants for use with <code>preadv2</code> and <code>pwritev2</code>.\nA specialized <code>Result</code> type for <code>rustix</code> APIs.\nAdvance the internal cursor of the slice.\nAdvance the internal cursor of the slice.\nAdvance a slice of slices.\nAdvance a slice of slices.\nThe unsafe <code>close</code> for raw file descriptors.\n<code>close(raw_fd)</code>—Closes a <code>RawFd</code> directly.\nFunctions which duplicate file descriptors.\n<code>dup(fd)</code>—Creates a new <code>OwnedFd</code> instance that shares the …\n<code>dup2(fd, new)</code>—Changes the file description of a file …\n<code>dup3(fd, new, flags)</code>—Changes the file description of a …\nThe <code>Errno</code> type, which is a minimal wrapper around an error …\nThe Unix <code>fcntl</code> function is effectively lots of different …\n<code>fcntl(fd, F_DUPFD_CLOEXEC)</code>—Creates a new <code>OwnedFd</code> …\n<code>fcntl(fd, F_GETFD)</code>—Returns a file descriptor’s flags.\n<code>fcntl(fd, F_SETFD, flags)</code>—Sets a file descriptor’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Unix <code>ioctl</code> function is effectively lots of different …\n<code>ioctl(fd, FIONBIO, &amp;value)</code>—Enables or disables …\n<code>ioctl(fd, FIONREAD)</code>—Returns the number of bytes ready to …\nThe <code>is_read_write</code> function.\nReturns a pair of booleans indicating whether the file …\nCreates a new <code>IoSliceMut</code> wrapping a byte slice.\nCreates a new <code>IoSlice</code> wrapping a byte slice.\n<code>pread(fd, buf, offset)</code>—Reads from a file at a given …\n<code>pread(fd, buf, offset)</code>—Reads from a file at a given …\n<code>preadv(fd, bufs, offset)</code>—Reads from a file at a given …\n<code>preadv2(fd, bufs, offset, flags)</code>—Reads data, with …\n<code>pwrite(fd, bufs)</code>—Writes to a file at a given position.\n<code>pwritev(fd, bufs, offset)</code>—Writes to a file at a given …\n<code>pwritev2(fd, bufs, offset, flags)</code>—Writes data, with …\n<code>read(fd, buf)</code>—Reads from a stream.\n<code>read(fd, buf)</code>—Reads from a stream.\n<code>read</code> and <code>write</code>, optionally positioned, optionally vectored.\n<code>readv(fd, bufs)</code>—Reads from a stream into multiple …\nCall <code>f</code> until it either succeeds or fails other than …\n<code>write(fd, buf)</code>—Writes to a stream.\n<code>writev(fd, bufs)</code>—Writes to a stream from multiple …\n<code>close(raw_fd)</code>—Closes a <code>RawFd</code> directly.\n<code>dup(fd)</code>—Creates a new <code>OwnedFd</code> instance that shares the …\n<code>dup2(fd, new)</code>—Changes the file description of a file …\n<code>dup3(fd, new, flags)</code>—Changes the file description of a …\nContains the error value\nContains the success value\nA specialized <code>Result</code> type for <code>rustix</code> APIs.\nCall <code>f</code> until it either succeeds or fails other than …\n<code>fcntl(fd, F_DUPFD_CLOEXEC)</code>—Creates a new <code>OwnedFd</code> …\n<code>fcntl(fd, F_GETFD)</code>—Returns a file descriptor’s flags.\n<code>fcntl(fd, F_SETFD, flags)</code>—Sets a file descriptor’s …\n<code>ioctl(fd, FIONBIO, &amp;value)</code>—Enables or disables …\n<code>ioctl(fd, FIONREAD)</code>—Returns the number of bytes ready to …\nReturns a pair of booleans indicating whether the file …\nA buffer type used with <code>Write::write_vectored</code>.\nA buffer type used with <code>Read::read_vectored</code>.\n<code>pread(fd, buf, offset)</code>—Reads from a file at a given …\n<code>pread(fd, buf, offset)</code>—Reads from a file at a given …\n<code>preadv(fd, bufs, offset)</code>—Reads from a file at a given …\n<code>preadv2(fd, bufs, offset, flags)</code>—Reads data, with …\n<code>pwrite(fd, bufs)</code>—Writes to a file at a given position.\n<code>pwritev(fd, bufs, offset)</code>—Writes to a file at a given …\n<code>pwritev2(fd, bufs, offset, flags)</code>—Writes data, with …\n<code>read(fd, buf)</code>—Reads from a stream.\n<code>read(fd, buf)</code>—Reads from a stream.\n<code>readv(fd, bufs)</code>—Reads from a stream into multiple …\n<code>write(fd, buf)</code>—Writes to a stream.\n<code>writev(fd, bufs)</code>—Writes to a stream from multiple …\nProvides a bad opcode at compile time.\nTrait for something that provides an <code>ioctl</code> opcode at …\nThe direction that an <code>ioctl</code> is going.\nImplements the traditional “getter” pattern for <code>ioctl</code>s.\nDoes the <code>ioctl</code> mutate any data in the userspace?\nA trait defining the properties of an <code>ioctl</code> command.\nThe type used by the <code>ioctl</code> to signify the output.\nImplements an <code>ioctl</code> with no real arguments.\nNone of the above.\nProvides a <code>None</code> code at compile time.\nThe opcode.\nThe opcode used by this <code>ioctl</code> command.\nThe opcode used by an <code>Ioctl</code>.\nThe type of the output data.\nThe type used by the <code>ioctl</code> to signify the command.\nRead data from the kernel.\nProvides a read code at compile time.\nRead and write data to the kernel.\nProvides a read/write code at compile time.\nImplements the pattern for <code>ioctl</code>s where a pointer argument …\nImplements an “updater” pattern for <code>ioctl</code>s.\nWrite data to the kernel.\nProvides a write code at compile time.\nThe opcode.\nThe opcode.\nThe opcode.\nThe opcode.\nGet a pointer to the data to be passed to the <code>ioctl</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new opcode from a direction, group, number, and …\nThe input data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform an <code>ioctl</code> call.\n<code>ioctl</code> opcode behavior for Linux platforms.\nCreate a new non-mutating opcode from a group, a number, …\nCreate a new old <code>Opcode</code> from a raw opcode.\nThe output data.\nCast the output data to the correct type.\nImplements typical patterns for <code>ioctl</code> usage.\nGet the raw opcode.\nThe raw opcode.\nCreate a new reading opcode from a group, a number and the …\nCreate a new reading and writing opcode from a group, a …\nReference to input/output data.\nCreate a new writing opcode from a group, a number and the …\nCompose an opcode from its component parts.\nProvides a bad opcode at compile time.\nTrait for something that provides an <code>ioctl</code> opcode at …\nImplements the traditional “getter” pattern for <code>ioctl</code>s.\nImplements an <code>ioctl</code> with no real arguments.\nProvides a <code>None</code> code at compile time.\nThe opcode.\nProvides a read code at compile time.\nProvides a read/write code at compile time.\nImplements the pattern for <code>ioctl</code>s where a pointer argument …\nImplements an “updater” pattern for <code>ioctl</code>s.\nProvides a write code at compile time.\nThe opcode.\nThe opcode.\nThe opcode.\nThe opcode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe input data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new no-argument <code>ioctl</code> object.\nCreate a new getter-style <code>ioctl</code> object.\nCreate a new pointer setter-style <code>ioctl</code> object.\nCreate a new pointer updater-style <code>ioctl</code> object.\nThe output data.\nReference to input/output data.\nA buffer type used with <code>Write::write_vectored</code>.\nA buffer type used with <code>Read::read_vectored</code>.\nAn IP address, either IPv4 or IPv6.\nAn IPv4 address.\nAn IPv6 address.\nAn internet socket address, either IPv4 or IPv6.\nAn IPv4 socket address.\nAn IPv6 socket address.\nAn IPv4 address.\nAn IPv4 socket address.\nAn IPv6 address.\nAn IPv6 socket address.\nA trait to borrow the file descriptor from an underlying …\nA trait to extract the raw file descriptor from an …\nA borrowed file descriptor.\nA trait to express the ability to construct an object from …\nA trait to express the ability to consume an object and …\nAn owned file descriptor.\nRaw file descriptors.\nBorrows the file descriptor.\nExtracts the raw file descriptor.\nConstructs a new instance of <code>Self</code> from the given raw file …\nConsumes this object, returning the raw underlying file …\nLinux <code>mount</code>.\n<code>mount(source, target, filesystemtype, mountflags, data)</code>\n<code>mount2(source, target, filesystemtype, mountflags, data)</code>\n<code>mount(source, target, NULL, MS_BIND, NULL)</code>\n<code>mount(NULL, target, NULL, mountflags, NULL)</code>\n<code>mount(source, target, NULL, MS_MOVE, NULL)</code>\n<code>mount(source, target, NULL, MS_BIND | MS_REC, NULL)</code>\n<code>mount(NULL, target, NULL, MS_REMOUNT | mountflags, data)</code>\n<code>umount2(target, flags)</code>\n<code>AF_*</code> constants for use with <code>socket</code>, <code>socket_with</code>, and …\nAn iterator that drains messages from a <code>RecvAncillaryBuffer</code>…\nAn iterator over data in an ancillary buffer.\nThe size of an IPv4 address in bits.\nThe size of an IPv6 address in bits.\nAn IPv4 address representing the broadcast address: …\nAn IP address, either IPv4 or IPv6.\nAn IPv4 address.\nAn IPv6 address.\nAn IPv4 address with the address pointing to localhost: …\nAn IPv6 address representing localhost: <code>::1</code>.\n<code>IPPROTO_*</code> and other constants for use with <code>socket</code>, …\nA type for holding raw integer address families.\nA type for holding raw integer protocols.\nA type for holding raw integer socket types.\n<code>SHUT_RD</code>—Disable further read operations.\n<code>SHUT_RDWR</code>—Disable further read and write operations.\nBuffer for receiving ancillary messages with <code>recvmsg</code>.\nAncillary message for <code>recvmsg</code>.\n<code>MSG_*</code> flags for use with <code>recv</code>, <code>recvfrom</code>, and related …\nThe result of a successful <code>recvmsg</code> call.\nSend process credentials.\nReceived process credentials.\nSend file descriptors.\nReceived file descriptors.\nBuffer for sending ancillary messages with <code>sendmsg</code>, …\nAncillary message for <code>sendmsg</code>, <code>sendmsg_v4</code>, <code>sendmsg_v6</code>, …\n<code>MSG_*</code> flags for use with <code>send</code>, <code>sendto</code>, and related …\n<code>SHUT_*</code> constants for use with <code>shutdown</code>.\nAn internet socket address, either IPv4 or IPv6.\n<code>struct sockaddr_storage</code> as a Rust enum.\n<code>struct sockaddr_storage</code> as a raw struct.\n<code>struct sockaddr_un</code>\nAn IPv4 socket address.\nAn IPv6 socket address.\n<code>SOCK_*</code> constants for use with <code>socket_with</code>, <code>accept_with</code> and …\n<code>SOCK_*</code> constants for use with <code>socket</code>.\nUNIX credentials of socket peer, for use with …\nAn IPv4 address representing an unspecified address: …\nAn IPv6 address representing the unspecified address: <code>::</code>\n<code>struct sockaddr_un</code>\n<code>struct sockaddr_in</code>\nAn IPv4 address.\nAn IPv4 socket address.\n<code>struct sockaddr_in6</code>\nAn IPv6 address.\nAn IPv6 socket address.\n<code>SHUT_WR</code>—Disable further write operations.\n<code>struct sockaddr_xdp</code>\nThe raw data we’re removing.\nPhantom data for lifetime of <code>&amp;&#39;slice [BorrowedFd&lt;&#39;fd&gt;]</code>.\n<code>accept(fd, NULL, NULL)</code>—Accepts an incoming connection.\n<code>accept4(fd, NULL, NULL, flags)</code>—Accepts an incoming …\n<code>accept(fd, &amp;addr, &amp;len)</code>—Accepts an incoming connection …\n<code>accept4(fd, &amp;addr, &amp;len, flags)</code>—Accepts an incoming …\nThe address of the socket we received from, if any.\n<code>bind(sockfd, addr)</code>—Binds a socket to an IP address.\n<code>bind(sockfd, addr)</code>—Binds a socket to an address.\n<code>bind(sockfd, addr, sizeof(struct sockaddr_un))</code>—Binds a …\n<code>bind(sockfd, addr, sizeof(struct sockaddr_in))</code>—Binds a …\n<code>bind(sockfd, addr, sizeof(struct sockaddr_in6))</code>—Binds a …\n<code>bind(sockfd, addr, sizeof(struct sockaddr_un))</code>—Binds a …\nRaw byte buffer for messages.\nRaw byte buffer for messages.\nThe number of bytes received.\nMacro for defining the amount of space to allocate in a …\n<code>connect(sockfd, addr)</code>—Initiates a connection to an IP …\n<code>connect(sockfd, addr)</code>—Initiates a connection.\n<code>connect(sockfd, addr, sizeof(struct sockaddr_un))</code>…\n…\n<code>connect(sockfd, addr, sizeof(struct sockaddr_in))</code>…\n<code>connect(sockfd, addr, sizeof(struct sockaddr_in6))</code>…\nThe data we’re iterating over.\n<code>ETH_P_*</code> constants.\nThe flags received.\nReturns the flow information associated with this address.\nCopies this address to a new <code>IpAddr::V6</code>.\nCopies this address to a new <code>IpAddr::V4</code>.\nCreates an <code>IpAddr::V6</code> from a sixteen element byte array.\nReturns the argument unchanged.\nCreates an <code>IpAddr::V6</code> from an eight element 16-bit array.\nCreates an <code>IpAddr::V4</code> from a four element byte array.\nReturns the argument unchanged.\nUses <code>Ipv4Addr::from_bits</code> to convert a host byte order <code>u32</code> …\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nUses <code>Ipv6Addr::from_bits</code> to convert a host byte order <code>u128</code> …\nReturns the argument unchanged.\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nConverts a tuple struct (Into&lt;<code>IpAddr</code>&gt;, <code>u16</code>) into a …\nConverts a <code>SocketAddrV6</code> into a <code>SocketAddr::V6</code>.\nConverts a <code>SocketAddrV4</code> into a <code>SocketAddr::V4</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a native byte order <code>u32</code> into an IPv4 address.\nConverts a native byte order <code>u128</code> into an IPv6 address.\n<code>getpeername(fd, addr, len)</code>—Returns the address a socket …\n<code>getsockname(fd, addr, len)</code>—Returns the address a socket …\nGroup ID of peer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\n<code>IPPROTO_*</code> constants.\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address part of the <code>198.18.0.0/15</code> …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if this is a broadcast address (…\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if this address is an <code>IPv4</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is an IPv4-mapped address (…\nReturns <code>true</code> if this address is an <code>IPv6</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).\nReturns <code>true</code> if this is a loopback address.\nReturns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).\nReturns <code>true</code> if this is the loopback address (<code>::1</code>), as …\nReturns <code>true</code> if this is a multicast address.\nReturns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).\nReturns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).\nReturns <code>true</code> if this is a private address.\nReturns <code>true</code> if this address is reserved by IANA for …\nReturns <code>true</code> if this address is part of the Shared Address …\nReturns <code>true</code> if this is a unicast address, as defined by …\nReturns <code>true</code> if the address is a globally routable unicast …\nReturns <code>true</code> if the address is a unicast address with …\nReturns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).\nReturns <code>true</code> for the special ‘unspecified’ address.\nReturns <code>true</code> for the special ‘unspecified’ address (…\nReturns <code>true</code> for the special ‘unspecified’ address (<code>::</code>…\nThe amount of the buffer that is used.\nThe amount of the buffer that is used.\n<code>listen(fd, backlog)</code>—Enables listening for incoming …\nInner iterator over messages.\nReturns the address’s multicast scope if the address is …\nLow-level Linux network device access\n<code>NETLINK_*</code> constants.\nCreates a new IPv4 address from four eight-bit octets.\nCreates a new IPv6 address from eight 16-bit segments.\nCreates a new socket address from an IP address and a port …\nCreates a new socket address from an <code>IPv4</code> address and a …\nCreates a new socket address from an <code>IPv6</code> address, a …\nReturns the four eight-bit integers that make up this …\nReturns the sixteen eight-bit integers the IPv6 address …\nParse an IP address from a slice of bytes.\nParse an IPv4 address from a slice of bytes.\nParse an IPv6 address from a slice of bytes.\nParse a socket address from a slice of bytes.\nParse an IPv4 socket address from a slice of bytes.\nParse an IPv6 socket address from a slice of bytes.\nProcess ID of peer\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nThe portion of the buffer we’ve read from already.\nIncrement the number of messages we’ve read. Decrement …\n<code>recv(fd, buf, flags)</code>—Reads data from a socket.\n<code>recv(fd, buf, flags)</code>—Reads data from a socket.\n<code>recvfrom(fd, buf, flags, addr, len)</code>—Reads data from a …\n<code>recvfrom(fd, buf, flags, addr, len)</code>—Reads data from a …\n<code>recvmsg(msghdr)</code>—Receives a message from a socket.\nReturns the scope ID associated with this address.\nReturns the eight 16-bit segments that make up this …\n<code>send(fd, buf, flags)</code>—Writes data to a socket.\n<code>recv</code>, <code>send</code>, and variants.\n<code>sendmsg(msghdr)</code>—Sends a message on a socket.\n<code>sendmsg(msghdr)</code>—Sends a message on a socket to a …\n<code>sendmsg(msghdr)</code>—Sends a message on a socket to a …\n<code>sendmsg(msghdr)</code>—Sends a message on a socket to a …\n<code>sendmsg(msghdr)</code>—Sends a message on a socket to a …\n<code>sendmsg(msghdr)</code>—Sends a message on a socket to a …\n<code>sendto(fd, buf, flags, addr)</code>—Writes data to a socket to …\n<code>sendto(fd, buf, flags, addr)</code>—Writes data to a socket to …\n<code>sendto(fd, buf, flags, addr, sizeof(struct sockaddr_un))</code>…\n<code>sendto(fd, buf, flags, addr, sizeof(struct sockaddr_in))</code>…\n<code>sendto(fd, buf, flags, addr, sizeof(struct sockaddr_in6))</code>…\n<code>sendto(fd, buf, flags, addr, sizeof(struct sockaddr_xdp))</code>…\nChanges the flow information associated with this socket …\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the scope ID associated with this socket address.\n<code>shutdown(fd, how)</code>—Closes the read and/or write sides of …\n<code>socket(domain, type_, protocol)</code>—Creates a socket.\nA socket address for any kind of socket.\n<code>socket_with(domain, type_ | flags, protocol)</code>—Creates a …\n<code>socketpair(domain, type_ | accept_flags, protocol)</code>…\n<code>getsockopt</code> and <code>setsockopt</code> functions.\n<code>SYSPROTO_*</code> constants.\nConverts an IPv4 address into a <code>u32</code> representation using …\nConverts an IPv6 address into a <code>u128</code> representation using …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IPv4</code> address if it is either …\nConverts this address to an <code>IPv4</code> address if it’s an …\nConverts this address to an IPv4-compatible <code>IPv6</code> address.\nConverts this address to an IPv4-mapped <code>IPv6</code> address.\nTypes and constants for <code>rustix::net</code>.\nUser ID of peer\n<code>AF_XDP</code> related types and constants.\n<code>ETH_P_AARP</code>\n<code>ETH_P_AF_IUCV</code>\n<code>ETH_P_ALL</code>\n<code>ETH_P_AOE</code>\n<code>ETH_P_ARCNET</code>\n<code>ETH_P_ARP</code>\n<code>ETH_P_ATALK</code>\n<code>ETH_P_ATMFATE</code>\n<code>ETH_P_ATMMPOA</code>\n<code>ETH_P_AX25</code>\n<code>ETH_P_BATMAN</code>\n<code>ETH_P_BPQ</code>\n<code>ETH_P_CAIF</code>\n<code>ETH_P_CAN</code>\n<code>ETH_P_CANFD</code>\n<code>ETH_P_CANXL</code>\n<code>ETH_P_CFM</code>\n<code>ETH_P_CONTROL</code>\n<code>ETH_P_CUST</code>\n<code>ETH_P_DDCMP</code>\n<code>ETH_P_DEC</code>\n<code>ETH_P_DIAG</code>\n<code>ETH_P_DNA_DL</code>\n<code>ETH_P_DNA_RC</code>\n<code>ETH_P_DNA_RT</code>\n<code>ETH_P_DSA</code>\n<code>ETH_P_DSA_8021Q</code>\n<code>ETH_P_DSA_A5PSW</code>\n<code>ETH_P_ECONET</code>\n<code>ETH_P_EDSA</code>\n<code>ETH_P_ERSPAN</code>\n<code>ETH_P_ERSPAN2</code>\n<code>ETH_P_ETHERCAT</code>\n<code>ETH_P_FCOE</code>\n<code>ETH_P_FIP</code>\n<code>ETH_P_HDLC</code>\n<code>ETH_P_HSR</code>\n<code>ETH_P_IBOE</code>\n<code>ETH_P_IEEE802154</code>\n<code>ETH_P_IEEEPUP</code>\n<code>ETH_P_IEEEPUPAT</code>\n<code>ETH_P_IFE</code>\n<code>ETH_P_IP</code>\n<code>ETH_P_IPV6</code>\n<code>ETH_P_IPX</code>\n<code>ETH_P_IRDA</code>\n<code>ETH_P_LAT</code>\n<code>ETH_P_LINK_CTL</code>\n<code>ETH_P_LLDP</code>\n<code>ETH_P_LOCALTALK</code>\n<code>ETH_P_LOOP</code>\n<code>ETH_P_LOOPBACK</code>\n<code>ETH_P_MACSEC</code>\n<code>ETH_P_MAP</code>\n<code>ETH_P_MCTP</code>\n<code>ETH_P_MOBITEX</code>\n<code>ETH_P_MPLS_MC</code>\n<code>ETH_P_MPLS_UC</code>\n<code>ETH_P_MRP</code>\n<code>ETH_P_MVRP</code>\n<code>ETH_P_NCSI</code>\n<code>ETH_P_NSH</code>\n<code>ETH_P_PAE</code>\n<code>ETH_P_PAUSE</code>\n<code>ETH_P_PHONET</code>\n<code>ETH_P_PPPTALK</code>\n<code>ETH_P_PPP_DISC</code>\n<code>ETH_P_PPP_MP</code>\n<code>ETH_P_PPP_SES</code>\n<code>ETH_P_PREAUTH</code>\n<code>ETH_P_PROFINET</code>\n<code>ETH_P_PRP</code>\n<code>ETH_P_PUP</code>\n<code>ETH_P_PUPAT</code>\n<code>ETH_P_1588</code>\n<code>ETH_P_8021AD</code>\n<code>ETH_P_8021AH</code>\n<code>ETH_P_8021Q</code>\n<code>ETH_P_80221</code>\n<code>ETH_P_802_2</code>\n<code>ETH_P_802_3</code>\n<code>ETH_P_802_3_MIN</code>\n<code>ETH_P_802_EX1</code>\n<code>ETH_P_QINQ1</code>\n<code>ETH_P_QINQ2</code>\n<code>ETH_P_QINQ3</code>\n<code>ETH_P_RARP</code>\n<code>ETH_P_REALTEK</code>\n<code>ETH_P_SCA</code>\n<code>ETH_P_SLOW</code>\n<code>ETH_P_SNAP</code>\n<code>ETH_P_TDLS</code>\n<code>ETH_P_TEB</code>\n<code>ETH_P_TIPC</code>\n<code>ETH_P_TRAILER</code>\n<code>ETH_P_TR_802_2</code>\n<code>ETH_P_TSN</code>\n<code>ETH_P_WAN_PPP</code>\n<code>ETH_P_WCCP</code>\n<code>ETH_P_X25</code>\n<code>ETH_P_XDSA</code>\n<code>IPPROTO_AH</code>\n<code>IPPROTO_BEETPH</code>\n<code>IPPROTO_COMP</code>\n<code>IPPROTO_DCCP</code>\n<code>IPPROTO_EGP</code>\n<code>IPPROTO_ENCAP</code>\n<code>IPPROTO_ESP</code>\n<code>IPPROTO_ETHERNET</code>\n<code>IPPROTO_FRAGMENT</code>\n<code>IPPROTO_GRE</code>\n<code>IPPROTO_ICMP</code>\n<code>IPPROTO_ICMPV6</code>\n<code>IPPROTO_IDP</code>\n<code>IPPROTO_IGMP</code>\n<code>IPPROTO_IPIP</code>\n<code>IPPROTO_IPV6</code>\n<code>IPPROTO_MH</code>\n<code>IPPROTO_MPLS</code>\n<code>IPPROTO_MPTCP</code>\n<code>IPPROTO_MTP</code>\n<code>IPPROTO_PIM</code>\n<code>IPPROTO_PUP</code>\n<code>IPPROTO_RAW</code>\n<code>IPPROTO_ROUTING</code>\n<code>IPPROTO_RSVP</code>\n<code>IPPROTO_SCTP</code>\n<code>IPPROTO_TCP</code>\n<code>IPPROTO_TP</code>\n<code>IPPROTO_UDP</code>\n<code>IPPROTO_UDPLITE</code>\n<code>ioctl(fd, SIOCGIFNAME, ifreq)</code>—Returns the interface name …\n<code>ioctl(fd, SIOCGIFINDEX, ifreq)</code>—Returns the interface …\n<code>NETLINK_ADD_MEMBERSHIP</code>\n<code>NETLINK_AUDIT</code>\n<code>NETLINK_BROADCAST_ERROR</code>\n<code>NETLINK_CAP_ACK</code>\n<code>NETLINK_CONNECTOR</code>\n<code>NETLINK_CRYPTO</code>\n<code>NETLINK_DNRTMSG</code>\n<code>NETLINK_DROP_MEMBERSHIP</code>\n<code>NETLINK_ECRYPTFS</code>\n<code>NETLINK_EXT_ACK</code>\n<code>NETLINK_FIB_LOOKUP</code>\n<code>NETLINK_FIREWALL</code>\n<code>NETLINK_GENERIC</code>\n<code>NETLINK_GET_STRICT_CHK</code>\n<code>NETLINK_INET_DIAG</code>\n<code>NETLINK_IP6_FW</code>\n<code>NETLINK_ISCSI</code>\n<code>NETLINK_KOBJECT_UEVENT</code>\n<code>NETLINK_LISTEN_ALL_NSID</code>\n<code>NETLINK_LIST_MEMBERSHIPS</code>\n<code>NETLINK_NETFILTER</code>\n<code>NETLINK_NFLOG</code>\n<code>NETLINK_NO_ENOBUFS</code>\n<code>NETLINK_PKTINFO</code>\n<code>NETLINK_RDMA</code>\n<code>NETLINK_RX_RING</code>\n<code>NETLINK_SCSITRANSPORT</code>\n<code>NETLINK_SELINUX</code>\n<code>NETLINK_SOCK_DIAG</code>\n<code>NETLINK_TX_RING</code>\n<code>NETLINK_UNUSED</code>\n<code>NETLINK_USERSOCK</code>\n<code>NETLINK_XFRM</code>\n<code>recvmsg</code>, <code>sendmsg</code>, and related functions.\n<code>recv(fd, buf, flags)</code>—Reads data from a socket.\n<code>recv(fd, buf, flags)</code>—Reads data from a socket.\n<code>recvfrom(fd, buf, flags, addr, len)</code>—Reads data from a …\n<code>recvfrom(fd, buf, flags, addr, len)</code>—Reads data from a …\n<code>send(fd, buf, flags)</code>—Writes data to a socket.\n<code>sendto(fd, buf, flags, addr)</code>—Writes data to a socket to …\n<code>sendto(fd, buf, flags, addr)</code>—Writes data to a socket to …\n<code>sendto(fd, buf, flags, addr, sizeof(struct sockaddr_un))</code>…\n<code>sendto(fd, buf, flags, addr, sizeof(struct sockaddr_in))</code>…\n<code>sendto(fd, buf, flags, addr, sizeof(struct sockaddr_in6))</code>…\n<code>sendto(fd, buf, flags, addr, sizeof(struct sockaddr_xdp))</code>…\nAn iterator that drains messages from a <code>RecvAncillaryBuffer</code>…\nAn iterator over data in an ancillary buffer.\nBuffer for receiving ancillary messages with <code>recvmsg</code>.\nAncillary message for <code>recvmsg</code>.\nThe result of a successful <code>recvmsg</code> call.\nSend process credentials.\nReceived process credentials.\nSend file descriptors.\nReceived file descriptors.\nBuffer for sending ancillary messages with <code>sendmsg</code>, …\nAncillary message for <code>sendmsg</code>, <code>sendmsg_v4</code>, <code>sendmsg_v6</code>, …\nThe raw data we’re removing.\nPhantom data for lifetime of <code>&amp;&#39;slice [BorrowedFd&lt;&#39;fd&gt;]</code>.\nThe address of the socket we received from, if any.\nReturn a slice of <code>buffer</code> starting at the first <code>cmsghdr</code> …\nReturns a pointer to the message data.\nReturns a pointer to the message data.\nRaw byte buffer for messages.\nRaw byte buffer for messages.\nThe number of bytes received.\nDelete all messages from the buffer.\nDelete all messages from the buffer.\nReturns the length of the message data.\nReturns the length of the message data.\nA closure that converts a message into a …\nThe data we’re iterating over.\nDrain all messages from the buffer.\nThe flags received.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of the buffer that is used.\nThe amount of the buffer that is used.\nInner iterator over messages.\nCreate a new, empty <code>SendAncillaryBuffer</code> from a raw byte …\nCreate a new iterator over data in an ancillary buffer.\nCreate a new, empty <code>RecvAncillaryBuffer</code> from a raw byte …\nCreate an iterator for control messages that were received …\nAdd an ancillary message to the buffer.\nPushes an ancillary message to the buffer.\nThe portion of the buffer we’ve read from already.\nIncrement the number of messages we’ve read. Decrement …\n<code>recvmsg(msghdr)</code>—Receives a message from a socket.\n<code>sendmsg(msghdr)</code>—Sends a message on a socket.\n<code>sendmsg(msghdr)</code>—Sends a message on a socket to a …\n<code>sendmsg(msghdr)</code>—Sends a message on a socket to a …\n<code>sendmsg(msghdr)</code>—Sends a message on a socket to a …\n<code>sendmsg(msghdr)</code>—Sends a message on a socket to a …\n<code>sendmsg(msghdr)</code>—Sends a message on a socket to a …\nSet the length of the message data.\nGet the maximum size of an ancillary message.\nAn iterator over the messages in an ancillary buffer.\nCapture the original lifetime of the buffer.\nReturns the argument unchanged.\nThe current pointer to the next message header to return.\nCalls <code>U::from(self)</code>.\nThe message header we’re using to iterate over the …\nCreate a new iterator over messages from a byte buffer.\n<code>accept(fd, NULL, NULL)</code>—Accepts an incoming connection.\n<code>accept4(fd, NULL, NULL, flags)</code>—Accepts an incoming …\n<code>accept(fd, &amp;addr, &amp;len)</code>—Accepts an incoming connection …\n<code>accept4(fd, &amp;addr, &amp;len, flags)</code>—Accepts an incoming …\n<code>bind(sockfd, addr)</code>—Binds a socket to an IP address.\n<code>bind(sockfd, addr)</code>—Binds a socket to an address.\n<code>bind(sockfd, addr, sizeof(struct sockaddr_un))</code>—Binds a …\n<code>bind(sockfd, addr, sizeof(struct sockaddr_in))</code>—Binds a …\n<code>bind(sockfd, addr, sizeof(struct sockaddr_in6))</code>—Binds a …\n<code>bind(sockfd, addr, sizeof(struct sockaddr_un))</code>—Binds a …\n<code>connect(sockfd, addr)</code>—Initiates a connection to an IP …\n<code>connect(sockfd, addr)</code>—Initiates a connection.\n<code>connect(sockfd, addr, sizeof(struct sockaddr_un))</code>…\n…\n<code>connect(sockfd, addr, sizeof(struct sockaddr_in))</code>…\n<code>connect(sockfd, addr, sizeof(struct sockaddr_in6))</code>…\n<code>getpeername(fd, addr, len)</code>—Returns the address a socket …\n<code>getsockname(fd, addr, len)</code>—Returns the address a socket …\n<code>listen(fd, backlog)</code>—Enables listening for incoming …\n<code>shutdown(fd, how)</code>—Closes the read and/or write sides of …\n<code>socket(domain, type_, protocol)</code>—Creates a socket.\n<code>socket_with(domain, type_ | flags, protocol)</code>—Creates a …\n<code>struct sockaddr_storage</code> as a Rust enum.\n<code>struct sockaddr_un</code>\n<code>struct sockaddr_in</code>\n<code>struct sockaddr_in6</code>\n<code>struct sockaddr_xdp</code>\nReturn the address family of this socket address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads a platform-specific encoding of a socket address from\nWrites a platform-specific encoding of this socket address …\n<code>socketpair(domain, type_ | accept_flags, protocol)</code>…\n<code>SO_RCVTIMEO</code>—Timeout for receiving.\n<code>SO_SNDTIMEO</code>—Timeout for sending.\nTimeout identifier for use with <code>set_socket_timeout</code> and …\nReturns the argument unchanged.\n<code>getsockopt(fd, IPPROTO_IP, IP_FREEBIND)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_MULTICAST_LOOP)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_MULTICAST_TTL)</code>\n<code>getsockopt(fd, IPPROTO_IP, SO_ORIGINAL_DST)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_RECVTOS)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_TOS)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_TTL)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_FREEBIND)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_HOPS)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_LOOP)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IP6T_SO_ORIGINAL_DST)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_RECVTCLASS)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_TCLASS)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_UNICAST_HOPS)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_ACCEPTCONN)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_BROADCAST)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_COOKIE)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_DOMAIN)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_ERROR)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_INCOMING_CPU)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_KEEPALIVE)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_LINGER)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_OOBINLINE)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_PASSCRED)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_PEERCRED)</code>—Get credentials …\n<code>getsockopt(fd, SOL_SOCKET, SO_PROTOCOL)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_RCVBUF)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_REUSEADDR)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_REUSEPORT)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_SNDBUF)</code>\n<code>getsockopt(fd, SOL_SOCKET, id)</code>—Get the sending or …\n<code>getsockopt(fd, SOL_SOCKET, SO_TYPE)</code>—Returns the type of …\n<code>getsockopt(fd, IPPROTO_TCP, TCP_CONGESTION)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_CORK)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_NODELAY)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_QUICKACK)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_THIN_LINEAR_TIMEOUTS)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_USER_TIMEOUT)</code>\n<code>getsockopt(fd, SOL_XDP, XDP_MMAP_OFFSETS)</code>\n<code>getsockopt(fd, SOL_XDP, XDP_OPTIONS)</code>\n<code>getsockopt(fd, SOL_XDP, XDP_STATISTICS)</code>\nCalls <code>U::from(self)</code>.\n…\n…\n<code>setsockopt(fd, IPPROTO_IP, IP_ADD_SOURCE_MEMBERSHIP, value)</code>\n…\n…\n…\n<code>setsockopt(fd, IPPROTO_IP, IP_FREEBIND, value)</code>\n<code>setsockopt(fd, IPPROTO_IP, IP_MULTICAST_LOOP, value)</code>\n<code>setsockopt(fd, IPPROTO_IP, IP_MULTICAST_TTL, value)</code>\n<code>setsockopt(fd, IPPROTO_IP, IP_RECVTOS, value)</code>\n<code>setsockopt(fd, IPPROTO_IP, IP_TOS, value)</code>\n<code>setsockopt(fd, IPPROTO_IP, IP_TTL, value)</code>\n…\n…\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_FREEBIND, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_LOOP, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_RECVTCLASS, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_TCLASS, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_UNICAST_HOPS, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_BROADCAST, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_INCOMING_CPU, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_LINGER, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_OOBINLINE, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_PASSCRED, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_RCVBUF, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, value)</code>—Set …\n<code>setsockopt(fd, SOL_SOCKET, SO_REUSEPORT, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_SNDBUF, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, id, value)</code>—Set the sending or …\n<code>setsockopt(fd, IPPROTO_TCP, TCP_CONGESTION, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_CORK, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_QUICKACK, value)</code>\n…\n<code>setsockopt(fd, IPPROTO_TCP, TCP_USER_TIMEOUT, value)</code>\n<code>setsockopt(fd, SOL_XDP, XDP_RX_RING, value)</code>\n<code>setsockopt(fd, SOL_XDP, XDP_TX_RING, value)</code>\n<code>setsockopt(fd, SOL_XDP, XDP_UMEM_COMPLETION_RING, value)</code>\n<code>setsockopt(fd, SOL_XDP, XDP_UMEM_FILL_RING, value)</code>\n<code>setsockopt(fd, SOL_XDP, XDP_UMEM_REG, value)</code>\n<code>AF_APPLETALK</code>\n<code>AF_ASH</code>\n<code>AF_ATMPVC</code>\n<code>AF_ATMSVC</code>\n<code>AF_AX25</code>\n<code>AF_*</code> constants for use with <code>socket</code>, <code>socket_with</code>, and …\n<code>AF_BLUETOOTH</code>\n<code>AF_BRIDGE</code>\n<code>AF_CAN</code>\n<code>SOCK_CLOEXEC</code>\n<code>AF_DECnet</code>\n<code>SOCK_DGRAM</code>\n<code>AF_ECONET</code>\n<code>AF_IEEE802154</code>\n<code>AF_INET</code>\n<code>AF_INET6</code>\n<code>AF_IPX</code>\n<code>AF_IRDA</code>\n<code>AF_ISDN</code>\n<code>AF_IUCV</code>\n<code>AF_KEY</code>\n<code>AF_LLC</code>\n<code>AF_NETBEUI</code>\n<code>AF_NETLINK</code>\n<code>AF_NETROM</code>\n<code>SOCK_NONBLOCK</code>\n<code>AF_PACKET</code>\n<code>AF_PHONET</code>\n<code>AF_PPPOX</code>\n<code>IPPROTO_*</code> and other constants for use with <code>socket</code>, …\n<code>SOCK_RAW</code>\n<code>SOCK_RDM</code>\n<code>AF_RDS</code>\n<code>AF_ROSE</code>\n<code>AF_RXRPC</code>\nA type for holding raw integer address families.\nA type for holding raw integer protocols.\nA type for holding raw integer socket types.\n<code>SHUT_RD</code>—Disable further read operations.\n<code>SHUT_RDWR</code>—Disable further read and write operations.\n<code>AF_SECURITY</code>\n<code>SOCK_SEQPACKET</code>\n<code>AF_SNA</code>\n<code>SOCK_STREAM</code>\n<code>SHUT_*</code> constants for use with <code>shutdown</code>.\n<code>SOCK_*</code> constants for use with <code>socket_with</code>, <code>accept_with</code> and …\n<code>SOCK_*</code> constants for use with <code>socket</code>.\n<code>AF_TIPC</code>\nUNIX credentials of socket peer, for use with …\n<code>AF_UNIX</code>, aka <code>AF_LOCAL</code>\n<code>AF_UNSPEC</code>\n<code>AF_WANPIPE</code>\n<code>SHUT_WR</code>—Disable further write operations.\n<code>AF_X25</code>\n<code>AF_XDP</code>\nGet a flags value with all known bits set.\nReturns the raw integer for this <code>SocketType</code>.\nReturns the raw integer for this <code>AddressFamily</code>.\nReturns the raw integer for this <code>Protocol</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\n<code>ETH_P_*</code> constants.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nConstructs a <code>SocketType</code> from a raw integer.\nConstructs a <code>AddressFamily</code> from a raw integer.\nConstructs a <code>Protocol</code> from a raw integer.\nGroup ID of peer\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>IPPROTO_*</code> constants.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\n<code>NETLINK_*</code> constants.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nProcess ID of peer\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>SYSPROTO_*</code> constants.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nUser ID of peer\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>AF_XDP</code> related types and constants.\n<code>ETH_P_AARP</code>\n<code>ETH_P_AF_IUCV</code>\n<code>ETH_P_ALL</code>\n<code>ETH_P_AOE</code>\n<code>ETH_P_ARCNET</code>\n<code>ETH_P_ARP</code>\n<code>ETH_P_ATALK</code>\n<code>ETH_P_ATMFATE</code>\n<code>ETH_P_ATMMPOA</code>\n<code>ETH_P_AX25</code>\n<code>ETH_P_BATMAN</code>\n<code>ETH_P_BPQ</code>\n<code>ETH_P_CAIF</code>\n<code>ETH_P_CAN</code>\n<code>ETH_P_CANFD</code>\n<code>ETH_P_CANXL</code>\n<code>ETH_P_CFM</code>\n<code>ETH_P_CONTROL</code>\n<code>ETH_P_CUST</code>\n<code>ETH_P_DDCMP</code>\n<code>ETH_P_DEC</code>\n<code>ETH_P_DIAG</code>\n<code>ETH_P_DNA_DL</code>\n<code>ETH_P_DNA_RC</code>\n<code>ETH_P_DNA_RT</code>\n<code>ETH_P_DSA</code>\n<code>ETH_P_DSA_8021Q</code>\n<code>ETH_P_DSA_A5PSW</code>\n<code>ETH_P_ECONET</code>\n<code>ETH_P_EDSA</code>\n<code>ETH_P_ERSPAN</code>\n<code>ETH_P_ERSPAN2</code>\n<code>ETH_P_ETHERCAT</code>\n<code>ETH_P_FCOE</code>\n<code>ETH_P_FIP</code>\n<code>ETH_P_HDLC</code>\n<code>ETH_P_HSR</code>\n<code>ETH_P_IBOE</code>\n<code>ETH_P_IEEE802154</code>\n<code>ETH_P_IEEEPUP</code>\n<code>ETH_P_IEEEPUPAT</code>\n<code>ETH_P_IFE</code>\n<code>ETH_P_IP</code>\n<code>ETH_P_IPV6</code>\n<code>ETH_P_IPX</code>\n<code>ETH_P_IRDA</code>\n<code>ETH_P_LAT</code>\n<code>ETH_P_LINK_CTL</code>\n<code>ETH_P_LLDP</code>\n<code>ETH_P_LOCALTALK</code>\n<code>ETH_P_LOOP</code>\n<code>ETH_P_LOOPBACK</code>\n<code>ETH_P_MACSEC</code>\n<code>ETH_P_MAP</code>\n<code>ETH_P_MCTP</code>\n<code>ETH_P_MOBITEX</code>\n<code>ETH_P_MPLS_MC</code>\n<code>ETH_P_MPLS_UC</code>\n<code>ETH_P_MRP</code>\n<code>ETH_P_MVRP</code>\n<code>ETH_P_NCSI</code>\n<code>ETH_P_NSH</code>\n<code>ETH_P_PAE</code>\n<code>ETH_P_PAUSE</code>\n<code>ETH_P_PHONET</code>\n<code>ETH_P_PPPTALK</code>\n<code>ETH_P_PPP_DISC</code>\n<code>ETH_P_PPP_MP</code>\n<code>ETH_P_PPP_SES</code>\n<code>ETH_P_PREAUTH</code>\n<code>ETH_P_PROFINET</code>\n<code>ETH_P_PRP</code>\n<code>ETH_P_PUP</code>\n<code>ETH_P_PUPAT</code>\n<code>ETH_P_1588</code>\n<code>ETH_P_8021AD</code>\n<code>ETH_P_8021AH</code>\n<code>ETH_P_8021Q</code>\n<code>ETH_P_80221</code>\n<code>ETH_P_802_2</code>\n<code>ETH_P_802_3</code>\n<code>ETH_P_802_3_MIN</code>\n<code>ETH_P_802_EX1</code>\n<code>ETH_P_QINQ1</code>\n<code>ETH_P_QINQ2</code>\n<code>ETH_P_QINQ3</code>\n<code>ETH_P_RARP</code>\n<code>ETH_P_REALTEK</code>\n<code>ETH_P_SCA</code>\n<code>ETH_P_SLOW</code>\n<code>ETH_P_SNAP</code>\n<code>ETH_P_TDLS</code>\n<code>ETH_P_TEB</code>\n<code>ETH_P_TIPC</code>\n<code>ETH_P_TRAILER</code>\n<code>ETH_P_TR_802_2</code>\n<code>ETH_P_TSN</code>\n<code>ETH_P_WAN_PPP</code>\n<code>ETH_P_WCCP</code>\n<code>ETH_P_X25</code>\n<code>ETH_P_XDSA</code>\n<code>IPPROTO_AH</code>\n<code>IPPROTO_BEETPH</code>\n<code>IPPROTO_COMP</code>\n<code>IPPROTO_DCCP</code>\n<code>IPPROTO_EGP</code>\n<code>IPPROTO_ENCAP</code>\n<code>IPPROTO_ESP</code>\n<code>IPPROTO_ETHERNET</code>\n<code>IPPROTO_FRAGMENT</code>\n<code>IPPROTO_GRE</code>\n<code>IPPROTO_ICMP</code>\n<code>IPPROTO_ICMPV6</code>\n<code>IPPROTO_IDP</code>\n<code>IPPROTO_IGMP</code>\n<code>IPPROTO_IPIP</code>\n<code>IPPROTO_IPV6</code>\n<code>IPPROTO_MH</code>\n<code>IPPROTO_MPLS</code>\n<code>IPPROTO_MPTCP</code>\n<code>IPPROTO_MTP</code>\n<code>IPPROTO_PIM</code>\n<code>IPPROTO_PUP</code>\n<code>IPPROTO_RAW</code>\n<code>IPPROTO_ROUTING</code>\n<code>IPPROTO_RSVP</code>\n<code>IPPROTO_SCTP</code>\n<code>IPPROTO_TCP</code>\n<code>IPPROTO_TP</code>\n<code>IPPROTO_UDP</code>\n<code>IPPROTO_UDPLITE</code>\n<code>NETLINK_ADD_MEMBERSHIP</code>\n<code>NETLINK_AUDIT</code>\n<code>NETLINK_BROADCAST_ERROR</code>\n<code>NETLINK_CAP_ACK</code>\n<code>NETLINK_CONNECTOR</code>\n<code>NETLINK_CRYPTO</code>\n<code>NETLINK_DNRTMSG</code>\n<code>NETLINK_DROP_MEMBERSHIP</code>\n<code>NETLINK_ECRYPTFS</code>\n<code>NETLINK_EXT_ACK</code>\n<code>NETLINK_FIB_LOOKUP</code>\n<code>NETLINK_FIREWALL</code>\n<code>NETLINK_GENERIC</code>\n<code>NETLINK_GET_STRICT_CHK</code>\n<code>NETLINK_INET_DIAG</code>\n<code>NETLINK_IP6_FW</code>\n<code>NETLINK_ISCSI</code>\n<code>NETLINK_KOBJECT_UEVENT</code>\n<code>NETLINK_LISTEN_ALL_NSID</code>\n<code>NETLINK_LIST_MEMBERSHIPS</code>\n<code>NETLINK_NETFILTER</code>\n<code>NETLINK_NFLOG</code>\n<code>NETLINK_NO_ENOBUFS</code>\n<code>NETLINK_PKTINFO</code>\n<code>NETLINK_RDMA</code>\n<code>NETLINK_RX_RING</code>\n<code>NETLINK_SCSITRANSPORT</code>\n<code>NETLINK_SELINUX</code>\n<code>NETLINK_SOCK_DIAG</code>\n<code>NETLINK_TX_RING</code>\n<code>NETLINK_UNUSED</code>\n<code>NETLINK_USERSOCK</code>\n<code>NETLINK_XFRM</code>\n<code>XDP_*</code> constants for use in <code>SocketAddrXdp</code>.\nA XDP socket address.\n<code>XDP_COPY</code>\n<code>XDP_OPTIONS_ZEROCOPY</code>\nOffset for mmapping rx ring.\nOffset for mmapping tx ring.\n<code>XDP_PKT_CONTD</code>\n<code>XDP_RING_NEED_WAKEUP</code>\n<code>XDP_SHARED_UMEM</code>\nOffset for mmapping completion ring.\nOffset for mmapping fill ring.\n<code>XDP_UMEM_UNALIGNED_CHUNK_FLAG</code>\n<code>XDP_USE_NEED_WAKEUP</code>\n<code>XDP_USE_SG</code>\n<code>XDP_COPY</code>\nMask used to binary <code>and</code> the <code>XdpDesc</code> addr to extract the …\nOffset used to shift the <code>XdpDesc</code> addr to the right to …\nXDP rx/tx frame descriptor.\n<code>XDP_*</code> constants for use in <code>XdpDesc</code>.\nXDP mmap offsets.\nXDP options.\n<code>XDP_OPTIONS_*</code> constants returned by <code>get_xdp_options</code>.\n<code>XDP_RING_*</code> constants for use in fill and/or Tx ring.\nXDP ring offset.\nXDP statistics.\nXDP umem registration.\n<code>XDP_UMEM_*</code> constants for use in <code>XdpUmemReg</code>.\nStart address of UMEM.\nOffset from the start of the UMEM.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChunk size in bytes.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nConsumer offset.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCompletion ring offsets.\nDescriptors offset.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturn flags.\nFlags offset.\nFlags.\nFlags.\nFill ring offsets.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nHeadroom in bytes.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturn interface index.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nUmem length in bytes.\nLength of packet in bytes.\nConstruct a new XDP address.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOptions.\nProducer offset.\nReturn queue ID.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRx ring offsets.\nRx dropped.\nRx fill ring empty descriptors.\nRx invalid descriptors.\nRx ring full.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet flags.\nSet interface index.\nSet queue ID.\nSet shared UMEM file descriptor.\nReturn shared UMEM file descriptor.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nFlags.\nInterface index.\nQueue ID.\nShared UMEM file descriptor.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTx ring offsets.\nTx invalid descriptors.\nTx ring empty descriptors.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>XDP_*</code> constants for use in <code>SocketAddrXdp</code>.\nA XDP socket address.\nOffset for mmapping rx ring.\nOffset for mmapping tx ring.\nOffset for mmapping completion ring.\nOffset for mmapping fill ring.\nMask used to binary <code>and</code> the <code>XdpDesc</code> addr to extract the …\nOffset used to shift the <code>XdpDesc</code> addr to the right to …\nXDP rx/tx frame descriptor.\n<code>XDP_*</code> constants for use in <code>XdpDesc</code>.\nXDP mmap offsets.\nXDP options.\n<code>XDP_OPTIONS_*</code> constants returned by <code>get_xdp_options</code>.\n<code>XDP_RING_*</code> constants for use in fill and/or Tx ring.\nXDP ring offset.\nXDP statistics.\nXDP umem registration.\n<code>XDP_UMEM_*</code> constants for use in <code>XdpUmemReg</code>.\nStart address of UMEM.\nOffset from the start of the UMEM.\nChunk size in bytes.\nConsumer offset.\nCompletion ring offsets.\nDescriptors offset.\nFlags offset.\nFlags.\nFlags.\nFill ring offsets.\nHeadroom in bytes.\nUmem length in bytes.\nLength of packet in bytes.\nOptions.\nProducer offset.\nRx ring offsets.\nRx dropped.\nRx fill ring empty descriptors.\nRx invalid descriptors.\nRx ring full.\nFlags.\nInterface index.\nQueue ID.\nShared UMEM file descriptor.\nTx ring offsets.\nTx invalid descriptors.\nTx ring empty descriptors.\nA trait for passing path arguments.\nConvenient and efficient string argument passing.\nReturns a view of this string as a maybe-owned <code>CStr</code>.\nReturns a view of this string as a string slice.\nConsumes <code>self</code> and returns a view of this string as a …\nRuns a closure with <code>self</code> passed in as a <code>&amp;CStr</code>.\nRuns a closure on <code>arg</code> where <code>A</code> is mapped to a <code>&amp;CStr</code>\nReturns a potentially-lossy rendering of this string as a …\nA trait for passing path arguments.\nReturns a view of this string as a maybe-owned <code>CStr</code>.\nReturns a view of this string as a string slice.\nConsumes <code>self</code> and returns a view of this string as a …\nRuns a closure with <code>self</code> passed in as a <code>&amp;CStr</code>.\nRuns a closure on <code>arg</code> where <code>A</code> is mapped to a <code>&amp;CStr</code>\nReturns a potentially-lossy rendering of this string as a …\nRuns a closure with <code>bytes</code> passed in as a <code>&amp;CStr</code>.\nThe slow path which handles any length. In theory OS’s …\n<code>pid_t</code>—A non-zero Unix process ID.\nA process identifier as a raw integer.\nA buffer type for use with <code>vmsplice</code>.\n<code>PIPE_BUF</code>—The maximum length at which writes to a pipe …\n<code>O_*</code> constants for use with <code>pipe_with</code>.\n<code>SPLICE_F_*</code> constants for use with <code>splice</code>, <code>vmsplice</code>, and <code>tee</code>…\n<code>fnctl(fd, F_GETPIPE_SZ)</code>—Return the buffer capacity of a …\n<code>fnctl(fd, F_SETPIPE_SZ)</code>—Set the buffer capacity of a …\n<code>pipe()</code>—Creates a pipe.\n<code>pipe2(flags)</code>—Creates a pipe, with flags.\n<code>splice(fd_in, off_in, fd_out, off_out, len, flags)</code>…\n<code>tee(fd_in, fd_out, len, flags)</code>—Copy data between pipes …\n<code>vmsplice(fd, bufs, flags)</code>—Transfer data between memory …\n<code>PR_PAC_APDAKEY</code>—Data authentication key <code>A</code>.\n<code>PR_PAC_APDBKEY</code>—Data authentication key <code>B</code>.\n<code>PR_PAC_APGAKEY</code>—Generic authentication <code>A</code> key.\n<code>PR_PAC_APIAKEY</code>—Instruction authentication key <code>A</code>.\n<code>PR_PAC_APIBKEY</code>—Instruction authentication key <code>B</code>.\n<code>PR_PAC_AP*</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>SIGABRT</code>, aka <code>SIGIOT</code>\n<code>SIGALRM</code>\nWait on all processes.\nDisable <code>ptrace</code> restrictions for the calling process.\nSet the address below which the program command line is …\nSet the address above which the program command line is …\n<code>RLIMIT_AS</code>\nBig endian mode.\nSet the current <code>brk</code> value.\nSet the address above which the program heap can be …\n<code>SIGBUS</code>\n<code>SIGCHLD</code>\nSet the address below which the program text can run.\nSet the address above which the program text can run.\n<code>SIGCONT</code>\n<code>RLIMIT_CORE</code>\n<code>RLIMIT_CPU</code>\n<code>CpuSet</code> represents a bit-mask of CPUs.\nA Linux CPU ID.\n<code>RLIMIT_DATA</code>\nSet the address below which initialized and uninitialized …\nSet the address above which initialized and uninitialized …\nSystem-wide default policy.\nDumpable.\n<code>SUID_DUMP_*</code> values for use with <code>dumpable_behavior</code> and …\nDumpable but only readable by root.\n<code>EXIT_FAILURE</code> for use with <code>exit</code>.\nThe exit status used by a process terminated with a …\n<code>EXIT_SUCCESS</code> for use with <code>exit</code>.\nEarly kill policy.\n<code>PR_ENDIAN_*</code> values for use with <code>endian_mode</code>.\nSet the address below which the program environment is …\nSet the address above which the program environment is …\nEnable emulation of 32-bit floating-point mode.\n<code>PR_FPEMU_*</code> flags for use with …\nZero means floating point exceptions are disabled.\n<code>PR_FP_MODE_*</code> values for use with <code>floating_point_mode</code> and …\n64-bit floating point registers.\nFlush L1D Cache on context switch out of the task.\nRaw file descriptor in another process.\n<code>SIGFPE</code>\n<code>RLIMIT_FSIZE</code>\n<code>gid_t</code>—A Unix group ID.\n<code>MEMBARRIER_CMD_GLOBAL</code>\n<code>MEMBARRIER_CMD_GLOBAL_EXPEDITED</code>\n<code>SIGHUP</code>\nA <code>Pid</code> corresponding to the init process (pid 1).\n<code>SIGILL</code>\nSet the state of the indirect branch speculation …\n<code>SIGINT</code>\n<code>SIGIO</code>, aka <code>SIGPOLL</code>\n<code>SIGKILL</code>\nLate kill policy.\nTrue little endian mode.\n<code>RLIMIT_LOCKS</code>\n<code>PR_MCE_KILL_*</code> values for use with …\nA command for use with <code>membarrier</code> and <code>membarrier_cpu</code>.\nA result from <code>membarrier_query</code>.\n<code>RLIMIT_MEMLOCK</code>\n<code>RLIMIT_MSGQUEUE</code>\n<code>RLIMIT_NICE</code>\n<code>RLIMIT_NOFILE</code>\nNone.\nNot dumpable.\n<code>RLIMIT_NPROC</code>\nProcess ptracer.\nWait for a specific process group ID, or the calling …\n<code>pid_t</code>—A non-zero Unix process ID.\nWait for a specific process ID.\nWait for a specific process file descriptor.\n<code>PIDFD_*</code> flags for use with <code>pidfd_open</code>.\nAll flags are reserved for future use.\n<code>SIGPIPE</code>\n<code>SIGPWR</code>\n<code>PowerPC</code> pseudo little endian.\nThis structure provides new memory descriptor map which …\n<code>MEMBARRIER_CMD_PRIVATE_EXPEDITED</code>\n<code>MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ</code> (since Linux 5.10)\n<code>MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE</code>\nSpecific process.\n<code>SIGPROF</code>\n<code>SIGQUIT</code>\nThrow a <code>Signal::Segv</code> signal instead of reading the TSC.\nA group identifier as a raw integer.\nA process identifier as a raw integer.\nA user identifier as a raw integer.\nAllow the use of the timestamp counter.\n<code>MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED</code>\n<code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED</code>\n<code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ</code> (since …\n<code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE</code>\nA resource value for use with <code>getrlimit</code>, <code>setrlimit</code>, and …\n<code>struct rlimit</code>—Current and maximum values used in …\n<code>RLIMIT_RSS</code>\n<code>RLIMIT_RTPRIO</code>\n<code>RLIMIT_RTTIME</code>\n<code>SIGSEGV</code>\nA signal number for use with <code>kill_process</code>, …\n<code>RLIMIT_SIGPENDING</code>\n<code>PR_SPEC_*</code> values for use with <code>speculative_feature_state</code> and\n<code>PR_SPEC_*</code> flags for use with <code>control_speculative_feature</code>.\nZero means the processors are not vulnerable.\nSet the state of the speculative store bypass misfeature.\n<code>RLIMIT_STACK</code>\nSet the start address of the stack.\nNormal, traditional, statistical process timing.\n<code>SIGSTKFLT</code>\n<code>SIGSTOP</code>\n<code>SIGSYS</code>, aka <code>SIGUNUSED</code>\n<code>SIGTERM</code>\nAccurate timestamp based process timing.\n<code>PR_TSC_*</code> values for use with <code>time_stamp_counter_readability</code>…\n<code>PR_TIMING_*</code> values for use with <code>timing_method</code> and …\n<code>SIGTRAP</code>\n<code>SIGTSTP</code>\n<code>SIGTTIN</code>\n<code>SIGTTOU</code>\n<code>uid_t</code>—A Unix user ID.\n<code>PR_UNALIGN_*</code> flags for use with <code>unaligned_access_control</code> …\n<code>SIGURG</code>\n<code>SIGUSR1</code>\n<code>SIGUSR2</code>\n<code>PR_SET_MM_*</code> values for use with …\n<code>SIGVTALRM</code>\nThe identifier to wait on in a call to <code>waitid</code>.\nOptions for modifying the behavior of <code>wait</code>/<code>waitpid</code>.\nThe status of a child process after calling <code>wait</code>/<code>waitpid</code>.\nOptions for modifying the behavior of <code>waitid</code>.\nThe status of a process after calling <code>waitid</code>.\n<code>SIGWINCH</code>\n<code>SIGXCPU</code>\n<code>SIGXFSZ</code>\nProgram command line end address.\nProgram command line start address.\nConverts an <code>Option&lt;Pid&gt;</code> into a <code>RawPid</code>.\nConverts a <code>Pid</code> into a <code>NonZeroI32</code>.\nAuxiliary vector start address.\nAuxiliary vector size.\n<code>brk</code> current address.\n<code>chdir(path)</code>—Change the current working directory.\nGet the <code>child subreaper</code> setting of the calling process.\n<code>chroot(path)</code>—Change the process root directory.\nPut the process in the <code>IO_FLUSHER</code> state, allowing it to …\nEnable or disable all performance counters attached to the …\nSet enabled pointer authentication keys.\nProvides one-shot access to all the addresses by passing …\nSets the state of the speculation misfeature.\nCurrent effective, “soft”, limit.\nGet the current state of the calling process’ <code>dumpable</code> …\nGet enabled pointer authentication keys.\nCode section end address.\nData section end address.\nGet the endianness of the calling process.\nProgram environment end address.\nProgram environment start address.\nFile descriptor of executable file that was used to create …\n<code>fchdir(fd)</code>—Change the current working directory.\nGet floating point emulation control bits.\nGet floating point exception mode.\nGet the current floating point mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Pid</code> holding the ID of the given child process.\nConverts a <code>RawPid</code> into a <code>Pid</code>.\nConvert a raw signal number into a <code>Signal</code>, if possible.\nConverts a known positive <code>RawPid</code> into a <code>Pid</code>.\n<code>getCWD</code>—Return the current working directory.\n<code>getegid()</code>—Returns the process’ effective group ID.\n<code>geteuid()</code>—Returns the process’ effective user ID.\n<code>getgid()</code>—Returns the process’ real group ID.\n<code>getgroups()</code>—Return a list of the current user’s groups.\n<code>getpgid(pid)</code>—Returns the process group ID of the given …\n<code>getpgrp()</code>—Returns the process’ group ID.\n<code>getpid()</code>—Returns the process’ ID.\n<code>getppid()</code>—Returns the parent process’ ID.\n<code>getpriority(PRIO_PGRP, gid)</code>—Get the scheduling priority …\n<code>getpriority(PRIO_PROCESS, pid)</code>—Get the scheduling …\n<code>getpriority(PRIO_USER, uid)</code>—Get the scheduling priority …\n<code>getrlimit(resource)</code>—Get a process resource limit value.\n<code>getsid(pid)</code>—Get the session ID of the given process.\n<code>getuid()</code>—Returns the process’ real user ID.\nUnix user, group, and process identifiers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProcess-oriented <code>ioctl</code>s.\n<code>ioctl(fd, TIOCSCTTY, 0)</code>—Sets the controlling terminal …\nTest whether this pid represents the init process (pid 1).\nGet the <code>IO_FLUSHER</code> state of the caller.\n<code>kill(0, sig)</code>—Sends a signal to all processes in the …\n<code>kill(pid, sig)</code>—Sends a signal to a process.\n<code>kill(-pid, sig)</code>—Sends a signal to all processes in a …\nGet the current per-process machine check kill policy.\nMaximum, “hard”, value that <code>current</code> may be dynamically …\nThe Linux <code>membarrier</code> syscall.\n<code>membarrier(cmd, 0, 0)</code>—Perform a memory barrier.\n<code>membarrier(cmd, MEMBARRIER_CMD_FLAG_CPU, cpu)</code>—Perform a …\n<code>membarrier(MEMBARRIER_CMD_QUERY, 0, 0)</code>—Query the …\n<code>nice(inc)</code>—Adjust the scheduling priority of the current …\nGet the current value of the parent process death signal.\nThe <code>pidfd_getfd</code> function and supporting types.\n<code>syscall(SYS_pidfd_getfd, pidfd, flags)</code>—Obtain a …\n<code>syscall(SYS_pidfd_open, pid, flags)</code>—Creates a file …\n<code>syscall(SYS_pidfd_send_signal, pidfd, sig, NULL, 0)</code>—Send …\n<code>pivot_root(new_root, put_old)</code>—Change the root mount.\nBindings for the Linux <code>prctl</code> system call.\n<code>prlimit(pid, resource, new)</code>—Get and set a process …\n<code>sched_getaffinity(pid)</code>—Get a thread’s CPU affinity …\n<code>sched_getcpu()</code>—Get the CPU that the current thread is …\n<code>sched_setaffinity(pid, cpuset)</code>—Set a thread’s CPU …\n<code>sched_yield()</code>—Hints to the OS that other processes …\nSet a new auxiliary vector.\nSet the <code>child subreaper</code> attribute of the calling process.\nSet the state of the <code>dumpable</code> attribute.\nSet the endianness of the calling process.\nSupersede the <code>/proc/pid/exe</code> symbolic link with a new one …\nSet floating point emulation control bits.\nSet floating point exception mode.\nAllow control of the floating point mode from user space.\nSet the machine check memory corruption kill policy for …\nSet the parent-death signal of the calling process.\nDeclare that the ptracer process can <code>ptrace</code> the calling …\nSet the state of the flag determining if the timestamp …\nSet whether to use (normal, traditional) statistical …\nSet unaligned access control bits.\nModify certain kernel memory map descriptor addresses of …\nSet the name for a virtual memory region.\n<code>setpgid(pid, pgid)</code>—Sets the process group ID of the …\n<code>setpriority(PRIO_PGRP, pgid)</code>—Get the scheduling priority …\n<code>setpriority(PRIO_PROCESS, pid)</code>—Get the scheduling …\n<code>setpriority(PRIO_USER, uid)</code>—Get the scheduling priority …\n<code>setrlimit(resource, new)</code>—Set a process resource limit …\n<code>setsid()</code>—Create a new session.\nGet the state of the speculation misfeature.\n<code>brk</code> start address.\nCode section start address.\nData section start address.\nStack start address.\n<code>kill(0, 0)</code>—Check validity of pid and permissions to send …\n<code>kill(pid, 0)</code>—Check validity of pid and permissions to …\n<code>kill(-pid, 0)</code>—Check validity of pid and permissions to …\nGet the state of the flag determining if the timestamp …\nGet which process timing method is currently in use.\nUmask support.\n<code>umask(mask)</code>—Set the process file creation mask.\nGet unaligned access control bits.\nGet the size of the <code>PrctlMmMap</code> the kernel expects.\n<code>wait(waitopts)</code>—Wait for any of the children of calling …\n<code>waitid(_, _, _, opts)</code>—Wait for the specified child …\n<code>waitpid(-pgid, waitopts)</code>—Wait for a process in a …\n<code>waitpid(pid, waitopts)</code>—Wait for a specific process to …\n<code>chdir(path)</code>—Change the current working directory.\n<code>fchdir(fd)</code>—Change the current working directory.\n<code>getCWD</code>—Return the current working directory.\n<code>chroot(path)</code>—Change the process root directory.\n<code>EXIT_FAILURE</code> for use with <code>exit</code>.\nThe exit status used by a process terminated with a …\n<code>EXIT_SUCCESS</code> for use with <code>exit</code>.\nA Linux CPU ID.\nConverts a <code>Cpuid</code> into a <code>RawCpuid</code>.\nReturns the argument unchanged.\nConverts a <code>RawCpuid</code> into a <code>Cpuid</code>.\n<code>getegid()</code>—Returns the process’ effective group ID.\n<code>geteuid()</code>—Returns the process’ effective user ID.\n<code>getgid()</code>—Returns the process’ real group ID.\n<code>getgroups()</code>—Return a list of the current user’s groups.\n<code>getpgid(pid)</code>—Returns the process group ID of the given …\n<code>getpgrp()</code>—Returns the process’ group ID.\n<code>getpid()</code>—Returns the process’ ID.\n<code>getppid()</code>—Returns the parent process’ ID.\n<code>getsid(pid)</code>—Get the session ID of the given process.\n<code>getuid()</code>—Returns the process’ real user ID.\nCalls <code>U::from(self)</code>.\n<code>setpgid(pid, pgid)</code>—Sets the process group ID of the …\n<code>setsid()</code>—Create a new session.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ioctl(fd, TIOCSCTTY, 0)</code>—Sets the controlling terminal …\n<code>kill(0, sig)</code>—Sends a signal to all processes in the …\n<code>kill(pid, sig)</code>—Sends a signal to a process.\n<code>kill(-pid, sig)</code>—Sends a signal to all processes in a …\n<code>kill(0, 0)</code>—Check validity of pid and permissions to send …\n<code>kill(pid, 0)</code>—Check validity of pid and permissions to …\n<code>kill(-pid, 0)</code>—Check validity of pid and permissions to …\n<code>MEMBARRIER_CMD_GLOBAL</code> (also known as <code>MEMBARRIER_CMD_SHARED</code>)\n<code>MEMBARRIER_CMD_GLOBAL_EXPEDITED</code>\nA result from <code>membarrier_query</code>.\n<code>MEMBARRIER_CMD_PRIVATE_EXPEDITED</code>\n<code>MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ</code> (since Linux 5.10)\n<code>MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE</code>\n<code>MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED</code>\n<code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED</code>\n<code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ</code> (since …\n<code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE</code>\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nTest whether this query result contains the given command.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\n<code>membarrier(cmd, 0, 0)</code>—Perform a memory barrier.\n<code>membarrier(cmd, MEMBARRIER_CMD_FLAG_CPU, cpu)</code>—Perform a …\n<code>membarrier(MEMBARRIER_CMD_QUERY, 0, 0)</code>—Query the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>PIDFD_NONBLOCK</code>.\n<code>PIDFD_*</code> flags for use with <code>pidfd_open</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n<code>syscall(SYS_pidfd_open, pid, flags)</code>—Creates a file …\n<code>syscall(SYS_pidfd_send_signal, pidfd, sig, NULL, 0)</code>—Send …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRaw file descriptor in another process.\nAll flags are reserved for future use.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n<code>syscall(SYS_pidfd_getfd, pidfd, flags)</code>—Obtain a …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>pivot_root(new_root, put_old)</code>—Change the root mount.\nAsync recoverable exception mode.\nDisable <code>ptrace</code> restrictions for the calling process.\nSet the address below which the program command line is …\nSet the address above which the program command line is …\nBig endian mode.\nSet the current <code>brk</code> value.\nSet the address above which the program heap can be …\nSet the address below which the program text can run.\nSet the address above which the program text can run.\nThe speculation feature is disabled, mitigation is enabled.\nThe speculation feature is disabled, mitigation is enabled.\nThe speculation feature is disabled, mitigation is …\nThe speculation feature is disabled, mitigation is …\nFloating point divide by zero.\nSet the address below which initialized and uninitialized …\nSet the address above which initialized and uninitialized …\nSystem-wide default policy.\nDumpable.\n<code>SUID_DUMP_*</code> values for use with <code>dumpable_behavior</code> and …\nDumpable but only readable by root.\nThe speculation feature is enabled, mitigation is disabled.\nThe speculation feature is enabled, mitigation is disabled.\nEarly kill policy.\n<code>PR_ENDIAN_*</code> values for use with <code>endian_mode</code>.\nSet the address below which the program environment is …\nSet the address above which the program environment is …\nThe speculation feature is disabled, mitigation is …\nThe speculation feature is disabled, mitigation is …\nEnable emulation of 32-bit floating-point mode.\n<code>PR_FPEMU_*</code> flags for use with …\nZero means floating point exceptions are disabled.\n<code>PR_FP_MODE_*</code> values for use with <code>floating_point_mode</code> and …\n64-bit floating point registers.\nFlush L1D Cache on context switch out of the task.\nFloating point invalid operation.\nSet the state of the indirect branch speculation …\nLate kill policy.\nTrue little endian mode.\n<code>PR_MCE_KILL_*</code> values for use with …\nAsync non-recoverable exception mode.\nSilently fix up unaligned user accesses.\nSilently emulate floating point operations accesses.\nNone.\nNot dumpable.\nFloating point overflow.\nMitigation can be controlled per thread by …\nPrecise exception mode.\nProcess ptracer.\n<code>PowerPC</code> pseudo little endian.\nThis structure provides new memory descriptor map which …\nSpecific process.\nFloating point inexact result.\nThrow a <code>Signal::Segv</code> signal instead of reading the TSC.\nAllow the use of the timestamp counter.\nGenerate a <code>Signal::Bus</code> signal on unaligned user access.\nDon’t emulate floating point operations, send a …\nUse FPEXC for floating point exception enables.\n<code>PR_SPEC_*</code> values for use with <code>speculative_feature_state</code> and\n<code>PR_SPEC_*</code> flags for use with <code>control_speculative_feature</code>.\nZero means the processors are not vulnerable.\nSet the state of the speculative store bypass misfeature.\nSet the start address of the stack.\nNormal, traditional, statistical process timing.\nAccurate timestamp based process timing.\n<code>PR_TSC_*</code> values for use with <code>time_stamp_counter_readability</code>…\n<code>PR_TIMING_*</code> values for use with <code>timing_method</code> and …\nFloating point underflow.\n<code>PR_UNALIGN_*</code> flags for use with <code>unaligned_access_control</code> …\n<code>PR_SET_MM_*</code> values for use with …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nProgram command line end address.\nProgram command line start address.\nAuxiliary vector start address.\nAuxiliary vector size.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>brk</code> current address.\nGet the <code>child subreaper</code> setting of the calling process.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPut the process in the <code>IO_FLUSHER</code> state, allowing it to …\nEnable or disable all performance counters attached to the …\nSet enabled pointer authentication keys.\nProvides one-shot access to all the addresses by passing …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nSets the state of the speculation misfeature.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet the current state of the calling process’ <code>dumpable</code> …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet enabled pointer authentication keys.\nCode section end address.\nData section end address.\nGet the endianness of the calling process.\nProgram environment end address.\nProgram environment start address.\nFile descriptor of executable file that was used to create …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet floating point emulation control bits.\nGet floating point exception mode.\nGet the current floating point mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nGet the <code>IO_FLUSHER</code> state of the caller.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nGet the current per-process machine check kill policy.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGet the current value of the parent process death signal.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet a new auxiliary vector.\nSet the <code>child subreaper</code> attribute of the calling process.\nSet the state of the <code>dumpable</code> attribute.\nSet the endianness of the calling process.\nSupersede the <code>/proc/pid/exe</code> symbolic link with a new one …\nSet floating point emulation control bits.\nSet floating point exception mode.\nAllow control of the floating point mode from user space.\nSet the machine check memory corruption kill policy for …\nSet the parent-death signal of the calling process.\nDeclare that the ptracer process can <code>ptrace</code> the calling …\nSet the state of the flag determining if the timestamp …\nSet whether to use (normal, traditional) statistical …\nSet unaligned access control bits.\nModify certain kernel memory map descriptor addresses of …\nSet the name for a virtual memory region.\nGet the state of the speculation misfeature.\n<code>brk</code> start address.\nCode section start address.\nData section start address.\nStack start address.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the state of the flag determining if the timestamp …\nGet which process timing method is currently in use.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet unaligned access control bits.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the size of the <code>PrctlMmMap</code> the kernel expects.\n<code>getpriority(PRIO_PGRP, gid)</code>—Get the scheduling priority …\n<code>getpriority(PRIO_PROCESS, pid)</code>—Get the scheduling …\n<code>getpriority(PRIO_USER, uid)</code>—Get the scheduling priority …\n<code>nice(inc)</code>—Adjust the scheduling priority of the current …\n<code>setpriority(PRIO_PGRP, pgid)</code>—Get the scheduling priority …\n<code>setpriority(PRIO_PROCESS, pid)</code>—Get the scheduling …\n<code>setpriority(PRIO_USER, uid)</code>—Get the scheduling priority …\n<code>struct rlimit</code>—Current and maximum values used in …\nCurrent effective, “soft”, limit.\nReturns the argument unchanged.\n<code>getrlimit(resource)</code>—Get a process resource limit value.\nCalls <code>U::from(self)</code>.\nMaximum, “hard”, value that <code>current</code> may be dynamically …\n<code>prlimit(pid, resource, new)</code>—Get and set a process …\n<code>setrlimit(resource, new)</code>—Set a process resource limit …\n<code>CpuSet</code> represents a bit-mask of CPUs.\nThe maximum number of CPU in <code>CpuSet</code>.\nZeroes the <code>CpuSet</code>.\nCount the number of CPUs set in the <code>CpuSet</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTest to see if a CPU is in the <code>CpuSet</code>.\nCreate a new and empty <code>CpuSet</code>.\n<code>sched_getaffinity(pid)</code>—Get a thread’s CPU affinity …\n<code>sched_getcpu()</code>—Get the CPU that the current thread is …\n<code>sched_setaffinity(pid, cpuset)</code>—Set a thread’s CPU …\nAdd a CPU to <code>CpuSet</code>.\nRemove a CPU from <code>CpuSet</code>.\n<code>sched_yield()</code>—Hints to the OS that other processes …\n<code>umask(mask)</code>—Set the process file creation mask.\nWait on all processes.\nReturn if a stopped child has been resumed by delivery of …\nReturn if a stopped child has been resumed by delivery of …\nWait for processed that have exited.\nReturn immediately if no child has exited.\nReturn immediately if no child has exited.\nKeep processed in a waitable state.\nWait for a specific process group ID, or the calling …\nWait for a specific process ID.\nWait for a specific process file descriptor.\nWait for processes that have been stopped.\nReturn if a child has stopped (but not traced via <code>ptrace</code>).\nThe identifier to wait on in a call to <code>waitid</code>.\nOptions for modifying the behavior of <code>wait</code>/<code>waitpid</code>.\nThe status of a child process after calling <code>wait</code>/<code>waitpid</code>.\nOptions for modifying the behavior of <code>waitid</code>.\nThe status of a process after calling <code>waitid</code>.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nConverts a <code>WaitStatus</code> into its raw representation as an …\nReturns a reference to the raw platform-specific <code>siginfo_t</code> …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns whether the process has continued from a job …\nReturns whether the process has continued from a job …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns whether the process was terminated by a signal and …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nReturns the exit status number returned by the process, if …\nReturns the exit status number returned by the process, if …\nReturns whether the process has exited normally.\nReturns whether the process has exited normally.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReturns whether the process was terminated by a signal and …\nCreates a <code>WaitStatus</code> out of an integer.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nReturns whether the process was terminated by a signal.\nReturns whether the process is currently stopped.\nReturns whether the process is currently stopped.\nReturns the number of the signal that stopped the process, …\nReturns the number of the signal that stopped the process, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the number of the signal that terminated the …\nReturns the number of the signal that terminated the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns whether the process is currently trapped.\nReturns the number of the signal that trapped the process, …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>wait(waitopts)</code>—Wait for any of the children of calling …\n<code>waitid(_, _, _, opts)</code>—Wait for the specified child …\n<code>waitpid(-pgid, waitopts)</code>—Wait for a process in a …\n<code>waitpid(pid, waitopts)</code>—Wait for a specific process to …\n<code>S_I*</code> constants for use with <code>openat</code>, <code>chmodat</code>, and <code>fchmod</code>.\n<code>O_*</code> constants for use with <code>shm::open</code>.\n<code>shm_open(name, oflags, mode)</code>—Opens a shared memory …\n<code>shm_unlink(name)</code>—Unlinks a shared memory object.\n<code>SIGABRT</code>, aka <code>SIGIOT</code>\n<code>SIGALRM</code>\n<code>SIGBUS</code>\n<code>SIGCHLD</code>\n<code>SIGCONT</code>\n<code>SIGFPE</code>\n<code>SIGHUP</code>\n<code>SIGILL</code>\n<code>SIGINT</code>\n<code>SIGIO</code>, aka <code>SIGPOLL</code>\n<code>SIGKILL</code>\n<code>SIGPIPE</code>\n<code>SIGPWR</code>\n<code>SIGPROF</code>\n<code>SIGQUIT</code>\n<code>SIGSEGV</code>\nA signal number for use with <code>kill_process</code>, …\n<code>SIGSTKFLT</code>\n<code>SIGSTOP</code>\n<code>SIGSYS</code>, aka <code>SIGUNUSED</code>\n<code>SIGTERM</code>\n<code>SIGTRAP</code>\n<code>SIGTSTP</code>\n<code>SIGTTIN</code>\n<code>SIGTTOU</code>\n<code>SIGURG</code>\n<code>SIGUSR1</code>\n<code>SIGUSR2</code>\n<code>SIGVTALRM</code>\n<code>SIGWINCH</code>\n<code>SIGXCPU</code>\n<code>SIGXFSZ</code>\nDisables the Ctrl-Alt-Del keystroke.\nEnables the Ctrl-Alt-Del keystroke.\nPrints the message “System halted” and halts the system\nExecute a kernel that has been loaded earlier with …\nPrints the message “Power down.”, stops the system, …\nReboot command for use with <code>reboot</code>.\nPrints the message “Restarting system.” and triggers a …\nHibernate the system by suspending to disk\n<code>sysinfo</code>\n<code>struct utsname</code>—Return type for <code>uname</code>.\n<code>delete_module</code>—Unload a kernel module.\n<code>domainname</code>—NIS or YP domain identifier\n<code>finit_module</code>—Load a kernel module from a file descriptor.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>init_module</code>—Load a kernel module.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>machine</code>—Hardware architecture identifier\n<code>nodename</code>—Name with vague meaning\n<code>reboot</code>—Reboot the system or enable/disable Ctrl-Alt-Del.\n<code>release</code>—Operating system release version string\n<code>sethostname(name)</code>—Sets the system host name.\n<code>sysinfo()</code>—Returns status information about the runtime …\n<code>sysname</code>—Operating system release name\n<code>uname()</code>—Returns high-level information about the runtime …\n<code>version</code>—Operating system build identifiers\nSystem calls are allowed to execute.\nAllow configuration of audit via unicast netlink socket.\nAllow reading the audit log via multicast netlink socket.\nAllow writing the audit log via unicast netlink socket.\nThis capability allows the following BPF operations:\nSystem calls are blocked from executing.\nAllow preventing system suspends.\n<code>CLOCK_BOOTTIME</code>\n<code>CLOCK_BOOTTIME_ALARM</code>\n<code>SECBIT_*</code>.\nLinux per-thread capability.\n<code>CAP_*</code> constants.\n<code>__user_cap_data_struct</code>\nIn a system with the <code>_POSIX_CHOWN_RESTRICTED</code> option …\nAllow checkpoint/restore related operations. Allow PID …\n<code>CLOCK_*</code> constants for use with <code>clock_gettime</code>.\n<code>FUTEX_CMP_REQUEUE</code>\nControl group (CGroup) name space.\n<code>PR_SCHED_CORE_SCOPE_*</code>.\nOverride all DAC access, including ACL execute access if …\nOverrides all DAC restrictions regarding read and search …\nSecure computing is not in use.\nAn invalid time value was provided.\n<code>FUTEX_FD</code>\nOverrides all restrictions about allowed operations on …\nOverrides the following restrictions that the effective …\nUse user-supplied filter.\n<code>FUTEX_*</code> operations for use with the <code>futex</code> function.\n<code>gid_t</code>—A Unix group ID.\n<code>Host name</code> and <code>NIS domain name</code> (UTS) name space.\nAllow locking of shared memory segments. Allow mlock and …\nOverride IPC ownership checks.\nInter-process communication (IPC) name space.\nThe sleep was interrupted, the remaining time is returned.\nOverrides the restriction that the real or effective user …\nAllow taking of leases on files.\nType of name space referred to by a link.\nAllow modification of <code>S_IMMUTABLE</code> and <code>S_APPEND</code> file …\n<code>FUTEX_LOCK_PI</code>\nAllow MAC configuration or state changes. The base kernel …\nOverride MAC access. The base kernel enforces no MAC …\nAllow the privileged aspects of <code>mknod</code>.\n<code>CLOCK_MONOTONIC</code>\n<code>CLOCK_MONOTONIC_COARSE</code>\n<code>CLOCK_MONOTONIC_RAW</code>\nMount name space.\nA return type for <code>nanosleep</code> and <code>clock_nanosleep_relative</code>.\nAllow interface configuration. Allow administration of IP …\nAllows binding to TCP/UDP sockets below 1024. Allows …\nAllow broadcasting, listen to multicast.\nAllow use of <code>RAW</code> sockets. Allow use of <code>PACKET</code> sockets. …\nNetwork name space.\nThe sleep completed normally.\nAllow system performance and observability privileged …\n<code>pid_t</code>—A non-zero Unix process ID.\n<code>CLOCK_PROCESS_CPUTIME_ID</code>\nOperation will be performed for all processes in the …\nProcess ID name space.\nA group identifier as a raw integer.\nA process identifier as a raw integer.\nA user identifier as a raw integer.\n<code>CLOCK_REALTIME</code>\n<code>CLOCK_REALTIME_ALARM</code>\n<code>CLOCK_REALTIME_COARSE</code>")