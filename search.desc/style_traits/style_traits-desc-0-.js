searchState.loadedDescShard("style_traits", 0, "This module contains shared types and messages for use by …\nIn SVG; out-of-range values are not treated as an error in …\nIn SVG; a coordinate or length value without a unit …\nA bad string token in a DVB.\nA bad URL token in a DVB.\nOne CSS “px” in the coordinate system of the “…\nIn CSS; lengths must have units, except for zero values, …\nIn CSS Properties and Values, the initial value must be …\nGeometry in the coordinate system of the render target …\n@import rules are disallowed in the parser.\nThe string’s length was 0.\nA non-whitespace, non-pipe character was fount after …\nThe property declaration was for a disabled experimental …\nThe property declaration contained an invalid color value.\nAn invalid token was encountered while parsing a color …\nThe property declaration contained an invalid filter value.\nAn invalid filter value was encountered.\nThe name is not a valid <code>&lt;ident&gt;</code>.\nThe start of an identifier was expected but not found.\nMissing or invalid media feature name.\nMissing or invalid media feature value.\nA media feature range operator was not expected.\nThe property declaration contained an invalid value.\nThe error type for all CSS parsing routines.\nThe mode to use when parsing values.\nRepresents a mobile style pinch zoom factor. TODO(gw): …\nA property declaration value had input remaining after …\nError encountered parsing a @property’s <code>syntax</code> descriptor\nErrors that can be encountered while parsing the @property …\nmin- or max- properties must have a value.\nAn error was encountered while parsing a selector\nSpeculatively execute paint code in the worklet thread …\nErrors that can be encountered while parsing CSS values.\nUnexpected closing curly bracket in a DVB.\nUnexpected closing parenthesis in a DVB.\nUnexpected closing bracket in a DVB.\nThe data type name was not closed.\nUnexpected @charset rule encountered.\nAn unexpected dimension token was encountered.\nThe next byte was expected while parsing, but EOF was …\nA function was encountered that was not expected.\nThe @property <code>&lt;custom-property-name&gt;</code> must start with <code>--</code>\n@import must be before any rule but @charset\n<code>!important</code> declarations are disallowed in <code>@position-try</code> or …\n@namespace must be before any rule but @charset and @import\nAn unexpected token was found within a namespace rule.\nThe data type is not a supported syntax component name.\nThe property declaration was for an unknown property.\nA placeholder for many sources of errors that require more …\nAn error was encountered while parsing a property value.\nError in property value parsing\nSpecific errors that can be encountered while parsing …\nGet a flags value with all known bits set.\nWhether the parsing mode allows all numeric values.\nWhether the parsing mode allows font-relative units.\nWhether the parsing mode allows unitless lengths for …\nA thin atomically-reference-counted slice.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nTypes used to access the DOM from style calculation.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet the pinch zoom factor as an untyped float.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nDetails of this error\nDetails of this error\nLocation where this error occurred\nLocation where this error occurred\nConstruct a new pinch zoom factor.\nCreate an InvalidValue parse error\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nA replacement for <code>Box&lt;[T]&gt;</code> that cbindgen can understand.\nA replacement for <code>Box&lt;str&gt;</code> that has a defined layout for …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nValue information for devtools.\n…\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nHelper types and traits for the handling of CSS values.\nA canary that we stash in ArcSlices.\nA wrapper type for a refcounted slice using ThinArc.\nThe inner pointer of an ArcSlice, to be sent via FFI. The …\nCreates a value that can be passed via FFI, and forgets …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an Arc for a slice using the given iterator to …\nCreates an Arc for a slice using the given iterator to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there’s only one reference to this …\nLeaks an empty arc slice pointer, and returns it. Only to …\nAn opaque handle to a node, which, unlike UnsafeNode, …\nReturns the argument unchanged.\nReturns the address of this node, for debugging purposes.\nCalls <code>U::from(self)</code>.\nA struct that basically replaces a <code>Box&lt;[T]&gt;</code>, but which …\nReturns the argument unchanged.\nConvert the regular slice into an owned slice.\nCalls <code>U::from(self)</code>.\nConvert the OwnedSlice into a boxed slice.\nConvert the OwnedSlice into a Vec.\nA struct that basically replaces a Box, but with a defined …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert the OwnedStr into a boxed str.\nConvert the OwnedStr into a <code>String</code>.\nType of value that a property supports. This is used by …\nSee SpecifiedValueInfo::collect_completion_keywords.\nSupported CssTypes by the given value type.\nInformation of values of a given specified value type.\nCollect value starting words for the given specified value …\nType used as the associated type in the <code>OneOrMoreSeparated</code> …\nType used as the associated type in the <code>OneOrMoreSeparated</code> …\nA writer tailored for serialising CSS.\nMarker trait on T to automatically implement ToCss for Vec …\nAssociated type indicating which separator is used.\nA trait satisfied by the types corresponding to separators.\nConvenience wrapper to serialise CSS values separated by a …\nType used as the associated type in the <code>OneOrMoreSeparated</code> …\nSerialises a value according to its CSS representation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialises a CSS value, writing any separator as necessary.\nCreates a new <code>CssWriter</code>.\nCreate a new sequence writer.\nParses a sequence of values separated by this separator.\nWrites a string as-is (i.e. not escaped or wrapped in …\nThe separator string that the satisfying separator type …\nHelper types for the handling of specified values.\nSerialize <code>self</code> in CSS syntax, writing to <code>dest</code>.\nSerialize <code>self</code> in CSS syntax and return a string.\nSerialize the CSS Value with the specific serialization …\nAllow all kind of numeric values.\nWhether to allow negative lengths or not.\nAllow only numeric values greater or equal to 1.0.\nAllow only non-negative numeric values.\nAllow only numeric values from 0 to 1.0.\nClamp the value following the rules of this numeric type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether the value fits the rules of this numeric type.")