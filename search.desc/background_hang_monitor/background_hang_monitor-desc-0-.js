searchState.loadedDescShard("background_hang_monitor", 0, "A wrapper around a sender to the monitor, which will send …\nMessages sent from monitored components to the monitor.\nStable equivalent to the <code>!</code> type\nNotify start of new activity for a given component,\nNotify start of waiting for a new task to come-in for …\nRegister component for monitoring,\nWraps <code>BackgroundHangMonitorExitSignal</code> and calls …\nUnregister component for monitoring.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart a new hang monitor worker, and return a handle to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister a component for monitoring. Returns a dedicated …\nDisassociate <code>BackgroundHangMonitorExitSignal</code> from itself, …\nCall <code>BackgroundHangMonitorExitSignal::signal_to_exit</code> now.\nThe registers used for stack unwinding\nFrame pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstruction pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStack pointer.\nDestroys the semaphore.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetries the wait if it returned due to EINTR. Returns Ok …")