searchState.loadedDescShard("zerovec_derive", 0, "Proc macros for generating <code>ULE</code>, <code>VarULE</code> impls and types for …\nFull docs for this proc macro can be found on the <code>zerovec</code> …\nFull docs for this proc macro can be found on the <code>zerovec</code> …\nFull docs for this proc macro can be found on the <code>zerovec</code> …\nFull docs for this proc macro can be found on the <code>zerovec</code> …\nCustom VarULE type, and the identifier corresponding to …\nRepresents a VarULE-compatible type that would typically …\n[T] where T: AsULE&lt;ULE = Self&gt;\nstr\nRepresents the type of the last field of the struct\nCall …\nReturns (encodeable_ty, encodeable)\nReturns the EncodeAsVarULE type this can be represented …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a UnsizedFieldKind for the type of a …\nConstructs ZeroFrom setters for each field of the stack …\nGet the tokens for the corresponding VarULE type\nGet the tokens for the corresponding VarULE type\nIn case this needs custom validation code, return it\nGiven an slice over ULE struct fields, returns code …\nMake corresponding ULE fields for each field\nRemoves all known zerovec:: attributes from struct attrs …\nExtract attributes from field, and return them\nExtracts all <code>zerovec::name(..)</code> attribute\nRemoves all attributes with <code>zerovec</code> in the name and places …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven an iterator over ULE or AsULE struct fields, returns …\nProduce a name for a getter for the field\nProduce a prose name for the field for use in docs\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the repr attribute to be applied to the resultant …\nReturn a semicolon token if necessary after the struct …\nGet the code for setting this field in struct decl/brace …\nGiven a set of entries for struct field definitions to go …\nImplementation for derive(VarULE). <code>custom_varule_validator</code> …")