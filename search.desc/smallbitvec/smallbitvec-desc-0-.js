searchState.loadedDescShard("smallbitvec", 0, "<code>SmallBitVec</code> is a bit vector, a vector of single-bit values …\nIf the rightmost bit of <code>data</code> is set, then the remaining …\nData stored at the start of the heap allocation.\nThe internal representation of a <code>SmallBitVec</code> that has not …\nA typed representation of a <code>SmallBitVec</code>’s internal …\nAn iterator that owns a SmallBitVec and yields its bits as …\nAn iterator that borrows a SmallBitVec and yields its bits …\nA resizable bit vector, optimized for size and inline …\nThe contents of the heap allocation of a spilled …\nThe allocation will contain a <code>Header</code> followed by a Storage …\nAn immutable view of a range of bits from a borrowed …\nReturns true if all the bits in the vec are set to …\nReturns true if all the bits in the vec are set to …\nThe number of bits in one <code>Storage</code>.\nThe minimum number of <code>Storage</code> elements to hold at least <code>cap</code>…\nThe number of elements in the usize buffer that follows …\nGet the buffer of a heap-allocated vector.\nThe number of bits that can be stored in this bit vector …\nRemove all elements from the vector, without deallocating …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a vector containing <code>len</code> bits, each set to <code>val</code>.\nCreates a <code>SmallBitVec</code> directly from the internal storage …\nGet the nth bit in this bit vector.\nGet the nth bit in this bit vector, without bounds checks.\nThe number of <code>Storage</code> elements to allocate to hold a …\nGet the header of a heap-allocated vector.\nIf the vector owns a heap allocation, returns a pointer to …\nTotal number of bits per word.\nFor an inline vector, all bits except two can be used as …\nAn inline vector with the nth bit set.\nAn inline vector with the leftmost <code>n</code> bits set.\nLeft shift amount to access the nth bit\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>SmallBitVec</code> into its internal representation.\nReturns <code>true</code> if this vector contains no bits.\nOtherwise, <code>data</code> is a pointer to a heap allocation.\nIf the rightmost bit is unset, then we treat it as inline …\nReturns an iterator that yields the bits of the vector in …\nGet the last bit in this bit vector.\nThe number of bits stored in this bit vector.\nThe number of bits in this bit vector.\nCreate an empty vector.\nCreate a heap allocation with enough space for a header, …\nRemove the last bit from the vector and return it, if …\nAppend a bit to the end of the vector.\nReturns an immutable view of a range of bits from this vec.\nResize the vector to have capacity for at least <code>cap</code> bits.\nRemove and return the bit at index <code>idx</code>, shifting all later …\nReserve capacity for at least <code>additional</code> more elements to …\nResizes the vector so that its length is equal to <code>len</code>.\nCreates a <code>SmallBitVec</code> containing the arguments.\nSet the nth bit in this bit vector to <code>val</code>.  Panics if the …\nSet the length of the vector. The length must not exceed …\nSet the nth bit in this bit vector to <code>val</code>, without bounds …\nShorten the vector, keeping the first <code>len</code> elements and …\nCreate an empty vector with enough storage pre-allocated …")