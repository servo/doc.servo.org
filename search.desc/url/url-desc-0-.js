searchState.loadedDescShard("url", 0, "rust-url is an implementation of the URL Standard for the …\nA DNS domain name, as ‘.’ dot-separated labels. …\nThe host name of an URL.\nAn IPv4 address. <code>Url::host_str</code> returns the serialization …\nAn IPv6 address. <code>Url::host_str</code> returns the serialization …\nNo value.\nA globally unique identifier\nOpaque identifier for URLs that have file or other schemes\nThe origin of an URL\nErrors that can occur during parsing.\nFull configuration for the URL parser.\nExposes methods to manipulate the path of an URL that is …\nIndicates a position within a URL based on its components.\nSome value of type <code>T</code>.\nNon-fatal syntax violations that can occur during parsing.\nConsists of the URL’s scheme, host and port\nA parsed URL record.\nImplementation detail of <code>Url::query_pairs_mut</code>. Typically …\nReturn the serialization of this URL.\nReturn the authority of this URL as an ASCII string.\nChange the base URL\nReturn whether this URL is a cannot-be-a-base URL, meaning …\nSerialize with Serde using the internal representation of …\nIf this URL has a host and it is a domain name (not an IP …\nOverride the character encoding of query strings. This is …\nReturn this URL’s fragment identifier, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nReturn the parsed representation of the host for this URL. …\nReturn the string representation of the host (domain or IP …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the serialization of this URL.\nReturn whether the URL is special (has a special scheme)\nParse a string as an URL, with this URL as the base URL.\nCreates a relative URL if possible, with this URL as the …\nReturn a default <code>ParseOptions</code> that can fully configure the …\nReturn the origin of this URL (…\nParse an absolute URL from a string.\nParse an URL string with the configuration so far.\nParse an absolute URL from a string and add params to its …\nReturn the password for this URL, if any, as a …\nReturn the path for this URL, as a percent-encoded ASCII …\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nReturn this URL’s query string, if any, as a …\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nReturn the scheme of this URL, lower-cased, as an ASCII …\nSyntax in pseudo-BNF:\nSerialize with Serde using the internal representation of …\nChange this URL’s fragment identifier.\nChange this URL’s host.\nopt_new_port: None means leave unchanged, Some(None) means …\nChange this URL’s host to the given IP address.\nChange this URL’s password.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string. If <code>query</code> is <code>None</code>, this …\nChange this URL’s scheme.\nChange this URL’s username.\nResolve a URL’s host and port number to <code>SocketAddr</code>.\n…\nCall the provided function or closure for a non-fatal …\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\nReturn the username for this URL (typically the empty …\nA DNS domain name, as ‘.’ dot-separated labels. …\nThe host name of an URL.\nAn IPv4 address. <code>Url::host_str</code> returns the serialization …\nAn IPv6 address. <code>Url::host_str</code> returns the serialization …\nconvert domain with idna\nhttps://url.spec.whatwg.org/#ends-in-a-number-checker\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse a host: either an IPv6 address in [] square …\nhttps://url.spec.whatwg.org/#concept-ipv4-parser\nhttps://url.spec.whatwg.org/#ipv4-number-parser Ok(None) …\nhttps://url.spec.whatwg.org/#concept-ipv6-parser\nReturn a copy of <code>self</code> that owns an allocated <code>String</code> but …\nA globally unique identifier\nOpaque identifier for URLs that have file or other schemes\nThe origin of an URL\nConsists of the URL’s scheme, host and port\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether this origin is a (scheme, host, port) tuple …\nCreates a new opaque origin that is only equal to itself.\n…\nContains the error value\nhttps://url.spec.whatwg.org/#fragment-percent-encode-set\nContains the success value\nhttps://url.spec.whatwg.org/#path-percent-encode-set\nErrors that can occur during parsing.\nNon-fatal syntax violations that can occur during parsing.\nhttps://url.spec.whatwg.org/#userinfo-percent-encode-set\nhttps://url.spec.whatwg.org/#ascii-alpha\nhttps://infra.spec.whatwg.org/#ascii-tab-or-newline\nhttps://url.spec.whatwg.org/#c0-controls-and-space\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the scheme is file:, the path has a single …\nScheme other than file, http, https, ws, ws, ftp.\nReturn (query_start, fragment_start)\nhttps://url.spec.whatwg.org/#concept-basic-url-parser\nReturn (username_end, remaining)\nWhether path starts with a root slash and a windows drive …\nhttps://url.spec.whatwg.org/#pop-a-urls-path\nhttps://url.spec.whatwg.org/#shorten-a-urls-path\n…\nExposes methods to manipulate the path of an URL that is …\nRemove all segments in the path, leaving the minimal …\nAppend each segment from the given iterator at the end of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRemove the last segment of this URL’s path.\nRemove the last segment of this URL’s path if it is …\nAppend the given segment at the end of this URL’s path.\nIndicates a position within a URL based on its components.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")