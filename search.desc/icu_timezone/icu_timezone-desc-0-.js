searchState.loadedDescShard("icu_timezone", 0, "Types for resolving and manipulating time zones.\nA utility type that can hold time zone information.\nAn error originating inside of the data provider.\nThe GMT offset in seconds for a timezone\nA mapper that supports mapping IANA identifiers to BCP-47 â€¦\nA borrowed wrapper around IANA-BCP47 time zone data, â€¦\nA mapper from IANA time zone identifiers to BCP-47 time â€¦\nA borrowed wrapper around IANA-to-BCP47 time zone data, â€¦\nThe time zone offset was invalid.\n<code>MetazoneCalculator</code> uses data from the data provider to â€¦\nThe data name checksums do not match (data from different â€¦\nAn input overflowed its range.\nA list of error outcomes for various operations in this â€¦\nA mapper between IANA time zone identifiers and BCP-47 â€¦\nA borrowed wrapper around the time zone ID mapper, â€¦\nA mapper that supplements <code>TimeZoneIdMapper</code> with about 8 KB â€¦\nA borrowed wrapper around the time zone ID mapper, â€¦\nA time zone variant, representing the currently observed â€¦\nThe GMT offset in seconds.\nThe CLDR metazone identifier\nðŸš§ [Unstable] Data provider struct definitions for this â€¦\nThe BCP47 time-zone identifier\nThe time variant e.g. daylight or standard\nAn error originating inside of the data provider.\nThe time zone offset was invalid.\nThe data name checksums do not match (data from different â€¦\nAn input overflowed its range.\nA list of error outcomes for various operations in this â€¦\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA mapper that supports mapping IANA identifiers to BCP-47 â€¦\nA borrowed wrapper around IANA-BCP47 time zone data, â€¦\nA mapper from IANA time zone identifiers to BCP-47 time â€¦\nA borrowed wrapper around IANA-to-BCP47 time zone data, â€¦\nReturns a borrowed version of the mapper that can be â€¦\nReturns a borrowed version of the mapper that can be â€¦\nLooks up the canonical IANA time zone identifier of a â€¦\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLooks up a BCP-47 time zone identifier based on an â€¦\nLooks up a BCP-47 time zone identifier based on an â€¦\nLooks up a BCP-47 time zone identifier based on an â€¦\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>IanaToBcp47Mapper</code> using compiled data.\nCreates a new <code>IanaBcp47RoundTripMapper</code> using compiled data.\nA version of <code>Self::new</code> that uses custom data provided by a â€¦\nA version of <code>Self::new</code> that uses custom data provided by a â€¦\nA version of <code>Self::new</code> that uses custom data provided by â€¦\nA version of <code>Self::new</code> that uses custom data provided by â€¦\nA mapper between IANA time zone identifiers and BCP-47 â€¦\nA borrowed wrapper around the time zone ID mapper, â€¦\nA mapper that supplements <code>TimeZoneIdMapper</code> with about 8 KB â€¦\nA borrowed wrapper around the time zone ID mapper, â€¦\nReturns a borrowed version of the mapper that can be â€¦\nReturns a borrowed version of the mapper that can be â€¦\nReturns the canonical, normalized IANA ID of the given â€¦\nReturns the canonical, normalized identifier of the given â€¦\nReturns the canonical, normalized identifier of the given â€¦\nReturns the canonical, normalized IANA ID of the given â€¦\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSame as <code>Self::iana_to_bcp47()</code> but works with potentially â€¦\nQueries the data for <code>iana_id</code> without recording the â€¦\nQueries the data for <code>iana_id</code> while keeping track of the â€¦\nPerforms a reverse lookup by walking the trie with an â€¦\nGets the BCP-47 time zone ID from an IANA time zone ID â€¦\nGets the inner <code>TimeZoneIdMapper</code> for performing queries.\nGets the inner <code>TimeZoneIdMapperBorrowed</code> for performing â€¦\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TimeZoneIdMapper</code> using compiled data.\nCreates a new <code>TimeZoneIdMapperWithFastCanonicalization</code> â€¦\nNormalizes the syntax of an IANA time zone ID.\nA version of <code>Self::new</code> that uses custom data provided by a â€¦\nA version of <code>Self::new</code> that uses custom data provided by a â€¦\nA version of <code>Self::new</code> that uses custom data provided by â€¦\nA version of <code>Self::new</code> that uses custom data provided by â€¦\nCreates a new <code>TimeZoneIdMapperWithFastCanonicalization</code> â€¦\nA version of <code>Self::new</code> that uses custom data provided by a â€¦\nA version of <code>Self::try_new_with_mapper</code> that uses custom â€¦\n<code>MetazoneCalculator</code> uses data from the data provider to â€¦\nCalculate metazone id from timezone id and local datetime.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a <code>MetazoneCalculator</code> using compiled data.\nA version of <code>Self::new</code> that uses custom data provided by a â€¦\nA version of <code>Self::new</code> that uses custom data provided by â€¦\nBaked data\nMetazone ID in a compact format\nAn ICU4X mapping to the metazones at a given period. See â€¦\nMarker type for <code>MetazonePeriodV1</code>: â€œâ€¦\nTimeZone ID in BCP47 format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nðŸš§ [Unstable] Property names-related data for this â€¦\nA mapping from IANA time zone identifiers to BCP-47 time â€¦\nMarker type for <code>Bcp47ToIanaMapV1</code>: â€œâ€¦\nA mapping from lowercase IANA time zone identifiers to â€¦\nMarker type for <code>IanaToBcp47MapV1</code>: â€œâ€¦\nA mapping from normal-case IANA time zone identifiers to â€¦\nMarker type for <code>IanaToBcp47MapV2</code>: â€œâ€¦\nA sorted list of BCP-47 time zone identifiers.\nA sorted list of BCP-47 time zone identifiers.\nAn XxHash64 checksum of <code>Self::bcp47_ids</code>.\nAn XxHash64 checksum of <code>Self::bcp47_ids</code>.\nAn XxHash64 checksum of <code>IanaToBcp47MapV1::bcp47_ids</code>.\nThe IANA time zone identifier corresponding to the BCP-47 â€¦\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA map from IANA time zone identifiers to indexes of BCP-47 â€¦\nA map from normal-case IANA time zone identifiers to â€¦\nA utility type that can hold time zone information.\nReturns the argument unchanged.\nParse a <code>CustomTimeZone</code> from a string.\nThe GMT offset in seconds.\nCalls <code>U::from(self)</code>.\nOverwrite the metazone id in MockTimeZone.\nThe CLDR metazone identifier\nCreates a time zone with no information.\nCreates a new <code>CustomTimeZone</code> with the given GMT offset.\nThe BCP47 time-zone identifier\nParse a <code>CustomTimeZone</code> from a UTF-8 string representing a â€¦\nCreates a new <code>CustomTimeZone</code> with the GMT offset set to â€¦\nThe time variant e.g. daylight or standard\nThe GMT offset in seconds for a timezone\nA time zone variant, representing the currently observed â€¦\nReturns the variant corresponding to <code>&quot;daylight&quot;</code> in CLDR.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>GmtOffset</code> from a seconds input without checking â€¦\nParse a <code>GmtOffset</code> from a string.\nReturns <code>true</code> if the <code>GmtOffset</code> has non-zero minutes, â€¦\nReturns <code>true</code> if the <code>GmtOffset</code> has non-zero seconds, â€¦\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>GmtOffset</code> is positive, otherwise <code>false</code>.\nReturns <code>true</code> if the <code>GmtOffset</code> is zero, otherwise <code>false</code>.\nReturns the raw offset value in seconds.\nReturns the variant corresponding to <code>&quot;standard&quot;</code> in CLDR.\nParse a <code>GmtOffset</code> from bytes.\nAttempt to create a <code>GmtOffset</code> from a seconds input. It â€¦\nCreates a <code>GmtOffset</code> at UTC.")