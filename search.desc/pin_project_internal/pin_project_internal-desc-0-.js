searchState.loadedDescShard("pin_project_internal", 0, "Implementation detail of the <code>pin-project</code> crate. - <strong>do not </strong>…\nAn attribute that creates projection types covering all …\nAn attribute used for custom implementations of <code>Drop</code>.\nThe annotation for pinned type.\n<code>project_replace = &lt;ident&gt;</code>.\n<code>!Unpin</code>.\n<code>project_replace [= &lt;ident&gt;]</code> argument.\n<code>project_replace</code>.\n<code>UnsafeUnpin</code> or <code>!Unpin</code> argument.\n<code>UnsafeUnpin</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>PinnedDrop</code> argument.\n<code>project = &lt;ident&gt;</code> argument.\n<code>project_ref = &lt;ident&gt;</code> argument.\n<code>project_replace [= &lt;ident&gt;]</code> argument.\nReturn the span of this argument.\n<code>UnsafeUnpin</code> or <code>!Unpin</code> argument.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttributes of the original type.\nChecks that the <code>[repr(packed)]</code> attribute is not included.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerics of the original type.\nGenerics of the projected types.\nReturns attributes that should be applied to all generated …\nName of the original type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKind of the original type: struct or enum\nLifetime on the generated projected types.\nCreates <code>Drop</code> implementation for the original type.\nCreates an implementation of the projection methods.\nCreates <code>Unpin</code> implementation for the original type.\nName of the projected type returned by <code>project</code> method.\nThe original type.\nName of the projected type returned by <code>project_replace</code> …\n<code>PinnedDrop</code> argument.\nTypes of the pinned fields.\nThe projected types.\nReturns attributes used on projected types.\nGenerates the processing that <code>project_replace</code> does for the …\n<code>project</code> argument.\n<code>project_ref</code> argument.\n<code>project_replace [= &lt;ident&gt;]</code> argument.\nName of the projected type returned by <code>project_ref</code> method.\n<code>UnsafeUnpin</code> or <code>!Unpin</code> argument.\nVisibility of the original type.\nVisibility of the projected types.\n<code>where</code> clause of the projected types. This has an additional\nValidates the signature of given <code>PinnedDrop</code> impl.\nValidates the signature of given <code>PinnedDrop::drop</code> method.\nDetermines the lifetime names. Ensure it doesn’t overlap …\nDetermines the visibility of the projected types and …\nReturns the argument unchanged.\nInserts a <code>lifetime</code> at position <code>0</code> of <code>generics.params</code>.\nLike <code>insert_lifetime</code>, but also generates a bound of the …\nCalls <code>U::from(self)</code>.")