searchState.loadedDescShard("raqote", 0, "A pure Rust 2D Graphics Library.\nA unpremultiplied color.\nThe main type used for drawing\nRepresents a complete path usable for filling or stroking.\nA helper struct used for constructing a <code>Path</code>.\nA premultiplied color. i.e. r,b,g &lt;= a\nLinearGradients have an implicit start point at 0,0 and an …\nGet the alpha component.\nGet the blue component.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the green component.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the red component.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe main type used for drawing\nA premultiplied color. i.e. r,b,g &lt;= a\nLinearGradients have an implicit start point at 0,0 and an …\nBlends <code>src_rect</code> of <code>src</code> at <code>dst</code>using <code>blend</code> mode. The current …\nBlends <code>src_rect</code> of <code>src</code> at <code>dst</code> using <code>alpha</code>. The current …\nFills the current clip with the solid color <code>solid</code>\n<code>mask_rect</code> is in DrawTarget space. i.e size is the size of …\nDraws <code>src_rect</code> of <code>src</code> at <code>dst</code>. The current transform and …\nDraws <code>src_rect</code> of <code>src</code> at <code>dst</code>. The current transform and …\nDraws an image at x, y\nDraws an image at (x, y) with the size (width, height). …\nFills <code>path</code> with <code>src</code>\nFills the rect <code>x</code>, <code>y,</code>, <code>width</code>, <code>height</code> with <code>src</code>. If the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUse an existing backing storage for the bitmap\nUse a previously used vector for the bitmap and extend it …\nReturns a reference to the underlying pixel data\nReturns a mut reference to the underlying pixel data as …\nReturns a reference to the underlying pixel data as …\nReturns a mut reference to the underlying pixel data as …\ngets the current transform\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the buffer backing the DrawTarget\nTake ownership of the buffer backing the DrawTarget\nDraws <code>src</code> through an untransformed <code>mask</code> positioned at <code>x</code>, <code>y</code> …\nCreates a new linear gradient source where the start point …\nCreates a new radial gradient that is centered at the …\nCreates a new sweep gradient that is centered at the given …\nCreates a new radial gradient that is centered at the …\nDraws the most recently pushed layer to the drawing target …\nPushes a new layer as the drawing target. This is used for …\nPushes a new layer as the drawing target. This is used for …\nsets a transform that will be applied to all drawing …\nStrokes <code>path</code> with <code>style</code> and fills the result with <code>src</code>\nSaves the current pixel to a png file at <code>path</code>\nA8.\n“Black-and-white” rendering. Each pixel is either …\nAn in-memory bitmap surface for glyph rasterization.\nA cross-platform loader that uses the FreeType library to …\nThe image format for the canvas.\nHinting is performed in both horizontal and vertical …\nGrayscale antialiasing. Only one channel is used.\nSpecifies how hinting (grid fitting) is to be performed …\nNo hinting is performed unless absolutely necessary to …\nThe antialiasing strategy that should be used when …\nR8G8B8, little-endian.\nPremultiplied R8G8B8A8, little-endian.\nSubpixel RGB antialiasing, for LCD screens.\nAn affine transform, optimized with SIMD.\nHinting is performed only in the vertical direction. The …\nHinting is performed only in the vertical direction, and …\nReturns the distance from the origin of the glyph with the …\nDetermines whether a blob of raw font data represents a …\nDetermines whether a file represents a supported font, …\nDetermines whether a path points to a supported font, and, …\nReturns the number of bits per color channel that this …\nReturns the number of bits per pixel that this image …\nReturns the number of bytes per pixel that this image …\nReturns the number of color channels per pixel that this …\nAttempts to return the raw font data (contents of the font …\nExtracts the scale from this matrix.\nReturns the name of the font family.\nThe image format of the canvas.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads a font from raw font data (the contents of a <code>.ttf</code>/…\nLoads a font from a <code>.ttf</code>/<code>.otf</code>/etc. file.\nLoads the font pointed to by a handle.\nCreates a font from a native API handle.\nLoads a font from the path to a <code>.ttf</code>/<code>.otf</code>/etc. file.\nReturns the full name of the font (also known as “…\nReturns the glyph ID for the specified glyph name.\nReturns the number of glyphs in the font.\nReturns the usual glyph ID for a Unicode character.\nReturns the point size that will be used for grid fitting, …\nReturns a handle to this font, if possible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if the font is monospace …\nReturns the raw contents of the OpenType table with the …\nRetrieves various metrics that apply to the entire font.\nReturns the wrapped native font handle.\nCreates a new blank canvas with the given pixel size and …\nReturns the amount that the given glyph should be …\nSends the vector path for a glyph to a path builder.\nThe raw pixel data.\nReturns the PostScript name of the font. This should be …\nReturns the values of various font properties, …\nReturns the pixel boundaries that the glyph will take up …\nRasterizes a glyph to a canvas with the given size and …\nReturns the rotation angle of this matrix.\nReturns the scale factor of this matrix.\nThe size of the buffer, in pixels.\nThe number of <em>bytes</em> between successive rows.\nReturns true if and only if the font loader can perform …\nReturns the translation part of this matrix.\nReturns the boundaries of a glyph in font units.\nA convenience alias for <code>Vector2F::new()</code>.\nA convenience alias for <code>Vector2I::new()</code>.\nCreates a new blank canvas with the given pixel size, …\nRepresents a complete path usable for filling or stroking.\nA helper struct used for constructing a <code>Path</code>.\nAdds an arc approximated by quadratic beziers with center <code>x</code>…\nCloses the current subpath\nReturns true if the point <code>x</code>, <code>y</code> is within the filled area …\nAdds a cubic bezier from the current point to <code>x</code>, <code>y</code>, using …\nCompletes the current path\nFlattens <code>self</code> by replacing all QuadTo and CurveTo commands …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds a line segment from the current point to <code>x</code>, <code>y</code>\nMoves the current point to <code>x</code>, <code>y</code>\nAdds a quadratic bezier from the current point to <code>x</code>, <code>y</code>, …\nAdds a rect to the path\n16.16 fixed point representation.\n30.2 fixed point representation.\n26.6 fixed point representation.\nA “sliding fixed point” representation 16.16 &gt;&gt; shift.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")