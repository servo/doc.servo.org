searchState.loadedDescShard("inout", 0, "Collection of custom reference types for code generic over …\nCustom pointer type which contains one immutable (input) …\nCustom slice type which references one immutable (input) …\nIterator over <code>InOutBuf</code>.\nCustom slice type which references one immutable (input) …\nThe error returned when slice can not be converted into …\nThe error returned when input and output slices have …\nOutput buffer is smaller than input buffer.\nPadding error. Usually emitted when size of output buffer …\nVariant of <code>InOutBuf</code> with optional padded tail block.\nThe error returned when slice can not be converted into …\nThe error returned when input and output slices have …\nOutput buffer is smaller than input buffer.\nPadding error. Usually emitted when size of output buffer …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCustom pointer type which contains one immutable (input) …\nClone input value and return it.\nReturns the argument unchanged.\nCreate <code>InOut</code> from raw input and output pointers.\nReturns <code>InOut</code> for the given position.\nGet immutable reference to the input value.\nGet mutable reference to the output value.\nCalls <code>U::from(self)</code>.\nConvert <code>InOut</code> array to <code>InOutBuf</code>.\nConvert <code>self</code> to a pair of raw input and output pointers.\nReborrow <code>self</code>.\nXOR <code>data</code> with values behind the input slice and write …\nXOR <code>data</code> with values behind the input slice and write …\nCustom slice type which references one immutable (input) …\nIterator over <code>InOutBuf</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate <code>InOutBuf</code> from a single mutable reference.\nCreate <code>InOutBuf</code> from raw input and output pointers.\nCreate <code>InOutBuf</code> from a pair of immutable and mutable …\nReturns <code>InOut</code> for given position.\nGet input slice.\nGet output slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPartition buffer into 2 parts: buffer of arrays and tail.\nConsume self and return output slice with lifetime <code>&#39;a</code>.\nGet raw input and output pointers.\nReturns <code>true</code> if the buffer has a length of 0.\nGet length of the inner buffers.\nCreate <code>InOutBuf</code> from immutable and mutable slices.\nReborrow <code>self</code>.\nDivides one buffer into two at <code>mid</code> index.\nXORs <code>data</code> with values behind the input slice and write …\nCustom slice type which references one immutable (input) …\nVariant of <code>InOutBuf</code> with optional padded tail block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCrate <code>InOutBufReserved</code> from a single mutable slice.\nCreate <code>InOutBufReserved</code> from raw input and output pointers.\nCrate <code>InOutBufReserved</code> from two separate slices.\nGet full blocks.\nGet input slice.\nGet input buffer length.\nGet output slice.\nGet output buffer length.\nGet padded tail block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert buffer into output slice.\nTransform buffer into <code>PaddedInOutBuf</code> using padding …\nGet raw input and output pointers.")