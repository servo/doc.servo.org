searchState.loadedDescShard("gpu_alloc", 0, "Implementation agnostic memory allocator for Vulkan like …\nEnumeration of possible errors that may occur during …\nAllocation flags\nMapping failed due to block being already mapped.\nConfiguration for <code>GpuAllocator</code>\nSpecifies that the memory can be used for buffers created …\nThis flag is set for device-local memory types. …\nHints for allocator to decide on allocation strategy.\nMemory mapped error.\nProperties of the device that will be used for allocating …\nMemory allocator for Vulkan-like APIs.\nThis flag is set for host-cached memory types. Host-cached …\nThis flag is set for host-coherent memory types. …\nThis flag is set for host-visible memory types. …\nThis flag is set for lazily-allocated memory types. …\nEnumeration of possible errors that may occur during …\nMap failed due to implementation specific error.\nMap failed for implementation specific reason. For Vulkan …\nSpecifies range of the mapped memory region.\nMemory block allocated by <code>GpuAllocator</code>.\nAbstract device that can be used to allocate memory …\nDefines memory heap.\nMemory properties type.\nDefines memory type.\nAllocation request cannot be fulfilled as no available …\nAttempt to map memory block with non-host-visible memory …\nDevice memory exhausted.\nDevice memory exhausted.\nBackend reported that device memory has been exhausted. …\nBackend reported that device memory has been exhausted. …\nHost memory exhausted.\nHost memory exhausted.\nBackend reported that host memory has been exhausted. …\nBackend reported that host memory has been exhausted. …\nMemory exhausted error.\nThis flag is set for protected memory types. Protected …\nHint for allocator that dedicated memory object is …\nMemory request for allocator.\nAllocation directly from device. Very slow. Count of …\nReached limit on allocated memory objects count. …\nMemory usage type. Bits set define intended usage for …\nAlign <code>value</code> down to <code>align_mask</code> Returns largest integer not …\nMinimal alignment mask required. Returned block may have …\nAligns <code>value</code> up to <code>align_mask</code> Returns smallest integer not …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nAllocates new memory object from device. This function may …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSpecifies if feature required to fetch device address is …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nDeallocate memory object.\nSize in bytes of request that will be served by dedicated …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nUpper limit for size in bytes of chunks in free-list …\nFlushes ranges of memory mapped regions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nHeap index of the memory type.\nInitial memory object size for buddy allocator. If less …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates ranges of memory mapped regions.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nMap region of device memory to host memory space.\nMaximum number of valid memory allocations that can exist …\nMaximum size for single allocation supported by the device.\nMemory object reference.\nArray of memory heaps provided by the device.\nArray of memory types provided by the device.\nBitset for memory types. Returned block will be from …\nMinimal size for buddy allocator.\nAtom size for host mappable non-coherent memory.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOffset in bytes from start of the memory object.\nSize in bytes of request that will be served by dedicated …\nProperty flags of the memory type.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSize in bytes of the memory range.\nSize of memory heap in bytes.\nMinimal size of memory block required. Returned block may …\nSize in bytes of first chunk in free-list allocator.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSize in bytes of transient memory request that will be …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnmap previously mapped memory region.\nIntended memory usage. Returned block may support …\nHints for allocator to decide on allocation strategy.\nMemory allocator for Vulkan-like APIs.\nHint for allocator that dedicated memory object is …\nAllocation directly from device. Very slow. Count of …\nAllocates memory block from specified <code>device</code> according to …\nAllocates memory block from specified <code>device</code> according to …\nDeallocates leftover memory objects. Should be used before …\nDeallocates memory block previously allocated from this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a memory block from an existing memory allocation, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the maximum allocation size supported.\nCreates  new instance of <code>GpuAllocator</code>. Provided …\nReturns the number of remaining available allocations.\nSets the number of remaining available allocations.\nMemory block allocated by <code>GpuAllocator</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns pointer to mapped memory range of this block. This …\nReturns reference to parent memory object.\nReturns index of type of parent memory object.\nReturns offset in bytes from start of memory object to …\nReturns memory property flags for parent memory object.\nTransiently maps block memory range and copies specified …\nReturns size of this memory block.\nUnmaps memory range of this block that was previously …\nTransiently maps block memory range and copies specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration for <code>GpuAllocator</code>\nSize in bytes of request that will be served by dedicated …\nUpper limit for size in bytes of chunks in free-list …\nReturns the argument unchanged.\nReturns default configuration for average sized potato.\nReturns default configuration.\nInitial memory object size for buddy allocator. If less …\nCalls <code>U::from(self)</code>.\nMinimal size for buddy allocator.\nSize in bytes of request that will be served by dedicated …\nSize in bytes of first chunk in free-list allocator.\nSize in bytes of transient memory request that will be …\nEnumeration of possible errors that may occur during …\nMapping failed due to block being already mapped.\nEnumeration of possible errors that may occur during …\nMap failed for implementation specific reason. For Vulkan …\nAllocation request cannot be fulfilled as no available …\nAttempt to map memory block with non-host-visible memory …\nBackend reported that device memory has been exhausted. …\nBackend reported that device memory has been exhausted. …\nBackend reported that host memory has been exhausted. …\nBackend reported that host memory has been exhausted. …\nReached limit on allocated memory objects count. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeallocates leftover memory objects. Should be used before …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts value into this linked vec and returns index at …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequests memory that can be addressed with <code>u64</code>. Allows …\nHints allocator that memory will be used for data …\nHints for allocator to find memory with faster device …\nMemory will be accessed from host. This flags guarantees …\nHints allocator that memory will be used for short duration\nHints allocator that memory will be used for data …\nMemory usage type. Bits set define intended usage for …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns mask with bits set for memory type indices that …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nReturns reversed priority of memory with specified flags …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns slice of memory type indices that support the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCan be used instead of <code>Arc::try_unwrap(arc).unwrap()</code> when …\nGuarantees uniqueness only if <code>Weak</code> pointers are never …\nCan be used instead of <code>Arc::try_unwrap</code> only if <code>Weak</code> …")