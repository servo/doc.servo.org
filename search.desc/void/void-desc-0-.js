searchState.loadedDescShard("void", 0, "Void\nExtensions to <code>Result&lt;Void, E&gt;</code>\nExtensions to <code>Result&lt;T, Void&gt;</code>\nThe empty type for cases which can’t occur.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA safe version of <code>intrinsincs::unreachable</code>.\nGet the value out of a wrapper.\nGet the error out of a wrapper.\nUtilities for comparing and ordering values.\nInterfaces for working with Errors.\nUtilities for formatting and printing <code>String</code>s.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nAn ordering where a compared value is equal to another.\nAn ordering where a compared value is greater than another.\nAn ordering where a compared value is less than another.\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nAn <code>Ordering</code> is the result of a comparison between two …\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\nA helper struct for reverse ordering.\nRestrict a value to a certain interval.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis method tests greater than or equal to (for <code>self</code> and …\nThis method tests greater than (for <code>self</code> and <code>other</code>) and is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the ordering is the <code>Equal</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…\nReturns <code>true</code> if the ordering is the <code>Greater</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …\nReturns <code>true</code> if the ordering is the <code>Less</code> variant.\nReturns <code>true</code> if the ordering is not the <code>Equal</code> variant.\nThis method tests less than or equal to (for <code>self</code> and <code>other</code>…\nThis method tests less than (for <code>self</code> and <code>other</code>) and is …\nCompares and returns the maximum of two values.\nCompares and returns the maximum of two values.\nReturns the maximum of two values with respect to the …\nReturns the element that gives the maximum value from the …\nCompares and returns the minimum of two values.\nCompares and returns the minimum of two values.\nReturns the minimum of two values with respect to the …\nReturns the element that gives the minimum value from the …\nCompares and sorts two values, returning minimum and …\nReturns minimum and maximum values with respect to the …\nReturns minimum and maximum values with respect to the …\nThis method tests for <code>!=</code>. The default implementation is …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nReverses the <code>Ordering</code>.\nChains two orderings.\nChains the ordering with the given function.\n<code>Error</code> is a trait representing the basic expectations for …\nAn error reporter that prints an error and its sources.\n<code>Request</code> supports generic, type-driven access to data. Its …\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some mutable reference to the inner value if it is …\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some reference to the inner value if it is of type …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nCreate a new <code>Report</code> from an input error.\nEnable pretty-printing the report across multiple lines.\nProvides type based access to context intended for error …\nProvide a reference. The referee type must be bounded by …\nProvide a reference computed using a closure. The referee …\nProvide a value or other type with only static lifetimes.\nProvide a value or other type with only static lifetimes …\nRequest a reference of type <code>T</code> from the given <code>impl Error</code>.\nRequest a value of type <code>T</code> from the given <code>impl Error</code>.\nDisplay backtrace if available when using pretty output …\nThe lower-level source of this error, if any.\nReturns an iterator starting with the current error and …\nCheck if the <code>Request</code> would be satisfied if provided with a …\nCheck if the <code>Request</code> would be satisfied if provided with a …\nPossible alignments returned by <code>Formatter::align</code>\nThis structure represents a safely precompiled version of …\n<code>b</code> formatting.\nIndication that contents should be center-aligned.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nFormat trait for an empty format, <code>{}</code>.\nContains the error value\nThe error type which is returned from formatting a message …\nConfiguration for formatting.\nImplements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.\nIndication that contents should be left-aligned.\n<code>e</code> formatting.\n<code>x</code> formatting.\n<code>o</code> formatting.\nContains the success value\n<code>p</code> formatting.\nThe type returned by formatter methods.\nIndication that contents should be right-aligned.\n<code>E</code> formatting.\n<code>X</code> formatting.\nA trait for writing or formatting into Unicode-accepting …\nFlag indicating what form of alignment was requested.\nDetermines if the <code>#</code> flag was specified.\nGet the formatted string, if it has no arguments to be …\nCreates a <code>DebugList</code> builder designed to assist with …\nCreates a <code>DebugMap</code> builder designed to assist with …\nCreates a <code>DebugSet</code> builder designed to assist with …\nCreates a <code>DebugStruct</code> builder designed to assist with …\nCreates a <code>DebugTuple</code> builder designed to assist with …\nAdds the contents of an iterator of entries to the set …\nAdds the contents of an iterator of entries to the list …\nAdds the contents of an iterator of entries to the map …\nAdds a new entry to the set output.\nAdds a new entry to the list output.\nAdds a new entry to the map output.\nAdds a new entry to the set output.\nAdds a new entry to the list output.\nAdds a new field to the generated struct output.\nAdds a new field to the generated tuple struct output.\nAdds a new field to the generated struct output.\nAdds a new field to the generated tuple struct output.\nCharacter used as ‘fill’ whenever there is alignment.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nMarks the struct as non-exhaustive, indicating to the …\nFlags for formatting\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nThe <code>format</code> function takes an <code>Arguments</code> struct and returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds the key part of a new entry to the map output.\nAdds the key part of a new entry to the map output.\nThis function takes a string slice and emits it to the …\nPerforms the correct padding for an integer which has …\nOptionally specified precision for numeric types. …\nDetermines if the <code>0</code> flag was specified.\nDetermines if the <code>-</code> flag was specified.\nDetermines if the <code>+</code> flag was specified.\nAdds the value part of a new entry to the map output.\nAdds the value part of a new entry to the map output.\nOptionally specified integer width that the output should …\nThe <code>write</code> function takes an output stream, and an <code>Arguments</code>…\nWrites a <code>char</code> into this writer, returning whether the …\nGlue for usage of the <code>write!</code> macro with implementors of …\nWrites some formatted information into this instance.\nWrites a string slice into this writer, returning whether …\nWrites some data to the underlying buffer contained within …")