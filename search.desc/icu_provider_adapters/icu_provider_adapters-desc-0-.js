searchState.loadedDescShard("icu_provider_adapters", 0, "Adapters for composing and manipulating data providers.\nData provider always serving the same struct.\nHelpers for switching between multiple providers.\nEmpty data provider implementations.\nA data provider wrapper that performs locale fallback.\nProviders that filter resource requests.\nProviders that combine multiple other providers.\nMake a forking data provider with an arbitrary number of …\nA data provider that returns clones of a fixed type-erased …\nThe <code>AnyPayload</code> to return on matching requests.\nReturns the argument unchanged.\nCreates an <code>AnyPayloadProvider</code> from an existing <code>AnyPayload</code>.\nCreates an <code>AnyPayloadProvider</code> with an owned (allocated) …\nCreates an <code>AnyPayloadProvider</code> from an existing <code>DataPayload</code>.\nCreates an <code>AnyPayloadProvider</code> with a statically borrowed …\nCalls <code>U::from(self)</code>.\nThe <code>DataKey</code> for which to provide data. All others will …\nCreates an <code>AnyPayloadProvider</code> with the default (allocated) …\nA value of type <code>P0</code>.\nA value of type <code>P1</code>.\nA provider that is one of two types determined at runtime.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA data provider that always returns an error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a data provider that always returns …\nCreates a data provider that always returns the specified …\nA data provider wrapper that performs locale fallback. …\nReturns the argument unchanged.\nReturns a reference to the inner provider, bypassing …\nReturns a mutable reference to the inner provider.\nCalls <code>U::from(self)</code>.\nReturns ownership of the inner provider to the caller.\nWrap a provider with an arbitrary fallback engine.\nRun the fallback algorithm with the data request using the …\nCreate a <code>LocaleFallbackProvider</code> by wrapping another data …\nCreate a <code>LocaleFallbackProvider</code> by wrapping another data …\nA blanket-implemented trait exposing the <code>Self::filterable()</code>…\nA data provider that selectively filters out data requests.\nFilter out data requests with certain langids according to …\nFilter out data request except those having a language …\nA name for this filter, used in error messages.\nCreates a filterable data provider with the given name for …\nReturns the argument unchanged.\nThe data provider to which we delegate requests.\nCalls <code>U::from(self)</code>.\nThe predicate function. A return value of <code>true</code> indicates …\nRequire that data requests contain a langid.\nA name for this filter, used in error messages.\nThe data provider to which we delegate requests.\nThe predicate function. A return value of <code>true</code> indicates …\nA provider that returns data from one of two child …\nCreate a provider that returns data from one of two child …\nA provider that returns data from the first child provider …\nA provider that returns data from the first child provider …\nA provider that returns data from one of two child …\nCreate a provider that returns data from the first child …\nCollection of predicate traits and functions for forking …\nA provider that returns data from one of two child …\nA provider that returns data from the first child provider …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns references to the inner providers.\nReturns a slice of the inner providers.\nReturns mutable references to the inner providers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns ownership of the inner providers to the caller.\nReturns ownership of the inner providers to the caller.\nA provider that returns data from one of two child …\nCreate a provider that returns data from the first child …\nCreate a new provider that forks between the two children.\nCreate a new provider that forks between the vector of …\nAdds an additional child provider.\nExposes a mutable vector of providers to a closure so it …\nThe predicate trait used by <code>ForkByErrorProvider</code>.\nA predicate that allows forking providers to search for a …\nA predicate that allows forking providers to search for a …\nThe error to return if there are zero providers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis function is called when a data request fails and …")