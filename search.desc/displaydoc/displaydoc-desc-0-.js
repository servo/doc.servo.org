searchState.loadedDescShard("displaydoc", 0, "This library provides a convenient derive macro for the …\nCustom <code>#[derive(...)]</code> macro for implementing <code>fmt::Display</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd a requirement for core::fmt::Display to a <code>where</code> …\nPush <code>new_type_predicate</code> onto the end of <code>where_clause</code>.\nHygienically add <code>where _: Display</code> to the set of …\nFor all declared type parameters, add a core::fmt::Display …\nMap each declared generic type parameter to the set of all …\nReturns the argument unchanged.\nGenerate a <code>where</code> clause that ensures all generic type …\nCalls <code>U::from(self)</code>.\nCreate a path with segments composed of [Idents] <em>without</em> …\nCreate a <code>where</code> clause that we can add WherePredicates to.\nCreate a <code>where</code> predicate for <code>ident</code>, without any bounds yet.")