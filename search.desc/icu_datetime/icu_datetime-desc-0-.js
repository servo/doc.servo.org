searchState.loadedDescShard("icu_datetime", 0, "Formatting date and time.\nA calendar that can be found in CLDR\nThe Unicode BCP 47 identifier for the calendar’s skeleton\nAn error originating inside of the data provider.\n<code>DateFormatter</code> is a formatter capable of formatting dates …\nThe data marker for loading length-patterns for this …\nThe data marker for loading symbols for this calendar.\nA list of error outcomes for various operations in this …\n<code>DateTimeFormatter</code> is a formatter capable of formatting …\nAn error originating from <code>DateTimeInput</code>.\nThe same field occurs multiple times in a pattern or was …\nThe FixedDecimalFormatter is not loaded\nAn error originating from FixedDecimalFormatter\nAn error originating from the <code>Write</code> trait.\n<code>FormattedDateTime</code> is a intermediate structure which can be …\n<code>FormattedTimeZone</code> is a intermediate structure which can be …\n<code>FormattedTimeZone</code> is a intermediate structure which can be …\nAn error from mixing calendar types in <code>DateTimeFormatter</code>\nAn error from mixing calendar types in <code>DateTimeFormatter</code>\nMissing date symbols\nAn error originating from a missing field in datetime …\nAn error originating from a missing month symbol in the …\nThe names for the given field are not loaded\nordinal_rules must be set for …\nMissing time symbols\nAn error originating from a missing weekday symbol in the …\nAn error originating from parsing a pattern.\nAn error originating from <code>PluralRules</code>.\n<code>TimeFormatter</code> is a structure of the <code>icu::datetime</code> …\n<code>TypedDateFormatter</code> is a formatter capable of formatting …\n<code>TypedDateTimeFormatter</code> is a formatter capable of formatting\nThe composition of <code>TypedDateTimeFormatter</code> and …\nAn error originating from an unsupported field in a …\nAn unsupported field with a field length.\nAn error due to there being no patterns for the given …\n<code>ZonedDateTimeFormatter</code> is a formatter capable of formatting\nThis module contains the untyped <code>AnyCalendar</code>-based …\nThe calendar kind of the input object (date being …\nThe collection of code that is needed for handling …\nEnums representing the fields in a date pattern, including …\nA collection of utilities for representing and working …\n<code>DateTimeFormatterOptions</code> is a bag of options which, …\n🚧 [Unstable] Data provider struct definitions for this …\nThe calendar kind of the target object (formatter).\nA formatter specifically for the time zone.\n<code>DateFormatter</code> is a formatter capable of formatting dates …\nTakes a <code>DateInput</code> implementer and returns an instance of a …\nTakes a <code>DateInput</code> implementer and returns it formatted as …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>DateFormatter</code> from compiled data.\nA version of <code>Self::try_new_with_length</code> that uses custom …\nA version of <code>Self::try_new_with_length</code> that uses custom …\n<code>DateTimeFormatter</code> is a formatter capable of formatting …\nTakes a <code>DateTimeInput</code> implementer and returns an instance …\nTakes a <code>DateTimeInput</code> implementer and returns it formatted …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor that takes a <code>TimeFormatter</code> and <code>DateFormatter</code> …\nConstruct a new <code>DateTimeFormatter</code> from compiled data.\nA version of <code>Self::try_new</code> that uses custom data provided …\nA version of <code>Self::try_new</code> that uses custom data provided …\n<code>ZonedDateTimeFormatter</code> is a formatter capable of formatting\nConverts a date to the correct calendar if necessary\nTakes a <code>DateTimeInput</code> and a <code>TimeZoneInput</code> and returns an …\nTakes a <code>DateTimeInput</code> and a <code>TimeZoneInput</code> and returns it …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor that takes a selected <code>DataLocale</code> and a list of …\nA version of <code>Self::try_new</code> that uses custom data provided …\nA version of <code>Self::try_new</code> that uses custom data provided …\nA calendar that can be found in CLDR\nThe Unicode BCP 47 identifier for the calendar’s skeleton\nThe data marker for loading length-patterns for this …\nThe data marker for loading symbols for this calendar.\nThe <code>CldrCalendar</code> trait is sealed except when the …\nConverts a date to the correct calendar if necessary\nConverts a date to the correct calendar if necessary\nChecks if a given BCP 47 identifier is allowed to be used …\nChecks if a given BCP 47 identifier is allowed to be used …\nCheck if the provided value is of the form <code>islamic-{subcal}</code>\n<code>TimeFormatter</code> is a structure of the <code>icu::datetime</code> …\n<code>TypedDateFormatter</code> is a formatter capable of formatting …\n<code>TypedDateTimeFormatter</code> is a formatter capable of formatting\nTakes a <code>IsoTimeInput</code> implementer and returns an instance …\nTakes a <code>DateTimeInput</code> implementer and returns an instance …\nTakes a <code>DateTimeInput</code> implementer and returns an instance …\nTakes a <code>IsoTimeInput</code> implementer and returns it formatted …\nTakes a <code>DateTimeInput</code> implementer and returns it formatted …\nTakes a <code>DateTimeInput</code> implementer and returns it formatted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor that takes a <code>TimeFormatter</code> and …\nConstructor that takes a selected locale, then collects all\nA version of <code>Self::try_new</code> that uses custom data provided …\nA version of <code>Self::try_new</code> that uses custom data provided …\nConstructor that takes a selected locale and a list of …\nConstructor that takes a selected locale and a list of …\nA version of <code>Self::try_new_with_length</code> that uses custom …\nA version of <code>Self::try_new_with_length</code> that uses custom …\nA version of <code>Self::try_new_with_length</code> that uses custom …\nA version of <code>Self::try_new_with_length</code> that uses custom …\nAn error originating inside of the data provider.\nA list of error outcomes for various operations in this …\nAn error originating from <code>DateTimeInput</code>.\nThe same field occurs multiple times in a pattern or was …\nThe FixedDecimalFormatter is not loaded\nAn error originating from FixedDecimalFormatter\nAn error originating from the <code>Write</code> trait.\nAn error from mixing calendar types in <code>DateTimeFormatter</code>\nAn error from mixing calendar types in <code>DateTimeFormatter</code>\nMissing date symbols\nAn error originating from a missing field in datetime …\nAn error originating from a missing month symbol in the …\nThe names for the given field are not loaded\nordinal_rules must be set for …\nMissing time symbols\nAn error originating from a missing weekday symbol in the …\nAn error originating from parsing a pattern.\nAn error originating from <code>PluralRules</code>.\nAn error originating from an unsupported field in a …\nAn unsupported field with a field length.\nAn error due to there being no patterns for the given …\nThe calendar kind of the input object (date being …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe calendar kind of the target object (formatter).\nAbbreviated (spellout) format.\nField symbol for the AM, PM day period.  (Does not include …\nField symbol for calendar year (numeric).\nField symbol for cyclic year; used in calendars where …\nAn enum for the possible symbols of a day field in a date …\nDay number relative to a time period longer than a week …\nField symbol for day of month (numeric).\nField symbol for the day of week occurrence relative to …\nField symbol for day of year (numeric).\nAn enum for the possible symbols of a day period field in …\nName of a period within a day.\n<code>ULE</code> type for DayPeriod\n<code>ULE</code> type for Day\nEra name.\nAn error relating to the field for a date pattern field as …\nA field within a date pattern string, also referred to as …\nAn enum representing the length of a field within a date …\nVarious numeric overrides for datetime patterns as found …\nA field symbol for a date formatting pattern. Field …\n<code>ULE</code> type for <code>FieldSymbol</code>\n<code>ULE</code> type for <code>Field</code>\nA fixed size format for numeric-only fields that is at …\nField symbol for month number or name in a pattern that …\nField symbol for day of week (text format only).\nField symbol for fractional second (numeric).\nField symbol for numeric hour [0-11].\nField symbol for numeric hour [1-12].\nField symbol for numeric hour [0-23].\nField symbol for numeric hour [1-24].\n<code>hanidays</code>\n<code>hanidec</code>\n<code>hebr</code>\nAn enum for the possible symbols of an hour field in a …\nHour number within a day, possibly with day period.\n<code>ULE</code> type for Hour\nInvalid character for a field symbol.\nInvalid field symbol index.\nThe length of the field string within the pattern is …\nAn error originating inside of the data provider.\n<code>jpnyear</code>\nAn error relating to the length of a field within a date …\nField symbol for day of week; numeric formats produce a …\nField symbol for the generic non-location format of a time …\nField symbol for either the ISO8601 basic format or …\nField symbol for the specific non-location format of a …\nField symbol for milliseconds in day (numeric).\nMinute number within an hour.\nField symbol for the modified Julian day (numeric).\nAn enum for the possible symbols of a month field in a …\nMonth number or month name.\n<code>ULE</code> type for Month\nNarrow / Long / Full  (spellout) format.\nField symbol for the am, pm, noon, midnight day period.\nFieldLength::One (numeric), but overridden with a …\nTypical style is 1-2 digits. For numeric-only fields.\nField symbol for related ISO; some calendars which use …\n<code>romanlow</code>\nAn enum for the possible symbols of a second field in a …\nSeconds number within a minute, including fractional …\nField symbol for second (numeric).\n<code>ULE</code> type for Second\nMeaning is field-dependent, for patterns that are 6 …\nField symbol for a “stand-alone” month number or name.\nField symbol for stand-alone local day of week number/name.\nAn error relating to the field symbol for a date pattern …\nAn enum for the possible symbols of a time zone field in a …\nTime zone as a name, a zone ID, or a ISO 8601 numerical …\n<code>ULE</code> type for TimeZone\nTypical style is 2 digits. For numeric-only fields.\nUnknown field symbol.\nField symbol for the localized GMT format of a time zone.\nField symbol for any of: the time zone id, time zone …\nField symbol for either the ISO8601 basic format or …\nField symbol for any of: the ISO8601 basic format with …\nAn enum for the possible symbols of a week field in a date …\nWeek number or week name.\nField symbol for year in “week of year”.\nField symbol for week of month (numeric).\nField symbol for week of year (numeric).\n<code>ULE</code> type for Week\nAn enum for the possible symbols of a weekday field in a …\nDay number or day name relative to a week.\n<code>ULE</code> type for Weekday\nWide / Long / Full  (spellout) format.\nAn enum for the possible symbols of a year field in a date …\nYear number or year name.\n<code>ULE</code> type for Year\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of the <code>Field</code>, which in conjunction with the …\nThe field symbol for the <code>Field</code>, which corresponds to the …\nAbbreviated (spellout) format.\nFirst index used for fixed size formats in compact …\nFirst index used for numeric overrides in compact …\nAn enum representing the length of a field within a date …\nVarious numeric overrides for datetime patterns as found …\nA fixed size format for numeric-only fields that is at …\n<code>hanidays</code>\n<code>hanidec</code>\n<code>hebr</code>\nThe length of the field string within the pattern is …\n<code>jpnyear</code>\nAn error relating to the length of a field within a date …\nNarrow / Long / Full  (spellout) format.\nFieldLength::One (numeric), but overridden with a …\nTypical style is 1-2 digits. For numeric-only fields.\n<code>romanlow</code>\nMeaning is field-dependent, for patterns that are 6 …\nTypical style is 2 digits. For numeric-only fields.\nWide / Long / Full  (spellout) format.\nConvert this to the corresponding string code\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField symbol for the AM, PM day period.  (Does not include …\nField symbol for calendar year (numeric).\nField symbol for cyclic year; used in calendars where …\nAn enum for the possible symbols of a day field in a date …\nDay number relative to a time period longer than a week …\nField symbol for day of month (numeric).\nField symbol for the day of week occurrence relative to …\nField symbol for day of year (numeric).\nAn enum for the possible symbols of a day period field in …\nName of a period within a day.\n<code>ULE</code> type for DayPeriod\n<code>ULE</code> type for Day\nEra name.\nA field symbol for a date formatting pattern. Field …\n<code>ULE</code> type for <code>FieldSymbol</code>\nField symbol for month number or name in a pattern that …\nField symbol for day of week (text format only).\nField symbol for fractional second (numeric).\nField symbol for numeric hour [0-11].\nField symbol for numeric hour [1-12].\nField symbol for numeric hour [0-23].\nField symbol for numeric hour [1-24].\nAn enum for the possible symbols of an hour field in a …\nHour number within a day, possibly with day period.\n<code>ULE</code> type for Hour\nInvalid character for a field symbol.\nInvalid field symbol index.\nField symbol for day of week; numeric formats produce a …\nField symbol for the generic non-location format of a time …\nField symbol for either the ISO8601 basic format or …\nField symbol for the specific non-location format of a …\nField symbol for milliseconds in day (numeric).\nMinute number within an hour.\nField symbol for the modified Julian day (numeric).\nAn enum for the possible symbols of a month field in a …\nMonth number or month name.\n<code>ULE</code> type for Month\nField symbol for the am, pm, noon, midnight day period.\nField symbol for related ISO; some calendars which use …\nAn enum for the possible symbols of a second field in a …\nSeconds number within a minute, including fractional …\nField symbol for second (numeric).\n<code>ULE</code> type for Second\nField symbol for a “stand-alone” month number or name.\nField symbol for stand-alone local day of week number/name.\nAn error relating to the field symbol for a date pattern …\nAn enum for the possible symbols of a time zone field in a …\nTime zone as a name, a zone ID, or a ISO 8601 numerical …\n<code>ULE</code> type for TimeZone\nUnknown field symbol.\nField symbol for the localized GMT format of a time zone.\nField symbol for any of: the time zone id, time zone …\nField symbol for either the ISO8601 basic format or …\nField symbol for any of: the ISO8601 basic format with …\nAn enum for the possible symbols of a week field in a date …\nWeek number or week name.\nField symbol for year in “week of year”.\nField symbol for week of month (numeric).\nField symbol for week of year (numeric).\n<code>ULE</code> type for Week\nAn enum for the possible symbols of a weekday field in a …\nDay number or day name relative to a week.\n<code>ULE</code> type for Weekday\nAn enum for the possible symbols of a year field in a date …\nYear number or year name.\n<code>ULE</code> type for Year\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a field variant from an index.\nRetrieves a field variant from an index.\nRetrieves a field variant from an index.\nRetrieves a field variant from an index.\nRetrieves a field variant from an index.\nRetrieves a field variant from an index.\nRetrieves a field variant from an index.\nRetrieves a field variant from an index.\nRetrieves a field variant from an index.\nSkeletons are a Vec, and represent the Fields that can be …\nSymbols are necessary components of <code>Pattern</code> struct which …\nRetrieves an index of the field variant.\nRetrieves an index of the field variant.\nRetrieves an index of the field variant.\nRetrieves an index of the field variant.\nRetrieves an index of the field variant.\nRetrieves an index of the field variant.\nRetrieves an index of the field variant.\nRetrieves an index of the field variant.\nRetrieves an index of the field variant.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt to construct the value from its corresponding …\nAttempt to construct the value from its corresponding …\nAttempt to construct the value from its corresponding …\nAttempt to construct the value from its corresponding …\nAttempt to construct the value from its corresponding …\nAttempt to construct the value from its corresponding …\nAttempt to construct the value from its corresponding …\nAttempt to construct the value from its corresponding …\nAttempt to construct the value from its corresponding …\nA collection of code for formatting DateTimes with time …\nCyclic year overflow\nError for <code>TryWriteable</code> implementations\n<code>FormattedDateTime</code> is a intermediate structure which can be …\nMissing DateSymbols\nMissing era symbol\nMissing FixedDecimalFormatter\nIncomplete input\nMissing month symbol\nMissing OrdinalRules\nMissing TimeSymbols\nMissing WeekCalculator\nMissing weekday symbol\nWhat data is required to format a given pattern.\nUnsupported field\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax\nValue\n<code>FormattedTimeZone</code> is a intermediate structure which can be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrite time zone with no fallback.\nFormat time zone with fallbacks.\n<code>FormattedTimeZone</code> is a intermediate structure which can be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerates a test that checks the stack size of an item and …\nThe calendar this date relates to\nA list of error outcomes for various operations in this …\nAn error originating inside of the data provider.\nRepresentation of a formattable calendar date. Supports …\nA combination of a formattable calendar date and ISO time.\nA day number in a month. Usually 1-based.\nA day of week in month. 1-based.\nA struct containing various details about the position of …\nA <code>DateTimeInput</code> type with all of the fields pre-extracted\nA <code>TimeZoneInput</code> type with all of the fields pre-extracted\nRepresentation of a formattable month.\nRepresentation of a formattable year.\nAn ISO-8601 hour component, for use with ISO calendars.\nAn ISO-8601 minute component, for use with ISO calendars.\nAn ISO-8601 second component, for use with ISO calendars.\nRepresentation of a time of day according to ISO-8601 …\nA weekday in a 7-day week, according to ISO-8601.\nA formattable calendar date and ISO time that takes the …\nAn operation required a calendar but a calendar was not …\nMissing required input field for formatting\nA fractional second component, stored as nanoseconds.\nOut of range\nAn input overflowed its range.\nAn input could not be parsed.\nA representation of a time in hours, minutes, seconds, and …\nRepresentation of a formattable time zone.\nAn input underflowed its range.\nNo support for a given calendar in AnyCalendar\nUnknown era\nUnknown month code for a given calendar\nA week number in a month. Usually 1-based.\nA week number in a year. Usually 1-based.\nGets the kind of calendar this date is for, if associated …\nThe month code, used to distinguish months during leap …\nThe year in the current cycle for cyclic calendars …\nA reference to this instance’s <code>DateTimeInput</code>.\nGets the day input.\nThe day of week in this month.\nThe current day of the year, 1-based.\nGets information on the position of the day within the …\nThe number of days in the previous year.\nThe number of days in a year.\nThe era containing the year.\nConstruct given an instance of a <code>DateTimeInput</code>.\nConstruct given an instance of a [<code>ZonedDateTimeInput</code>].\nConstruct given an instance of a <code>DateTimeInput</code>.\nConstruct given an instance of a <code>DateTimeInput</code>.\nTODO(#487): Implement flexible day periods.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from an ISO-8601 weekday number to an <code>IsoWeekday</code> …\nReturns the argument unchanged.\nThe GMT offset in Nanoseconds.\nGets the hour input.\n0-based hour.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the weekday input.\nThe metazone identifier.\nConstruct a new <code>Time</code> representing midnight (00:00.000)\nGets the minute input.\n0-based minute.\nGets the month input.\nGets the nanosecond input.\nFractional second\nConstruct a new Year given an era and number\nConstruct a new <code>Time</code>, without validating that all …\nThe next year.\nGets the numeric value for this component.\nGets the numeric value for this component.\nGets the numeric value for this component.\nGets the numeric value for this component.\nThe year number in the current era (usually 1-based).\nThe month number in this given year. For calendars with …\nThe previous year.\nThe related ISO year. This is normally the ISO (proleptic …\nGets the second input.\n0-based second.\nThe IANA time-zone identifier.\nConverts date to ISO\nAttempts to add two values. Returns <code>Some</code> if the sum is …\nAttempts to add two values. Returns <code>Some</code> if the sum is …\nAttempts to add two values. Returns <code>Some</code> if the sum is …\nAttempts to add two values. Returns <code>Some</code> if the sum is …\nConstruct a new <code>Time</code>, whilst validating that all …\nAttempts to subtract two values. Returns <code>Some</code> if the …\nAttempts to subtract two values. Returns <code>Some</code> if the …\nAttempts to subtract two values. Returns <code>Some</code> if the …\nAttempts to subtract two values. Returns <code>Some</code> if the …\nCreate an error when an <code>AnyCalendarKind</code> is expected but …\nThe week of the month.\nThe week number of the year and the corresponding year.\nGets the era and year input.\nCreates a new value at 0.\nCreates a new value at 0.\nCreates a new value at 0.\nCreates a new value at 0.\nThe time variant (e.g. “daylight”, “standard”)\nThe name of the field\nThe name of the field\nThe maximum value\nThe minimum value\nA bag of options which, together with <code>Locale</code>, defines how …\nBag of lengths for date and time.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLength is a model of encoding information on how to format …\n🚧 [Experimental] Types to hold user preferences to …\nA structure to represent the set of lengths in which the …\nRepresents different lengths a <code>DateTimeInput</code> implementer …\nFull length, usually with weekday name.\nFull length, with spelled out time zone name.\nLong length, with wide month name.\nFull length, usually with short time-zone code.\nMedium length.\nFull length, usually with seconds.\nShort length, usually with numeric month.\nFull length, usually without seconds.\nRepresents different length lengths a <code>DateTimeInput</code> …\nConfigure the date part of the datetime.\nConstructs a Bag with medium date and time options\nConstructs a <code>Bag</code> with all fields set to <code>None</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>Bag</code> given a <code>date</code> field (<code>time</code> set to <code>None</code>)\nConstructs a Bag given a date and time field\nConstructs a <code>Bag</code> given a <code>time</code> field (<code>date</code> set to <code>None</code>)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigure the time part of the datetime.\nStores user preferences which may affect the result of …\nHour is formatted to be in range 0-11 where midnight is …\nHour is formatted to be in range 1-12 where midnight is …\nHour is formatted to be in range 0-23 where midnight is …\nHour is formatted to be in range 1-24 where midnight is …\nA user preference for adjusting how the hour component is …\nConvert the HourCycle preference to a field.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>Bag</code> from a given <code>DataLocale</code>\nThe hour cycle can be adjusts according to user …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBaked data\nData structs for calendar-specific symbols and patterns.\nTraits for managing data needed by <code>TypedDateTimeFormatter</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nData provider structs for time zones.\nMarker type for <code>DateLengthsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateLengthsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateLengthsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateLengthsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nPattern data for dates. 📏 This item has a stack size of …\nSymbol data for the months, weekdays, and eras needed to …\nString data for the name, abbreviation, and narrow form of …\nMarker type for <code>DateLengthsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateLengthsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateLengthsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateLengthsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateLengthsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateLengthsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateLengthsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateLengthsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateLengthsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nPattern data for times. 📏 This item has a stack size of …\nMarker type for <code>TimeLengthsV1</code>: “datetime/timelengths@1”\nSymbol data for the day periods needed to format a time.\nMarker type for <code>TimeSymbolsV1</code>: “datetime/timesymbols@1”\nSymbol data for era abbreviations.\nDate pattern data, broken down by pattern length.\nFormatting symbols for <code>DayPeriod</code>.\nSymbol data for day periods.\nSymbol data for eras.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPatterns used to combine date and time length patterns …\nFormatting symbols for <code>Month</code>.\nSymbol data for months.\nSymbol data for era names.\nSymbol data for era narrow forms.\nData structs for date / time patterns that store data …\nBy default a locale will prefer one hour cycle type over …\nThese patterns are common uses of time formatting, broken …\nThese patterns are common uses of time formatting, broken …\nFormatting symbols for <code>Weekday</code>.\nSymbol data for weekdays.\nThe struct containing the symbol data for DayPeriod that …\nSymbol data for the “format” style formatting of …\nSymbol data for the “stand-alone” style formatting of …\nLocale data for DayPeriod corresponding to the symbols.\nAbbreviated length symbol for “stand-alone” style …\nAbbreviated length symbol for “format” style symbol …\nDay period for AM (before noon).\nThe symbol data for “format” style symbols.\nDay period for midnight, in locales that support it.\nNarrow length symbol for “stand-alone” style symbol …\nNarrow length symbol for “format” style symbol for …\nDay period for noon, in locales that support it.\nDay period for PM (after noon).\nShort length symbol for “stand-alone” style symbol for …\nShort length symbol for “format” style symbol for …\nThe symbol data for “stand-alone” style symbols.\nWide length symbol for “stand-alone” style symbol for …\nWide length symbol for “format” style symbol for …\nThe struct containing the symbol data for Month that …\nSymbol data for the “format” style formatting of Month.\nA calendar with an arbitrary number of months, potentially …\nTwelve symbols for a solar calendar\nSymbol data for the “stand-alone” style formatting of …\nLocale data for Month corresponding to the symbols.\nAbbreviated length symbol for “stand-alone” style …\nAbbreviated length symbol for “format” style symbol …\nThe symbol data for “format” style symbols.\nNarrow length symbol for “stand-alone” style symbol …\nNarrow length symbol for “format” style symbol for …\nShort length symbol for “stand-alone” style symbol for …\nShort length symbol for “format” style symbol for …\nThe symbol data for “stand-alone” style symbols.\nWide length symbol for “stand-alone” style symbol for …\nWide length symbol for “format” style symbol for …\nData struct for generic date/time patterns, broken down by …\nA general purpose pattern representation. Used for …\nHelper struct used to allow for projection of …\nData struct for date/time patterns broken down by pattern …\nHelper struct used to allow for projection of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA full length date/time pattern.\nA full length glue pattern of other formatted elements.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA long length date/time pattern.\nA long length glue pattern of other formatted elements.\nA medium length date/time pattern.\nA medium length glue pattern of other formatted elements.\nA short length date/time pattern.\nA short length glue pattern of other formatted elements.\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nSymbol data for the months, weekdays, and eras needed to …\nString data for the name, abbreviation, and narrow form of …\nSymbol data for the months, weekdays, and eras needed to …\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nMarker type for <code>DateSymbolsV1</code>: “…\nSymbol data for the day periods needed to format a time.\nMarker type for <code>TimeSymbolsV1</code>: “datetime/timesymbols@1”\nSymbol data for era abbreviations.\nFormatting symbols for <code>DayPeriod</code>.\nSymbol data for day periods.\nSymbol data for eras.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFormatting symbols for <code>Month</code>.\nSymbol data for months.\nSymbol data for era names.\nSymbol data for era narrow forms.\nFormatting symbols for <code>Weekday</code>.\nSymbol data for weekdays.\nThe struct containing the symbol data for DayPeriod that …\nSymbol data for the “format” style formatting of …\nSymbol data for the “stand-alone” style formatting of …\nLocale data for DayPeriod corresponding to the symbols.\nAbbreviated length symbol for “stand-alone” style …\nAbbreviated length symbol for “format” style symbol …\nDay period for AM (before noon).\nThe symbol data for “format” style symbols.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDay period for midnight, in locales that support it.\nNarrow length symbol for “stand-alone” style symbol …\nNarrow length symbol for “format” style symbol for …\nDay period for noon, in locales that support it.\nDay period for PM (after noon).\nShort length symbol for “stand-alone” style symbol for …\nShort length symbol for “format” style symbol for …\nThe symbol data for “stand-alone” style symbols.\nWide length symbol for “stand-alone” style symbol for …\nWide length symbol for “format” style symbol for …\nThe struct containing the symbol data for Month that …\nSymbol data for the “format” style formatting of Month.\nA calendar with an arbitrary number of months, potentially …\nTwelve symbols for a solar calendar\nSymbol data for the “stand-alone” style formatting of …\nLocale data for Month corresponding to the symbols.\nAbbreviated length symbol for “stand-alone” style …\nAbbreviated length symbol for “format” style symbol …\nThe symbol data for “format” style symbols.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the symbol for the given month code\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNarrow length symbol for “stand-alone” style symbol …\nNarrow length symbol for “format” style symbol for …\nShort length symbol for “stand-alone” style symbol for …\nShort length symbol for “format” style symbol for …\nThe symbol data for “stand-alone” style symbols.\nWide length symbol for “stand-alone” style symbol for …\nWide length symbol for “format” style symbol for …\nThe struct containing the symbol data for Weekday that …\nSymbol data for the “format” style formatting of …\nSymbol data for the “stand-alone” style formatting of …\nLocale data for Weekday corresponding to the symbols.\nAbbreviated length symbol for “stand-alone” style …\nAbbreviated length symbol for “format” style symbol …\nThe symbol data for “format” style symbols.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNarrow length symbol for “stand-alone” style symbol …\nNarrow length symbol for “format” style symbol for …\nShort length symbol for “stand-alone” style symbol for …\nShort length symbol for “format” style symbol for …\nThe symbol data for “stand-alone” style symbols.\nWide length symbol for “stand-alone” style symbol for …\nWide length symbol for “format” style symbol for …\nThe struct containing the symbol data for Weekday that …\nSymbol data for the “format” style formatting of …\nSymbol data for the “stand-alone” style formatting of …\nLocale data for Weekday corresponding to the symbols.\nAbbreviated length symbol for “stand-alone” style …\nAbbreviated length symbol for “format” style symbol …\nThe symbol data for “format” style symbols.\nNarrow length symbol for “stand-alone” style symbol …\nNarrow length symbol for “format” style symbol for …\nShort length symbol for “stand-alone” style symbol for …\nShort length symbol for “format” style symbol for …\nThe symbol data for “stand-alone” style symbols.\nWide length symbol for “stand-alone” style symbol for …\nWide length symbol for “format” style symbol for …\nInternal enum to represent the kinds of month symbols for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetermine the appropriate <code>Pattern</code> for a given …\nGets the day period symbol.\nGets the era symbol, or <code>None</code> if data is loaded but symbol …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine the appropriate <code>Pattern</code> for a given …\nDetermine the appropriate <code>Pattern</code> for a given …\nDetermine the appropriate <code>Pattern</code> for a given …\nDetermine the appropriate <code>Pattern</code> for a given …\nAn ICU4X mapping to the CLDR timeZoneNames exemplar cities.\nMarker type for <code>ExemplarCitiesV1</code>: “…\nAn ICU4X mapping to the long-form generic metazone names. …\nMarker type for <code>MetazoneGenericNamesLongV1</code>: “…\nAn ICU4X mapping to the short-form generic metazone names. …\nMarker type for <code>MetazoneGenericNamesShortV1</code>: “…\nMetazone ID in a compact format\nAn ICU4X mapping to the long-form specific metazone names. …\nMarker type for <code>MetazoneSpecificNamesLongV1</code>: “…\nAn ICU4X mapping to the short-form specific metazone names.\nMarker type for <code>MetazoneSpecificNamesShortV1</code>: “…\nTimeZone ID in BCP47 format\nAn ICU4X mapping to the CLDR timeZoneNames format strings. …\nMarker type for <code>TimeZoneFormatsV1</code>: “time_zone/formats@1…\nThe default mapping between metazone id and localized …\nThe default mapping between metazone id and localized …\nThe default mapping between metazone id and localized …\nThe default mapping between metazone id and localized …\nThe format string to fall back to if data is unavailable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe localized GMT-offset format.\nThe fallback of GMT-offset.\nThe localized GMT format with no offset.\nThe hour format for displaying GMT offsets.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe override mapping between timezone id and localized …\nThe override mapping between timezone id and localized …\nThe override mapping between timezone id and localized …\nThe override mapping between timezone id and localized …\nThe format string for a region.\nThe format strings for region format variants e.g. …\nUntyped versions of TypedDateTimeFormatter and …\nThis is the internal “raw” version of …\nTakes a <code>IsoTimeInput</code> implementer and returns an instance …\nTakes a <code>DateInput</code> implementer and returns an instance of a …\nTakes a <code>DateTimeInput</code> implementer and returns an instance …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TimeFormatter</code> regardless of whether there …\nCreates a new <code>DateTimeFormatter</code> regardless of whether …\nCreates a new <code>DateTimeFormatter</code> regardless of whether …\nThis is the internal “raw” version of …\nTakes a [<code>ZonedDateTimeInput</code>] implementer and returns an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nISO-8601 Basic Format. Formats zero-offset numerically. …\nISO-8601 Extended Format. Formats zero-offset numerically. …\nAn enum for time zone fallback formats.\nThe ISO 8601 format for time zone format fallback.\nDetermines which ISO-8601 format should be used to format …\nWhether the minutes field should be optional or required …\nWhether the seconds field should be optional or excluded …\nThe localized GMT format for time zone format fallback.\nSeconds are not displayed.\nDo not add zero-padding.\nAdd zero-padding.\nMinutes are displayed only if they are non-zero.\nSeconds are displayed only if they are non-zero.\nMinutes are always displayed.\nA container contains all data payloads for CustomTimeZone.\n<code>TimeZoneFormatter</code> is available for users who need to …\nA bag of options to define how time zone will be formatted.\nISO-8601 Basic Format. Formats zero-offset with the …\nISO-8601 Extended Format. Formats zero-offset with the …\nWhether a field should be zero-padded in ISO-8601 format.\nThe exemplar cities for time zones.\nThe time zone format fallback option.\nTries to write the timezone to the sink. If a …\nTakes a <code>TimeZoneInput</code> implementer and returns an instance …\nWrites the time zone in long generic non-location format …\nWrites the time zone in short generic non-location format …\nWrites the time zone in long specific non-location format …\nWrites the time zone in short specific non-location format …\nWrites the time zone in generic location format as defined …\nWrites the time zone in localized GMT format according to …\nWrites a <code>GmtOffset</code> in ISO-8601 format according to the …\nFormats a time segment with optional zero-padding.\nTakes a <code>TimeZoneInput</code> implementer and returns a string …\nFormats the GMT offset, or falls back to a fallback …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInclude generic-location format for timezone from compiled …\nInclude generic-non-location-long format for timezone from …\nInclude generic-non-location-short format for timezone …\nInclude ISO-8601 format for timezone. For example, “…\nInclude localized-GMT format for timezone. For example, “…\nInclude specific-non-location-long format for timezone …\nInclude specific-non-location-short format for timezone …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a resource into its destination if the destination …\nLoad exemplar-city format for timezone. For example, “…\nLoad generic-location format for timezone. For example, “…\nLoad generic-non-location-long format for timezone. For …\nLoad generic-non-location-short format for timezone. For …\nAlias to <code>TimeZoneFormatter::include_iso_8601_format</code>.\nAlias to <code>TimeZoneFormatter::include_localized_gmt_format</code>.\nLoad specific-non-location-long format for timezone. For …\nLoad specific-non-location-short format for timezone. For …\nThe generic long metazone names, e.g. Pacific Time\nThe generic short metazone names, e.g. PT\nThe specific long metazone names, e.g. Pacific Daylight …\nThe specific short metazone names, e.g. Pacific Daylight …\nCreates a new <code>TimeZoneFormatter</code> with a GMT or ISO format …\nConstructor that selectively loads data based on what is …\nA version of <code>Self::try_new</code> that uses custom data provided …\nA version of <code>Self::try_new</code> that uses custom data provided …\nThe data that contains meta information about how to …\nThe composition of <code>TypedDateTimeFormatter</code> and …\nTakes a <code>DateTimeInput</code> and a <code>TimeZoneInput</code> and returns an …\nTakes a <code>DateTimeInput</code> and a <code>TimeZoneInput</code> and returns it …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor that takes a selected locale and a list of …\nA version of <code>Self::try_new</code> that uses custom data provided …\nA version of <code>Self::try_new</code> that uses custom data provided …")