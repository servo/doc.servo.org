searchState.loadedDescShard("atomic_refcell", 0, "Implements a container type providing RefCell-like …\nA wrapper type for an immutably borrowed value from an …\nA threadsafe analogue to RefCell.\nA wrapper type for a mutably borrowed value from an …\nAn error returned by <code>AtomicRefCell::try_borrow</code>.\nAn error returned by <code>AtomicRefCell::try_borrow_mut</code>.\nReturns a raw pointer to the underlying data in this cell.\nImmutably borrows the wrapped value.\nMutably borrows the wrapped value.\nCopies an <code>AtomicRef</code>.\nMake a new <code>AtomicRef</code> for an optional component of the …\nMake a new <code>AtomicRefMut</code> for an optional component of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the wrapped value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>AtomicRefCell</code>, returning the wrapped value.\nMake a new <code>AtomicRef</code> for a component of the borrowed data.\nMake a new <code>AtomicRefMut</code> for a component of the borrowed …\nCreates a new <code>AtomicRefCell</code> containing <code>value</code>.\nAttempts to immutably borrow the wrapped value, but …\nAttempts to mutably borrow the wrapped value, but instead …")