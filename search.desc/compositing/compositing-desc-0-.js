searchState.loadedDescShard("compositing", 0, "Draw to an offscreen OpenGL framebuffer object, which can …\nNB: Never block on the constellation, because sometimes …\nData used to construct a compositor.\nDraw to a PNG file on disk, then exit the browser (for …\nDraw to an uncompressed image in shared memory.\nDraw directly to a window.\nThe type of composition to perform\nTracks whether we should composite this frame.\nThe channel on which messages can be sent to the …\nA channel to the constellation.\nTrue to translate mouse input into touch events.\nCurrent mouse cursor.\nCurrent cursor position.\nThe coordinates of the native window, its view and the …\nTrue to exit after page load (‘-x’).\nThe current frame tree ID (used to reject old paint …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether to invalidate <code>prev_offscreen_framebuffer</code> at the …\nThe <code>Instant</code> of the last animation tick, used to avoid …\nA channel to the memory profiler thread.\nViewport zoom constraints provided by @viewport.\nOffscreen framebuffer object to render our next frame to. …\n“Desktop-style” zoom that resizes the viewport to fit …\nThe number of frames pending to receive from WebRender.\nMap of the pending paint metrics per Layout. The Layout …\nPending scroll/zoom events.\nTracks details about each active pipeline that the …\nThe port on which we receive messages.\nOffscreen framebuffer object for our …\nUsed by the logic that determines when it is safe to …\nA port on which messages inbound to the compositor can be …\nThe surfman instance that webrender targets\nA channel to the compositor.\nTracks whether we are in the process of shutting down, or …\nThe channel on which messages can be sent to the time …\nA channel to the time profiler thread.\nTouch input state machine\nThe string representing the version of Servo that is …\n“Mobile-style” zoom that does not reflow the page.\nWaiting for external code to call present.\nThe webrender renderer.\nInstance of webrender API\nThe webrender interface, if enabled.\nThe active webrender document.\nThe GL bindings for webrender\nOur top-level browsing contexts.\nSome XR devices want to run on the main thread.\nThe application window.\nAbstract windowing methods. The concrete implementations …\nTracks whether the zoom action has happened recently.\nThe time of the last zoom action has started.\nWe’re performing a composite to run an animation.\nWhy we performed a composite. This is used for debugging.\nDraw to an offscreen OpenGL framebuffer object, which can …\nWe’re performing the single composite in headless mode.\nNB: Never block on the constellation, because sometimes …\nA new WebRender frame has arrived.\nAn pinch zoom event that magnifies the view by the given …\nDraw to a PNG file on disk, then exit the browser (for …\nHolds the state when running reftests that determines when …\nThe window has been resized and will need to be …\nA scroll event that scrolls the scroll node at the given …\nDraw to an uncompressed image in shared memory.\nDraw directly to a window.\nReturns true if any animation callbacks (ie …\nWhether there are animation callbacks\nWhether animations are running\nSets or unsets the animations-running flag for the given …\nComposite to the given target if any, or the current …\nThe type of composition to perform\nTracks whether we should composite this frame.\nThe channel on which messages can be sent to the …\nTrue to translate mouse input into touch events.\nCurrent mouse cursor.\nApply changes to the frame at this location\nCurrent cursor position.\nThe coordinates of the native window, its view and the …\nThe number of OS events that have been coalesced together …\nTrue to exit after page load (‘-x’).\nThe current frame tree ID (used to reject old paint …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nQueue a new frame in the transaction and increase the …\nHandle messages sent to the compositor during the shutdown …\nAccept messages from content processes that need to be …\nHit test items for this pipeline. This is used to map …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe underlying native surface can be lost during servo’s …\nWhether to invalidate <code>prev_offscreen_framebuffer</code> at the …\nQuery the constellation to see if the current compositor …\nThe <code>Instant</code> of the last animation tick, used to avoid …\nViewport zoom constraints provided by @viewport.\nThe epoch of the most recent display list for this …\nOffscreen framebuffer object to render our next frame to. …\nReturn the OpenGL framebuffer name of the …\nSimulate a pinch zoom\n“Desktop-style” zoom that resizes the viewport to fit …\nThe id of the parent pipeline, if any.\nThe number of frames pending to receive from WebRender.\nMap of the pending paint metrics per Layout. The Layout …\nPending scroll/zoom events.\nThe pipeline associated with this PipelineDetails object.\nTracks details about each active pipeline that the …\nThe port on which we receive messages.\nOffscreen framebuffer object for our …\nIf there are any animations running, dispatches …\nUsed by the logic that determines when it is safe to …\nThe surfman instance that webrender targets\nRepaints and recomposites synchronously. You must be …\nOn Android, this function will be called when the app …\nScroll by this offset, or to Start or End\nPerform a hit test at the given <code>DevicePoint</code> and apply the …\nThe compositor-side ScrollTree. This is used to allow …\nSet the root pipeline for our WebRender scene to a display …\nSet the root pipeline for our WebRender scene to a display …\nTracks whether we are in the process of shutting down, or …\nhttp://w3c.github.io/touch-events/#mouse-events\nWhether to use less resources by stopping animations.\nThe channel on which messages can be sent to the time …\nTouch input state machine\nUpdate the given transaction with the scroll offsets of …\nThe string representing the version of Servo that is …\n“Mobile-style” zoom that does not reflow the page.\nWaiting for external code to call present.\nThe webrender renderer.\nThe webrender interface, if enabled.\nThe active webrender document.\nThe GL bindings for webrender\nOur top-level browsing contexts.\nSome XR devices want to run on the main thread.\nThe application window.\nTracks whether the zoom action has happened recently.\nThe time of the last zoom action has started.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSimulate a mouse click.\nScript is consuming the current touch sequence; don’t …\nSend a JavaScript event to content.\nA multi-touch gesture is in progress. Contains the number …\nDon’t do anything.\nNot tracking any touch point\nA single touch point is active and has started panning.\nA two-finger pinch zoom gesture is active.\nScroll by the provided offset.\nMinimum number of <code>DeviceIndependentPixel</code> to begin touch …\nThe action to take in response to a touch event\nThe states of the touch input state machine.\nA single touch point is active and may perform click or …\nA touchstart event was dispatched to the page, but the …\nZoom by a magnification factor and scroll by the provided …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the log target for an event, as a static string.\nLog an event from constellation at trace level.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true iff the painting order actually changed.\nReturns true iff the painting order actually changed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe order to paint them in, topmost last.\nReturns true iff the painting order actually changed.\nReturns true iff the painting order actually changed.\nOur top-level browsing contexts. In the WebRender scene, …\nSent when a navigation request from script is …\nMake none of the webviews focused.\nCapture current WebRender\nClear the network cache.\nClose a top-level browsing context.\nEvents that the embedder sends to Servo, including events …\nSent when the user exits from fullscreen mode\nMake a webview focused.\nSent when new Gamepad information is available.\nStop painting a webview.\nVirtual keyboard was dismissed\nSent when no message has arrived, but the event loop was …\nSent on platforms like Android where the native widget …\nSent when a key input state changes\nSent when a new URL is to be loaded.\nSent when the user triggers a media action through the UA …\nSent when a mouse hit test is to be performed.\nSent when a mouse move.\nMove and/or resize a webview to the given rect.\nSent when the user uses chrome navigation (i.e. backspace …\nCreate a new top-level browsing context.\nSimulated “pinch zoom” gesture for non-touch platforms …\nSent when the user quits the application\nStart painting a webview on top of all others, and …\nSent when part of the window is marked dirty and needs to …\nSent when Ctr+R/Apple+R is called to reload the current …\nSent on platforms like Android where system recreates a …\nSent when the user resets zoom to default.\nSent when the user scrolls. The first point is the delta …\nPanic a top-level browsing context.\nSet whether to use less resources, by stopping animations …\nStart painting a webview, and optionally stop painting all …\nToggle sampling profiler with the given sampling rate and …\nToggles a debug flag in WebRender\nTouch event: type, identifier, point\nVarious debug and profiling flags that WebRender supports.\nSent when user moves the mouse wheel.\nSent when the window is resized.\nSent when the user zooms.\nSize of the available screen space (screen without …\nReturns a thread-safe object to wake up the window’s …\nFlip the given rect. This should be used when drawing …\nSize of the GL buffer in the window.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the coordinates of the native window, the screen and …\nGet the flipped viewport rectangle. This should be used …\nReturns the protocol handlers implemented by that embedder.\nReturns the user agent string to report in network …\nReturns the version string of this embedder.\nGet the unflipped viewport rectangle for use with the …\nThe pixel density of the display.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister services with a WebXR Registry.\nGet the <code>RenderingContext</code> of this Window.\nSize of the screen.\nSet whether the application is currently animating. …\nCoordinates of the document within the framebuffer.\nPosition and size of the native window.")