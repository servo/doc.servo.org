searchState.loadedDescShard("tokio_stream", 0, "Stream utilities for Tokio.\nError returned by <code>Timeout</code> and <code>TimeoutRepeating</code>.\nStream for the <code>empty</code> function.\nConvert from a <code>Stream</code>.\nStream for the <code>iter</code> function.\nStream for the <code>once</code> function.\nStream for the <code>pending</code> function.\nAn extension trait for the <code>Stream</code> trait that provides a …\nCombine many streams into one, indexing each source stream …\nA <code>Stream</code> that wraps the values in an <code>Option</code>.\nAdapters for <code>Stream</code>s created by methods in <code>StreamExt</code>.\nCreates a stream that yields nothing.\nStreams stored in the map\nConverts an <code>Iterator</code> into a <code>Stream</code> which is always ready …\nCreates a stream that emits an element exactly once.\nCreates a stream that is never ready\nWrappers for Tokio types that implement <code>Stream</code>.\nStream returned by the <code>chain</code> method.\nStream returned by the <code>chunks_timeout</code> method.\nStream returned by the <code>filter</code> method.\nStream returned by the <code>filter_map</code> method.\nStream returned by <code>fuse()</code>.\nStream for the <code>map</code> method.\nStream for the <code>map_while</code> method.\nStream returned by the <code>merge</code> method.\nStream returned by the <code>chain</code> method.\nStream for the <code>skip</code> method.\nStream for the <code>skip_while</code> method.\nStream for the <code>take</code> method.\nStream for the <code>take_while</code> method.\nStream for the <code>then</code> method.\nStream returned by the <code>timeout</code> method.\nStream returned by the <code>timeout_repeating</code> method.\nStream for the <code>empty</code> function.\nCreates a stream that yields nothing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>iter</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts an <code>Iterator</code> into a <code>Stream</code> which is always ready …\nStream for the <code>once</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a stream that emits an element exactly once.\nStream for the <code>pending</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a stream that is never ready\nA <code>Stream</code> that wraps the values in an <code>Option</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet back the inner <code>Stream</code>.\nCreate a new <code>StreamNotifyClose</code>.\nAn extension trait for the <code>Stream</code> trait that provides a …\nTests if every element of the stream matches a predicate.\nTests if every element of the stream matches a predicate.\nTests if any element of the stream matches a predicate.\nTests if any element of the stream matches a predicate.\nCombine two streams into one by first returning all values …\nCombine two streams into one by first returning all values …\nBatches the items in the given stream using a maximum …\nBatches the items in the given stream using a maximum …\nDrain stream pushing all emitted values into a collection.\nDrain stream pushing all emitted values into a collection.\nFilters the values produced by this stream according to …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nFilters the values produced by this stream while …\nA combinator that applies a function to every element in a …\nA combinator that applies a function to every element in a …\nCreates a stream which ends after the first <code>None</code>.\nCreates a stream which ends after the first <code>None</code>.\nMaps this stream’s items to a different type, returning …\nMaps this stream’s items to a different type, returning …\nMap this stream’s items to a different type for as long …\nMap this stream’s items to a different type for as long …\nCombine two streams into one by interleaving the output of …\nCombine two streams into one by interleaving the output of …\nMerge the size hints from two streams.\nConsumes and returns the next value in the stream or <code>None</code> …\nConsumes and returns the next value in the stream or <code>None</code> …\nTurns the stream into a peekable stream, whose next …\nTurns the stream into a peekable stream, whose next …\nCreates a new stream that will skip the <code>n</code> first items of …\nCreates a new stream that will skip the <code>n</code> first items of …\nSkip elements from the underlying stream while the …\nSkip elements from the underlying stream while the …\nCreates a new stream of at most <code>n</code> items of the underlying …\nCreates a new stream of at most <code>n</code> items of the underlying …\nTake elements from this stream while the provided predicate\nTake elements from this stream while the provided predicate\nMaps this stream’s items asynchronously to a different …\nMaps this stream’s items asynchronously to a different …\nSlow down a stream by enforcing a delay between items.\nSlows down a stream by enforcing a delay between items.\nSlows down a stream by enforcing a delay between items.\nApplies a per-item timeout to the passed stream.\nApplies a per-item timeout to the passed stream.\nApplies a per-item timeout to the passed stream.\nApplies a per-item timeout to the passed stream.\nConsumes and returns the next item in the stream. If an …\nConsumes and returns the next item in the stream. If an …\nFuture for the <code>all</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>any</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream returned by the <code>chain</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream returned by the <code>chunks_timeout</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture returned by the <code>collect</code> method.\nConvert from a <code>Stream</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream returned by the <code>filter</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream returned by the <code>filter_map</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture returned by the <code>fold</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream returned by <code>fuse()</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>map</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>map_while</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream returned by the <code>merge</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>next</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream returned by the <code>chain</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPeek at the next item in the stream.\nStream for the <code>skip</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>skip_while</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>take</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>take_while</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>then</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>throttle</code> function. This object is <code>!Unpin</code>. …\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying stream that …\nAcquires a reference to the underlying stream that this …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying stream.\nError returned by <code>Timeout</code> and <code>TimeoutRepeating</code>.\nStream returned by the <code>timeout</code> method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStream returned by the <code>timeout_repeating</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>try_next</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCombine many streams into one, indexing each source stream …\nReturns the number of streams the map can hold without …\nClears the map, removing all key-stream pairs. Keeps the …\nReturns <code>true</code> if the map contains a stream for the …\nStreams stored in the map\nReturns the argument unchanged.\nInsert a key-stream pair into the map.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the map contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs mutably in …\nReturns an iterator visiting all keys in arbitrary order.\nReturns the number of streams in the map.\nCreates an empty <code>StreamMap</code>.\nReceives multiple items on this <code>StreamMap</code>, extending the …\nPolls the next value, includes the vec entry index\nPolls to receive multiple items on this <code>StreamMap</code>, …\nRemoves a key from the map, returning the stream at the …\nAn iterator visiting all values in arbitrary order.\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>StreamMap</code> with the specified capacity.\nFast random number generate\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitialize a new, thread-local, fast random number …\nA wrapper around <code>Interval</code> that implements <code>Stream</code>.\nA wrapper around <code>tokio::sync::mpsc::Receiver</code> that …\nA wrapper around <code>TcpListener</code> that implements <code>Stream</code>.\nA wrapper around <code>tokio::sync::mpsc::UnboundedReceiver</code> that …\nA wrapper around <code>UnixListener</code> that implements <code>Stream</code>.\nError types for the wrappers.\nA wrapper around <code>Interval</code> that implements <code>Stream</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet back the inner <code>Interval</code>.\nCreate a new <code>IntervalStream</code>.\nA wrapper around <code>tokio::sync::mpsc::Receiver</code> that …\nCloses the receiving half of a channel without dropping it.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet back the inner <code>Receiver</code>.\nCreate a new <code>ReceiverStream</code>.\nA wrapper around <code>tokio::sync::mpsc::UnboundedReceiver</code> that …\nCloses the receiving half of a channel without dropping it.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet back the inner <code>UnboundedReceiver</code>.\nCreate a new <code>UnboundedReceiverStream</code>.\nA wrapper around <code>TcpListener</code> that implements <code>Stream</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet back the inner <code>TcpListener</code>.\nCreate a new <code>TcpListenerStream</code>.\nA wrapper around <code>UnixListener</code> that implements <code>Stream</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet back the inner <code>UnixListener</code>.\nCreate a new <code>UnixListenerStream</code>.")