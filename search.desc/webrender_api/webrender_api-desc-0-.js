searchState.loadedDescShard("webrender_api", 0, "The <code>webrender_api</code> crate contains an assortment types and …\nEverything is Dirty, equivalent to Partial(image_bounds)\nAn object that can perform hit-testing without doing …\nA group of rasterization requests to execute synchronously …\nFour channels, byte storage.\nRenders a filtered region of its backdrop\nAnimated binding.\nBacking store for blob image command streams.\nMetadata (but not storage) for a blob image.\nError code for when blob rasterization failed.\nA handler on the render backend that can create rasterizer …\nAn opaque identifier describing a blob image registered …\nInput parameters for the BlobImageRasterizer.\nA key identifying blob image rasterization work requested …\nThe resources exposed by the resource cache available for …\nResult type for blob raserization.\napply blur effect parameters: stdDeviationX, stdDeviationY …\nBoolean configuration option.\napply brightness effect parameters: amount CSS filter …\nThe image is heap-allocated by the embedding.\nreference to another (earlier) node in filter graph\nA display list.\nDescribes the memory layout of a display list.\nAuxiliary buffer: contains the item data for item groups.\nA stage of the rendering pipeline.\nTemporary buffer: contains the data for pending item …\nClear an existing rect, used for special effects on some …\nClears all colors from the area, making it possible to cut …\nJust an abstraction for bundling up a bunch of clips into …\nA reference to a clipping node defining how an item is …\n10 bits image\n12 bits image\n16 bits image\n8 bits image (most common)\nSpecifies the color depth of an image. Currently only used …\nRepresents RGBA screen colors with floating point numbers.\ncbindgen:derive-eq=false\ntransform color and alpha in image through 4x5 color …\ncbindgen:derive-eq=false\nRepresents RGBA screen colors with one byte per channel.\nA grouping of fields a lot of display items need, just to …\nremap RGBA with color gradients and component swizzle …\nAvailable composite operoations for the composite filter …\nComputed reference frame which dynamically calculates the …\napply contrast effect parameters: amount CSS filter …\nCrash annotations included in crash reports.\nHandler to expose support for annotating crash reports.\nGuard to add a crash annotation at creation, and clear it …\nThe default tile size for blob images and regular images …\nRender each quad with their own draw call.\nDisable various bits of the WebRender pipeline, to help …\nThe main/default buffer: contains item data and item group …\nThis is a “complete” version of the DisplayItem, with …\nFlags to enable/disable various builtin debugging tools.\nScroll by a certain amount.\nThe possible states of a Dirty rect.\nDisplayListSection determines the target buffer for the …\nA key uniquely identifying a WebRender document.\nadd drop shadow version of image to the image parameters: …\nWhen using <code>generate_frame()</code>, a list of <code>PropertyValue</code> …\nPrint driver messages to stdout.\nDisplay the pipeline epochs.\nScroll to very bottom of element.\nAn epoch identifies the state of a pipeline in time.\nContains the error value\nAn image owned by the embedding, and referenced by …\nAn opaque pointer-sized value.\nThe data that an external client should provide about an …\nDescriptor for external image resources. See <code>ImageData</code>.\nThe interfaces that an application can implement to …\nAn arbitrary identifier for an external image provided by …\nThe source for an external image.\nStorage format identifier for externally-managed images.\nAn external identifier that uniquely identifies a scroll …\nInvalidate picture tiles every frames (useful when …\nSVG Filter Primitive. See: …\nAn input to a SVG filter primitive.\nSee: https://github.com/eqrion/cbindgen/issues/9 …\nFloating point configuration option.\nreplace image with a solid color NOTE: UNUSED; Gecko never …\nData corresponding to an instantiation of a font, with …\nHashable floating-point storage for font size.\nContainer for the raw data describing a font. This might …\nTaint the transparent area of the glyphs with a random …\nDisplay the contents of GPU cache.\nQuery the number of pixels that pass the depth test …\nDisplay GPU timing results.\nConstruct a gradient to be used in display lists.\nThe area\nfade image toward greyscale version of image parameters: …\nA flag in each scrollable frame to represent whether the …\nA minimal hit-testable item for the parent browser’s …\nReturned by <code>RenderApi::hit_test</code>.\nDescribe an item that matched a hit-test query.\nA hit tester requested to the render backend thread but …\nfade image toward hue-rotated version of image (rotate RGB …\nAn invalid sentinel FramePublishId, which will always …\nIf set, dump picture cache invalidation debug to console.\nID namespaces uniquely identify different users of …\nFilter that does no transformation of the colors, needed …\nSpecifies the type of texture target in driver terms.\nRepresents the backing store of an arbitrary series of …\nMetadata (but not storage) describing an image In …\nVarious flags that are part of an image descriptor.\nThis describes an image that fills the specified area. It …\nSpecifies the format of a series of pixels, in driver …\nAn opaque identifier describing an image registered with …\nInteger configuration option.\nAn invalid source.\nfade image toward inverted image (1 - RGB) parameters: …\nAn identifier used to refer to previously sent display …\nStats for an individual item\nA tag that can be used to identify items during hit …\ninternal use - convert linear input to sRGB output …\nDefined here for cbindgen\nEquivalent of empty() for the C++ side.\nA gl::GLuint texture handle.\nempty slot in feMerge inputs\nA handler to notify when a transaction reaches certain …\nA request to notify a handler when the transaction reaches …\nContains the success value\nOut of memory.\nmultiplies color and alpha by opacity parameters: amount …\nThe input is the original graphic that the filter is being …\nOther failure, embedding-specified.\nThe input is the output of the filter primitive at the …\nShow picture caching debug overlay\nHighlight all primitives with colors based on kind.\nCollect and dump profiler statistics to captures.\nDisplay the frame profiler on screen.\nA configuration option that can be changed at runtime.\nSome specific amount is dirty\nA perspective transform, that optionally scrolls relative …\nFrom the point of view of WR, <code>PipelineId</code> is completely …\nThis type carries no valuable semantics for WR. However, …\nRepresents pre-multiplied RGBA colors with floating point …\nThe input is the output of the previous filter primitive …\nInformation specific to a primitive type that uniquely …\nA binding property can either be a specific value (the …\nA key to identify an animated property binding.\nA unique key that is used for connecting animated property …\nThe current value of an animated property. This is …\nVarious settings that the caller can select based on …\nOne-channel, short storage\nOne-channel, byte storage. The “red” doesn’t map to …\nDisplay intermediate render targets on screen.\nWindow resize\nRender large blobs with at a smaller size (incorrectly). …\nTwo-channels, short storage. Similar to <code>R16</code>, this just …\nTwo-channels, byte storage. Similar to <code>R8</code>, this just means …\nFour channels, byte storage.\nFour channels, float storage.\nFour channels, signed integer storage.\nConfigure whether the contents of a stacking context …\nRepresentation of a rasterized blob image. This is …\nA simple series of bytes, provided by the embedding and …\nA raw pixel buffer.\nA solid or an animating color to draw (may not actually be …\nMaps from stacking context layout coordinates into …\nA handler to integrate WebRender with the thread that …\nFlags to track why we are rendering.\nThis describes a background-image and its tiling. It …\nShow an overlay displaying overdraw amount.\nScale the debug renderer down for a smaller screen. This …\nThe profiler only displays information that is out of the …\nGecko does some special things when it starts observing …\nEnable surface promotion logging.\ncombine 2 images with SVG_FEBLEND_MODE_COLOR parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_COLOR_BURN …\ncombine 2 images with SVG_FEBLEND_MODE_COLOR_DODGE …\ncombine 2 images with SVG_FEBLEND_MODE_DARKEN parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_DIFFERENCE …\ncombine 2 images with SVG_FEBLEND_MODE_EXCLUSION …\ncombine 2 images with SVG_FEBLEND_MODE_HARD_LIGHT …\ncombine 2 images with SVG_FEBLEND_MODE_HUE parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_LIGHTEN parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_LUMINOSITY …\ncombine 2 images with SVG_FEBLEND_MODE_MULTIPLY …\ncombine 2 images with SVG_FEBLEND_MODE_NORMAL parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_OVERLAY parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_SATURATION …\ncombine 2 images with SVG_FEBLEND_MODE_SCREEN parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_SOFT_LIGHT …\ntransform colors of image through 5x4 color matrix …\ntransform colors of image through configurable gradients …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ntransform image through convolution matrix of up to 25 …\ntransform image through convolution matrix of up to 25 …\ntransform image through convolution matrix of up to 25 …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncalculate a distorted version of first input image using …\ncreate and merge a dropshadow version of the specified …\nsynthesize a new image of specified size containing a …\ncreate a blurred version of the input image parameters: …\nFilter that does no transformation of the colors, used for …\nsynthesize a new image based on a url (i.e. blob image …\ncreate a new image based on the input image with the …\ncreate a new image based on the input image with the …\ncreate a new image that is a scrolled version of the input …\nrepresents CSS opacity property as a graph node like the …\nFilter that copies the SourceAlpha image into the …\nFilter that copies the SourceGraphic image into the …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncreate a new image based on the input image, repeated …\nconvert a color image to an alpha channel - internal use; …\nsynthesize a new image based on Fractal Noise (Perlin) …\nsynthesize a new image based on Fractal Noise (Perlin) …\nsynthesize a new image based on Turbulence Noise (offset …\nsynthesize a new image based on Turbulence Noise (offset …\nmultiply saturation of colors parameters: amount CSS …\nfade image toward sepia tone version of image parameters: …\nThe minimum time for the CPU portion of a frame to be …\nPer-primitive information about the nodes in the clip tree …\nA reference to a spatial node defining item positioning.\nDefines a caller provided key that is unique for a given …\ninternal use - convert sRGB input to linear output …\nScroll to very top of element.\nStandard reference frame which contains a precomputed …\nThe minimum and maximum allowable offset for a sticky …\nDisplay all texture cache pages on screen.\nClear evicted parts of the texture cache for debugging …\nSee Frame::must_be_drawn\nStandard texture. This maps to GL_TEXTURE_2D in OpenGL.\nExternal texture. This maps to GL_TEXTURE_EXTERNAL_OES in …\nExternal texture which is forced to be converted from YUV …\nThe image is texture-backed.\nRectangle texture. This maps to GL_TEXTURE_RECTANGLE in …\nWidth and height in device pixels of image tiles.\nNotificationRequests get notified with this if they get …\nA normal transform matrix, may contain perspective (the …\nVsync isn’t actually “why” we render but it can be …\nNon-animated value.\nA C function that takes a pointer to a heap allocation and …\nVarious widget-related reasons\nDisplay window visibility on screen.\nDraw a zoom widget showing part of the framebuffer zoomed …\nRegister a blob image.\nAdvances this FramePublishId to the next.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe animation id from the stacking context.\nWe need a separate rect from common.clip_rect to encode …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe area all the glyphs should be found in. Strictly …\nThe area to tile the gradient over (first tile starts at …\nThe area to tile the gradient over (first tile starts at …\nThe area to tile the gradient over (first tile starts at …\nThe area to tile the image over (first tile starts at …\nThe area to tile the image over (first tile starts at …\nId of the picture in question in a namespace unique to …\nThe second IPC time stamp: after serialization\nThe first IPC time stamp: before any work has been done\nSerde encoded DisplayItemCache structs\nThe size of the cache for this display list.\nFor multi-plane images (i.e. YUV), indicates the plane of …\nA hook to let the handler clean up any state related a …\nAdditional clips\nBounds of the display item to clip to. Many items are …\nA hack used by gecko to color a simple bitmap font used …\nA hack used by gecko to color a simple bitmap font used …\nbackground color\nNOTE: common.clip_rect is the area the gradient covers\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe size of the contents this contains (so the backend …\nCreates a snapshot of the current state of blob images in …\nCreates an empty blob handler of the same type.\nBacking store. The format is stored out of band in …\nShould just be initialized but never populated in release …\nDelete an already registered blob image.\nA hook to let the handler clean up any state related to a …\nA hook to let the handler clean up any state related to a …\nDescription of the format of the blob’s output image.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nAn optional sub-rectangle of the image to avoid …\nWhether to apply anti-aliasing on the border corners.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nWhether to allow rendering blobs on multiple threads.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nExtend the properties.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nA Gecko-specific notification mechanism to get some code …\nThe amount this scrollframe has already been scrolled by, …\nControls whether the center of the 9 patch image is …\nReturns a FramePublishId corresponding to the first frame.\nVarious flags describing properties of this primitive.\nVarious bool flags related to this descriptor.\nopacity\nIf true, disable creating separate picture cache slices …\nFormat of the image data.\nFormat for the data in the backing store.\nA stack of reference frame scopes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates the event from an opaque pointer-sized value.\nComponentTransfer / SVGFEComponentTransfer\nGecko specific information about the display list.\nReturns the <code>FontTemplate</code> for the given key.\nReturns the <code>FontInstanceData</code> for the given key, if found.\nWhether this scrollframe document has any scroll-linked …\nThe height of the 9-part image.\nDoes a hit test on display items in the specified …\nThe minimum and maximum horizontal offsets for this sticky …\nThe identifier of this external image, provided by the …\nStorage format identifier.\nvirtualized picture input binding 1 (i.e. texture source), …\nvirtualized picture input binding 2 (i.e. texture …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMagic invalid epoch value.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nList of items that are match the hit-test query.\nSerde encoded bytes. Mostly DisplayItems, but some mixed …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nA unique (per-pipeline) key for this spatial that is …\nA unique (per-pipeline) key for this spatial that is …\nA unique (per-pipeline) key for this spatial that is …\nUnique handle to the image.\nTrue if color_interpolation_filter == LinearRgb; shader …\nLock the external image. Then, WR could start to read the …\nThe margins that should be maintained between the edge of …\nThe maximum offset for this frame, typically a positive …\nThe minimum offset for this frame, typically a negative …\nWhether we are clipping inside or outside the region.\nConstructor.\nConstructor.\nConstructor.\nNotify the thread containing the <code>Renderer</code> that a new frame …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nEntry point of the handler to implement. Invoked by …\nCalled by WebRender at specified stages to notify the …\nHow many bytes we processed for this kind of item\nOffset in bytes of the first pixel of this image in its …\nWhether the rect is interpretted as vertical or horizontal\nThe pipeline that the display item that was hit belongs to.\nThe hit point in the coordinate space of the “viewport”…\nThe coordinates of the original hit test point relative to …\nA hook to let the blob image handler update any state …\nThe amount of offset that has already been applied to the …\nBorder radii of this rectangle.\nRasterize the requests.\nThe rectangle that was rasterized in device pixels, …\nThe boundaries of the rectangle.\nSurface of the image or tile to render in the same …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDetermines what happens if the horizontal side parts of …\nDetermines what happens if the vertical side parts of the …\nA key that identifies the blob image rasterization request.\nBlock until the hit tester is available and return it, …\nHelper struct to map stacking context coords &lt;-&gt; reference …\nThe id of the space this scroll frame creates\nThe generation of the external_scroll_offset.\nThe third IPC time stamp: just before sending\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nNotify the thread containing the <code>Renderer</code> that the render …\nWidth and length of the image data, in pixels.\nDistances from each edge where the image should be sliced …\nThe source for this image’s contents.\nDescribes what to use as the 9-patch source image. If this …\nThe coordinate-space the item is in (yes, it can be really …\nSerde encoded SpatialTreeItem structs\nHow large to make a single tile of the image (common case: …\nThe number of bytes from the start of one row to the next. …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nrect this node will render into, in filter space\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe tag of the hit display item.\nTiling offset in number of tiles.\nHow big a tile of the of the gradient should be (common …\nThe space between tiles of the gradient (common case: 0)\nThe space between tiles (common case: 0)\nDecompose the ID back into the raw integer.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe amount of clipping nodes created while building this …\nHow many instances of this kind of item we deserialized\nThe amount of spatial nodes created while building this …\nA property binding that we use to store an animation ID …\nThe transform matrix, either the perspective matrix or the …\ntransform list\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA collection of coordinate spaces and their corresponding …\nUnlock the external image. WR should not read the image …\nConsumes self to make it obvious that the event should be …\nUpdate an already registered blob image.\nUV coordinates for the image.\nThe minimum and maximum vertical offsets for this sticky …\nWake the thread containing the <code>Renderer</code> up (after updates …\nThis could potentially be implied from area, but we …\nThe specified stage at which point the handler should be …\nThe width of the 9-part image.\nOptionally marks the transform as only ever having a …\nMarks the transform being a part of the CSS stacking …\nMarks that the transform should be snapped. Used for …\nThe receiving side of a channel.\nThe sending side of a channel.\nIf the channel is bounded, returns its capacity.\nIf the channel is bounded, returns its capacity.\nConvert the payload to a raw byte vector, in order for it …\nAn epoch used to get the proper payload for a pipeline id …\nA fast MPMC message channel that can hold a fixed number …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes the given payload from a raw byte vector.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full.\nA blocking iterator over messages in the channel.\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nA pipeline id to key the payload with, along with the …\nBlocks the current thread until a message is received or …\nWaits for a message to be received from the channel, but …\nWaits for a message to be received from the channel, but …\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nBlocks the current thread until a message is sent or the …\nWaits for a message to be sent into the channel, but only …\nWaits for a message to be sent into the channel, but only …\nA create a channel intended for one-shot uses, for example …\nConvert the payload to a raw byte vector, in order for it …\nA non-blocking iterator over messages in the channel.\nAttempts to receive a message from the channel without …\nAttempts to send a message into the channel without …\nCreates an MPMC channel that is a bit slower than the …\nRepresents RGBA screen colors with floating point numbers.\nRepresents RGBA screen colors with one byte per channel.\nRepresents pre-multiplied RGBA colors with floating point …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>ColorF</code> from its components.\nConstructs a new additive <code>ColorU</code> from its components.\nMultiply the RGB components with the alpha channel.\nMultiply the RGB channels (but not alpha) with a given …\nThis flags disables snapping and forces anti-aliasing even …\nRenders a filtered region of its backdrop\napply blur effect parameters: stdDeviationX, stdDeviationY …\napply brightness effect parameters: amount CSS filter …\nreference to another (earlier) node in filter graph\nIf true, this primitive is used as a background for …\nClears all colors from the area, making it possible to cut …\nJust an abstraction for bundling up a bunch of clips into …\nA reference to a clipping node defining how an item is …\ncbindgen:derive-eq=false\ntransform color and alpha in image through 4x5 color …\ncbindgen:derive-eq=false\nA grouping of fields a lot of display items need, just to …\nremap RGBA with color gradients and component swizzle …\nAvailable composite operoations for the composite filter …\nComputed reference frame which dynamically calculates the …\napply contrast effect parameters: amount CSS filter …\nThis is a “complete” version of the DisplayItem, with …\nadd drop shadow version of image to the image parameters: …\nAn external identifier that uniquely identifies a scroll …\nSVG Filter Primitive. See: …\nAn input to a SVG filter primitive.\nSee: https://github.com/eqrion/cbindgen/issues/9 …\nreplace image with a solid color NOTE: UNUSED; Gecko never …\nThe area\nfade image toward greyscale version of image parameters: …\nA minimal hit-testable item for the parent browser’s …\nfade image toward hue-rotated version of image (rotate RGB …\nThe CSS backface-visibility property (yes, it can be …\nIf true, this stacking context is a blend container than …\nIf set, this primitive represents a scroll bar container\nFilter that does no transformation of the colors, needed …\nThis describes an image that fills the specified area. It …\nfade image toward inverted image (1 - RGB) parameters: …\nAn identifier used to refer to previously sent display …\nA tag that can be used to identify items during hit …\ninternal use - convert linear input to sRGB output …\nempty slot in feMerge inputs\nmultiplies color and alpha by opacity parameters: amount …\nThe input is the original graphic that the filter is being …\nThe input is the output of the filter primitive at the …\nThis is used as a performance hint - this primitive may be …\nA perspective transform, that optionally scrolls relative …\nThe input is the output of the previous filter primitive …\nConfigure whether the contents of a stacking context …\nA solid or an animating color to draw (may not actually be …\nThis describes a background-image and its tiling. It …\nIf set, this primitive can be passed directly to the …\ncombine 2 images with SVG_FEBLEND_MODE_COLOR parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_COLOR_BURN …\ncombine 2 images with SVG_FEBLEND_MODE_COLOR_DODGE …\ncombine 2 images with SVG_FEBLEND_MODE_DARKEN parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_DIFFERENCE …\ncombine 2 images with SVG_FEBLEND_MODE_EXCLUSION …\ncombine 2 images with SVG_FEBLEND_MODE_HARD_LIGHT …\ncombine 2 images with SVG_FEBLEND_MODE_HUE parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_LIGHTEN parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_LUMINOSITY …\ncombine 2 images with SVG_FEBLEND_MODE_MULTIPLY …\ncombine 2 images with SVG_FEBLEND_MODE_NORMAL parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_OVERLAY parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_SATURATION …\ncombine 2 images with SVG_FEBLEND_MODE_SCREEN parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_SOFT_LIGHT …\ntransform colors of image through 5x4 color matrix …\ntransform colors of image through configurable gradients …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ntransform image through convolution matrix of up to 25 …\ntransform image through convolution matrix of up to 25 …\ntransform image through convolution matrix of up to 25 …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncalculate a distorted version of first input image using …\ncreate and merge a dropshadow version of the specified …\nsynthesize a new image of specified size containing a …\ncreate a blurred version of the input image parameters: …\nFilter that does no transformation of the colors, used for …\nsynthesize a new image based on a url (i.e. blob image …\ncreate a new image based on the input image with the …\ncreate a new image based on the input image with the …\ncreate a new image that is a scrolled version of the input …\nrepresents CSS opacity property as a graph node like the …\nFilter that copies the SourceAlpha image into the …\nFilter that copies the SourceGraphic image into the …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncreate a new image based on the input image, repeated …\nconvert a color image to an alpha channel - internal use; …\nsynthesize a new image based on Fractal Noise (Perlin) …\nsynthesize a new image based on Fractal Noise (Perlin) …\nsynthesize a new image based on Turbulence Noise (offset …\nsynthesize a new image based on Turbulence Noise (offset …\nmultiply saturation of colors parameters: amount CSS …\nfade image toward sepia tone version of image parameters: …\nPer-primitive information about the nodes in the clip tree …\nA reference to a spatial node defining item positioning.\nDefines a caller provided key that is unique for a given …\ninternal use - convert sRGB input to linear output …\nStandard reference frame which contains a precomputed …\nThe minimum and maximum allowable offset for a sticky …\nA normal transform matrix, may contain perspective (the …\nIf true, this stacking context is a wrapper around a …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nWe need a separate rect from common.clip_rect to encode …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe area all the glyphs should be found in. Strictly …\nThe area to tile the gradient over (first tile starts at …\nThe area to tile the gradient over (first tile starts at …\nThe area to tile the gradient over (first tile starts at …\nThe area to tile the image over (first tile starts at …\nThe area to tile the image over (first tile starts at …\nId of the picture in question in a namespace unique to …\nAdditional clips\nBounds of the display item to clip to. Many items are …\nA hack used by gecko to color a simple bitmap font used …\nA hack used by gecko to color a simple bitmap font used …\nNOTE: common.clip_rect is the area the gradient covers\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe size of the contents this contains (so the backend …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nWhether to apply anti-aliasing on the border corners.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe amount this scrollframe has already been scrolled by, …\nControls whether the center of the 9 patch image is …\nVarious flags describing properties of this primitive.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nComponentTransfer / SVGFEComponentTransfer\nGet a local clipping rect contributed by this mask.\nGet a local clipping rect contributed by this clip region.\nWhether this scrollframe document has any scroll-linked …\nThe height of the 9-part image.\nThe minimum and maximum horizontal offsets for this sticky …\nvirtualized picture input binding 1 (i.e. texture source), …\nvirtualized picture input binding 2 (i.e. texture …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an invalid clip ID - needed in places where we carry\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturn whether, in each corner, the radius in <em>either</em> …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nA unique (per-pipeline) key for this spatial that is …\nA unique (per-pipeline) key for this spatial that is …\nA unique (per-pipeline) key for this spatial that is …\nTrue if color_interpolation_filter == LinearRgb; shader …\nThe margins that should be maintained between the edge of …\nThe maximum offset for this frame, typically a positive …\nThe minimum offset for this frame, typically a negative …\nWhether we are clipping inside or outside the region.\nConvenience for tests.\nCreate a new complex clip region.\nNormalizes a border so that we don’t render disallowed …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether the rect is interpretted as vertical or horizontal\nThe amount of offset that has already been applied to the …\nBorder radii of this rectangle.\nThe boundaries of the rectangle.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDetermines what happens if the horizontal side parts of …\nDetermines what happens if the vertical side parts of the …\nReturn the root clip ID - effectively doing no clipping.\nCreate a new space/clip info associated with the root …\nEnsure that the number of values matches up with the …\nThe id of the space this scroll frame creates\nThe generation of the external_scroll_offset.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nDistances from each edge where the image should be sliced …\nDescribes what to use as the 9-patch source image. If this …\nThe coordinate-space the item is in (yes, it can be really …\nHow large to make a single tile of the image (common case: …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nrect this node will render into, in filter space\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nHow big a tile of the of the gradient should be (common …\nThe space between tiles of the gradient (common case: 0)\nThe space between tiles (common case: 0)\nGets the index of the input. Returns <code>None</code> if the source …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nA property binding that we use to store an animation ID …\nThe transform matrix, either the perspective matrix or the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe minimum and maximum vertical offsets for this sticky …\nThis could potentially be implied from area, but we …\nThe width of the 9-part image.\nOptionally marks the transform as only ever having a …\nMarks the transform being a part of the CSS stacking …\nMarks that the transform should be snapped. Used for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA display list.\nDescribes the memory layout of a display list.\nAuxiliary buffer: contains the item data for item groups.\nTemporary buffer: contains the data for pending item …\nThe main/default buffer: contains item data and item group …\nInternal info used for more detailed analysis of …\nA debug (human-readable) representation of a built display …\nDisplayListSection determines the target buffer for the …\nStats for an individual item\nMaps from stacking context layout coordinates into …\nThe offset stack for a given reference frame.\nThe second IPC time stamp: after serialization\nThe first IPC time stamp: before any work has been done\nSerde encoded DisplayItemCache structs\nThe size of the cache for this display list.\nDiscards the builder’s save (indicating the attempted …\nNOTE: gradients must be pushed in the order they’re …\nNOTE: gradients must be pushed in the order they’re …\nNOTE: gradients must be pushed in the order they’re …\nRetrieve the current offset to allow converting a stacking …\nGet the debug stats for what this iterator has …\nShould just be initialized but never populated in release …\nReturns the default section that DisplayListBuilder will …\nPrint the display items in the list to stdout.\nEmits a debug representation of display items in the list, …\nA stack of reference frame scopes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGecko specific information about the display list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerde encoded bytes. Mostly DisplayItems, but some mixed …\nLast address in the buffer we pointed to, for computing …\nAdds the debug stats from another to our own, assuming we …\nGets the next display item, even if it’s a dummy. Also …\nHow many bytes we processed for this kind of item\nA stack of current offsets from the current reference …\nPop a local stacking context offset from the current scope.\nPop a reference frame scope off the stack.\nPushes a conic gradient to be displayed.\nPushes a linear gradient to be displayed.\nAdd an item to the display list.\nPush items from an iterator to the display list.\nPush a new offset for the current scope. This is used when …\nPushes a radial gradient to be displayed.\nPush a new scope. This resets the current offset to zero, …\nHelper for examples/ code.\nHelper for examples/ code.\nPush a yuv image. All planar data in yuv image should use …\nRestores the state of the builder to when <code>save()</code> was last …\nHelper struct to map stacking context coords &lt;-&gt; reference …\nSaves the current display list state, so it may be …\nThe third IPC time stamp: just before sending\nReturns the byte-range the slice occupied.\nSerde encoded SpatialTreeItem structs\nThe amount of clipping nodes created while building this …\nHow many instances of this kind of item we deserialized\nThe amount of spatial nodes created while building this …\nData corresponding to an instantiation of a font, with …\nHashable floating-point storage for font size.\nContainer for the raw data describing a font. This might …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nConstruct a gradient to be used in display lists.\nProduce a conic gradient, normalize the stops.\nReturns the argument unchanged.\nProduce a linear gradient, normalize the stops.\nCalls <code>U::from(self)</code>.\nReturn the gradient stops vector.\nCreate a new gradient builder.\nGradients can be defined with stops outside the range of […\nPush an additional stop for the gradient.\nProduce a radial gradient, normalize the stops.\nGet a reference to the list of stops.\nCreate a gradient builder with a list of stops.\nWhether to allow the driver to automatically generate …\nEverything is Dirty, equivalent to Partial(image_bounds)\nA group of rasterization requests to execute synchronously …\nFour channels, byte storage.\nBacking store for blob image command streams.\nMetadata (but not storage) for a blob image.\nError code for when blob rasterization failed.\nA handler on the render backend that can create rasterizer …\nAn opaque identifier describing a blob image registered …\nInput parameters for the BlobImageRasterizer.\nA key identifying blob image rasterization work requested …\nThe resources exposed by the resource cache available for …\nResult type for blob raserization.\nThe image is heap-allocated by the embedding.\n10 bits image\n12 bits image\n16 bits image\n8 bits image (most common)\nSpecifies the color depth of an image. Currently only used …\nThe default tile size for blob images and regular images …\nPlaceholder Image key, used to represent None.\nThe possible states of a Dirty rect.\nContains the error value\nAn image owned by the embedding, and referenced by …\nThe data that an external client should provide about an …\nDescriptor for external image resources. See <code>ImageData</code>.\nThe interfaces that an application can implement to …\nAn arbitrary identifier for an external image provided by …\nThe source for an external image.\nStorage format identifier for externally-managed images.\nWhether this image is opaque, or has an alpha channel. …\nSpecifies the type of texture target in driver terms.\nRepresents the backing store of an arbitrary series of …\nMetadata (but not storage) describing an image In …\nVarious flags that are part of an image descriptor.\nSpecifies the format of a series of pixels, in driver …\nAn opaque identifier describing an image registered with …\nAn invalid source.\nA gl::GLuint texture handle.\nContains the success value\nOut of memory.\nOther failure, embedding-specified.\nSome specific amount is dirty\nOne-channel, short storage\nOne-channel, byte storage. The “red” doesn’t map to …\nTwo-channels, short storage. Similar to <code>R16</code>, this just …\nTwo-channels, byte storage. Similar to <code>R8</code>, this just means …\nFour channels, byte storage.\nFour channels, float storage.\nFour channels, signed integer storage.\nRepresentation of a rasterized blob image. This is …\nA simple series of bytes, provided by the embedding and …\nA raw pixel buffer.\nStandard texture. This maps to GL_TEXTURE_2D in OpenGL.\nExternal texture. This maps to GL_TEXTURE_EXTERNAL_OES in …\nExternal texture which is forced to be converted from YUV …\nThe image is texture-backed.\nRectangle texture. This maps to GL_TEXTURE_RECTANGLE in …\nRegister a blob image.\nGet a flags value with all known bits set.\nReturns true if this descriptor allows mipmaps\nInterpret this blob image as an image for a display item.\nReturn the numerical bit depth value for the type.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the number of bytes per pixel for the given format.\nFor multi-plane images (i.e. YUV), indicates the plane of …\nA hook to let the handler clean up any state related a …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the stride, either via an explicit stride stashed …\nComputes the total size of the image, in bytes.\nWhether all set bits in a source flags value are also set …\nCreates a snapshot of the current state of blob images in …\nCreates an empty blob handler of the same type.\nBacking store. The format is stored out of band in …\nDelete an already registered blob image.\nA hook to let the handler clean up any state related to a …\nA hook to let the handler clean up any state related to a …\nDescription of the format of the blob’s output image.\nThe intersection of a source flags value with the …\nAn optional sub-rectangle of the image to avoid …\nGet a flags value with all bits unset.\nCreates an empty DirtyRect (indicating nothing is invalid)\nWhether to allow rendering blobs on multiple threads.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nVarious bool flags related to this descriptor.\nFormat of the image data.\nFormat for the data in the backing store.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nComputes the bounding rectangle for the image, rooted at …\nReturns the <code>FontTemplate</code> for the given key.\nReturns the <code>FontInstanceData</code> for the given key, if found.\nThe identifier of this external image, provided by the …\nStorage format identifier.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nIntersects the dirty rects.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns whether the dirty rect is empty\nReturns true if this descriptor is opaque\nYield a set of contained flags values.\nYield a set of contained named flags values.\nUnique handle to the image.\nLock the external image. Then, WR could start to read the …\nMaps over the contents of Partial.\nMints a new ImageKey. The given ID must be unique.\nMints a new ImageDescriptor.\nMints a new raw ImageData, taking ownership of the bytes.\nMints a new raw ImageData from Arc-ed bytes.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOffset in bytes of the first pixel of this image in its …\nA hook to let the blob image handler update any state …\nRasterize the requests.\nThe rectangle that was rasterized in device pixels, …\nSurface of the image or tile to render in the same …\nThe intersection of a source flags value with the …\nReplaces self with the empty rect and returns the old …\nA key that identifies the blob image rasterization request.\n10 and 12 bits images are encoded using 16 bits integer, …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nWidth and length of the image data, in pixels.\nThe source for this image’s contents.\nThe number of bytes from the start of one row to the next. …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTiling offset in number of tiles.\nConverts the dirty rect into a subrect of the given one …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnions the dirty rects.\nUnlock the external image. WR should not read the image …\nUpdate an already registered blob image.\nUV coordinates for the image.\nEverything is Dirty, equivalent to Partial(image_bounds)\nEverything is Dirty, equivalent to Partial(image_bounds)\nAn App Unit, the fundamental unit of length in Servo. …\nGeometry in the coordinate system of the render target …\nScaling ratio from world pixels to device pixels.\nGeometry in the coordinate system of the framebuffer in …\nGeometry in a stacking context’s local coordinate space …\nA complete scaling ratio from layout space to device pixel …\nScaling ratio from layout to world. Used for cases where …\nSome specific amount is dirty\nSome specific amount is dirty\nGeometry in the coordinate system of a Picture.\nGeometry gets rasterized in a given root coordinate space. …\nScaling ratio from picture pixels to raster pixels (e.g. …\nStores two coordinates in texel space. The coordinates are …\nOffset in number of tiles.\nGeometry in the document’s coordinate space (logical …\nCeil this app unit to the appropriate pixel boundary and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFIXME(pcwalton): Workaround for lack of cross crate …\nScale, but truncate (useful for viewport-relative units)\nRound this app unit down to the pixel towards zero and …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.")