searchState.loadedDescShard("darling_core", 0, "Create an instance by parsing a list of attributes.\nCreates an instance by parsing an entire proc-macro <code>derive</code> …\nCreates an instance by parsing an individual field and its …\nCreates an instance by parsing a specific <code>syn::GenericParam</code>…\nCreates an instance by parsing an entire generics …\nCreate an instance from an item in an attribute …\nCreates an instance by parsing an individual type_param …\nCreates an instance from a specified <code>syn::Variant</code>.\nUtility types for working with the AST.\nFunctions to derive <code>darling</code>’s traits from well-formed …\nThe <code>darling::Error</code> type, the multiple error <code>Accumulator</code>, …\nCreate an instance by parsing a list of attributes.\nCreate an instance from <code>syn::DeriveInput</code>, or return an …\nCreate an instance from <code>syn::Variant</code>, or return an error.\nMacros that should be exported from both <code>darling_core</code> and …\nTraits and types used for tracking the usage of generic …\nGenerator for <code>UsesLifetimes</code> impls that unions the used …\nGenerator for <code>UsesTypeParam</code> impls that unions the used …\nUtility types for attribute parsing.\nA struct or enum body.\nEquivalent to <code>syn::Fields</code>, but replaces the AST element …\nA mirror of <code>syn::GenericParam</code> which is generic over all …\nExtension trait for <code>GenericParam</code> to support getting values …\nA mirror of the <code>syn::Generics</code> type which can contain …\nThe type this GenericParam uses to represent type params …\nTypes for working with generics\nA struct or enum body.\nEquivalent to <code>syn::Fields</code>, but replaces the AST element …\nCreates a new <code>Data&lt;&amp;&#39;a V, &amp;&#39;a F&gt;</code> instance from <code>Data&lt;V, F&gt;</code>.\nCreates an empty body of the same shape as the passed-in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Fields</code> contains no fields.\nReturns <code>true</code> if this instance is <code>Data::Enum</code>.\nReturns true if this variant’s data makes it a newtype.\nReturns <code>true</code> if this instance is <code>Data::Struct</code>.\nReturns the number of fields in the structure.\nApplies a function <code>V -&gt; U</code> on enum variants, if this is an …\nApplies a function to the <code>Fields</code> if this is a struct.\nApplies a function <code>F -&gt; U</code> on struct fields, if this is a …\nCreates a new <code>Fields</code> struct.\nSplits the <code>Fields</code> into its style and fields for further …\nConsumes the <code>Data</code>, returning <code>Vec&lt;V&gt;</code> if it was an enum.\nConsumes the <code>Data</code>, returning <code>Fields&lt;F&gt;</code> if it was a struct.\nCreates an empty body of the same shape as the passed-in …\nAttempt to convert from a <code>syn::Data</code> instance.\nCreates a new <code>Fields</code> of the specified style with the …\nAdds a <code>Span</code> to <code>Fields</code>.\nA mirror of <code>syn::GenericParam</code> which is generic over all …\nExtension trait for <code>GenericParam</code> to support getting values …\nA mirror of the <code>syn::Generics</code> type which can contain …\nThe type this GenericParam uses to represent type params …\nIf this GenericParam is a const param, get the underlying …\nIf this GenericParam is a const param, get the underlying …\nIf this GenericParam is a lifetime, get the underlying …\nIf this GenericParam is a lifetime, get the underlying …\nIf this GenericParam is a type param, get the underlying …\nIf this GenericParam is a type param, get the underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInfrastructure for generating an attribute extractor.\nGets the list of attribute names that should be parsed by …\nGet the tokens to access a borrowed list of attributes …\nGets the core from-meta-item loop that should be used on …\nGenerates the main extraction loop.\nA set of mutable declarations for all members of the …\nGets the name used by the generated impl to return to the …\nGet the field declarations to support attribute forwarding\nGet the field initializer for use when building the …\nGet the match arms for attribute matching\nGet the statement that will try to transform forwarded …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this will forward any attributes; this requires …\nThis will be in scope during struct initialization after …\nUsed only by containers, this wrapper type generates code …\nThe fallback value for a field or container.\nOnly valid on fields, <code>Inherit</code> indicates that the value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns early if attribute or body parsing has caused any …\nDeclares the local variable into which errors will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an error if a field has no value and no default.\nAn individual field during variable declaration in the …\nProperties needed to generate code for a field in all the …\nWrapper to generate initialization code for a field.\nRepresents an individual field in the match.\nGet the name of the meta item that should be matched …\nIf set, this field will be given all unclaimed meta items …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe name presented to the author of the library. This will …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name presented to the user of the library. This will …\nThe type of the field in the input.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>impl FromField</code> generator. This is used for parsing an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf set, the ident of the field into which the discriminant …\nIf set, the ident of the field into which the transformed …\nReturns the argument unchanged.\nIf set, the ident of the field into which the variant …\nCalls <code>U::from(self)</code>.\nWrapper for “outer From” traits, such as …\nGets the path of the trait being implemented.\nA method invocation applied to a value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the check which performs an early return if errors …\nGenerate the loop which walks meta items looking for …\nGets the <code>let</code> declaration for errors accumulated during …\nGet all declared type parameters.\nGenerate local variable declaration and initialization for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerate local variable declarations for all fields.\nGet the type parameters of all fields in a set matching …\nGet the type parameters which are used by non-skipped, …\nCode generator for an enum variant in a data-carrying …\nCode generator for an enum variant in a unit match …\nA variant of the enum which is deriving <code>FromMeta</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name which will appear in code passed to the <code>FromMeta</code> …\nWhether or not the variant should be skipped in the …\nThe name of the parent enum type.\nThe name of the variant which will be returned for a given …\nWhether or not the variant should be used to create an …\nGenerate the loop which walks meta items looking for …\nCreate declarations for all the fields in the struct.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun an expression which returns a <code>darling::Result</code>, then …\nCreate tokens for a <code>darling::FromAttributes</code> impl from a …\nCreate tokens for a <code>darling::FromDeriveInput</code> impl from a …\nCreate tokens for a <code>darling::FromField</code> impl from a …\nCreate tokens for a <code>darling::FromMeta</code> impl from a …\nCreate tokens for a <code>darling::FromTypeParam</code> impl from a …\nCreate tokens for a <code>darling::FromVariant</code> impl from a …\nAccumulator for errors, for helping call <code>Error::multiple</code>.\nContains the error value\nAn error encountered during attribute parsing.\nAn iterator that moves out of an <code>Error</code>.\nContains the success value\nAn alias of <code>Result</code> specific to attribute parsing.\nCreates an error collector, for aggregating multiple errors\nConsider additional field names as “did you mean” …\nAdds a location to the error, such as a field or variant. …\nAdds a location to the error, such as a field or variant. …\nFinish the current accumulation, and if there are no …\nCreates a new error with a custom message.\nCreates a new error for a field that appears twice in the …\nCreates a new error for a field that appears twice in the …\nGet the span for <code>self</code>, if one has been set.\nStop accumulating errors, producing <code>Ok</code> if there are no …\nBundles the collected errors if there were any, or returns …\nRecursively converts a tree of errors to a flattened list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles a possible error.\nRuns a closure, returning the successful value as <code>Some</code>, or …\nCheck if this error is associated with a span in the token …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the accumulated errors as a <code>Vec</code>.\nGets the number of individual errors in this error.\nCreates a new error for a non-optional field that does not …\nBundle a set of multiple errors into a single <code>Error</code> …\nAdds a location chain to the head of the error’s …\nAdd one error to the collection.\nGet a span for the error.\nThe span to highlight in the emitted diagnostic.\nCreates a new error for a list which did not get enough …\nCreates a new error when a list got more items than it …\nCreates a new error for a field which has an unexpected …\nCreates a new error for a field which has an unexpected …\nCreates a new error for a field name that appears in the …\nCreates a new error for a field name that appears in the …\nCreates a new error for a field name that appears in the …\nCreates a new error for a field name that appears in the …\nCreate a new error about a literal string that doesn’t …\nCreates a new error for a value which doesn’t match a …\nCreates a new error for a struct or variant that does not …\nTie a span to the error if none is already present. This …\nWrite this error and any children as compile errors into a …\nAn arbitrary error message.\nAn error for an unknown field, with a possible “…\nA set of errors.\nAdd more alternate field names to the error, updating the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeeply counts the number of errors this item represents.\nCreate an instance by parsing a list of attributes.\nCreate an instance by parsing a list of attributes.\nCreates an instance by parsing an entire proc-macro <code>derive</code> …\nCreate an instance from <code>syn::DeriveInput</code>, or return an …\nCreates an instance by parsing an individual field and its …\nCreates an instance by parsing a specific <code>syn::GenericParam</code>…\nCreates an instance by parsing an entire generics …\nCreate an instance from an item in an attribute …\nTrait to convert from a path into an owned key for a map.\nCreate an instance from a bool literal in a value position.\nCreate an instance from a bool literal in a value position.\nCreate an instance from a char literal in a value position.\nCreate an instance from a char literal in a value position.\nCreate an instance from a list of nested meta items.\nCreate an instance from a list of nested meta items.\nCreate an instance from a <code>syn::Meta</code> by dispatching to the …\nCreate an instance from a <code>syn::Meta</code> by dispatching to the …\nGenerate an impl of <code>FromMeta</code> that will accept strings …\nGenerate an impl of <code>FromMeta</code> that will accept strings …\nWhen a field is omitted from a parent meta-item, <code>from_none</code> …\nWhen a field is omitted from a parent meta-item, <code>from_none</code> …\nCreate an instance from a string literal in a value …\nCreate an instance from a string literal in a value …\nAdapter for various expression types.\nAdapter from <code>syn::parse::Parse</code> to <code>FromMeta</code> for items that …\nCreate an instance from a literal value of either …\nCreate an instance from a literal value of either …\nCreate an instance from the presence of the word in the …\nCreate an instance from the presence of the word in the …\nCreate an impl that forwards to an inner type <code>T</code> for …\nCreates an instance by parsing an individual type_param …\nCreates an instance from a specified <code>syn::Variant</code>.\nCreate an instance from <code>syn::Variant</code>, or return an error.\nA default/fallback expression encountered in attributes …\nThe value should be taken from the <code>default</code> instance of the …\nMiddleware for extracting attribute values. Implementers …\nMiddleware for extracting values from the body of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApply the next found struct field to the object, returning …\nRead a meta-item, and apply its values to the current …\nApply the next found variant to the object, returning an …\nTypes for “shape” validation. This allows types …\nPerform validation checks that require data from more than …\nThe input span that is responsible for the use of …\nA struct or enum which should have <code>FromMeta</code> or …\nWhether or not unknown fields should produce an error at …\nThe custom bound to apply to the generated impl\nThe body of the <em>deriving</em> type.\nControls whether missing properties should cause errors or …\nReturns the argument unchanged.\nThe type’s generics. If the type does not use any …\nThe type identifier.\nCalls <code>U::from(self)</code>.\nA transform which will be called on <code>darling::Result&lt;Self&gt;</code>. …\nThe rule that should be used to rename all fields/variants …\nPartially initializes <code>Core</code> by reading the identity, …\nThe <code>attrs</code> magic field and attributes that influence its …\nA rule about which attributes to forward to the generated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ident of the field that will receive the forwarded …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this will not forward any attributes.\nPath of the function that will be called to convert the <code>Vec</code>…\nReceiver for derived <code>FromAttributes</code> impls.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nThe field on the target struct which should receive the …\nCalls <code>U::from(self)</code>.\nThe field on the target struct which should receive the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe field on the deriving struct into which the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerate a codegen::DefaultExpression for this field. This …\nGenerate a view into this field that can be used for code …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf <code>true</code>, generated code will not look for this field in …\nApply inherited settings from the container. This is done …\nWhether or not unknown fields are acceptable in this\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether or not the variant should be used to create an …\nReusable base for <code>FromDeriveInput</code>, <code>FromVariant</code>, <code>FromField</code>, …\nThe attribute names that should be searched.\nThe field on the target struct which should receive the …\nThe attribute names that should be forwarded. The presence …\nReturns the argument unchanged.\nWhether or not the container can be made through …\nThe field on the target struct which should receive the …\nCalls <code>U::from(self)</code>.\nReceiver for shape information within a struct or enum …\nReceiver struct for shape validation. Shape validation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of shape being described. This can be <code>struct_</code> or …\nThe tracing is being used to generate an <code>impl</code> block.\nSearcher for finding lifetimes in an iterator.\nSearcher for finding type params in an iterator.\nThe tracing is being used to generate a new struct or enum.\nExtension trait for pulling specific generics data from a …\nA set of references to idents.\nA set of idents.\nA set of references to lifetimes.\nA set of lifetimes.\nControl struct for searching type parameters.\nThe goal of tracing generic parameter usage.\nSearcher for finding lifetimes in a syntax tree. This can …\nSearcher for finding type params in a syntax tree. This …\nConsume an iterator, accumulating all lifetimes in the …\nConsume an iterator using <code>collect_lifetimes</code>, then clone …\nConsume an iterator, accumulating all type parameters in …\nConsume an iterator using <code>collect_type_params</code>, then clone …\nGet the set of all lifetimes declared by the syntax …\nGet the set of all type parameters declared by the syntax …\nReturns the subset of the queried lifetimes that are used …\nReturns the subset of the queried type parameters that are …\nExtension trait for pulling specific generics data from a …\nGet the set of all lifetimes declared by the syntax …\nGet the set of all type parameters declared by the syntax …\nA set of references to idents.\nA set of idents.\nSearcher for finding lifetimes in an iterator.\nA set of references to lifetimes.\nA set of lifetimes.\nSearcher for finding lifetimes in a syntax tree. This can …\nConsume an iterator, accumulating all lifetimes in the …\nConsume an iterator using <code>collect_lifetimes</code>, then clone …\nReturns the subset of the queried lifetimes that are used …\nFind all used lifetimes, then clone them and return that …\nFind all used lifetimes, then clone them and return that …\nThe tracing is being used to generate an <code>impl</code> block.\nThe tracing is being used to generate a new struct or enum.\nControl struct for searching type parameters.\nThe goal of tracing generic parameter usage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if the implementer of <code>UseTypeParams</code> should …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSearcher for finding type params in an iterator.\nSearcher for finding type params in a syntax tree. This …\nConsume an iterator, accumulating all type parameters in …\nConsume an iterator using <code>collect_type_params</code>, then clone …\nInsert the contents of <code>right</code> into <code>left</code>.\nReturns the subset of the queried type parameters that are …\nFind all type params using <code>uses_type_params</code>, then clone …\nFind all type params using <code>uses_type_params</code>, then clone …\nGet the “shape” of a fields container, such as a …\nExplicitly set the value.\nA meta-item that can be present as a word - with no value …\nA wrapper for an <code>Ident</code> which also keeps the value as a …\nAn efficient way of discarding data from a syntax element.\nInherit the eventual value from an external source.\nA set of named fields, e.g. <code>{ field: String }</code>.\nA special case of <code>Tuple</code> with exactly one field, e.g. …\nA value which can inherit a default value or have an …\nA list of <code>syn::Path</code> instances. This type is used to …\nDescription of how fields in a struct or variant are …\nA set of <code>Shape</code> values, which correctly handles the …\nA value and an associated position in source code. The …\nA list of unnamed fields, e.g. <code>(String, u64)</code>.\nNo fields, e.g. <code>struct Example;</code>\nA container to parse some syntax and retain access to the …\nGet the “shape” of a fields container.\nTry to parse an attribute into a meta list. Path-type meta …\nFunctions to use with <code>#[darling(with = &quot;...&quot;)]</code> that …\nTransform Rust paths to a readable and comparable string.\nA meta-item that can be present as a word - with no value …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if the flag is present.\nCreates a new <code>Flag</code> which corresponds to the presence of a …\nGet the span of the flag, or <code>Span::call_site</code> if the flag …\nA wrapper for an <code>Ident</code> which also keeps the value as a …\nGet the ident as a <code>proc_macro2::Ident</code>.\nGet the ident as a string.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApply some transform to the ident’s string …\nCreate a new <code>IdentString</code>.\nGet the location of this <code>Ident</code> in source.\nAn efficient way of discarding data from a syntax element.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExplicitly set the value.\nInherit the eventual value from an external source.\nA value which can inherit a default value or have an …\nConverts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;mut T&gt;</code>.\nConverts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;T&gt;</code>.\nConverts from <code>Override&lt;T&gt;</code> to <code>Option&lt;T&gt;</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the override is an <code>Explicit</code> value.\nUnwraps an override, yielding the content of an <code>Explicit</code>. …\nReturns the contained value or the default value of <code>T</code>.\nUnwraps an override, yielding the content of an <code>Explicit</code>. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTry to parse an attribute into a meta list. Path-type meta …\nParse a <code>Meta</code> to an <code>Expr</code>; if the value is a string literal, …\nParse a <code>Meta</code> to an <code>Expr</code>; if the value is a string literal, …\nA list of <code>syn::Path</code> instances. This type is used to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new list.\nCreate a new <code>Vec</code> containing the string representation of …\nTransform Rust paths to a readable and comparable string.\nGet the “shape” of a fields container, such as a …\nA set of named fields, e.g. <code>{ field: String }</code>.\nA special case of <code>Tuple</code> with exactly one field, e.g. …\nDescription of how fields in a struct or variant are …\nA set of <code>Shape</code> values, which correctly handles the …\nA list of unnamed fields, e.g. <code>(String, u64)</code>.\nNo fields, e.g. <code>struct Example;</code>\nGet the “shape” of a fields container.\nCheck if a field container’s shape is in this set of …\nCheck if a fields container’s shape is in this set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a shape into the set, so that the set will match …\nInsert all possible shapes into the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this set is empty.\nCreate a new <code>ShapeSet</code> which includes the specified items.\nA value and an associated position in source code. The …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApply a mapping function to a reference to the spanned …\nGet the source code location referenced by this struct.\nA container to parse some syntax and retain access to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")