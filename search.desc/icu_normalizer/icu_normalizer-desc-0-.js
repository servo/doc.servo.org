searchState.loadedDescShard("icu_normalizer", 0, "Normalizing text into Unicode Normalization Forms.\nMarker for starters that decompose to themselves but may ‚Ä¶\nPack a <code>char</code> and a <code>CanonicalCombiningClass</code> in 32 bits (the ‚Ä¶\nStruct for holding together a character and the value ‚Ä¶\nA normalizer for performing composing normalization.\nAn iterator adaptor that turns an <code>Iterator</code> over <code>char</code> into ‚Ä¶\nError coming from the data provider\nA normalizer for performing decomposing normalization.\nAn iterator adaptor that turns an <code>Iterator</code> over <code>char</code> into ‚Ä¶\nMarker value for U+FDFA in NFKD\nThe tail (everything after the first character) of the ‚Ä¶\nThe data uses a planned but unsupported feature.\nOne past the conjoining jamo block\nLead jamo base\nLead jamo count\nVowel jamo count times trail jamo count\nSyllable base\nSyllable count\nTrail jamo base (deliberately off by one to account for ‚Ä¶\nTrail jamo count (deliberately off by one to account for ‚Ä¶\nVowel jamo base\nVowel jamo count\nMarker for UTS 46 ignorables.\nTreatment of the ignorable marker (0xFFFFFFFF) in data.\nIgnorables are ignored.\nMarker that a complex decomposition isn‚Äôt round-trippable\nA list of error outcomes for various operations in this ‚Ä¶\nIgnorables are treated as singleton decompositions to the ‚Ä¶\nMagic marker trie value for characters whose decomposition ‚Ä¶\n<code>u16</code> version of the previous marker value.\nNumber of iterations allowed on the fast path before ‚Ä¶\n0xFFFFFFFF in data is not supported.\nData failed manual validation\nThe index of the next item to be read from <code>buffer</code>. The ‚Ä¶\nNon-Hangul canonical composition data.\nExtracts a canonical combining class (possibly zero) from ‚Ä¶\nConvert a <code>u16</code> <em>obtained from data provider data</em> to <code>char</code>.\nConvert a <code>u32</code> <em>obtained from data provider data</em> to <code>char</code>.\nPerforms canonical composition (including Hangul) on a ‚Ä¶\nPerforms canonical composition (including Hangul) on a ‚Ä¶\nPerforms (non-Hangul) canonical composition on a pair of ‚Ä¶\nPerforms (non-Hangul) canonical composition on a pair of ‚Ä¶\nThe lowest character for which any one of the following ‚Ä¶\nThe decomposing part of the normalizer than operates before\nThe lowest character for which either of the following does\nChecks if a trie value signifies a character whose ‚Ä¶\nNormalizer-specific error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether a string slice is normalized.\nCheck whether a string slice is normalized.\nChecks whether a slice of potentially-invalid UTF-16 is ‚Ä¶\nChecks whether a slice of potentially-invalid UTF-16 is ‚Ä¶\nCheck if a slice of potentially-invalid UTF-8 is ‚Ä¶\nCheck if a slice of potentially-invalid UTF-8 is ‚Ä¶\nNFC constructor using compiled data.\nNFD constructor using compiled data.\nNFKC constructor using compiled data.\nNFKD constructor using compiled data.\nThis is a special building block normalization for IDNA ‚Ä¶\nConstructs a decomposing iterator adapter from a delegate ‚Ä¶\nNormalize a string slice into a <code>String</code>.\nNormalize a string slice into a <code>String</code>.\nWraps a delegate iterator into a decomposing iterator ‚Ä¶\nWraps a delegate iterator into a composing iterator ‚Ä¶\nNormalize a string slice into a <code>Write</code> sink.\nNormalize a string slice into a <code>Write</code> sink.\nNormalize a slice of potentially-invalid UTF-16 into a <code>Vec</code>.\nNormalize a slice of potentially-invalid UTF-16 into a <code>Vec</code>.\nNormalize a slice of potentially-invalid UTF-16 into a ‚Ä¶\nNormalize a slice of potentially-invalid UTF-16 into a ‚Ä¶\nNormalize a slice of potentially-invalid UTF-8 into a ‚Ä¶\nNormalize a slice of potentially-invalid UTF-8 into a ‚Ä¶\nNormalize a slice of potentially-invalid UTF-8 into a <code>Write</code>‚Ä¶\nNormalize a slice of potentially-invalid UTF-8 into a <code>Write</code>‚Ä¶\nAccess to the Unicode properties or property-based ‚Ä¶\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nChecks if a trie value carries a (non-zero) canonical ‚Ä¶\nChecks if the trie signifies a special non-starter ‚Ä¶\nA version of <code>Self::new_nfc</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::new_nfc</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::new_nfd</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::new_nfd</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::new_nfkc</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::new_nfkc</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::new_nfkd</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::new_nfkd</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::new_uts46</code> that uses custom data ‚Ä¶\nTo make <code>next()</code> yield in cases where there‚Äôs a ‚Ä¶\nIf <code>opt</code> is <code>Some</code>, unwrap it. If <code>None</code>, panic if debug ‚Ä¶\nBundles the part of UTS 46 that makes sense to implement ‚Ä¶\nError coming from the data provider\nThe data uses a planned but unsupported feature.\nA list of error outcomes for various operations in this ‚Ä¶\nData failed manual validation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLookup of the Canonical_Combining_Class Unicode property.\nThe raw canonical composition operation.\nThe raw (non-recursive) canonical decomposition operation.\nThe outcome of non-recursive canonical decomposition of a ‚Ä¶\nThe character is its own canonical decomposition.\nThe character decomposes to two characters.\nThe character decomposes to a single different character.\nPerforms canonical composition (including Hangul) on a ‚Ä¶\nPerforms non-recursive canonical decomposition (including ‚Ä¶\nPerforms non-recursive canonical decomposition except ‚Ä¶\nThe data trie\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLook up the canonical combining class for a scalar value\nLook up the canonical combining class for a scalar value ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>CanonicalComposition</code> using compiled data.\nConstruct from compiled data.\nConstruct from compiled data.\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by ‚Ä¶\nBaked data\nNon-Hangul canonical compositions\nMarker type for <code>CanonicalCompositionsV1</code>: ‚Äú‚Ä¶\nMarker type for <code>DecompositionDataV1</code>: ‚Äúnormalizer/nfd@1‚Äù\nMarker type for <code>DecompositionTablesV1</code>: ‚Äú‚Ä¶\nMarker type for <code>DecompositionSupplementV1</code>: ‚Äú‚Ä¶\nMarker type for <code>DecompositionTablesV1</code>: ‚Äú‚Ä¶\nMain data for NFD\nData that either NFKD or the decomposed form of UTS 46 ‚Ä¶\nThe expansion tables for cases where the decomposition isn‚Ä¶\nNon-recursive canonical decompositions that differ from ‚Ä¶\nMarker type for <code>NonRecursiveDecompositionSupplementV1</code>: ‚Äú‚Ä¶\nMarker type for <code>DecompositionSupplementV1</code>: ‚Äú‚Ä¶\nTrie keys are two-<code>char</code> strings with the second character ‚Ä¶\nFlags that indicate how the set of characters whose ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether half-width kana voicing marks decompose into ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe passthrough bounds of NFD/NFC are lowered to this ‚Ä¶\nDecompositions that are fully within the BMP\nDecompositions with at least one character outside the BMP\nDecompositions with at least one character outside the BMP\nTrie for NFD decomposition.\nTrie for the decompositions that differ from NFD. Getting ‚Ä¶\nTrie for the supplementary non-recursive decompositions\nA mapper that knows how to performs the subsets of UTS 46 ‚Ä¶\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns an iterator adaptor that turns an <code>Iterator</code> over ‚Ä¶\nConstruct with compiled data.\nReturns an iterator adaptor that turns an <code>Iterator</code> over ‚Ä¶\nConstruct with provider. A version of <code>Self::new</code> that uses ‚Ä¶")