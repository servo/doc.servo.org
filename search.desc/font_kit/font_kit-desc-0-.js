searchState.loadedDescShard("font_kit", 0, "<code>font-kit</code> provides a common interface to the various system …\nAn in-memory bitmap surface for glyph rasterization.\nVarious types of errors that <code>font-kit</code> can return.\nDefines a set of faces that vary in weight, width or slope.\nEncapsulates the information needed to locate and open the …\nA possible value for the <code>font-family</code> CSS property.\nThe type of a font file: either a single font or a …\nA font face loaded into memory.\nEncapsulates the information needed to locate and open a …\nSpecifies how hinting (grid fitting) is to be performed …\nProvides a common interface to the platform-specific API …\nThe different system services that can load and rasterize …\nDetermines the closest font matching a description per the …\nVarious metrics that apply to the entire font.\nBézier paths.\nProperties that specify which font in a family to use: …\nA database of installed fonts that can be queried.\nVarious databases of installed fonts that can be queried.\nMiscellaneous utilities for use in this crate.\nA8.\n“Black-and-white” rendering. Each pixel is either …\nAn in-memory bitmap surface for glyph rasterization.\nThe image format for the canvas.\nGrayscale antialiasing. Only one channel is used.\nThe antialiasing strategy that should be used when …\nR8G8B8, little-endian.\nPremultiplied R8G8B8A8, little-endian.\nSubpixel RGB antialiasing, for LCD screens.\nReturns the number of bits per color channel that this …\nReturns the number of bits per pixel that this image …\nReturns the number of bytes per pixel that this image …\nReturns the number of color channels per pixel that this …\nThe image format of the canvas.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new blank canvas with the given pixel size and …\nThe raw pixel data.\nThe size of the buffer, in pixels.\nThe number of <em>bytes</em> between successive rows.\nCreates a new blank canvas with the given pixel size, …\nThe source was inaccessible because of an I/O or similar …\nReasons why a loader might fail to load a font.\nReasons why a font might fail to load a glyph.\nA disk or similar I/O error occurred while attempting to …\nAttempted to load a font from the filesystem, but there is …\nAttempted to load an invalid index in a TrueType or …\nThe font didn’t contain a glyph with that ID.\nNo font matching the given query was found.\nAttempted to load a malformed or corrupted font.\nA platform function returned an error.\nReasons why a source might fail to look up a font or fonts.\nThe data was of a format the loader didn’t recognize.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdditional diagnostic information may include file name\nDefines a set of faces that vary in weight, width or slope.\nReturns the individual fonts in this family.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if and only if this family is empty.\nEncapsulates the information needed to locate and open the …\nReturns all the handles in this set.\nReturns the argument unchanged.\nCreates a set of font family handles.\nCalls <code>U::from(self)</code>.\nReturns true if and only if this set has no fonts in it.\nCreates an empty set of family handles.\nAdds a new handle to this set.\nGlyphs in cursive fonts generally use a more informal …\nA possible value for the <code>font-family</code> CSS property.\nFantasy fonts are primarily decorative or expressive fonts …\nThe sole criterion of a monospace font is that all glyphs …\nGlyphs in sans-serif fonts, as the term is used in CSS, …\nSerif fonts represent the formal text style for a script.\nA specific font family, specified by name: e.g. “Arial”…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe font file represents a collection of fonts (<code>.ttc</code>, <code>.otc</code>…\nThe type of a font file: either a single font or a …\nThe font file represents a single font (<code>.ttf</code>, <code>.otf</code>, <code>.woff</code>, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEncapsulates the information needed to locate and open a …\nA font in memory.\nA font on disk referenced by a path.\nReturns the argument unchanged.\nCreates a new handle from raw TTF/OTF/etc. data in memory.\nCreates a new handle from a path.\nCalls <code>U::from(self)</code>.\nA convenience method to load this handle with the default …\nThe raw TrueType/OpenType/etc. data that makes up this …\nThe index of the font, if the path refers to a collection.\nThe index of the font, if the memory consists of a …\nThe path to the font.\nHinting is performed in both horizontal and vertical …\nSpecifies how hinting (grid fitting) is to be performed …\nNo hinting is performed unless absolutely necessary to …\nHinting is performed only in the vertical direction. The …\nHinting is performed only in the vertical direction, and …\nReturns the argument unchanged.\nReturns the point size that will be used for grid fitting, …\nCalls <code>U::from(self)</code>.\nA single font record for a fallback query result.\nThe result of a fallback query.\nProvides a common interface to the platform-specific API …\nThe handle that the API natively uses to represent a font.\nReturns the distance from the origin of the glyph with the …\nDetermines whether a blob of raw font data represents a …\nDetermines whether a file represents a supported font, …\nDetermines whether a path points to a supported font, and, …\nAttempts to return the raw font data (contents of the font …\nReturns the name of the font family.\nThe font.\nA list of fallback fonts.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads a font from raw font data (the contents of a <code>.ttf</code>/…\nLoads a font from a <code>.ttf</code>/<code>.otf</code>/etc. file.\nLoads the font pointed to by a handle.\nCreates a font from a native API handle.\nLoads a font from the path to a <code>.ttf</code>/<code>.otf</code>/etc. file.\nReturns the full name of the font (also known as “…\nGet font fallback results for the given text and locale.\nReturns the glyph ID for the specified glyph name.\nReturns the number of glyphs in the font.\nReturns the usual glyph ID for a Unicode character.\nReturns a handle to this font, if possible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if the font is monospace …\nReturns the OpenType font table with the given tag, if the …\nRetrieves various metrics that apply to the entire font.\nReturns the wrapped native font handle.\nReturns the amount that the given glyph should be …\nSends the vector path for a glyph to a sink.\nReturns the PostScript name of the font. This should be …\nReturns the values of various font properties, …\nReturns the pixel boundaries that the glyph will take up …\nRasterizes a glyph to a canvas with the given size and …\nA scale factor that should be applied to the fallback font.\nReturns true if and only if the font loader can perform …\nReturns the boundaries of a glyph in font units. The …\nThe fallback list is valid for this slice of the given …\nA cross-platform loader that uses the FreeType library to …\nA cross-platform loader that uses the FreeType library to …\nThe handle that the FreeType API natively uses to …\nReturns the distance from the origin of the glyph with the …\nDetermines whether a blob of raw font data represents a …\nDetermines whether a file represents a supported font, …\nDetermines whether a path points to a supported font, and, …\nAttempts to return the raw font data (contents of the font …\nReturns the name of the font family.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads a font from raw font data (the contents of a <code>.ttf</code>/…\nLoads a font from a <code>.ttf</code>/<code>.otf</code>/etc. file.\nLoads the font pointed to by a handle.\nCreates a font from a native API handle.\nLoads a font from the path to a <code>.ttf</code>/<code>.otf</code>/etc. file.\nReturns the full name of the font (also known as “…\nGet font fallback results for the given text and locale.\nReturns the glyph ID for the specified glyph name.\nReturns the number of glyphs in the font.\nReturns the usual glyph ID for a Unicode character.\nReturns a handle to this font, if possible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if the font is monospace …\nReturns the raw contents of the OpenType table with the …\nRetrieves various metrics that apply to the entire font.\nReturns the wrapped native font handle.\nReturns the amount that the given glyph should be …\nSends the vector path for a glyph to a path builder.\nReturns the PostScript name of the font. This should be …\nReturns the values of various font properties, …\nReturns the pixel boundaries that the glyph will take up …\nRasterizes a glyph to a canvas with the given size and …\nReturns true if and only if the font loader can perform …\nReturns the boundaries of a glyph in font units.\nThis follows CSS Fonts Level 3 § 5.2 [1].\nVarious metrics that apply to the entire font.\nThe maximum amount the font rises above the baseline, in …\nA rectangle that surrounds all bounding boxes of all …\nThe approximate amount that uppercase letters rise above …\nThe maximum amount the font descends below the baseline, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDistance between baselines, in font units.\nThe suggested distance of the top of the underline from …\nA suggested value for the underline thickness, in font …\nThe number of font units per em.\nThe approximate amount that non-ascending lowercase …\nThis point is the control point of a quadratic Bézier …\nThis point is the second control point of a cubic Bézier …\nA single curve or subpath within a glyph outline.\nA glyph vector outline or path.\nAccumulates Bézier path rendering commands into an <code>Outline</code>…\nReceives Bézier path rendering commands.\nFlags that specify what type of point the corresponding …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCloses the path, returning to the first point in it.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe individual subpaths that make up this outline.\nSends this outline to an <code>OutlineSink</code>.\nSends this contour to an <code>OutlineSink</code>.\nDraws a cubic Bézier curve to a point.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlags that specify what type of point the corresponding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this outline builder and returns the resulting …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nDraws a line to a point.\nMoves the pen to a point.\nCreates a new empty outline.\nCreates a new empty contour.\nCreates a new empty <code>OutlineBuilder</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPositions of each point.\nAdds a new point with the given flags to the contour.\nDraws a quadratic Bézier curve to a point.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nResets the outline builder and returns the old outline.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nBlack weight (900), the thickest value.\nBold weight (700).\nCondensed width (75%).\nExpanded width (125%).\nExtra-bold weight (800).\nExtra-condensed width (62.5%).\nExtra-expanded width (150%).\nExtra light weight (200).\nA form that is generally cursive in nature.\nLight weight (300).\nMedium weight (500, higher than normal).\nNormal (400).\nNormal width (100%).\nA face that is neither italic not obliqued.\nA typically-sloped version of the regular face.\nProperties that specify which font in a family to use: …\nSemibold weight (600).\nSemi-condensed width (87.5%).\nSemi-expanded width (112.5%).\nThe width of a font as an approximate fraction of the …\nAllows italic or oblique faces to be selected.\nThin weight (100), the thinnest value.\nUltra-condensed width (50%), the narrowest possible.\nUltra-expanded width (200%), the widest possible.\nThe degree of blackness or stroke thickness of a font. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes a property set to its default values: normal …\nSets the value of the stretch property and returns this …\nThe font stretchiness, as defined in CSS.\nSets the value of the style property and returns this …\nThe font style, as defined in CSS.\nSets the value of the weight property and returns this …\nThe font weight, as defined in CSS.\nA database of installed fonts that can be queried.\nReturns the names of all families installed on the system.\nReturns paths of all fonts installed on the system.\nAccesses this <code>Source</code> as <code>Any</code>, which allows downcasting back …\nAccesses this <code>Source</code> as <code>Any</code>, which allows downcasting back …\nPerforms font matching according to the CSS Fonts Level 3 …\nSelects a font by PostScript name, which should be a …\nLooks up a font family by name and returns the handles of …\nA source that contains the fonts installed on the system, …\nA source that loads fonts from a directory or directories …\nA source that keeps fonts in memory.\nA source that encapsulates multiple sources and allows …\nA source that contains the fonts installed on the system, …\nReturns the names of all families installed on the system.\nReturns paths of all fonts installed on the system.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitializes Fontconfig and prepares it for queries.\nPerforms font matching according to the CSS Fonts Level 3 …\nSelects a font by PostScript name, which should be a …\nLooks up a font family by name and returns the handles of …\nSelects a font by a generic name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA source that loads fonts from a directory or directories …\nReturns the names of all families installed on the system.\nReturns paths of all fonts installed on the system.\nReturns the argument unchanged.\nIndexes all fonts found in <code>path</code>\nCalls <code>U::from(self)</code>.\nOpens the default set of directories on this platform and …\nPerforms font matching according to the CSS Fonts Level 3 …\nSelects a font by PostScript name, which should be a …\nLooks up a font family by name and returns the handles of …\nA source that keeps fonts in memory.\nAdds a font, but doesn’t sort. Returns the font that was …\nAdd an existing font handle to a <code>MemSource</code>.\nAdd a number of existing font handles to a <code>MemSource</code>.\nReturns the names of all families installed on the system.\nReturns paths of all fonts installed on the system.\nCreates a new empty memory source.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new memory source that contains the given set of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms font matching according to the CSS Fonts Level 3 …\nSelects a font by PostScript name, which should be a …\nLooks up a font family by name and returns the handles of …\nAn iterator over the sources in a <code>MultiSource</code>.\nAn iterator over the mutable sources in a <code>MultiSource</code>.\nA source that encapsulates multiple sources and allows …\nReturns the names of all families installed on the system.\nReturns paths of all fonts installed on the system.\nA convenience method to get the first source with the …\nA convenience method to get the first source with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new source that contains all the fonts in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the contained sources.\nReturns an iterator over the contained sources with …\nPerforms font matching according to the CSS Fonts Level 3 …\nSelects a font by PostScript name, which should be a …\nLooks up a font family by name and returns the handles of …")