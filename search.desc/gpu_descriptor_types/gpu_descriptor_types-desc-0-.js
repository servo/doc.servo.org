searchState.loadedDescShard("gpu_descriptor_types", 0, "Memory exhausted error.\nAbstract device that can create pools of type <code>P</code> and …\nFlags to augment descriptor pool creation.\nNumber of descriptors of each type.\nMemory exhausted error.\nA descriptor pool creation has failed due to fragmentation.\nPool allocation failed due to fragmentation of pool’s …\nDevice memory exhausted.\nDevice memory exhausted.\nHost memory exhausted.\nHost memory exhausted.\nFailed to allocate memory from pool.\nAllocates descriptor sets.\nCreates a new descriptor pool.\nDeallocates descriptor sets.\nDestroys descriptor pool.\nMemory exhausted error.\nAbstract device that can create pools of type <code>P</code> and …\nMemory exhausted error.\nA descriptor pool creation has failed due to fragmentation.\nPool allocation failed due to fragmentation of pool’s …\nDevice memory exhausted.\nDevice memory exhausted.\nHost memory exhausted.\nHost memory exhausted.\nFailed to allocate memory from pool.\nAllocates descriptor sets.\nCreates a new descriptor pool.\nDeallocates descriptor sets.\nDestroys descriptor pool.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlags to augment descriptor pool creation.\nNumber of descriptors of each type.\nAllows freeing individual sets.\nAllows allocating sets with layout created with matching …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.")