searchState.loadedDescShard("layout_2013", 0, "Fragments (<code>struct Fragment</code>) are the leaves of the layout …\nA piece of generated content that cannot be resolved into …\nAn inline fragment that establishes an absolute containing …\nA hypothetical box (see CSS 2.1 § 10.3.7) for an …\nInfo specific to the kind of fragment.\nA container for a fragment that got truncated by …\nLayout for CSS block-level elements.\nThe position of this fragment relative to its owning flow. …\nThe sum of border and padding; i.e. the distance from the …\nCreates flows and fragments from a DOM tree via a …\nData needed by layout.\nA debug ID that is consistent for the life of this …\nThe indices of this Fragment’s ClipScrollNode. If this …\nVarious flags for this fragment.\nLayout for elements with a CSS <code>display</code> property of <code>flex</code>.\nServo’s experimental layout system builds a tree of <code>Flow</code> …\nReference-counted pointers to flows.\nThe <code>Fragment</code> type, which represents the leaves of the …\nThe generated content assignment phase.\nHolds the style context information for fragments that are …\nSupports writing a trace file created during each layout …\nUtility functions for doubly-linked lists.\nLayout for elements with a CSS <code>display</code> property of …\nThe margin of the content box.\nBorders, padding, and margins.\nCSS Multi-column layout …\nAn opaque reference to the DOM node that this <code>Fragment</code> …\nImplements parallel traversals over the DOM and flow trees.\nA persistent, thread-safe singly-linked list.\nThe pseudo-element that this fragment represents.\nUtilities for querying the layout, as needed by layout.\nHow damaged this fragment is since last reflow.\nThe CSS style of this fragment when it’s selected\nImplements sequential traversals over the DOM and flow …\nInfo specific to the kind of fragment. Keep this enum …\nThe ID of the StackingContext that contains this fragment. …\nThe CSS style of this fragment.\nCSS table formatting contexts.\nCSS table formatting contexts.\nCSS table formatting contexts.\nCSS table formatting contexts.\nCSS table formatting contexts.\nCSS table formatting contexts.\nCSS tables.\nText layout.\nTraversals over the DOM and flow trees, running the layout …\nA safe wrapper for DOM nodes that prevents layout from …\nThe real assign-block-sizes traversal for flows with …\nThe different types of Blocks.\nThe solutions for the block-size-and-margins constraint …\nPerforms block-size calculations potentially multiple …\nInformation specific to floated blocks.\nIf this is set, then this block flow has overflow and it …\nIf this is set, then this block flow is the root flow.\nThe inputs for the inline-sizes-and-margins constraint …\nThe solutions for the inline-size-and-margins constraint …\nIf this is the root flow, shifts all kids down and adjusts …\nGet a flags value with all known bits set.\nAssign block-size for current flow.\nPer CSS 2.1 § 9.5, block formatting contexts’ inline …\nRecursively (top-down) determines the actual inline-size …\nData common to all flows.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturn the type of this block.\nPass 1 of reflow: computes minimum and preferred …\nComputes intrinsic inline sizes for a block.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nInstructs the fragment to compute its border and padding.\nCompute the inputs for the ISize constraint equation.\nCompute the used value of inline-size, taking care of …\nCompute the actual inline size and position for this block.\nReturn the size of the containing block for the given …\nThe amount of inline size that is available for the float.\nWhether all set bits in a source flags value are also set …\nReturns true if this flow contains fragments that are …\nComputes the content portion (only) of the intrinsic …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nVarious flags.\nAdditional floating flow members.\nThe float ceiling, relative to <code>BaseFlow::position::cur_b</code> …\nLeft or right?\nDetermines the type of formatting context this is. See the …\nReturn this flow’s fragment.\nThe associated fragment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturn the dimensions of the containing block generated by …\nReturn shrink-to-fit inline-size.\nCalculate used value of inline-size just like we do for …\nCalculate used value of inline-size just like we do for …\nCalculate used value of inline-size just like we do for …\nCalculate used value of inline-size just like we do for …\nIf this is the root flow, initialize values that would …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this is an absolute containing block.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns true if this fragment may establish a reference …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreates a new candidate block-size iterator. …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAdd placement information about current float flow for use …\nThe ‘position’ property of this flow.\nCompute inline size based using the …\nAssigns the computed inline-start content edge and …\nWrites in the size of the relative containing block for …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the inline coordinate of the given flow if it is …\nSet the used values for inline-size and margins from the …\nAdds a scroll root for a block to take the <code>clip</code> property …\nComputes inline-start and inline-end margins and …\nSolve the inline-size and margins constraints for this …\nSolve the horizontal constraint equation for absolute …\nSolve the horizontal constraint equation for absolute …\nCompute inline-start and inline-end margins and …\nCompute inline-start and inline-end margins and …\nCSS Section 10.3.5\nCSS Section 10.3.5\nCompute inline-start and inline-end margins and …\nCompute inline-start and inline-end margins and …\nSolve the vertical constraint equation for absolute …\nSolve the vertical constraint equation for absolute …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRepresents the output of flow construction for a DOM node …\nThis node contributed some object or objects that will be …\nThe results of flow construction for a DOM node.\nThis node contributed a flow at the proper position in the …\nAn object that knows how to create flows.\nRepresents an {ib} split that has not yet found the …\nInline fragments and associated {ib} splits that have not …\nHolds inline fragments that we’re gathering for children …\nRepresents inline fragments and {ib} splits that are …\nHolds inline fragments and absolute descendants.\nMaintains a stack of anonymous boxes needed to ensure that …\nA utility trait with some useful methods for node queries.\nThis node contributes nothing at all (<code>display: none</code>). …\nTableColumn Fragment\nPotentially ignorable whitespace.\nThe list of absolute descendants of those inline fragments.\nBubbles up {ib} splits.\nMakes the <code>child</code> flow a new child of <code>parent</code>. Anonymous …\nIf the ‘unicode-bidi’ property has a value other than …\nBidi control characters to insert before and after these …\nBuilds a flow for a node with <code>display: block</code>. This yields …\nConstructs a flow for the given block node and its …\nConstructs a block flow, beginning with the given …\nBuilds a flow for a node with ‘display: flex’.\nBuilds a flow for a node with <code>display: list-item</code>. This …\nBuilds a flow for a node with <code>column-count</code> or <code>column-width</code> …\nBuilds a flow for a node with <code>display: table</code>. This yields …\nBuilds a flow for a node with <code>display: table-caption</code>. This …\nBuilds a flow for a node with <code>display: table-cell</code>. This …\nBuilds a flow for a node with <code>display: table-column-group</code>. …\nBuilds a flow for a node with <code>display: table-row</code>. This …\nBuilds a flow for a node with <code>display: table-row-group</code>. …\nThis is an annoying case, because the computed <code>display</code> …\nBuilds the fragment for the given block or subclass …\nBuild the fragment for an inline-block or inline-flex, …\nBuilds one or more fragments for a node with …\nConcatenates the fragments of kids, adding in our own …\nCreates an <code>InlineFragmentsConstructionResult</code> for replaced …\nCreates a fragment for a node with <code>display: table-column</code>.\nCreates a new anonymous flow. The new flow is identical to …\nPushes fragments appropriate for the content of the given …\nInformation about the inline box directly enclosing the …\nFlushes all flows we’ve been gathering up.\nThe flow that caused this {ib} split.\nCreates an inline flow from a set of inline fragments, …\nFinalizes the flow on the top of the stack.\nThe list of fragments.\nAny fragments that succeed the {ib} splits.\nThe list of fragments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the construction result for this node.\nReturns true if this node has non-zero padding or border.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this node doesn’t render its kids and …\nThe layout context.\nCreates a new flow constructor.\nCreates a new legalizer.\nFlushes the given accumulator to the new split and makes a …\nSatisfy the compiler about the unused parameters, which we …\nPlaces any table captions found under the given table …\nThe inline fragments that precede the flow.\nCreates an anonymous flow and pushes it onto the stack.\nAdds the anonymous flow that would be necessary to make an …\nAttempts to perform incremental repair to account for …\nRestyle damage to use for fragments created in this node.\nSets the construction result of a flow.\nAny {ib} splits that we’re bubbling up.\nA stack of anonymous flows that have yet to be finalized …\nStrips ignorable whitespace from the end of a list of …\nStrips ignorable whitespace from the start of a list of …\nAttempts to make <code>child</code> a child of <code>parent</code>. On success, this …\nLayout information shared among all workers. This must be …\nA registered painter\nA set of registered painters\nA FontContext to be used during layout.\nReturns the argument unchanged.\nLook up a painter\nThe pipeline id of this LayoutContext.\nReference to the script thread image cache.\nCalls <code>U::from(self)</code>.\nThe origin of this layout context.\nA list of in-progress image loads to be shared with the …\nPaint worklets\nBits shared by the layout and style system.\nA cache of WebRender image info.\nWhether this node has been traversed by layout.\nWhether a flow has been newly constructed.\nData that layout associates with a node.\nA wrapper for <code>InnerLayoutData</code>. This is necessary to give …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nVarious flags.\nThe current results of flow construction for this node. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDescribes how to paint the borders.\nPaint collapsed borders.\nPaint no borders.\nPaint borders separately (<code>border-collapse: separate</code>).\nA unique ID for every stacking context.\nBuilds display lists from flows and fragments.\nA vector of ClipScrollNodes which will be given ids during …\nA stack of clips used to cull display list entries that …\nA stack of clips used to cull display list entries that …\nThe clip and scroll info  of the first ancestor which …\nThe current clip and scroll info, used to keep track of …\nThe current clip and scroll info, used to keep track of …\nThe current reference frame id. This is used to assign …\nThe current reference frame ClipScrollNodeIndex.\nThe current stacking context id, used to keep track of …\nThe current stacking context id, used to keep track of …\nReturns the argument unchanged.\nVector containing iframe sizes, used to inform the …\nStores text runs to answer text queries used to place a …\nCalls <code>U::from(self)</code>.\nServo heavily uses display lists, which are retained-mode …\nThe items in this display list.\nA LayoutContext reference important for creating WebRender …\nThe next stacking context id that we will assign to a …\nThe flow parent’s content box, used to calculate sticky …\nThe PipelineId of this stacking context collection.\nWhether or not we are processing an element that …\nReturns the stacking context ID for the outer …\nThe root of the StackingContext tree.\nThe root of the StackingContext tree.\nStackingContext and ClipScrollNode children for each …\nStackingContext and ClipScrollNode children for each …\nPlacment information for both image and gradient …\nRendering bounds. The background will start in the …\nCompute a rounded clip rect for the background.\nRounded corners for the clip_rect.\nA clip area. While the background is rendered according to …\nFor a given area and an image compute how big the image …\nReturns the argument unchanged.\nAccess element at index modulo the array length.\nCalls <code>U::from(self)</code>.\nDetermines where to place an element background image or …\nTile an image\nFor either the x or the y axis adjust various values to …\nBackground tile size. Some backgrounds are repeated. These …\nSpacing between tiles. Some backgrounds are not repeated …\nComputes a border radius size against the containing size.\nCompute the additional border-image area.\nCalculates radii for the inner side.\nDetermine the four corner radii of a border.\nCreates a four-sided border with square corners and …\nDescribes how to paint the borders.\nPaint collapsed borders.\nPaint no borders.\nThe logical width of an insertion point: at the moment, a …\nThis flow never creates a ClipScrollNode.\nThis flow never creates a stacking context.\nThis flow never establishes a containing block.\nThis structure manages ensuring that modification to …\nPaint borders separately (<code>border-collapse: separate</code>).\nGet a flags value with all known bits set.\nThe position of the start of the baseline of this text.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the border radius for the rectangle inside of a …\nA vector of ClipScrollNodes which will be given ids during …\nA stack of clips used to cull display list entries that …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nA stack of clips used to cull display list entries that …\nThe clip and scroll info  of the first ancestor which …\nWhether all set bits in a source flags value are also set …\nThe current clip and scroll info, used to keep track of …\nThe current clip and scroll info, used to keep track of …\nThe current reference frame id. This is used to assign …\nThe current reference frame ClipScrollNodeIndex.\nThe current stacking context id, used to keep track of …\nThe current stacking context id, used to keep track of …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGets the cursor to use given the specific ComputedValues.  …\nVector containing iframe sizes, used to inform the …\nStores text runs to answer text queries used to place a …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nThe items in this display list.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nA LayoutContext reference important for creating WebRender …\nAdjusts borders as appropriate to account for a fragment’…\nThe next stacking context id that we will assign to a …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe placement of the text item on the plane.\nThe flow parent’s content box, used to calculate sticky …\nThe PipelineId of this stacking context collection.\nWhether or not we are processing an element that …\nThe range of text within the text run.\nThe intersection of a source flags value with the …\nThe root of the StackingContext tree.\nThe root of the StackingContext tree.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nStackingContext and ClipScrollNode children for each …\nStackingContext and ClipScrollNode children for each …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe text run.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA helper data structure for gradients.\nDetermines the radius of a circle if it was not explicitly …\nReturns the the distance to the nearest or farthest corner …\nReturns the distance to the nearest or farthest sides …\nReturns the radius for an ellipse with the same ratio as …\nDetermines the radius of an ellipse if it was not …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe factor that we multiply the blur radius by in order to …\nInformation common to all display items.\nDefines a clip scroll node.\nAn index into the vector of ClipScrollNodes. During …\nA set of indices into the clip scroll node vector for a …\nA clipping region for a display item. Currently, this can …\nStarts a group of items inside a particular scroll root.\nOne drawing command in the list.\nMetadata attached to each display item. This is useful for …\nDisplay list sections that make up a stacking context. …\nPaints an iframe.\nAn opaque handle to a node, which, unlike UnsafeNode, …\nDefines a text shadow that affects all items until the …\nDefines a stacking context.\nDefines a stacking context.\nDefines a text shadow that affects all items until the …\nThe type of the scroll offset list. This is only populated …\nRepresents one CSS stacking context, which may or may not …\nFields common to all display items.\nFields common to all display items.\nFields common to all display items.\nFields common to all display items.\nFields common to all display items.\nReturn the bounds of this display list based on the …\nThe position and size of this stacking context.\nThe position of this scroll root’s frame in the parent …\nThe WebRender clip id of this node assigned during …\nThe clip rectangle to use for this item.\nThe clip and scroll info for this item.\nThe rect of the contents that can be scrolled inside of …\nThe type of this StackingContext. Used for collecting and …\nThe value of the <code>cursor</code> property when the mouse hovers …\nReturns an empty clipping region that, if set, will result …\nThe index of the reference frame that this stacking …\nCSS filters to be applied to this stacking context …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a clipping region that represents the given …\nReturns the address of this node, for debugging purposes.\nThe ID of this StackingContext for uniquely identifying it.\nWhether this is the top layer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe main rectangular region. This does not include any …\nReturns an all-encompassing clipping region that clips no …\nMetadata attached to this display item.\nThe blend mode with which this stacking context blends …\nCreates a new stacking context.\nThe DOM node from which this display item originated.\nThe scroll root that this item starts.\nThe type of this ClipScrollNode.\nThe overflow rect for this stacking context in its …\nThe clip and scroll info for this StackingContext.\nThe index of the parent of this ClipScrollNode.\nThe perspective matrix to be applied to children.\nThe WebRender spatial id of this node assigned during …\nThe section of the display list that this item belongs to.\nThe id of the stacking context this item belongs to.\nA transform to be applied to this stacking context.\nThe transform style of this stacking context.\nThe unique fragment id of the fragment of this item.\nThe <code>z-index</code> for this stacking context.\nContentful paint, for the purpose of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe size of an axis. May be a specified size, a min/max …\nA block with the CSS <code>display</code> property equal to <code>flex</code>.\nRepresents a child in a flex container. Most fields here …\nA line in a flex container.\nReturns the number of auto margins in given direction.\nThe number of auto margins of items.\nThe available cross axis size\nThe available main axis size\nUsed flex base size.\nData common to all block flows.\nTrue if the cross direction is reversed.\nLine size in the block direction.\nThe ‘flex-grow’ property of this item.\nThis method implements the flexible lengths resolving …\nThe ‘flex-shrink’ property of this item.\nRemaining free space of this line, items will grow or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis function accepts the flex-basis and the size property …\nReturns a line start after the last item that is already …\nThe index of the actual flow in our child list.\nInitialize the used flex base size, minimal main size and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the main size has met its constraint.\nTrue if this flow has property ‘visibility::collapse’.\nTrue if this flex container can be multiline.\nList of flex-items that belong to this flex-container\nList of flex lines in the container.\nThe logical axis which the main axis will be parallel with.\nTrue if the flex-direction is *-reversed\nMain size of a flex item, used to store results of …\nThe maximal main size. If this property is not actually …\nThe minimal size in main direction.\nGenerate a new available cross or main axis size from the …\nThe ‘order’ property of this item.\nReturns the outer main size of the item, including …\nRange of items belong to this line in ‘self.items’.\nThe kind of clearance: left, right, or both.\nInformation about a single float.\nThe kind of float: left or right.\nInformation about the floats next to a flow.\nEncapsulates information about floats. This is optimized …\nAll the information necessary to place a float.\nThe speculated inline sizes of floats flowing through or …\nAdds a new float to the list.\nReturns a rectangle that encloses the region from …\nThe boundaries of this float.\nThe minimum block-start of the float, as determined by …\nGiven the speculated inline size of the floats out for the …\nGiven a flow, computes the speculated inline size of the …\nGiven the speculated inline size of the floats out for …\nInformation about each of the floats here.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the list is allocated and false otherwise. …\nThe kind of float.\nThe kind of float: left or right.\nReturns the position of the last float in flow coordinates.\nThe estimated inline size (an upper bound) of the left …\nThe list of floats.\nGiven the three sides of the bounding rectangle in the …\nCached copy of the maximum block-start offset of the float.\nThe maximum inline-end position of the float, generally …\nCreates a new <code>Floats</code> object.\nThe offset of the flow relative to the first float.\nGiven placement information, finds the closest place a …\nThe estimated inline size (an upper bound) of the right …\nThe dimensions of the float.\nAdjusts the recorded offset of the flow relative to the …\nThe writing mode of these floats.\nReturns a <code>SpeculatedFloatPlacement</code> objects with both left …\nWhether this flow has a fragment with <code>counter-reset</code> or …\nInformation about each absolutely-positioned descendant of …\nAbsolutely-positioned descendants of this flow.\nWhether this flow behaves as though it had <code>position: static</code>…\nData common to all flows.\nWhether any ancestor is a fragmentation container\nWhether this flow clears to the left. This is checked all …\nWhether this flow clears to the right. This is checked all …\nWhether this flow contains any text and/or replaced …\nA link to a flow’s containing block.\nInformation needed to compute absolute (i.e. …\nWhether this flow is left-floated. This is checked all …\nWhether this flow is right-floated. This is checked all …\nThe flow should be floated if the node has a <code>float</code> …\nVirtual methods that make up a float context.\nFlags used in flows.\nThe flow should be forced to be nonfloated.\nWhether a base flow should be forced to be nonfloated. …\nMethods to get the <code>BaseFlow</code> from any <code>HasBaseFlow</code> type.\nWhether this flow’s descendants have fragments that …\nThis marker trait indicates that a type is a struct with …\nWhether this flow behaves as though it had <code>position: static</code>…\nWhether this flow is absolutely positioned. This is …\nInformation needed to compute absolute (i.e. …\nWhether margins are prohibited from collapsing with this …\nA wrapper for the pointer address of a flow. These pointer …\nDetails about descendants with position ‘absolute’ or …\nReference to the Containing Block, if this flow is …\nGet a flags value with all known bits set.\nIf this is a block flow, returns the underlying object. …\nIf this is a flex flow, returns the underlying object. …\nIf this is an inline flow, returns the underlying object. …\nIf this is a block flow, returns the underlying object, …\nIf this is an inline flow, returns the underlying object, …\nIf this is a table flow, returns the underlying object, …\nIf this is a table cell flow, returns the underlying …\nIf this is a table colgroup flow, returns the underlying …\nIf this is a table row flow, returns the underlying …\nIf this is a table rowgroup flow, returns the underlying …\nIf this is a table flow, returns the underlying object. …\nIf this is a table cell flow, returns the underlying …\nIf this is a table colgroup flow, returns the underlying …\nIf this is a table row flow, returns the underlying …\nIf this is a table rowgroup flow, returns the underlying …\nIf this is a table wrapper flow, returns the underlying …\nPass 3a of reflow: computes block-size.\nAssigns block-sizes in-order; or, if this is a float, …\nPass 2 of reflow: computes inline-size.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe block-size of the block container of this flow, if it …\nThe inline-size of the block container of this flow. Used …\nThe writing mode of the block container of this flow.\nPass 1 of reflow: computes minimum and preferred …\nPhase 5 of reflow: builds display lists.\nReturns the number of children that this flow possesses.\nReturns the number of children that this flow possesses.\nIterates over the children of this immutable flow.\nThe children of this flow.\nReturns the class of flow that this is.\nThe clipping rectangle for this flow and its descendants, …\nThe indices of this Flow’s ClipScrollNode. This is used …\nReturn a new BaseFlow like this one but with the given …\nThe collapsible margins for this flow, if any.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the union of all overflow rects of all of this flow…\nPhase 4 of reflow: Compute the stacking-relative position …\nWhether all set bits in a source flags value are also set …\nReturns true if this flow contains fragments that are …\nLinks to every descendant. This must be private because it …\nThe intersection of a source flags value with the …\nInformation needed to compute absolute (i.e. …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nVarious flags for flows, tightly packed to save space.\nThe floats next to this flow.\nReturns true if floats might flow through this flow, as …\nThe absolute descendant flow in question.\nLike <code>assign_block_size</code>, but is recurses explicitly into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturn the size of the containing block generated by this …\nWhether the absolute descendant has reached its containing …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIntrinsic inline sizes for this flow.\nReturns true if this is an absolute containing block.\nWhether all known bits in this flags value are set.\nReturns true if this flow is a block flow.\nReturns true if this flow is a block flow.\nReturns true if this flow is a block flow or subclass …\nReturns true if this flow is a block flow or subclass …\nWhether all bits in this flags value are unset.\nReturn true if this flow has position ‘fixed’.\nReturns true if this flow is an inline flow.\nReturns true if this flow is an inline flow.\nReturns true if this flow is a table flow.\nReturns true if this flow is a table flow.\nReturns true if this flow is a table caption flow.\nReturns true if this flow is a table caption flow.\nReturns true if this flow is a table cell flow.\nReturns true if this flow is a table cell flow.\nReturns true if this flow is a table colgroup flow.\nReturns true if this flow is a table colgroup flow.\nReturns true if this flow is a table row flow.\nReturns true if this flow is a table row flow.\nReturns true if this flow is a table rowgroup flow.\nReturns true if this flow is a table rowgroup flow.\nYield a set of contained flags values.\nReturn an iterator over the descendant flows.\nYield a set of contained named flags values.\nIterates through border boxes of all of this flow’s …\nInformation needed to compute absolute (i.e. …\nThe pointer up to the containing block.\nMark these descendants as having reached their containing …\nMarks this flow as the root flow. The default …\nMutably iterates through fragments in this flow.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe amount of overflow of this flow, relative to the …\nData used during parallel traversals.\nIf this is a float, places it. The default implementation …\nThe upper left corner of the box representing this flow, …\nThe ‘position’ property of this flow.\nDumps the flow tree for debugging.\nDumps the flow tree for debugging.\nPrint any extra children (such as fragments) contained in …\nDumps the flow tree for debugging into the given PrintTree.\nDumps the flow tree for debugging into the given PrintTree.\nPush absolute descendants to this flow.\nPush the given descendants on to the existing descendants.\nThe writing mode for <code>relative_containing_block_size</code>.\nThe size of the containing block for relatively-positioned …\nThe intersection of a source flags value with the …\nAttempts to perform incremental fixup of this flow by …\nCalls <code>repair_style</code> and <code>bubble_inline_sizes</code>. You should use …\nCalls <code>repair_style</code> and <code>bubble_inline_sizes</code>. You should use …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet absolute descendants for this flow.\nMetrics for floats in computed during the float metrics …\nMetrics for floats out computed during the float metrics …\nThe ID of the StackingContext that contains this flow. …\nCompute the fragment position relative to the parent …\nThe position of this flow relative to the start of the …\nThe position of the absolute containing block relative to …\nCSS Section 11.1 This is the union of rectangles of the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSets the flow as the containing block for all absolute …\nText alignment of this flow.\nFor debugging and profiling, the identifier of the thread …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUpdate the ‘flags’ field when computed styles have …\nUpdates the block position of a child flow during the …\nUpdates the inline position of a child flow during the …\nThe writing mode for this flow.\nThis needs to be reworked now that we have …\nA caching random-access iterator that yields mutable …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvide a forward iterator.\nProvide a forward iterator with mutable references\nO(1)\nCreate an empty list\nAdd an element last in the list\nProvides a caching random-access iterator that yields …\nAdds a new flow as a child of this flow. Fails if this …\nWARNING: This should only be used when there is no …\nFinishes a flow. Once a flow is finished, no more child …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>FlowRef</code>s can only be made available to the traversal code. …\nPush absolute descendants for this flow.\nSet absolute descendants for this flow.\nSets the flow as the containing block for all absolute …\nThe coordinate system used in …\nPlaceholder for elements with generated content that did …\nTransparent black\nFragments (<code>struct Fragment</code>) are the leaves of the layout …\nA top-down fragment border box iteration handler.\nA piece of generated content that cannot be resolved into …\nInformation for generated content.\nWhether this fragment represents a child in a column flex …\nWhether this fragment is for the body element child of a …\nWhether this fragment represents the generated text from a …\nWhether this fragment represents a child in a row flex …\nA fragment that represents an inline frame (iframe). This …\nA fragment that represents a replaced content image and …\nAn inline fragment that establishes an absolute containing …\nAn inline fragment that establishes an absolute containing …\nA hypothetical box (see CSS 2.1 § 10.3.7) for an …\nA hypothetical box (see CSS 2.1 § 10.3.7) for an …\nA fragment that represents an inline-block element.\nThe overflow area. We need two different notions of …\nThe border box returned is relative to the fragment’s …\nThe border box returned is relative to the fragment’s …\nWhether a line break is required after this fragment if …\nTrue if we should attempt to split at character boundaries …\nIs this fragment selected?\nTrue if this is the first fragment on the line.“]\nSuppress line breaking between this and the previous …\nA scanned text fragment represents a single run of text …\nInfo specific to the kind of fragment.\nSpecified distances from the margin edge of a block to its …\nDescribes how to split a fragment. This is used during …\nDescribes how to split a fragment into two. This contains …\nA fragment that represents a table column.\nA container for a fragment that got truncated by …\nA wrapper for fragments that have been truncated by the …\nDescribes how a fragment should be truncated.\nData for an unscanned text fragment. Unscanned text …\nAdds a style to the inline context for this fragment. If …\nCalculates block-size above baseline, depth below …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nAssign block-size for this fragment if it is replaced …\nAssigns replaced inline-size, padding, and margins for …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe position of this fragment relative to its owning flow. …\nThe sum of border and padding; i.e. the distance from the …\nReturns the sum of the inline-sizes of all the borders of …\nReturns the border width in given direction if this …\nThe frame ID of this iframe. None if there is no nested …\nAdds display items necessary to draw debug boxes around …\nAdds display items necessary to draw debug boxes around a …\nBuilds the display items necessary to paint the selection …\nAdds the display items for this fragment to the given …\nAdds the display items necessary to paint the background …\nAdds the display items necessary to paint the background …\nSame as build_display_list_for_background_if_applicable, …\nAdd display item for image border.\nAdds the display items necessary to paint the borders of …\nAdds the display items necessary to paint the box shadow …\nAdds the display items necessary to paint the outline of …\nCreates the display item for a text decoration: underline, …\nCreates the text display item for one text fragment. This …\nAdds the display items necessary to paint a webrender …\nbuild_display_list, but don’t update the restyle damage\nA helper method that <code>build_display_list</code> calls to create …\nCSS 2.1 § 10.3.2 &amp; 10.6.2 Calculate the used width and …\nAttempts to find the split positions of a text fragment so …\nA helper method that uses the breaking strategy described …\nTruncates this fragment to the given <code>max_inline_size</code>, …\nReturns true if this fragment may establish a reference …\nReturns true if this fragment can merge with another …\nReturns true if this element can be split. This is true …\nAlways inline for SCCP.\nIf this is a Column fragment, get the col span\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nComputes the margins in the block direction from the …\nComputes the border and padding in both inline and block …\nComputes the margins in the inline direction from the …\nComputes the intrinsic inline-sizes of this fragment.\nComputes the overflow rect of this fragment relative to …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns the dimensions of the content box.\nCalculates block-size above baseline, depth below …\nThe intrinsic size of the text fragment.\nCreates an anonymous fragment just like this one but with …\nCreates a stacking context for associated fragment.\nA debug ID that is consistent for the life of this …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe indices of this Fragment’s ClipScrollNode. If this …\nReturns true if this fragment establishes a new stacking …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nVarious flags for this fragment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nConstructs a new <code>Fragment</code> instance from an opaque node.\nCalculates the webrender image for a paint worklet. …\nReturns a guess as to the distances from the margin edge …\nReturns true if this fragment has a filter, transform, or …\nWhether this replace element has intrinsic aspect ratio.\nReturns true if this fragment has a transform applied that …\nHolds the style context information for fragments that are …\nThe part of the fragment that goes on the second line.\nThe part of the fragment that goes on the first line.\nReturns the inline-start offset from margin edge to …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe byte offset of the insertion point, if any.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nintrinsic width of this replaced element.\nintrinsic width of this replaced element.\nReturns true if this node is absolutely positioned.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if this fragment is a hypothetical box. See …\nDoes this fragment start on a glyph run boundary?\nReturns true if this node <em>or any of the nodes within its </em>…\nReturns true if and only if this is the <em>primary fragment</em> …\nReturns true if this fragment is replaced content.\nReturns true if this fragment is replaced content or an …\nReturns true if and only if this is a scanned text …\nReturns true if and only if this fragment is a generated …\nReturns true if any of the inline styles associated with …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe margin of the content box.\nReturns the inline-size of this fragment’s margin box.\nThe opposite of …\nReturns the narrowest inline-size that the first …\nConstructs a new <code>Fragment</code> instance.\nCreates a new image fragment from the given URL and local …\nCreates the information specific to an iframe fragment.\nCreates the information specific to a scanned text …\nCreates a new instance of <code>UnscannedTextFragmentInfo</code> from …\nCreate the information specific to an table column …\nAn opaque reference to the DOM node that this <code>Fragment</code> …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the 4D matrix representing this fragment’s …\nThe pipelineID of this iframe. None if there is no nested …\nThe operation to perform.\nThe pseudo-element that this fragment represents.\nDetermines which quantities …\nThe range within the above text run that this represents.\nThe endpoint of the above range, including whitespace that …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRestore any whitespace that was stripped from a text …\nHow damaged this fragment is since last reflow.\nThe text run that this represents.\nThe CSS style of this fragment when it’s selected\nThe selected text range.  An empty range represents the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nReturns true if this fragment must be processed in-order. …\nReturn a size constraint that can be used the clamp size …\nthe number of columns a  element should span\nInfo specific to the kind of fragment. Keep this enum …\nThe part of the fragment remaining after truncation.\nThe ID of the StackingContext that contains this fragment. …\nGiven the stacking-context-relative position of the …\nGiven the stacking-context-relative border box, returns …\nReturns true if the entire fragment was stripped.\nThe CSS style of this fragment.\nUses the style only to estimate the intrinsic …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the portion of the intrinsic inline-size that …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe text inside the fragment.\nReturns the text decoration line of this fragment, …\nThe text run which is being split.\nThe text run which is being truncated.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTransforms this fragment into another fragment of the …\nTransforms this fragment into an ellipsis fragment, …\nReturns the 4D matrix representing this fragment’s …\nTransforms this fragment using the given <code>SplitInfo</code>, …\nTruncates this fragment to the given <code>max_inline_size</code>, …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDetermines the inline sizes of inline-block fragments. …\nCalculates the offset from the baseline that applies to …\nAll values of the counter are rendered with the given …\nA counter per CSS 2.1 § 12.4.\nThe value of a counter at a given level.\nThe innermost counter value is rendered with no extra …\nHow a counter value is to be rendered.\nThe generated content resolution traversal.\nThe object that mutates the generated content fragments.\nThe innermost counter value is rendered with the given …\nNamed CSS counters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf the system uses a negative sign, handle negative values …\nWhether we’ve incremented the counter yet.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this flow is a block flow.\nThe layout context.\nThe level we’re at in the flow tree.\nThe level of the flow tree that this corresponds to.\nThe counter representing an ordered list item.\nCreates a new generated content resolution traversal.\nPushes the string that represents the value rendered using …\nPushes the string that represents the value rendered using …\nAppends string that represents the value rendered using …\nThe level of quote nesting.\nCreates fragment info for a literal string.\nReturns the static character that represents the value …\nThe traversal.\nThe value of the counter at this level.\nThe values at each level.\nIf this flag is set, we need to reflow the entire …\nUsed in a flow traversal to indicate whether this …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe index of a fragment in a flattened vector of DOM …\nFlows for inline layout.\nRepresents a list of inline fragments, including element …\nAscent and space needed above and below the baseline for a …\n<code>Line</code>s are represented as offsets into the child list, …\nArranges fragments into lines, splitting them up as …\nGet a flags value with all known bits set.\nThe distance from the baseline to the top of this …\nCalculate and set the block-size of this flow. See CSS 2.1 …\nRecursively (top-down) determines the actual inline-size …\nPerforms float collision avoidance. This is called when …\nData common to all flows.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bounds are the exact position and extents of the line …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe current position in the block direction.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe computed value of the indentation for the first line (…\nThe amount of indentation to use on the first line. This …\nThe floats we need to flow around.\nCommits a line to the list.\nThe fragments themselves.\nA vector of all inline fragments. Several fragments may …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCalculates inline metrics from font metrics and line …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nA convenience function to return the fragment at a given …\nA convenience function to return a mutable reference to …\nThe green zone is the greatest extent from which a line …\nReturns the indentation that needs to be applied before …\nComputes the position of a line that has only the provided …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns true if this list contains no fragments and false …\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nJustifies the given set of inline fragments, distributing …\nThe index of the last known good line breaking …\nReturns the number of inline fragments.\nThe lines we’ve already committed.\nA vector of ranges into fragments that represents line …\nThe actual metrics for this line.\nComputes the minimum metrics for each line. This is done …\nThe minimum metrics for each line, as specified by the …\nComputes the minimum line metrics for the given fragments. …\nThe minimum metrics for each line, as specified by the …\nThe minimum metrics for this line, as specified by the …\nCreates a new <code>LineBreaker</code> with a set of floats and the …\nCreates an empty set of inline fragments.\nCreates a new set of inline metrics.\nReturns the new block size that this line would have if …\nThe resulting fragment list for the flow, consisting of …\nReturns the new metrics that this line would have if …\nReturns the line metrics that result from combining the …\nAcquires a new fragment to lay out from the work list or …\nAcquires a new fragment to lay out from the work list or …\nThe list of nodes that this fragment will be inheriting …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe line we’re currently working on.\nReturns true if the pending line is empty and false …\nPushes a fragment to the current line unconditionally, …\nPushes a fragment to the current line unconditionally, …\nA range of line indices that describe line breaks.\nTries to append the given fragment to the line, splitting …\nReflows the given fragments, which have been plucked out …\nThe intersection of a source flags value with the …\nReinitializes the pending line to blank data.\nResets the <code>LineBreaker</code> to the initial state it had after a …\nReflows fragments for the given inline flow.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets final fragment positions in the block direction for …\nSets fragment positions in the inline direction based on …\nThe amount of space above the baseline needed for this …\nThe amount of space below the baseline needed for this …\nReturns the sum of the space needed above and below the …\nReturns the sum of the space needed above and below the …\nRemoves trailing whitespace from the pending line if …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bidirectional embedding level runs for this line, in …\nThe next fragment or fragments that we need to work on.\nBegin a layout debug trace. If this has not been called, …\nEnd the debug layout trace. This will write the layout …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a unique ID. This is used for items such as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepends the items in the other list to this one, leaving …\nSplits the head off a list in O(1) time, and returns the …\nA block with the CSS <code>display</code> property equal to <code>list-item</code>.\nThe kind of content that <code>list-style-type</code> results in.\nAssign inline size and position for the marker. This is …\nData common to all block flows.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the content to be used for the given value of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe marker, if outside. (Markers that are inside are …\nThe ‘position’ property of this flow.\nWe are accumulating margin on the logical top of this flow.\nWe are accumulating margin between two blocks.\nA collapsible margin. See CSS 2.1 § 8.3.1.\nBoth the block-start and block-end margins (specified here …\nMargins collapse <em>through</em> this flow. This means, …\nRepresents the block-start and block-end margins of a flow …\nIntrinsic inline-sizes, which consist of minimum and …\nThe temporary result of the computation of intrinsic …\nUseful helper data type when computing values for blocks …\nMargins may not collapse with this flow.\nA min-size and max-size constraint. The constructor has a …\nAdds the child’s potentially collapsible block-end …\nAdds the child’s potentially collapsible block-start …\nReturns the amount of margin that should be applied in a …\nClamp the given size by the given min size and max size …\nIntrinsic sizes for the content only (not counting …\nAdds the content intrinsic sizes and the surrounding size …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <em>minimum inline-size</em> of the content.\nThe actual value (not the absolute value) of the negative …\nThe value of the greatest positive margin.\nCreates and initializes an inline size computation with …\nCreate a <code>SizeConstraint</code> for an axis.\nThe <em>preferred inline-size</em> of the content.\nReturns the explicitly-specified margin lengths from the …\nReceive an optional container size and return used value …\nThe inline size of borders and padding, as well as margins …\nUpdates the computation so that the minimum is the maximum …\nUpdates the computation so that the minimum is the maximum …\nUpdates the computation so that the minimum is the sum of …\nLength between the inline-start edge of a column and that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTraversal chunk size.\nInformation that we need stored in each flow.\nVtable + pointer representation of a Flow trait object.\nProcess current flow and potentially traverse its …\nThe number of children that still need work done.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe address of the parent flow.\nRun the main layout passes in parallel.\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhttps://html.spec.whatwg.org/multipage/#get-the-text-steps\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the resolved value of property for a given …\nThe primary resolution logic, which assumes that the …\nhttps://drafts.csswg.org/cssom-view/#scrolling-area\nGuesses how much inline size will be taken up by floats on …\nRun the main layout passes sequentially.\nThe actual inline size for each column.\nInformation about the intrinsic inline sizes of columns …\nTable, TableRowGroup, TableRow, TableCell types. Their …\nIterator over all the rows of a table, which also provides …\nAn iterator over table cells, yielding all relevant style …\nA table flow corresponded to the table’s internal table …\nInline collapsed borders for the table itself.\nEncapsulates functionality shared among all table-like …\nIterator over all the rows of a table, which also provides …\nIterator over all the rows of a table\nWhich column this is in the table\nMoves forward by <code>amount</code> columns, updating the various …\nLays out the rows of a table.\nRecursively (top-down) determines the actual inline-size …\nThe specified column inline-sizes are set from column …\nThe final width of the borders in the block direction for …\nThe final width of the borders in the inline direction for …\nInformation about the actual inline sizes of each column, …\nInformation about the intrinsic inline-sizes of each …\nCompute the used value of inline-size, taking care of …\nWhether the column inline size is <em>constrained</em> per …\nThe table border at the end of the inline direction.\nOutputs a debugging string describing this table flow.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the higher of the two percentages specified in <code>self</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe largest specified size of this column as a length.\nReturns a newly-initialized <code>ColumnIntrinsicInlineSize</code> with …\nThe largest specified size of this column as a percentage (…\nUpdates the border styles in the block direction for a …\nThe preferred intrinsic inline size.\nThe index of the current column in column_styles (i.e. …\nIn case of multispan s, where we are in the span of the …\nThe computed size of this inline column.\nSolve the inline-size and margins constraints for this …\nReturns the effective spacing per cell, taking the value …\nThe table border at the start of the inline direction.\nTable-layout property\nUpdate the corresponding value of <code>self_inline_sizes</code> if a …\nUpdates the minimum and preferred inline-size calculation …\nA table formatting context.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA table formatting context.\nAssign block-size for table-cell flow.\nRecursively (top-down) determines the actual inline-size …\nData common to all block flows.\nMinimum/preferred inline-sizes set by this function are …\nBorder collapse information for the cell.\nThe column span of this cell.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe rows spanned by this cell.\nPosition this cell’s children according to …\nWhether this cell is visible. If false, the value of …\nA table formatting context.\nTable columns do not have block-size.\nTable column inline-sizes are assigned in the table flow …\nData common to all flows.\nThe table column fragments\nThe associated fragment.\nReturns the argument unchanged.\nThe specified inline-sizes of table columns. (We use …\nCalls <code>U::from(self)</code>.\nInformation about the column inline size and span for each …\nAll aspects of a border that can collapse with adjacent …\nWhere a border style comes from.\nA single row of a table.\nCreates a collapsed border style from the block-end border …\nThe size of this vector should be equal to the number of …\nThe spacing below this row.\nFields common to all block flows.\nCreates a collapsed border style from the block-start …\nThe size of this vector should be equal to the number of …\nThe spacing above this row.\nCreates a collapsed border style from the bottom border …\nRecursively (bottom-up) determines the context’s …\nInformation about the intrinsic inline-sizes of each cell.\nThe computed cell spacing widths post-collapse.\nThe color of the border.\nInformation about the computed inline-sizes of each column.\nInline sizes that this cell contributes to the column.\nThe column span of this cell.\nIf <code>other</code> has a higher priority per CSS 2.1 § 17.6.2.1, …\nCompute block-size for table-row flow.\nBorder spacing up to this row (not including spacing below …\nInformation about the borders for each cell, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a collapsed border style from the given physical …\nGiven an array of (_, cumulative_border_size), the index …\nThe number of remaining rows spanned by cells in previous …\nThe size of this vector should be equal to the number of …\nThe spacing in between each column.\nCreates a collapsed border style from the inline-start …\nCreates a collapsed border style from the inline-start …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a collapsed border style from the left border …\nCreates a collapsible border style for no border.\nPerforms border-collapse in the inline direction for all …\nInformation about the borders for each cell that we bubble …\nPushes column inline size, incoming rowspan, and border …\nThe type of item that this border comes from.\nCreates a collapsed border style from the right border …\nThe row span of this cell.\nThe “segment” of the table it is in. Tables containing …\nLay out table cells inline according to the computer …\nThe block-size of the row.\nThe spacing for this row, propagated down from the table …\nThe style of the border.\nThe direction of the columns, propagated down from the …\nCreates a collapsed border from the block-start border …\nThe width of the border.\nA table formatting context.\nRecursively (top-down) determines the actual inline-size …\nFields common to all block flows.\nThe final width of the borders in the block direction for …\nThe final width of the borders in the inline direction for …\nInformation about the intrinsic inline-sizes of each …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe spacing for this rowgroup.\nThe layout “guesses” defined in INTRINSIC § 4.3.\nAn intermediate column size assignment.\nThe <code>CSSFloat</code> member specifies the weight of the smaller of …\nA table wrapper flow based on a block formatting context.\nCalculates the inline-size, interpolating appropriately …\nCalculates table column sizes for automatic layout per …\nIntrinsic column inline sizes according to INTRINSIC § 4.1\nBased on the information here, distributes excess …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFills in the inline-size guesses for this column per …\nReturns the computed inline size of the table wrapper …\nLinearly interpolates between two guesses, as specified by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe column inline-size assignment where each column is …\nThe column inline-size assignment where:\nThe column inline-size assignment where:\nCreates a guess with all elements initialized to zero.\nThe column inline-size assignment where:\nSee INTRINSIC § 4.3.\nTable-layout property\nComputes the weight needed to linearly interpolate <code>middle</code> …\nInformation about a text run that we’re about to create. …\nA mapping from a portion of an unscanned text fragment to …\nA stack-allocated object for scanning an inline flow into …\nAccounts for <code>text-transform</code>.\nThe bidirection embedding level of this text run.\nThe range of byte indices within the text fragment.\nIs the insertion point for this text run within this …\nFinish processing this RunInfo and add it to the “done”…\nFlushes this run mapping to the list. <code>run_info</code> describes …\nA “clump” is a range of inline flow leaves that can be …\nThe font that the text should be rendered with.\nReturns the metrics of the font represented by the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe insertion point in this text run, if applicable.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCan a character with script <code>b</code> continue a text run with …\nReturns true if the script is not invalid or inherited.\nReturns the line block-size needed by the given computed …\nGiven the current set of text runs, creates a run mapping …\nThe index of the unscanned text fragment that this mapping …\nThe Unicode script property of this text run.\nIs the text in this fragment selected?\nReturns the concatenated text of a list of unscanned text …\nThe text that will go in this text run.\nThe index of the text run we’re going to create.\nA single “paragraph” of text in one font size and …\nA “slice” of a text run is a series of contiguous …\nReturns an iterator that will iterate over all slices of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe glyph store that the glyphs in this slice belong to.\nThe glyph runs that make up this text run.\nReturns the index of the first glyph run containing the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that will iterate over all slices of …\nReturns an iterator that over natural word slices in …\nConstructs a new text run. Also returns if there is a line …\nThe byte index that this slice begins at, relative to the …\nThe range that these glyphs encompass, relative to the …\nReturns the index in the range of the first glyph …\nThe UTF-8 string represented by this text run.\nReturns the range that these glyphs encompass, relative to …\nThe assign-block-sizes-and-store-overflow traversal, the …\nThe assign-inline-sizes traversal. In Gecko this …\nThe bubble-inline-sizes traversal, the first part of …\nAn in-order (sequential only) traversal.\nA bottom-up traversal, with a optional in-order pass.\nA bottom-up, parallelizable traversal.\nA top-down traversal.\nThe flow construction traversal, which builds flows for …\nSafety\nConsumes this traversal context, returning ownership of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a traversal context, taking ownership of the …\nThe operation to perform. Return true to continue or false …\nThe operation to perform. Return true to continue or false …\nThe operation to perform. Returns the level of the tree we…\nThe operation to perform. Return true to continue or false …\nReturns true if this node must be processed in-order. If …\nReturns false if this node must be processed in-order. If …\nReturns true if this node should be processed and false if …\nReturns true if this node should be processed and false if …\nTraverses the tree in preorder.\nTraverses the tree in postorder.\nTraverses the tree in-order.\nTraverse the Absolute flow tree in preorder.\nReturns the layout data flags for this node.\nReturns the argument unchanged.\nAdds the given flags to this node.\nCalls <code>U::from(self)</code>.\nRemoves the given flags from this node.\nThe RestyleDamage from any restyling, or …\nIf this is a text node, generated content, or a form …")