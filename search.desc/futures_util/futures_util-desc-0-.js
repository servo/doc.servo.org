searchState.loadedDescShard("futures_util", 0, "Combinators and utilities for working with <code>Future</code>s, <code>Stream</code>…\nAwait\nAsynchronous values.\nAsynchronous I/O.\nPolls multiple futures simultaneously, returning a tuple …\nPolls multiple futures simultaneously, returning a tuple …\nFutures-powered synchronization primitives.\nThis module contains the <code>Never</code> type.\nA macro which yields to the event loop once.\nA macro which yields to the event loop once.\nPins a value on the stack.\nA macro which returns the result of polling a future once …\nA macro which returns the result of polling a future once …\nExtracts the successful type of a <code>Poll&lt;T&gt;</code>.\nPolls multiple futures and streams simultaneously, …\nPolls multiple futures and streams simultaneously, …\nPolls multiple futures and streams simultaneously, …\nPolls multiple futures and streams simultaneously, …\nAsynchronous sinks.\nAsynchronous streams.\nCombines several streams, all producing the same <code>Item</code> …\nCombines several streams, all producing the same <code>Item</code> …\nTools for working with tasks.\nPolls multiple futures simultaneously, resolving to a …\nPolls multiple futures simultaneously, resolving to a …\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>join</code> macro.\nThe <code>select</code> macro.\nThe <code>stream_select</code> macro.\nReturn a value from <code>0..n</code>.\nPseudorandom number generator based on xorshift*.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nFuture for the <code>always_ready</code> function.\nFuture for the <code>and_then</code> method.\nAn owned dynamically typed <code>Future</code> for use in cases where …\nFuture for the <code>catch_unwind</code> method.\nThe output of the completed future\nThe output of the completed future\nCombines two different futures, streams, or sinks having …\nFuture for the <code>err_into</code> method.\nThe type of failures yielded by this future\nFuture for the <code>flatten</code> method.\nSink for the <code>flatten_sink</code> method.\nStream for the <code>flatten_stream</code> method.\nFuture for the <code>fuse</code> method.\nA future which tracks whether or not the underlying future …\nA not-yet-completed future\nA not-yet-completed future\nAn extension trait for <code>Future</code>s that provides a variety of …\nA custom trait object for polling futures, roughly akin to …\nThe empty variant after the result of a <code>MaybeDone</code> has been …\nThe empty variant after the result of a <code>TryMaybeDone</code> has …\nFuture for the <code>inspect</code> method.\nFuture for the <code>inspect_err</code> method.\nFuture for the <code>inspect_ok</code> method.\nFuture for the <code>into_future</code> method.\nStream for the <code>into_stream</code> method.\nFuture for the <code>join</code> function.\nFuture for the <code>join3</code> function.\nFuture for the <code>join4</code> function.\nFuture for the <code>join5</code> function.\nFuture for the <code>join_all</code> function.\nFuture for the <code>lazy</code> function.\nFirst branch of the type\n<code>BoxFuture</code>, but without the <code>Send</code> requirement.\nA custom trait object for polling futures, roughly akin to …\nFuture for the <code>map</code> method.\nFuture for the <code>map_err</code> method.\nFuture for the <code>map_into</code> combinator.\nFuture for the <code>map_ok</code> method.\nFuture for the <code>map_ok_or_else</code> method.\nA future that may have completed.\nFuture for the <code>never_error</code> combinator.\nThe type of successful values yielded by this future\nFuture for the <code>ok_into</code> method.\nA future representing a value which may or may not be …\nFuture for the <code>or_else</code> method.\nFuture for the <code>pending()</code> function.\nFuture for the <code>poll_fn</code> function.\nFuture for the <code>poll_immediate</code> function.\nFuture for the <code>ready</code> function.\nA future which sends its output to the corresponding …\nThe handle to a remote future returned by <code>remote_handle</code>. …\nSecond branch of the type\nFuture for the <code>select()</code> function.\nFuture for the <code>select_all</code> function.\nFuture for the <code>select_ok</code> function.\nFuture for the <code>shared</code> method.\nFuture for the <code>then</code> method.\nFuture for the <code>try_flatten</code> method.\nFuture for the <code>try_flatten_stream</code> method.\nA convenience for futures that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning futures\nFuture for the <code>try_join</code> function.\nFuture for the <code>try_join3</code> function.\nFuture for the <code>try_join4</code> function.\nFuture for the <code>try_join5</code> function.\nFuture for the <code>try_join_all</code> function.\nA future that may have completed with an error.\nFuture for the <code>try_select()</code> function.\nFuture for the <code>unit_error</code> combinator.\nA custom implementation of a future trait object for …\nFuture for the <code>unwrap_or_else</code> method.\nA weak reference to a <code>Shared</code> that can be upgraded much …\nAbort the <code>Abortable</code> stream/future associated with this …\nCreates a new <code>Abortable</code> future and an <code>AbortHandle</code> which …\nCreates a future that is always immediately ready with a …\nDrops the future represented by the given fat pointer.\nCreate a future that is immediately ready with an error …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFutures\nCreate an <code>AbortHandle</code> from the given <code>AbortRegistration</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an owned instance into a (conceptually owned) fat …\nChecks whether the task has been aborted. Note that all …\nChecks whether <code>AbortHandle::abort</code> was <em>called</em> on any …\nReturns <code>true</code> if the underlying future should no longer be …\nJoins the result of two futures, waiting for them both to …\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nDefinition of the <code>JoinAll</code> combinator, waiting for all of a …\nCreates a future which represents a collection of the …\nCreates a new future that allows delayed execution of a …\nDefinition of the MaybeDone combinator\nWraps a future into a <code>MaybeDone</code>\nCreates a new <code>Abortable</code> future/stream using an existing …\nCreates an (<code>AbortHandle</code>, <code>AbortRegistration</code>) pair which can …\nCreate a future that is immediately ready with a success …\nDefinition of the <code>Option</code> (optional step) combinator\nCreates a future which never resolves, representing a …\nDefinition of the <code>PollFn</code> adapter combinator\nCreates a new future wrapping around a function returning …\nCreates a future that is immediately ready with an Option …\nCreates a future that is immediately ready with a value.\nWaits for either one of two differently-typed futures to …\nCreates a new future which will select over a list of …\nCreates a new future which will select the first …\nFutures\nJoins the result of two futures, waiting for them both to …\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nDefinition of the <code>TryJoinAll</code> combinator, waiting for all …\nCreates a future which represents either a collection of …\nDefinition of the TryMaybeDone combinator\nWraps a future into a <code>TryMaybeDone</code>\nPoll this <code>TryFuture</code> as if it were a <code>Future</code>.\nWaits for either one of two differently-typed futures to …\nCreates a new <code>Abortable</code> future and an <code>AbortHandle</code> which …\nFuture for the <code>always_ready</code> function.\nCreates a future that is always immediately ready with a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCombines two different futures, streams, or sinks having …\nFirst branch of the type\nSecond branch of the type\nConvert <code>Pin&lt;&amp;mut Either&lt;A, B&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;A, B&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;A&gt;, Pin&lt;&amp;B&gt;&gt;</code>, …\nFactor out a homogeneous type from an either of pairs.\nFactor out a homogeneous type from an either of pairs.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtract the value of an either over two equivalent types.\nFuture for the <code>flatten</code> method.\nStream for the <code>flatten_stream</code> method.\nAn extension trait for <code>Future</code>s that provides a variety of …\nFuture for the <code>inspect</code> method.\nStream for the <code>into_stream</code> method.\nFuture for the <code>map</code> method.\nFuture for the <code>map_into</code> combinator.\nFuture for the <code>never_error</code> combinator.\nFuture for the <code>then</code> method.\nFuture for the <code>unit_error</code> combinator.\nWrap the future in a Box, pinning it.\nWrap the future in a Box, pinning it.\nWrap the future in a Box, pinning it.\nWrap the future in a Box, pinning it.\nCatches unwinding panics while polling the future.\nCatches unwinding panics while polling the future.\nFlatten the execution of this future when the output of …\nFlatten the execution of this future when the output of …\nFlatten the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuse a future such that <code>poll</code> will never again be called …\nFuse a future such that <code>poll</code> will never again be called …\nDo something with the output of a future before passing it …\nDo something with the output of a future before passing it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this future into a single element stream.\nConvert this future into a single element stream.\nWrap this future in an <code>Either</code> future, making it the …\nWrap this future in an <code>Either</code> future, making it the …\nMap this future’s output to a different type, returning …\nMap this future’s output to a different type, returning …\nMap this future’s output to a different type, returning …\nMap this future’s output to a different type, returning …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nEvaluates and consumes the future, returning the resulting …\nEvaluates and consumes the future, returning the resulting …\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nTurn this future into a future that yields <code>()</code> on …\nTurn this future into a future that yields <code>()</code> on …\nWrap this future in an <code>Either</code> future, making it the …\nWrap this future in an <code>Either</code> future, making it the …\nCreate a cloneable handle to this future where all handles …\nCreate a cloneable handle to this future where all handles …\nChain on a computation for when a future finished, passing …\nChain on a computation for when a future finished, passing …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nFuture for the <code>catch_unwind</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>fuse</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Fuse</code>-wrapped future which is already …\nInternal Map future\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new Map.\nContains the error value\nContains the success value\nA future which sends its output to the corresponding …\nThe handle to a remote future returned by <code>remote_handle</code>. …\nDrops this handle <em>without</em> canceling the underlying future.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFuture for the <code>shared</code> method.\nA weak reference to a <code>Shared</code> that can be upgraded much …\nCreates a new <code>WeakShared</code> for this <code>Shared</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety: callers must first ensure that <code>self.inner.state</code> is …\nReturns <code>Some</code> containing a reference to this <code>Shared</code>’s …\nReturns <code>true</code> if the two <code>Shared</code>s point to the same future …\nHashes the internal state of this <code>Shared</code> in a way that’s …\nRegisters the current task to receive a wakeup when we are …\nGets the number of strong pointers to this allocation.\nSafety: callers must first ensure that <code>inner.state</code> is …\nAttempts to upgrade this <code>WeakShared</code> into a <code>Shared</code>.\nGets the number of weak pointers to this allocation.\nFuture for the <code>join</code> function.\nFuture for the <code>join3</code> function.\nFuture for the <code>join4</code> function.\nFuture for the <code>join5</code> function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoins the result of two futures, waiting for them both to …\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nFuture for the <code>join_all</code> function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a future which represents a collection of the …\nFuture for the <code>lazy</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new future that allows delayed execution of a …\nThe output of the completed future\nA not-yet-completed future\nThe empty variant after the result of a <code>MaybeDone</code> has been …\nA future that may have completed.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWraps a future into a <code>MaybeDone</code>\nReturns an <code>Option</code> containing a mutable reference to the …\nAttempt to take the output of a <code>MaybeDone</code> without driving …\nA future representing a value which may or may not be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>pending()</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a future which never resolves, representing a …\nFuture for the <code>poll_fn</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new future wrapping around a function returning …\nFuture for the <code>poll_immediate</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a future that is immediately ready with an Option …\nFuture for the <code>ready</code> function.\nCreate a future that is immediately ready with an error …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnwraps the value from this immediately ready future.\nCreate a future that is immediately ready with a success …\nCreates a future that is immediately ready with a value.\nFuture for the <code>select()</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWaits for either one of two differently-typed futures to …\nFuture for the <code>select_all</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying futures.\nCreates a new future which will select over a list of …\nFuture for the <code>select_ok</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new future which will select the first …\nFuture for the <code>and_then</code> method.\nFuture for the <code>err_into</code> method.\nSink for the <code>flatten_sink</code> method.\nFuture for the <code>inspect_err</code> method.\nFuture for the <code>inspect_ok</code> method.\nFuture for the <code>map_err</code> method.\nFuture for the <code>map_ok</code> method.\nFuture for the <code>map_ok_or_else</code> method.\nFuture for the <code>ok_into</code> method.\nFuture for the <code>or_else</code> method.\nFuture for the <code>try_flatten</code> method.\nFuture for the <code>try_flatten_err</code> method.\nFuture for the <code>try_flatten_stream</code> method.\nAdapters specific to <code>Result</code>-returning futures\nFuture for the <code>unwrap_or_else</code> method.\nExecutes another future after this one resolves …\nExecutes another future after this one resolves …\nMaps this future’s <code>Error</code> to a new error type using the …\nMaps this future’s <code>Error</code> to a new error type using the …\nFlattens the execution of this future when the successful …\nFlattens the execution of this future when the successful …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDo something with the error value of a future before …\nDo something with the error value of a future before …\nDo something with the success value of a future before …\nDo something with the success value of a future before …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps a <code>TryFuture</code> into a type that implements <code>Future</code>.\nWraps a <code>TryFuture</code> into a type that implements <code>Future</code>.\nMaps this future’s error value to a different value.\nMaps this future’s error value to a different value.\nMaps this future’s success value to a different value.\nMaps this future’s success value to a different value.\nMaps this future’s success value to a different value, …\nMaps this future’s success value to a different value, …\nMaps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.\nMaps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.\nExecutes another future if this one resolves to an error. …\nExecutes another future if this one resolves to an error. …\nFlatten the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nA convenience method for calling <code>TryFuture::try_poll</code> on …\nA convenience method for calling <code>TryFuture::try_poll</code> on …\nUnwraps this future’s output, producing a future with …\nUnwraps this future’s output, producing a future with …\nFuture for the <code>into_future</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>try_join</code> function.\nFuture for the <code>try_join3</code> function.\nFuture for the <code>try_join4</code> function.\nFuture for the <code>try_join5</code> function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoins the result of two futures, waiting for them both to …\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nFuture for the <code>try_join_all</code> function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a future which represents either a collection of …\nThe output of the completed future\nA not-yet-completed future\nThe empty variant after the result of a <code>TryMaybeDone</code> has …\nA future that may have completed with an error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns an <code>Option</code> containing a mutable reference to the …\nAttempt to take the output of a <code>TryMaybeDone</code> without …\nWraps a future into a <code>TryMaybeDone</code>\nFirst branch of the type\nFirst branch of the type\nSecond branch of the type\nSecond branch of the type\nFuture for the <code>try_select()</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWaits for either one of two differently-typed futures to …\nA simple wrapper type which allows types which implement …\nRead bytes asynchronously.\nAn extension trait which adds utility methods to …\nRead bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncRead</code> …\nSeek bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncSeek</code> …\nWrite bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncWrite</code>…\nThe <code>BufReader</code> struct adds buffering to any reader.\nWraps a writer and buffers its output.\nReader for the <code>chain</code> method.\nFuture for the <code>close</code> method.\nFuture for the <code>copy()</code> function.\nFuture for the <code>copy_buf()</code> function.\nFuture for the <code>copy_buf_abortable()</code> function.\nA <code>Cursor</code> wraps an in-memory buffer and provides it with a …\nReader for the <code>empty()</code> function.\nFuture for the <code>fill_buf</code> method.\nFuture for the <code>flush</code> method.\nSink for the <code>into_sink</code> method.\nWrap a writer, like <code>BufWriter</code> does, but prioritizes …\nStream for the <code>lines</code> method.\nFuture for the <code>read</code> method.\nFuture for the <code>read_exact</code> method.\nThe readable half of an object returned from …\nFuture for the <code>read_line</code> method.\nFuture for the <code>read_to_end</code> method.\nFuture for the <code>read_to_string</code> method.\nFuture for the <code>read_until</code> method.\nFuture for the <code>read_vectored</code> method.\nReader for the <code>repeat()</code> function.\nError indicating a <code>ReadHalf&lt;T&gt;</code> and <code>WriteHalf&lt;T&gt;</code> were not …\nFuture for the <code>BufReader::seek_relative</code> method.\nFuture for the <code>seek</code> method.\nWriter for the <code>sink()</code> function.\nReader for the <code>take</code> method.\nAn owned window around an underlying buffer.\nFuture for the <code>write</code> method.\nFuture for the <code>write_all</code> method.\nThe writable half of an object returned from …\nFuture for the <code>write_vectored</code> method.\nCreates an adaptor which will chain this stream with …\nCreates a future which will entirely close this <code>AsyncWrite</code>.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nA convenience for calling <code>AsyncBufRead::consume</code> on <code>Unpin</code> …\nCreates a future which copies all the bytes from one …\nCreates a future which copies all the bytes from one …\nCreates a future which copies all the bytes from one …\nConstructs a new handle to an empty reader.\nCreates a future which will wait for a non-empty buffer to …\nCreates a future which will entirely flush this <code>AsyncWrite</code>.\nInitializes a buffer if necessary.\nAllow using an <code>AsyncWrite</code> as a <code>Sink</code><code>&lt;Item: AsRef&lt;[u8]&gt;&gt;</code>.\nReturns a stream over the lines of this reader. This …\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nTries to read some bytes directly into the given <code>buf</code> in …\nCreates a future which will read exactly enough bytes to …\nCreates a future which will read all the bytes associated …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes associated …\nCreates a future which will read from the <code>AsyncRead</code> into …\nCreates an instance of a reader that infinitely repeats …\nCreates a future which will seek an IO object, and then …\nCreates an instance of a writer which will successfully …\nHelper method for splitting this read/write object into …\nCreates a future which will return the current seek …\nCreates an AsyncRead adapter which will read at most <code>limit</code> …\nCreates a future which will write bytes from <code>buf</code> into the …\nWrite data into this object.\nCreates a future which will write bytes from <code>bufs</code> into the …\nA simple wrapper type which allows types which implement …\nReturns the argument unchanged.\nReturns a mutable reference to the contained IO object.\nReturns a reference to the contained IO object.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the contained IO object.\nCreates a new <code>AllowStdIo</code> from an existing IO object.\nThe <code>BufReader</code> struct adds buffering to any reader.\nFuture for the <code>BufReader::seek_relative</code> method.\nReturns a reference to the internally buffered data.\nInvalidates all data in the internal buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nCreates a new <code>BufReader</code> with a default buffer capacity. …\nSeek to an offset, in bytes, in the underlying reader.\nAttempts to seek relative to the current position. If the …\nSeeks relative to the current position. If the new …\nCreates a new <code>BufReader</code> with the specified buffer capacity.\nWraps a writer and buffers its output.\nReturns a reference to the internally buffered data.\nCapacity of <code>buf</code>. how many chars can be held in buffer\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nWrite directly using <code>inner</code>, bypassing buffering\nWrite directly using <code>inner</code>, bypassing buffering\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nCreates a new <code>BufWriter</code> with a default buffer capacity. …\nSeek to the offset, in bytes, in the underlying writer.\nRemaining number of bytes to reach <code>buf</code> ’s capacity\nCreates a new <code>BufWriter</code> with the specified buffer capacity.\nWrite a byte slice directly into buffer\nWrite byte slice directly into <code>self.buf</code>\nReader for the <code>chain</code> method.\nReturns the argument unchanged.\nGets mutable references to the underlying readers in this …\nGets pinned mutable references to the underlying readers …\nGets references to the underlying readers in this <code>Chain</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Chain</code>, returning the wrapped readers.\nFuture for the <code>close</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>copy()</code> function.\nCreates a future which copies all the bytes from one …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>copy_buf()</code> function.\nCreates a future which copies all the bytes from one …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>copy_buf_abortable()</code> function.\nCreates a future which copies all the bytes from one …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>Cursor</code> wraps an in-memory buffer and provides it with a …\nReturns the argument unchanged.\nGets a mutable reference to the underlying value in this …\nGets a reference to the underlying value in this cursor.\nCalls <code>U::from(self)</code>.\nConsumes this cursor, returning the underlying value.\nCreates a new cursor wrapping the provided underlying …\nReturns the current position of this cursor.\nSets the position of this cursor.\nReader for the <code>empty()</code> function.\nConstructs a new handle to an empty reader.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>fill_buf</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>flush</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSink for the <code>into_sink</code> method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf we have an outstanding block in <code>buffer</code> attempt to push …\nWrap a writer, like <code>BufWriter</code> does, but prioritizes …\nReturns a reference to <code>buf_writer</code>’s internally buffered …\nFlush <code>buf_writer</code> if last char is “new line”\nReturns the argument unchanged.\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nCreate a new <code>LineWriter</code> with default buffer capacity. The …\nForward to <code>buf_writer</code> ’s <code>BufWriter::poll_close()</code>\nForward to <code>buf_writer</code> ’s <code>BufWriter::poll_flush()</code>\nCreates a new <code>LineWriter</code> with the specified buffer …\nStream for the <code>lines</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>read</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>read_exact</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>read_line</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>read_to_end</code> method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFuture for the <code>read_to_string</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>read_until</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>read_vectored</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReader for the <code>repeat()</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an instance of a reader that infinitely repeats …\nFuture for the <code>seek</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWriter for the <code>sink()</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an instance of a writer which will successfully …\nThe readable half of an object returned from …\nError indicating a <code>ReadHalf&lt;T&gt;</code> and <code>WriteHalf&lt;T&gt;</code> were not …\nThe writable half of an object returned from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this <code>ReadHalf</code> and some <code>WriteHalf</code> were split from …\nChecks if this <code>WriteHalf</code> and some <code>ReadHalf</code> were split from …\nAttempts to put the two “halves” of a split …\nAttempts to put the two “halves” of a split …\nReader for the <code>take</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nReturns the remaining number of bytes that can be read …\nSets the number of bytes that can be read before this …\nAn owned window around an underlying buffer.\nReturns the end index of this window into the underlying …\nReturns the argument unchanged.\nGets a mutable reference to the underlying buffer inside …\nGets a shared reference to the underlying buffer inside of …\nCalls <code>U::from(self)</code>.\nConsumes this <code>Window</code>, returning the underlying buffer.\nCreates a new window around the buffer <code>t</code> defaulting to the …\nChanges the range of this window to the range specified.\nReturns the starting index of this window into the …\nFuture for the <code>write</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>write_all</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>write_vectored</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn RAII guard returned by the <code>MutexGuard::map</code> and …\nA futures-aware mutex.\nAn RAII guard returned by the <code>lock</code> and <code>try_lock</code> methods. …\nA future which resolves when the target mutex has been …\nAn RAII guard returned by the <code>lock_owned</code> and <code>try_lock_owned</code>…\nA future which resolves when the target mutex has been …\nFutures-powered synchronization primitives.\nA type of futures-powered synchronization primitive which …\nReturned RAII guard from the <code>poll_lock</code> method.\nError indicating two <code>BiLock&lt;T&gt;</code>s were not two halves of a …\nGet a mutable pinned reference to the locked value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> only if the other <code>BiLock&lt;T&gt;</code> originated from …\nCreates a new <code>BiLock</code> protecting the provided data.\nAttempt to acquire this lock, returning <code>Pending</code> if it can…\nAttempts to put the two “halves” of a <code>BiLock&lt;T&gt;</code> back …\nAn RAII guard returned by the <code>MutexGuard::map</code> and …\nA futures-aware mutex.\nAn RAII guard returned by the <code>lock</code> and <code>try_lock</code> methods. …\nA future which resolves when the target mutex has been …\nAn RAII guard returned by the <code>lock_owned</code> and <code>try_lock_owned</code>…\nA future which resolves when the target mutex has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this mutex, returning the underlying data.\nAcquire the lock asynchronously.\nAcquire the lock asynchronously.\nReturns a locked view over a portion of the locked data.\nReturns a locked view over a portion of the locked data.\nCreates a new futures-aware mutex.\nAttempt to acquire the lock immediately.\nAttempt to acquire the lock immediately.\nA type with no possible values.\nSink for the <code>buffer</code> method.\nFuture for the <code>close</code> method.\nSink for the <code>drain</code> function.\nThe type of value produced by the sink when an error …\nSink that clones incoming items and forwards them to two …\nFuture for the <code>feed</code> method.\nFuture for the <code>flush</code> method.\nFuture for the <code>send</code> method.\nFuture for the <code>send_all</code> method.\nA <code>Sink</code> is a value into which other values can be sent, …\nSink for the <code>sink_err_into</code> method.\nAn extension trait for <code>Sink</code>s that provides a variety of …\nSink for the <code>sink_map_err</code> method.\nSink for the <code>unfold</code> function.\nSink for the <code>with</code> method.\nSink for the <code>with_flat_map</code> method.\nAdds a fixed-size buffer to the current sink.\nClose the sink.\nCreate a sink that will just discard all items given to it.\nFanout items to multiple sinks.\nA future that completes after the given item has been …\nFlush the sink, processing all pending items.\nWrap this sink in an <code>Either</code> sink, making it the left-hand …\nFlush any remaining output and close this sink, if …\nA convenience method for calling <code>Sink::poll_close</code> on <code>Unpin</code> …\nFlush any remaining output from this sink.\nA convenience method for calling <code>Sink::poll_flush</code> on <code>Unpin</code> …\nAttempts to prepare the <code>Sink</code> to receive a value.\nA convenience method for calling <code>Sink::poll_ready</code> on <code>Unpin</code> …\nWrap this stream in an <code>Either</code> stream, making it the …\nA future that completes after the given item has been …\nA future that completes after the given stream has been …\nMap this sink’s error to a different error type using …\nTransforms the error returned by the sink.\nBegin the process of sending a value to the sink. Each …\nA convenience method for calling <code>Sink::start_send</code> on <code>Unpin</code> …\nCreate a sink from a function which processes one item at …\nComposes a function <em>in front of</em> the sink.\nComposes a function <em>in front of</em> the sink.\nSink for the <code>buffer</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nFuture for the <code>close</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSink for the <code>drain</code> function.\nCreate a sink that will just discard all items given to it.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSink for the <code>sink_err_into</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nSink that clones incoming items and forwards them to two …\nReturns the argument unchanged.\nGet a mutable reference to the inner sinks.\nGet a pinned mutable reference to the inner sinks.\nGet a shared reference to the inner sinks.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sinks.\nFuture for the <code>feed</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>flush</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSink for the <code>sink_map_err</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nFuture for the <code>send</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>send_all</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSink for the <code>unfold</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a sink from a function which processes one item at …\nSink for the <code>with</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nCompletes the processing of previous item if any.\nSink for the <code>with_flat_map</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nFuture for the <code>all</code> method.\nStream for the <code>and_then</code> method.\nFuture for the <code>any</code> method.\nAn owned dynamically typed <code>Stream</code> for use in cases where …\nStream for the <code>buffer_unordered</code> method.\nStream for the <code>buffered</code> method.\nStream for the <code>catch_unwind</code> method.\nStream for the <code>chain</code> method.\nStream for the <code>chunks</code> method.\nFuture for the <code>collect</code> method.\nFuture for the <code>concat</code> method.\nFuture for the <code>count</code> method.\nStream for the <code>cycle</code> method.\nStream for the <code>empty</code> function.\nStream for the <code>enumerate</code> method.\nStream for the <code>err_into</code> method.\nThe type of failures yielded by this future\nStream for the <code>filter</code> method.\nStream for the <code>filter_map</code> method.\nStream for the <code>flat_map</code> method.\nStream for the <code>flat_map_unordered</code> method.\nStream for the <code>flatten</code> method.\nStream for the <code>flatten_unordered</code> method.\nFuture for the <code>fold</code> method.\nFuture for the <code>for_each</code> method.\nFuture for the <code>for_each_concurrent</code> method.\nFuture for the <code>forward</code> method.\nStream for the <code>fuse</code> method.\nA stream which tracks whether or not the underlying stream …\nAn unbounded queue of futures.\nA set of futures which may complete in any order.\nStream for the <code>inspect</code> method.\nStream for the <code>inspect_err</code> method.\nStream for the <code>inspect_ok</code> method.\nReader for the <code>into_async_read</code> method.\nStream for the <code>into_stream</code> method.\nValues yielded by the stream.\nStream for the <code>iter</code> function.\nPoll the first stream.\n<code>BoxStream</code>, but without the <code>Send</code> requirement.\nStream for the <code>map</code> method.\nStream for the <code>map_err</code> method.\nStream for the <code>map_ok</code> method.\nFuture for the <code>next</code> method.\nFuture for the <code>Peekable::next_if</code> method.\nFuture for the <code>Peekable::next_if_eq</code> method.\nThe type of successful values yielded by this future\nA stream which emits single element and then EOF.\nStream for the <code>or_else</code> method.\nFuture for the <code>Peekable::peek</code> method.\nFuture for the <code>Peekable::peek_mut</code> method.\nA <code>Stream</code> that implements a <code>peek</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn</code> function.\nStream for the poll_immediate function.\nType to tell <code>SelectWithStrategy</code> which stream to poll next.\nStream for the <code>ready_chunks</code> method.\nStream for the <code>repeat</code> function.\nAn stream that repeats elements of type <code>A</code> endlessly by …\nError indicating a <code>SplitSink&lt;S&gt;</code> and <code>SplitStream&lt;S&gt;</code> were …\nPoll the second stream.\nStream for the <code>scan</code> method.\nStream for the <code>select()</code> function.\nAn unbounded set of streams\nFuture for the <code>select_next_some</code> method.\nStream for the <code>select_with_strategy()</code> function. See …\nStream for the <code>skip</code> method.\nStream for the <code>skip_while</code> method.\nA <code>Sink</code> part of the split pair\nA <code>Stream</code> part of the split pair\nA stream of values produced asynchronously.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nFuture for the <code>into_future</code> method.\nStream for the <code>take</code> method.\nStream for the <code>take_until</code> method.\nStream for the <code>take_while</code> method.\nStream for the <code>then</code> method.\nFuture for the <code>try_all</code> method.\nFuture for the <code>try_any</code> method.\nStream for the <code>try_buffer_unordered</code> method.\nStream for the <code>try_buffered</code> method.\nStream for the <code>try_chunks</code> method.\nError indicating, that while chunk was collected inner …\nFuture for the <code>try_collect</code> method.\nFuture for the <code>try_concat</code> method.\nStream for the <code>try_filter</code> method.\nStream for the <code>try_filter_map</code> method.\nStream for the <code>try_flatten</code> method.\nStream for the <code>try_flatten_unordered</code> method.\nFuture for the <code>try_fold</code> method.\nFuture for the <code>try_for_each</code> method.\nFuture for the <code>try_for_each_concurrent</code> method.\nFuture for the <code>try_next</code> method.\nStream for the <code>try_ready_chunks</code> method.\nError indicating, that while chunk was collected inner …\nStream for the <code>try_skip_while</code> method.\nA convenience for streams that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning streams\nStream for the <code>try_take_while</code> method.\nStream for the <code>try_unfold</code> function.\nStream for the <code>unfold</code> function.\nFuture for the <code>unzip</code> method.\nStream for the <code>zip</code> method.\nCreates a new <code>Abortable</code> stream and an <code>AbortHandle</code> which …\nCreates a stream which contains no elements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn unbounded set of futures.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the stream should no longer be polled.\nConverts an <code>Iterator</code> into a <code>Stream</code> which is always ready …\nCreates a stream of a single element.\nCreates a stream which never returns any elements.\nDefinition of the <code>PollFn</code> combinator\nCreates a new stream wrapping a function returning …\nCreates a new stream that always immediately returns …\nAttempt to pull out the next value of this stream, …\nCreate a stream which produces the same item repeatedly.\nCreates a new stream that repeats elements of type <code>A</code> …\nThis function will attempt to pull items from both …\nAn unbounded set of streams\nConvert a list of streams into a <code>Stream</code> of results from …\nThis function will attempt to pull items from both …\nReturns the bounds on the remaining length of the stream.\nStreams\nPoll this <code>TryStream</code> as if it were a <code>Stream</code>.\nStreams\nCreates a <code>TryStream</code> from a seed and a closure returning a …\nCreates a <code>Stream</code> from a seed and a closure returning a …\nCreates a new <code>Abortable</code> stream and an <code>AbortHandle</code> which …\nStream for the <code>empty</code> function.\nCreates a stream which contains no elements.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn unbounded queue of futures.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the queue contains no futures\nReturns the number of futures contained in the queue.\nConstructs a new, empty <code>FuturesOrdered</code>\nPush a future into the queue.\nPushes a future to the back of the queue.\nPushes a future to the front of the queue.\nA set of futures which may complete in any order.\nOwned iterator over all futures in the unordered set.\nImmutable iterator over all the futures in the unordered …\nMutable iterator over all futures in the unordered set.\nMutable iterator over all futures in the unordered set.\nImmutable iterator over all futures in the unordered set.\nReturns the current head node and number of futures in the …\nClears the set, removing all futures.\nReturns <code>true</code> if the set contains no futures.\nReturns an iterator that allows inspecting each future in …\nReturns an iterator that allows modifying each future in …\nReturns an iterator that allows modifying each future in …\nReturns an iterator that allows inspecting each future in …\nReturns the number of futures contained in the set.\nInsert a new task into the internal linked list.\nConstructs a new, empty <code>FuturesUnordered</code>.\nReturns the reserved value for <code>Task::next_all</code> to indicate …\nPush a future into the set.\nReleases the task. It destroys the future inside and …\nRemove the task from the linked list tracking all tasks …\nOwned iterator over all futures in the unordered set.\nImmutable iterator over all the futures in the unordered …\nMutable iterator over all futures in the unordered set.\nMutable iterator over all futures in the unordered set.\nImmutable iterator over all futures in the unordered set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe dequeue function from the 1024cores intrusive MPSC …\nThe enqueue function from the 1024cores intrusive MPSC …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpins until <code>next_all</code> is no longer set to <code>pending_next_all</code>.\nReturns a waker reference for this task without cloning …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCopy of <code>future_task::waker_ref</code> without <code>W: &#39;static</code> bound.\nStream for the <code>iter</code> function.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying iterator …\nAcquires a reference to the underlying iterator that this …\nCalls <code>U::from(self)</code>.\nConsumes this stream, returning the underlying iterator.\nConverts an <code>Iterator</code> into a <code>Stream</code> which is always ready …\nA stream which emits single element and then EOF.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a stream of a single element.\nStream for the <code>pending()</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a stream which never returns any elements.\nStream for the <code>poll_fn</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new stream wrapping a function returning …\nStream for the poll_immediate function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new stream that always immediately returns …\nStream for the <code>repeat</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a stream which produces the same item repeatedly.\nAn stream that repeats elements of type <code>A</code> endlessly by …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new stream that repeats elements of type <code>A</code> …\nStream for the <code>select()</code> function.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying streams …\nAcquires a pinned mutable reference to the underlying …\nAcquires a reference to the underlying streams that this …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying streams.\nThis function will attempt to pull items from both …\nOwned iterator over all streams in the unordered set.\nImmutable iterator over all streams in the unordered set.\nMutable iterator over all streams in the unordered set.\nAn unbounded set of streams\nClears the set, removing all streams.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the set contains no streams\nReturns an iterator that allows inspecting each stream in …\nReturns an iterator that allows modifying each stream in …\nReturns the number of streams contained in the set.\nConstructs a new, empty <code>SelectAll</code>\nPush a stream into the set.\nConvert a list of streams into a <code>Stream</code> of results from …\nPoll the first stream.\nType to tell <code>SelectWithStrategy</code> which stream to poll next.\nPoll the second stream.\nStream for the <code>select_with_strategy()</code> function. See …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying streams …\nAcquires a pinned mutable reference to the underlying …\nAcquires a reference to the underlying streams that this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying streams.\nThis function will attempt to pull items from both …\nToggle the value and return the old one.\nStream for the <code>flat_map</code> method.\nStream for the <code>flat_map_unordered</code> method.\nStream for the <code>flatten</code> method.\nFuture for the <code>forward</code> method.\nStream for the <code>inspect</code> method.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecute predicate over asynchronous stream, and return <code>true</code>…\nWrap the stream in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the stream.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nAdapter for chaining two streams.\nAn adaptor for chunking up items of the stream inside a …\nAn adaptor for chunking up items of the stream inside a …\nTransforms a stream into a collection, returning a future …\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nConcatenate all items of a stream into a single extendable …\nDrives the stream to completion, counting the number of …\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nRepeats a stream endlessly.\nCreates a stream which gives the current iteration count …\nCreates a stream which gives the current iteration count …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nExecute an accumulating asynchronous computation over a …\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nA future that completes after the given stream has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuse a stream such that <code>poll_next</code> will never again be …\nFuse a stream such that <code>poll_next</code> will never again be …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nDo something with each item of this stream, afterwards …\nDo something with each item of this stream, afterwards …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this stream into a future of …\nConverts this stream into a future of …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nWrap this stream in an <code>Either</code> stream, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nMaps this stream’s items to a different type, returning …\nMaps this stream’s items to a different type, returning …\nCreates a future that resolves to the next item in the …\nCreates a future that resolves to the next item in the …\nCreates a new stream which exposes a <code>peek</code> method.\nCreates a new stream which exposes a <code>peek</code> method.\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nAn adaptor for chunking up ready items of the stream …\nAn adaptor for chunking up ready items of the stream …\nWrap this stream in an <code>Either</code> stream, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nReturns a <code>Future</code> that resolves when the next item in this …\nReturns a <code>Future</code> that resolves when the next item in this …\nCreates a new stream which skips <code>n</code> items of the underlying …\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nCreates a new stream of at most <code>n</code> items of the underlying …\nCreates a new stream of at most <code>n</code> items of the underlying …\nTake elements from this stream until the provided future …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nTake elements from this stream while the provided …\nComputes from this stream’s items new items of a …\nComputes from this stream’s items new items of a …\nConverts a stream of pairs into a future, which resolves …\nConverts a stream of pairs into a future, which resolves …\nAn adapter for zipping two streams together.\nAn adapter for zipping two streams together.\nFuture for the <code>all</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>any</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>buffer_unordered</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>buffered</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>catch_unwind</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>chain</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>chunks</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nFuture for the <code>collect</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>concat</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>count</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>cycle</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>enumerate</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>filter</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>filter_map</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>flatten</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nJust yields an item and continues standard flow.\nStream for the <code>flatten_unordered</code> method.\nStream for the <code>flatten_unordered</code> method with ability to …\nReturns the next flow step based on the received item.\nDescribes the next flow step.\nBoth base stream and inner streams need to be polled.\nInner streams need to be polled.\nThe base stream needs to be polled.\nThere is nothing to poll and stream isn’t being …\nThe current stream is being polled at the moment.\nUsed to execute some function on the given state when …\nFuture which polls optional inner stream.\nImmediately returns an underlying item from the function.\nInternal polling state of the stream.\nStream is being woken at the moment.\nThe stream was waked and will be polled.\nWill update state with the provided value on <code>wake_by_ref</code> …\nDeactivates bomb, forces it to not call provided function …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nConstructs new bomb with the given state.\nConstructs new <code>SharedPollState</code> with the given state.\nConstructs new <code>PollStreamFut</code> using given <code>stream</code>.\nHandles an item producing <code>FlowStep</code> describing the next …\nReplaces given waker’s inner_waker for polling …\nResets current state allowing to poll the stream and wake …\nAttempts to start polling, returning stored state in case …\nAttempts to start the waking process for the waker with …\nAttempts to start the waking process and performs bitwise …\nSets current state to\nToggles state to non-waking, allowing to start polling.\nFuture for the <code>fold</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>for_each</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>for_each_concurrent</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>forward</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>fuse</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nReturns whether the underlying stream has finished or not.\nFuture for the <code>into_future</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying stream that …\nAcquires a pinned mutable reference to the underlying …\nAcquires a reference to the underlying stream that this …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying stream.\nStream for the <code>map</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nFuture for the <code>next</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>Peekable::next_if</code> method.\nFuture for the <code>Peekable::next_if_eq</code> method.\nFuture for the <code>Peekable::peek</code> method.\nFuture for the <code>Peekable::peek_mut</code> method.\nA <code>Stream</code> that implements a <code>peek</code> method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nCreates a future which will consume and return the next …\nCreates a future which will consume and return the next …\nProduces a future which retrieves a reference to the next …\nProduces a future which retrieves a mutable reference to …\nPeek retrieves a reference to the next item in the stream.\nPeek retrieves a mutable reference to the next item in the …\nStream for the <code>ready_chunks</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>scan</code> method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nChecks if internal state is <code>None</code>.\nFuture for the <code>select_next_some</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>skip</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>skip_while</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nError indicating a <code>SplitSink&lt;S&gt;</code> and <code>SplitStream&lt;S&gt;</code> were …\nA <code>Sink</code> part of the split pair\nA <code>Stream</code> part of the split pair\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>SplitStream&lt;S&gt;</code> and <code>SplitSink&lt;S&gt;</code> …\nReturns <code>true</code> if the <code>SplitStream&lt;S&gt;</code> and <code>SplitSink&lt;S&gt;</code> …\nAttempts to put the two “halves” of a split …\nAttempts to put the two “halves” of a split …\nStream for the <code>take</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>take_until</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nWhether the stream was stopped yet by the stopping future …\nExtract the stopping future out of the combinator. The …\nOnce the stopping future is resolved, this method can be …\nStream for the <code>take_while</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>then</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nFuture for the <code>unzip</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>zip</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying streams …\nAcquires a pinned mutable reference to the underlying …\nAcquires a reference to the underlying streams that this …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying streams.\nStream for the <code>err_into</code> method.\nStream for the <code>inspect_err</code> method.\nStream for the <code>inspect_ok</code> method.\nStream for the <code>map_err</code> method.\nStream for the <code>map_ok</code> method.\nAdapters specific to <code>Result</code>-returning streams\nChain on a computation for when a value is ready, passing …\nChain on a computation for when a value is ready, passing …\nWraps the current stream in a new stream which converts …\nWraps the current stream in a new stream which converts …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nDo something with the error value of this stream, …\nDo something with the error value of this stream, …\nDo something with the success value of this stream, …\nDo something with the success value of this stream, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdapter that converts this stream into an <code>AsyncBufRead</code>.\nAdapter that converts this stream into an <code>AsyncBufRead</code>.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nWraps a <code>TryStream</code> into a type that implements <code>Stream</code>\nWraps a <code>TryStream</code> into a type that implements <code>Stream</code>\nWraps the current stream in a new stream which maps the …\nWraps the current stream in a new stream which maps the …\nWraps the current stream in a new stream which maps the …\nWraps the current stream in a new stream which maps the …\nChain on a computation for when an error happens, passing …\nChain on a computation for when an error happens, passing …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute several futures from a stream …\nAttempt to execute several futures from a stream …\nAttempt to execute several futures from a stream …\nAttempt to execute several futures from a stream …\nAn adaptor for chunking up successful items of the stream …\nAn adaptor for chunking up successful items of the stream …\nAttempt to transform a stream into a collection, returning …\nAttempt to transform a stream into a collection, returning …\nAttempt to concatenate all items of a stream into a single …\nAttempt to concatenate all items of a stream into a single …\nAttempt to filter the values produced by this stream …\nAttempt to filter the values produced by this stream …\nAttempt to filter the values produced by this stream while …\nAttempt to filter the values produced by this stream while …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nAttempt to execute an accumulating asynchronous …\nAttempt to execute an accumulating asynchronous …\nAttempts to run this stream to completion, executing the …\nAttempts to run this stream to completion, executing the …\nAttempts to run this stream to completion, executing the …\nAttempts to run this stream to completion, executing the …\nCreates a future that attempts to resolve the next item in …\nCreates a future that attempts to resolve the next item in …\nA convenience method for calling <code>TryStream::try_poll_next</code> …\nA convenience method for calling <code>TryStream::try_poll_next</code> …\nAn adaptor for chunking up successful, ready items of the …\nAn adaptor for chunking up successful, ready items of the …\nSkip elements on this stream while the provided …\nSkip elements on this stream while the provided …\nTake elements on this stream while the provided …\nTake elements on this stream while the provided …\nStream for the <code>and_then</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nReader for the <code>into_async_read</code> method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStream for the <code>into_stream</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>or_else</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nFuture for the <code>try_all</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>try_any</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>try_buffer_unordered</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>try_buffered</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>try_chunks</code> method.\nError indicating, that while chunk was collected inner …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nFuture for the <code>try_collect</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>try_concat</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>try_filter</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>try_filter_map</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>try_flatten</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nEmits either successful streams or single-item streams …\nImmediately propagates errors occurred in the base stream.\nEmits a single item immediately, then stream will be …\nStream for the <code>try_flatten_unordered</code> method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConstructs new <code>Single</code> with the given value.\nAttempts to take inner item immediately. Will always …\nFuture for the <code>try_fold</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>try_for_each</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>try_for_each_concurrent</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>try_next</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream for the <code>try_ready_chunks</code> method.\nError indicating, that while chunk was collected inner …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>try_skip_while</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>try_take_while</code> method.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying sink or …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sink or …\nStream for the <code>try_unfold</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a <code>TryStream</code> from a seed and a closure returning a …\nStream for the <code>unfold</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a <code>Stream</code> from a seed and a closure returning a …\nA way of waking up a specific task.\nA synchronization primitive for task wakeup.\nA custom trait object for polling futures, roughly akin to …\nA custom trait object for polling futures, roughly akin to …\nThe <code>LocalSpawn</code> is similar to <code>Spawn</code>, but allows spawning …\nExtension trait for <code>LocalSpawn</code>.\nThe <code>Spawn</code> trait allows for pushing futures onto an …\nAn error that occurred during spawning.\nExtension trait for <code>Spawn</code>.\nA custom implementation of a future trait object for …\nA <code>Waker</code> that is only valid for a given lifetime.\nDrops the future represented by the given fat pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>LocalFutureObj</code> into a <code>FutureObj</code>.\nConvert an owned instance into a (conceptually owned) fat …\nCheck whether spawning failed to the executor being shut …\nCreate a <code>LocalFutureObj</code> from a custom trait object …\nCreate an <code>AtomicWaker</code>.\nCreate a <code>FutureObj</code> from a custom trait object …\nCreate a new <code>WakerRef</code> from a <code>Waker</code> reference.\nCreate a new <code>WakerRef</code> from a <code>Waker</code> that must not be …\nCreate a new <code>Waker</code> which does nothing when <code>wake()</code> is …\nGet a static reference to a <code>Waker</code> which does nothing when …\nRegisters the waker to be notified on calls to <code>wake</code>.\nSpawning failed because the executor has been shut down.\nSpawns a future that will be run to completion.\nSpawns a future that will be run to completion.\nDetermines whether the executor is able to spawn new tasks.\nDetermines whether the executor is able to spawn new tasks.\nReturns the last <code>Waker</code> passed to <code>register</code>, so that the …\nIndicates that the associated task is ready to make …\nCalls <code>wake</code> on the last <code>Waker</code> passed to <code>register</code>.\nIndicates that the associated task is ready to make …\nCreates a <code>Waker</code> from an <code>Arc&lt;impl ArcWake&gt;</code>.\nCreates a reference to a <code>Waker</code> from a reference to …\nExtension trait for <code>LocalSpawn</code>.\nExtension trait for <code>Spawn</code>.\nSpawns a task that polls the given future with output <code>()</code> to\nSpawns a task that polls the given future with output <code>()</code> to\nSpawns a task that polls the given future with output <code>()</code> to\nSpawns a task that polls the given future with output <code>()</code> to\nSpawns a task that polls the given future to completion …\nSpawns a task that polls the given future to completion …\nSpawns a task that polls the given future to completion …\nSpawns a task that polls the given future to completion …\nUnfoldState used for stream and sink unfolds\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")