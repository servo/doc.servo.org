searchState.loadedDescShard("servo_media_audio", 0, "The actual analysis is done on the DOM side. We provide …\nFrom …\nGiven an index into the backing array, increment it\nCached blackman window data\nhttps://webaudio.github.io/web-audio-api/#blackman-window\nThe computed FFT data, in decibels\nGiven an index from 0 to fft_size, convert it into an …\nGet the data of the current block\nThe index of the current block\nThis is a ring buffer containing the last MAX_FFT_SIZE …\nHave we computed the FFT already?\nThe number of past sample-frames to consider in the FFT\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe smoothed FFT data (in frequency domain)\nThe windowed time domain data Used during FFT computation\nhttps://webaudio.github.io/web-audio-api/#biquadfilternode\nThe last two input and output values, per-channel\nThe computed filter parameter a1 This is actually a1 / a0, …\nThe computed filter parameter a2 This is actually a2 / a0, …\nThe computed filter parameter b0 This is actually b0 / a0, …\nThe computed filter parameter b1 This is actually b1 / a0, …\nThe computed filter parameter b2 This is actually b2 / a0, …\nSet to the constant z-transform y[n] = b0 * x[n]\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStored filter state, this contains the last two frames of …\nUpdate with new input/output values from this frame\nUpdate the coefficients a1, a2, b0, b1, b2, given the …\nThe input value from last frame\nThe input value from two frames ago\nThe output value from last frame\nThe output value from two frames ago\nWe render audio in blocks of size FRAMES_PER_BLOCK\nA collection of blocks received as input by a node or …\nAn iterator over frames in a block\nA reference to a frame\nA tick, i.e. the time taken for a single frame\nThis provides the entire buffer as a mutable slice of u8\nIf this vector is empty, it is a shorthand for “silence…\nThe number of channels in this block\nThis provides the entire buffer as a mutable slice of f32\nEmpty block with no channels, for pushing new channels to.\nIf this is in “silence” mode without a buffer, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the position, forward, and up vectors for a given …\nupmix/downmix the channels if necessary\nGiven a block and a function <code>f</code>, mutate the frame through …\nAdvance the iterator\nTake a single-channel block and repeat the channel\nThis is an optimization which means that the buffer is …\nResize to add or remove channels, fill extra channels with …\nZero-gain sum with another buffer\nAudioBufferSourceNode engine. …\nControl messages directed to AudioBufferSourceNodes.\nThis specifies options for constructing an …\nSet the data block holding the audio sample data to be …\nSet loop parameter.\nSet loop parameter.\nSet loop parameter.\nSet start parameters (when, offset, duration).\nThe audio asset to be played.\nA data block holding the audio sample data to be played.\nHow many more buffer-frames to output. See buffer_pos for …\n“Index” of the next buffer frame to play. “Index” …\nInvariant: all buffers must be of the same length\nThe initial value for the detune AudioParam.\nAudioParam to modulate the speed at which is rendered the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether we need to compute offsets from scratch.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe initial value for the loop_enabled attribute.\nIndicates if the region of audio data designated by …\nThe initial value for the loop_end attribute.\nAn playhead position where looping should end if the …\nThe initial value for the loop_start attribute.\nAn playhead position where looping should begin if the …\nThe ended event callback.\nThe initial value for the playback_rate AudioParam.\nThe speed at which to render the audio stream. Can be …\nTime at which the source should start playing.\nDuration parameter passed to Start().\nOffset parameter passed to Start().\nThe same as start_at, but with subsample accuracy. FIXME: …\nTime at which the source should stop playing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresentation of an audio context on the control thread.\nUser-specified options for a real time or offline audio …\nBalance audio output latency and power consumption.\nThe audio context has been released, and can no longer be …\nContains the error value\nProvide the lowest audio output latency possible without …\nIdentify the type of playback, which affects tradeoffs …\nUser-specified options for an offline audio context.\nContains the success value\nPrioritize sustained playback without interruption over …\nDescribes the state of the audio context on the control …\nUser-specified options for a real time audio context.\nAudio is being processed.\nThe audio context is suspended (context time is not …\nOwner backend communication channel.\nThe number of channels for this offline audio context.\nClient context ID.\nAsynchronously decodes the audio file data contained in …\nThe identifier of an AudioDestinationNode with a single …\nDisconnect connections from a node to another node\nDisconnect all outgoing connections from a node’s output …\nDisconnect connections from a node to another node’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMedia instance ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType of playback.\nThe length of the rendered audio buffer in sample-frames.\nConstructs a new audio context.\nNumber of samples that will be played in one second.\nNumber of samples that will play in one second, measured …\nNumber of samples that will be rendered in one second, …\nRendering thread communication channel.\nState of the audio context on the control thread.\nBackend specific error.\nCould not read the audio buffer content.\nThe media trying to be decoded has an invalid format.\nAn invalid sample was found while decoding the audio.\nCould not move to a different state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA single connection between ports\nAn edge in the graph\nMarker type for denoting that the port is an input port of …\nspecial variant only used for the implicit connection from …\nA unique identifier for nodes in the graph. Stable under …\nMarker type for denoting that the port is an output port …\nAn identifier for a port.\nA zero-indexed “port” for a node. Most nodes have one …\nConnect an output port to an input port\nAdd additional terminator nodes\nCreate a node, obtain its id\nWhen the from node finishes processing, it will push its …\nGet the id of the destination node in this graph\nDisconnect all outgoing connections from a node\nDisconnect connections from a node to another node\nDisconnect all outgoing connections from a node’s output …\nDisconnect all outgoing connections from a node’s output …\nDisconnect all outgoing connections from a node to another …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFind if there are connections between two given ports, …\nThe index of the port on the input node This is actually …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the id of the AudioListener in this graph\nObtain a mutable reference to a node\nThe index of the port on the output node This is actually …\nFor a given block, process all the data on this graph\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAudioListeners are fake nodes; from the user’s point of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNot a constructable node\nThis trait represents the common features of all audio …\nInformation required to construct an audio node\nType of AudioNodeEngine.\nType of message directed to AudioScheduledSourceNodes.\nPlay, given start and end tick offsets\nDon’t play anything\nRegister onended event callback.\nSchedules a sound to playback at an exact time.\nSchedules a sound to stop playback at an exact time.\nGiven the current block, calculate the absolute …\nNumber of input channels for each input port\n…\nIf we’re the destination node, extract the contained data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessages specific to this node\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ended event callback.\nTime at which the source should start playing.\nTime at which the source should stop playing.\nComputes azimuth, elevation, and distance of source with …\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValue is updated each frame\n…\nValue is held for entire block\nAn AudioParam.\nAn AutomationEvent that uses times in s instead of Ticks\nThe value of all connect()ed inputs mixed together, for …\nCache of inputs from connect()ed nodes\nReturns Some if it’s a cancel event the boolean is if it…\nFlush an entire block of values into a buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate a parameter based on this event\nIf true, <code>blocks</code> has been summed together into a single …\nThe time of the event used for ordering\nUpdate the value of this param to the next\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes the AudioRenderThread object\nStart the audio render thread\nBackend specific error.\nCould not push buffer into the audio sink.\nCould not move to a different state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")