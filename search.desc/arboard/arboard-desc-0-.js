searchState.loadedDescShard("arboard", 0, "A builder for an operation that clears the data from the …\nLinux specific extensions to the Clear builder.\nThe OS independent struct for accessing the clipboard.\nTypically used selection for explicit cut/copy/paste …\nThe selected clipboard is not supported by the current …\nThe native clipboard is not accessible due to being held …\nThe clipboard contents were not available in the requested …\nThe image or the text that was about the be transferred …\nAn error that might happen during a clipboard operation.\nA builder for an operation that gets a value from the …\nLinux-specific extensions to the <code>Get</code> builder.\nStores pixel data of an image.\nClipboard selection\nTypically used for mouse selections and/or currently …\nThe secondary clipboard is rarely used but theoretically …\nA builder for an operation that sets a value to the …\nLinux specific extensions to the <code>Set</code> builder.\nAny error that doesn’t fit the other error types.\nClears any contents that may be present from the platform…\nBegins a “clear” option to remove data from the …\nSets the clipboard the operation will retrieve data from.\nSets the clipboard the operation will store its data to.\nPerforms the “clear” operation on the selected …\nCompletes the “clear” operation by deleting any …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBegins a “get” operation to retrieve data from the …\nFetches image data from the clipboard, and returns the …\nFetches UTF-8 text from the clipboard and returns it.\nCompletes the “set” operation by placing HTML as well …\nCompletes the “get” operation by fetching image data …\nCompletes the “set” operation by placing an image onto …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an instance of the clipboard.\nBegins a “set” operation to set the clipboard’s …\nPlaces the HTML as well as a plain-text alternative onto …\nPlaces an image to the clipboard.\nPlaces the text onto the clipboard. Any valid UTF-8 string …\nCompletes the “get” operation by fetching UTF-8 text …\nCompletes the “set” operation by placing text onto the …\nWhether to wait for the clipboard’s contents to be …\nThe selected clipboard is not supported by the current …\nThe native clipboard is not accessible due to being held …\nThe clipboard contents were not available in the requested …\nThe image or the text that was about the be transferred …\nAn error that might happen during a clipboard operation.\nStores pixel data of an image.\nAny error that doesn’t fit the other error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a the bytes field in a way that it’s guaranteed …\nCommon trait for sealing platform extension traits.\nReturns an image data that is guaranteed to own its bytes. …\nLinux specific extensions to the Clear builder.\nTypically used selection for explicit cut/copy/paste …\nLinux-specific extensions to the <code>Get</code> builder.\nClipboard selection\nTypically used for mouse selections and/or currently …\nThe secondary clipboard is rarely used but theoretically …\nLinux specific extensions to the <code>Set</code> builder.\nSets the clipboard the operation will retrieve data from.\nSets the clipboard the operation will store its data to.\nPerforms the “clear” operation on the selected …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to wait for the clipboard’s contents to be …\nContains the error value\nContains the success value\nA condvar that is notified when the contents of this …\nThe atom representing the format in which the data is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns Ok(true) when the incr_data is ready\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMutex around nothing to use with the below condvar.\n<code>formats</code> must be a slice of atoms, where each atom …\nThe context for the thread which serves clipboard read …\nJoin handle to the thread which serves selection requests.")