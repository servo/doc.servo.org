searchState.loadedDescShard("ab_glyph", 0, "API for loading, scaling, positioning and rasterizing …\nA grayscale bitmap with 2 bits per pixel.\nA packed grayscale bitmap with 2 bits per pixel.\nA grayscale bitmap with 4 bits per pixel.\nA packed grayscale bitmap with 4 bits per pixel.\nA grayscale bitmap with 8 bits per pixel.\nA monochrome bitmap.\nA packed monochrome bitmap.\nA color bitmap with 32 bits per pixel.\nCubic Bézier curve from <code>.0</code> to <code>.3</code> using <code>.1</code> as the control …\nFunctionality required from font data.\n<code>Font</code> implementor that wraps another concrete <code>Font + &#39;static</code>…\nFont data handle stored as a <code>&amp;[u8]</code> + parsed data. See <code>Font</code> …\nFont data handle stored in a <code>Vec&lt;u8&gt;</code>  + parsed data. See …\nA glyph with pixel scale &amp; position.\nGlyph id.\nOld version of <code>v2::GlyphImage</code>.\nValid formats for a <code>GlyphImage</code>.\nInvalid font data error.\nStraight line from <code>.0</code> to <code>.1</code>.\nA “raw” collection of outline curves for a glyph, …\nGlyph outline primitives.\nA glyph that has been outlined at a scale &amp; position.\nAn (x, y) coordinate.\nPixel scale.\n2D scale factors for use with unscaled metrics.\nA <code>Font</code> and an associated pixel scale.\nQuadratic Bézier curve from <code>.0</code> to <code>.2</code> using <code>.1</code> as the …\nA rectangle, with top-left corner at <code>min</code>, and bottom-right …\nA <code>Font</code> with an associated pixel scale. This can be used to …\nLogic for variable fonts.\nAdd rhs.x to x, rhs.y to y.\nUnscaled glyph ascent. See glyph layout concepts.\nUnscaled bounding box.\nReturns an iterator of all distinct <code>(GlyphId, char)</code> pairs. …\nReturns an iterator of all distinct <code>(GlyphId, char)</code> pairs. …\nUnscaled &amp; unpositioned outline curves.\nRaw image data, not a bitmap in the case of …\nRaw image data, it should be rendered or decompressed (in …\nThe default coordinate value for the axis.\nUnscaled glyph descent. See glyph layout concepts.\nThe last glyph ID, <em>inclusive</em>, for the range covered by …\nReturns a font reference.\nFormat of the raw data.\nReturns the argument unchanged.\nThe number of glyphs present in this font. Glyph …\nLookup a <code>GlyphId</code> matching a given <code>char</code>.\nReturns a pre-rendered image of the glyph.\nUnscaled horizontal advance for a given glyph id. See …\nUnscaled horizontal side bearing for a given glyph id. See …\nWhether the axis should be exposed directly in user …\nGlyph id.\nCalls <code>U::from(self)</code>.\nReturns additional unscaled kerning to apply for a …\nUnscaled line gap. See glyph layout concepts.\nThe maximum coordinate value for the axis.\nThe minimum coordinate value for the axis.\nUnicode name.\nOffset of the image from the normal origin (top at the …\nCompute unscaled glyph outline curves &amp; bounding box.\n<code>Point</code> constructor.\nPosition of this glyph.\nReturns the pixel scale associated with this font.\nPixel scale of this glyph.\nCurrent scale of the image in pixels per em.\nSets a variation axis coordinate value by it’s tag.\nThe first glyph ID for the range covered by this record.\nSubtract rhs.x from x, rhs.y from y.\nTag identifying the design variation for the axis.\nttf-parser crate specific code. ttf-parser types should …\nGet the size of the font unit\nUnscaled vertical advance for a given glyph id.\nUnscaled vertical side bearing for a given glyph id.\nReturns variation axes.\nHorizontal scale in pixels.\nVertical scale in pixels.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInvalid font data error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFunctionality required from font data.\nConstruct a <code>PxScaleFont</code> by associating with the given …\nConstruct a <code>PxScaleFont</code> by associating with the given …\nUnscaled glyph ascent. See glyph layout concepts.\nReturns an iterator of all distinct <code>(GlyphId, char)</code> pairs. …\nUnscaled glyph descent. See glyph layout concepts.\nExtracts a slice containing the data passed into e.g. …\nExtracts a slice containing the data passed into e.g. …\nReturns the layout bounds of this glyph.\nReturns the layout bounds of this glyph.\nThe number of glyphs present in this font. Glyph …\nLookup a <code>GlyphId</code> matching a given <code>char</code>.\nReturns a pre-rendered image of the glyph.\nReturns a pre-rendered image of the glyph.\nReturns a pre-rendered image of the glyph.\nReturns raw SVG data of a range of glyphs which includes …\nReturns raw SVG data of a range of glyphs which includes …\nUnscaled horizontal advance for a given glyph id. See …\nUnscaled horizontal side bearing for a given glyph id. See …\nUnscaled height <code>ascent - descent</code>. See glyph layout concepts…\nUnscaled height <code>ascent - descent</code>. See glyph layout concepts…\nMove into a <code>PxScaleFont</code> associated with the given pixel …\nMove into a <code>PxScaleFont</code> associated with the given pixel …\nReturns additional unscaled kerning to apply for a …\nUnscaled line gap. See glyph layout concepts.\nCompute unscaled glyph outline curves &amp; bounding box.\nCompute glyph outline ready for drawing.\nCompute glyph outline ready for drawing.\nConverts pt units into <code>PxScale</code>.\nConverts pt units into <code>PxScale</code>.\nGet the size of the font unit\nUnscaled vertical advance for a given glyph id.\nUnscaled vertical side bearing for a given glyph id.\n<code>Font</code> implementor that wraps another concrete <code>Font + &#39;static</code>…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExample\nCreates an <code>FontArc</code> from a byte-slice.\nCreates an <code>FontArc</code> from owned data.\nA grayscale bitmap with 2 bits per pixel.\nA packed grayscale bitmap with 2 bits per pixel.\nA grayscale bitmap with 4 bits per pixel.\nA packed grayscale bitmap with 4 bits per pixel.\nA grayscale bitmap with 8 bits per pixel.\nA monochrome bitmap.\nA packed monochrome bitmap.\nA color bitmap with 32 bits per pixel.\nA glyph with pixel scale &amp; position.\nGlyph id.\nOld version of <code>v2::GlyphImage</code>.\nValid formats for a <code>GlyphImage</code>.\nRaw image data, not a bitmap in the case of …\nRaw image data, it should be rendered or decompressed (in …\nThe last glyph ID, <em>inclusive</em>, for the range covered by …\nFormat of the raw data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlyph id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOffset of the image from the normal origin (top at the …\nPosition of this glyph.\nPixel scale of this glyph.\nCurrent scale of the image in pixels per em.\nThe first glyph ID for the range covered by this record.\nConstruct a <code>Glyph</code> with given scale and position …\nConstruct a <code>Glyph</code> with given scale &amp; position.\nA pre-rendered image of a glyph, usually used for emojis …\nRaw image data, see <code>format</code>.\nFormat of the raw <code>data</code>.\nReturns the argument unchanged.\nImage height.\nCalls <code>U::from(self)</code>.\nOffset of the image from the normal origin (top at the …\nPixels per em of the selected strike.\nImage width.\nCubic Bézier curve from <code>.0</code> to <code>.3</code> using <code>.1</code> as the control …\nStraight line from <code>.0</code> to <code>.1</code>.\nA “raw” collection of outline curves for a glyph, …\nGlyph outline primitives.\nA glyph that has been outlined at a scale &amp; position.\nQuadratic Bézier curve from <code>.0</code> to <code>.2</code> using <code>.1</code> as the …\nA rectangle, with top-left corner at <code>min</code>, and bottom-right …\nUnscaled bounding box.\nUnscaled &amp; unpositioned outline curves.\nDraw this glyph outline using a pixel &amp; coverage handling …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlyph info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs an <code>OutlinedGlyph</code> from the source <code>Glyph</code>, pixel …\nConvert unscaled bounds into pixel bounds at a given scale …\nConservative whole number pixel bounding box for this …\nPixel scale.\n2D scale factors for use with unscaled metrics.\nA <code>Font</code> and an associated pixel scale.\nA <code>Font</code> with an associated pixel scale. This can be used to …\nPixel scaled glyph ascent. See glyph layout concepts.\nPixel scaled glyph ascent. See glyph layout concepts.\nReturns an iterator of all distinct <code>(GlyphId, char)</code> pairs. …\nPixel scaled glyph descent. See glyph layout concepts.\nPixel scaled glyph descent. See glyph layout concepts.\nReturns a font reference.\nUniform scaling where x &amp; y are the same.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the layout bounds of this glyph.\nReturns the layout bounds of this glyph.\nThe number of glyphs present in this font. Glyph …\nThe number of glyphs present in this font. Glyph …\nLookup a <code>GlyphId</code> matching a given <code>char</code>.\nLookup a <code>GlyphId</code> matching a given <code>char</code>.\nPixel scaled horizontal advance for a given glyph. See …\nPixel scaled horizontal advance for a given glyph. See …\nScale factor for unscaled font horizontal values.\nScale factor for unscaled font horizontal values.\nPixel scaled horizontal side bearing for a given glyph. …\nPixel scaled horizontal side bearing for a given glyph. …\nPixel scaled height <code>ascent - descent</code>. See glyph layout …\nPixel scaled height <code>ascent - descent</code>. See glyph layout …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns additional pixel scaled kerning to apply for a …\nReturns additional pixel scaled kerning to apply for a …\nPixel scaled line gap. See glyph layout concepts.\nPixel scaled line gap. See glyph layout concepts.\nCompute glyph outline ready for drawing.\nCompute glyph outline ready for drawing.\nReturns a <code>PxScale</code> with both x &amp; y scale values set to the …\nReturns the pixel scale associated with this font.\nConstruct a <code>Glyph</code> with the font’s pixel scale at …\nConstruct a <code>Glyph</code> with the font’s pixel scale at …\nPixel scaled vertical advance for a given glyph.\nPixel scaled vertical advance for a given glyph.\nScale factor for unscaled font vertical values.\nScale factor for unscaled font vertical values.\nPixel scaled vertical side bearing for a given glyph.\nPixel scaled vertical side bearing for a given glyph.\nHorizontal scale in pixels.\nVertical scale in pixels.\nFont data handle stored as a <code>&amp;[u8]</code> + parsed data. See <code>Font</code> …\nFont data handle stored in a <code>Vec&lt;u8&gt;</code>  + parsed data. See …\nExtracts a slice containing the data passed into e.g. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplement <code>Font</code> for <code>Self(AsFontRef)</code> types.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the data passed into e.g. <code>FontVec::try_from_vec</code>.\nCreates an <code>FontRef</code> from a byte-slice.\nCreates an <code>FontRef</code> from byte-slice.\nCreates an <code>FontVec</code> from owned data.\nCreates an <code>FontVec</code> from owned data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA pre-rendered image of a glyph, usually used for emojis …\nRaw image data, see <code>format</code>.\nFormat of the raw <code>data</code>.\nImage height.\nOffset of the image from the normal origin (top at the …\nPixels per em of the selected strike.\nImage width.\nLogic for variable fonts.\nThe default coordinate value for the axis.\nReturns the argument unchanged.\nWhether the axis should be exposed directly in user …\nCalls <code>U::from(self)</code>.\nThe maximum coordinate value for the axis.\nThe minimum coordinate value for the axis.\nUnicode name.\nSets a variation axis coordinate value by it’s tag.\nTag identifying the design variation for the axis.\nReturns variation axes.")