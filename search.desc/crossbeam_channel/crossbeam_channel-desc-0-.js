searchState.loadedDescShard("crossbeam_channel", 0, "Multi-producer multi-consumer channels for message passing.\nThe message could not be sent because the channel is …\nThe message could not be sent because the channel is …\nThe message could not be received because the channel is …\nThe message could not be received because the channel is …\nA message could not be received because the channel is …\nThe message could not be sent because the channel is full.\nA blocking iterator over messages in a channel.\nA blocking iterator over messages in a channel.\nAn error returned from the <code>ready_timeout</code> method.\nThe receiving side of a channel.\nAn error returned from the <code>recv</code> method.\nAn error returned from the <code>recv_timeout</code> method.\nSelects from a set of channel operations.\nAn error returned from the <code>select_timeout</code> method.\nA selected operation that needs to be completed.\nAn error returned from the <code>send</code> method.\nAn error returned from the <code>send_timeout</code> method.\nThe sending side of a channel.\nThe message could not be sent because the channel is full …\nA message could not be received because the channel is …\nA non-blocking iterator over messages in a channel.\nAn error returned from the <code>try_ready</code> method.\nAn error returned from the <code>try_recv</code> method.\nAn error returned from the <code>try_select</code> method.\nAn error returned from the <code>try_send</code> method.\nIndicates that <code>Sender</code>s and <code>Receiver</code>s are borrowed.\nCreates a receiver that delivers a message after a certain …\nCreates a receiver that delivers a message at a certain …\nCreates a channel of bounded capacity.\nThe channel interface.\nThread-local context used in select.\nReference counter for channels.\nChannel flavors.\nA list of senders and receivers participating in selection.\nThe index of the selected operation.\nCreates a receiver that never delivers messages.\nThe next index to assign to an operation.\nThe address of the selected <code>Sender</code> or <code>Receiver</code>.\nInterface to the select mechanism.\nSelects from a set of channel operations.\nSelects from a set of channel operations.\nThe <code>select!</code> macro.\nCreates a receiver that delivers messages periodically.\nToken needed to complete the operation.\nCreates a channel of unbounded capacity.\nMiscellaneous utilities.\nWaking mechanism for threads blocked on channel operations.\nBounded channel based on a preallocated array.\nBounded channel based on a preallocated array.\nThe after flavor.\nA blocking iterator over messages in a channel.\nA blocking iterator over messages in a channel.\nUnbounded channel implemented as a linked list.\nUnbounded channel implemented as a linked list.\nThe never flavor.\nThe receiving side of a channel.\nReceiver flavors.\nThe sending side of a channel.\nSender flavors.\nThe tick flavor.\nA non-blocking iterator over messages in a channel.\nZero-capacity channel.\nZero-capacity channel.\nCreates a receiver that delivers a message after a certain …\nCreates a receiver that delivers a message at a certain …\nCreates a channel of bounded capacity.\nIf the channel is bounded, returns its capacity.\nIf the channel is bounded, returns its capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full.\nA blocking iterator over messages in the channel.\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nCreates a receiver that never delivers messages.\nReads a message from the channel.\nBlocks the current thread until a message is received or …\nWaits for a message to be received from the channel, but …\nWaits for a message to be received from the channel, but …\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nBlocks the current thread until a message is sent or the …\nWaits for a message to be sent into the channel, but only …\nWaits for a message to be sent into the channel, but only …\nCreates a receiver that delivers messages periodically.\nA non-blocking iterator over messages in the channel.\nAttempts to receive a message from the channel without …\nAttempts to send a message into the channel without …\nCreates a channel of unbounded capacity.\nWrites a message into the channel.\nThread-local context used in select.\nInner representation of <code>Context</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Context</code>.\nA slot into which another thread may store a pointer to …\nResets <code>select</code> and <code>packet</code>.\nSelected operation.\nReturns the selected operation.\nStores a packet.\nThread handle.\nReturns the id of the thread this context belongs to.\nThread id.\nAttempts to select an operation.\nUnparks the thread this context belongs to.\nWaits until a packet is provided and returns it.\nWaits until an operation is selected and returns it.\nCreates a new context for the duration of the closure.\nReference counter internals.\nThe receiving side.\nThe sending side.\nAcquires another sender reference.\nAcquires another receiver reference.\nThe internal channel.\nReturns the internal <code>Counter</code>.\nReturns the internal <code>Counter</code>.\nSet to <code>true</code> if the last sender or the last receiver …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps a channel into the reference counter.\nThe number of receivers associated with the channel.\nReleases the sender reference.\nReleases the receiver reference.\nThe number of senders associated with the channel.\nThe message could not be sent because the channel is …\nThe message could not be sent because the channel is …\nThe message could not be received because the channel is …\nThe message could not be received because the channel is …\nA message could not be received because the channel is …\nThe message could not be sent because the channel is full.\nAn error returned from the <code>ready_timeout</code> method.\nAn error returned from the <code>recv</code> method.\nAn error returned from the <code>recv_timeout</code> method.\nAn error returned from the <code>select_timeout</code> method.\nAn error returned from the <code>send</code> method.\nAn error returned from the <code>send_timeout</code> method.\nThe message could not be sent because the channel is full …\nA message could not be received because the channel is …\nAn error returned from the <code>try_ready</code> method.\nAn error returned from the <code>try_recv</code> method.\nAn error returned from the <code>try_select</code> method.\nAn error returned from the <code>try_send</code> method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the message.\nUnwraps the message.\nUnwraps the message.\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the send operation timed out.\nReturns <code>true</code> if the receive operation timed out.\nBounded channel based on a preallocated array.\nChannel that delivers a message at a certain moment in …\nUnbounded channel implemented as a linked list.\nChannel that never delivers messages.\nChannel that delivers messages periodically.\nZero-capacity channel.\nThe token type for the array flavor.\nBounded channel based on a preallocated array.\nReceiver handle to a channel.\nSender handle to a channel.\nA slot in a channel.\nThe buffer holding slots.\nThe channel capacity.\nReturns the capacity of the channel.\nDisconnects the channel and wakes up all blocked senders …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe head of the channel.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the channel is disconnected.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is full.\nReturns the current number of messages inside the channel.\nIf this bit is set in the tail, that means the channel is …\nThe message in this slot.\nA stamp with the value of <code>{ lap: 1, mark: 0, index: 0 }</code>.\nReads a message from the channel.\nReturns a receiver handle to the channel.\nReceivers waiting while the channel is empty and not …\nReceives a message from the channel.\nSends a message into the channel.\nReturns a sender handle to the channel.\nSenders waiting while the channel is full.\nSlot to read from or write to.\nThe current stamp.\nStamp to store into the slot after reading or writing.\nAttempts to reserve a slot for receiving a message.\nAttempts to reserve a slot for sending a message.\nThe tail of the channel.\nAttempts to receive a message without blocking.\nAttempts to send a message into the channel.\nCreates a bounded channel of capacity <code>cap</code>.\nWrites a message into the channel.\nResult of a receive operation.\nChannel that delivers a message at a certain moment in time\nNo value.\nSome value of type <code>T</code>.\nReturns the capacity of the channel.\nThe instant at which the message will be delivered.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is full.\nReturns the number of messages in the channel.\nCreates a channel that delivers a message at a certain …\nReads a message from the channel.\n<code>true</code> if the message has been received.\nReceives a message from the channel.\nAttempts to receive a message without blocking.\nA block in a linked list.\nUnbounded channel implemented as a linked list.\nThe token type for the list flavor.\nA position in a channel.\nReceiver handle to a channel.\nSender handle to a channel.\nA slot in a block.\nIndicates that dropping a <code>Channel&lt;T&gt;</code> may drop messages of …\nThe block in the linked list.\nThe block of slots.\nReturns the capacity of the channel.\nSets the <code>DESTROY</code> bit in slots starting from <code>start</code> and …\nDiscards all messages.\nDisconnects receivers.\nDisconnects senders and wakes up all blocked receivers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe head of the channel.\nThe index in the channel.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the channel is disconnected.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is full.\nReturns the current number of messages inside the channel.\nThe message.\nCreates an empty block.\nCreates a new unbounded channel.\nThe next block in the linked list.\nThe offset into the block.\nReads a message from the channel.\nReturns a receiver handle to the channel.\nReceivers waiting while the channel is empty and not …\nReceives a message from the channel.\nSends a message into the channel.\nReturns a sender handle to the channel.\nSlots for messages.\nAttempts to reserve a slot for receiving a message.\nAttempts to reserve a slot for sending a message.\nThe state of the slot.\nThe tail of the channel.\nAttempts to receive a message without blocking.\nAttempts to send a message into the channel.\nWaits until the next pointer is set.\nWaits until a message is written into the slot.\nWrites a message into the channel.\nChannel that never delivers messages.\nThis flavor doesn’t need a token.\nReturns the capacity of the channel.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is full.\nReturns the number of messages in the channel.\nCreates a channel that never delivers messages.\nReads a message from the channel.\nReceives a message from the channel.\nAttempts to receive a message without blocking.\nChannel that delivers messages periodically.\nNo value.\nSome value of type <code>T</code>.\nResult of a receive operation.\nReturns the capacity of the channel.\nThe instant at which the next message will be delivered.\nThe time interval in which messages get delivered.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is full.\nReturns the number of messages in the channel.\nCreates a channel that delivers messages periodically.\nReads a message from the channel.\nReceives a message from the channel.\nAttempts to receive a message without blocking.\nZero-capacity channel.\nInner representation of a zero-capacity channel.\nA slot for passing one message from a sender to a receiver.\nReceiver handle to a channel.\nSender handle to a channel.\nA pointer to a packet.\nIndicates that dropping a <code>Channel&lt;T&gt;</code> may drop values of …\nReturns the capacity of the channel.\nDisconnects the channel and wakes up all blocked senders …\nCreates an empty packet on the heap.\nCreates an empty packet on the stack.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInner representation of the channel.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquals <code>true</code> when the channel is disconnected.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is full.\nReturns the current number of messages inside the channel.\nCreates a packet on the stack, containing a message.\nThe message.\nConstructs a new zero-capacity channel.\nEquals <code>true</code> if the packet is allocated on the stack.\nReads a message from the packet.\nEquals <code>true</code> once the packet is ready for reading or …\nReturns a receiver handle to the channel.\nReceivers waiting to pair up with a send operation.\nReceives a message from the channel.\nSends a message into the channel.\nReturns a sender handle to the channel.\nSenders waiting to pair up with a receive operation.\nAttempts to pair up with a sender.\nAttempts to reserve a slot for sending a message.\nAttempts to receive a message without blocking.\nAttempts to send a message into the channel.\nWaits until the packet becomes ready for reading or …\nWrites a message into the packet.\nThe attempt to block the current thread has been aborted.\nTime out after the time instant.\nAn operation became ready because a channel is …\nBlock forever.\nNo blocking.\nIdentifier associated with an operation by a specific …\nAn operation became ready because a message can be sent or …\nSelects from a set of channel operations.\nA receiver or a sender that can participate in select.\nCurrent state of a select or a blocking operation.\nA selected operation that needs to be completed.\nDetermines when a select operation should time out.\nTemporary data that gets initialized during select or a …\nStill waiting for an operation.\nIndicates that <code>Sender</code>s and <code>Receiver</code>s are borrowed.\nAttempts to select an operation the thread got woken up …\nReturns a deadline for an operation, if there is one.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA list of senders and receivers participating in selection.\nCreates an operation identifier from a mutable reference.\nReturns the index of the selected operation.\nThe index of the selected operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if an operation can be executed without …\nCreates an empty list of channel operations for selection.\nThe next index to assign to an operation.\nThe address of the selected <code>Sender</code> or <code>Receiver</code>.\nBlocks until one of the operations becomes ready.\nBlocks until a given deadline, or until one of the …\nBlocks for a limited time until one of the operations …\nAdds a receive operation.\nCompletes the receive operation.\nRegisters an operation for execution and returns <code>true</code> if …\nRemoves a previously added operation.\nRuns until one of the operations becomes ready, …\nRuns until one of the operations is selected, potentially …\nBlocks until one of the operations becomes ready and …\nBlocks until one of the operations becomes ready and …\nBlocks until a given deadline, or until one of the …\nBlocks until a given deadline, or until one of the …\nBlocks for a limited time until one of the operations …\nBlocks for a limited time until one of the operations …\nAdds a send operation.\nCompletes the send operation.\nToken needed to complete the operation.\nAttempts to find a ready operation without blocking.\nAttempts to select one of the operations without blocking.\nAttempts to select an operation and returns <code>true</code> on …\nAttempts to select one of the operations without blocking.\nUnregisters an operation for execution.\nUnregisters an operation for readiness notification.\nRegisters an operation for readiness notification and …\nRandomly shuffles a slice.\nSleeps until the deadline, or forever if the deadline isn…\nRepresents a thread blocked on a specific channel …\nA waker that can be shared among threads without locking.\nA queue of threads blocked on channel operations.\nReturns <code>true</code> if there is an entry which can be selected by …\nReturns the id of the current thread.\nContext associated with the thread owning this operation.\nNotifies all registered operations that the channel is …\nNotifies all threads that the channel is disconnected.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe inner <code>Waker</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> if the waker is empty.\nCreates a new <code>Waker</code>.\nCreates a new <code>SyncWaker</code>.\nNotifies all operations waiting to be ready.\nAttempts to find one thread (not the current one), select …\nA list of operations waiting to be ready.\nThe operation.\nOptional packet.\nRegisters a select operation.\nRegisters the current thread with an operation.\nRegisters a select operation and a packet.\nA list of select operations.\nAttempts to find another thread’s entry, select the …\nUnregisters a select operation.\nUnregisters an operation previously registered by the …\nUnregisters an operation waiting to be ready.\nUnregisters an operation waiting to be ready.\nRegisters an operation waiting to be ready.\nRegisters an operation waiting to be ready.")