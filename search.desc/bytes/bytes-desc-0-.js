searchState.loadedDescShard("bytes", 0, "Provides abstractions for working with bytes.\nA cheaply cloneable and sliceable chunk of contiguous …\nA unique reference to a contiguous slice of memory.\nUtilities for working with buffers.\nPrecondition: dst &gt;= original\nPanic with a nice error message.\nRead bytes from a buffer.\nA trait for values that provide sequential write access to …\nA <code>Chain</code> sequences two buffers.\nIterator over the bytes contained by the buffer.\nA <code>BufMut</code> adapter which limits the amount of bytes that can …\nA <code>Buf</code> adapter which implements <code>io::Read</code> for the inner …\nA <code>Buf</code> adapter which limits the bytes read from an …\nUninitialized byte slice.\nA <code>BufMut</code> adapter which implements <code>io::Write</code> for the inner …\nAdvance the internal cursor of the Buf\nAdvance the internal cursor of the BufMut\nReturns a slice starting at the current position and of …\nReturns a mutable slice starting at the current BufMut …\nReturns the number of bytes between the current position …\nReturns the number of bytes that can be written from the …\nRead bytes from a buffer.\nAdvance the internal cursor of the Buf\nCreates an adaptor which will chain this buffer with …\nCreates an adaptor which will chain this buffer with …\nReturns a slice starting at the current position and of …\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nConsumes <code>len</code> bytes inside self and returns new instance of …\nConsumes <code>len</code> bytes inside self and returns new instance of …\nCopies bytes from <code>self</code> into <code>dst</code>.\nCopies bytes from <code>self</code> into <code>dst</code>.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nReturns true if there are any more bytes to consume\nReturns true if there are any more bytes to consume\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nReturns the number of bytes between the current position …\nCreates an adaptor which will read at most <code>limit</code> bytes …\nCreates an adaptor which will read at most <code>limit</code> bytes …\nA trait for values that provide sequential write access to …\nAdvance the internal cursor of the BufMut\nCreates an adapter which will chain this buffer with …\nCreates an adapter which will chain this buffer with …\nReturns a mutable slice starting at the current BufMut …\nReturns true if there is space in <code>self</code> for more bytes.\nReturns true if there is space in <code>self</code> for more bytes.\nCreates an adaptor which can write at most <code>limit</code> bytes to …\nCreates an adaptor which can write at most <code>limit</code> bytes to …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nPut <code>cnt</code> bytes <code>val</code> into <code>self</code>.\nPut <code>cnt</code> bytes <code>val</code> into <code>self</code>.\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 double-precision (8 bytes) floating …\nWrites an IEEE754 double-precision (8 bytes) floating …\nWrites an IEEE754 double-precision (8 bytes) floating …\nWrites an IEEE754 double-precision (8 bytes) floating …\nWrites an IEEE754 double-precision (8 bytes) floating …\nWrites an IEEE754 double-precision (8 bytes) floating …\nWrites a signed 128 bit integer to <code>self</code> in the big-endian …\nWrites a signed 128 bit integer to <code>self</code> in the big-endian …\nWrites a signed 128 bit integer to <code>self</code> in little-endian …\nWrites a signed 128 bit integer to <code>self</code> in little-endian …\nWrites a signed 128 bit integer to <code>self</code> in native-endian …\nWrites a signed 128 bit integer to <code>self</code> in native-endian …\nWrites a signed 16 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 16 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 16 bit integer to <code>self</code> in little-endian …\nWrites a signed 16 bit integer to <code>self</code> in little-endian …\nWrites a signed 16 bit integer to <code>self</code> in native-endian …\nWrites a signed 16 bit integer to <code>self</code> in native-endian …\nWrites a signed 32 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 32 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 32 bit integer to <code>self</code> in little-endian …\nWrites a signed 32 bit integer to <code>self</code> in little-endian …\nWrites a signed 32 bit integer to <code>self</code> in native-endian …\nWrites a signed 32 bit integer to <code>self</code> in native-endian …\nWrites a signed 64 bit integer to <code>self</code> in the big-endian …\nWrites a signed 64 bit integer to <code>self</code> in the big-endian …\nWrites a signed 64 bit integer to <code>self</code> in little-endian …\nWrites a signed 64 bit integer to <code>self</code> in little-endian …\nWrites a signed 64 bit integer to <code>self</code> in native-endian …\nWrites a signed 64 bit integer to <code>self</code> in native-endian …\nWrites a signed 8 bit integer to <code>self</code>.\nWrites a signed 8 bit integer to <code>self</code>.\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nWrites an unsigned 128 bit integer to <code>self</code> in the …\nWrites an unsigned 128 bit integer to <code>self</code> in the …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 16 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in the …\nWrites an unsigned 64 bit integer to <code>self</code> in the …\nWrites an unsigned 64 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 8 bit integer to <code>self</code>.\nWrites an unsigned 8 bit integer to <code>self</code>.\nWrites an unsigned n-byte integer to <code>self</code> in big-endian …\nWrites an unsigned n-byte integer to <code>self</code> in big-endian …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nReturns the number of bytes that can be written from the …\nCreates an adaptor which implements the <code>Write</code> trait for …\nCreates an adaptor which implements the <code>Write</code> trait for …\nA <code>Chain</code> sequences two buffers.\nGets a mutable reference to the first underlying <code>Buf</code>.\nGets a reference to the first underlying <code>Buf</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes this <code>Chain</code>, returning the underlying values.\nGets a mutable reference to the last underlying <code>Buf</code>.\nGets a reference to the last underlying <code>Buf</code>.\nCreates a new <code>Chain</code> sequencing the provided values.\nIterator over the bytes contained by the buffer.\nReturns the argument unchanged.\nGets a mutable reference to the underlying <code>Buf</code>.\nGets a reference to the underlying <code>Buf</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>IntoIter</code>, returning the underlying value.\nCreates an iterator over the bytes contained by the buffer.\nA <code>BufMut</code> adapter which limits the amount of bytes that can …\nReturns the argument unchanged.\nGets a mutable reference to the underlying <code>BufMut</code>.\nGets a reference to the underlying <code>BufMut</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>Limit</code>, returning the underlying value.\nReturns the maximum number of bytes that can be written\nSets the maximum number of bytes that can be written.\nA <code>Buf</code> adapter which implements <code>io::Read</code> for the inner …\nReturns the argument unchanged.\nGets a mutable reference to the underlying <code>Buf</code>.\nGets a reference to the underlying <code>Buf</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>Reader</code>, returning the underlying value.\nA <code>Buf</code> adapter which limits the bytes read from an …\nReturns the argument unchanged.\nGets a mutable reference to the underlying <code>Buf</code>.\nGets a reference to the underlying <code>Buf</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>Take</code>, returning the underlying value.\nReturns the maximum number of bytes that can be read.\nSets the maximum number of bytes that can be read.\nUninitialized byte slice.\nReturn a raw pointer to the slice’s buffer.\nReturn a <code>&amp;mut [MaybeUninit&lt;u8&gt;]</code> to this slice’s buffer.\nCopies bytes from <code>src</code> into <code>self</code>.\nCreate a <code>&amp;mut UninitSlice</code> from a pointer and a length.\nReturns the number of bytes in the slice.\nCreates a <code>&amp;mut UninitSlice</code> wrapping a slice of initialised …\nCreates a <code>&amp;mut UninitSlice</code> wrapping a slice of …\nWrite a single byte at the specified offset.\nA <code>BufMut</code> adapter which implements <code>io::Write</code> for the inner …\nReturns the argument unchanged.\nGets a mutable reference to the underlying <code>BufMut</code>.\nGets a reference to the underlying <code>BufMut</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>Writer</code>, returning the underlying value.\nA cheaply cloneable and sliceable chunk of contiguous …\nClears the buffer, removing all data.\nfn(data, ptr, len)\nCreates <code>Bytes</code> instance from slice, by copying it.\nfn(data, ptr, len)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Bytes</code> from a static slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Bytes</code> has a length of 0.\nReturns true if this is the only reference to the data.\nfn(data)\nReturns the number of bytes contained in this <code>Bytes</code>.\nCreates a new empty <code>Bytes</code>.\nCreates a new <code>Bytes</code> with length zero and the given pointer …\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nfn(data, ptr, len)\nShortens the buffer, keeping the first <code>len</code> bytes and …\nTry to convert self into <code>BytesMut</code>.\nA unique reference to a contiguous slice of memory.\nAdvance the buffer without bounds checking.\nReturns the number of bytes the <code>BytesMut</code> can hold without …\nClears the buffer, removing all data. Existing capacity is …\nAppends given bytes to this <code>BytesMut</code>.\nConverts <code>self</code> into an immutable <code>Bytes</code>.\nConvert self into <code>BytesMut</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a dangling pointer with the given address. This is …\nReturns true if the <code>BytesMut</code> has a length of 0.\nReturns the number of bytes contained in this <code>BytesMut</code>.\nCreates a new <code>BytesMut</code> with default capacity.\nReserves capacity for at least <code>additional</code> more bytes to be …\nResizes the buffer so that <code>len</code> is equal to <code>new_len</code>.\nSets the length of the buffer.\nMakes an exact shallow clone of <code>self</code>.\nReturns the remaining spare capacity of the buffer as a …\nRemoves the bytes from the current view, returning them in …\nSplits the bytes into two at the given index.\nSplits the buffer into two at the given index.\nShortens the buffer, keeping the first <code>len</code> bytes and …\nAttempts to cheaply reclaim already allocated capacity for …\nAbsorbs a <code>BytesMut</code> that was previously split off.\nCreates a new <code>BytesMut</code> with the specified capacity.\nCreates a new <code>BytesMut</code> containing <code>len</code> zeros.\n<code>BytesRef</code> is not a part of public API of bytes crate.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHas the effects of both <code>Acquire</code> and <code>Release</code> together: For …\nWhen coupled with a load, if the loaded value was written …\nA raw pointer type which can be safely shared between …\nAn integer type which can be safely shared between threads.\nAtomic memory orderings\nNo ordering constraints, only atomic operations.\nWhen coupled with a store, all previous operations become …\nLike <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …\nReturns a mutable pointer to the underlying pointer.\nReturns a mutable pointer to the underlying integer.\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nCreates a null <code>AtomicPtr&lt;T&gt;</code>.\nAdds to the current value, returning the previous value.\nPerforms a bitwise “and” operation on the address of …\nBitwise “and” with the current value.\nOffsets the pointer’s address by adding <code>val</code> <em>bytes</em>, …\nOffsets the pointer’s address by subtracting <code>val</code> <em>bytes</em>, …\nMaximum with the current value.\nMinimum with the current value.\nBitwise “nand” with the current value.\nPerforms a bitwise “or” operation on the address of …\nBitwise “or” with the current value.\nOffsets the pointer’s address by adding <code>val</code> (in units of …\nOffsets the pointer’s address by subtracting <code>val</code> (in …\nSubtracts from the current value, returning the previous …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nPerforms a bitwise “xor” operation on the address of …\nBitwise “xor” with the current value.\nConverts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>usize</code> into an <code>AtomicUsize</code>.\nGet atomic access to a pointer.\nGet atomic access to a <code>&amp;mut usize</code>.\nGet atomic access to a slice of pointers.\nGet atomic access to a <code>&amp;mut [usize]</code> slice.\nCreates a new <code>AtomicPtr</code> from a pointer.\nCreates a new reference to an atomic integer from a …\nReturns a mutable reference to the underlying pointer.\nReturns a mutable reference to the underlying integer.\nGet non-atomic access to a <code>&amp;mut [AtomicPtr]</code> slice.\nGet non-atomic access to a <code>&amp;mut [AtomicUsize]</code> slice\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nLoads a value from the pointer.\nLoads a value from the atomic integer.\nCreates a new <code>AtomicPtr</code>.\nCreates a new atomic integer.\nStores a value into the pointer.\nStores a value into the atomic integer.\nStores a value into the pointer, returning the previous …\nStores a value into the atomic integer, returning the …")