searchState.loadedDescShard("jpeg_decoder", 0, "This crate contains a JPEG decoder.\nJPEG using arithmetic entropy coding instead of Huffman …\nCMYK transform should be applied.\nCMYK, 8 bits per channel\nRepresents the coding process of an image.\nDescribes the colour transform to apply before binary data …\nColour transform\nNumber of components in an image. 1, 3 and 4 components …\nAn image can specify a zero height in the frame header and …\nProgressive Discrete Cosine Transform\nSequential Discrete Cosine Transform\nJPEG decoder\nErrors that can occur while decoding a JPEG image.\nThe image is not formatted properly. The string contains …\nGrayscale transform should be applied (expects 1 channel)\nHierarchical JPEG.\nRepresents metadata of an image.\nAn internal error occurred while decoding the image.\nAn I/O error occurred while decoding the image.\nbig gamut red/green/blue, bg-sRGB\nbig gamut Y/Cb/Cr, bg-sYCC\nLuminance (grayscale), 16 bits\nLuminance (grayscale), 8 bits\nLossless\nA subsampling ratio not representable as an integer.\nNo transform should be applied and the data is returned …\nAn enumeration over combinations of color spaces and bit …\nRGB transform should be applied.\nRGB, 8 bits per channel\nSample precision in bits. 8 bit sample precision is what …\nSubsampling ratio.\nUnknown colour transformation\nThe image makes use of a JPEG feature not (currently) …\nAn enumeration over JPEG features (currently) unsupported …\nYCCK transform should be applied.\nYCbCr transform should be applied.\nThe coding process of the image.\nThe height of the image, in pixels.\nThe pixel format of the image.\nThe width of the image, in pixels.\nArch-specific implementation of YCbCr conversion. Returns …\nArch-specific implementation of 8x8 IDCT.\nCMYK transform should be applied.\nCMYK, 8 bits per channel\nDescribes the colour transform to apply before binary data …\nJPEG decoder\nGrayscale transform should be applied (expects 1 channel)\nRepresents metadata of an image.\nbig gamut red/green/blue, bg-sRGB\nbig gamut Y/Cb/Cr, bg-sYCC\nLuminance (grayscale), 16 bits\nLuminance (grayscale), 8 bits\nNo transform should be applied and the data is returned …\nAn enumeration over combinations of color spaces and bit …\nRGB transform should be applied.\nRGB, 8 bits per channel\nUnknown colour transformation\nYCCK transform should be applied.\nYCbCr transform should be applied.\nThe coding process of the image.\nDecodes the image and returns the decoded pixels if …\ndecode_scan_lossless\nReturns raw exif data, starting at the TIFF header, if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height of the image, in pixels.\nReturns the embeded icc profile if the image contains one.\nReturns metadata about the image.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Decoder</code> using the reader <code>reader</code>.\nDetermine the size in bytes of each pixel in this format\nThe pixel format of the image.\nTries to read metadata from the image without decoding it.\nConfigure the decoder to scale the image during decoding.\nHeuristic to avoid starting thread, synchronization if we …\nColour transform to use when decoding the image. App …\nSet maximum buffer size allowed for decoded images\nThe width of the image, in pixels.\nReturns the raw XMP packet if there is any.\nH.1.2.1\nJPEG using arithmetic entropy coding instead of Huffman …\nColour transform\nNumber of components in an image. 1, 3 and 4 components …\nAn image can specify a zero height in the frame header and …\nContains the error value\nErrors that can occur while decoding a JPEG image.\nThe image is not formatted properly. The string contains …\nHierarchical JPEG.\nAn internal error occurred while decoding the image.\nAn I/O error occurred while decoding the image.\nA subsampling ratio not representable as an integer.\nContains the success value\nSample precision in bits. 8 bit sample precision is what …\nSubsampling ratio.\nThe image makes use of a JPEG feature not (currently) …\nAn enumeration over JPEG features (currently) unsupported …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReserved for application segments\nComment\nDefine arithmetic coding conditioning(s)\nDefine hierarchical progression\nDefine Huffman table(s)\nDefine number of lines\nDefine quantization table(s)\nDefine restart interval\nEnd of image\nExpand reference component(s)\nReserved for JPEG extensions\nReserved for JPEG extensions\nReserved\nRestart with modulo 8 count <code>m</code>\nStart Of Frame markers\nStart of image\nStart of scan\nFor temporary private use in arithmetic coding\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the coding process of an image.\nProgressive Discrete Cosine Transform\nSequential Discrete Cosine Transform\nLossless\nReturns ceil(x/y), requires x&gt;0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault implementation for spawning multiple tasks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module implements per-component parallelism. It …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTechnically similar to <code>immediate::ImmediateWorker</code> but we …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")