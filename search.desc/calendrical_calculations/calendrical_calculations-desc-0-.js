searchState.loadedDescShard("calendrical_calculations", 0, "Calendrical calculations\nThis file contains important structs and functions …\nChinese-like lunar calendars (Chinese, Dangi)\nThe Coptic calendar\nError handling\nThe ethiopian calendar\nThe Hebrew calendar\nAlternate, more efficient structures for working with the …\nAdditional math helpers\nVarious islamic lunar calendars\nThe ISO calendar (also usable as Gregorian)\nThe Julian calendar\nThe persian calendar\nRepresentation of Rata Die (R.D.) dates, which are …\nThe Astronomical struct provides functions which support …\nThe Moment of noon on January 1, 2000\nA Location on the Earth given as a latitude, longitude, …\nThe maximum allowable UTC offset (+14 hours) in fractional …\nThe mean synodic month in days of 86400 atomic seconds …\nThe mean tropical year in days\nThe location of Mecca; used for Islamic calendar …\nThe minimum allowable UTC offset (-12 hours) in fractional …\nThe moment of the first new moon of the CE, which occurred …\nThe angle of winter for the purposes of solar calculations\nAberration at the time given in Julian centuries. See: …\nApprox moment in local time near <code>moment</code> at which the …\nAngular separation of the sun and moon at <code>moment</code>, for the …\nCalculate the day that the new moon occurred on or before …\nCalculates the declination at a given <code>Moment</code> of UTC time …\nThe standard time of dusk at a given location on a given …\nInclude the ephemeris correction to universal time, …\nGet the elevation of a Location\nelevation in meters\nFunction for the ephemeris correction, which corrects the …\nThe equation of time, which approximates the difference …\nGiven an <code>angle</code> and a <code>Moment</code> <code>moment</code>, approximate the <code>Moment</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of uniform length centuries (36525 days …\nGet the latitude of a Location\nlatitude from -90 to 90\nLocal time from apparent solar time at a given location\nConvert from universal time to local time given a location\nGet the longitude of a Location\nlongitude from -180 to 180\nAltitude of the moon (in degrees) at a given moment\nAverage anomaly of the moon (in degrees) at a given Moment …\nDistance to the moon in meters at the given moment.\nLunar elongation (the moon’s angular distance east of …\nEcliptic (aka celestial) latitude of the moon (in degrees)\nEcliptic (aka celestial) longitude of the moon (in degrees)\nThe parallax of the moon, meaning the difference in angle …\nThe phase of the moon at a given Moment, defined as the …\nMoment in universal time of the last time at or before the …\nMean longitude of the moon (in degrees) at a given Moment …\nMoment in local time near <code>approx</code> at which the depression …\nLength of the lunar month containing <code>date</code> in days, based …\nThe moon’s argument of latitude, in degrees, at the …\nTime between sunset and moonset on the date of the given …\nStandard time of moonset on the date of the given moment …\nFind the time of the new moon following a given Moment …\nFind the time of the new moon preceding a given Moment …\nCreate a new Location without checking for bounds\nThe moment (in universal time) of the nth new moon after …\nFunction to find the number of the new moon at or after a …\nLongitudinal nutation (periodic variation in the …\nCalculates the obliquity of the ecliptic at a given …\nObserved altitude of upper limb of moon at moment at …\nClosest fixed date on or after <code>date</code> on the eve of which …\nClosest fixed date on or before <code>date</code> when crescent moon …\nThe angle of refraction caused by Earth’s atmosphere at …\nCalculates the right ascension at a given <code>Moment</code> of UTC …\nCriterion for likely visibility of the crescent moon on …\nSidereal time, as the hour angle between the meridian and …\nThe best viewing time (UT) in the evening for viewing the …\nSine of angle between the position of the sun at the given …\nAverage anomaly of the sun (in degrees) at a given Moment …\nThe longitude of the Sun at a given Moment in degrees. …\nConvert standard time to local mean time given a location …\nGiven a Moment in standard time and UTC-offset in hours, …\nStandard time of sunset on the date of the given moment …\nTopocentric altitude of the moon.\nCreate a location; latitude is from -90 to 90, and …\nRemove the ephemeris correction from dynamical time, …\nConvert from local mean time to universal time given a …\nGiven a UTC-offset in hours and a Moment in standard time, …\nCriterion for possible visibility of crescent moon on the …\nGet the utc-offset of a Location\nUTC timezone offset in fractional days (1 hr = 1.0 / 24.0 …\nConvert a longitude into a mean time zone; this yields the …\nA type implementing <code>ChineseBased</code> for the Chinese calendar\nThe trait ChineseBased is used by Chinese-based calendars …\nchinese_based_date_from_fixed returns extra things for use …\nThe name of the calendar for debugging.\nA type implementing <code>ChineseBased</code> for the Dangi (Korean) …\nThe RataDie of the beginning of the epoch used for …\nThe ISO year that corresponds to year 1\nThe Korean Dangi calendar relies on knowing the current …\nThe Chinese calendar relies on knowing the current day at …\nMarks the bounds of a lunar year\nThis function forces the RataDie to be on December 20, 21, …\nGet a chinese based date from a fixed date, with the …\nCompute the YearBounds for the lunar year (年) containing …\nThe number of days in this year\nThe chinese day\nReturns the number of days in the given <code>month</code> after the …\nGiven a new year, calculate the number of days in the …\nCalculated the numbers of days in the given year\nGiven the new year and a month/day pair, calculate the …\nGiven an ISO year, return the extended year\nGet a RataDie in the middle of a year; this is not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven that <code>new_year</code> is the first day of a leap year, find …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not this is a leap year\nWhether this year is a leap year\nGiven an extended year, return the ISO year\nThe last month and day in this year\nThe index of the leap month, if any\nGiven a fixed date, return the location used for …\nGet the current major solar term of a fixed date, output …\nUniversal time of midnight at start of a Moment’s day at …\nThe chinese month\nReturns the number of days in the given (year, month). In …\nReturns the length of each month in the year, as well as a …\nThe fixed date in standard time at the observation …\nThe fixed date in standard time at the observation …\nThe date marking the start of the current lunar year\nDetermines the fixed date of the lunar new year given the …\nGet the fixed date of the nearest Lunar New Year on or …\nThe date marking the start of the next lunar year\nGet the fixed date of the nearest winter solstice, in the …\nThe chinese year\nThe bounds of the current lunar year\nLisp code reference: …\nLisp code reference: …\nLatitude value was out of bounds\nA list of error outcomes for exceeding location bounds\nLongitude value was out of bounds\nOffset value was out of bounds\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLisp code reference: …\nLisp code reference: …\nThe biblical month number used for the month of Adar (and …\nThe biblical month number used for the month of Adar II\nThe biblical month number used for the month of Av\nBiblical Hebrew dates. The months are reckoned a bit …\nThe biblical month number used for the month of Elul\nLisp code reference: …\nThe biblical month number used for the month of Iyyar\nThe biblical month number used for the month of Kislev\nThe biblical month number used for the month of Marheshvan\nThe biblical month number used for the month of Nisan\nThe biblical month number used for the month of Shevat\nThe biblical month number used for the month of Sivan\nThe biblical month number used for the month of Tammuz\nThe biblical month number used for the month of Tevet\nThe biblical month number used for the month of Tishri\nLisp code reference: …\nLisp code reference: …\nLisp code reference: …\nLisp code reference: …\nThe day\nLisp code reference: …\nLisp code reference: …\nReturns the argument unchanged.\nThe civil calendar has the same year and day numbering as …\nCalls <code>U::from(self)</code>.\nLisp code reference: …\nLisp code reference: …\nLisp code reference: …\nLisp code reference: …\nLisp code reference: …\nLisp code reference: …\nThe month\nThe civil calendar has the same year and day numbering as …\nThe year\nNormalized month constant (see <code>TISHREI</code>)\nNormalized month constant (see <code>TISHREI</code>)\nשלמה: both Ḥeshvan and Kislev have 30 days\nחסרה: both Ḥeshvan and Kislev have 29 days\nNormalized month constant (see <code>TISHREI</code>)\nFrom Reingold (ch 8.2, in implementation for …\nThe Hebrew calendar epoch. It did not need to be …\nThe amount of time a Hebrew lunation takes (in ḥalakim). …\nThe maximum R.D. supported by this code (this is the last …\nThe maximum hebrew year supported by this code (this is …\nThe minumum R.D. supported by this code (this code will …\nThe minumum hebrew year supported by this code (this is …\nNormalized month constant (see <code>TISHREI</code>)\nNormalized month constant (see <code>TISHREI</code>)\nThe Keviyah (קביעה) of a year. A year may be one of …\nBefore a leap year (2, 5, 10, 13, 16)\nBetween leap years (7. 18)\nAfter a leap year (1, 4, 9, 12, 15)\nLeap year (3, 6, 8, 11, 14, 17, 19)\nThe molad Beherad is the first molad, i.e. the molad of …\n“Metonic cycle” in general refers to any 19-year …\nMonday (everyone knows what Monday is)\nNormalized month constant (see <code>TISHREI</code>)\nכסדרה: Ḥeshvan has 29, Kislev has 30\nNormalized month constant (see <code>TISHREI</code>)\nNormalized month constant (see <code>TISHREI</code>)\nSaturday (everyone knows what Saturday is)\nThe day of the new year. Only these four days are …\nNormalized month constant (see <code>TISHREI</code>)\nNormalized month constant (see <code>TISHREI</code>)\nNormalized month constant for Tishrei\nThursday (everyone knows what Thursday is)\nTuesday (everyone knows what Tuesday is)\nEverything about a given year. Can be conveniently packed …\nThe type of year it is\nCompare this year against a date. Returns Ordering::Greater\nCompute the YearInfo for a given year\nGet the number of days preceding this month\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct this from an integer between 0 and 13\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this year is a leap year\nThe Keviyah of the year\nPerform the four gates calculation, giving you the Keviyah …\nThe length correction of Kislev\nReturn the last ordinal month and day in this year as …\nThe length correction from a regular year (354/385)\nGiven a Hebrew Year, returns its molad specified as:\nGiven a day of the year, return the ordinal month and day …\nGiven an ordinal, civil month (1-indexed month starting at …\nCalculate the number of months preceding the molad Tishrei …\nCompute the date of New Year’s Day\nNormalize the ordinal month to the “month number” in …\nGet the day of the new year for this Keviyah\nHow many full weeks have passed since the week of Beharad\nReturns the YearInfo and h_year for the year containing …\nGiven the hebrew year for this Keviyah, calculate the …\nHow many days are in this year\nGet the type of year for this Keviyah.\n2D3\n2D5\n2C5\n2C7\n3R5\n3R7\n5D1\n5R7\n5C1\n5C3\n7D1\n7D3\n7C3\n7C5\nThe number of ḥalakim in a week\nNormalized month constant (see <code>TISHREI</code>)\nConveniently create a constant for a ḥalakim (by default …\nThe length of Ḥeshvan\nGreater than i32::MAX\nLess than i32::MIN\nError returned when casting from an i32\nReturns the argument unchanged.\nConvert an i64 to i32 and with information on which way it …\nConvert an i64 to i32 but saturate at th ebounds\nCalls <code>U::from(self)</code>.\nLisp code reference: …\nMarker type for civil islamic calendar, for use with …\nThe name of the calendar for debugging.\nThe epoch of the calendar. Different calendars use a …\nLisp code reference: …\nWhether this calendar is known to have 353-day years. This …\nCommon abstraction over islamic-style calendars\nMarker type for observational islamic calendar, for use …\nMarker type for Saudi islamic calendar, for use with …\nMarker type for observational islamic calendar, for use …\nGiven an iso date, calculate the <em>approximate</em> islamic year …\nConvert an islamic date in this calendar to a R.D.\nLisp code reference: …\nLisp code reference: …\nLisp code reference:https: …\nLisp code reference: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLisp code reference: …\nConvert an R.D. To an islamic date in this calendar\nLisp code reference: …\nGiven the extended year, calculate the approximate new …\nGiven an extended year, calculate whether each month is 29 …\nLisp code reference: …\nThe number of days in a month for the observational …\nLisp code reference: …\nLisp code reference: …\nThe number of days in a month for the Saudi (Umm Al-Qura) …\nLisp code reference: …\nLisp code reference: …\nWhether or not <code>year</code> is a leap year\nLisp code reference: …\nLisp code reference: …\nLisp code reference: …\nGet a fixed date from the ymd of a Julian date; years are …\nLisp code reference: …\nLisp code reference: …\nLisp code reference: …\nLisp code reference: …\nLisp code reference: …\narithmetic_persian_from_fixed, modified to use the 33-year …\narithmetic_persian_year_from_fixed modified for the …\nLisp code reference: …\nfixed_from_arithmetic_persian, modified to use the more …\nLisp code reference: …\nCalculated using the 33-year rule\nA moment is a RataDie with a fractional part giving the …\nThe <em>Rata Die</em>, or <em>R.D.</em>, or <code>fixed_date</code>: number of days since …\nConvert this to a <code>Moment</code>\nGet the RataDie of a Moment\nCheck that it is in range\nCalculate the number of days between two RataDie in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inner field of a Moment\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a RataDie\nCreate a new moment\nConvert this to an f64 value representing the RataDie\nConvert this to an i64 value representing the RataDie")