searchState.loadedDescShard("etagere", 0, "Dynamic texture atlas allocation using the shelf packing …\nID referring to an allocated rectangle.\nThe <code>AllocId</code> and <code>Rectangle</code> resulting from an allocation.\nOptions to tweak the behavior of the atlas allocator.\nA shelf-packing dynamic texture atlas allocator tracking …\nA faster but less precise Shelf-packing dynamic texture …\nIterator over the allocations of an atlas.\nAlign item sizes to a multiple of this alignment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf possible split the allocator’s surface into multiple …\nShorthand for <code>Point2D::new(x, y)</code>.\nShorthand for <code>Size2D::new(w, h)</code>.\nUse vertical instead of horizontal shelves.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nA shelf-packing dynamic texture atlas allocator tracking …\nIterator over the allocations of an atlas.\nAllocate a rectangle in the atlas.\nAmount of occupied space in the atlas.\nDeallocate a rectangle in the atlas.\nDump a visual representation of the atlas in SVG, omitting …\nDump a visual representation of the atlas in SVG format.\nHow much space is available for future allocations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the allocation info associated to the allocation …\nTurn a valid AllocId into an index that can be used as a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an atlas allocator with default options.\nCreate an atlas allocator with provided options.\nA faster but less precise Shelf-packing dynamic texture …\nAllocate a rectangle in the atlas.\nAmount of occupied space in the atlas.\nFind a sequence of consecutive shelves that can be …\nDeallocate a rectangle in the atlas.\nReturns true if we should garbage-collect the shelves as a …\nDump a visual representation of the atlas in SVG, omitting …\nDump a visual representation of the atlas in SVG format.\nHow much space is available for future allocations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimilar to refcount except that the counter is not …\nCreate an atlas allocator with default options.\nBuckets are cleared when their reference count goes back …\nCreate an atlas allocator with provided options.")