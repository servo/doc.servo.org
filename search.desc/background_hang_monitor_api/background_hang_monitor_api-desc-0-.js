searchState.loadedDescShard("background_hang_monitor_api", 0, "An API interface to the BackgroundHangMonitor.\nProxy methods to communicate with the background hang …\nMessages to control the sampling profiler.\nA means for the BHM to signal a monitored component to …\nA handle to register components for hang monitoring, and …\nEnable the sampler, with a given sampling rate and max …\nExit, and propagate the signal to monitored components.\nA component hang has been detected.\nHang-alerts are sent by the monitor to the constellation.\nHang-alerts are sent by the monitor to the constellation.\nInfo related to the activity of an hanging component.\nReport a permanent hang.\nReport a completed sampled profile.\nThe equivalent of …\nReport a transient hang.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNotify the start of handling an event.\nNotify the start of waiting for a new event to come in.\nRegister a component for hang monitoring: to be called …\nCalled by the BHM, to notify the monitored component to …\nUnregister the component from monitor.")