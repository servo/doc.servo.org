searchState.loadedDescShard("allocator_api2", 0, "allocator-api2 crate.\nSlice methods that use <code>Box</code> and <code>Vec</code> from this crate.\nMemory allocation APIs\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nCreates a vector by copying a slice <code>n</code> times.\nCopies <code>self</code> into a new <code>Vec</code> with an allocator.\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nThe <code>AllocError</code> error indicates an allocation failure that …\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nThe global memory allocator.\nA memory allocator that can be registered as the standard …\nLayout of a block of memory.\nThe parameters given to <code>Layout::from_size_align</code> or some …\nThe minimum byte alignment for a memory block of this …\nCreates a layout describing the record that can hold a …\nAllocate memory with the global allocator.\nAllocate memory as described by the given <code>layout</code>.\nAllocate zero-initialized memory with the global allocator.\nBehaves like <code>alloc</code>, but also ensures that the contents are …\nAttempts to allocate a block of memory.\nCreates a layout describing the record for a <code>[T; n]</code>.\nCreates a <code>NonNull</code> that is dangling, but well-aligned for …\nDeallocate memory with the global allocator.\nDeallocate the block of memory at the given <code>ptr</code> pointer …\nDeallocates the memory referenced by <code>ptr</code>.\nCreates a layout describing the record for <code>self</code> followed by\nCreates a layout describing the record for <code>self</code> followed by\nProduces layout describing a record that could be used to …\nProduces layout describing a record that could be used to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …\nCreates a layout, bypassing all checks.\nSignal a memory allocation error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.\nCreates a layout by rounding the size of this layout up to …\nReturns the amount of padding we must insert after <code>self</code> to …\nReallocate memory with the global allocator.\nShrink or grow a block of memory to the given <code>new_size</code> in …\nCreates a layout describing the record for <code>n</code> instances of …\nCreates a layout describing the record for <code>n</code> instances of …\nThe minimum size in bytes for a memory block of this …\nA pointer type for heap allocation.\nMemory allocation APIs\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nA contiguous growable array type with heap-allocated …\nThe <code>AllocError</code> error indicates an allocation failure that …\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nA memory allocator that can be registered as the standard …\nLayout of a block of memory.\nThe parameters given to <code>Layout::from_size_align</code> or some …\nAllocate memory with the global allocator.\nAllocate memory as described by the given <code>layout</code>.\nAllocate zero-initialized memory with the global allocator.\nBehaves like <code>alloc</code>, but also ensures that the contents are …\nAttempts to allocate a block of memory.\nBehaves like <code>allocate</code>, but also ensures that the returned …\nBehaves like <code>allocate</code>, but also ensures that the returned …\nCreates a “by reference” adapter for this instance of …\nCreates a “by reference” adapter for this instance of …\nDeallocate memory with the global allocator.\nDeallocate the block of memory at the given <code>ptr</code> pointer …\nDeallocates the memory referenced by <code>ptr</code>.\nReturns the argument unchanged.\nAttempts to extend the memory block.\nAttempts to extend the memory block.\nBehaves like <code>grow</code>, but also ensures that the new contents …\nBehaves like <code>grow</code>, but also ensures that the new contents …\nSignal a memory allocation error.\nCalls <code>U::from(self)</code>.\nReallocate memory with the global allocator.\nShrink or grow a block of memory to the given <code>new_size</code> in …\nAttempts to shrink the memory block.\nAttempts to shrink the memory block.\nThe global memory allocator.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA pointer type for heap allocation.\nReturns a reference to the underlying allocator.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConverts to <code>Box&lt;T, A&gt;</code>.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nAttempt to downcast the box to a concrete type.\nAttempt to downcast the box to a concrete type.\nAttempt to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nReturns the argument unchanged.\nConvert a vector into a boxed slice.\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nCalls <code>U::from(self)</code>.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConsumes the <code>Box</code>, returning the wrapped value.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nAllocates memory on the heap and then places <code>x</code> into it.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nThe memory allocator returned an error\nError due to the computed capacity exceeding the collection…\nA low-level utility for more ergonomically allocating, …\nThe error type for <code>try_reserve</code> methods.\nDetails of the allocation that caused a <code>TryReserveError</code>\nThe contents of the new memory are uninitialized.\nThe new memory is guaranteed to be zeroed.\nReturns a shared reference to the allocator backing this …\nGets the capacity of the allocation.\nFrees the memory owned by the <code>RawVec</code> <em>without</em> trying to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAlways evaluates to <code>TryReserveErrorKind::CapacityOverflow</code>.\nReturns the argument unchanged.\nReconstitutes a <code>RawVec</code> from a pointer, capacity, and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entire buffer into <code>Box&lt;[MaybeUninit&lt;T&gt;]&gt;</code> with …\nDetails about the allocation that caused the error\nReturns if the buffer needs to grow to fulfill the needed …\nCreates the biggest possible <code>RawVec</code> (on the system heap) …\nLike <code>new</code>, but parameterized over the choice of allocator …\nGets a raw pointer to the start of the allocation. Note …\nEnsures that the buffer contains at least enough space to …\nEnsures that the buffer contains at least enough space to …\nA specialized version of <code>reserve()</code> used only by the hot and\nShrinks the buffer down to the specified capacity. If the …\nThe same as <code>reserve</code>, but returns on errors instead of …\nThe same as <code>reserve_exact</code>, but returns on errors instead …\nCreates a <code>RawVec</code> (on the system heap) with exactly the …\nLike <code>with_capacity</code>, but parameterized over the choice of …\nLike <code>with_capacity</code>, but guarantees the buffer is zeroed.\nLike <code>with_capacity_zeroed</code>, but parameterized over the …\nThe layout of allocation request that failed\nSlice methods that use <code>Box</code> and <code>Vec</code> from this crate.\nCreates a vector by copying a slice <code>n</code> times.\nCopies <code>self</code> into a new <code>Vec</code>.\nCopies <code>self</code> into a new <code>Vec</code>.\nCopies <code>self</code> into a new <code>Vec</code> with an allocator.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nAppends elements to <code>self</code> from other buffer.\nReturns an unsafe mutable pointer to the vector’s …\nExtracts a mutable slice of the entire vector.\nReturns a raw pointer to the vector’s buffer, or a …\nExtracts a slice containing the entire vector.\nReturns the total number of elements the vector can hold …\nClears the vector, removing all values.\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates an empty <code>Vec&lt;T&gt;</code>.\nRemoves the specified range from the vector in bulk, …\nClones and appends all elements in a slice to the <code>Vec</code>.\nCopies elements from <code>src</code> range to the end of the vector.\nExtend the vector by <code>n</code> values, using the given generator.\nReturns the argument unchanged.\nAllocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nAllocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.\nConvert a boxed array into a vector by transferring …\nConvert a boxed slice into a vector by transferring …\nAllocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nReturns the argument unchanged.\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a capacity, and …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …\nInserts an element at position <code>index</code> within the vector, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nCreates a consuming iterator, that is, one that moves each …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components.\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components.\nReturns <code>true</code> if the vector contains no elements.\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nReturns the number of elements in the vector, also …\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nRemoves the last element from a vector and returns it, or …\nAppends an element to the back of a collection.\nAppends an element if there is sufficient spare capacity, …\nRemoves and returns the element at position <code>index</code> within …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of the vector as much as possible.\nReturns the remaining spare capacity of the vector as a …\nSafety\nCreates a splicing iterator that replaces the specified …\nReturns vector content as a slice of <code>T</code>, along with the …\nSafety: changing returned .2 (&amp;mut usize) is considered …\nSplits the collection into two at the given index.\nRemoves an element from the vector and returns it.\nShortens the vector, keeping the first <code>len</code> elements and …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nReturns a reference to the underlying allocator.\nReturns the remaining items of this iterator as a slice.\nThe range from <code>self.vec.len</code> to <code>self.tail_start</code> contains …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCurrent remaining range to remove\nKeep unyielded elements in the source <code>Vec</code>.\nMakes room for inserting more elements before the tail.\nLength of tail\nIndex of tail to preserve\nAn iterator that moves out of a vector.\nReturns a reference to the underlying allocator.\nReturns the remaining items of this iterator as a mutable …\nReturns the remaining items of this iterator as a slice.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA splicing iterator for <code>Vec</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nCurrent remaining range to remove\nLength of tail\nIndex of tail to preserve")