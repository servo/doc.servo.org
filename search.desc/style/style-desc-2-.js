searchState.loadedDescShard("style", 2, "Reset grid-column-end from the initial struct.\nReset grid-column-start from the initial struct.\nReset grid-row-end from the initial struct.\nReset grid-row-start from the initial struct.\nReset grid-template-areas from the initial struct.\nReset grid-template-columns from the initial struct.\nReset grid-template-rows from the initial struct.\nReset height from the initial struct.\nReset image-rendering from the initial struct.\nReset justify-content from the initial struct.\nReset justify-items from the initial struct.\nReset justify-self from the initial struct.\nReset left from the initial struct.\nReset letter-spacing from the initial struct.\nReset line-height from the initial struct.\nReset list-style-image from the initial struct.\nReset list-style-position from the initial struct.\nReset list-style-type from the initial struct.\nReset margin-bottom from the initial struct.\nReset margin-left from the initial struct.\nReset margin-right from the initial struct.\nReset margin-top from the initial struct.\nReset max-height from the initial struct.\nReset max-width from the initial struct.\nReset min-height from the initial struct.\nReset min-width from the initial struct.\nReset mix-blend-mode from the initial struct.\nReset object-fit from the initial struct.\nReset object-position from the initial struct.\nReset opacity from the initial struct.\nReset order from the initial struct.\nReset outline-color from the initial struct.\nReset outline-offset from the initial struct.\nReset outline-style from the initial struct.\nReset outline-width from the initial struct.\nReset overflow-wrap from the initial struct.\nReset overflow-x from the initial struct.\nReset overflow-y from the initial struct.\nReset padding-bottom from the initial struct.\nReset padding-left from the initial struct.\nReset padding-right from the initial struct.\nReset padding-top from the initial struct.\nReset perspective from the initial struct.\nReset perspective-origin from the initial struct.\nReset pointer-events from the initial struct.\nReset position from the initial struct.\nReset quotes from the initial struct.\nReset right from the initial struct.\nReset rotate from the initial struct.\nReset row-gap from the initial struct.\nReset scale from the initial struct.\nReset table-layout from the initial struct.\nReset text-align from the initial struct.\nReset text-align-last from the initial struct.\nReset text-decoration-color from the initial struct.\nReset text-decoration-line from the initial struct.\nReset text-decoration-style from the initial struct.\nReset text-indent from the initial struct.\nReset text-justify from the initial struct.\nReset text-overflow from the initial struct.\nReset text-rendering from the initial struct.\nReset text-shadow from the initial struct.\nReset text-transform from the initial struct.\nReset text-wrap-mode from the initial struct.\nReset top from the initial struct.\nReset transform from the initial struct.\nReset transform-origin from the initial struct.\nReset transform-style from the initial struct.\nReset transition-behavior from the initial struct.\nReset transition-delay from the initial struct.\nReset transition-duration from the initial struct.\nReset transition-property from the initial struct.\nReset transition-timing-function from the initial struct.\nReset translate from the initial struct.\nReset unicode-bidi from the initial struct.\nReset vertical-align from the initial struct.\nReset visibility from the initial struct.\nReset white-space-collapse from the initial struct.\nReset width from the initial struct.\nReset word-break from the initial struct.\nReset word-spacing from the initial struct.\nReset writing-mode from the initial struct.\nReset z-index from the initial struct.\nReset zoom from the initial struct.\nThe right computed value.\nThe rotate computed value.\nThe row-gap computed value.\nThe scale computed value.\nSet -servo-overflow-clip-box.\nSet -servo-top-layer.\nSet -x-lang.\nSets the display property, but without touching …\nSet align-content.\nSet align-items.\nSet align-self.\nSet animation-composition.\nSet animation-delay.\nSet animation-direction.\nSet animation-duration.\nSet animation-fill-mode.\nSet animation-iteration-count.\nSet animation-name.\nSet animation-play-state.\nSet animation-timeline.\nSet animation-timing-function.\nSet aspect-ratio.\nSet backface-visibility.\nSet background-attachment.\nSet background-clip.\nSet background-color.\nSet background-image.\nSet background-origin.\nSet background-position-x.\nSet background-position-y.\nSet background-repeat.\nSet background-size.\nSet baseline-source.\nSet border-bottom-color.\nSet border-bottom-left-radius.\nSet border-bottom-right-radius.\nSet border-bottom-style.\nSet border-bottom-width.\nSet border-collapse.\nSet border-image-outset.\nSet border-image-repeat.\nSet border-image-slice.\nSet border-image-source.\nSet border-image-width.\nSet border-left-color.\nSet border-left-style.\nSet border-left-width.\nSet border-right-color.\nSet border-right-style.\nSet border-right-width.\nSet border-spacing.\nSet border-top-color.\nSet border-top-left-radius.\nSet border-top-right-radius.\nSet border-top-style.\nSet border-top-width.\nSet bottom.\nSet box-shadow.\nSet box-sizing.\nSet caption-side.\nSet clear.\nSet clip.\nSet clip-path.\nSet color.\nSet color-scheme.\nSet column-count.\nSet column-gap.\nSet column-span.\nSet column-width.\nSet container-name.\nSet container-type.\nSet content.\nSet counter-increment.\nSet counter-reset.\nSet cursor.\nSet direction.\nSet <code>display</code>.\nSet empty-cells.\nSet filter.\nSet flex-basis.\nSet flex-direction.\nSet flex-grow.\nSet flex-shrink.\nSet flex-wrap.\nSet float.\nSet font-family.\nSet font-language-override.\nSet font-size.\nSet font-stretch.\nSet font-style.\nSet font-variant-caps.\nSet font-weight.\nSet grid-auto-columns.\nSet grid-auto-flow.\nSet grid-auto-rows.\nSet grid-column-end.\nSet grid-column-start.\nSet grid-row-end.\nSet grid-row-start.\nSet grid-template-areas.\nSet grid-template-columns.\nSet grid-template-rows.\nSet height.\nSet image-rendering.\nSet justify-content.\nSet justify-items.\nSet justify-self.\nSet left.\nSet letter-spacing.\nSet line-height.\nSet list-style-image.\nSet list-style-position.\nSet list-style-type.\nSet margin-bottom.\nSet margin-left.\nSet margin-right.\nSet margin-top.\nSet max-height.\nSet max-width.\nSet min-height.\nSet min-width.\nSet mix-blend-mode.\nSet object-fit.\nSet object-position.\nSet opacity.\nSet order.\nSet outline-color.\nSet outline-offset.\nSet outline-style.\nSet outline-width.\nSet overflow-wrap.\nSet overflow-x.\nSet overflow-y.\nSet padding-bottom.\nSet padding-left.\nSet padding-right.\nSet padding-top.\nSet perspective.\nSet perspective-origin.\nSet pointer-events.\nSet position.\nSet quotes.\nSet right.\nSet rotate.\nSet row-gap.\nSet scale.\nSet table-layout.\nSet text-align.\nSet text-align-last.\nSet text-decoration-color.\nSet text-decoration-line.\nSet text-decoration-style.\nSet text-indent.\nSet text-justify.\nSet text-overflow.\nSet text-rendering.\nSet text-shadow.\nSet text-transform.\nSet text-wrap-mode.\nSet top.\nSet transform.\nSet transform-origin.\nSet transform-style.\nSet transition-behavior.\nSet transition-delay.\nSet transition-duration.\nSet transition-property.\nSet transition-timing-function.\nSet translate.\nSet unicode-bidi.\nSet vertical-align.\nSet visibility.\nSet white-space-collapse.\nSet width.\nSet word-break.\nSet word-spacing.\nSet writing-mode.\nSet z-index.\nSet zoom.\nReturns whether there is any animation specified with …\nReturns whether there are any transitions specified.\nThe table-layout computed value.\nThe text-align computed value.\nThe text-align-last computed value.\nThe text-decoration-color computed value.\nThe text-decoration-line computed value.\nThe text-decoration-style computed value.\nThe “used” text-decorations that apply to this box.\nThe text-indent computed value.\nThe text-justify computed value.\nThe text-overflow computed value.\nThe text-rendering computed value.\nThe text-shadow computed value.\nThe text-transform computed value.\nThe text-wrap-mode computed value.\nThe top computed value.\nThe transform computed value.\nThe transform-origin computed value.\nThe transform-style computed value.\nThe transition-behavior computed value.\nIf this longhand is indexed, get the element at given …\nIf this longhand is indexed, get the number of elements.\nIterate over the values of transition-behavior.\nGet a value mod <code>index</code> for the property transition-behavior.\nThe transition-delay computed value.\nIf this longhand is indexed, get the element at given …\nIf this longhand is indexed, get the number of elements.\nIterate over the values of transition-delay.\nGet a value mod <code>index</code> for the property transition-delay.\nThe transition-duration computed value.\nIf this longhand is indexed, get the element at given …\nIf this longhand is indexed, get the number of elements.\nIterate over the values of transition-duration.\nGet a value mod <code>index</code> for the property transition-duration.\nThe transition-property computed value.\nIf this longhand is indexed, get the element at given …\nIf this longhand is indexed, get the number of elements.\nIterate over the values of transition-property.\nGet a value mod <code>index</code> for the property transition-property.\nThe transition-timing-function computed value.\nIf this longhand is indexed, get the element at given …\nIf this longhand is indexed, get the number of elements.\nIterate over the values of transition-timing-function.\nGet a value mod <code>index</code> for the property …\nThe translate computed value.\nThe unicode-bidi computed value.\nThe vertical-align computed value.\nThe visibility computed value.\nThe white-space-collapse computed value.\nThe width computed value.\nThe word-break computed value.\nThe word-spacing computed value.\nThe writing-mode computed value.\nThe z-index computed value.\nThe zoom computed value.\nRegistered custom properties.\nThe [<code>@property</code>] at-rule.\nUsed for parsing and serializing the [<code>@property</code>] syntax …\nParsing for registered custom properties.\nA computed, already-validated property registration. …\nThe metadata of a custom property registration that we …\nThe script registry of custom properties. …\nComputes the value of the computationally independent …\nThe actual information about the property.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets an already-registered custom property via script.\nReturns the properties hashmap.\nReturns whether this property inherits.\nReturns whether this property inherits.\nWhether the property inherits.\nThe initial value. Only missing for universal syntax.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe custom property name.\nGets already-registered custom properties via script.\nRegister a given property. As per …\nThe source location of this registration, if it comes from …\nThe syntax of the property.\n…\nThe data for an unregistered property.\nThe url data that is used to parse and compute the …\nPerforms syntax validation as per the initial value …\n<code>false</code> value for the <code>inherits</code> descriptor\n…\nSpecifies the initial value of the custom property …\nData inside a <code>@property</code> rule.\nErrors that can happen when registering a property.\nA custom property name wrapper that includes the <code>--</code> prefix …\n<code>true</code> value for the <code>inherits</code> descriptor\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\n…\n…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse this keyword.\nParse the block inside a <code>@property</code> rule.\n…\nIndicates a comma-separated list.\n…\n…\n…\n…\nhttps://drafts.csswg.org/css-values-4/#custom-idents\n…\nIndicates a space-separated list.\nThe parsed components, if any. TODO: Could be a Box&lt;[]&gt; if …\nUsed for parsing and serializing component names from the …\nReturns the dependent types this syntax might contain.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a syntax descriptor. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nhttps://drafts.csswg.org/css-syntax-3/#letter\n…\nhttps://drafts.csswg.org/css-syntax-3/#non-ascii-code-point\n…\nReturns whether this is the universal syntax descriptor.\nReturns the component’s multiplier, if one exists.\nReturns the component’s name.\nParse a syntax descriptor.\n…\n…\nThe specified css syntax, if any.\nReturns the specified string, if any.\nReturns the universal descriptor.\nIf the component is premultiplied, return the …\nTrims ASCII whitespace characters from a slice, and …\nAny valid <code>&lt;angle&gt;</code> value\n values depend on color-scheme, etc..\nAny valid <code>&lt;color&gt;</code> value\nAny valid <code>&lt;custom-ident&gt;</code> value\n…\nSome types (lengths and colors) depend on other properties …\nAny valid <code>&lt;image&gt;</code> value\nAny valid <code>&lt;integer&gt;</code> value\n values depend on font-size/line-height/zoom…\nAny valid <code>&lt;length&gt;</code> value\nAny valid <code>&lt;length&gt;</code> or <code>&lt;percentage&gt;</code> value, any valid …\n<code>&lt;number&gt;</code> values\nAny valid  value\nAny valid <code>&lt;resolution&gt;</code> value\nAny valid <code>&lt;string&gt;</code> value\nAny valid <code>&lt;time&gt;</code> value\nAny valid <code>&lt;transform-function&gt;</code> value\nA list of valid <code>&lt;transform-function&gt;</code> values. Note that “…\nAny valid <code>&lt;url&gt;</code> value\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns which kinds of dependent data types this property …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nParses a syntax component name.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nConverts a component name from a pre-multiplied data type …\nWhether the computed value parsing should allow …\nAn  value\nAn  value\nAn  value\nA  value\nA  value\nA  value\nA single specified component value whose syntax descriptor …\nA list of component values, including the list’s …\nComputed custom property value.\nA single component of the computed value.\nAn animated value for custom property.\nA  value\nA  value\nA  value\nA generic enum used for both specified value components …\nAn  value\nAn  value\nAn  value\nAn  value\nAn  value\nAn  value\nA  value\nA  value\nA  value\nA  value\nA  value\nA  value\nA list of specified component values whose syntax …\nOnly computationally independent values are allowed.\nA  value\nA  value\nA  value\nA  value\nA  value\nA  value\nA  value\nA  value\nA  value\nSpecified custom property value.\nA single component of the specified value.\nA  value\nA  value\nA  value\nA  value\nA  value\nA  value\nA  value TODO(bug 1884606):  <code>none</code> should not interpolate.\nA  value TODO(bug 1884606):  <code>none</code> should not interpolate.\nA  value TODO(bug 1884606):  <code>none</code> should not interpolate.\nA  value, equivalent to + TODO(bug 1884606):  <code>none</code> should …\nA  value, equivalent to + TODO(bug 1884606):  <code>none</code> should …\nA  value, equivalent to + TODO(bug 1884606):  <code>none</code> should …\nA specified value whose syntax descriptor was the …\nA  value\nA  value\nA  value\nA struct for a single specified registered custom property …\nA specified registered custom property value.\nComputationally independent and dependent values are …\nReturns the contained variable value if it exists, …\nReturns the contained variable value if it exists, …\nThe list of components contained.\nConvert a registered custom property to a Computed custom …\nConvert a registered custom property to a Computed custom …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the the property is computed.\nReturns whether the the property is computed.\nMultiplier\nThe name of the custom property.\nCreates a new registered custom property value.\nParse and validate a registered custom property value …\nParse and validate a registered custom property value …\nConvert to an untyped variable value.\nConvert to an untyped variable value.\nCreates a new registered custom property value presumed to …\nThe URL data of the registered custom property from before …\nThe URL data of the registered custom property from before …\nThe URL data of the registered custom property from before …\nThe registered custom property value.\nThe registered custom property value.\nThe registered custom property value.\nThe computed value of the custom property.\nA query condition:\nQuery features.\nParsing for query feature expressions, like <code>(foo: bar)</code> or …\nCommon feature values between media and container features.\nWhether to allow an <code>or</code> condition or not during parsing.\nA simple feature expression, implicitly parenthesized.\n[  ? ) ] | [ ( ? ) ]\nA condition wrapped in parenthesis.\nA negation of a condition.\nA set of joint operations.\nA binary <code>and</code> or <code>or</code> operator.\nRepresents a condition.\nhttps://drafts.csswg.org/css-syntax-3/#typedef-any-value\nReturns the union of all flags in the expression. This is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this condition matches the device and quirks mode. …\nParse this keyword.\nParse a single condition.\nParse a single condition, disallowing <code>or</code> expressions.\nParse a condition in parentheses, or <code>&lt;general-enclosed&gt;</code>.\n…\nWhether a feature allows ranges or not.\nThe feature should only be parsed in chrome and ua sheets.\nThe feature requires the block-axis containment.\nThe feature requires containment in the physical height …\nThe feature requires the inline-axis containment.\nThe feature requires containment in the physical width …\nA keyword value.\nAn evaluator for a given feature.\nDifferent flags or toggles that change how a expression is …\nA generic discriminant for an enum value.\nParses a given identifier.\nSerializes a given discriminant.\nA non-negative number ratio, such as the one from …\nA description of a feature.\nA resolution.\nThe feature evaluation depends on the viewport size.\nThe feature requires a -webkit- prefix.\nGet a flags value with all known bits set.\nReturns all the container axis flags.\nWhether this feature allows ranges.\nWhether min- / max- prefixes are allowed or not.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns our subset of container axis flags.\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe evaluator, which we also use to determine which kind …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nA simple helper to construct a <code>QueryFeatureDescription</code>.\nDifferent feature-specific flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nA simple helper macro to create a keyword evaluator.\nThe feature name, in ascii lowercase.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns parsing requirement flags.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe evaluator itself. This is guaranteed to be called with …\nThe parser to get a discriminant given a string.\nThe serializer to get a string from a discriminant.\nA boolean value, specified as an integer (i.e., either 0 …\nWe’re parsing a container feature.\nJust the media feature name.\nAn enumerated value, defined by the variant keyword table …\n=\nWhether we’re parsing a media or container query feature.\nA floating point value.\n=\nAn integer.\nThe kind of matching that should be performed on a feature …\nLegacy range syntax (min-*: value) or so.\nA length.\n&lt;\n&lt;=\nAt most the specified value.\nWe’re parsing a media feature.\nAt least the specified value.\nA single non-negative number or two non-negative numbers …\nThe operator that was specified in this feature.\nA value found or expected in a expression.\nA feature expression contains a reference to the feature, …\nModern range context syntax: …\nA resolution.\nA single value.\nAn arbitrary ident value.\nEvaluate a given range given an optional query value and a …\nReturns the feature flags for our feature.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this query evaluates to true for the given …\nNon-ranged features only need to compare to one value at …\nParse a feature expression of the form:\nParse a feature expression where we’ve already consumed …\nParses the following range syntax:\nThe orientation media / container feature. …\nA helper to evaluate a orientation query given a generic …\nReturns the argument unchanged.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nParse this keyword.\nA TLS cache from rules matched to computed values.\nThe conditions for caching and matching a style in the …\nReturns whether the current style’s reset properties are …\nFinds a node in the properties matched cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWalk the rule tree and return a rule node for using as the …\nInserts a node into the rules cache if possible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether <code>style</code> matches the conditions.\nCreates an empty <code>RuleCache</code>.\nSets the style as depending in the color-scheme property …\nSets the style as depending in the font-size value.\nSets the style as depending in the line-height value.\nSets the style as uncacheable.\nSets the style as depending in the writing-mode value …\nAn object that we use with all the intermediate state …\nCollects all the rules, leaving the result in <code>self.rules</code>.\nCollects the rules for the ::slotted pseudo-element and …\nCollects the rules for the :host pseudo-class.\nPresentational hints.\nThis is a bit of a hack so svg:use matches the rules of …\nReturns the argument unchanged.\nSets up the state necessary to collect rules from a given …\nCalls <code>U::from(self)</code>.\nTrivially construct a new collector.\nCSS animations and script-generated animations.\nAuthor-supplied important rules.\nShadow DOM styles from author styles.\nThe cascade level these rules are relevant at, as per13.\nPresentational hints.\nThe rule tree, the structure servo uses to preserve the …\nSVG SMIL animations.\nAn iterator over a rule node and its ancestors.\nA counter to track how many shadow root rules deep we are. …\nA strong reference to a rule node.\nA style source for the rule node. It is a declaration …\nTransitions\nUser-agent important rules.\nNormal User-Agent rules.\nUser important rules.\nUser normal rules.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe order in the shadow tree hierarchy. This number is …\nThe order in the shadow tree hierarchy, inverted, so that …\nThe number of RuleNodes added to the free list before we …\nA node in the rule tree.\nThe rule tree, the structure servo uses to preserve the …\nA strong reference to a rule node.\nOnly used for the root, stores the number of free rule …\nThe cascade level.\nThe cascade priority.\nThe cascade level + layer order this rule is positioned at.\nThe children of a given rule node. Children remove …\nGiven a list of applicable declarations, insert the rules …\nDrops a node without ever putting it on the free list.\nDump the rule tree to stdout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis can only be called when no other threads is accessing …\nGet a set of properties whose CascadeLevel are higher than …\nReturns true if there is either animation or transition …\nReturns whether this node has any child, only intended for …\nThe importance.\nInsert the given rules, that must be in proper order by …\nInserts the given rules, that must be in proper order by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis can only be called when no other threads is accessing …\nConstruct a new rule tree.\nThis field has two different meanings depending on whether …\nGet the parent rule node of this rule node.\nThe parent rule node. Only the root has no parent.\nMakes the node pretend to be on the free list. This will …\nPushes this node on the tree’s free list. Returns false …\nThe refcount of this node.\nReturns new rule node without rules from declarative …\nReturns new rule nodes without Transitions level rule.\nGet the root rule node.\nThe root node. Only the root has no root pointer, for …\nGet an iterator for this rule node and its ancestors.\nThe actual style source, either coming from a selector in …\nGet the style source corresponding to this rule node. May …\nSteals the free list and drops its contents.\nReplaces a rule in a given level (if present) for another …\nUpgrades this weak node reference, returning a strong one.\nCSS animations and script-generated animations.\nAuthor-supplied important rules.\nShadow DOM styles from author styles.\nThe cascade level these rules are relevant at, as per13.\nWe keep a maximum of 3 bits of order as a limit so that we …\nPresentational hints.\nSVG SMIL animations.\nA counter to track how many shadow root rules deep we are. …\nTransitions\nUser-agent important rules.\nNormal User-Agent rules.\nUser important rules.\nUser normal rules.\nDecrement the level, moving inwards. We should only move …\nA level for the innermost containing tree (the one closest …\nA level for the outermost shadow tree (the shadow tree we …\nA level for the element’s tree.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSelect a lock guard for this level\nReturns the importance relevant for this rule. Pretty …\nConvert this level from “unimportant” to “important…\nThe level, moving inwards. We should only move inwards if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this cascade level represents an animation …\nReturns whether this cascade level represents important …\nReturns the cascade origin of the rule.\nReturns the cascade level for author important …\nReturns the cascade level for author normal declarations …\nConvert this level from “important” to “non-important…\nThe order in the shadow tree hierarchy. This number is …\nThe order in the shadow tree hierarchy, inverted, so that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA style source for the rule node. It is a declaration …\nReturns the argument unchanged.\nCreates a StyleSource from a PropertyDeclarationBlock.\nReturns the declaration block if applicable, otherwise …\nCalls <code>U::from(self)</code>.\nRead the style source guard, and obtain thus read access …\nAn unsafe box, derefs to <code>T</code>.\nCreates a new unsafe box from an existing one.\nReturns a mutable reference to the inner value of this …\nDrops the inner value of this unsafe box.\nReturns the argument unchanged.\nCreates a new unsafe box.\nCreates a new box from a pointer.\nCalls <code>U::from(self)</code>.\nA scoped TLS set, that is alive during the <code>&#39;scope</code> lifetime.\nReturn an immutable reference to the <code>Option&lt;T&gt;</code> that this …\nReturn a mutable reference to the <code>Option&lt;T&gt;</code> that this …\nReturns the index corresponding to the calling thread in …\nEnsure that the current data this thread owns is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new scoped TLS that will last as long as this …\nReturns the slots. Safe because if we have a mut reference …\nWrapper for PrecomputedHashMap that does …\nA simple alias for a hashmap using PrecomputedHasher.\nA simple alias for a hashset using PrecomputedHasher.\nA hasher implementation that doesn’t hash anything, …\nThis is a set of pseudo-classes that are both …\nA vector of relevant attributes, that can be useful for …\nMap element data to selector-providing objects for which …\nA trait to abstract over a given selector map entry.\nA hash from attributes to rules which contain that …\nA hash from a class name to rules which contain that class …\nClears the hashmap retaining storage.\nHashMap::clear\nThe number of entries in this map.\nSearches a compound selector from left to right, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHashMap::get\nAppend to <code>rule_list</code> all Rules in <code>self</code> that match element.\nAdds rules in <code>rules</code> that match <code>element</code> to the …\nA hash from an ID to rules which contain that ID selector.\nInserts an entry into the correct bucket(s).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are any entries in the map.\nHashMap::is_empty\nHashMap::iter\nReturns the number of entries.\nA hash from local name to rules which contain that local …\nLooks up entries by id, class, local name, namespace, and …\nPerforms a normal lookup, and also looks up entries for …\nA hash from namespace to rules which contain that …\nTrivially constructs an empty <code>SelectorMap</code>.\nEmpty map\nAll other rules.\nRules for pseudo-states that are rare but have global …\nRules that have <code>:root</code> selectors.\nGets the selector we should use to index in the selector …\nShrink the capacity of the map if needed.\nShrink the capacity of the map if needed.\nroot &gt; id &gt; class &gt; local name &gt; namespace &gt; …\nHashMap::try_entry\nA convenient alias for the type that represents an …\nValues for the :dir() pseudo class\nEagerly cascaded pseudo-elements are “normal” …\nHorizontal values for the :dir() pseudo class\nLazy pseudo-elements are affected by selector matching, …\n:dir(ltr)\nA per-pseudo map, from a given pseudo to a <code>T</code>.\nPrecomputed pseudo-elements skip the cascade process …\nThis enumeration determines if a pseudo-element is eagerly …\n:dir(rtl)\nServo’s selector parser.\nConvert this Direction into a HorizontalDirection, if …\nWhether we’re parsing selectors in a stylesheet that has …\nClear this enumerated array.\nGets the element state relevant to this :dir() selector.\nWhether we’re parsing selectors for <code>@supports</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an entry in the map.\nGet an entry for <code>pseudo</code>, or create it with calling <code>f</code>.\nWhether we’re parsing selectors in a user-agent …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an iterator for the entries.\nGet a mutable iterator for the entries.\nThe namespace set of the stylesheet.\nParse a direction value.\nParse a selector list with an author origin and without …\nSet an entry value.\nThe origin of the stylesheet we’re parsing.\nThe extra URL data of the stylesheet, which is used to …\nServo’s media-query device and expression representation.\nThe restyle damage is a hint that tells layout which kind …\nServo’s selector parser.\nCommon handling for the specified value CSS url() values.\nPage colors are being forced.\nA device is a structure that represents the current media …\nA trait used to query font metrics in clients of Stylo. …\nPossible values for the forced-colors media query. …\nA list with all the media features that Servo supports.\nPage colors are not being forced.\nPage colors would be forced in content.\nWhether a given animation name may be referenced from …\nReturns the number of app units per device pixel we’re …\nReturns the viewport size of the current device in app …\nLike the above, but records that we’ve used viewport …\nGets the base size given a generic font family.\nGets the base size given a generic font family.\nReturns the computed line-height for the font in a given …\nReturn whether the document is a chrome document.\nReturns the default background color.\nReturns the default foreground color.\nReturn the default computed values for this device.\nThe default computed values for this Device.\nReturns the device pixel ratio.\nThe current device pixel ratio, from CSS pixels to device …\nGet the relevant environment to resolve <code>env()</code> functions.\nThe CssEnvironment object responsible of getting CSS …\n…\nhttps://drafts.csswg.org/mediaqueries-4/#resolution\nhttps://drafts.csswg.org/mediaqueries-4/#scan\nhttps://drafts.csswg.org/mediaqueries-4/#width\nAn implementation of a trait which implements support for …\nReturns whether document colors are enabled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether forced-colors is active for this page.\nReturns true if the given MIME type is supported\nReturn the media type of the current device.\nThe current media type used by de device.\nTrivially construct a new <code>Device</code>.\nParse this keyword.\nQuery the font metrics for the given font and the given …\nQueries font metrics using the <code>FontMetricsProvider</code> …\nGet the quirks mode of the current device.\nThe current quirks mode.\nGet the font size of the root element (for rem)\nThe font size of the root element This is set when …\nGet the line height of the root element (for rlh)\nLine height of the root element, used for rlh units in …\nReturns safe area insets\nGets the size of the scrollbar in CSS pixels.\nSets the body text color for the “inherit color from body…\nSet the font size of the root element (for rem), in …\nSet the line height of the root element (for rlh), in …\nReturns whether font metrics have been queried.\nWhether any styles computed in the document relied on font …\nReturns whether we ever looked up the root font size of …\nWhether any styles computed in the document relied on the …\nReturns whether we ever looked up the root line-height of …\nWhether any styles computed in the document relied on the …\nWhether viewport units were used since the last device …\nWhether any styles computed in the document relied on the …\nThe current viewport size, in CSS pixels.\nRecompute intrinsic inline_sizes (minimum and preferred).\nThe entire flow needs to be reconstructed.\nRecompute actual inline_sizes and block_sizes.\nRecompute actual inline-sizes and block-sizes, only taking …\nRepaint the node itself.\nThe stacking-context-relative position of this node or its …\nRe-resolve generated content.\nRecompute the overflow regions (bounding box of object and …\nIndividual layout actions that may be necessary after …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCompute the <code>StyleDifference</code> (including the appropriate …\nWhether all set bits in a source flags value are also set …\nSupposing the <em>parent</em> of a flow with the given <code>position</code> …\nSupposing a flow has the given <code>position</code> property and this …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns a bitmask that represents a flow that needs to be …\nReturns a bitmask indicating that the frame needs to be …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe type used to store the state argument to the <code>:state</code> …\nThe :state` pseudo-class.\nThe number of eager pseudo-elements. Keep this in sync …\nA set of extra data to carry along with the matching …\nThe type used for storing <code>:lang</code> arguments.\nA non tree-structural pseudo-class. See …\nThe count of all pseudo-elements.\nA pseudo-element, both public and private.\nThe abstract struct we implement the selector parser …\nServo’s version of an element snapshot.\nA map from elements to snapshots for the Servo style …\nselectors::Element::attr_matches\nThe set of stored attributes and its values.\nCovert non-canonical pseudo-element to canonical one, and …\nThe invalidation bits from matching container queries. …\nReturns which kind of cascade type has this pseudo.\nThe set of changed attributes and its values.\nReturns whether the class attribute changed or not.\nWhether the class attribute changed or not.\nGet the document state flag associated with a …\nExecutes the callback once for each attribute that changed.\nA helper to traverse each eagerly cascaded pseudo-element, …\nGets the canonical index of this eagerly-cascaded …\nReturns whether the language is matched, as defined by RFC …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a pseudo-element from an eager index.\nGet a snapshot given an element.\nReturns true if the snapshot has a given CustomState\nReturns true if the snapshot has stored state for custom …\nReturns whether the id attribute changed or not.\nWhether the id attribute changed or not.\nAn index for this pseudo-element to be indexed in an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe invalidation data to invalidate doc-state …\nWhether this pseudo-element is the ::after pseudo.\nWhether this pseudo-element is for an anonymous box.\nWhether this pseudo-element is the ::before pseudo.\nWhether the current pseudo element is ::before or ::after.\nWhether this pseudo-element is the ::-moz-color-swatch …\nWhether this pseudo-element is eagerly-cascaded.\nWhether the current pseudo element is :first-letter\nWhether the current pseudo element is :first-line\nWhether this pseudo-element is lazily-cascaded.\nWhether this pseudo-element is the ::marker pseudo.\nWhether this pseudo-element is precomputed.\nWhether this pseudo-element is the ::selection pseudo.\nWhether this is an unknown ::-webkit- pseudo-element.\nReturns true if the given pseudoclass should trigger style …\nCreate a new empty <code>SnapshotMap</code>.\nCreate an empty element snapshot.\nThe style of the originating element in order to evaluate …\nReturns whether other attributes other than id or class …\nWhether other attributes other than id or class changed or …\nProperty flag that properties must have to apply to this …\nStub, only Gecko needs this\nAn array of <code>None</code>, one per pseudo-element.\nWhether this pseudo-element should actually exist if it has\nWhether this pseudo-element skips flex/grid container …\nThe stored state of the element.\nGets a given state flag for this pseudo-class. This is …\nThe computed value of a CSS <code>url()</code> for image.\nThe computed value of a CSS <code>url()</code>, resolved relative to …\nA CSS url() value for servo.\nThe <code>url()</code> was invalid or it wasn’t specified by the user.\nThe <code>url()</code> was invalid or it wasn’t specified by the user.\nA specified image url() value for servo.\nA specified url() value for servo.\nThe resolved <code>url()</code> relative to the stylesheet URL.\nThe resolved <code>url()</code> relative to the stylesheet URL.\nReturn the resolved url as string, or the empty string if …\nCreates an already specified url value from an already …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this URL looks like a fragment. See …\nReturns true if the URL is definitely invalid. For Servo …\nGets a new url from a string for unit tests.\nThe original URI. This might be optional since we may …\nThe original URI. This might be optional since we may …\nThe original URI. This might be optional since we may …\nTry to parse a URL from a string value that is a valid CSS …\nParses a URL request and records that the corresponding …\nThe resolved value for the url, if valid.\nThe resolved value for the url, if valid.\nThe resolved value for the url, if valid.\nReturns the resolved url if it was valid.\nReturns the resolved url if it was valid.\nA trait to do a deep clone of a given CSS type. Gets a …\nData protect by a shared lock.\nA shared read/write lock that can protect multiple objects.\nProof that a shared lock was obtained for reading (servo).\nProof that a shared lock was obtained for writing (servo).\nGuards for a document\nLike ToCss, but with a lock guard given by the caller, and …\nFor author-origin stylesheets.\nDeep clones this object.\nGet the guard for a given stylesheet origin.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new shared lock (servo).\nCreate a new global shared lock (servo).\nObtain the lock for reading (servo).\nAccess the data for reading.\nSame guard for all origins\nSerialize <code>self</code> in CSS syntax, writing to <code>dest</code>, using the …\nSerialize <code>self</code> in CSS syntax using the given lock guard …\nFor user-agent-origin and user-origin stylesheets\nWrap the given data to make its access protected by this …\nObtain the lock for writing (servo).\nAccess the data for writing.\nOpaque pointer type to compare ComputedValues identities.\nThe results from the revalidation step.\nThe amount of nodes that the style sharing candidate cache …\nThe results from trying to revalidate scopes this element …\nStyle sharing caches are are large allocations, so we …\nAn LRU cache of the last few nodes seen, so that we can …\nInformation regarding a style sharing candidate, that is, …\nAn element we want to test against the style sharing cache.\nSome data we want to avoid recomputing all the time while …\nThe LRU cache, with the type cast away to allow persisting …\nDifferent checks done during the style sharing process in …\nGet or compute the class-list associated with this element.\nGet the classlist of this candidate.\nThe class list of this element.\nClear the style sharing candidate cache.\nThe DOM depth we’re currently at.  This is used as an …\nThe element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to insert an element in the style sharing cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to find an element in the cache with the given …\nBind this structure to the lifetime of E, since that’s …\nTrivially construct a new StyleSharingTarget to test …\nCreate a new style sharing candidate cache.\nGet the parent style identity.\nGet or compute the parent style identity.\nGet the parent style identity.\nThe pointer identity of the parent ComputedValues.\nGet or compute the part-list associated with this element.\nGet the part list of this candidate.\nThe part list of this element.\nGet the pres hints of this candidate.\nGet or compute the list of presentational attributes …\nGet the pres hints of this candidate.\nThe list of presentational attributes of the element.\nThe set of attributes of this element that were relevant …\nComputes the revalidation results if needed, and returns …\nCompute the bit vector of revalidation selector match …\nThe cached result of matching this entry against the …\nA bit for each scope activated.\nA bit for each selector matched. This is sound because we …\nAttempts to share a style with another node.\nAttempts to share a style with another node.\nMove the cached data to a new instance, and return it.\nGets the validation data used to match against this …\nWhether a given element has the same class attribute as a …\nWhether a given element has the same part attribute as a …\nWhether two elements have the same same presentational …\nWhether two elements have the same same style attribute …\nChecks whether we might have rules for either of the two …\nDetermines whether a target and a candidate have …\nWhether a given element and a candidate match the same set …\nWhether a given element and a candidate share a set of …\nA map for filtering by easily-discernable features in a …\nClears the map.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether there’s nothing in the map.\nShrink the capacity of the map if needed.\nString. The comments for the Gecko types explain the need …\nString. The comments for the Gecko types explain the need …\nA “space character” according to:\nA static slice of characters.\nA static slice of <code>str</code>s.\nWhether a character is a HTML whitespace character.\nCharacter is ascii digit\nWhether all the string is HTML whitespace.\nReads an exponent from an iterator over chars, for example …\nRead a decimal fraction.\nRead a set of ascii digits and read them into a number.\nSplit a string on commas.\nSplit a string on HTML whitespace.\nReturns true if a given string has a given prefix with …\nJoin a set of strings with a given delimiter <code>join</code>.\nReturns an ascii lowercase version of a string, only …\nA struct that implements all the adjustment methods.\nAdjusts the style to account for various fixups that don’…\nThe initial value of border-*-width may be changed at …\noutline-style: none causes a computed outline-width of …\nCSS overflow-x and overflow-y require some fixup as well …\nCSS 2.1 section 9.7:\n-moz-center, -moz-left and -moz-right are used for HTML’…\nComputes the used text decoration for Servo.\nhttps://fullscreen.spec.whatwg.org/#new-stacking-layer\nComputes the RELEVANT_LINK_VISITED flag based on the …\nhttps://drafts.csswg.org/css-writing-modes-3/#block-flow:\nApply the blockification rules based on the table in CSS …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrivially constructs a new StyleAdjuster.\nCompute a few common flags for both text and element’s …\nWhether we should skip any item-based display property …\nForce pseudo-element resolution.\nOnly resolve pseudo-styles if possibly applicable.\nThe primary style of an element or an element-backed …\nWhether pseudo-elements should be resolved or not.\nA set of style returned from the resolver machinery.\nA style returned from the resolver machinery.\nA struct that takes care of resolving the style of a given …\nIf there is no transition rule in the ComputedValues, it …\nCascade a set of rules for pseudo element, using the …\nCascade a set of rules, using the default parent for …\nCascade the element and pseudo-element styles with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this element may have starting style rules.\nThe element may have matched rules inside @starting-style. …\nTrivially construct a new StyleResolverForElement.\nPrimary style.\nConvenience accessor for the primary style.\nConvenience mutable accessor for the style.\nPseudo styles.\nResolve just the style of a given element.\nResolve the starting style.\nResolve the style of a given element, and all its eager …\nResolve an element’s styles with the default inheritance …\nWhether the style was reused from another element via the …\nConvenience accessor for the style.\nConvenience accessor for the style.\nThe style itself.\nA struct to flush an author style sheet collection.\nThe set of stylesheets effective for a given Shadow Root.\nThe cascade data is invalid, but not the invalidation data …\nA partial rebuild, of only the cascade data.\nThe validity of the data in a given cascade origin.\nA struct to iterate over the different stylesheets to be …\nThe set of stylesheets effective for a given document.\nA full rebuild, of both cascade data and invalidation data.\nEverything needs to be rebuilt.\nA flusher struct for a given collection, that takes care …\nThe type of rebuild that we need to do for a given …\nA iterator over the stylesheets of a list of entries in …\nAn iterator over the flattened view of the stylesheet …\nEntry for a StylesheetSet.\nThe origin is clean, all the data already there is valid, …\nAppends a given sheet into the collection.\nAppends a new stylesheet to the current set.\nAppends a new stylesheet to the current set.\nThe actual style sheets.\nThe collections of sheets per each origin.\nWhether this sheet has been part of at least one flush.\nWhat the state of the sheet data is.\nThe validity of the data that was already there for a …\nWhether the collection was originally dirty.\nWhether anything has changed since the last time this was …\nWhether anything in the collection has changed. Note that …\nIterates over all sheets and values that we have to …\nThe actual list of stylesheets.\nFlush the current set, unmarking it as dirty, and returns a\nFlush the stylesheets for this author set.\nReturns a flusher for <code>origin</code>.\nFlush stylesheets, but without running any of the …\nMark the stylesheets for the specified origin as dirty, …\nMark the sheet set dirty, as appropriate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>index</code>th stylesheet in the set if present.\nReturns the <code>index</code>th stylesheet in the set for the given …\nReturns the <code>index</code>th stylesheet in the collection of author …\nReturns whether any DOM invalidations were processed as a …\nWhether any sheet invalidation matched.\nReturns whether the given set has changed from the last …\nInsert a given stylesheet before another stylesheet in the …\nInsert a given stylesheet before another stylesheet in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe invalidations for stylesheets added or removed from …\nThe set of invalidations scheduled for this collection.\nWhether the collection is empty.\nReturns an iterator over the current list of stylesheets.\nReturn an iterator over the flattened view of all the …\nIterate over the list of stylesheets.\nReturns the number of stylesheets in the set.\nReturns the number of stylesheets in the set.\nReturns the number of author stylesheets.\nCreate a new empty DocumentStylesheetSet.\nCreate a new empty AuthorStylesheetSet.\nReturns the list of stylesheets for <code>origin</code>.\nRemove a given stylesheet from the set.\nRemove a given stylesheet from the set.\nNotify the set that a rule from a given stylesheet has …\nNotify the set that a rule from a given stylesheet has …\nThe sheet.\nReturns the count of stylesheets for a given origin.\nThis macro defines methods common to DocumentStylesheetSet …\nReturns an iterator over the remaining list of sheets to …\nThe actual flusher for the collection.\nWhether the stylesheet invalidation data should be rebuilt.\nA filter that processes all the rules in a rule list.\nWhether @import rules are allowed.\nAnonymous CORS request.\nWe’re parsing the main body of the stylesheet.\n[<code>@bottom-center</code>][bottom-center] margin rule\n[<code>@bottom-left</code>][bottom-left] margin rule\n[<code>@bottom-left-corner</code>][bottom-left-corner] margin rule\n[<code>@bottom-right</code>][bottom-right] margin rule\n[<code>@bottom-right-corner</code>][bottom-right-corner] margin rule\nThe CORS mode used for a CSS load.\nA CSS rule.\nhttps://drafts.csswg.org/cssom-1/#dom-cssrule-type\nSet of rule types.\nA list of CSS rules.\nA trait to implement helpers for <code>Arc&lt;Locked&lt;CssRules&gt;&gt;</code>.\nA @-moz-document rule\nA simple wrapper over an <code>Arc&lt;Stylesheet&gt;</code>, with pointer …\nWe’re parsing early <code>@layer</code> statement rules.\nA struct that represents the condition that a rule applies …\nAn iterator over all the effective rules of a stylesheet.\nRules where !important declarations are forbidden.\nWe’re parsing <code>@import</code> and early <code>@layer</code> statement rules.\nThe information we need particularly to do CSSOM …\n[<code>@left-bottom</code>][left-bottom] margin rule\n[<code>@left-middle</code>][left-middle] margin rule\n[<code>@left-top</code>][left-top] margin rule\nA <code>@margin</code> rule.\n[<code>@margin</code>][margin] rule names.\nAn <code>@media</code> rule.\nA <code>@namespace</code> rule.\nA set of namespaces applying to a given stylesheet.\nWe’re parsing <code>@namespace</code> rules.\nA nested declarations rule.\nRulesIterator.\n@import rules will not be parsed.\nAllow everything but conditional rules.\nPerform no sanitization.\nNo CORS mode, so cross-origin loads can be done.\nBit-flags for pseudo-class. This should only be used for …\nA <code>@page</code> rule.\nType of a single [<code>@page</code>][page selector]\nA list of [<code>@page</code>][page selectors]\n[<code>@right-bottom</code>][right-bottom] margin rule\n[<code>@right-middle</code>][right-middle] margin rule\n[<code>@right-top</code>][right-top] margin rule\nAn iterator over a list of rules.\nA struct to hold the data relevant to style sheet …\nThe kind of sanitization to use when parsing a stylesheet.\nAllow only @font-face, style rules, and @namespace.\nWe haven’t started parsing rules.\nA <code>@starting-style</code> rule.\nThe current state of the parser.\nA style rule, with selectors and declarations.\nThe structure servo uses to represent a stylesheet.\nThe contents of a given stylesheet. This effectively maps …\nA trait to represent a given stylesheet in a document.\nThe stylesheet loader is the abstraction used to trigger …\n[<code>@top-center</code>][top-center] margin rule\n[<code>@top-left</code>][top-left] margin rule\n[<code>@top-left-corner</code>][top-left-corner] margin rule\nThe parser for the top-level rules in a stylesheet.\n[<code>@top-right</code>][top-right] margin rule\n[<code>@top-right-corner</code>][top-right-corner] margin rule\nExtra data that the backend may need to resolve url values.\nThis structure holds the user-agent and user stylesheets.\n@import rules will be parsed.\nWe don’t want to allow construction outside of this …\nWhether @import rules will be allowed.\nGet the interior Url as a string.\nReturns a bit that identifies this rule type.\nReturns all the rules specified in the set.\nThe declaration block this margin rule contains.\nThe declarations.\nThe declaration block this page rule contains.\nThe declaration block with the properties it contains.\nTrue if this URL scheme is chrome.\nThe parsed condition\nA <code>@container</code> rule.\nThe containing rule types of our ancestors.\nReturns whether the rule is in the current set.\nReturns a reference to the contents of the stylesheet.\nThe contents of this stylesheet.\nThe top-level parser context.\nParser state for declaration blocks in either nested rules …\nDeep clones this CssRule.\nWhether this stylesheet should be disabled.\n@document rules initially in CSS Conditional Rules Module …\nWhether we have tried to parse was invalid due to being in …\nGet whether this stylesheet is enabled.\nState we keep around only for error reporting purposes. …\nThe first declaration block, only relevant when …\nThe <code>@font-feature-values</code> at-rule.\nThe <code>@font-palette-values</code> at-rule.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a raw CssRuleTypes bitfield.\nReturn the implicit scope root for this stylesheet, if one …\nThe <code>@import</code> at-rule.\nThe index we’re about to get inserted at.\nInserts a rule type into the set.\nhttps://drafts.csswg.org/cssom/#insert-a-css-rule\nThe info we need insert a rule in a list.\nReturns whether any of the types intersect.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the rule set is empty.\nKeyframes: …\nA <code>@layer</code> rule.\nThe stylesheet loader is the abstraction used to trigger …\nA reference to a stylesheet loader if applicable, for …\nA <code>@margin</code> rule.\nGet the media associated with this stylesheet.\nList of media associated with the Stylesheet.\nThe list of media queries used by this media rule.\nAn <code>@media</code> rule.\nPage name\nThe <code>@namespace</code> at-rule.\nThe namespaces that apply to this stylesheet.\nA nested declarations rule. …\nCSS cascade origins.\nThe origin of this stylesheet.\nA <code>@page</code> rule.\nParse a CSS rule.\nRule type determining if and how we parse relative …\nA <code>@position-try</code> rule for Anchor Positioning.\nThe namespace prefix, and <code>None</code> if it’s the default …\nWhether we should process the nested rules in a given …\nWhether we should process the nested rules in a given …\nWhether we should process the nested rules in a given …\nWhether we should process the nested rules in a given …\nPseudo-classes for <code>@page</code>\nThe quirks mode of this stylesheet.\nThe quirks mode stylesheet.\nRequest a stylesheet after parsing a given <code>@import</code> rule, …\nA list of CSS rules.\nThe rule list we’re about to insert into.\nParsing of the stylesheet contents.\nReturns the CSSOM rule type of this rule.\nType of this margin rule.\nThe rules we’ve parsed so far.\nChild rules\nThe nested rules to this media rule.\nNested rules.\nThe nested rules to this starting-style rule.\nThe nested rules to this style rule. Only non-<code>None</code> when …\nList of rules in the order they were found (important for …\nAn iterator over a list of rules.\nA <code>@scope</code> rule.\nSelectors of the page-rule\nThe list of selectors in this rule.\nA reference to the lock we need to use to create rules.\nThe lock used for user-agent stylesheets.\nThe lock used for objects inside this stylesheet\nThe line and column of the rule’s source code.\nThe source position this rule was found at.\nThe source position where this media rule was found.\nThe source location this rule was found at.\nThe source position this rule was found at.\nThe source position this rule was found at.\nThe source position where this starting-style rule was …\nThe location in the sheet where it was found.\nThis stylesheet’s source map URL.\nThis stylesheet’s source URL.\nbefore-change style: the <code>@starting-style</code> rules. …\nThe current state of the parser.\nSerialize a page or style rule, starting with the opening …\nA style rule.\n@supports rules\nThe actual namespace url.\nThe url data this stylesheet should use.\nThe user or user agent stylesheets.\nWhether to keep declarations into first_declaration_block, …\nhttps://drafts.csswg.org/css-contain-3/#container-features\nA container condition and filter, combined.\nInformation needed to evaluate an individual container …\nThe result of a successful container query lookup.\nA container rule.\nUnevaluated lazy container size query.\nResult of a container size query, signifying the …\nCached evaluated result.\nQuery prior to evaluation.\nThe container query and name.\nReturns the query name filter.\nThe relevant container.\nPerforms container lookup for a given element.\nCreate a new instance of the container size query for …\nCreate a new instance, but with optional element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the result of the container size query, doing the …\nGet the block-size of the query container.\nGet the height of the query container.\nGet the inline-size of the query container.\nGet the width of the query container.\nThe sizing / writing-mode information of the container.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFind the query container size for a given element. Meant …\nTries to match a container query condition for a given …\nCreate a query that evaluates to empty, for cases where …\nParse a container condition.\nReturns the query condition.\nThe nested rules inside the block.\nThe source position where this rule was found.\nThe style of the element.\nA <code>@document</code> rule’s condition.\nA matching function for a <code>@document</code> rule’s condition.\nA @-moz-document rule\nDomain matching function. It evaluates to true whenever …\nMatching function for a media document.\nThe kind of media document that the rule will match.\nMatching function for a plain-text document.\nRegular expression matching function. It evaluates to true …\nMatching function for a document that can be observed by …\nExact URL matching function. It evaluates to true whenever …\nURL prefix matching function. It evaluates to true …\nThe parsed condition\nDeep clones this DocumentRule.\nEvaluate a URL matching function.\nEvaluate a document condition.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse this keyword.\nParse a URL matching function for a<code>@document</code> rule’s …\nParse a document condition.\nChild rules\nThe line and column of the rule’s source code.\nKeeps the information about block type like @swash, …\nA @font-feature-values block declaration. It is …\n@font-feature-values inside block parser. Parses a list of …\nThe <code>@font-feature-values</code> at-rule.\nParser for <code>FontFeatureValuesRule</code>. Parses all blocks  {  }  …\nA @font-feature-values block declaration value that keeps …\nA @font-feature-values block declaration value that keeps …\nA @font-feature-values block declaration value that keeps …\nA @annotation block. Specifies a feature name that will …\nA @character-variant block. Specifies a feature name that …\nFont family list for @font-feature-values rule. Family …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns length of all at-rules.\nAn <code>&lt;ident&gt;</code> for declaration name.\nCreates an empty FontFeatureValuesRule with given location …\nA @ornaments block. Specifies a feature name that will …\nParses a <code>FontFeatureValuesRule</code>.\nParses a list of <code>FamilyName</code>s.\nThe line and column of the rule’s source code.\nA @styleset block. Specifies a feature name that will work …\nA @stylistic block. Specifies a feature name that will …\nA @swash blocksck. Specifies a feature name that will work …\nUpdates with new value if same <code>ident</code> exists, otherwise …\nAn <code>&lt;integer&gt;+</code> for declaration value.\nPrints inside of <code>@font-feature-values</code> block.\nParser for declarations in <code>FontPaletteValuesRule</code>.\nThe <code>@font-palette-values</code> at-rule.\nThe base palette.\nFont family list for @font-palette-values rule. Family …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPalette name.\nCreates an empty FontPaletteValuesRule with given location …\nThe list of override colors.\nParses a <code>FontPaletteValuesRule</code>.\nThe line and column of the rule’s source code.\nPrints inside of <code>@font-palette-values</code> block.\nAnonymous layer (<code>layer</code>)\nThe layer specified in an import rule (can be none, …\nThe <code>@import</code> at-rule.\nA sheet that is held from an import rule.\nThe supports condition in an import rule.\nNamed layer (<code>layer(name)</code>)\nNo layer specified\nAn @import created with a false , so will never be fetched.\nA bonafide stylesheet.\nReturns a reference to the stylesheet in this ImportSheet, …\nThe supports condition.\nIf the import is enabled, from the result of the import …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>layer()</code> function name.\nReturns the media list for this import rule.\nCreates a new ImportSheet from a stylesheet.\nCreates a refused ImportSheet for a load that will not …\nParses the layer() / layer / supports() part of the import …\nReturns the rules for this import rule.\nThe line and column of the rule’s source code.\nThe stylesheet is always present. However, in the case of …\nA  for the rule.\nThe <code>&lt;url&gt;</code> this <code>@import</code> rule is loading.\nA synthetic step computed from the current computed values …\nA step formed by a declaration block specified by the CSS.\nA keyframe.\nParses a keyframes list, like: 0%, 50% { width: 50%; }\nA number from 0 to 1, indicating the percentage of the …\nA keyframes selector is a list of percentages or from/to …\nThis structure represents a list of animation steps …\nA <code>@keyframes</code> rule.\nA single step from a keyframe animation.\nA keyframes step value. This can be a synthetised …\nThe declaration block that was declared inside this …\nWhether an animation-composition declaration exists in the …\nWhether an animation-timing-function declaration exists in …\nDeep clones this Keyframe.\nReturns the index of the last keyframe that matches the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a keyframes animation from a given list of …\nGet all the animated properties in a keyframes animation.\nReturn CompositeOperation if this KeyframesSteps has ‘…\nReturn specified TransitionTimingFunction if this …\nReturn specified PropertyDeclaration.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe keyframes specified for this CSS rule.\nThe name of the current animation.\nTrivially constructs a new <code>KeyframePercentage</code>.\nA dummy public function so we can write a unit test for …\nParse a keyframe selector from CSS input.\nParse a CSS keyframe.\nParses a keyframe list from CSS input.\nReturn the list of percentages this selector contains.\nThe properties that change in this animation.\nThe selector this keyframe was specified from.\nThe line and column of the rule’s source code.\nThe line and column of the rule’s source code.\nThe percentage of the animation duration when this step …\nThe difference steps of the animation.\nDeclarations that will determine the final style during …\nVendor prefix type the @keyframes has.\nVendor prefix type the @keyframes has.\nThe declaration block per se.\nA block <code>@layer &lt;name&gt;? { ... }</code> …\nA <code>&lt;layer-name&gt;</code>: …\nThe order of a given layer. We use 16 bits so that we can …\nA statement <code>@layer &lt;name&gt;, &lt;name&gt;, &lt;name&gt;;</code>\nThe first cascade layer order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrement the cascade layer order.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this layer is for the style attribute, …\nReturns the names of the layers. That is, for a layer like …\nThe layer name, or <code>None</code> if anonymous.\nThe list of layers to sort.\nReturns a synthesized name for an anonymous layer.\nReturns an empty layer name (which isn’t a valid final …\nThe order of the root layer.\nThe nested rules.\nThe source position where this rule was found.\nThe source position where this rule was found.\nThe order of the style attribute layer.\nThe stylesheet loader is the abstraction used to trigger …\nRequest a stylesheet after parsing a given <code>@import</code> rule, …\n[<code>@bottom-center</code>][bottom-center] margin rule\n[<code>@bottom-left</code>][bottom-left] margin rule\n[<code>@bottom-left-corner</code>][bottom-left-corner] margin rule\n[<code>@bottom-right</code>][bottom-right] margin rule\n[<code>@bottom-right-corner</code>][bottom-right-corner] margin rule\n[<code>@left-bottom</code>][left-bottom] margin rule\n[<code>@left-middle</code>][left-middle] margin rule\n[<code>@left-top</code>][left-top] margin rule\nAll [<code>@margin</code>][margin] rule names, with a preceding ‘@’.\nA <code>@margin</code> rule.\n[<code>@margin</code>][margin] rule names.\n[<code>@right-bottom</code>][right-bottom] margin rule\n[<code>@right-middle</code>][right-middle] margin rule\n[<code>@right-top</code>][right-top] margin rule\n[<code>@top-center</code>][top-center] margin rule\n[<code>@top-left</code>][top-left] margin rule\n[<code>@top-left-corner</code>][top-left-corner] margin rule\n[<code>@top-right</code>][top-right] margin rule\n[<code>@top-right-corner</code>][top-right-corner] margin rule\nThe declaration block this margin rule contains.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMatches the rule type for this name. This does not expect a\nGets the name for this margin rule.\nType of this margin rule.\nThe source position this rule was found at.\nSerialization of a margin-rule is not specced, this is …\nAn <code>@media</code> rule.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe list of media queries used by this media rule.\nThe nested rules to this media rule.\nThe source position where this media rule was found.\nA <code>@namespace</code> rule.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe namespace prefix, and <code>None</code> if it’s the default …\nThe source location this rule was found at.\nThe actual namespace url.\nA nested declarations rule.\nThe declarations.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMeasure heap usage.\nThe source position this rule was found at.\nhttps://drafts.csswg.org/css-cascade/#cascade-origin-author\nhttps://drafts.csswg.org/css-cascade/#cascade-origin-author\nhttps://drafts.csswg.org/css-cascade/#cascade-origin-user\n…\nEach style rule has an origin, which determines where it …\nA set of origins. This is equivalent to Gecko’s …\nIterates over the origins present in an <code>OriginSet</code>, in …\nAn object that stores a <code>T</code> for each origin of the CSS …\nIterator over <code>PerOrigin&lt;T&gt;</code>, from highest level (author) to …\nLike <code>PerOriginIter&lt;T&gt;</code>, but iterates over mutable …\nhttps://drafts.csswg.org/css-cascade/#cascade-origin-user\n…\nGet a flags value with all known bits set.\nData for <code>Origin::Author</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns a reference to the per-origin data for the …\nReturns a mutable reference to the per-origin data for the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns an iterator from this origin, towards all the less …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nReturns an origin that goes in order for <code>index</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nIterates over mutable references to per-origin extra style …\nYield a set of contained named flags values.\nReturns an iterator over the origins present in this …\nIterates over references to per-origin extra style data, …\nIterates over references to per-origin extra style data, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nData for <code>Origin::User</code>.\nData for <code>Origin::UserAgent</code>.\nFlag for PagePseudoClass::Blank\n[<code>:blank</code>][blank] pseudo-class\nFlag for PagePseudoClass::First\n[<code>:first</code>][first] pseudo-class\nFlag for PagePseudoClass::Left\n<code>:left</code> pseudo-class\nNo pseudo-classes\n[<code>@page</code>][page] rule pseudo-classes.\nBit-flags for pseudo-class. This should only be used for …\nA <code>@page</code> rule.\nType of a single [<code>@page</code>][page selector]\nA list of [<code>@page</code>][page selectors]\nFlag for PagePseudoClass::Right\n<code>:right</code> pseudo-class\nGet a flags value with all known bits set.\nGet the underlying PageSelector data as a slice\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe declaration block this page rule contains.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nChecks if the given pseudo class applies to this set of …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nChecks that all pseudo classes in this selector are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nChecks if the ident matches a page-name’s ident.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns true iff there are any page selectors\nYield a set of contained flags values.\nYield a set of contained named flags values.\nImplements specificity calculation for a page selector …\nComputes the specificity of this page rule when matched …\nChecks that this selector matches the ident and all pseudo …\nPage name\nCreates a pseudo-class flags object with a single …\nCreates a new PageSelectors from a Vec, as from …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPseudo-classes for <code>@page</code>\nThe intersection of a source flags value with the …\nNested rules.\nComputes the specificity given the g, h, and f values as …\nSelectors of the page-rule\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe source position this rule was found at.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSerialization of PageRule is not specced, adapted from …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA position-try rule.\nThe declaration block this position-try rule contains.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nName of this position-try rule.\nThe source position this rule was found at.\nA list of CSS rules.\nA trait to implement helpers for <code>Arc&lt;Locked&lt;CssRules&gt;&gt;</code>.\nReturns the argument unchanged.\nhttps://drafts.csswg.org/cssom/#insert-a-css-rule\nCalls <code>U::from(self)</code>.\nWhether this CSS rules is empty.\nTrivially construct a new set of CSS rules.\nReturns whether all the rules in this list are namespace …\nhttps://drafts.csswg.org/cssom/#remove-a-css-rule\nSerializes this CSSRules to CSS text as a block of rules.\nAs above, but without the opening curly bracket. That’s …\nA rule prelude for at-rule with block.\nWe’re parsing the main body of the stylesheet.\nA @container rule prelude.\nA @counter-style rule prelude, with its counter style name.\nA @document rule, with its conditional.\nWe’re parsing early <code>@layer</code> statement rules.\nA @font-face rule prelude.\nA @font-feature-values rule prelude, with its FamilyName …\nA @font-palette-values rule prelude, with its identifier.\nA @import rule prelude.\nWe’re parsing <code>@import</code> and early <code>@layer</code> statement rules.\nThe information we need particularly to do CSSOM …\nA @keyframes rule, with its animation name and vendor …\nA @layer rule prelude.\nA @margin rule prelude.\nA @media rule prelude, with its media queries.\n-moz prefix.\nA @namespace rule prelude.\nWe’re parsing <code>@namespace</code> rules.\nA @page rule prelude, with its page name if it exists.\nA @position-try prelude for Anchor Positioning.\nA @property rule prelude.\nA @scope rule prelude.\nWe haven’t started parsing rules.\nA @starting-style prelude.\nThe current state of the parser.\nAn @supports rule, with its conditional\nThe parser for the top-level rules in a stylesheet.\nVendor prefix.\n-webkit prefix.\nWhether @import rules will be allowed.\nIf we’re in a nested state, this returns whether …\nChecks whether we can parse a rule that would transition …\nThe containing rule types of our ancestors.\nThe top-level parser context.\nParser state for declaration blocks in either nested rules …\nWhether we have tried to parse was invalid due to being in …\nState we keep around only for error reporting purposes. …\nThe first declaration block, only relevant when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe index we’re about to get inserted at.\nThe info we need insert a rule in a list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA reference to a stylesheet loader if applicable, for …\nReturns the max rule state allowable for insertion at a …\nIf nesting is disabled, we can’t get there for a …\nRule type determining if and how we parse relative …\nThe rule list we’re about to insert into.\nThe rules we’ve parsed so far.\nA reference to the lock we need to use to create rules.\nReturns the current state of the parser.\nThe current state of the parser.\nWhether to keep declarations into first_declaration_block, …\nA filter that processes all the rules in a rule list.\nA struct that represents the condition that a rule applies …\nAn iterator over all the effective rules of a stylesheet.\nRulesIterator.\nAn iterator over a list of rules.\nReturns the children of <code>rule</code>, and whether <code>rule</code> is …\nReturns an iterator over the effective children of a rule, …\nReturns an iterator over the effective children of a rule, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether a given rule is effective.\nCreates a new <code>RulesIterator</code> to iterate over <code>rules</code>.\nWhether we should process the nested rules in a given …\nWhether we should process the nested rules in a given …\nWhether we should process the nested rules in a given …\nWhether we should process the nested rules in a given …\nSkips all the remaining children of the last nested rule …\nThe implicit scope root is in a constructed stylesheet - …\nTarget matches only the specified element.\nTypes of implicit scope root.\nThis implicit scope root is in the light tree.\nThis implicit scope root is in the shadow tree.\nBounds of the scope.\nA scope root candidate.\nA scoped rule.\nA map containing simple selectors in subjects of scope …\nTarget of this scope.\nTarget matches an element matching the specified selector …\nThis implicit scope root is the shadow host of the …\nAdd the <code>&lt;scope-start&gt;</code> of a scope.\nBounds at which this rule applies.\nCheck if the given element is the scope.\nClear the map.\nCollect potential scope roots for a given element and its …\nCould a given element possibly be a scope root?\nReturn the scope root element, given the element to be …\nGiven the scope-end selector, check if the element is …\nEnd of the scope.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if this matches the shadow host.\nParse a container condition.\nAncestor hop from the element under consideration to this …\nThis candidate’s scope root.\nThe nested rules inside the block.\nDetermine if this selector list, when used as a scope …\nShrink the map as much as possible.\nThe source position where this rule was found.\nStart of the scope.\nA <code>@starting-style</code> rule.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe nested rules to this starting-style rule.\nThe source position where this starting-style rule was …\nA style rule, with selectors and declarations.\nThe declaration block with the properties it contains.\nDeep clones this StyleRule.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe nested rules to this style rule. Only non-<code>None</code> when …\nThe list of selectors in this rule.\nThe location in the sheet where it was found.\nhttps://drafts.csswg.org/cssom/#serialize-a-css-rule …\nWhether @import rules are allowed.\nA simple wrapper over an <code>Arc&lt;Stylesheet&gt;</code>, with pointer …\nA set of namespaces applying to a given stylesheet.\n@import rules will not be parsed.\nAllow everything but conditional rules.\nPerform no sanitization.\nA struct to hold the data relevant to style sheet …\nThe kind of sanitization to use when parsing a stylesheet.\nAllow only @font-face, style rules, and @namespace.\nThe structure servo uses to represent a stylesheet.\nThe contents of a given stylesheet. This effectively maps …\nA trait to represent a given stylesheet in a document.\nThis structure holds the user-agent and user stylesheets.\n@import rules will be parsed.\nWe don’t want to allow construction outside of this …\nReturns a reference to the contents of the stylesheet.\nThe contents of this stylesheet.\nReturns whether the stylesheet has been explicitly …\nWhether this stylesheet should be disabled.\nReturn an iterator over the effective rules within the …\nReturn an iterator over the effective rules within the …\nGet whether this stylesheet is enabled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a stylesheet from a set of bytes, potentially …\nCreates a new StylesheetContents with the specified …\nSame as above, but ensuring that the rules are static.\nParse a given CSS string, with a given url-data, origin, …\nCreates an empty stylesheet and parses it with a given …\nReturn the implicit scope root for this stylesheet, if one …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the style-sheet applies for the current …\nReturns whether the style-sheet applies for the current …\nReturn an iterator using the condition <code>C</code>.\nReturn an iterator using the condition <code>C</code>.\nGet the media associated with this stylesheet.\nList of media associated with the Stylesheet.\nThe namespaces that apply to this stylesheet.\nCreate a new input for sanitization.\nThe origin of this stylesheet.\nThe quirks mode of this stylesheet.\nThe quirks mode stylesheet.\nReturns a reference to the list of rules in this …\nReturns a reference to the list of rules in this …\nReturns a reference to the list of rules.\nList of rules in the order they were found (important for …\nRecords that the stylesheet has been explicitly disabled …\nThe lock used for user-agent stylesheets.\nThe lock used for objects inside this stylesheet\nThis stylesheet’s source map URL.\nThis stylesheet’s source URL.\nTake the sanitized output.\nUpdates an empty stylesheet with a set of bytes that …\nUpdates an empty stylesheet from a given string of text.\nThe url data this stylesheet should use.\nThe user or user agent stylesheets.\n<code>(condition) and (condition) and (condition) ..</code>\nA possibly-invalid property declaration\n<code>property-ident: value</code> (value can be any tokens)\n<code>font-format(&lt;font-format&gt;)</code>\n<code>font-tech(&lt;font-tech&gt;)</code>\n<code>(any tokens)</code> or <code>func(any tokens)</code>\n<code>not (condition)</code>\n<code>(condition) or (condition) or (condition) ..</code>\n<code>(condition)</code>\nA possibly-invalid CSS selector.\nA <code>selector()</code> function.\nAn @supports condition\nAn <code>@supports</code> rule.\nThe parsed condition\nhttps://drafts.csswg.org/css-syntax-3/#typedef-any-value\nThe result of evaluating the condition\nEvaluate a supports condition\nTries to evaluate a <code>selector()</code> function.\nDetermine if a declaration parses\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse a condition\nParse a declaration\nsupports_condition | declaration …\nParses an <code>@import</code> condition as per …\nParses a functional supports condition.\n…\nChild rules\nThe line and column of the rule’s source code.\nInclude rules for style sheets at all cascade levels.  …\nWhether author styles are enabled.\nData resulting from performing the CSS cascade that is …\nA key in the cascade data cache.\nThe id of a given container condition, a …\nA struct containing state from ancestor rules like @layer …\nOnly include rules from UA and user level sheets.  Used to …\nAll the computed information for all the stylesheets that …\nAn iterator over the cascade data of a given document.\nThe empty UA cascade data for un-filled stylists.\nThis struct holds data which users of Stylist may want to …\nAn iterator over the different ExtraStyleData.\nA set of rules for element and pseudo-elements.\nThe id of a given layer, a sequentially-increasing …\nA map that is sorted in layer order.\nA vector that is sorted in layer order.\nNested declarations have effectively two behaviors:\nWrapper to allow better tracking of memory usage by page …\nStores page rules indexed by page names.\nSelectorMapEntry implementation for use in our …\nA rule, that wraps a style rule, but represents a single …\nWhat cascade levels to include when styling elements.\nThe id of a given scope condition, a …\n<code>:scope</code> selector, depending on the use case, can match a …\nThis structure holds all the selectors and device …\nImplicit scope root, which may or may not be cached (i.e. …\nA selector visitor implementation that collects all the …\nThe type of the stylesheets that the stylist contains.\nA wrapper over a DocumentStylesheetSet that can be <code>Sync</code>, …\nA cache of computed user-agent data, to be shared across …\nA map with all the animations at this <code>CascadeData</code>’s …\nReturns whether for any of the applicable style rule data …\nWhether there’s any featureless rule that could match in …\nWhether there’s any ::part rule that could match in this …\nWhether there’s any ::slotted rule that could match in …\nAppends a new stylesheet to the current set.\nThe filter with the local names of attributes there are …\nThe attribute local names that appear in attribute …\nA cache of CascadeDatas for AuthorStylesheetSets (i.e., …\nReturns whether author styles are enabled or not.\nWhether author styles are enabled.\nBorrows the cascade data for a given origin.\nReturns the document cascade data.\nSelector maps for all of the style sheets in the stylist, …\nComputes a style using the given CascadeInputs.  This can …\nClears the cascade data, but not the invalidation data.\nCollects all the applicable media query results into …\nComputes styles for a given declaration with parent_style.\nComputes a pseudo-element style lazily using the given …\nThe current @container rule id.\nThe list of container conditions, indexed by their id.\nReturns the custom properties map.\nA map with all the layer-ordered registrations from style …\nReturns the script-registered custom property registry.\nReturns the script-registered custom property registry, as …\nAccessor for a shared reference to the device.\nDevice that the stylist is currently evaluating against.\nAccessor for a mutable reference to the device.\nAll the document states selectors in the page reference.\nThe document state bits that are relied on by selectors.  …\nEffective media query results cached from the last rebuild.\nRules from stylesheets at this <code>CascadeData</code>’s origin.\nRules from stylesheets at this <code>CascadeData</code>’s origin.\nRules from stylesheets at this <code>CascadeData</code>’s origin.\nExtra data, like different kinds of rules, etc.\nReturns the featureless pseudo rule map for a given …\nThe <code>:host</code> pseudo rules that are the rightmost selector …\nFlush the list of stylesheets if they changed, ensuring …\nExecute callback for all applicable style rule data.\nMarks a given stylesheet origin as dirty, due to, for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an entry on the LayerOrderedMap by name.\nReturns the registered <code>@keyframes</code> animation for the …\nReturns custom properties with their registered initial …\nReturns flags set from computing the registered custom …\nReturns the custom property registration for this property…\nReturns whether the given DocumentState bit is relied upon …\nReturns whether the given Custom State is relied upon by a …\nReturns whether the given ElementState bit is relied upon …\nReturns whether the given ElementState bit is relied upon …\nThe ancestor hashes associated with the selector.\nFlags for which selector list-containing components the …\nInitial values for registered custom properties.\nFlags set from computing registered custom property …\nInsert a given stylesheet before another stylesheet in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the invalidation map.\nThe invalidation map for these rules.\nTrue if this rule is inside @starting-style.\nIterate over the extra data in origin order.\nIterate over the extra data in reverse origin order.\nIterate through all the cascade datas from the document.\nLayer ID for sorting page rules after matching.\nA map from cascade layer name to layer order.\nThe current layer id of this style rule.\nThe list of cascade layers, indexed by their layer id.\nComputes a pseudo-element style lazily during layout.\nComputes the cascade inputs for a lazily-cascaded …\nThe filter with all the id’s getting referenced from …\nThe ids that appear in the rightmost complex selector of …\nComputes the match results of a given element against the …\nGiven an id, returns whether there might be any rules for …\nReturns whether all the media-feature affected values …\nReturns whether, given a media feature change, any …\nReturns whether the given attribute might appear in an …\nReturns whether the given attribute might appear in an …\nReturns whether the given class might appear in a class …\nReturns whether the given ID might appear in an ID …\nWhether the selector needs revalidation for the style …\nA function to be able to test the revalidation stuff.\nConstruct a new <code>Stylist</code>, using given <code>Device</code> and <code>QuirksMode</code>.\nCreates an empty <code>CascadeData</code>.\nCreates a new Rule.\nA special id that represents no container rule.\nA special id that represents no scope rule.\nReturns the normal rule map for a given pseudo-element.\nThe data coming from normal style rules that apply to …\nThe filter with the local names of attributes there are …\nThe attributes that appear in the selector list of …\nThe filter with the classes getting referenced from the …\nThe classes that appear in the selector list of :nth-child(…\nThe filter with the local names of custom states in …\nThe custom states that appear in the selector list of …\nThe filter with the IDs getting referenced from the …\nThe IDs that appear in the selector list of :nth-child(… …\nAll the state selectors in the page reference within the …\nThe element state bits that are relied on by selectors …\nReturns the number of declarations.\nThe total number of declarations.\nReturns the number of entries in invalidation maps.\nReturns the number of times the stylist has been rebuilt.\nThe total number of times the stylist has been rebuilt.\nReturns the number of revalidation_selectors.\nReturns the number of selectors.\nThe total number of selectors.\nReturns the parts rule map for a given pseudo-element.\nThe data coming from ::part() pseudo-element rules.\nWhether we’ve past the rightmost compound selector, not …\nApplicable declarations for a given non-eagerly cascaded …\nComputes the style for a given “precomputed” …\nComputes the style for a given “precomputed” …\nRules from stylesheets at this <code>CascadeData</code>’s origin that …\nRules from stylesheets at this <code>CascadeData</code>’s origin that …\nRules from stylesheets at this <code>CascadeData</code>’s origin that …\nReturns the applicable CSS declarations for the given …\nReturns the Quirks Mode of the document.\nIf true, the quirks-mode stylesheet is applied.\nRebuilds the cascade data for the new stylesheet …\nRebuild the cascade data for the given document …\nRebuild the cascade data from a given SheetCollection, …\nRebuilds (if needed) the CascadeData given a sheet …\nRebuild custom properties with their registered initial …\nReturns the relative selector invalidation map.\nThe relative selector equivalent of the invalidation map.\nRemove a given stylesheet to the current set.\nDoes what the name says, to prevent author_data_cache to …\nComputes currently active scopes for the given element for …\nThe id of the root layer.\nPage rule\nNotify of a change of a given rule.\nReturns the rule node for a given precomputed …\nAccessor for a shared reference to the rule tree.\nThe rule tree, that stores the results of selector …\nPage rules, indexed by page name. An empty atom indicates …\nA monotonically increasing counter to represent the order …\nThe current @scope rule id.\nThe list of scope conditions, indexed by their id.\nMap of unique selectors on scope start selectors’ …\nThe set of registered custom properties from script. …\nThe selector this struct represents. We store this and the …\nSelectors that require explicit cache revalidation (i.e. …\nSets whether author style is enabled or not.\nSet a given device, which may change the styles that apply …\nSets the quirks mode of the document.\nAppends a new stylesheet to the current set.\nAppends a new stylesheet to the current set.\nShutdown the static data that this module stores.\nReturns the slotted rule map for a given pseudo-element.\nThe data coming from ::slotted() pseudo-element rules.\nThe source order this style rule appears in. Note that we …\nReturns the specificity of the rule.\nAll the states selectors in the page reference.\nThe element state bits that are relied on by selectors.  …\nReturns the style for an anonymous box of the given type.\nThe actual style rule.\nThe list of stylesheets.\nReturns whether we’ve recorded any stylesheet change so …\nReturns all the cascade datas that are not being used …\nTurns this rule into an <code>ApplicableDeclarationBlock</code> for the …\nWhether the current thread is going through a GC.\nWhether we’re in a script worker thread (actual web …\nWhether we’re in a layout thread.\nWhether we’re in a script thread.\nA thread state flag, used for multiple assertions.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nEnters into a given temporary state. Panics if re-entring.\nExits a given temporary state.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGets the current thread state.\nInitializes the current thread state.\nInitializes the current thread as a layout worker thread.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether the current thread is a worker thread.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA DOM Traversal trait, that is used to generically …\nA global variable holding the state of …\nA per-traversal-level chunk of data. This is sent down by …\nWe use this structure, rather than just returning a …\nA cache from element reference to known-valid computed …\nClear style data for all the subtree under <code>root</code> (but not …\nThe current dom depth.\nReturns true if traversal is needed for the given element …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles the postorder step of the traversal, if it exists, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBoolean that specifies whether a bottom up traversal …\nStyle invalidations happen when traversing from a parent …\nProcess <code>node</code> on the way up, after its children have been …\nProcess <code>node</code> on the way down, before its children have …\nCalculates the style for a single node.\nManually resolve style by sequentially walking up the …\nReturn the shared style context common to all worker …\nWhether we should traverse children.\nReturns true if traversal should visit a text node. The …\nReturns the traversal root for the current traversal.\nTraverse only elements for animation restyles.\nThe final animation-only traversal, which shouldn’t …\nFlush throttled animations. By default, we only update …\nTraverse and update all elements with CSS animations since …\nAllows the traversal to run in parallel if there are …\nFlags that control the traversal process.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns true if the traversal is for animation-only …\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nOne bit per each non-custom CSS property.\nOne bit per each non-custom CSS property.\nThe use-counter data related to a given document we want …\nReturns the bucket a given property belongs in, and the …\nReturns the bucket a given property belongs in, and the …\nThe counters for css properties which we haven’t …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge <code>other</code> into <code>self</code>.\nMerge <code>other</code> into <code>self</code>.\nMerge the use counters.\nThe counters for non-custom properties that have been …\nRecord that a given property ID has been parsed.\nRecord that a given property ID has been parsed.\nReturns whether a given property ID has been recorded …\nReturns whether a given property ID has been recorded …\nA <code>&lt;at-keyword-token&gt;</code>\nA generic CSS <code>&lt;ident&gt;</code> stored as an <code>Atom</code>, for the default …\nA CSS string stored as an <code>Atom</code>.\nA <code>&lt;bad-string-token&gt;</code>\nA <code>&lt;bad-url-token&gt;</code>\nA <code>--&gt;</code> <code>&lt;CDC-token&gt;</code>\nA <code>&lt;!--</code> <code>&lt;CDO-token&gt;</code>\nA CSS float value.\nA CSS integer value.\nA <code>&lt;}-token&gt;</code>\nA <code>&lt;)-token&gt;</code>\nA <code>&lt;]-token&gt;</code>\nA <code>:</code> <code>&lt;colon-token&gt;</code>\nA <code>,</code> <code>&lt;comma-token&gt;</code>\nA comment.\nA string that is either shared (heap-allocated and …\nA <code>&lt;{-token&gt;</code>\nhttps://drafts.csswg.org/css-values-4/#custom-idents\nA <code>|=</code> <code>&lt;dash-match-token&gt;</code>\nhttps://www.w3.org/TR/css-values-4/#dashed-idents This is …\nA <code>&lt;delim-token&gt;</code>\nA <code>&lt;dimension-token&gt;</code>\nA struct representing one of two kinds of values.\nThe first value.\nA <code>&lt;function-token&gt;</code>\nA generic CSS <code>&lt;ident&gt;</code> stored as an <code>Atom</code>.\nA <code>&lt;hash-token&gt;</code> with the type flag set to “unrestricted”\nA <code>&lt;hash-token&gt;</code> with the type flag set to “id”\nA <code>&lt;ident-token&gt;</code>\nConvenience void type to disable some properties and …\nA <code>~=</code> <code>&lt;include-match-token&gt;</code>\nThe .\nA <code>&lt;number-token&gt;</code>\nA <code>&lt;(-token&gt;</code>\nA CSS parser that borrows its <code>&amp;str</code> input, yields <code>Token</code>s, …\nA <code>&lt;percentage-token&gt;</code>\nA <code>^=</code> <code>&lt;prefix-match-token&gt;</code>\nA <code>&lt;string-token&gt;</code>\nThe second kind of value.\nA <code>;</code> <code>&lt;semicolon-token&gt;</code>\nThe line and column number for a given position within the …\nA <code>&lt;[-token&gt;</code>\nA <code>*=</code> <code>&lt;substring-match-token&gt;</code>\nA <code>$=</code> <code>&lt;suffix-match-token&gt;</code>\nOne of the pieces the CSS input is broken into.\nA <code>&lt;url-token&gt;</code>\nA <code>&lt;whitespace-token&gt;</code>\nAnimated values.\nThe name as an Atom\nCast an atom ref to an AtomIdent ref.\nThe column number within a line, starting at 1 for first …\nComputed values.\nReturn the current line that is being parsed.\nThe current line number and column number.\nThe source map URL, if known.\nThe source URL, if known.\nMachinery to compute distances between animatable values.\nSpecial value for internal use. Useful where we can’t …\nParse a <code>:</code> .\nParse a <code>,</code> .\nParse a <code>{ /* ... */ }</code> curly brackets block.\nParse a  with the given value.\nCheck whether the input is exhausted. That is, if <code>.next()</code> …\nParse a  token and return its name.\nParse a  token whose name is an ASCII-insensitive match …\nParse a  and return the unescaped value.\nexpect_ident, but clone the CowRcStr\nParse a  whose unescaped value is an ASCII-insensitive …\nParse either a  or a , and return the unescaped value.\nParse a  that does not have a fractional part, and return …\nParse the input until exhaustion and check that it …\nParse a  and return the integer value.\nParse a <code>( /* ... */ )</code> parenthesis block.\nParse a  and return the value. <code>0%</code> and <code>100%</code> map to <code>0.0</code> and …\nParse a <code>;</code> .\nParse a <code>[ /* ... */ ]</code> square brackets block.\nParse a  and return the unescaped value.\nexpect_string, but clone the CowRcStr\nParse a  and return the unescaped value.\nParse either a  or a , and return the unescaped value.\nParse a  and return its value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an already-tokenizer identifier\nParse an already-tokenizer identifier\n…\nGeneric types that share their serialization …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck for special internal value.\nCheck whether the input is exhausted. That is, if <code>.next()</code> …\nReturns whether this is the special <code>none</code> value.\nReturn whether this token represents a parse error.\nThe line number, starting at 0 for the first line.\nStart looking for <code>var()</code> / <code>env()</code> functions. (See the …\nCreate a new parser\nConstructs a new GenericAtomIdent.\nCreate a new BasicParseError at the current location\nCreate a new BasicParseError at this location\nCreate a new unexpected token BasicParseError at the …\nCreate a new BasicParseError at this location for an …\nCreate a new custom BasicParseError at the current location\nCreate a new custom ParseError at this location\nCreate a new basic ParseError at the current location\nCreate a new basic ParseError at the current location\nCreate a new unexpected token or EOF ParseError at the …\nCreate a new unexpected token ParseError at the current …\nCreate a new ParseError at this location for an unexpected …\nReturn the next token in the input that is neither …\nSame as <code>Parser::next</code>, but does not skip whitespace tokens.\nSame as <code>Parser::next</code>, but does not skip whitespace or …\nReturns the <code>none</code> value.\nNormalizes a float value to zero after a set of operations …\nParse a \nParse a list of comma-separated values, all with the same …\nLike <code>parse_comma_separated</code>, but ignores errors on unknown …\nHave the given closure parse something, then check the the …\nParse the content of a block or function.\nLike <code>parse_until_before</code>, but also consume the delimiter …\nLimit parsing to until a given delimiter or the end of the …\nReturn the current position within the input.\nRestore the internal state of the parser (including …\nResolved values. These are almost always computed values, …\nReturn whether a <code>var()</code> or <code>env()</code> function has been seen by …\nCategorize a token into a type that determines when <code>/**/</code> …\nSerialize an identifier which is represented as an atom.\nSerialize a name which is represented as an Atom.\nWrite a CSS identifier, escaping characters as necessary.\nWrite a CSS name, like a custom property name.\nSerialize a value into normalized (no NaN/inf …\nSerialize a number with calc, and NaN/infinity handling …\nSerialize a value into percentage.\nSerialize a specified dimension with unit, calc, and …\nAdvance the input until the next token that’s not …\nReturn a slice of the CSS input\nReturn a slice of the CSS input, from the given position …\nSpecified values.\nReturn the current internal state of the parser (including …\nThe old name of <code>try_parse</code>, which requires raw identifiers …\nExecute the given closure, passing it the parser. If the …\nWhether the number had a <code>+</code> or <code>-</code> sign.\nWhether the number had a <code>+</code> or <code>-</code> sign.\nWhether the number had a <code>+</code> or <code>-</code> sign.\nIf the origin source did not include a fractional part, …\nIf the origin source did not include a fractional part, …\nIf the origin source did not include a fractional part, …\nThe unit, e.g. “px” in <code>12px</code>\nThe value as a float, divided by 100 so that the nominal …\nThe value as a float\nThe value as a float\n…\nhttps://drafts.csswg.org/web-animations/#animation-addition\nAnimate from one value to another.\nThe type of the animated value.\nThe context needed to provide an animated value from a …\n…\nAn animation procedure.\nThe category a property falls into for ordering purposes.\nConversion between computed values and intermediate values …\nReturns a value similar to <code>self</code> that represents zero.\nAnimate a value towards another one, given an animation …\nA helper function to animate two multiplicative factor.\nAnimated types for CSS colors.\nA comparator to sort PropertyIds such that physical …\nAnimated types for CSS values related to effects.\nAnimation implementation for various font-related types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts back an animated value into a computed value.\nAnimation implementation for various grid-related types.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLists have various ways of being animated, this module …\nThe computed style we’re taking the value from.\nAnimation implementations for various SVG-related types.\nConverts this value to an animated value.\nReturns a value that, when added with an underlying value, …\nAnimated types for transform.\nReturns this procedure as a pair of weights.\nThe actual numeric color.\nAn animated value for <code>&lt;color&gt;</code>.\nAn animated value for <code>&lt;color-mix&gt;</code>.\nThe color-mix() function.\nThe <code>CurrentColor</code> keyword.\nAn animated value for a single <code>filter</code>.\nAn animated value for the <code>drop-shadow()</code> filter.\n<code>blur(&lt;length&gt;)</code>\n<code>brightness(&lt;factor&gt;)</code>\n<code>contrast(&lt;factor&gt;)</code>\n<code>drop-shadow(...)</code>\n<code>grayscale(&lt;factor&gt;)</code>\n<code>hue-rotate(&lt;angle&gt;)</code>\n<code>invert(&lt;factor&gt;)</code>\n<code>opacity(&lt;factor&gt;)</code>\n<code>saturate(&lt;factor&gt;)</code>\n<code>sepia(&lt;factor&gt;)</code>\n<code>&lt;url&gt;</code>\nBlur radius.\nColor.\nHorizontal radius.\nVertical radius.\n…\nhttps://drafts.csswg.org/web-animations-1/#repeatable-list\nThis is the animation used for some of the types like …\nA 2d matrix for interpolation.\nA decomposed 2d matrix.\nA decomposed 3d matrix.\nA 3d perspective transformation.\nA quaternion used to represent a rotation.\nA 2d scale function.\nA 3d scale function.\nA 3d skew function.\nA 2d translation function.\nA 3d translation.\nThe rotation angle.\n…\nDecompose a 3D matrix. …\nCalculate the dot product.\nDecompose a 2D matrix. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a quaternion from a unit direction vector and angle …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe inner matrix.\nNegate self.\nThe perspective component of the transformation.\nThe quaternion used to represent the rotation.\nReturn the scaled quaternion by a factor.\nThe scale function.\nA scale function.\nThe skew component of the transformation.\nThe translation function.\nA translation function.\nAn App Unit, the fundamental unit of length in Servo. …\n<code>auto</code>\nThe generic type is almost always a non-negative …\nA flexible <code>&lt;track-breadth&gt;</code>\nrect(…) | auto\nrect(…) | auto\nThe computed value type we’re going to be converted to.\nAn iterator over a slice of computed values\nA <code>Context</code> is all the data a specified value could ever …\nA <code>fit-content</code> function.\nA flex fraction specified in <code>fr</code> units.\nA wrapper of Number, but the value &gt;= 1.\nThe computed value of a <code>&lt;grid-line&gt;</code>.\n<code>&lt;grid-template-rows&gt; | &lt;grid-template-columns&gt;</code>\nThe computed value of a grid <code>&lt;track-size&gt;+</code>\nA <code>&lt;integer&gt;</code> value.\n<code>masonry</code> value. …\n<code>max-content</code>\n<code>min-content</code>\nA <code>minmax</code> function for a range over an inflexible …\nA wrapper of Number, but the value &gt;= 0.\nA non-negative .\n<code>none</code> value.\nA <code>&lt;number&gt;</code> value.\nA type used for opacity.\nA wrapper of Integer, but only accept a value &gt;= 1.\nA <code>subgrid &lt;line-name-list&gt;?</code> TODO: Support animations for …\nA trait to represent the conversion between computed and …\nThe computed value of a grid <code>&lt;track-breadth&gt;</code>\nThe computed value of a grid <code>&lt;track-list&gt;</code> (could also be …\nThe grid <code>&lt;track-list&gt;</code>\nThe computed value of a grid <code>&lt;track-size&gt;</code>\nA wrapper of Number, but the value between 0 and 1\nValues for CSS Box Alignment properties\nComputed angles.\nComputed values for properties related to animations and …\nThe index in <code>values</code> where our <code>&lt;auto-repeat&gt;</code> value is, if …")