searchState.loadedDescShard("style", 0, "Calculate specified and computed values from a tree of DOM …\nAn allocation error.\nA wrapper type for a refcounted slice using ThinArc.\nExtension methods for selectors::attr::CaseSensitivity\nA trait pretty much similar to num_traits::One, but …\nA struct that basically replaces a <code>Box&lt;[T]&gt;</code>, but which …\nA struct that basically replaces a Box, but with a defined …\nShrink the capacity of the collection if needed.\nA trait pretty much similar to num_traits::Zero, but …\nA trait implementing a function to tell if the number is …\nCSS transitions and animations.\nApplicable declarations management.\nParsed representations of DOM attributes.\nA set of author stylesheets and their computed …\nParametric Bézier curves.\nThe style bloom filter is used as an optimization when …\nColor support functions.\nMisc information about a given computed style.\nTypes for computed values.\nThe context within which style is calculated.\nThe <code>@counter-style</code> at-rule.\nCall the given macro with tokens like this for each …\nSupport for custom properties for cascading variables.\nThe structure that contains the custom properties of a …\nPer-node data used in style calculation.\nTypes and traits used to access the DOM from style …\nGeneric implementations of some DOM APIs so they can be …\nImplements traversal over the DOM tree. The traversal …\nParsing stylesheets from bytes (not <code>&amp;str</code>).\nReturn whether two atoms compare equal according to this …\nTypes used to report parsing errors.\nThe <code>@font-face</code> at-rule.\nAccess to font metrics from the style system.\nCreates a value that can be passed via FFI, and forgets …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an Arc for a slice using the given iterator to …\nCreates an Arc for a slice using the given iterator to …\nConvert the regular slice into an owned slice.\nGlobal style data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the OwnedSlice into a boxed slice.\nConvert the OwnedStr into a boxed str.\nConvert the OwnedStr into a <code>String</code>.\nConvert the OwnedSlice into a Vec.\nDifferent bits of code related to invalidating style.\nReturns whether this value is one.\nReturns whether there’s only one reference to this …\nReturns whether this value is zero.\nSo, <code>0px</code> should return <code>true</code>, but <code>0%</code> or <code>1px</code> should return …\nLeaks an empty arc slice pointer, and returns it. Only to …\nGeometry in flow-relative space.\nCall the given macro with tokens like this for each …\nVarious macro helpers.\nHigh-level interface to CSS selector matching.\nMedia queries.\nReutrns the one value.\nImplements parallel traversal over the DOM tree.\nThe context within which CSS code is parsed.\nA piecewise linear function, following CSS linear easing\nSupported CSS properties and the cascade.\nProperties and Values\nCode shared between media queries and container queries.\nA cache from rule node to computed values, in order to …\nCollects a series of applicable rules for a given element.\nThe rule tree.\nStack-scoped thread-local storage for rayon thread pools.\nA data structure to efficiently index structs containing …\nThe pseudo-classes and pseudo-elements supported by the …\nServo-specific bits of the style system.\nDifferent objects protected by the same lock\nCode related to the style sharing cache, an optimization …\nWe shrink the capacity of a collection if we’re wasting …\nString utils for attributes and similar stuff.\nA struct to encapsulate all the style fixups and flags …\nStyle resolution for a given element or pseudo-element.\nA centralized set of stylesheets for a document.\nStyle sheets and their CSS rules.\nSelector matching.\nSupports dynamic assertions in about what sort of thread …\nTraversing the DOM tree; the bloom filter.\nFlags that control the traversal process.\nVarious stuff for CSS property use counters.\nCommon values used in CSS.\nReturns the zero value.\nA CSS Animation\nA key that is used to identify nodes in the …\nThis structure represents the state of an animation.\nThis animation has been canceled.\nA single computed keyframe for a CSS Animation.\nA set of animations for a document.\nHolds the animation state for a particular element.\nThis animation has finished.\nCurrent and max iterations.\nInfinite iterations with the current iteration count.\nA temporary data structure used when calculating …\nThis structure represents a keyframes animation current …\nThis animation is paused. The inner field is the …\nThe animation has been created, but is not running yet. …\nRepresents an animation for a given property.\nThis animation is currently running.\nA CSS Transition\nThe animations for this element.\nApply all active animations.\nUpdate the given animation at a given point of progress.\nUpdate the given animation at a given point of progress.\nCancel all animations in this <code>ElementAnimationSet</code>. This is …\nCancel all animations for set at the given key.\nThe original cascade style, needed to compute the …\nClear all canceled animations and transitions from this …\nThe computed style for each keyframe of this animation.\nThe current animation direction. This can only be <code>normal</code> …\nThe duration of the current iteration of this animation …\nA number (&gt; 0 and &lt;= 1) which represents the fraction of a …\nThe delay of the animation.\nThe delay used for this transition.\nThe declared animation direction of this animation.\nWhether or not this ElementAnimationSet has had animations …\nThe duration of this <code>PropertyAnimation</code> in seconds.\nThe duration of this animation.\nThe <code>animation-fill-mode</code> property of this animation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe value we are animating from.\nWalk through all keyframe declarations and combine all …\nGet all the animation declarations for the given key, …\nReturn a locked PropertyDeclarationBlock with animation …\nFill in an <code>AnimationValueMap</code> with values calculated from …\nReturn a locked PropertyDeclarationBlock with transition …\nGenerate a <code>AnimationValueMap</code> for this <code>ElementAnimationSet</code>…\nGenerate a <code>AnimationValueMap</code> for this <code>ElementAnimationSet</code>…\nIf this <code>ElementAnimationSet</code> has any any active animations.\nReturn whether or not the provided node has active CSS …\nIf this <code>ElementAnimationSet</code> has any any active transitions.\nReturn whether or not the provided node has active CSS …\nWhether or not this animation has finished at the provided …\nWhether or not this animation has ended at the provided …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not this animation is cancelled by changes from …\nWhether this <code>ElementAnimationSet</code> is empty, which means it …\nWhether or not this animation is new and or has already …\nWhether or not this transition is new and or has already …\nGiven the current time, advances this animation to the …\nWhether or not the current iteration is over. Note that …\nThe current iteration state for the animation.\nTriggers animations for a given node looking at the …\nThe name of this animation as defined by the style.\nWhether or not this state needs animation ticks for its …\nWhether or not this state requires its owning animation to …\nCreate a new key given a node and optional pseudo element.\nCreate a new key for the main content of this node.\nCreate a new key for given node and pseudo element.\nThe node for this <code>AnimationSetKey</code>.\nAssuming this animation is running, whether or not it is …\nThe properties that change in this animation.\nThe internal style <code>PropertyAnimation</code> for this transition.\nReturns the given property longhand id.\nThe pseudo element for this <code>AnimationSetKey</code>. If <code>None</code> this …\nIf this <code>Transition</code> has been replaced by a new one this …\nIf this <code>Transition</code> has been replaced by a new one this …\nThe number of running animations and transitions for this …\nThe <code>ElementAnimationSet</code>s that this set contains.\nThe starting percentage (a number between 0 and 1) which …\nThe start time of this transition, which is the current …\nKick off any new transitions for this node and return all …\nThe time this animation started at, which is the current …\nWhether this animation is paused.\nThe state of this transition.\nThe timing function of this <code>PropertyAnimation</code>.\nThe timing function to use for transitions between this …\nThe output of the timing function given the progress …\nThe value we are animating to.\nThe transitions for this element.\nUpdate our animations given a new style, canceling or …\nUpdates the appropiate state from other animation.\nUpdate our transitions given a new style, canceling or …\nThe animation values to transition to and from when …\nA property declaration together with its precedence among …\nList of applicable declarations. This is a transient …\nThe cascade-level+layer order of this declaration.\nSacrifice the largest possible value for infinity. This …\nBlink uses 18 bits to store source order, and does not …\nProximity to the scope root.\nWhether this declaration should be allowed if <code>revert</code> or …\nReturns the cascade level.\nThe cascade priority of the rule.\nConvenience method to consume self and return the right …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an applicable declaration block from a given …\nConvert this priority from “non-important” to “…\nCreate a scope proximity for delcarations outside of any …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the layer order.\nReturns the cascade level of the block.\nReturns the cascade level of the block.\nConstruct a new CascadePriority for a given (level, order) …\nConstruct a new scope proximity.\nConstructs an applicable declaration block from the given …\nThe same tree, in author origin, at the root layer.\nReturns the scope proximity of the block.\nThe proximity to the scope root.\nReturn the key used to sort applicable declarations.\nThe style source, either a style rule, or a property …\nReturns the source order of the block.\nOrder of appearance in which this rule appears - Set to 0 …\nThe specificity of the selector.\nConvert this priority from “important” to “…\nA struct that uniquely identifies an element’s attribute.\nNote that this variant is only used transitively as a fast …\nStores a URL, computed from the input string and a document…\nAssumes the <code>AttrValue</code> is an <code>Atom</code> and returns its value\nAssumes the <code>AttrValue</code> is a <code>Color</code> and returns its value\nAssumes the <code>AttrValue</code> is a <code>Dimension</code> and returns its value\nAssumes the <code>AttrValue</code> is a <code>ResolvedUrl</code> and returns its …\nAssumes the <code>AttrValue</code> is a <code>TokenList</code> and returns its tokens\nReturn the AttrValue as its integer representation, if any.\nReturn the AttrValue as a dimension computed from its …\nShared implementation to parse an integer according to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse a floating-point number according to …\nParse an integer according to …\nParses a legacy color. If unparseable, <code>Err</code> is returned.\nParses a dimension value. If unparseable, <code>Auto</code> is returned.\n…\nParse an integer according to …\nA set of author stylesheets and their computed …\nThe actual cascade data computed from the stylesheets.\nFlush the pending sheet changes, updating <code>data</code> as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an empty AuthorStyles.\nThe sheet collection, which holds the sheet pointers, the …\nA unit cubic Bézier curve, used for timing functions in …\nCalculate the output of a unit cubic Bézier curve from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSolve the bezier curve for a given <code>x</code> and an <code>epsilon</code>, that …\nBloom filters are large allocations, so we store them in …\nThe very rough benchmarks in the selectors crate show …\nA struct that allows us to fast-reject deep descendant …\nIn debug builds, asserts that all the parents of <code>element</code> …\nClears the bloom filter.\nGet the element that represents the chain of things …\nGather all relevant hash for fast-reject filters from an …\nThe element that was pushed.\nThe stack of elements that this bloom filter contains, …\nReturn the bloom filter used properly by the <code>selectors</code> …\nA handle to the bloom filter from the thread upon which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert the parents of an element in the bloom filter, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the attribute name is excluded from the …\nReturns the DOM depth of elements that can be correctly …\nCreate an empty <code>StyleBloom</code>. Because StyleBloom acquires …\nThe number of hashes pushed for the element.\nPop the last element in the bloom filter and return it.\nPush an element to the bloom filter, knowing that it’s a …\nSame as <code>push</code>, but without asserting, in order to use it …\nStack of hashes that have been pushed onto this filter.\nRebuilds the bloom filter up to the parent of the given …\nA color specified with the color(..) function and the “…\nWhether the alpha component is <code>none</code>.\nAn absolutely specified color, using either rgb(), rgba(), …\nAn opaque black color in the legacy syntax.\nWhether the 1st color component is <code>none</code>.\nWhether the 2nd color component is <code>none</code>.\nWhether the 3rd color component is <code>none</code>.\nThe 3 components that make up a color.  (Does not include …\nFlags used when serializing colors.\nA color space representation in the CSS specification.\nHolds details about each component passed into creating a …\nA color specified with the color(..) function and the “…\nA color specified in the Hsl notation in the sRGB color …\nA color specified in the Hwb notation in the sRGB color …\nMarks that this color is in the legacy color format. This …\nA color specified in the Lab color format, e.g. “…\nA color specified in the Lch color format, e.g. “…\nA color specified in the Oklab color format, e.g. “…\nA color specified in the Oklch color format, e.g. “…\nA color specified with the color(..) function and the “…\nA color specified with the color(..) function and the “…\nA color specified in the sRGB color space with either the …\nA color specified with the color(..) function and the “…\nA fully transparent color in the legacy syntax.\nAn opaque white color in the legacy syntax.\nA color specified with the color(..) function and the “…\nA color specified with the color(..) function and the “…\nGet a flags value with all known bits set.\nReturn an optional alpha component.\nThe alpha component of the color.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturn an optional first component.\nReturn an optional second component.\nReturn an optional second component.\nGiven an <code>AbsoluteColor</code>, return the 4 float components as …\ncbindgen:ignore Output of parsing a color function, e.g. …\nThe current color space that the components represent.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nParse/serialize and resolve a single color component.\nThe 3 components that make up colors in any color space.\nWhether all set bits in a source flags value are also set …\ncbindgen:ignore Color conversion algorithms.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nExtra flags used durring serialization of this color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nParse this keyword from a string slice.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturn the value of a component by its channel keyword.\nReturns an index of the hue component in the color space, …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this color into the sRGB color space and set it to …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns true if this color is in the legacy color syntax.\nReturns whether this is a <code>&lt;polar-color-space&gt;</code>.\nReturns whether this is a <code>&lt;rectangular-color-space&gt;</code>.\nReturns true if the color has RGB or XYZ components.\nReturns true if this color is fully transparent.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nApply a function to each of the 3 components of the color.\nColor mixing/interpolation.\nCreate a new <code>AbsoluteColor</code> with the given <code>ColorSpace</code> and …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nParse this keyword.\nParsing for CSS colors.\nReturn all the components of the color in an array.  …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCreate a new <code>AbsoluteColor</code> from rgba legacy syntax values …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConvert this color to the specified color space.\nWrite colors into CSS strings.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWrite a string to <code>dest</code> that represents a color as an …\nhttps://drafts.csswg.org/css-color-4/#color-function\nRepresents a specified color function.\nhttps://drafts.csswg.org/css-color-4/#the-hsl-notation\nhttps://drafts.csswg.org/css-color-4/#the-hwb-notation\nhttps://drafts.csswg.org/css-color-4/#specifying-lab-lch\nhttps://drafts.csswg.org/css-color-4/#specifying-lab-lch\n…\n…\nhttps://drafts.csswg.org/css-color-4/#rgb-functions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTry to resolve the color function to an <code>AbsoluteColor</code> that …\nA single color component.\nAn utility trait that allows the construction of …\nThe “none” keyword.\nA absolute value.\nReturns the argument unchanged.\nConstruct a new component from a single value.\nCalls <code>U::from(self)</code>.\nReturn the component as its value.\nReturn the component as its value or a default value.\nReturn true if the component is “none”.\nReturn true if the component contains a percentage.\nIf the component contains a value, map it to another value.\nParse a single ColorComponent.\nTry to create a new component from the given [CalcNodeLeaf]…\nTry to create a new component from the given token.\nReturn the CalcUnits flags that the impl can handle.\nThe a98-rgb color space. …\nA trait that allows conversion of color spaces to and from …\nD50 white reference.\nD65 white reference.\nThe Display-P3 color space. …\nColor specified with hue, saturation and lightness …\nColor specified with hue, whiteness and blackness …\nThe Lab color space. …\nThe Lch color space. …\nThe Oklab color space. …\nThe Oklch color space. …\nThe ProPhoto RGB color space. …\nThe Rec.2020 color space. …\nThe sRGB color space. …\nThe same as sRGB color space, except the transfer function …\nThe white point that the implementer is represented in.\nA reference white that is used during color conversion.\nA color in the XYZ coordinate space with a D50 white …\nA color in the XYZ coordinate space with a D65 white …\nCalculate an epsilon for a specified range.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the color components from XYZ at the given white …\nConvert the components from XYZ coordinate space to sRGB …\nConvert an XYZ color to LAB as specified in 1 and 2.\nConvert from HSL notation to RGB notation. …\nConvert from HWB notation to RGB notation. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNormalize hue into [0, 360).\nConvert from the rectangular orthogonal to the cylindrical …\nConvert from the cylindrical polar to the rectangular …\nConvert from RGB notation to HSL notation. …\nCalculate the hue from RGB components and return it along …\nConvert from RGB notation to HWB notation. …\nConvert the components from sRGB linear light values to …\nConvert the components from sRGB gamma encoded values to …\nConvert the color components from the specified color …\nConvert the components from sRGB linear light values to …\nConvert a CIELAB color to XYZ as specified in 1 and 2.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\n…\nWhat the outcome of each component should be in a mix …\nhttps://drafts.csswg.org/css-color-4/#decreasing\nA hue-interpolation-method as defined in 1.\nhttps://drafts.csswg.org/css-color-4/#increasing\nhttps://drafts.csswg.org/css-color-4/#longer\nMix the left and right sides to give the result.\nThe resulting component should also be none.\nhttps://drafts.csswg.org/css-color-4/#shorter\nhttps://drafts.csswg.org/css-color-4/#specified\nCarry the left side forward to the result.\nCarry the right side forward to the result.\nDecides the best method for interpolating between the …\nCalculate the flags that should be carried forward a color …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nThe hue interpolation method.\nThe interpolated alpha value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the alpha component should be <code>none</code>.\nThe adjusted left alpha value.\nMix two colors into one.\nReturn the oklab interpolation method used for default …\nParse this keyword.\nThe adjusted right alpha value.\nThe color-space the interpolation should be done in.\nReturns the srgb interpolation method.\na\nalpha\n<code>&lt;angle&gt;</code>\nb, blackness, blue\nchroma\nRepresents a channel keyword inside a color.\nUsed to parse the components of a color.\ngreen\nhue\nlightness\n<code>&lt;number&gt;</code>.\n<code>&lt;number&gt;</code>.\nEither an angle or a number.\nEither a number or a percentage.\n<code>&lt;percentage&gt;</code>\nred\nsaturation\nwhiteness\nx\ny\nz\nParser context used for parsing the colors.\nReturn the angle in degrees. <code>NumberOrAngle::Number</code> is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new [ColorParser] with the given context.\nThe origin color that will be used to resolve relative …\nParse this keyword.\nParse one of the color functions: rgba(), lab(), color(), …\nReturn the named color with the given name.\nParse a CSS color using the specified [<code>ColorParser</code>] and …\nParse the color() function.\nParses hsl syntax.\nParses hwb syntax.\nParse a <code>&lt;number&gt;</code> value.\nParse an <code>&lt;number&gt;</code> or <code>&lt;angle&gt;</code> value.\nParse a <code>&lt;number&gt;</code> or <code>&lt;percentage&gt;</code> value.\nParse the relative color syntax “from” syntax …\nParse a <code>&lt;percentage&gt;</code> value.\nReturns true if the relative color syntax pref is enabled.\nReturn the value as a number. Percentages will be adjusted …\nThe value as a number of degrees.\nThe numeric value parsed, as a float.\nThe value as a float, divided by 100 so that the nominal …\nThe numeric value parsed, as a float.\nA <code>ModernComponent</code> can serialize to <code>none</code>, <code>nan</code>, <code>infinity</code> and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether the style or any of the ancestors has a multicol …\nWhether this style considered a scope style rule.\nWhether this style’s <code>content</code> depends on our parent style.\nMisc information about a given computed style.\nWhether any value on our style is font-metric-dependent on …\nWhether any value on our style is font-metric-dependent on …\nWhether this style’s <code>display</code> property depends on our …\nWhether there are author-specified rules for border-* …\nWhether there are author-specified rules for <code>font-family</code>.\nWhether there are author-specified rules for …\nWhether there are author-specified rules for …\nWhether there are author-specified rules for <code>letter-spacing</code>…\nWhether there are author-specific rules for text <code>color</code>.\nWhether there are author-specified rules for <code>word-spacing</code>.\nWhether the style or any of the ancestors has a …\nWhether the child explicitly inherits any reset property.\nWhether this element is inside an <code>opacity: 0</code> subtree.\nA flag used to mark styles which are a pseudo-element or …\nA flag used to mark styles under a relevant link that is …\nWhether this style is the style of the document element.\nA flag used to mark text that that has …\nA flag used to mark styles which have contain:style or …\nA flag used to mark styles which have <code>container-type</code> of …\nWhether line break inside should be suppressed.\nWhether the style uses container query units, in which …\nWhether the style depends on viewport units.\nWhether the style depends on viewport units on container …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nFlags that are an input to the cascade.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlags that are an input to the cascade.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns the flags that are always propagated to …\nFlags that are unconditionally propagated to descendants.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nFlags that are conditionally propagated to descendants, …\nFlags that may be propagated to descendants.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe structure holds various intermediate inputs that are …\nA global variable holding the state of …\nA global variable holding the state of …\nA list of cascade inputs for eagerly-cascaded …\nThe cascade inputs associated with a node, including those …\nLimited quirks mode.\nNo quirks mode.\nStatistics gathered during the traversal. We gather …\nQuirks mode.\nWhich quirks mode is this document in.\nA registered painter\nA set of registered painters\nA task to be run in sequential mode on the parent …\nA list of SequentialTasks that get executed on Drop.\nA shared style context.\nA helper type for stack limit checking.  This assumes that …\nA <code>StyleContext</code> is just a simple container for a immutable …\nA global options structure for the style system. We use …\nA thread-local style context.\nStatistics gathered during the traversal plus some …\nEntry to avoid an unused type parameter error on servo.\nAggregated statistics gathered during the traversal.\nThe state of all animations for our styled elements.\nThe bloom filter used to fast-reject selector-matching.\nThe current time for transitions and animations. This is …\nThe number of declarations in the stylist.\nThe number of state/attr dependencies in the dependency …\nThe device pixel ratio\nWhether the style sharing cache is disabled.\nWhether we should dump statistics about the style system.\nThe number of elements for which we performed selector …\nThe number of elements where has_styles() went from false …\nThe total number of elements traversed.\nExecutes this task.\nThe set of flags from container queries that we need for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLook up a speculative painter\nGuards for pre-acquired locks\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the list of rules, if they exist.\nWhether this is a “large” traversal.\nWhether this was a parallel traversal.\nChecks whether the previously stored stack limit has now …\nThe name it was registered with\nCreate a new limit checker, for this thread, allowing …\nCreates a new <code>ThreadLocalStyleContext</code>\nGenerate complete traversal statistics.\nConstruct inputs from previous cascade results, if any.\nConstruct inputs from previous cascade results, if any.\nConstruct inputs from previous cascade results, if any.\nConfiguration options.\nThe element’s cascade inputs.\nThe properties it was registered with\nA list of the inputs for the element’s eagerly-cascaded …\nThe quirks mode of the document.\nPaint worklets\nThe number of revalidation selectors.\nA cache from matched properties to elements that match …\nThe rule node representing the ordered list of rules …\nCollection of caches (And cache-likes) for speeding up …\nThe number of selectors in the stylist.\nThe shared style context reference.\nA cache to share style among siblings.\nA map with our snapshots in order to handle restyle hints.\nA checker used to ensure that parallel.rs does not recurse …\nStatistics about the traversal.\nThe minimum number of elements that must be traversed to …\nThe number of styles reused via rule node comparison from …\nThe number of cache hits from the StyleSharingCache.\nThe CSS selector stylist.\nThe number of times the stylist was rebuilt.\nA set of tasks to be run (on the parent thread) in …\nThe thread-local style context (mutable) reference.\nFlags controlling how we traverse the tree.\nTime spent in the traversal, in milliseconds.\nReturn a suitable viewport size in order to be used for …\nThe rule node representing the ordered list of rules …\nWhether visited styles are enabled.\nWhether <code>none</code> is allowed.\nWhether a bare string is allowed.\n‘additive’\n…\n &amp;&amp; \n‘alphabetic’\nauto\nbullets\nA bound found in <code>CounterRanges</code>.\n…\n…\n…\nFlags to control parsing of counter styles.\nAn @counter-style rule\n‘cyclic’\n‘extends ’\n…\n‘fixed ?’\nThe infinite bound.\nAn integer bound.\n<code>&lt;counter-style-name&gt;</code>\n…\nThe ‘none’ value.\nnumbers\n‘numeric’\n…\n…\nA single string value, useful for <code>&lt;list-style-type&gt;</code>.\nhttps://drafts.csswg.org/css-counter-styles/#typedef-symbol\n‘symbolic’\n…\n<code>symbols()</code>\n…\n…\nwords\n…\n…\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCheck that the system is effectively not changed. Only …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThis allows the reserved counter style names “decimal” …\ndecimal value\nThe intersection of a source flags value with the …\ndisc value\nGet a flags value with all bits unset.\nThe end of the range.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n…\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nParse this keyword from a string slice.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet the current generation of the counter style rule.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns whether this symbol is allowed in symbols() …\nIs this a bullet? (i.e. …\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nGet the name of the counter style rule.\n…\n…\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n…\n…\nParse a counter style, and optionally none|string (for …\nParse this keyword.\nParse the body (inside <code>{}</code>) of an @counter-style rule\nParse the prelude of an @counter-style rule\n…\n…\n…\n…\nThe intersection of a source flags value with the …\nGet the system of this counter style rule, default to …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\n…\n…\nSet the name of the counter style rule. Caller must ensure …\n…\n…\n…\n…\n…\n…\n…\n…\nLine and column of the @counter-style rule source code.\n…\n…\nThe start of the range.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\n…\n…\n…\n…\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n…\n…\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe actual symbols.\nThe , or symbolic if not specified.\n‘?’\nA pair of separate CustomPropertiesMaps, split between …\nBoth specified and computed values are VariableValues, the …\nThe environment from which to get <code>env</code> function values.\nA struct that takes care of encapsulating the cascade …\nWhether to defer resolving custom properties referencing …\nAt least one custom property depends on font-relative …\nAt least one custom property depends on line height units.\nAll dependencies not depending on the root element.\nA custom property name is just an <code>Atom</code>.\nSet of flags to non-custom references this custom property …\nAll dependencies depending on the root element.\nAt least one custom property depends on root element’s …\nAt least one custom property depends on root element’s …\nA struct holding information about the external references …\nBoth specified and computed values are VariableValues, the …\nA value for a custom property is just a set of tokens.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nComputes the map of applicable custom properties, as well …\nFully resolve all deferred custom properties, assuming …\nCascade a given custom property declaration.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe raw CSS string.\nThe raw CSS string.\nThe raw CSS string.\nReturns the raw CSS text from this VariableValue\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns the relevant custom property value given a …\nReturns whether this variable value has any reference to …\nCreate VariableValue from an int.\nMap for custom properties with inherit flag set, including …\nInsert a custom property in the corresponding …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCreate VariableValue from an integer amount of …\nCreate VariableValue from an integer amount of CSS pixels.\nCreate VariableValue from an int.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturn whether the inherited and non_inherited maps are …\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nNote a non-custom property with variable reference that …\nFast check to avoid calling …\nCreate a new builder, inheriting from the right style …\nCreate a new custom property without parsing if the CSS is …\nCreate a new builder, inheriting from a given custom …\nMap for custom properties with inherit flag unset.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nParse a custom property value.\n…\nLike parse_declaration_value, but accept <code>!</code> and <code>;</code> since …\nParse a custom property name.\nCreate VariableValue from a float amount of CSS pixels.\nReturn the name and value of the property at specified …\nvar(), env(), or non-custom property (e.g. through <code>em</code>) …\nvar(), env(), or non-custom property (e.g. through <code>em</code>) …\nvar(), env(), or non-custom property (e.g. through <code>em</code>) …\nRemove a custom property from the corresponding …\nThe intersection of a source flags value with the …\nRemoves the named registered custom property and inserts …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nShrink the capacity of the inherited maps as much as …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReplace var() and env() functions, returning the resulting …\nResolve all custom properties to either substituted, …\nReplace <code>var()</code> and <code>env()</code> functions. Return <code>Err(..)</code> for …\nReplace <code>var()</code> and <code>env()</code> functions in a pre-existing …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe url data of the stylesheet where this value came from.\nThe url data of the stylesheet where this value came from.\nThe url data of the stylesheet where this value came from.\nA not-too-large, not too small ancestor limit, to prevent …\nA map for a set of custom properties, which implements …\nAn iterator over the custom properties.\nWe use None in the value to represent a removed entry.\nThe number of ancestors we have.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a given property value by name.\nReturns the property name and value at a given index.\nInserts an element in the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the map has no properties in it.\nReturn iterator to go through all properties.\nReturns the amount of different properties in the map.\nThe number of custom properties we store. Note that this …\nRemoves an element from the map.\nWhether we should expand the chain, or just copy-on-write.\nShrinks the map as much as possible.\nWe only need to recascade, for example, because only …\nWe need to recascade with some replacement rule, such as …\nA lazily-allocated list of styles for eagerly-cascaded …\nStyle system data associated with an Element.\nVarious flags stored on ElementData.\nThe styles associated with a node, including the styles …\nThere are viewport units used from regular style rules …\nThere are viewport units used from container queries …\nWhether this element may have matched rules inside …\nWe need to run selector matching plus re-cascade, that is, …\nNo viewport units are used.\nWhether the primary style of this element data was reused …\nThe kind of restyle that a single element should do.\nWhether the last traversal of this element did not do any …\nInformation on how this element uses viewport units.\nWhether the styles changed for this restyle.\nGet a flags value with all known bits set.\nGrabs a reference to the list of styles or a list of None …\nGrabs a reference to the list of styles, if they exist.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDrops restyle flags and damage from the element.\nDrops any restyle state from the element.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns whether this element has been part of a restyle.\nThe restyle damage, indicating what kind of layout changes …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns a reference to the style for a given eager pseudo, …\nReturns the primary style.\nReturns true if this element has styles.\nThe restyle hint, which indicates whether selectors need …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates style for this element, its descendants, and …\nWhether all known bits in this flags value are set.\nWhether this element <code>display</code> value is <code>none</code>.\nWhether all bits in this flags value are unset.\nReturns whether there are any pseudo styles.\nReturns true if this element was restyled.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns true if this element data may need to compute the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the primary style.  Panic if no style available.\nThe element’s style.\nA list of the styles for the element’s eagerly-cascaded …\nThe intersection of a source flags value with the …\nReturns the kind of restyling that we’re going to need …\nReturns the kind of restyling for animation-only restyle.\nReturns whether it is safe to perform cousin sharing based …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the style for the eager pseudo.\nMark this element as restyled, which is useful to know …\nSets a new set of styles, returning the old ones.\nMark that we traversed this element without computing any …\nReturns this element’s primary style as a resolved style …\nReturns this element’s styles as resolved styles to use …\nThe styles for the element and its pseudo-elements.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWhether this element uses viewport units.\nThe concrete <code>TDocument</code> type.\nThe concrete <code>TElement</code> type.\nThe concrete <code>TNode</code> type.\nThe concrete node type.\nThe concrete node type.\nThe concrete <code>TShadowRoot</code> type.\nAn iterator over the DOM children of a node.\nAn iterator over the DOM descendants of a node in …\nA node iterator that only returns node that don’t need …\nSimple trait to provide basic information about the type …\nAn opaque handle to a node, which, unlike UnsafeNode, …\nSame reason as for the existence of SendNode, SendElement …\nTNode and TElement aren’t Send because we want to be …\nWrapper to output the subtree rather than the single node …\nWrapper to output the subtree along with the ElementData …\nWrapper to output the subtree along with the ElementData …\nThe <code>TDocument</code> trait, to represent a document node.\nThe element trait, the main abstraction the style crate …\nThe <code>TNode</code> trait. This is the main generic trait over which …\nThe ShadowRoot trait.\nA concrete children iterator type in order to iterate over …\nThe ::after pseudo-element of this element, if it exists.\nGet the combined animation and transition rules.\nGet this element’s animation rule.\nGet this node as a document, if it’s one.\nGet this node as an element, if it’s one.\nGet this document as a <code>TNode</code>.\nGet this ShadowRoot as a node.\nGet this element as a node.\nGet this node as a ShadowRoot, if it’s one.\nThe ::before pseudo-element of this element, if it exists.\nImmutably borrows the ElementData.\nClears the element data reference, if any.\nClear all bits related describing the dirtiness of …\nThe shadow root which roots the subtree this element is …\nA debug id, only useful, mm… for debugging.\nReturns the depth of this node in the DOM.\nAtomically notes that a child has been processed during …\nIterate over the DOM children of a node.\nIterate over the DOM children of a node, in preorder.\nExecute <code>f</code> for each anonymous content child (apart from …\nExecutes the callback for each applicable style rule data …\nInternal iterator for the attribute names of this element.\nInternal iterator for the classes of this element.\nInternal iterator for the classes of this element.\nInternal iterator for the part names that this element …\nInternal iterator for the part names of this element.\nGet a list of elements with a given ID in this document, …\nGet a list of elements with a given ID in this shadow …\nGets a reference to the ElementData container, or creates …\nReturns whether this element exports any part from its …\nGet this node’s first child.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns whether the current snapshot if present has been …\nSimilar to the dirty_descendants but for representing a …\nReturns true if the element has animation restyle hints.\nReturns true if the element has relevant animations. …\nReturns true if the element has a CSS animation. The …\nReturns true if the element has a CSS transition …\nReturns whether the element’s styles are up-to-date …\nWhether there is an ElementData container.\nReturns true if this element may have a descendant needing …\nReturns whether this element has a <code>part</code> attribute.\nReturns true if the element has all of specified selector …\nReturns whether state or attributes that may change style …\nGet the shadow host that hosts this ShadowRoot.\nThe ID for this element.\nReturns the address of this node, for debugging purposes.\nReturns the pseudo-element implemented by this element, if …\nGet the implicit scope for a stylesheet in given index.\nReturns the parent element we should inherit from.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this node is an element.\nReturns whether this document is an HTML document.\nReturns whether this element is the main body element of …\nReturn whether this element is an element in the HTML …\nReturns whether the node is attached to a document.\nReturn whether this element is an element in the MathML …\nReturn whether this element is an element in the SVG …\nWhether this node is a text node.\nReturns true if this element is a visited link.\nReturn whether this element is an element in the XUL …\nReturns the value of the <code>xml:lang=&quot;&quot;</code> attribute (or, if …\nGet this node’s last child.\nReturns element’s local name.\nThe ::marker pseudo-element of this element, if it exists.\nReturns whether this element’s language matches the …\nWhether this element should match user and content rules.\nWhether a given element may generate a pseudo-element.\nIn Gecko, element has a flag that represents the element …\nMutably borrows the ElementData.\nReturns element’s namespace.\nUnsafely construct a SendNode.\nUnsafely construct a SendElement.\nReturns the next node after this one, in a pre-order …\nGet this node’s next sibling.\nConverts self into an <code>OpaqueNode</code>.\nGet the owner document of this node.\nA debug-only check that the device’s owner doc matches …\nGet this node’s parent element if present.\nGet this node’s parent element, or shadow host if it’s …\nGet this node’s parent node.\nGet the list of shadow parts for this shadow root.\nGet this node’s previous sibling.\nReturns the size of the element to be used in container …\nReturns the quirks mode of this document.\nReturns the search direction for relative selector …\nReturn the element which we can use to look up rules in …\nFlag that this element has a descendant for animation-only …\nFlag that this element has a descendant for style …\nFlags this element as having handled already its snapshot.\nThe shadow root this element is a host of.\nThis document’s shared lock.\nWhether we should skip any root- or item-based display …\nReturn the list of slotted nodes of this node.\nGet this element’s SMIL override declarations.\nGet this element’s state, for non-tree-structural …\nAtomically stores the number of children of this node that …\nGet this element’s style attribute.\nGet the style data for this ShadowRoot.\nGenerate the proper applicable declarations due to …\nGet this element’s transition rule.\nGet this node’s children from the perspective of a …\nGet this node’s parent element from the perspective of a …\nGet this node’s parent element from the perspective of a …\nConvert an opaque element back into the element.\nFlag that this element has no descendant for …\nFlag that this element has no descendant for style …\nUnset the style attribute’s dirty bit. Servo doesn’t …\nWhether the invalidation machinery should be used for this …\nDon’t use it.\nThe output of the query.\nA query for all the elements in a subtree.\nA query for the first in-tree match of all the elements in …\nThe result of a querySelectorAll call.\nA selector query abstraction, in order to be generic over …\nWe may use it if we deem it useful.\nAppend an element matching after the first query.\nCollects elements with a given id under <code>root</code>, that pass …\nReturns whether a given element connected to <code>root</code> is …\nhttps://dom.spec.whatwg.org/#dom-element-closest\nhttps://dom.spec.whatwg.org/#dom-element-matches\nFast path for iterating over every element with a given id …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the output is empty.\nhttps://dom.spec.whatwg.org/#dom-parentnode-queryselector\nFast paths for a given selector query.\nFast paths for querySelector with a single simple selector.\nWhether the query should stop after the first element has …\nDo a DOM traversal for top-down and (optionally) bottom-up …\nSee documentation of the pref for performance …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nErrors that can be encountered while parsing CSS.\nA counter style rule had extends with additive-symbols.\nA counter style rule had extends with symbols.\nA counter style rule had less than two symbols.\nA counter style rule did not have additive-symbols.\nA counter style rule had no symbols.\nA font feature values rule was not valid.\nA keyframe rule was not valid.\nA media rule was invalid for some reason.\nA rule was invalid for some reason.\nA never-matching <code>:host</code> selector was found.\nA generic trait for an error reporter.\nPer-compound state for finding unconstrained relative …\nAn error reporter that uses the <code>log</code> crate at <code>info</code> level.\nAny warning a selector may generate. TODO(dshin): Bug …\nVisitor to check if there’s any unconstrained relative …\nRelative Selector with not enough constraint, either …\nA counter style descriptor declaration was not recognized.\nA font face descriptor was not recognized.\nA font feature values descriptor was not recognized.\nA font palette values descriptor was not recognized.\nA property declaration was not recognized.\nA property descriptor was not recognized.\nA rule was not recognized.\nA value was not recognized.\nA viewport descriptor declaration was not recognized.\nIs this compound constrained in any way?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all warnings for this selector.\nNested below, or inside relative selector?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs there a relative selector in this compound?\nCalled when the style engine detects an error.\nFont has bitmap glyphs in ‘CBDT’ format.\nFont requires COLRv0 rendering support (simple list of …\nFont requires COLRv1 rendering support (graph of paint …\nFont has bitmap glyphs in ‘sbix’ format.\nFont requires SVG glyph rendering support.\nThe computed representation of the above, so that Gecko …\nThe computed representation of the above, with angles in …\nThe computed representation of the above so Gecko can read …\nFont requires Apple Advanced Typography support.\nFont requires Graphite shaping support.\nFont requires OpenType feature support.\nA font-display value for a @font-face rule. The …\nA @font-face rule that is known to have font-family and …\nData inside a <code>@font-face</code> rule.\nKeywords for the font-face src descriptor’s format() …\nFlags for the @font-face tech() function, indicating font …\nThe font-stretch descriptor:\nThe font-style descriptor:\nThe font-weight descriptor:\nFont requires support for incremental downloading.\nA <code>local()</code> source.\nFont requires CPAL palette selection support.\nA source for a font-face rule.\nA list of sources for the font-face src descriptor.\nA <code>url()</code> source.\nA <code>UrlSource</code> represents a font-face source that has been …\nFont requires OpenType Variations support.\nGet a flags value with all known bits set.\nThe ascent override for this font face.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns a computed font-stretch range.\nReturns a computed font-stretch range.\nReturns a computed font-style descriptor.\nWhether all set bits in a source flags value are also set …\nSerialization of declarations in the FontFaceRule\nThe descent override for this font face.\nThe intersection of a source flags value with the …\nThe display of this font face.\nGet a flags value with all bits unset.\nCreate an empty font-face rule\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe name of this font face\nThe name of this font face\nThe feature settings of this font face.\nPer https://github.com/w3c/csswg-drafts/issues/1133 an …\nThe format hint specified with the <code>format()</code> function, if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe language override of this font face.\nThe line-gap override for this font face.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nParse this keyword.\nParse this keyword.\nParse the block inside a <code>@font-face</code> rule.\nParse a single font-technology keyword and return its flag.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe size adjustment for this font face.\nLine and column of the @font-face rule source code.\nThe alternative sources for this font face.\nThe alternative sources for this font face.\nThe stretch of this font face.\nThe style of this font face.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe font technology flags specified with the <code>tech()</code> …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe ranges of code points outside of which this font face …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe specified url.\nThe variation settings of this font face.\nThe weight of this font face.\nRepresents the font metrics that style needs from a font …\nType of font metrics to retrieve.\nForce getting horizontal metrics.\nGet metrics for horizontal or vertical according to the …\nGet metrics for horizontal or vertical according to the …\nThe ascent of the font (a value is always available for …\nThe cap-height of the font.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ideographic-width of the font.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nScript scale down factor for math-depth 1. …\nScript scale down factor for math-depth 2. …\nThe x-height of the font.\nThe zero advance. This is usually writing mode dependent\nGlobal style data\nGlobal style data\nPlatform-specific handle to a thread.\nJoinHandles for spawned style threads. These will be …\nGlobal thread pool\nThe performance benefit of additional threads seems to …\nGlobal thread pool.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a list of the pool’s platform-specific thread …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow many threads parallel styling can use. If not using a …\nGlobal style system options determined by env vars.\nReturns a reference to the thread pool.\nShared RWLock for CSSOM objects\nShuts down the thread pool, waiting for all work to …\nThe parallel styling thread pool.\nInvalidation of element styles due to attribute or style …\nCode related to the invalidation of media-query-affected …\nA collection of invalidations due to changes in which …\nInvalidates style of all elements that depend on viewport …\nAn invalidation processor for style changes due to …\nA wrapper over an element and a snapshot, that allows us …\nCode for invalidations due to state or attribute changes.\nThe struct that takes care of encapsulating all the logic …\nInvalidation of element styles relative selectors.\nRestyle hints: an optimization to avoid unnecessarily …\nAn invalidation processor for style changes due to state …\nAn invalidation processor for style changes due to state …\nA struct holding the members necessary to invalidate …\nThe document state that has changed, which makes it always …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new DocumentStateInvalidationProcessor.\nIn order to compute restyle hints, we perform a selector …\nA simple wrapper over an element and a snapshot, that …\nGets the attribute information of the snapshot as a string.\nA callback that should be called for each class of the …\nA callback that should be called for each CustomState of …\nReturns the argument unchanged.\nReturns the value of the <code>xml:lang=&quot;&quot;</code> (or, if appropriate, …\nIf this snapshot contains attribute information.\nWhether this snapshot contains the class <code>name</code>. Should only …\nA callback that should be called for each CustomState of …\nIf this snapshot contains CustomStateSet information.\nThe ID attribute per this snapshot. Should only be called …\nSee Element::imported_part.\nCalls <code>U::from(self)</code>.\nWhether this snapshot represents the part named <code>name</code>. …\nThe <code>xml:lang=&quot;&quot;</code> or <code>lang=&quot;&quot;</code> attribute value per this …\nTrivially constructs an <code>ElementWrapper</code>.\nGets the snapshot associated with this element, if any.\nThe state of the snapshot, if any.\nReturns the states that have changed since the element was …\nThis dependency may affect relative selector anchors for …\nThis dependency may affect relative selector anchors for …\nThis dependency may affect relative selector anchors for …\nDependency mapping for * selectors.\nDependency mapping for customstates\nMapping between (partial) CompoundSelectors (and the …\nInvalidation kind merging normal and relative dependencies.\nThis dependency may affect descendants down the tree.\nThe same, but for document state selectors.\n:empty\nThis dependency may affect relative selector anchors for …\nThis dependency may affect the element that changed itself.\nThis dependency affects the style of the element itself, …\nThis component has been added to the invalidation map. Any …\nDependency mapping for classes or IDs.\nA map where we store invalidations.\nThis component is not relevant for building up the …\nDependency mapping for local names.\n:nth and related selectors, without of.\n“Simple” edge child selectors, like :first-child, …\nThis dependency is a normal dependency.\nThe kind of elements down the tree this dependency may …\nThis dependency may affect a relative selector anchor for …\nThis dependency may affect parts of the element that …\nThis dependency may affect a relative selector anchor for …\nThis dependency is a relative dependency.\nThe kind of elements up the tree this relative selector …\nA struct that collects invalidations for a given compound …\nA struct that collects invalidations from a complex …\nA map to store all relative selector invalidations. This …\nA struct that collects invalidations for a given compound …\nThis dependency may affect siblings to the right of the …\nThis dependency may affect slotted elements of the element …\nThe same, but for state selectors, which can track more …\nDependency mapping for non-tree-strctural pseudo-class …\nDependency for tree-structural pseudo-classes.\nDependency mapping for tree-structural pseudo-class states.\nTree-structural pseudoclasses that we care about for …\nGet a flags value with all known bits set.\nThe allocation error, if we OOM.\nThe allocation error, if we OOM.\nThe allocation error, if we OOM.\nAll relative selector dependencies that specify <code>*</code>.\nA hash from attributes to rules which contain that …\nA hash from attributes to rules which contain that …\nReturn true if this state invalidation should not result …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nA hash from a class name to rules which contain that class …\nA hash from a class name to rules which contain that class …\nA map from a given class name to all the selectors with …\nClears this map, leaving it empty.\nClears this map, leaving it empty.\nReturns the combinator to the right of the partial …\nRunning combinator for this inner relative selector.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nState relevant to a given compound selector.\nState relevant to a given compound selector.\nState relevant to a given compound selector.\nWhether all set bits in a source flags value are also set …\nThe number of entries in this map.\nThe number of entries in this map.\nA map of CSS custom states\nThe other dependency fields.\nThe other dependency fields.\nWe track <code>Dependency</code> even though we don’t need to track …\nIs this dependency’s compound selector a single compound …\nThe intersection of a source flags value with the …\nThe document this <em>complex</em> selector is affected by.\nThe document this <em>complex</em> selector is affected by.\nThe document this <em>complex</em> selector is affected by.\nA list of document state dependencies in the rules we …\nThe state this compound selector is affected by.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCreates a dummy dependency to invalidate the whole …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nA hash from an ID to rules which contain that ID selector.\nA hash from an ID to rules which contain that ID selector.\nA map from a given id to all the selectors with that ID in …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of invalidation that this would generate.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns the number of dependencies stored in the …\nReturns the number of dependencies stored in the …\nA hash from local name to rules which contain that local …\nA hash from local name to rules which contain that local …\nPortion common to the normal invalidation map, except that …\nA hash from namespace to rules which contain that …\nA hash from namespace to rules which contain that …\nFlag indicating if invalidating a relative selector …\nCreates an empty <code>InvalidationMap</code>.\nCreates an empty <code>InvalidationMap</code>.\nThe kind of normal invalidation that this would generate. …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAdds a selector to the given <code>InvalidationMap</code>. Returns …\nThe offset at which our compound starts.\nAll other rules.\nAll other rules.\nA map of other attribute affecting selectors.\nThe parent dependency for an ancestor selector. For …\nParent relative selector dependency.\nThe stack of parent selectors that we have, and at which …\nThe stack of parent selectors that we have, and at which …\nThe stack of parent selectors that we have, and at which …\nThe quirks mode of the document where we’re inserting …\nThe quirks mode of the document where we’re inserting …\nThe quirks mode of the document where we’re inserting …\nRules for pseudo-states that are rare but have global …\nRules for pseudo-states that are rare but have global …\nWhat kind of relative selector invalidation this generates.\nThe intersection of a source flags value with the …\nIs the combinator to the right of this dependency’s …\nRules that have <code>:root</code> selectors.\nRules that have <code>:root</code> selectors.\nThe current selector and offset we’re iterating.\nThe current inner relative selector and offset we’re …\nThe current inner relative selector and offset we’re …\nThe dependency selector.\nThe offset into the selector that we should match on.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nShrink the capacity of hash maps if needed.\nShrink the capacity of hash maps if needed.\nThe state this dependency is affected by.\nThe state this dependency is affected by.\nThe state this dependency is affected by.\nA map of all the state dependencies.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nA map for a given tree-structural pseudo-class to all the …\nA map from a given type name to all the relative selector …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nFlag indicating if any relative selector is used.\nThe kind of descendant invalidation we’re processing.\nDifferent invalidation lists for descendants.\nA DOM descendant invalidation.\nAn <code>Invalidation</code> is a complex selector that describes which …\nThe kind of invalidation we’re processing.\nA trait to abstract the collection of invalidations for a …\nThe result of a whole invalidation process for a given …\nA vector of invalidations, optimized for small …\nA ::part() descendant invalidation.\nTraversal mapping for elements under consideration. It …\nThe result of processing a single invalidation for a given …\nA ::slotted() descendant invalidation.\nThe struct that takes care of encapsulating all the logic …\nWhen a dependency from a :where or :is selector matches, …\nCollect invalidations for a given element’s descendants …\nThe dependency that generated this invalidation.\nInvalidations for normal DOM children and pseudo-elements.\nWhether this invalidation is effective for the next …\nCreate an emtpy result.\nExecutes an action when an element in a relative selector …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the invalidation has invalidate desendants.\nWhether the invalidation has invalidate the element itself.\nWhether the invalidation has invalidate siblings.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform the invalidation pass.\nInvalidate a child and recurse down invalidating its …\nGiven the descendant invalidation lists, go through the …\nGo through later DOM siblings, invalidating style as …\nExecutes an action when any descendant of <code>Self</code> is …\nWhether the element’s descendants were invalidated.\nExecutes an action when <code>Self</code> is invalidated.\nWhether the element itself was invalidated.\nWhether the element itself was invalidated.\nExecutes an action when <code>sibling</code> is invalidated as a …\nWhether the element’s siblings were invalidated.\nWhether an invalidation that contains only a …\nWhether the invalidation processor only cares about …\nWhether the invalidation matched, either invalidating the …\nWhether the invalidation was already matched by any …\nThe matching context that should be used to process …\nCreate a new traversal map with the affected element.\nTrivially constructs a new <code>TreeStyleInvalidator</code>.\nCreate a new invalidation for matching a dependency.\nGet the element’s previous sibling element.\nThe offset of the selector pointing to a compound selector.\nInvalidations for ::part()s of an element.\nGet the element’s previous sibling element.\nProcess a given invalidation list coming from our parent, …\nProcesses a given invalidation, potentially invalidating …\nProcess the given sibling invalidations coming from our …\nExecutes an arbitrary action when the recursion limit is …\nThe right shadow host from where the rule came from, if …\nReturns whether the invalidation process should process …\nThe traversal map that should be used to process …\nInvalidations for slotted children of an element.\nAppend operation, cannot cause side effect.\nKind of DOM mutation this relative selector invalidation …\nInsertion operation, can cause side effect, but presumed …\nContext required to try and optimize away relative …\nInterface for collecting relative selector dependencies.\nInvalidation for the selector(s) inside a relative …\nOverall invalidator for handling relative selector …\nBlindly invalidate everything outside of a relative …\nRemoval operation, can cause side effect, but presumed …\nInvalidating for side effect of a DOM operation, for the …\nInvalidating for side effect of a DOM operation, for the …\nMarker for ’a lifetime.\nAdd this dependency, if it is unique (i.e. Different outer …\nData for the element being invalidated.\nDependencies that need to run through the normal …\nDependencies to run through normal invalidator.\nIncoming dependencies to be processed.\nDependency to be processed.\nElement triggering the invalidation.\nElement being invalidated.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the dependencies in a list format.\nHandle a potential relative selector anchor.\nThe current shadow host, if any.\nIs this element in the direction of the given relative …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCarry out complete invalidation triggered by a relative …\nGather relative selector dependencies for the given …\nGather relative selector dependencies for the given …\nCallback to trigger when the subject element is …\nDependencies that created an invalidation right away.\nDependencies already invalidated.\nGenerated invalidations.\nDoes this relative selector dependency have its relative …\nMatching context to use for invalidation.\nMatching context to be used.\nOptional context that will be used to try and skip …\nQuirks mode of the current invalidation.\nThe traversal map that should be used to process …\nSnapshot containing changes to invalidate against. Can be …\nTable of snapshots.\nTake the generated invalidations.\nThe top element in the subtree being invalidated.\nTraversal map for this invalidation.\nTraversal map for this invalidation.\nRecascade all descendant elements.\nRecascade the current element.\nRecascade the current element if it inherits any reset …\nReplace the style data coming from CSS animations without …\nReplace the style data coming from CSS transitions without …\nDo a selector match of the element’s descendants.\nDo a selector match of the element’s pseudo-elements. …\nDo a selector match of the element.\nDo a selector match if the element is a pseudo-element.\nReplace the style data coming from SMIL animations without …\nDon’t re-run selector-matching on the element, only the …\nThe kind of restyle we need to do for a given element.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns whether this hint invalidates the element and all …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe replacements for the animation cascade levels.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns whether the hint specifies that an animation …\nReturns whether the hint specifies that an animation …\nReturns whether the hint specifies some restyle work other …\nReturns whether we need to restyle this element.\nReturns whether the hint specifies that some cascade …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPropagates this restyle hint to a child element.\nReturns a new <code>RestyleHint</code> appropriate for children of the …\nCreates a new <code>RestyleHint</code> indicating that the current …\nThe intersection of a source flags value with the …\nRemoves all of the animation-related hints.\nReturns a hint that contains all the replacement hints.\nCreates a new <code>RestyleHint</code> indicating that the current …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns whether we’ll recascade all of the descendants.\nThe collector implementation.\nAn invalidation processor for style changes due to state …\nChecks a dependency against a given element and wrapper, …\nCheck whether a dependency should be taken into account.\nReturns whether <code>dependency</code> may cause us to invalidate the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPropagates the bits after invalidating a descendant child, …\nSets the appropriate restyle hint after invalidating the …\nSets the appropriate hint after invalidating the style of …\nWe need to invalidate style on pseudo-elements, in order …\nCreates a new StateAndAttrInvalidationProcessor.\nPropagates the bits after invalidating a descendant child.\nWhether we should process the descendants of a given …\nA struct that holds the result of a media query evaluation …\nA key for a given media query result.\nA filter that filters over effective rules, but allowing …\nA trait to get a given <code>MediaListKey</code> for a given item that …\nResets the results, using an empty key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a MediaListKey from a raw usize.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrivially constructs an empty <code>EffectiveMediaQueryResults</code>.\nWhether we should process the nested rules in a given …\nWhether we should process the nested rules in a given …\nNotices that an effective item has been seen, and caches …\nThe set of media lists that matched last time.\nGet a <code>MediaListKey</code> for this item. This key needs to …\nReturns whether a given item was known to be effective …\nAn element with a given class name.\nSome change in the rule which we don’t know about, and …\nAn element with a given id.\nThe rule was inserted.\nA style sheet invalidation represents a kind of element or …\nWhether we should invalidate just the element, or the …\nAn element with a given local name.\nThe rule was removed.\nThe kind of change that happened for a given rule.\nA change in the declarations of a style rule.\nA set of invalidations due to stylesheet additions.\nClears the invalidation set without processing.\nCollect invalidations for a given selector.\nAnalyze the given stylesheet, and collect invalidations …\nCollects invalidations for a given CSS rule.\nClears the invalidation set, invalidating elements as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMark the DOM tree styles’ as fully invalid.\nReturns whether there’s no invalidation to process.\nCreate an empty <code>StylesheetInvalidationSet</code>.\nProcess style invalidations in a given subtree. This …\nCollects invalidations for a given CSS rule, if not fully …\nTODO(emilio): Reuse the bucket stuff from selectormap? …\nInvalidates style of all elements that depend on viewport …\nThe inline flow direction is reversed against the physical …\nThe line-over/line-under sides are inverted with respect …\nA “margin” in flow-relative dimensions Represents the …\nA 2D point in flow-relative dimensions\nA rectangle in flow-relative dimensions\nA 2D size in flow-relative dimensions\ndirection is rtl.\nSimilar to VERTICAL_SIDEWAYS, but is set via …\nHorizontal text within a vertical writing mode is …\nA vertical writing mode; writing-mode is vertical-rl, …\nA vertical writing mode whose block progression direction …\nAll text within a vertical writing mode is displayed …\nThis doesn’t really makes sense, but happens when …\nGet a flags value with all known bits set.\nblock-axis coordinate\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns the <code>horizontal-tb</code> value.\ninline-axis coordinate\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nAssuming .is_vertical(), does the inline direction go top …\nIs the text layout vertical?\nAssuming .is_vertical(), does the block direction go left …\nYield a set of contained flags values.\nYield a set of contained named flags values.\n…\nReturn a WritingMode bitflags from the relevant CSS …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe default bidirectional embedding level for this writing …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAsserts the size of a type at compile time.\nA macro to parse an identifier, or return an …\nOld and new computed values were the same, or we otherwise …\nDetermines which styles are being cascaded currently.\nThe style has changed.\nWhether or not newly computed values for an element need …\nThe public API that elements expose for selector matching.\nOld and new computed values were different, so we must …\nThe same as <code>MustCascadeChildren</code>, but we only need to …\nThe same as <code>MustCascadeChildren</code>, but for the entire …\nWe need to re-match the whole subttree. This is used to …\nRepresents whether or not the style of an element has …\nRepresents the result of comparing an element’s old and …\nThe style hasn’t changed.\nCascade the regular, unvisited styles.\nCascade the styles used when an element’s relevant link …\nComputes and applies non-redundant damage.\nIf there is no transition rule in the ComputedValues, it …\nWhether any styles changed.\nGiven the old and new style of this element, and whether it…\nThe resulting damage.\nUpdates the styles with the new ones, diffs them, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the closest parent element that doesn’t have a …\nUpdates the rule nodes without re-running selector …\nUpdates the rule nodes without re-running selector …\nWhether only reset structs changed.\nA media type that matches every device.\nA specific media type.\nA type that encapsulates a media query list.\nA media query.\nhttp://dev.w3.org/csswg/mediaqueries-3/#media0\nhttps://drafts.csswg.org/mediaqueries/#media-types\nNegate a media query: …\nHide a media query from legacy UAs: …\nhttps://drafts.csswg.org/mediaqueries/#mq-prefix\nThe condition that this media query contains. This cannot …\nA media query list:\nThe list of media queries.\nA media query:\nThe media type for this query, that can be known, unknown, …\nThe qualifier for this query.\nA type that encapsulates a media query list.\nAppend a new media query item to the media list. …\nDelete a media query from the media list. …\nCreate an empty MediaList.\nEvaluate a whole <code>MediaList</code> against <code>Device</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether this <code>MediaList</code> contains no media queries.\nWhether this <code>MediaList</code> depends on the viewport size.\nThe list of media queries.\nParse a media query list from CSS.\nA media type that matches every device.\nA specific media type.\nA media query.\nhttp://dev.w3.org/csswg/mediaqueries-3/#media0\nhttps://drafts.csswg.org/mediaqueries/#media-types\nNegate a media query: …\nHide a media query from legacy UAs: …\nhttps://drafts.csswg.org/mediaqueries/#mq-prefix\nThe condition that this media query contains. This cannot …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this media query depends on the viewport.\nReturns whether this media query type matches a MediaType.\nThe media type for this query, that can be known, unknown, …\nReturn a media query that never matches, used for when we …\nParse this keyword.\nParse a media query given css input.\nThe <code>print</code> media type.\nThe qualifier for this query.\nThe <code>screen</code> media type.\nThe stack margin. If we get this deep in the stack, we …\nThe minimum stack size for a thread in the styling pool, …\nA callback to create our thread local context.  This needs …\nDistributes all items into the thread pool, in …\nProcesses <code>discovered</code> items, possibly spawning work in …\nNesting context for parsing rules.\nA trait to abstract parsing of a specified value given a …\nThe data that the parser needs from outside in order to …\nReturns whether !important declarations are forbidden.\nReturns whether chrome-only rules should be parsed.\nThe active error reporter, or none if error reporting is …\nReturns whether CSS error reporting is enabled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether we’re in a @page rule.\nWhether we’re in a user-agent stylesheet.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecord a CSS parse error with this context’s error …\nThe currently active namespaces.\nTemporarily sets the rule_type and executes the callback …\nCurrent nesting context.\nCreate a parser context.\nCreate a new nesting context.\nCreate a new nesting context based on the given rule.\nParse a value of this type.\nWhether or not parsing relative selector syntax should be …\nThe mode to use when parsing.\nThe quirks mode of this stylesheet.\nLoad the saved nesting context.\nGet the rule type, which assumes that one is available.\nAll rule types we’ve nested into, if any.\nSave the current nesting context.\nThe <code>Origin</code> of the stylesheet, whether it’s a user, …\nThe extra data we need for resolving url values.\nThe use counters we want to record while parsing style …\nEntry of a piecewise linear function while building, where …\nRepresentation of a piecewise linear function, a series of …\nParameters to define one linear stop.\nBuilder object to generate a linear function.\na single entry in a piecewise linear function.\nGet the y value of the piecewise linear function given the …\nFinish building the piecewise linear function by resolving …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInterpolate y value given x and two points. The linear …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd a new entry into the piecewise linear function with …\nCreate a builder for a known amount of linear stop entries.\nSee data.py’s documentation about the affects_flags.\nThis longhand property applies to ::cue.\nThis longhand property applies to ::first-letter.\nThis longhand property applies to ::first-line.\nThis longhand property applies to ::marker.\nThis longhand property applies to ::placeholder.\nA parsed all-shorthand value.\nAn iterator over the all shorthand’s shorthand …\nThis property can be animated on the compositor.\nAn enum to represent a CSS Wide keyword.\nA CSS-wide keyword.\nA wide keyword.\nA custom property.\nA custom property declaration.\nA custom property declaration.\nA custom property declaration with the property name and …\nA custom property declaration value is either an unparsed …\nThis property is a legacy shorthand.\nThe <code>inherit</code> keyword.\nThe <code>initial</code> keyword.\nA longhand.\nA longhand.\nA set of longhand properties\nAn iterator over a set of longhand ids.\nAn alias for a shorthand property.\nA longhand or shorthand property.\nA set of all properties.\nAn iterator over all the property ids that are enabled for …\nNot present.\nA PropertyDeclarationId without references, for use as a …\nAn already-parsed value.\nAn identifier for a given property declaration, which can …\nA set of flags for properties.\nRepresentation of a CSS property, that is, either a …\nThe <code>revert</code> keyword.\nThe <code>revert-layer</code> keyword.\nA simple cache for properties that come from a shorthand …\nA stack-allocated vector of <code>PropertyDeclaration</code> large …\nReturn type of SourcePropertyDeclaration::drain\nAn ArrayVec of subproperties, contains space for the …\nAn unparsed value.\nAn unparsed property value that contains <code>var()</code> functions.\nThe <code>unset</code> keyword.\nAn unparsed declaration that contains <code>var()</code> functions.\nA declaration using a CSS-wide keyword.\nAn all shorthand with var() references that we can’t …\nGet a flags value with all known bits set.\nThe all shorthand that was set.\nStored separately to keep SubpropertiesVec smaller.\nReturns whether a given rule allows a given property.\nReturns an alias id, if this property is one.\nReturns the corresponding PropertyDeclarationId.\nReturns a longhand id, if this property is one.\nReturns longhand id if it is, None otherwise.\nReturns a shorthand id, if this property is one.\nGiven this property id, get it either as a shorthand or as …\nReturns the underlying index, used for use counter.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the set of border properties for the purpose of …\nThe main cascading algorithm of the style system.\nClear all bits\nReset to initial state\nSee PropertyId::collect_property_completion_keywords.\nCollect supported starting word of values of this property.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturn whether the given property is in the set\nReturn whether the given property is in the set\nReturns whether this set contains at least every longhand …\nReturns whether this set contains any longhand that <code>other</code> …\nReturn whether this set contains any reset longhand.\nA property declaration block.\nIterates property declarations from the given all …\nA drain over the non-all declarations.\nThe storage for the actual declarations (except for all).\nThe intersection of a source flags value with the …\nSimilar to Vec::drain: leaves this empty when the return …\nGet a flags value with all bits unset.\nWhether this property is enabled for all content right now.\nWhether the property is enabled for all content regardless …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns PropertyFlags for given property.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an alias id into a non-custom property id.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nParses a CSS wide keyword from a CSS identifier.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nConverts a longhand id into a non-custom property id.\nGet a flags value with the bits of a flag with the given …\nConverts a shorthand id into a non-custom property id.\nThe shorthand this came from.\nThe CSS properties supported by the style system. …\nThe id of the property this declaration represents.\nReturns the set of longhands that are ignored when …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInsert a non-custom-property in the set.\nAdd the given property to the set\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns whether this property is animatable.\nReturns true if this property is one of the animatable …\nReturns whether this property is animatable.\nReturns whether this property is animatable in a discrete …\nWhether all bits in this flags value are unset.\nReturns whether the set is empty.\nWhether we’re empty.\nReturn whether this property is logical.\nReturn whether this property is logical.\nWhether a given declaration id is a longhand belonging to …\nWhether a given declaration id is either the same as <code>other</code>…\nReturns true if the property is a shorthand or shorthand …\nYield a set of contained flags values.\nIterate over the current longhand id set.\nYield a set of contained named flags values.\nThe CSS-wide keyword.\nReturn the longhand id that this property id represents.\nReturns either a longhand or a shorthand, resolving …\nGet the property name.\nReturns the name of the property without CSS escaping.\nThe name of the custom property.\nCreates an empty <code>NonCustomPropertyIdSet</code>.\nReturn an empty LonghandIdSet.\nReturns the <code>NonCustomPropertyId</code> corresponding to this …\nReturns non-alias NonCustomPropertyId corresponding to this\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nParses a CSS wide keyword completely.\nParses a property name, and returns an error if it’s …\nParses a property name, and returns an error if it’s …\nParses a property name, and returns an error if it’s …\nReturns a given property from the given name, <em>regardless </em>…\nReturns a given property from the given name, <em>regardless </em>…\nPush a single declaration.\nThe intersection of a source flags value with the …\nRemove the given property from the set\nRemove all the given properties from the set.\nThe set of non-inherited longhands.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe supported types of this property. The return value …\nWhether the property supports the given CSS type. <code>ty</code> …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConvert to an OwnedPropertyDeclarationId.\nIf this is a logical property, return the corresponding …\nTurns this <code>NonCustomPropertyId</code> into a <code>PropertyId</code>.\nReturns the string representation of the keyword.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nResolves the alias of a given property if needed.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe unparsed value of the variable.\nThe value of the custom property.\nThe variable value, references and so on.\nOnly a few properties are allowed to depend on the visited …\nCreate one with a single PropertyDeclaration.\nWhether we’re cascading for visited or unvisited styles.\nWe track the index only for prioritary properties. For …\nThe set of property declarations from our rules.\nFor ignored colors mode, we sometimes want to do something …\nWhether we’re resolving a style with the purposes of …\n“Prioritary” properties are properties that other …\nWe’re cascading for unvisited styles.\nWe’re cascading for visited styles.\nNOTE: This function expects the declaration with more …\nPerforms the CSS cascade, computing new styles for an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether we have any prioritary property. This is just a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of all the applicable longhand declarations.\nThe prioritary property position data.\nSome keyword sizes depend on the font family and language.\nThe cascade for our unvisited style.\nThe visited rules that should match the visited style.\nThe style we’re re-parenting for ::first-line. …\nA set of property declarations including animations and …\nIterator for AnimationValue to be generated from …\nThe given declaration is new, and should be append …\nThe given declaration cannot be updated in-place, and an …\nA convenient enum to represent different kinds of stuff …\nA raw CSS string, coming for example from a property with …\nA given declaration, of which we’ll serialize just the …\nIterator over <code>(PropertyDeclaration, Importance)</code> pairs.\nThe state needed to parse a declaration block.\nAn enum describes how a declaration should update the …\nA set of declarations for a given shorthand.\nA declaration importance.\nIndicates a declaration with <code>!important</code>.\nThe given declaration doesn’t update anything.\nIndicates a declaration without <code>!important</code>.\nOverridden declarations are skipped.\nA set of properties.\nAn iterator over a set of longhand ids.\nA struct to parse property declarations.\nA struct describes how a declaration block should be …\nThe given declaration can be updated in-place at the given …\nDeclarations for animations.\nReturns whether this block contains any declaration with …\nReturns whether this block contains any declaration …\nAppend a given kind of appendable value to a serialization.\nAppend a given property and value pair to a serialization.\nRemove all properties from the set.\nClears all the declarations from this block.\nReturn whether the given property is in the set.\nReturns whether this block contains a declaration of a …\nReturns whether this set contains all properties in the …\nReturns whether this set contains all longhands in the …\nReturns whether this set contains any reset longhand.\nReturns whether this block contains any reset longhand.\nIterate over <code>(PropertyDeclaration, Importance)</code> pairs\nThe declarations in this block\nThe group of declarations, along with their importance.\nDeclarations from the last declaration parsed. (note that …\nThe <code>important</code> flags for declarations in this block\nThe “important” flag for each declaration in …\nResets the declaration parser state, and reports the error …\nA list of errors that have happened so far. Not all of …\nAdds or overrides the declaration for a given property in …\nReturns the first declaration that would be removed by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert AnimationValueMap to PropertyDeclarationBlock.\nGet a declaration for a given property.\nPotentially appends whitespace after the first (property: …\nReturns true if the declaration block has a CSSWideKeyword …\nReturns whether any parsed declarations have been parsed …\nThe importance from the last declaration parsed.\nReturn whether this is an important declaration.\nAdd the given property to the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not this <code>AnimationDeclarations</code> is empty.\nReturns whether the set is empty.\nReturns whether the block is empty.\nBased on NonMozillaVendorIdentifier from Gecko’s CSS …\nIterate over the current property declaration id set.\nThe last parsed property id, if any.\nReturns the number of declarations in the block.\nConstructor.\nCreate an empty block\nIterate over <code>PropertyDeclaration</code> for Importance::Normal\nThe output block where results are stored.\nParse a given property declaration. Can result in multiple …\nParse a list of property declarations and return a …\nA helper to parse the style attribute of an element, in …\nParse a single declaration value.\nPrepares updating this declaration block with the given …\nReturns a <code>PropertyDeclarationIdSet</code> representing the …\nThe set of properties that are present in the block.\n…\nFind the value of the given property in this block and …\nAdds or overrides the declaration for a given property in …\nRemove the given property from the set.\nRemoves a given declaration at a given index.\n…\nReports any CSS errors that have ocurred if needed.\nTries to serialize a given shorthand from the declarations …\nTake a declaration block known to contain a single …\nTakes the parsed declarations.\nReturn an iterator of (AnimatableLonghand, AnimationValue).\nLike the method on ToCss, but without the type parameter …\nDeclarations for transitions.\nUpdate this declaration block with the given data.\nCreate a block with a single declaration\nAn identifier for a given alias property.\n<code>align-content</code>\nalign-content\n<code>align-items</code>\nalign-items\n<code>align-self</code>\nalign-self\nalignment-baseline\nall\nanimation\n<code>animation-composition</code>\nanimation-composition\nAn iterator over the values of the animation-composition …\n<code>animation-delay</code>\nanimation-delay\nAn iterator over the values of the animation-delay …\n<code>animation-direction</code>\nanimation-direction\nAn iterator over the values of the animation-direction …\n<code>animation-duration</code>\nanimation-duration\nAn iterator over the values of the animation-duration …\n<code>animation-fill-mode</code>\nanimation-fill-mode\nAn iterator over the values of the animation-fill-mode …\n<code>animation-iteration-count</code>\nanimation-iteration-count\nAn iterator over the values of the …\n<code>animation-name</code>\nanimation-name\nAn iterator over the values of the animation-name …\n<code>animation-play-state</code>\nanimation-play-state\nAn iterator over the values of the animation-play-state …\n<code>animation-timeline</code>\nanimation-timeline\nAn iterator over the values of the animation-timeline …\n<code>animation-timing-function</code>\nanimation-timing-function\nAn iterator over the values of the …\n<code>aspect-ratio</code>\naspect-ratio\n<code>backface-visibility</code>\nbackface-visibility\nbackground\n<code>background-attachment</code>\nbackground-attachment\n<code>background-clip</code>\nbackground-clip\n<code>background-color</code>\nbackground-color\n<code>background-image</code>\nbackground-image\n<code>background-origin</code>\nbackground-origin\nbackground-position\n<code>background-position-x</code>\nbackground-position-x\n<code>background-position-y</code>\nbackground-position-y\n<code>background-repeat</code>\nbackground-repeat\nbackground-repeat-x\nbackground-repeat-y\n<code>background-size</code>\nbackground-size\nbaseline-shift\n<code>baseline-source</code>\nbaseline-source\n<code>block-size</code>\nblock-size\nborder\nborder-block\nborder-block-color\nborder-block-end\n<code>border-block-end-color</code>\nborder-block-end-color\n<code>border-block-end-style</code>\nborder-block-end-style\n<code>border-block-end-width</code>\nborder-block-end-width\nborder-block-start\n<code>border-block-start-color</code>\nborder-block-start-color\n<code>border-block-start-style</code>\nborder-block-start-style\n<code>border-block-start-width</code>\nborder-block-start-width\nborder-block-style\nborder-block-width\nborder-bottom\n<code>border-bottom-color</code>\nborder-bottom-color\n<code>border-bottom-left-radius</code>\nborder-bottom-left-radius\n<code>border-bottom-right-radius</code>\nborder-bottom-right-radius\n<code>border-bottom-style</code>\nborder-bottom-style\n<code>border-bottom-width</code>\nborder-bottom-width\n<code>border-collapse</code>\nborder-collapse\nborder-color\nborder-color\n<code>border-end-end-radius</code>\nborder-end-end-radius\n<code>border-end-start-radius</code>\nborder-end-start-radius\nborder-image\n<code>border-image-outset</code>\nborder-image-outset\n<code>border-image-repeat</code>\nborder-image-repeat\n<code>border-image-slice</code>\nborder-image-slice\n<code>border-image-source</code>\nborder-image-source\n<code>border-image-width</code>\nborder-image-width\nborder-inline\nborder-inline-color\nborder-inline-end\n<code>border-inline-end-color</code>\nborder-inline-end-color\n<code>border-inline-end-style</code>\nborder-inline-end-style\n<code>border-inline-end-width</code>\nborder-inline-end-width\nborder-inline-start\n<code>border-inline-start-color</code>\nborder-inline-start-color\n<code>border-inline-start-style</code>\nborder-inline-start-style\n<code>border-inline-start-width</code>\nborder-inline-start-width\nborder-inline-style\nborder-inline-width\nborder-left\n<code>border-left-color</code>\nborder-left-color\n<code>border-left-style</code>\nborder-left-style\n<code>border-left-width</code>\nborder-left-width\nborder-radius\nborder-radius\nborder-right\n<code>border-right-color</code>\nborder-right-color\n<code>border-right-style</code>\nborder-right-style\n<code>border-right-width</code>\nborder-right-width\n<code>border-spacing</code>\nborder-spacing\n<code>border-start-end-radius</code>\nborder-start-end-radius\n<code>border-start-start-radius</code>\nborder-start-start-radius\nborder-style\nborder-style\nborder-top\n<code>border-top-color</code>\nborder-top-color\n<code>border-top-left-radius</code>\nborder-top-left-radius\n<code>border-top-right-radius</code>\nborder-top-right-radius\n<code>border-top-style</code>\nborder-top-style\n<code>border-top-width</code>\nborder-top-width\nborder-width\nborder-width\nA borrowed struct from the parent, for example, for …\n<code>bottom</code>\nbottom\n<code>box-shadow</code>\nbox-shadow\n<code>box-sizing</code>\nbox-sizing\nbuffered-rendering\nA per-longhand array of functions to perform the CSS …\nA CSS-wide keyword.\n<code>caption-side</code>\ncaption-side\nA per-longhand function that performs the CSS cascade for …\n<code>clear</code>\nclear\n<code>clip</code>\nclip\n<code>clip-path</code>\nclip-path\n<code>color</code>\ncolor\ncolor-rendering\n<code>color-scheme</code>\ncolor-scheme\n<code>column-count</code>\ncolumn-count\n<code>column-gap</code>\ncolumn-gap\n<code>column-span</code>\ncolumn-span\n<code>column-width</code>\ncolumn-width\ncolumns\nThe struct that Servo uses to represent computed values.\nActual data of ComputedValues, to match up with Gecko\n<code>container-name</code>\ncontainer-name\n<code>container-type</code>\ncontainer-type\n<code>content</code>\ncontent\nThe counted unknown property list which is used for css …\n<code>counter-increment</code>\ncounter-increment\n<code>counter-reset</code>\ncounter-reset\n<code>cursor</code>\ncursor\nA custom property declaration.\n<code>direction</code>\ndirection\n<code>display</code>\ndisplay\n<code>empty-cells</code>\nempty-cells\n<code>filter</code>\nfilter\nflex\n<code>flex-basis</code>\nflex-basis\n<code>flex-direction</code>\nflex-direction\nflex-flow\n<code>flex-grow</code>\nflex-grow\n<code>flex-shrink</code>\nflex-shrink\n<code>flex-wrap</code>\nflex-wrap\n<code>float</code>\nfloat\nfont\n<code>font-family</code>\nfont-family\n<code>font-language-override</code>\nfont-language-override\n<code>font-size</code>\nfont-size\n<code>font-stretch</code>\nfont-stretch\n<code>font-style</code>\nfont-style\nfont-variant\n<code>font-variant-caps</code>\nfont-variant-caps\n<code>font-weight</code>\nfont-weight\ngap\ngrid\ngrid-area\n<code>grid-auto-columns</code>\ngrid-auto-columns\n<code>grid-auto-flow</code>\ngrid-auto-flow\n<code>grid-auto-rows</code>\ngrid-auto-rows\ngrid-column\n<code>grid-column-end</code>\ngrid-column-end\ngrid-column-gap\n<code>grid-column-start</code>\ngrid-column-start\ngrid-gap\ngrid-row\n<code>grid-row-end</code>\ngrid-row-end\ngrid-row-gap\n<code>grid-row-start</code>\ngrid-row-start\ngrid-template\n<code>grid-template-areas</code>\ngrid-template-areas\n<code>grid-template-columns</code>\ngrid-template-columns\n<code>grid-template-rows</code>\ngrid-template-rows\n<code>height</code>\nheight\n<code>image-rendering</code>\nimage-rendering\n<code>inline-size</code>\ninline-size\ninset\ninset\ninset-block\n<code>inset-block-end</code>\ninset-block-end\n<code>inset-block-start</code>\ninset-block-start\ninset-inline\n<code>inset-inline-end</code>\ninset-inline-end\n<code>inset-inline-start</code>\ninset-inline-start\n<code>justify-content</code>\njustify-content\n<code>justify-items</code>\njustify-items\n<code>justify-self</code>\njustify-self\n<code>left</code>\nleft\n<code>letter-spacing</code>\nletter-spacing\n<code>line-height</code>\nline-height\nlist-style\n<code>list-style-image</code>\nlist-style-image\n<code>list-style-position</code>\nlist-style-position\n<code>list-style-type</code>\nlist-style-type\nA group for properties which may override each other via …\nA set of logical groups.\nAn identifier for a given longhand property.\nmargin\nmargin\nmargin-block\n<code>margin-block-end</code>\nmargin-block-end\n<code>margin-block-start</code>\nmargin-block-start\n<code>margin-bottom</code>\nmargin-bottom\nmargin-inline\n<code>margin-inline-end</code>\nmargin-inline-end\n<code>margin-inline-start</code>\nmargin-inline-start\n<code>margin-left</code>\nmargin-left\n<code>margin-right</code>\nmargin-right\n<code>margin-top</code>\nmargin-top\n<code>max-block-size</code>\nmax-block-size\n<code>max-height</code>\nmax-height\n<code>max-inline-size</code>\nmax-inline-size\nmax-size\n<code>max-width</code>\nmax-width\nmax-zoom\nConversion with fewer impls than From/Into\n<code>min-block-size</code>\nmin-block-size\n<code>min-height</code>\nmin-height\n<code>min-inline-size</code>\nmin-inline-size\nmin-size\n<code>min-width</code>\nmin-width\nmin-zoom\n<code>mix-blend-mode</code>\nmix-blend-mode\n<code>object-fit</code>\nobject-fit\n<code>object-position</code>\nobject-position\n<code>opacity</code>\nopacity\n<code>order</code>\norder\norientation\norphans\noutline\n<code>outline-color</code>\noutline-color\n<code>outline-offset</code>\noutline-offset\n<code>outline-style</code>\noutline-style\n<code>outline-width</code>\noutline-width\noverflow\noverflow\n<code>overflow-block</code>\noverflow-block\n<code>overflow-inline</code>\noverflow-inline\n<code>overflow-wrap</code>\noverflow-wrap\n<code>overflow-x</code>\noverflow-x\n<code>overflow-y</code>\noverflow-y\nAn owned struct, that we’ve already mutated.\npadding\npadding\npadding-block\n<code>padding-block-end</code>\npadding-block-end\n<code>padding-block-start</code>\npadding-block-start\n<code>padding-bottom</code>\npadding-bottom\npadding-inline\n<code>padding-inline-end</code>\npadding-inline-end\n<code>padding-inline-start</code>\npadding-inline-start\n<code>padding-left</code>\npadding-left\n<code>padding-right</code>\npadding-right\n<code>padding-top</code>\npadding-top\n<code>perspective</code>\nperspective\n<code>perspective-origin</code>\nperspective-origin\nplace-content\nplace-items\nplace-self\n<code>pointer-events</code>\npointer-events\n<code>position</code>\nposition\nServo’s representation for a property declaration.\n<code>quotes</code>\nquotes\n<code>right</code>\nright\n<code>rotate</code>\nrotate\n<code>row-gap</code>\nrow-gap\n<code>scale</code>\nscale\n<code>-servo-overflow-clip-box</code>\n-servo-overflow-clip-box\n<code>-servo-top-layer</code>\n-servo-top-layer\nAn identifier for a given shorthand property.\nsize\nspeak\nA type used to compute a struct with minimal overhead.\nA reference to a style struct of the parent, or our own …\n<code>table-layout</code>\ntable-layout\n<code>text-align</code>\ntext-align\n<code>text-align-last</code>\ntext-align-last\ntext-decoration\n<code>text-decoration-color</code>\ntext-decoration-color\n<code>text-decoration-line</code>\ntext-decoration-line\n<code>text-decoration-style</code>\ntext-decoration-style\n<code>text-indent</code>\ntext-indent\n<code>text-justify</code>\ntext-justify\n<code>text-overflow</code>\ntext-overflow\n<code>text-rendering</code>\ntext-rendering\n<code>text-shadow</code>\ntext-shadow\ntext-size-adjust\n<code>text-transform</code>\ntext-transform\n<code>text-wrap-mode</code>\ntext-wrap-mode\n<code>top</code>\ntop\n<code>transform</code>\ntransform\n<code>transform-origin</code>\ntransform-origin\n<code>transform-style</code>\ntransform-style\ntransition\n<code>transition-behavior</code>\ntransition-behavior\nAn iterator over the values of the transition-behavior …\n<code>transition-delay</code>\ntransition-delay\nAn iterator over the values of the transition-delay …\n<code>transition-duration</code>\ntransition-duration\nAn iterator over the values of the transition-duration …\n<code>transition-property</code>\ntransition-property\nAn iterator over the values of the transition-property …\n<code>transition-timing-function</code>\ntransition-timing-function\nAn iterator over the values of the …\n<code>translate</code>\ntranslate\n<code>unicode-bidi</code>\nunicode-bidi\nuser-zoom\nTemporarily vacated, will panic if accessed\n<code>vertical-align</code>\nvertical-align\n<code>visibility</code>\nvisibility\n-webkit-app-region")