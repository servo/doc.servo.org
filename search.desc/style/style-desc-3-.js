searchState.loadedDescShard("style", 3, "Computed types for CSS values related to backgrounds.\nCSS handling for the computed value of <code>basic-shape</code>s\nComputed types for CSS values related to borders.\nComputed types for box properties.\nValues accessed through this need to be in the properties …\nA dummy option for servo so initializing a …\nCeil this app unit to the appropriate pixel boundary and …\nComputed color values.\nComputed types for the column properties.\nReturns the container information to evaluate a given …\nContainer size query for this context.\nComputed values for counter properties\nThe default computed style we’re getting our reset style …\nThe current device.\nComputed types for CSS Easing functions.\nComputed types for CSS values related to effects.\nComputed types for CSS values related to flexbox.\nComputed values for font properties\nGiven a border box, resolves the clip rect against the …\nCreates a suitable context for container query evaluation …\nCreates a suitable context for media query evaluation, in …\nWhether we’re computing a value for a non-inherited …\nWhether this computation is being done for a SMIL …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a computed value to specified value form.\nLazily evaluate the container size query, returning the …\nReturns the <code>100%</code> value.\nA custom identifier for named lines, or the empty atom …\nCSS handling for the computed value of <code>image</code>s\nWhether or not we are computing the container query …\nWhether we’re in a media or container query.\nWhether or not we are computing the media list in a media …\nGet the inherited custom properties map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the style is for the root element.\nFlag to check whether it’s a <code>span</code> keyword.\n<code>&lt;length&gt;</code> computed values, and related ones.\n<code>&lt;length-percentage&gt;</code> computed values, and related ones.\n<code>&lt;line-names&gt;</code> accompanying <code>&lt;track-size&gt; | &lt;track-repeat&gt;</code> …\nDenotes the nth grid line from grid item’s placement.\n<code>list</code> computed values.\n(Servo doesn’t do text-zoom)\nComputed types for CSS values that are related to motion …\nFIXME(pcwalton): Workaround for lack of cross crate …\nCreates a context suitable for more general cases.\nConstruct an iterator from a slice of specified values and …\nCreates a context suitable for computing animations.\nCreates a context suitable for computing the initial value …\nComputed values for outline properties\nComputed @page at-rule properties and named-page style …\nComputed percentages.\nCSS handling for the computed value of <code>position</code> values.\nQueries font metrics.\nThe quirks mode of this context.\n<code>&lt;ratio&gt;</code> computed values.\nComputed types for CSS borders.\nResolution values:\nThe conditions to cache a rule node on the rule cache.\nScale, but truncate (useful for viewport-relative units)\nThe current style.\nComputed types for SVG properties.\nComputed types for CSS values related to tables.\nComputed types for text properties.\nComputed time values.\nConvert a specified value to a computed value, using …\nRound this app unit down to the pixel towards zero and …\nComputed types for CSS values that are related to …\nComputed values for UI properties\nCommon handling for the computed value CSS url() values.\nA vector of <code>&lt;track-size&gt; | &lt;track-repeat&gt;</code> values.\nThe current viewport size, used to resolve viewport units.\nThe computed value for the <code>justify-items</code> property.\nThe computed value for the property. Cannot contain the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the <code>legacy</code> value.\nThe specified value for the property. Can contain the bare …\nA computed angle in degrees.\nReturn the value in degrees.\nReturns the argument unchanged.\nCreates a computed <code>Angle</code> value from a degrees amount.\nCreates a computed <code>Angle</code> value from a radian amount.\nCalls <code>U::from(self)</code>.\nReturns the amount of radians this angle represents.\nReturns the amount of radians this angle represents as a …\nA computed value for the <code>animation-duration</code> property.\nA computed value for the <code>animation-iteration-count</code> …\nA computed value for the <code>animation-timeline</code> property.\nThe initial value. However, we serialize this as 0s if the …\nUse default timeline. The animation’s timeline is a …\nThe scroll() notation. …\nThe time value, &lt;time [0s,∞]&gt;.\nThe scroll-timeline name or view-timeline-name. This also …\nThe view() notation. …\nA computed value for the <code>view-timeline-inset</code> property.\nThe end inset.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value <code>1.0</code>.\nReturns the amount of seconds this time represents.\nThe start inset in the relevant axis.\nA computed value for the <code>background-size</code> property.\n<code>contain</code>\n<code>cover</code>\n<code>&lt;width&gt; &lt;height&gt;</code>\nExplicit height.\nExplicit width.\nThe arc command.\nA computed basic shape.\nA computed circle.\nDefines a circle with a center and a radius.\nA computed <code>clip-path</code> value.\nThe closepath command.\nThe computed value of <code>CoordinatePair</code>.\nThe cubic Bézier curve command.\nA computed ellipse.\nDefines an ellipse with a center and x-axis/y-axis radii.\nA computed alias for FillRule.\nThe hline command.\nThe computed value of <code>inset()</code>.\nThe line command.\nThe move command.\nDefines a path with SVG path syntax.\nDefines a path() or shape().\nThe computed value of <code>PathOrShapeFunction</code>.\nDefines a polygon with pair arguments.\nThe quadratic Bézier curve command.\nThe .\nThe computed value of <code>shape()</code>.\nDefines a shape function, which is identical to path() but …\nThe computed value of <code>ShapeCommand</code>.\nA computed <code>shape-outside</code> value.\nThe computed value of <code>ShapeRadius</code>.\nThe smooth command.\nThe smooth quadratic Bézier curve command.\nThe vline command.\nAnimate from <code>Shape</code> to <code>Path</code>, and vice versa.\nThe shape command data. Note that the starting point will …\nThe filling rule for this shape.\n<code>auto</code>\nA computed value for the <code>border-*-radius</code> longhand …\nA computed value for a single side of a <code>border-image-width</code> …\nA computed value for the <code>border-image-slice</code> property.\nA computed value for the <code>border-image-width</code> property.\nA computed value for the <code>border-radius</code> property.\nA computed value for border-width (and the like).\nA computed value for the <code>border-spacing</code> longhand property.\n<code>&lt;length-or-percentage&gt;</code>\nA computed value for -webkit-text-stroke-width.\n<code>&lt;number&gt;</code>\nThe bottom left radius.\nThe bottom right radius.\nWhether to fill the middle part.\nReturns the horizontal spacing.\nReturns the <code>100%</code> value.\nThe offsets.\nReturns <code>1</code>.\nThe top left radius.\nThe top right radius.\nReturns the vertical spacing.\nReturns <code>0 0</code>.\n“auto ”\nThe keywords ‘auto none’,\nA computed value for the <code>clear</code> property.\nA computed value for the <code>contain-intrinsic-size</code> property.\nThe <code>document</code> value. This can appear in the computed zoom …\nA computed value for the <code>float</code> property.\nOne of the vertical-align keywords.\n<code>&lt;length-percentage&gt;</code>\nA non-negative length.\nA non-negative length.\nA computed value for the <code>line-clamp</code> property.\nThe keyword <code>none</code>.\nThe keyword <code>none</code>.\nThe value 1. This is by far the most common value.\nA computed value for the <code>perspective</code> property.\nA computed value for the <code>resize</code> property.\nA computed value for the <code>vertical-align</code> property.\nWe use an unsigned 10.6 fixed-point value (range 0.0 - …\nThe computed <code>zoom</code> property value. We store it as a 16-bit …\nThis is an alias which is useful mostly as a cbindgen / …\nConverts contain-intrinsic-size to auto style.\nComputes the effective zoom for a given new zoom value in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inverse of our value.\nReturns whether we’re the <code>document</code> keyword.\nReturns true if <code>self</code> is not <code>None</code>.\nReturns whether we’re the number 1.\nParse this keyword.\nParse this keyword.\nParse this keyword.\nReturns the un-zoomed value.\nReturns the value as a float.\nThe actual representation.\nReturns the zoomed value.\nThe actual numeric color.\n<code>auto</code>\nAn opaque black color.\ncaret-color\nA computed value for <code>&lt;color&gt;</code>.\nA <code>&lt;color&gt;</code>.\nA computed color-mix().\nThe color-mix() function.\nauto | \nThe computed value of the <code>color</code> property.\nThe <code>CurrentColor</code> keyword.\nA fully transparent color.\nAn opaque white color.\nThe alpha component of the color.\nThe current color space that the components represent.\nThe 3 components that make up colors in any color space.\nExtra flags used durring serialization of this color.\nCreate a new computed <code>Color</code> from a given color-mix, …\nCombine this complex color with the given foreground color …\nThe keyword <code>auto</code>.\nA computed type for <code>column-count</code> values.\nA positive integer.\n<code>attr([namespace? </code>|<code>]? ident)</code>\n<code>close-quote</code>.\nA computed value for the <code>content</code> property.\nA computed content item.\n<code>counter(name, style)</code>.\nA computed value for the <code>counter-increment</code> property.\nA computed value for the <code>counter-reset</code> property.\nA computed value for the <code>counter-set</code> property.\n<code>counters(name, separator, style)</code>.\nimage-set(url) | url(url)\nContent items.\n<code>no-close-quote</code>.\n<code>no-open-quote</code>.\n<code>none</code> reserved keyword.\n<code>normal</code> reserved keyword.\n<code>open-quote</code>.\nLiteral string content.\nA computed timing function.\n<code>cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)</code>\n<code>cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)</code>\n<code>linear | ease | ease-in | ease-out | ease-in-out</code>\n<code>linear | ease | ease-in | ease-out | ease-in-out</code>\nlinear([]#)  =  &amp;&amp; ?  = {1, 2}\nlinear([]#)  =  &amp;&amp; ?  = {1, 2}\n…\n…\nAn alias of the computed timing function.\nThe output of the timing function given the progress ratio …\n<code>blur(&lt;length&gt;)</code>\nA computed value for a single shadow of the <code>box-shadow</code> …\n<code>brightness(&lt;factor&gt;)</code>\n<code>contrast(&lt;factor&gt;)</code>\n<code>drop-shadow(...)</code>\nA computed value for a single <code>filter</code>.\n<code>grayscale(&lt;factor&gt;)</code>\n<code>hue-rotate(&lt;angle&gt;)</code>\n<code>invert(&lt;factor&gt;)</code>\n<code>opacity(&lt;factor&gt;)</code>\n<code>saturate(&lt;factor&gt;)</code>\n<code>sepia(&lt;factor&gt;)</code>\nA computed value for the <code>drop-shadow()</code> filter.\n<code>&lt;url&gt;</code>\nThe base shadow.\nBlur radius.\nColor.\nHorizontal radius.\nWhether this is an inset box shadow.\nThe spread radius.\nVertical radius.\n<code>content</code>\nA computed value for the <code>flex-basis</code> property.\n<code>&lt;width&gt;</code>\n<code>auto</code>\nThe <code>bold</code> value.\nThe threshold from which we consider a font bold.\nThe <code>condensed</code> keyword.\nThe default angle for <code>font-style: oblique</code>. See also …\nThe <code>expanded</code> keyword.\nThe <code>extra-condensed</code> keyword.\nThe <code>extra-expanded</code> keyword.\nfont-stretch is a percentage relative to normal.\nUse a signed 8.8 fixed-point value (representable range …\nfont-weight: range 1..1000, fractional values permitted; …\nThe fraction bits, as an easy-to-access-constant.\nThe name of a font family of choice.\nThe name of a font family of choice.\nGeneric template for font property type classes that use a …\nSpecifies a prioritized list of font family names or …\nA list of font families.\nFont family names must either be given quoted as strings, …\nUse FontSettings as computed type of FontFeatureSettings.\nfont-language-override can only have a single 1-4 ASCII …\nThe computed value of font-size\nPreserve the readability of text when font fallback occurs.\nA value for the font-stretch property per:\nThis is an alias which is useful mostly as a cbindgen / …\nThe computed value of <code>font-style</code>.\nThis is an alias which is useful mostly as a cbindgen / …\nThe computed value for font-variation-settings.\nA value for the font-weight property per:\nThis is an alias which is useful mostly as a cbindgen / …\nGeneric family name.\nA generic font-family name.\n0.5 in our floating point representation.\nThe italic keyword.\nThe family name was specified in an unquoted form as a …\n<code>&lt;length-percentage&gt;</code>\nA computed value for the <code>line-height</code> property.\nThe computed value of the math-depth property.\nThe <code>normal</code> keyword.\nThe normal keyword.\nThe <code>normal</code> keyword.\nNo generic family specified, only for internal usage.\n<code>normal</code>\n<code>&lt;number&gt;</code>\nThe <code>oblique</code> keyword with the default degrees.\nThe family name was specified in a quoted form, e.g. “…\nThe <code>semi-condensed</code> keyword.\nThe <code>semi-expanded</code> keyword.\nA set of faces that vary in weight, width or slope. …\nThe <code>ultra-condensed</code> keyword.\nThe <code>ultra-expanded</code> keyword.\nReturns the stretch keyword if we map to one of the …\nReturn the bolder weight.\nThe actual computed font size.\nThe computed size, that we use to compute ems etc. This …\nThe actual list of family names.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a valid weight from a float value.\nReturns a fixed-point bit from a floating-point context.\nReturns a relevant stretch value from a keyword. …\nConverts from a computed percentage value.\nUnsafe because <code>Self::to_str</code> requires the value to …\nReturns a generic font family.\n100%\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeither this weight is bold\nWhether this is the initial font-family that might react …\nWhether this font-family came from a specified system-font.\nReturn iterator of SingleFontFamily\nIf derived from a keyword, the keyword and additional …\nReturn the lighter weight.\nThe actual list of font families specified.\nGet default value of font size.\nName of the font family.\nReturns whether we need to prioritize user fonts.\nDefault value of font-size-adjust\nThe <code>normal</code> value.\nGet computed default value of <code>font-language-override</code> with 0\nReturns the <code>normal</code> keyword value.\nReturns the oblique angle for this style.\nReturns the oblique angle for this style.\nnormal | \nParse a font-family value.\nIf there’s a generic font family on the list which is …\nGet default font family as <code>serif</code> which is a generic …\nReturn the generic ID if it is a single generic font\nSyntax of the font family.\nReturns the floating-point representation.\nConverts to a computed percentage.\nReturns this value as a <code>&amp;str</code>, backed by <code>storage</code>.\nThe actual used font size.\nThe actual used size. This is the computed font size, …\nWhen we disallow websites to override fonts, we ignore …\nReturns the value as a float.\nThe actual representation.\nThe actual representation.\nThe actual representation.\nThe actual representation.\nApply zoom to the font-size. This is usually done by …\nAn angle.\nA circular gradient.\nA conic gradient.\nA corner.\nComputed values for CSS cross-fade …\nA <code>&lt;cross-fade()&gt;</code> image. Storing this directly inside of …\nAn elliptic gradient.\nA computed radial gradient ending shape.\nComputed values for a CSS gradient. …\nA <code>&lt;gradient&gt;</code> image.  Gradients are rather large, and not …\nA horizontal direction.\nComputed values for an image according to CSS-IMAGES. …\nThe computed value for an <code>image-set()</code> image.\nAn <code>image-set()</code> function.\nA computed gradient line direction.\nA linear gradient.\n<code>none</code> variant.\nA paint worklet image. …\nA radial gradient.\nA <code>&lt;url()&gt;</code> image.\nA vertical direction.\nAll of the image percent pairings passed as arguments to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll of the image and resolution pairs.\nThe index of the selected candidate. usize::MAX for …\nStart angle of gradient\nMethod to use for color interpolation.\nMethod to use for color interpolation.\nMethod to use for color interpolation.\nCompatibility mode.\nCompatibility mode.\nLine direction\nState flags for the gradient.\nState flags for the gradient.\nState flags for the gradient.\nThe color stops and interpolation hints.\nThe color stops and interpolation hints.\nThe color stops and interpolation hints.\nCenter of gradient\nCenter of gradient\nShape of gradient\nA computed value for <code>anchor-size</code> runction.\nMargin size defined by the anchor element.\nAn <code>auto</code> value.\nThe computed <code>&lt;length&gt;</code> value.\nAn alias of computed <code>&lt;length&gt;</code> value.\nA length.\nA length.\nEither a computed <code>&lt;length&gt;</code> or the <code>auto</code> keyword.\nEither a computed <code>&lt;length&gt;</code> or a <code>&lt;number&gt;</code> value.\nA <code>&lt;length-percentage&gt;</code> value.\nA computed type for <code>&lt;length-percentage&gt; | auto</code>.\nA computed type for <code>margin</code> properties.\nA computed value for <code>max-width</code> or <code>min-height</code> property.\nA wrapper of Length, whose value must be &gt;= 0.\nEither a non-negative <code>&lt;length&gt;</code> or the <code>auto</code> keyword.\nEither a non-negative <code>&lt;length&gt;</code> or a <code>&lt;number&gt;</code>.\nA wrapper of LengthPercentageOrAuto, whose value must be …\nEither a computed NonNegativeLengthPercentage or the <code>normal</code>…\nA number.\nA number.\nA computed value for <code>min-width</code>, <code>min-height</code>, <code>width</code> or <code>height</code>…\nReturn the absolute value of this length.\nConvert to have a borrow inside the enum\nEnsures it is non negative\nClamp the value to an optional upper bound.\nClamp the value to a lower bound and an optional upper …\nClamps the value to a non-negative value.\nReturn the clamped value of this length.\nSome boilerplate to share between negative and non-negative\nValue to use in case the anchor function is invalid.\nReturns a finite (normalized and clamped to float min and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the computed value is absolute 0 or 0%.\nReturns true if the computed value is absolute 0 or 0%.\nReturns true if the computed value is absolute 0 or 0%.\nReturns the maximum between <code>self</code> and <code>other</code>.\nSets <code>self</code> to the maximum between <code>self</code> and <code>other</code>.\nConvert the computed value into used value if there is …\nConvert the computed value into used value if there is …\nReturns the minimum between <code>self</code> and <code>other</code>.\nCreate a NonNegativeLength.\nReturn a new CSSPixelLength.\nReturns a normalized (NaN turned to zero) version of this …\nReturn the pixel value of |NonNegativeLength|.\nReturn the containing pixel value.\nScale the length by a given amount.\nSize of the positioned element, expressed in that of the …\nAnchor name of the element to anchor to. If omitted (i.e. …\nReturn the length with app_unit i32 type.\nReturns the used value.\nReturns the used value.\nConvert the computed value into used value.\nConvert the computed value into used value.\nZooms a particular length.\nAn <code>abs()</code> function.\nThe representation of a calc() function with mixed lengths …\nThe leaves of a <code>&lt;length-percentage&gt;</code> calc expression.\nThe computed version of a calc() node for …\nA <code>clamp()</code> function.\nA <code>hypot()</code> function\nA node that inverts its child, e.g. Invert(10) == 1 / 10 …\nA leaf node.\nA <code>&lt;length-percentage&gt;</code> value. This can be either a <code>&lt;length&gt;</code>…\nA <code>min</code> or <code>max</code> function.\nA <code>mod()</code> or <code>rem()</code> function.\nA node that negates its child, e.g. Negate(1) == -1.\nA wrapper of LengthPercentage, whose value must be &gt;= 0.\nA product node, representing <code>a * b * c</code> where a, b, and c …\nA <code>round()</code> function.\nAn unpacked <code>&lt;length-percentage&gt;</code> that owns the <code>calc()</code> …\nA <code>sign()</code> function.\nA sum node, representing <code>a + b + c</code> where a, b, and c are …\nAn unpacked <code>&lt;length-percentage&gt;</code> that borrows the <code>calc()</code> …\nAn unpacked <code>&lt;length-percentage&gt;</code> that mutably borrows the …\nReturns the clamped non-negative values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn whether there’s any percentage in this value.\nGiven a <code>LengthPercentage</code> value <code>v</code>, construct the value …\nGiven a list of <code>LengthPercentage</code> values, construct the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the computed value is absolute 0 or 0%.\nReturns true if the computed value is absolute 0 or 0%.\nIf there are special rules for computing percentages in a …\nConvert the computed value into used value.\nConvert the computed value into used value.\nConstructs a <code>calc()</code> value.\nPrivate version of new_calc() that constructs a calc() …\nConstructs a length value.\nConstructs a percentage value.\nReturn the <code>normal</code> computed value, which is just zero.\n1px length value for SVG defaults\nResolves the percentage. Just an alias of resolve().\nResolves the percentage.\nResolves the percentage.\nConverts to a <code>&lt;length&gt;</code> if possible.\nConverts to a <code>&lt;percentage&gt;</code> if possible.\nConverts to a <code>&lt;percentage&gt;</code> with given basis. Returns None …\nReturns the used value as CSSPixelLength.\nReturns the used value.\nReturns the used value.\n0%\nThe central value.\nThe dividend calculation.\nThe divisor calculation.\nThe maximum value.\nThe minimum value.\nIs the function mod or rem?\nThe step value.\nThe rounding strategy.\nThe value to round.\nThe offset starting position is the top-left corner of the …\nOnly . This represents that  is omitted, so we use the …\nNone value.\nThe element does not have an offset starting position.\nThe computed value of <code>offset-path</code>.\n || .\nThe computed value of .\nThe computed value of <code>offset-position</code>.\nA computed offset-rotate.\nThe offset starting position is the result of using the  …\nray() function, which defines a path in the polar …\nThe computed value of ray() function.\nThe  value.\nA URL reference to an SVG shape element. If the URL does …\nThe bearing angle with <code>0deg</code> pointing up and positive angles\nThe angle value.\nReturns “auto 0deg”.\nIf auto is false, this is a fixed angle which indicates a …\nClamp <code>offset-distance</code> so that the box is entirely contained\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe “at ” part. If omitted, we use auto to represent …\nDecide the path length used when <code>offset-distance</code> is …\n part.\n part.\n<code>auto</code> value\n<code>landscape</code> or <code>portrait</code> value, no specified size.\nComputed value of the @page size descriptor\nSpecified size, paper size, or paper size and orientation.\n<code>auto</code> value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether this is the <code>auto</code> value.\nA wrapper over a <code>Percentage</code>, whose value should be clamped …\nA computed percentage.\nReturns the absolute value for this percentage.\nClamps this percentage to a non-negative percentage.\nReturns the argument unchanged.\n100%\n100%\nCalls <code>U::from(self)</code>.\nThe computed value of an <code>anchor()</code> function.\nInset defined by the anchor element.\nInset defined by the size of the anchor element.\nA computed value for the <code>aspect-ratio</code> property.\nThe keyword <code>auto</code>.\nAn <code>auto</code> value.\nThe keyword <code>auto</code>.\nThe computed value of a CSS horizontal position.\nA computed type for <code>inset</code> properties.\nAn integer value.\nA <code>&lt;length-percentage&gt;</code> value.\nThe computed value of a CSS <code>&lt;position&gt;</code>\nThe  value.\nThe computed value of an <code>auto | &lt;position&gt;</code>\nThe computed value of a CSS vertical position.\nA computed value for the <code>z-index</code> property.\nSpecifiy auto or not.\n<code>50% 50%</code>\nValue to use in case the anchor function is invalid.\nThe horizontal component of position.\nThe preferred aspect-ratio value.\nWhere relative to the target anchor element to position …\nAnchor name of the element to anchor to. If omitted, …\nThe vertical component of position.\n<code>0% 0%</code>\nA computed  value.\nReturns a new Ratio.\nA specified rectangle made of four <code>&lt;length-or-number&gt;</code> …\nA computed <code>&lt;resolution&gt;</code>.\nReturns this resolution value as dppx.\nReturns the argument unchanged.\nReturn a computed <code>resolution</code> value from a dppx float value.\nCalls <code>U::from(self)</code>.\nOpaque black color\n<code>&lt;color&gt;</code>\n<code>context-fill</code>\n<code>context-fill-opacity</code>\n<code>context-stroke</code>\n<code>context-stroke-opacity</code>\n<code>context-value</code>\n<code>context-value</code>\n<code>context-value</code>\n<code>&lt;length&gt; | &lt;percentage&gt; | &lt;number&gt;</code>\n<code>&lt;length&gt; | &lt;percentage&gt; | &lt;number&gt;</code>\n<code>none</code>\n<code>&lt;opacity-value&gt;</code>\n<code>url(...)</code>\n |  |  | context-value\n | context-fill-opacity | context-stroke-opacity\nComputed SVG Paint value\nComputed SVG Paint Kind value\n[  |  |  ]# | context-value\nAn non-negative wrapper of SVGLength.\n<code>[ &lt;length&gt; | &lt;percentage&gt; | &lt;number&gt; ]#</code>\nThe fallback color.\nThe paint source.\n<code>1px</code>.\n<code>0px</code>\nA computed value for the <code>letter-spacing</code> property.\nA computed value for the <code>initial-letter</code> property.\n[  ||  ]\nThis is generic just to make the #[derive()] code do the …\n<code>none</code>\n<code>&lt;string&gt;</code> (of which only the first grapheme cluster will be …\nThe computed value of <code>text-align</code>.\nImplements type for <code>text-decoration-thickness</code> property.\nA struct that represents the <em>used</em> value of the …\nComputed value for the text-emphasis-style property\nThe computed value of <code>text-indent</code>.\nA computed value for the <code>word-spacing</code> property.\nApply to each line after a hard break, not only first in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the text-decorations in effect for a given style.\nApply indent to non-first lines instead of first.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of indent to be applied to the inline-start of …\nWhether a line-through style is in effect.\nReturn the <code>normal</code> computed value, which is just zero.\nReturn the <code>normal</code> computed value, which is just zero.\nReturn the <code>normal</code> computed value, which is just zero.\nWhether an overline decoration is in effect.\nThe sink, &gt;=1, if specified, 0 otherwise.\nThe size, &gt;=1, or 0 if <code>normal</code>.\nWhether an underline is in effect.\nA computed <code>&lt;time&gt;</code> value.\nReturns the argument unchanged.\nCreates a time value from a seconds amount.\nCalls <code>U::from(self)</code>.\nReturns the amount of seconds this time represents.\nA intermediate type for accumulation of mismatched …\nA vector to represent the direction vector (rotate axis) …\nA intermediate type for interpolation of mismatched …\nA <code>&lt;length&gt;</code>.\ncomputed value of matrix()\nRepresents a 2D 2x3 matrix.\ncomputed value of matrix3d()\nRepresents a 3D 4x4 matrix.\n<code>none</code>\n‘none’\n‘none’\n‘none’\nSpecifies a perspective projection matrix.\nThe computed value of the <code>perspective()</code> transform function.\nA computed CSS <code>rotate</code>\nDescribes a 2D Rotation.\n‘’\nRotation in 3D space.\n‘{3} ’\nRotation in 3D space around the x-axis.\nRotation in 3D space around the y-axis.\nRotation in 3D space around the z-axis.\nA computed CSS <code>scale</code>\nA 2D scaling factor.\n‘{1,3}’\nscale3D(factorX, factorY, factorZ)\nscaleX(factor)\nscaleY(factor)\nscaleZ(factor)\nA 2D skew.\nskewX(angle)\nskewY(angle)\nA computed CSS <code>transform</code>\nA single operation in a computed CSS <code>transform</code>\nThe computed value of a CSS <code>&lt;transform-origin&gt;</code>\nA computed CSS <code>translate</code>\ntranslate(x, y) or translate(x)\n [  ? ]?\ntranslate3d(x, y, z)\ntranslateX(x)\ntranslateY(y)\ntranslateZ(z)\nApply scale on the matrix.\nApply translate on the matrix.\nThe depth.\nReturn determinant value.\nRecompose a 3D matrix. …\nRecompose a 2D matrix. …\nReturn the matrix 3x3 part (top-left corner). This is used …\nThe horizontal origin.\nGet an identity matrix\nGet an identity matrix\nReturns the initial computed value for <code>transform-origin</code>.\nConvert to a 2D Matrix\nReturn inverse matrix.\nReturn true if this has 3D components.\nReturn the multiplication of two 4x4 matrices.\nMultiply <code>pin * self</code>.\nScale the matrix by a factor.\nSet perspective on the matrix.\nConvert to a Rotate3D.\nConvert to a Scale3D.\nConvert to a Translate3D.\nTranspose a matrix.\nIf there are no size dependencies, we try to animate …\nThe vertical origin.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\n<code>auto</code>\n<code>&lt;color&gt;{2}</code>\nA computed value for the <code>cursor</code> property.\nA computed value for item of <code>image cursors</code>.\nA computed value for <code>scrollbar-color</code> property.\nWhether the image has a hotspot or not.\nThe x coordinate.\nThe y coordinate.\nThe url to parse images from.\nThe parsed images for the cursor.\nThe kind of the cursor [default | help | …].\nFirst <code>&lt;color&gt;</code>, for color of the scrollbar thumb.\nSecond <code>&lt;color&gt;</code>, for color of the scrollbar track.\n<code>none</code>\nA URL.\nComputed  | \nA trait to compute squared distances between two …\nA distance between two animatable values.\nComputes the squared distance between two animatable …\nReturns the argument unchanged.\nReturns a squared distance from its square root.\nCalls <code>U::from(self)</code>.\nReturns the square root of this squared distance.\nA clip rect for clip and image-region\nEither a clip-rect or <code>auto</code>.\nA wrapper of greater-than-or-equal-to-one values.\nA wrapper of Non-negative values.\nAn optional value, much like <code>Option&lt;T&gt;</code>, but with a defined …\nA wrapper of values between zero and one.\nGeneric values for properties related to animations and …\nReturn a reference to the containing value, if any, as a …\nReturns the <code>auto</code> value.\nGeneric types for CSS values related to backgrounds.\nCSS handling for the <code>basic-shape</code> types that are generic …\nGeneric types for CSS values related to borders.\nGeneric types for box properties.\nCalc expressions.\nEnsures it is non negative\nGeneric types for color properties.\nGeneric types for the column properties.\nConvert to ComputedPercentage, for FontFaceRule …\nGeneric types for counters-related CSS values.\nGeneric types for CSS Easing Functions. …\nGeneric types for CSS values related to effects.\nGeneric types for CSS values related to flexbox.\nGeneric types for font stuff.\nGiven a border box, resolves the clip rect against the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an absolute length from a px value.\nReturns the numeric value.\nGeneric types for the handling of grids.\n100%\nReturns the <code>100%</code> value.\nReturns the <code>100%</code> value.\nGeneric types for the handling of images.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns this Optional&lt;&gt; into a regular rust Option&lt;&gt;.\nReturns whether this value is the <code>auto</code> value.\nReturns true if the computed value is absolute 0 or 0%.\nReturns whether this value is not present.\nReturns whether this value is present.\nGeneric types for CSS values related to length.\nConvert the computed value into used value.\nGeneric types for CSS Motion Path.\nReturns a new non-negative number with the value <code>val</code>.\nCreate a NonNegativeLength.\nReturn a particular number.\n@page at-rule properties\nParses a length or a percentage, allowing the unitless …\nParses a non-negative length, optionally with quirks.\nParses a rect(, , , ), allowing quirks.\nParses a ClipRect or Auto, allowing quirks.\nGeneric types for CSS handling of specified and computed …\nReturn the pixel value of |NonNegativeLength|.\nGeneric types for CSS values related to . …\nGeneric types for CSS values that are composed of four …\nGeneric type for CSS properties that are composed by two …\nGeneric types for CSS values in SVG\nGeneric types for text properties.\nReturns the used value.\nGeneric types for CSS values that are related to …\nGeneric values for UI properties.\nGeneric types for url properties.\nReturns a <code>0%</code> value.\nThe initial value. However, we serialize this as 0s if the …\nUse default timeline. The animation’s timeline is a …\nThe <code>animation-duration</code> property.\nA value for the .\nThe view() notation. …\nA generic value for the …\nThe scroll() notation. …\nThe time value, &lt;time [0s,∞]&gt;.\nThe scroll-timeline name or view-timeline-name. This also …\nThe view() notation. …\nReturns the <code>auto</code> value.\nReturns the <code>auto</code> value.\nThe axis of scrolling that drives the progress of the …\nThe end inset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn adjustment of the view progress visibility range.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it is <code>auto</code>.\nReturns true if it is auto (i.e. the default value).\nReturns true if it is auto.\nParse the inner function arguments of <code>view()</code>.\nReturns the amount of seconds this time represents.\nThe start inset in the relevant axis.\n<code>contain</code>\n<code>cover</code>\n<code>&lt;width&gt; &lt;height&gt;</code>\nA generic value for the <code>background-size</code> property.\nReturns <code>auto auto</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExplicit height.\nExplicit width.\nThe arc command.\nThis indicates that the larger or smaller, respectively, …\nThis indicates that the arc that is traced around the …\nThis indicates that the s are relative to the command’s …\nThis indicates the command is absolute or relative. …\nCounter-clockwise. The default value. (This also …\nhttps://drafts.csswg.org/css-shapes/#funcdef-circle\nDefines a circle with a center and a radius.\nThe closepath command.\nDefines a pair of coordinates, representing a rightward …\nThe cubic Bézier curve command.\nClockwise. (This also represents 1 in the svg path.)\nDepending on which kind of element this style value …\nhttps://drafts.csswg.org/css-shapes/#funcdef-ellipse\nDefines an ellipse with a center and x-axis/y-axis radii.\nThe .\nA value for the <code>clip-path</code> property.\nhttps://drafts.csswg.org/css-shapes/#funcdef-inset\npath() function or shape() function.\nA generic type for representing the <code>polygon()</code> function\nThis is a more general shape(path) command type, for both …\nA value for the <code>shape-outside</code> property.\nhttps://drafts.csswg.org/css-shapes/#typedef-shape-radius\nThe hline command.\nChoose the large one. (This also represents 1 in the svg …\nThe line command.\nThe move command.\nThe path function.\nDefines a path with SVG path syntax.\nDefines a path() or shape().\nDefines a polygon with pair arguments.\nCoordinates for Polygon.\nThe quadratic Bézier curve command.\nThe .\nThe shape function defined in css-shape-2. shape() = shape(…\nDefines a shape function, which is identical to path() but …\nhttps://drafts.csswg.org/css-shapes-1/#typedef-shape-box\nhttps://drafts.fxtf.org/css-masking-1/#typedef-geometry-box\nChoose the small one. The default value. (This also …\nThe smooth command.\nThe smooth quadratic Bézier curve command.\nThis relative to the top-left corner of the reference box.\nThe vline command.\nReturns the slice of PathCommand.\nReturns the slice of GenericShapeCommand&lt;..&gt;.\nThe shape command data. Note that the starting point will …\nA collection of (x, y) coordinates to draw the polygon.\nThe filling rule for a polygon.\nThe filling rule for the svg path.\nThe filling rule for this shape.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if it is absolute, i.e. it is To.\nSkip the serialization if the author omits the box or …\nCreate ByTo based on the flag if it is absolute.\nCreate a CoordinatePair.\nCreate a normalized copy of this PathCommand. Absolute …\nParse this keyword.\nParse with some parameters.\nParse this keyword.\nParse this keyword.\nParse this keyword.\nParse this keyword.\nParse the inner function arguments of <code>inset()</code>\nParse the inner arguments of a <code>polygon</code> function.\nParse the inner arguments of a <code>path</code> function.\nParse the inner arguments of a <code>shape</code> function. shape() = …\nThe svg path data.\nThe serialization of the svg path.\n<code>auto</code>\nA generic value for the <code>border-*-radius</code> longhand …\nA generic value for a single side of a <code>border-image-width</code> …\nA generic value for the <code>border-image-slice</code> property.\nA generic value for <code>border-radius</code> and <code>inset()</code>.\nA generic value for the <code>border-spacing</code> property.\n<code>&lt;length-or-percentage&gt;</code>\n<code>&lt;number&gt;</code>\nThe bottom left radius.\nThe bottom right radius.\nWhether to fill the middle part.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the horizontal spacing.\nReturns the <code>100%</code> value.\nReturns the <code>100%</code> value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrivially create a <code>BorderCornerRadius</code>.\nTrivially create a <code>BorderCornerRadius</code>.\nReturns a new <code>BorderRadius&lt;L&gt;</code>.\nThe offsets.\nReturns <code>1</code>.\nReturns <code>1</code>.\nSerialises two given rects following the syntax of the `…\nThe top left radius.\nThe top right radius.\nReturns the vertical spacing.\nReturns <code>0 0</code>.\n“auto ”\nThe keywords ‘auto none’,\n…\nNote that we only implement -webkit-line-clamp as a …\nA generic value for the <code>perspective</code> property.\nA generic value for the <code>vertical-align</code> property.\nOne of the vertical-align keywords.\n<code>&lt;length-percentage&gt;</code>\nA non-negative length.\nA non-negative length.\nThe keyword <code>none</code>.\nThe keyword <code>none</code>.\nConverts contain-intrinsic-size to auto style.\nReturns <code>baseline</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether we’re the <code>none</code> value.\nReturns the <code>none</code> value.\nReturns <code>none</code>.\nParse this keyword.\nAllow all units.\nAn <code>abs()</code> function.\nThe level of any argument being serialized in <code>to_css_impl</code>.\nThe root of an operand node’s argument, e.g. <code>min(10, 20)</code>…\nA component of a color (r, g, b, h, s, l, alpha, etc.)\nA trait that represents all the stuff a valid leaf of a …\nExpected units we allow parsing within a <code>calc()</code> expression.\nThe root of a calculation tree.\nA <code>clamp()</code> function.\n<code>round(down, a, b)</code> round a down to the nearest multiple of b\nA generic node in a calc expression.\nA <code>hypot()</code> function\nA node that inverts its child, e.g. Invert(10) == 1 / 10 …\nA leaf node.\n<code>max()</code>\n<code>min()</code>\nA <code>min</code> or <code>max</code> function.\nWhether we’re a <code>min</code> or <code>max</code> function.\n<code>mod()</code>\nA <code>mod()</code> or <code>rem()</code> function.\nWhether we’re a <code>mod</code> or <code>rem</code> function.\n<code>round(nearest, a, b)</code> round a to the nearest multiple of b\nA node that negates its child, e.g. Negate(1) == -1.\nAny other values serialized in the tree.\nFor percentage resolution, sometimes we can’t assume …\nA product node, representing <code>a * b * c</code> where a, b, and c …\n<code>rem()</code>\nA <code>round()</code> function.\nThe strategy used in <code>round()</code>\nA <code>sign()</code> function.\nThis determines the order in which we serialize members of …\nA sum node, representing <code>a + b + c</code> where a, b, and c are …\n<code>round(to-zero, a, b)</code> round a to the nearest multiple of b …\nThe percent basis is not known-positive, we can’t …\n<code>round(up, a, b)</code> round a up to the nearest multiple of b\nThe percent basis is known-positive, we assume larger …\nGet a flags value with all known bits set.\nReturns the leaf if we can (if simplification has allowed …\nReturns a float value if the leaf is a number.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns true if this unit is allowed to be summed with the …\nChange all the leaf nodes to have the given value. This is …\nDo a partial comparison of these values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nCreate a dummy CalcNode that can be used to do …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturn whether a leaf is greater than another.\nReturn whether a leaf is greater than another.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTries to simplify this expression into a <code>&lt;length&gt;</code> or …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether this value is infinite.\nWhether this value is NaN.\nWhether this value is known-negative.\nReturn true if a product is distributive over this node. …\nReturn true if the units of both leaves are equal. (NOTE: …\nReturns whether the flags only represent a single unit. …\nWhether this value is zero.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturn whether a leaf is less than another.\nReturn whether a leaf is less than another.\nReturn whether a leaf is smaller or equal than another.\nReturn whether a leaf is smaller or equal than another.\nMap the value of this node with the given operation.\nMap the value of this node with the given operation.\nConvert this <code>CalcNode</code> into a <code>CalcNode</code> with a different …\nGiven a function name, and the location from where the …\nNegate the node inline.  If the node is distributive, it …\nCreate a new leaf with a number value.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nParse a top-level <code>calc</code> expression, with all nested …\nConvenience parsing function for <code>&lt;angle&gt;</code>.\nConvenience parsing function for integers.\nConvenience parsing function for <code>&lt;length&gt;</code>.\nConvenience parsing function for <code>&lt;length&gt; | &lt;percentage&gt;</code>.\nConvenience parsing function for <code>&lt;number&gt;</code>.\nTries to parse a single element in the expression, that …\nConvenience parsing function for percentages.\nParse a top-level <code>calc</code> expression, and all the products …\nConvenience parsing function for <code>&lt;resolution&gt;</code>.\nConvenience parsing function for <code>&lt;time&gt;</code>.\nThe intersection of a source flags value with the …\nResolve this node into a value.\nResolve this node into a value, given a function that maps …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCreate a new leaf containing the sign() result of the …\nCanonicalizes the expression if necessary.\nSimplifies and sorts the kids in the whole calculation …\nThis function simplifies and sorts the calculation of the …\nReturns the sort key for simplification.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTries to simplify this expression into an <code>Angle</code> value.\nhttps://drafts.csswg.org/css-values/#calc-serialize\nTries to simplify this expression into a <code>&lt;number&gt;</code> value.\nTries to simplify this expression into a <code>&lt;percentage&gt;</code> …\nTries to simplify the expression into a <code>&lt;resolution&gt;</code> value.\nTries to simplify this expression into a <code>&lt;time&gt;</code> value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTries a generic arithmetic operation.\nTries to apply a generic arithmetic operator\nTry to merge the right leaf into the left by using a …\nTries to merge one node into another using the product, …\nTries to merge one leaf into another using the sum, that …\nTries to merge one node into another using the sum, that …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the unit of the leaf.\nIf the node has a valid unit outcome, then return it, …\nReturns the unitless value of this leaf if one is …\nVisits all the nodes in this calculation tree recursively, …\nThe central value.\nThe dividend calculation.\nThe divisor calculation.\nThe maximum value.\nThe minimum value.\nIs the function mod or rem?\nThe step value.\nThe rounding strategy.\nThe value to round.\nThe actual numeric color.\n<code>auto</code>\nAn opaque black color.\nA <code>&lt;color&gt;</code>.\nThe color-mix() function.\nFlags used to modify the calculation of a color mix result.\nThe <code>CurrentColor</code> keyword.\nCaret color is effectively a ColorOrAuto, but resolves <code>auto</code>…\nThis struct represents a combined color from a numeric …\nA restricted version of the css <code>color-mix()</code> function, …\nEither <code>&lt;color&gt;</code> or <code>auto</code>.\nNormalize the weights of the mix.\nThe result should always be converted to the modern color …\nA fully transparent color.\nAn opaque white color.\nGet a flags value with all known bits set.\nIf this color is absolute return it’s value, otherwise …\nReturns the <code>auto</code> value.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns a color value representing currentcolor.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreate a new computed <code>Color</code> from a given color-mix, …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this color is an absolute color.\nWhether all known bits in this flags value are set.\nWhether it is a currentcolor value (no numeric color …\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nMix the colors so that we get a single color. If any of …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCombine this complex color with the given foreground color …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe keyword <code>auto</code>.\nA generic type for <code>column-count</code> values.\nA positive integer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether this value is <code>auto</code>.\n<code>attr([namespace? </code>|<code>]? ident)</code>\n<code>close-quote</code>.\n<code>counter(name, style)</code>.\n<code>counters(name, separator, style)</code>.\nThe specified value for the <code>content</code> property.\nItems for the <code>content</code> property.\nThe non-normal, non-none values of the content property.\nA generic value for the <code>counter-increment</code> property.\nA name / value pair for counters.\nA generic value for the <code>counter-reset</code> property.\nA generic value for the <code>counter-set</code> property.\nA generic value for lists of counters.\nimage-set(url) | url(url)\nContent items.\n<code>no-close-quote</code>.\n<code>no-open-quote</code>.\n<code>none</code> reserved keyword.\n<code>normal</code> reserved keyword.\n<code>open-quote</code>.\nLiteral string content.\nThe index at which alt text starts, always non-zero. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether <code>self</code> represents list of items.\nIf true, then this represents <code>reversed(name)</code>. NOTE: It can …\nThe actual content items. Note that, past the alt marker, …\nThe name of the counter.\nReturns a new value for <code>counter-increment</code>.\nReturns a new value for <code>counter-set</code>.\nReturns a new value for <code>counter-reset</code>.\nSet <code>content</code> property to <code>normal</code>.\nThe value of the counter / increment / etc.\nBefore flag, defined as per …\n<code>cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)</code>\n<code>linear | ease | ease-in | ease-out | ease-in-out</code>\nlinear([]#)  =  &amp;&amp; ?  = {1, 2}\n…\nA generic easing function.\nThe output of the timing function given the progress ratio …\n<code>ease</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it is <code>ease</code>.\nReturns true if the name matches any keyword.\nParse this keyword.\nGenerate the ComputedTimingFunction without Context.\n<code>blur(&lt;length&gt;)</code>\n<code>brightness(&lt;factor&gt;)</code>\n<code>contrast(&lt;factor&gt;)</code>\n<code>drop-shadow(...)</code>\nA generic value for a single <code>box-shadow</code>.\nA generic value for a single <code>filter</code>.\nA generic value for the <code>drop-shadow()</code> filter and the …\n<code>grayscale(&lt;factor&gt;)</code>\n<code>hue-rotate(&lt;angle&gt;)</code>\n<code>invert(&lt;factor&gt;)</code>\n<code>opacity(&lt;factor&gt;)</code>\n<code>saturate(&lt;factor&gt;)</code>\n<code>sepia(&lt;factor&gt;)</code>\n<code>&lt;url&gt;</code>\nThe base shadow.\nBlur radius.\nColor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHorizontal radius.\nWhether this is an inset box shadow.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe spread radius.\nGenerate the ComputedFilter without Context.\nVertical radius.\n<code>content</code>\nA generic value for the <code>flex-basis</code> property.\n<code>&lt;width&gt;</code>\n<code>auto</code>\n<code>auto</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>0%</code>\nhttps://drafts.csswg.org/css-fonts-4/#feature-tag-value\nA value both for font-variation-settings and …\nA generic value for the <code>font-style</code> property.\nA font four-character tag, represented as a u32 for …\nA generic value for the <code>font-size-adjust</code> property.\nA generic value for the <code>line-height</code> property.\n<code>&lt;length-percentage&gt;</code>\n<code>normal</code>\n<code>&lt;number&gt;</code>\nA trait for values that are labelled with a FontTag (for …\nVariation setting for a single feature, see:\nGets a clamped angle in degrees from a specified Angle.\nThe default angle for <code>font-style: oblique</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault value of font-size-adjust\nDefault value of font settings as <code>normal</code>.\nReturns <code>normal</code>.\nhttps://drafts.csswg.org/css-fonts-4/#feature-tag-value\nThis is the <code>&lt;string&gt; &lt;number&gt;</code> part of the …\n…\nParse a suitable angle for font-style: oblique.\nThe value’s tag.\nA four-character tag, packed into a u32 (one byte per …\nA four-character tag, packed into a u32 (one byte per …\nThe actual value.\nThe actual value.\n<code>auto</code>\nAn <code>&lt;auto-fill&gt;</code> keyword allowed only for <code>&lt;auto-repeat&gt;</code>\nAn <code>&lt;auto-fit&gt;</code> keyword allowed only for <code>&lt;auto-repeat&gt;</code>\nThe generic type is almost always a non-negative …\nA flexible <code>&lt;track-breadth&gt;</code>\nA <code>fit-content</code> function.\nA flex fraction specified in <code>fr</code> units.\nA <code>&lt;grid-line&gt;</code> type.\nVariants for <code>&lt;grid-template-rows&gt; | &lt;grid-template-columns&gt;</code>\nA <code>&lt;track-size&gt;+</code>. We use the empty slice as <code>auto</code>, and …\nThe <code>&lt;line-name-list&gt;</code> for subgrids.\nA single value for <code>&lt;line-names&gt;</code> or <code>&lt;name-repeat&gt;</code>.\nThe <code>&lt;name-repeat&gt;</code> for subgrids.\nA track breadth for explicit grid track sizing. It’s …\nA grid <code>&lt;track-list&gt;</code> type.\nTrack list values. Can be  or \nThe structure containing <code>&lt;line-names&gt;</code> and <code>&lt;track-size&gt;</code> …\nA <code>&lt;track-size&gt;</code> type for explicit grid track sizing. Like …\nThe initial value.\nThe initial value.\n<code>&lt;line-names&gt;</code>.\nSee above.\nThese are the limits that we choose to clamp grid line …\n<code>masonry</code> value. …\n<code>max-content</code>\n<code>min-content</code>\nA <code>minmax</code> function for a range over an inflexible …\n<code>none</code> value.\nA positive integer. This is allowed only for <code>&lt;track-repeat&gt;</code>…\n<code>&lt;name-repeat&gt;</code>.\nThe initial argument of the <code>repeat</code> function.\nA <code>subgrid &lt;line-name-list&gt;?</code> TODO: Support animations for …\nThe grid <code>&lt;track-list&gt;</code>\nA  value.\nA  value.\nThe <code>auto</code> value.\nThe index in <code>values</code> where our <code>&lt;auto-repeat&gt;</code> value is, if …\nCheck if <code>self</code> makes <code>other</code> omittable according to the rules …\nHelper function for serializing identifiers with a prefix …\nThe number of times for the value to be repeated (could …\nThe number of times for the value to be repeated (could …\nThe pre-computed length of line_names, without the length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether this track list has an <code>&lt;auto-repeat&gt;</code> value.\nA custom identifier for named lines, or the empty atom …\nReturns the initial value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether this <code>&lt;grid-line&gt;</code> represents an <code>auto</code> value.\nReturns true if it is auto-fill.\nWhether this track list is an explicit track list (that …\nCheck whether this is a <code>&lt;fixed-breadth&gt;</code> (i.e., it only has …\nCheck whether this is a <code>&lt;fixed-size&gt;</code>\nCheck whether this <code>&lt;grid-line&gt;</code> represents a <code>&lt;custom-ident&gt;</code> …\nReturns true if <code>self</code> is the initial value.\nReturns true if current value is same as its initial value …\nReturns true if <code>self</code> is the initial value.\nReturns true if <code>self</code> is the initial value.\nFlag to check whether it’s a <code>span</code> keyword.\n<code>&lt;line-names&gt;</code> accompanying <code>&lt;track_size&gt;</code> values.\n<code>&lt;line-names&gt;</code> accompanying <code>&lt;track-size&gt; | &lt;track-repeat&gt;</code> …\nThis represents <code>&lt;line-names&gt;+</code>. The length of the outer …\nThe line name list.\nReturns the length of <code>&lt;line-names&gt;</code> after expanding …\nDenotes the nth grid line from grid item’s placement.\nParses a <code>GridTemplateComponent&lt;LengthPercentage&gt;</code> except …\nReturns length of the s \n<code>&lt;track-size&gt;</code> values.\nA vector of <code>&lt;track-size&gt; | &lt;track-repeat&gt;</code> values.\nA circular gradient.\nA color value.\nA color stop. …\nA complex color stop, with a position.\nA conic gradient.\nA <code>&lt;cross-fade()&gt;</code> image. Storing this directly inside of …\nAn elliptic gradient.\nA circle extent.\nAn ellipse extent.\nA circle shape.\nhttps://drafts.csswg.org/css-images-4/#cross-fade-function\nAn optional percent and a cross fade image.\nAn image or a color. <code>cross-fade</code> takes either when blending …\nAn ellipse shape.\nA radial gradient’s ending shape.\nA CSS gradient. …\nA gradient item. …\nAn <code>&lt;image&gt; | none</code> value.\nhttps://drafts.csswg.org/css-images-4/#image-set-notation\nAn optional percent and a cross fade image.\nA <code>&lt;gradient&gt;</code> image.  Gradients are rather large, and not …\nWhether we used the modern notation or the compatibility …\nState flags stored on each variant of a Gradient.\nSet if the color interpolation method matches the default …\nA boxed image value. Boxing provides indirection so images …\nAn <code>image-set()</code> function.\nAn interpolation hint.\nThe direction of a linear gradient.\nA linear gradient.\nModern syntax.\n<code>-moz</code> prefix\n<code>none</code> variant.\nSpecified values for a paint worklet. …\nA paint worklet image. …\nSet if this is a repeating gradient.\nA radial gradient.\nAn ellipse pair of radii.\nA circle radius.\nhttps://drafts.csswg.org/css-images/#typedef-extent-keyword\nA simple color stop, without position.\nA <code>&lt;url()&gt;</code> image.\n<code>-webkit</code> prefix.\nGet a flags value with all known bits set.\nThe arguments for the worklet. TODO: store a parsed …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe color of this stop.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nAll of the image percent pairings passed as arguments to …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCreates an already specified image value from an already …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nParse this keyword from a string slice.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nTrue if mime_type has been specified\nA color or image that will be blended when cross-fade is …\n<code>&lt;image&gt;</code>. <code>&lt;string&gt;</code> is converted to <code>Image::Url</code> at parse time.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the color stop into an appropriate <code>GradientItem</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nAll of the image and resolution pairs.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe <code>type(&lt;string&gt;)</code> (Optional) Specify the image’s MIME …\nThe name the worklet was registered with.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n = ? &amp;&amp; [  |  ]\nParse this keyword.\ncross-fade() = cross-fade( # )\nParse a conic gradient.\nProvides an alternate method for parsing, but forbidding …\nParses a linear gradient. GradientCompatMode can change …\nProvides an alternate method for parsing, but only for …\nParses a radial gradient.\nNot used for -webkit-gradient syntax and conic-gradient\nProvides an alternate method for parsing that associates …\nThe percent of the final image that <code>image</code> will be.\nWhether this direction points towards, and thus can be …\nThe position of this stop.\nThe intersection of a source flags value with the …\nThe <code>&lt;resolution&gt;</code>.\nThe index of the selected candidate. usize::MAX for …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSerialises this direction according to the compatibility …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTry to parse a color interpolation method.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nStart angle of gradient\nMethod to use for color interpolation.\nMethod to use for color interpolation.\nMethod to use for color interpolation.\nCompatibility mode.\nCompatibility mode.\nLine direction\nState flags for the gradient.\nState flags for the gradient.\nState flags for the gradient.\nThe color stops and interpolation hints.\nThe color stops and interpolation hints.\nThe color stops and interpolation hints.\nCenter of gradient\nCenter of gradient\nShape of gradient\nThe color for the stop.\nThe position for the stop.\nMargin size defined by the anchor element.\nKeyword values for the anchor size function.\nAn <code>auto</code> value.\nBlock size of the anchor element.\nAnchor size function used by sizing, margin and inset …\nA generic <code>&lt;length&gt;</code> | <code>&lt;number&gt;</code> value for the <code>tab-size</code> …\nA <code>&lt;length-percentage&gt; | auto</code> value.\nA generic <code>&lt;length-percentage&gt;</code> | normal` value.\nSpecified type for <code>margin</code> properties, which allows the use …\nA generic value for the <code>max-width</code> or <code>max-height</code> property.\nA generic value for the <code>width</code>, <code>height</code>, <code>min-width</code>, or …\nHeight of the anchor element.\nInline size of the anchor element.\nA length.\nA <code>&lt;length-percentage&gt;</code> value.\nMagic value for nothing.\nA number.\nSame as <code>Block</code>, resolved against the positioned element’s …\nSame as <code>Inline</code>, resolved against the positioned element’…\nWidth of the anchor element.\nConvert to have a borrow inside the enum\n<code>auto</code> value.\n<code>auto</code> value.\nResolves <code>auto</code> values by calling <code>f</code>.\nClamps the value to a non-negative value.\nValue to use in case the anchor function is invalid.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is the <code>auto</code> value.\nReturns whether we’re the auto value.\nReturn true if it is ‘auto’.\nReturns true if the computed value is absolute 0 or 0%.\nReturns true if the computed value is absolute 0 or 0%.\nReturns true if the computed value is absolute 0 or 0%.\nReturns true if the computed value is absolute 0 or 0%.\nMaps the length of this value.\nMaybe resolves the percentage.\nConvert the computed value into used value if there is …\nConvert the computed value into used value if there is …\nReturns the non-<code>auto</code> value, if any.\n<code>none</code> value.\nReturns the normal value.\nParse this keyword.\nParses a length or a percentage, allowing the unitless …\nParses a non-negative length-percentage, allowing the …\nParses a length, allowing the unitless length quirk. …\nParses, with quirks.\nParses, with quirks.\nParses an inset type, allowing the unitless length quirk. …\nA helper function to parse this with quirks or not and so …\nResolves the percentage.\nSize of the positioned element, expressed in that of the …\nAnchor name of the element to anchor to. If omitted (i.e. …\nReturns the used value.\nReturns the used value.\nConvert the computed value into used value.\nConvert the computed value into used value.\nReturns a value representing <code>0%</code>.\nReturns a value representing <code>0%</code>.\nReturns <code>0%</code>.\nThe offset starting position is the top-left corner of the …\nOnly . This represents that  is omitted, so we use the …\nThe offset-path property. offset-path: none |  || \nThe  value.  = &lt;ray()&gt; |  | \nThe offset-position property, which specifies the offset …\nThe <code>ray()</code> function, …\nNone value.\nThe element does not have an offset starting position.\n || .\nThe offset starting position is the result of using the  …\nray() function, which defines a path in the polar …\nThe  in ray() function.\nThe  value.\nA URL reference to an SVG shape element. If the URL does …\nThe bearing angle with <code>0deg</code> pointing up and positive angles\nClamp <code>offset-distance</code> so that the box is entirely contained\nReturn error if we try to deserialize the url, for Gecko …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn None.\nReturns the initial value, normal.\nParse this keyword.\nParse the inner arguments of a <code>ray</code> function.\nThe “at ” part. If omitted, we use auto to represent …\nDecide the path length used when <code>offset-distance</code> is …\n part.\n part.\nISO A3 media\nISO A4 media\nISO A5 media\n<code>auto</code> value.\nISO B4 media\nISO B5 media\nPage size property\nJIS B4 media\nJIS B5 media\nLandscape orientation\nNorth American Ledger size\nNorth American Legal size\nNorth American Letter size\nAn orientation with no size.\nPage orientation names.\nPaper orientation\nPage size names.\nPaper size by name\nPortrait orientation\nrotate-left (counter-clockwise)\nrotate-right (clockwise)\nPage dimensions.\nupright\n<code>auto</code> value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is the <code>auto</code> value.\nGets the long edge length of the paper size\nParse this keyword.\nParse this keyword.\nParse this keyword.\nGets the short edge length of the paper size\nInset defined by the anchor element.\nAnchor side for the anchor positioning function.\nKeyword values for the anchor positioning function.\nInset defined by the size of the anchor element.\nThe keyword <code>auto</code>.\nThe keyword <code>auto</code>.\nAn <code>auto</code> value.\nBottom of the anchor element.\nHalfway between <code>start</code> and <code>end</code> sides.\nSame as above, but for the end side.\nAnchor function used by inset properties. This resolves to …\nA generic value for the <code>aspect-ratio</code> property, the value …\nSpecified type for <code>inset</code> properties, which allows the use …\nA generic type for representing a CSS position.\nA generic type for representing an <code>Auto | &lt;position&gt;</code>. This …\nA generic value for the <code>z-index</code> property.\nInside relative (i.e. Same side) to the inset property it…\nAn integer value.\nA keyword value for the anchor side.\nLeft of the anchor element.\nA <code>&lt;length-percentage&gt;</code> value.\nWithout specified ratio\nSame as above, but outside (i.e. Opposite side).\nPercentage value between the <code>start</code> and <code>end</code> sides.\nThe  value.\nImplements a method that checks if the position is …\nRatio or None.\nWith specified ratio\nRight of the anchor element.\nSame as above, but for the end side.\nSame as <code>start</code>, resolved against the positioned element’s …\nRefers to the start side of the anchor element for the …\nTop of the anchor element.\nReturn <code>auto</code>.\nReturns <code>auto</code>\nReturns <code>auto</code>\n<code>auto</code> value.\nSpecifiy auto or not.\n<code>50% 50%</code>\n<code>center center</code>\nValue to use in case the anchor function is invalid.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nReturns Self by a valid ratio.\nThe horizontal component of position.\nReturns the integer value if it is an integer, or <code>auto</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if it is ‘auto’.\nReturns whether <code>self</code> is <code>auto</code>.\nReturn true if it is ‘auto’.\nReturns if the position component is 50% or center. For …\nReturns true if this uses a 3 value syntax.\nReturns a new position.\nParse this keyword.\nParses an inset type, allowing the unitless length quirk. …\nParses a <code>&lt;bg-position&gt;</code>, with quirks.\nThe preferred aspect-ratio value.\nWhere relative to the target anchor element to position …\nAnchor name of the element to anchor to. If omitted, …\nThe vertical component of position.\n<code>0% 0%</code>\nA generic value for the <code>&lt;ratio&gt;</code> value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if this is a degenerate ratio. …\nReturns a new Ratio.\nReturns the f32 value by dividing the first value by the …\nReturns the used value. A ratio of 0/0 behaves as the …\nA CSS value made of four components, where its <code>ToCss</code> impl …\nReturns a rect with all the values equal to <code>v</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new <code>Rect&lt;T&gt;</code> value.\nParses a new <code>Rect&lt;T&gt;</code> value which all components must be …\nParses a new <code>Rect&lt;T&gt;</code> value with the given parse function.\nA generic size, for <code>border-*-radius</code> longhand properties, or\nReturns the argument unchanged.\nReturns the height component.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Size2D</code> for an area of given width and height.\nParse a <code>Size2D</code> with a given parsing function.\nReturns the width component.\nOpaque black color\nA color.\n<code>&lt;color&gt;</code>\n<code>context-fill</code>\n<code>context-fill-opacity</code>\n<code>context-stroke</code>\n<code>context-stroke-opacity</code>\n<code>context-value</code>\n<code>context-value</code>\nAn SVG length value supports <code>context-value</code> in addition to …\nAn SVG opacity value accepts <code>context-{fill,stroke}-opacity</code> …\nAn SVG paint value\nThe fallback of an SVG paint server value.\nAn SVG paint value without the fallback.\nGeneric value for stroke-dasharray.\n<code>&lt;length&gt; | &lt;percentage&gt; | &lt;number&gt;</code>\nThe <code>none</code> keyword.\n<code>none</code>\n<code>&lt;opacity-value&gt;</code>\n<code>url(...)</code>\nA magic value that represents no fallback specified and …\n<code>[ &lt;length&gt; | &lt;percentage&gt; | &lt;number&gt; ]#</code>\nThe fallback color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe paint source.\n<code>1px</code>.\n<code>0px</code>\nA generic value for the <code>initial-letter</code> property.\nImplements type for text-decoration-thickness which takes …\nImplements type for text-indent which takes the grammar of …\n<code>normal</code>\nA generic spacing value for the <code>letter-spacing</code> and …\n<code>&lt;value&gt;</code>\n<code>Auto</code> value.\nApply to each line after a hard break, not only first in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nApply indent to non-first lines instead of first.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is the <code>Auto</code> value.\nThe amount of indent to be applied to the inline-start of …\nReturns <code>normal</code>.\nReturns <code>normal</code>.\nParses.\nThe sink, &gt;=1, if specified, 0 otherwise.\nThe size, &gt;=1, or 0 if <code>normal</code>.\nReturn the initial zero value.\nA intermediate type for accumulation of mismatched …\nA generic 2D transformation matrix.\nA value for the <code>perspective()</code> transform function, which is …\nA value of the <code>Rotate</code> property\nA value of the <code>Scale</code> property\nA value of the <code>transform</code> property\nA single operation in the list of a <code>transform</code> value\nA generic transform origin.\nA value of the <code>translate</code> property\nA intermediate type for interpolation of mismatched …\nA trait to check if the current 3D vector is parallel to …\nA <code>&lt;length&gt;</code>.\nRepresents a 2D 2x3 matrix.\nRepresents a 3D 4x4 matrix.\n<code>none</code>\n‘none’\n‘none’\n‘none’\nSpecifies a perspective projection matrix.\nDescribes a 2D Rotation.\n‘’\nRotation in 3D space.\n‘{3} ’\nRotation in 3D space around the x-axis.\nRotation in 3D space around the y-axis.\nRotation in 3D space around the z-axis.\nA 2D scaling factor.\n‘{1,3}’\nscale3D(factorX, factorY, factorZ)\nscaleX(factor)\nscaleY(factor)\nscaleZ(factor)\nA 2D skew.\nskewX(angle)\nskewY(angle)\nConvert a length type into the absolute lengths.\nSupport the conversion to a 3d matrix.\nA little helper to deal with both specified and computed …\ntranslate(x, y) or translate(x)\n [  ? ]?\ntranslate3d(x, y, z)\ntranslateX(x)\ntranslateY(y)\ntranslateZ(z)\nApply scale on the matrix.\nApply translate on the matrix.\nConverts a series of components to a 3d matrix.\nReturn the transform matrix from a perspective length.\nThe depth.\nReturn determinant value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nReturn the matrix 3x3 part (top-left corner). This is used …\nReturn the normalized direction vector and its angle for …\nThe horizontal origin.\nGet an identity matrix\nGet an identity matrix\nReturns <code>f32::INFINITY</code> or the result of a function on the …\nReturns the initial specified value for <code>transform-origin</code>.\nReturns the initial computed value for <code>transform-origin</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a 2D Matrix\nReturn inverse matrix.\nCheck if it is a 3d transform function.\nReturn true if this has 3D components.\nReturns true if this is parallel to the vector.\nCheck if it is any rotate function.\nCheck if it is any scale function\nCheck if it is any translate function\nReturn the multiplication of two 4x4 matrices.\nReturns a new transform origin.\n<code>none</code>\nParse this keyword.\nInternal parse function for deciding if we wish to accept …\nMultiply <code>pin * self</code>.\nReturn the radians value as a 64-bit floating point value.\nScale the matrix by a factor.\nSet perspective on the matrix.\nReturn the equivalent 3d matrix.\nIf |reference_box| is None, we will drop the percent part …\nReturns the absolute length as pixel value.\nConvert to a Rotate3D.\nConvert to a Scale3D.\nReturn the equivalent 3d matrix of this transform list.\nSame as Transform::to_transform_3d_matrix but a f64 …\nConvert to a Translate3D.\nTranspose a matrix.\nIf there are no size dependencies, we try to animate …\nThe vertical origin.\nReturns the <code>0 0</code> value.\n<code>auto</code>\n<code>&lt;color&gt;{2}</code>\nA generic value for the <code>cursor</code> property.\nA generic value for item of <code>image cursors</code>.\nA generic value for <code>scrollbar-color</code> property.\nSet <code>cursor</code> to <code>auto</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the image has a hotspot or not.\nThe x coordinate.\nThe y coordinate.\nThe url to parse images from.\nThe parsed images for the cursor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of the cursor [default | help | …].\nFirst <code>&lt;color&gt;</code>, for color of the scrollbar thumb.\nSecond <code>&lt;color&gt;</code>, for color of the scrollbar track.\nAn image url or none, used for example in list-style-image\n<code>none</code>\nA URL.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether the value is <code>none</code>.\nInitial “none” value for properties such as …\nInformation needed to resolve a given value.\nThe resolved value type we’re going to be converted to.\nA trait to represent the conversion between resolved and …\nResolved animation values.\nResolved color values.\nResolved values for counter properties\nReturns the argument unchanged.\nConvert a resolved value to resolved value form.\nCalls <code>U::from(self)</code>.\nThe style we’re resolving for. This is useful to resolve …\nConvert a resolved value to a resolved value.\nWhether quirks are allowed in this context.\nQuirks are always allowed, used for SVG lengths.\n |  …\nAn attr(…) rule\n<code>auto</code>\nThe generic type is almost always a non-negative …\nA flexible <code>&lt;track-breadth&gt;</code>\nrect(…)\nrect(…) | auto\nA <code>fit-content</code> function.\nA flex fraction specified in <code>fr</code> units.\nA Number which is &gt;= 1.0.\nThe specified value of a <code>&lt;grid-line&gt;</code>.\n<code>&lt;grid-template-rows&gt; | &lt;grid-template-columns&gt;</code>\nThe specified value of a grid <code>&lt;track-size&gt;+</code>\nA specified <code>&lt;integer&gt;</code>, optionally coming from a <code>calc()</code> …\n<code>masonry</code> value. …\n<code>max-content</code>\n<code>min-content</code>\nA <code>minmax</code> function for a range over an inflexible …\nQuirks are not allowed.\nAn Integer which is &gt;= 0.\nA Number which is &gt;= 0.0.\nA non-negative  | .\n<code>none</code> value.\nA CSS <code>&lt;number&gt;</code> specified value.\n | \nThe value of Opacity is , which is “ | ”. However, we …\nA wrapper of Integer, with value &gt;= 1.\nA <code>subgrid &lt;line-name-list&gt;?</code> TODO: Support animations for …\nThe specified value of a grid <code>&lt;track-breadth&gt;</code>\nThe specified value of a grid <code>&lt;track-list&gt;</code> (could also be …\nThe grid <code>&lt;track-list&gt;</code>\nThe specified value of a grid <code>&lt;track-size&gt;</code>\nQuirks are allowed, in quirks mode.\nValues for CSS Box Alignment properties\nReturns <code>true</code> if quirks are allowed in this context.\nSpecified angles.\nSpecified types for properties related to animations and …\nAttribute name\nThe index in <code>values</code> where our <code>&lt;auto-repeat&gt;</code> value is, if …\nSpecified types for CSS values related to backgrounds.\nCSS handling for the specified value of <code>basic-shape</code>s\nSpecified types for CSS values related to borders.\nSpecified types for box properties.\nCalc expressions.\nIf this number came from a calc() expression, this tells …\nClamp to 1.0 if the value is over 1.0.\nSpecified color values.\nSpecified types for the column properties.\nSpecified types for counter properties.\nSpecified types for CSS Easing functions.\nSpecified types for CSS values related to effects.\nFallback value\nSpecified types for CSS values related to flexbox.\nSpecified values for font properties\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrivially constructs a new integer value from a <code>calc()</code> …\nReturns the numeric value.\nReturns the numeric value, clamped if needed.\nGet the Namespace for a given prefix from the namespace …\nCSS handling for the computed value of grids\nReturns the <code>100%</code> value.\nA custom identifier for named lines, or the empty atom …\nCSS handling for the specified value of <code>image</code>s\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlag to check whether it’s a <code>span</code> keyword.\nLength values.\n<code>&lt;line-names&gt;</code> accompanying <code>&lt;track-size&gt; | &lt;track-repeat&gt;</code> …\nDenotes the nth grid line from grid item’s placement.\n<code>list</code> specified values.\nSpecified types for CSS values that are related to motion …\nOptional namespace prefix.\nOptional namespace URL.\nReturns a new non-negative number with the value <code>val</code>.\nReturns a new number with the value <code>val</code>.\nTrivially constructs a new <code>Integer</code> value.\nReturn a particular number.\nReturns a new number with the value <code>val</code>.\nSpecified values for outline properties\nSpecified @page at-rule properties and named-page style …\nOpacity accepts  | , so we parse it as NumberOrPercentage, …\nParse contents of attr() assuming we have already parsed …\nTry to parse a namespace and return it if parsed, or none …\nParse a non-negative number or percentage.\nParse a non-negative integer.\nParse a <code>&lt;number&gt;</code> value, with a given clamping mode.\nParse a positive integer (&gt;= 1).\nParses a rect(, , , ), allowing quirks.\nParses a ClipRect or Auto, allowing quirks.\nParse an integer value which is at least <code>min</code>.\nAllow unitless angles, used for conic-gradients as …\nSpecified percentages.\nCSS handling for the specified value of <code>position</code>s\nSpecified types for .\nSpecified types for CSS borders.\nResolution values:\nhttps://html.spec.whatwg.org/multipage/#source-size-list\nSpecified types for SVG properties.\nSpecified types for SVG Path.\nSpecified types for CSS values related to tables.\nSpecified types for text properties.\nSpecified time values.\nConvert the number or the percentage to a number.\nReturns this percentage as a number.\nConvert the number or the percentage to a number.\nSpecified types for CSS values that are related to …\nSpecified types for UI properties.\nCommon handling for the specified value CSS url() values.\nReturns the integer value associated with this value.\nThe numeric value itself.\nA vector of <code>&lt;track-size&gt; | &lt;track-repeat&gt;</code> values.\nReturns whether this number came from a <code>calc()</code> expression.\n<code>anchor-center</code>\n{align,justify}-{content,items,self}: ‘auto’\nValue for the <code>align-content</code> property.\nConstants shared by multiple CSS Box Alignment properties\nValue of the <code>align-items</code> property\nThe specified value of the align-self property.\nAn axis direction, either inline (for the <code>justify</code> …\n‘baseline’\nBlock direction.\n‘center’\nShared value for the <code>align-content</code> and <code>justify-content</code> …\n‘end’\nMask for the additional flags above.\n‘flex-end’\n‘flex-start’\nInline direction.\nValue for the <code>justify-content</code> property.\nValue of the <code>justify-items</code> property\nThe specified value of the justify-self property.\n‘last-baseline’\n‘left’\n‘legacy’ (mutually exclusive w. SAFE &amp; UNSAFE)\n‘normal’\n‘right’\n‘safe’\n‘self-end’\n‘self-start’\n‘space-around’\n‘space-between’\n‘space-evenly’\n‘start’\n‘stretch’\nhttps://drafts.csswg.org/css-align/#self-alignment\n‘unsafe’ (mutually exclusive w. SAFE)\nGet a flags value with all known bits set.\nThe initial value ‘auto’\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the flags stored in the upper 3 bits.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns whether this value is a .\nWhether all bits in this flags value are unset.\nReturns whether this value is valid for both axis …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe initial value ‘legacy’\nThe initial value ‘normal’\nThe initial value ‘normal’\nThe initial value ‘normal’\nThe value ‘normal’\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nParse a value for align-content / justify-content.\nParse a self-alignment value on one of the axis.\nThe primary alignment\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\n<code>start</code>\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n…\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the enumeration value stored in the lower 5 bits.\nWhether to allow parsing an unitless zero as a valid angle.\nA specified Angle value, which is just the angle …\nA specified angle dimension.\nAn angle with degree unit.\nAn angle with gradian unit.\nAn angle with radian unit.\nAn angle with turn unit.\nReturns the amount of degrees this angle represents.\nReturns the value of the angle in degrees, mostly for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an <code>Angle</code> parsed from a <code>calc()</code> expression.\nCreates an angle with the given value in degrees.\nCreates an angle with the given value in radians.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses an angle according to CSS-VALUES § 6.1.\nParse an <code>&lt;angle&gt;</code> value given a value and an unit.\nParse an <code>&lt;angle&gt;</code> allowing unitless zero to represent a …\nReturns the value of the angle in radians.\nReturns the unit of the angle.\nWhether this specified angle came from a <code>calc()</code> expression.\nReturn <code>0deg</code>.\nTransitions will be started for discrete properties as …\n…\n…\nA specified value for the <code>animation-duration</code> property.\n…\n…\nA value for the <code>animation-name</code> property.\n…\nA specified value for the <code>animation-timeline</code> property.\nThe initial value. However, we serialize this as 0s if the …\nUse default timeline. The animation’s timeline is a …\nThe block axis of the scroll container. (Default.)\nA custom property.\nThe <code>infinite</code> keyword.\nThe inline axis of the scroll container.\nThe nearest ancestor scroll container. (Default.)\nA non-custom property.\nTransitions will not be started for discrete properties, …\nA <code>&lt;number&gt;</code> value.\nThe document viewport as the scroll container.\nThe scroll() notation. …\nA value for the  used in scroll(), or a value for …\nThe scroll() notation. …\nA value for the  used in scroll().\nSpecifies to use the element’s own principal box as the …\nThe time value, &lt;time [0s,∞]&gt;.\nThe scroll-timeline name or view-timeline-name. This also …\nThe typedef of scroll-timeline-name or view-timeline-name.\nA specified value for .\nA given transition property, that is either <code>All</code>, a …\nUnrecognized property which could be any …\nThe view() notation. …\nA specified value for the <code>view-timeline-inset</code> property.\nThe view-transition-name: <code>none | &lt;custom-ident&gt;</code>.\nThe horizontal axis of the scroll container.\nThe vertical axis of the scroll container.\nReturns <code>all</code>.\nGet the name of the animation as an <code>Atom</code>.\nThe axis of scrolling that drives the progress of the …\nThe end inset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it is <code>all</code>.\nReturns true if it is default.\nReturns true if it is default.\nReturns whether we’re the <code>none</code> value.\nReturns whether this is the none value.\nCheck if this is <code>none</code> value.\nReturns whether this is the special <code>none</code> value.\nReturn true if it is normal.\nReturns true if it’s <code>1.0</code>.\nReturns true if the name matches any animation-direction …\nReturns true if the name matches any animation-play-state …\nReturns true if the name matches any animation-fill-mode …\nReturns the <code>none</code> value.\nReturns the <code>none</code> value.\nReturns the <code>none</code> value.\nReturns the <code>none</code> value.\nReturn normal, the initial value.\nReturns the value <code>1.0</code>.\nParse this keyword.\nParse this keyword.\nParse this keyword.\nParse this keyword.\nParse this keyword.\nParse this keyword.\nParse this keyword.\nParse the inner function arguments of <code>scroll()</code>.\nThe scroll container element whose scroll position drives …\nThe start inset in the relevant axis.\nThe value of the <code>background-repeat</code> property, with <code>repeat-x</code> …\nOne of the keywords for <code>background-repeat</code>.\nA specified value for the <code>background-size</code> property.\n<code>contain</code>\n<code>cover</code>\n<code>&lt;width&gt; &lt;height&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse this keyword.\nReturns the <code>repeat repeat</code> value.\nExplicit height.\nExplicit width.\nAll flags.\nThe flags to represent which basic shapes we would like to …\nThe arc command.\nA specified basic shape.\nThe specified value of .  = &lt;inset()&gt; | &lt;rect()&gt; | &lt;xywh()&gt;\ncircle().\nA specified circle.\nDefines a circle with a center and a radius.\nA specified <code>clip-path</code> value.\nThe closepath command.\nThe cubic Bézier curve command.\nellipse().\nA specified ellipse.\nDefines an ellipse with a center and x-axis/y-axis radii.\nA specified alias for FillRule.\nThe CSS property uses filled shapes. The default behavior.\nThe hline command.\ninset().\nDefines an inset rectangle via insets from each edge of …\nThe specified value of <code>inset()</code>.\nThe line command.\nThe move command.\nThe CSS property uses outline shapes. This is especially …\npath().\npolygon().\nDefines a path with SVG path syntax.\nDefines a path() or shape().\nThe specified value of <code>PathOrShapeFunction</code>.\nThe specified value of <code>Polygon</code>.\nDefines a polygon with pair arguments.\nThe quadratic Bézier curve command.\nrect().\nThe .\nDefines a rect function.\nshape().\nFor shape-outside.\nDefines a shape function, which is identical to path() but …\nThe specified value of <code>ShapeCommand</code>.\nA specified <code>shape-outside</code> value.\nA specified value for <code>at &lt;position&gt;</code> in circle() and …\nThe specified value of <code>ShapeRadius</code>.\nDefines a rectangle via insets from the top and left edges …\nFor filled shapes, we use fill-rule, and store it for …\nThe smooth command.\nThe smooth quadratic Bézier curve command.\nThe vline command.\nxywh().\nThe specified value of <code>xywh()</code>. Defines a rectangle via …\nDefines a xywh function.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nA collection of (x, y) coordinates to draw the polygon.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe filling rule for a polygon.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe specified height.\nThe horizontal component of position.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nParse with some parameters.\nParse the inner function arguments of <code>inset()</code>\nParse the inner arguments of a <code>polygon</code> function.\nParse the inner function arguments of <code>xywh()</code>.\nParse the inner function arguments of <code>rect()</code>.\nA helper for both clip-path and shape-outside parsing of …\nThe four s define the position of the top, right, bottom, …\nThe intersection of a source flags value with the …\nThe optional  argument(s) define rounded corners for the …\nThe optional  argument(s) define rounded corners for the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe vertical component of position.\nThe specified width.\nThe left edge of the reference box.\nThe top edge of the reference box.\n<code>auto</code>\nA specified value for the <code>border-*-radius</code> longhand …\nThe specified value for the <code>border-image-repeat</code> property.\nA single border-image-repeat keyword.\nA specified value for a single side of a <code>border-image-width</code>…\nA specified value for the <code>border-image-slice</code> property.\nA specified value for the <code>border-image-width</code> property.\nA specified value for the <code>border-radius</code> property.\nA specified value for a single side of the <code>border-width</code> …\nA specified value for the <code>border-spacing</code> longhand …\nA specified value for a single side of a <code>border-style</code> …\n<code>&lt;length&gt;</code>\n<code>&lt;length-or-percentage&gt;</code>\n…\n<code>medium</code>\n<code>&lt;number&gt;</code>\n<code>thick</code>\n<code>thin</code>\nThe bottom left radius.\nThe bottom right radius.\nWhether to fill the middle part.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nReturns a bare px value from the argument.\nReturns the <code>100%</code> value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>medium</code> value.\nWhether this border style is either none or hidden.\nThe offsets.\nReturns <code>1</code>.\nParse this keyword.\nParse this keyword.\nParses, with quirks.\nSerializes a border shorthand value composed of …\nReturns the <code>stretch</code> value.\nThe top left radius.\nThe top right radius.\nReturns the <code>0px</code> value.\n<code>auto</code> variant\n<code>auto</code> variant. Just for convenience if there is no flag set.\nThe value for the <code>appearance</code> property.\n<code>Last</code> for <code>inline-block</code>, <code>First</code> otherwise.\n<code>auto</code> variant, the element turns on layout containment, …\nDefault appearance for the element.\n“auto ”\nThe keywords ‘auto none’,\n<code>block-size</code> variant, turns on single-axis block size …\n<code>both-edges</code> variant.\nA specified value for the <code>baseline-source</code> property. …\nA kind of break between two boxes.\nA kind of break within a box.\nA typical dialog button.\nVarious arrows that go in buttons\nWhether <code>contain</code> will change.\n<code>content</code> variant, turns on layout and paint containment\nA checkbox element.\nhttps://drafts.csswg.org/css2/#propdef-clear\nConstants for contain: …\nA specified value for the <code>contain-intrinsic-size</code> property.\nhttps://drafts.csswg.org/css-contain-3/#container-name\nhttps://drafts.csswg.org/css-contain-3/#container-type\nhttps://drafts.csswg.org/css-contain-2/#content-visibility\nA dummy variant that should be last to let the GTK widget …\nDefines an element’s display type, which consists of the …\nAn internal value that resets the effective zoom to 1. …\nA dual toolbar button (e.g., a Back button with a dropdown)\nWhether any property which creates a containing block for …\nUse first baseline for alignment.\nhttps://drafts.csswg.org/css-box/#propdef-float\nA themed focus outline (for outline:auto).\n<code>hidden</code> variant, the element skips its content\n<code>inline-size</code> variant, turns on single-axis inline size …\nThe <code>inline-size</code> variant.\nOne of the vertical-align keywords.\n<code>layout</code> variant, turns on layout containment\nUse last baseline for alignment.\nA non-negative length.\n<code>&lt;length-percentage&gt;</code>\nA non-negative length.\nA specified value for the <code>line-clamp</code> property.\nList boxes.\n<code>manipulation</code> variant\nA dropdown list.\nThe dropdown button(s) that open up a dropdown list.\nMenu Popup background.\nA horizontal meter bar.\nThe meter bar’s meter indicator.\nMac help button.\nAn appearance value for the root, so that we can get …\nThe “arrowed” part of the dropdown button that open up …\nSidebar appearance.\nWindows themed window frame elements.\n<code>none</code> variant\n<code>none</code> variant, just for convenience.\nThe keyword <code>none</code>.\nThe keyword <code>none</code>.\nNo appearance at all.\n…\nThe <code>normal</code> variant.\nFor HTML’s \nWhether <code>opacity</code> will change.\nThe value for the <code>overflow-x</code> / <code>overflow-y</code> properties.\n<code>paint</code> variant, turns on paint containment\n<code>pan-x</code> variant\n<code>pan-y</code> variant\nWhether <code>perspective</code> will change.\n<code>pinch-zoom</code> variant\nWhether the position property will change.\nFor HTML’s \nA specified value for the <code>perspective</code> property.\nA horizontal progress bar.\nThe progress bar’s progress indicator\nA radio element within a radio group.\nnsRangeFrame and its subparts\nhttps://drafts.csswg.org/css-ui/#propdef-resize\nWhether <code>scroll-position</code> will change.\n‘size’ variant, turns on size containment\n<code>stable</code> variant.\nWhether a property which can create a stacking context <strong>on </strong>…\n<code>strict</code> variant, turns on all types of containment\n<code>style</code> variant, turns on style containment\n…\nSpecified value of scroll-snap-align keyword value.\nhttps://drafts.csswg.org/css-scroll-snap-1/#snap-axis\nhttps://drafts.csswg.org/css-scroll-snap-1/#snap-strictness\n…\nValues for scrollbar-gutter: …\nThe scrollbar slider\nA scrollbar button (up/down/left/right). Keep these in …\nThe scrollbar thumb.\nThe scroll corner\nA searchfield.\nA separator.  Can be horizontal or vertical.\nThe <code>size</code> variant.\nA spin control (up/down control for time/date pickers).\nThe down button of a spin control.\nThe textfield of a spin control\nThe up button of a spin control.\nA splitter.  Can be horizontal or vertical.\nA status bar in a main application window.\nWhether <code>transform</code> or related properties will change.\nA single tab in a tab widget.\nThe tabs scroll arrows (left/right).\nA single pane (inside the tabpanels container).\nThe tab panels container.\nA multi-line text field, e.g. HTML .\nA single-line text field, e.g. HTML .\nA single toolbar button (with no associated dropdown).\nThe dropdown portion of a toolbar button\nA tooltip.\nValues for the <code>touch-action</code> property.\nA specified value for the <code>vertical-align</code> property.\n‘visible’ variant, no effect\nProvides a rendering hint to the user agent, stating what …\nThe change bits that we care about.\nWhether <code>z-index</code> will change.\nA specified value for the zoom property.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet default value of <code>will-change</code> as <code>auto</code>\nGet default <code>touch-action</code> as <code>auto</code>\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nA bitfield with the kind of change that the value will …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nhttps://drafts.csswg.org/css-display/#inside-model: If  is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nConvert this display into an equivalent block display.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe features that are supposed to change.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMake a display enum value from  and  values.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nParse this keyword from a string slice.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe initial display value.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAccessor for the  value.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nhttps://drafts.csswg.org/css2/visuren.html#x13\nReturns true if the value is <code>Contents</code>\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether this is <code>display: inline</code> (or <code>inline list-item</code>).\nReturns whether this <code>display</code> value is the display of a …\nReturns whether an element with this display type is a line\nReturns whether this <code>display</code> value is some kind of …\nReturns true if the value is <code>None</code>\nReturns whether this is the <code>none</code> value.\nIs this container-type: normal?\nReturns whether this <code>display</code> value is a ruby level …\nReturns whether this <code>display</code> value is one of the types for …\nReturn true if the value will create a scrollable box.\nIs this type containing size in any way?\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nMake a raw display value from  and  values.\nReturn a particular number value of the zoom property.\nReturns <code>none</code>.\nReturns <code>none</code>.\nReturn the <code>none</code> value.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAccessor for the  value.\nnone |  | auto \nnone | \nParse this keyword.\nParse this keyword.\nParse this keyword.\nnone | [ x | y | block | inline | both ] [ mandatory | …\nParse this keyword.\n[ none | start | end | center ]{1,2}\nParse this keyword.\nParse this keyword.\nParse this keyword.\nParse this keyword.\nauto | #\nParse this keyword.\nParse this keyword.\nParse this keyword.\nParse this keyword.\nParse this keyword.\nParse this keyword.\nParse this keyword.\nhttps://github.com/w3c/csswg-drafts/issues/7203 Only a …\nParse a legacy break-between value for …\nParse a legacy break-between value for <code>page-break-inside</code>.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSerialize a legacy break-between value for <code>page-break-*</code>.\nSerialize a legacy break-between value for …\nConvert the value to a scrollable value if it’s not …\nReturns the raw underlying u16 value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAn <code>abs()</code> function.\n<code>abs()</code>: https://drafts.csswg.org/css-values-4/#funcdef-abs\n<code>acos()</code>: https://drafts.csswg.org/css-values-4/#funcdef-acos\n<code>&lt;angle&gt;</code>\n<code>asin()</code>: https://drafts.csswg.org/css-values-4/#funcdef-asin\n<code>atan()</code>: https://drafts.csswg.org/css-values-4/#funcdef-atan\n<code>atan2()</code>: …\n<code>calc()</code>: https://drafts.csswg.org/css-values-4/#funcdef-calc\nA struct to hold a simplified <code>&lt;length&gt;</code> or <code>&lt;percentage&gt;</code> …\nA calc node representation for specified values.\nA <code>clamp()</code> function.\n<code>clamp()</code>: …\nA component of a color.\n<code>cos()</code>: https://drafts.csswg.org/css-values-4/#funcdef-cos\n<code>exp()</code>: https://drafts.csswg.org/css-values-4/#funcdef-exp\nA <code>hypot()</code> function\n<code>hypot()</code>: …\nA node that inverts its child, e.g. Invert(10) == 1 / 10 …\nA leaf node inside a <code>Calc</code> expression’s AST.\nA leaf node.\n<code>&lt;length&gt;</code>\n<code>log()</code>: https://drafts.csswg.org/css-values-4/#funcdef-log\nThe name of the mathematical function that we’re parsing.\n<code>max()</code>: https://drafts.csswg.org/css-values-4/#funcdef-max\n<code>min()</code>: https://drafts.csswg.org/css-values-4/#funcdef-min\nA <code>min</code> or <code>max</code> function.\n<code>mod()</code>: https://drafts.csswg.org/css-values-4/#funcdef-mod\nA <code>mod()</code> or <code>rem()</code> function.\nA node that negates its child, e.g. Negate(1) == -1.\n<code>&lt;number&gt;</code>\n<code>&lt;percentage&gt;</code>\n<code>pow()</code>: https://drafts.csswg.org/css-values-4/#funcdef-pow\nA product node, representing <code>a * b * c</code> where a, b, and c …\n<code>rem()</code>: https://drafts.csswg.org/css-values-4/#funcdef-rem\n<code>&lt;resolution&gt;</code>\nA <code>round()</code> function.\n<code>round()</code>: …\nA <code>sign()</code> function.\n<code>sign()</code>: https://drafts.csswg.org/css-values-4/#funcdef-sign\n<code>sin()</code>: https://drafts.csswg.org/css-values-4/#funcdef-sin\n<code>sqrt()</code>: https://drafts.csswg.org/css-values-4/#funcdef-sqrt\nA sum node, representing <code>a + b + c</code> where a, b, and c are …\n<code>tan()</code>: https://drafts.csswg.org/css-values-4/#funcdef-tan\n<code>&lt;time&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse this keyword from a string slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTries to simplify this expression into a <code>&lt;length&gt;</code> or …\nGiven a function name, and the location from where the …\nParse a top-level <code>calc</code> expression, with all nested …\nParse this keyword.\nConvenience parsing function for <code>&lt;angle&gt;</code>.\nConvenience parsing function for integers.\nConvenience parsing function for <code>&lt;length&gt;</code>.\nConvenience parsing function for <code>&lt;length&gt; | &lt;percentage&gt;</code>.")