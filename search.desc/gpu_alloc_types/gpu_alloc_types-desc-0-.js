searchState.loadedDescShard("gpu_alloc_types", 0, "Allocation flags\nMemory mapped error.\nProperties of the device that will be used for allocating …\nMap failed due to implementation specific error.\nSpecifies range of the mapped memory region.\nAbstract device that can be used to allocate memory …\nDefines memory heap.\nMemory properties type.\nDefines memory type.\nDevice memory exhausted.\nDevice memory exhausted.\nHost memory exhausted.\nHost memory exhausted.\nMemory exhausted error.\nAllocates new memory object from device. This function may …\nSpecifies if feature required to fetch device address is …\nDeallocate memory object.\nFlushes ranges of memory mapped regions.\nHeap index of the memory type.\nInvalidates ranges of memory mapped regions.\nMap region of device memory to host memory space.\nMaximum number of valid memory allocations that can exist …\nMaximum size for single allocation supported by the device.\nMemory object reference.\nArray of memory heaps provided by the device.\nArray of memory types provided by the device.\nAtom size for host mappable non-coherent memory.\nOffset in bytes from start of the memory object.\nProperty flags of the memory type.\nSize in bytes of the memory range.\nSize of memory heap in bytes.\nUnmap previously mapped memory region.\nAllocation flags\nSpecifies that the memory can be used for buffers created …\nMemory mapped error.\nProperties of the device that will be used for allocating …\nMap failed due to implementation specific error.\nSpecifies range of the mapped memory region.\nAbstract device that can be used to allocate memory …\nDevice memory exhausted.\nDevice memory exhausted.\nHost memory exhausted.\nHost memory exhausted.\nMemory exhausted error.\nGet a flags value with all known bits set.\nAllocates new memory object from device. This function may …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSpecifies if feature required to fetch device address is …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nDeallocate memory object.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlushes ranges of memory mapped regions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates ranges of memory mapped regions.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nMap region of device memory to host memory space.\nMaximum number of valid memory allocations that can exist …\nMaximum size for single allocation supported by the device.\nMemory object reference.\nArray of memory heaps provided by the device.\nArray of memory types provided by the device.\nAtom size for host mappable non-coherent memory.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOffset in bytes from start of the memory object.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSize in bytes of the memory range.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnmap previously mapped memory region.\nThis flag is set for device-local memory types. …\nThis flag is set for host-cached memory types. Host-cached …\nThis flag is set for host-coherent memory types. …\nThis flag is set for host-visible memory types. …\nThis flag is set for lazily-allocated memory types. …\nDefines memory heap.\nMemory properties type.\nDefines memory type.\nThis flag is set for protected memory types. Protected …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nHeap index of the memory type.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nProperty flags of the memory type.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSize of memory heap in bytes.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.")