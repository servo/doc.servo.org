searchState.loadedDescShard("serde_json", 0, "Serde JSON\nRepresents a JSON array.\nRepresents a JSON boolean.\nA structure that deserializes JSON into Rust values.\nContains the error value\nThis type represents all possible errors that can occur …\nRepresents a JSON key/value type.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nContains the success value\nAlias for a <code>Result</code> with the error type <code>serde_json::Error</code>.\nA structure for serializing Rust values into JSON.\nIterator that deserializes a stream into multiple JSON …\nRepresents a JSON string.\nRepresents any valid JSON value.\nDeserialize JSON data to a Rust data structure.\nParses a JSON string as bytes. Note that this function …\nParses an enum as an object like <code>{&quot;$KEY&quot;:$VALUE}</code>, where …\nParses a newtype struct as the underlying value.\nParses a <code>null</code> as a None, and any other values as a …\nThis <code>Box</code> allows us to keep the size of <code>Error</code> as small as …\nWhen serializing or deserializing JSON goes wrong.\nDisplay a JSON value as a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert boolean to <code>Value::Bool</code>.\nReturns the argument unchanged.\nConvert map (with string keys) to <code>Value::Object</code>.\nConvert a slice to <code>Value::Array</code>.\nConvert copy-on-write string to <code>Value::String</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nConvert <code>String</code> to <code>Value::String</code>.\nConvert string slice to <code>Value::String</code>.\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nCreate a <code>Value::Object</code> by collecting an iterator of …\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nDeserialize an instance of type <code>T</code> from an I/O stream of …\nDeserialize an instance of type <code>T</code> from bytes of JSON text.\nDeserialize an instance of type <code>T</code> from a string of JSON …\nInterpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA tiny, <code>no_std</code>-friendly facade around <code>std::io</code>. Reexports …\nConstruct a <code>serde_json::Value</code> from a JSON literal.\nA map of String to serde_json::Value.\nSerialize a Rust data structure into JSON data.\nSerialize newtypes without an object wrapper.\nSerialize the given data structure as a String of JSON.\nSerialize the given data structure as a pretty-printed …\nConvert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …\nSerialize the given data structure as a JSON byte vector.\nSerialize the given data structure as a pretty-printed …\nSerialize the given data structure as JSON into the I/O …\nSerialize the given data structure as pretty-printed JSON …\nThe Value enum, a loosely typed way of representing any …\nA structure that deserializes JSON into Rust values.\nJSON input source that reads from a std::io input stream.\nOnly deserialize from this after peeking a ‘“’ byte! …\nTrait used by the deserializer for iterating over input. …\nJSON input source that reads from a slice of bytes.\nJSON input source that reads from a UTF-8 string.\nIterator that deserializes a stream into multiple JSON …\nReturns the number of bytes so far deserialized into a …\nTemporary storage of peeked byte.\nThe <code>Deserializer::end</code> method should be called after a …\nError caused by a byte from next_char().\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize an instance of type <code>T</code> from an I/O stream of …\nCreates a JSON deserializer from an <code>io::Read</code>.\nDeserialize an instance of type <code>T</code> from bytes of JSON text.\nCreates a JSON deserializer from a <code>&amp;[u8]</code>.\nDeserialize an instance of type <code>T</code> from a string of JSON …\nCreates a JSON deserializer from a <code>&amp;str</code>.\nIndex of the <em>next</em> byte that will be returned by next() or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn a JSON deserializer into an iterator over values of …\nCreate a JSON deserializer from one of the possible …\nCreate a JSON stream deserializer from one of the possible …\nCreate a JSON input source to read from a std::io input …\nCreate a JSON input source to read from a slice of bytes.\nCreate a JSON input source to read from a UTF-8 string.\nThe big optimization here over IoRead is that if the …\nReturns the first non-whitespace byte without consuming …\nError caused by a byte from peek().\nCategorizes the cause of a <code>serde_json::Error</code>.\nControl character found while parsing a string.\nThe error was caused by input data that was semantically …\nThe error was caused by prematurely reaching the end of …\nEOF while parsing a list.\nEOF while parsing an object.\nEOF while parsing a string.\nEOF while parsing a JSON value.\nContains the error value\nThis type represents all possible errors that can occur …\nExpected this character to be a <code>&#39;:&#39;</code>.\nExpected this character to be a <code>&quot;</code>.\nExpected this character to be either a <code>&#39;,&#39;</code> or a <code>&#39;]&#39;</code>.\nContents of key were supposed to be a number.\nExpected this character to be either a <code>&#39;,&#39;</code> or a <code>&#39;}&#39;</code>.\nExpected to parse either a <code>true</code>, <code>false</code>, or a <code>null</code>.\nExpected this character to start a JSON value.\nObject key is a non-finite float value.\nInvalid hex escape code.\nInvalid number.\nInvalid unicode code point.\nSome I/O error occurred while serializing or deserializing.\nThe error was caused by a failure to read or write bytes …\nObject key is not a string.\nLone leading surrogate in hex escape.\nCatchall for syntax error messages\nNumber is bigger than the maximum value of its type.\nContains the success value\nEncountered nesting of JSON maps and arrays more than 128 …\nAlias for a <code>Result</code> with the error type <code>serde_json::Error</code>.\nThe error was caused by input that was not syntactically …\nJSON has non-whitespace trailing characters after the …\nJSON has a comma after the last value in an array or map.\nUnexpected end of hex escape.\nCategorizes the cause of this error.\nOne-based column number at which the error was detected.\nThis <code>Box</code> allows us to keep the size of <code>Error</code> as small as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind reported by the underlying standard library I/O …\nReturns true if this error was caused by input data that …\nReturns true if this error was caused by prematurely …\nReturns true if this error was caused by a failure to read …\nReturns true if this error was caused by input that was not\nOne-based line number at which the error was detected.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nProgram argument list too long.\nThe operation failed because a pipe was closed.\nAn iterator over <code>u8</code> values of a reader.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nCross-device or cross-filesystem (hard) link or rename.\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFilesystem quota was exceeded.\nThe remote host is not reachable.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nThe filesystem object is, unexpectedly, a directory.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nThe <code>Read</code> trait allows for reading bytes from a source.\nThe filesystem or storage medium is read-only, but a write …\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nStale network file handle.\nThe underlying storage (typically, a filesystem) is full.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nThe operation needs to block to complete, but the blocking …\nA trait for objects which are byte-oriented sinks.\nAn error returned when an operation could not be completed …\nCreates a “by reference” adaptor for this instance of …\nCreates a “by reference” adapter for this instance of …\nTransforms this <code>Read</code> instance to an <code>Iterator</code> over its …\nCreates an adapter which will chain this stream with …\nAttempt to downcast the custom boxed error to <code>E</code>.\nFlush this output stream, ensuring that all intermediately …\nShows a human-readable description of the <code>ErrorKind</code>.\nConverts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.\nConverts an <code>ErrorKind</code> into an <code>Error</code>.\nReturns the argument unchanged.\nConvert a <code>serde_json::Error</code> into an <code>io::Error</code>.\nConverts <code>TryReserveError</code> to an error with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of an <code>Error</code> from a particular OS …\nReturns a mutable reference to the inner error wrapped by …\nReturns a reference to the inner error wrapped by this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Error</code>, returning its inner error (if any).\nDetermines if this <code>Read</code>er has an efficient <code>read_vectored</code> …\nDetermines if this <code>Write</code>r has an efficient <code>write_vectored</code> …\nReturns the corresponding <code>ErrorKind</code> for this error.\nReturns an error representing the last OS error which …\nCreates a new I/O error from a known kind of error as well …\nCreates a new I/O error from an arbitrary error payload.\nReturns the OS error that this error represents (if any).\nPull some bytes from this source into the specified …\nPull some bytes from this source into the specified buffer.\nRead the exact number of bytes required to fill <code>cursor</code>.\nRead the exact number of bytes required to fill <code>buf</code>.\nRead all bytes until EOF in this source, placing them into …\nRead all bytes until EOF in this source, appending them to …\nLike <code>read</code>, except that it reads into a slice of buffers.\nCreates an adapter which will read at most <code>limit</code> bytes …\nWrite a buffer into this writer, returning how many bytes …\nAttempts to write an entire buffer into this writer.\nAttempts to write multiple buffers into this writer.\nWrites a formatted string into this writer, returning any …\nLike <code>write</code>, except that it writes from a slice of buffers.\nIndex of the current column. The first character in the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndex of the current line. Characters in the first line of …\nByte offset of the start of the current line. This is the …\nA view into a single entry in a map, which may either be …\nAn owning iterator over a serde_json::Map’s entries.\nAn iterator over a serde_json::Map’s entries.\nA mutable iterator over a serde_json::Map’s entries.\nAn iterator over a serde_json::Map’s keys.\nRepresents a JSON key/value type.\nAn occupied Entry.\nAn occupied Entry. It is part of the <code>Entry</code> enum.\nA vacant Entry.\nA vacant Entry. It is part of the <code>Entry</code> enum.\nAn iterator over a serde_json::Map’s values.\nA mutable iterator over a serde_json::Map’s values.\nProvides in-place mutable access to an occupied entry …\nMoves all elements from other into self, leaving other …\nClears the map, removing all values.\nReturns true if the map contains a value for the specified …\nGets the given key’s corresponding entry in the map for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nGets a reference to the value in the entry.\nReturns the key-value pair matching the given key.\nReturns a mutable reference to the value corresponding to …\nGets a mutable reference to the value in the entry.\nInserts a key-value pair into the map.\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry with the <code>OccupiedEntry</code>’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a mutable reference to its value.\nReturns true if the map contains no elements.\nGets an iterator over the entries of the map.\nGets a mutable iterator over the entries of the map.\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nGets an iterator over the keys of the map.\nReturns the number of elements in the map.\nMakes a new empty Map.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nRemoves a key from the map, returning the value at the key …\nTakes the value of the entry out of the map, and returns …\nRemoves a key from the map, returning the stored key and …\nRemoves the entry from the map, returning the stored key …\nRetains only the elements specified by the predicate.\nSorts this map’s entries in-place using <code>str</code>’s usual …\nGets an iterator over the values of the map.\nGets an iterator over mutable values of the map.\nMakes a new empty Map with the given initial capacity.\nAlways finite.\nAlways less than zero.\nRepresents a JSON number, whether integer or floating …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMarker for whether StreamDeserializer can implement …\nJSON input source that reads from a std::io input stream.\nTrait used by the deserializer for iterating over input. …\nJSON input source that reads from a slice of bytes.\nJSON input source that reads from a UTF-8 string.\nTemporary storage of peeked byte.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a JSON escape sequence and discards the value. …\nIndex of the <em>next</em> byte that will be returned by next() or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a JSON escape sequence and appends it into the …\nParses a JSON \\u escape and appends it into the scratch …\nAdds a WTF-8 codepoint to the end of the buffer. This is a …\nAn escaped ASCII plane control character (usually escaped …\nAn escaped backspace character (usually escaped as <code>\\b</code>)\nAn escaped carriage return character (usually escaped as <code>\\r</code>…\nRepresents a character escape code in a type-safe manner.\nThis structure compacts a JSON value with no extra …\nAn escaped form feed character (usually escaped as <code>\\f</code>)\nThis trait abstracts away serializing the JSON control …\nAn escaped line feed character (usually escaped as <code>\\n</code>)\nThis structure pretty prints a JSON value to make it human …\nAn escaped quote <code>&quot;</code>\nAn escaped reverse solidus <code>\\</code>\nA structure for serializing Rust values into JSON.\nAn escaped solidus <code>/</code>\nAn escaped tab character (usually escaped as <code>\\t</code>)\nCalled before every array.  Writes a <code>[</code> to the specified …\nCalled before every array value.  Writes a <code>,</code> if needed to …\nCalled before every object.  Writes a <code>{</code> to the specified …\nCalled before every object key.\nCalled before every object value.  A <code>:</code> should be written to\nCalled before each series of <code>write_string_fragment</code> and …\nCalled after every array.  Writes a <code>]</code> to the specified …\nCalled after every array value.\nCalled after every object.  Writes a <code>}</code> to the specified …\nCalled after every object key.  A <code>:</code> should be written to …\nCalled after every object value.\nCalled after each series of <code>write_string_fragment</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap the <code>Writer</code> from the <code>Serializer</code>.\nCreates a new JSON serializer.\nConstruct a pretty printer formatter that defaults to …\nCreates a new JSON pretty print serializer.\nSerialize the given data structure as a String of JSON.\nSerialize the given data structure as a pretty-printed …\nSerialize the given data structure as a JSON byte vector.\nSerialize the given data structure as a pretty-printed …\nSerialize the given data structure as JSON into the I/O …\nSerialize the given data structure as pretty-printed JSON …\nCreates a new JSON visitor whose output will be written to …\nConstruct a pretty printer formatter that uses the <code>indent</code> …\nWrites a <code>true</code> or <code>false</code> value to the specified writer.\nWrites the representation of a byte array. Formatters can …\nWrites a character escape code to the specified writer.\nWrites a floating point value like <code>-31.26e+12</code> to the …\nWrites a floating point value like <code>-31.26e+12</code> to the …\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites a <code>null</code> value to the specified writer.\nWrites a number that has already been rendered to a string.\nWrites a raw JSON fragment that doesn’t need any …\nWrites a string fragment that doesn’t need any escaping …\nWrites an integer value like <code>123</code> to the specified writer.\nWrites an integer value like <code>123</code> to the specified writer.\nWrites an integer value like <code>123</code> to the specified writer.\nWrites an integer value like <code>123</code> to the specified writer.\nWrites an integer value like <code>123</code> to the specified writer.\nRepresents a JSON array.\nRepresents a JSON boolean.\nA type that can be used to index into a <code>serde_json::Value</code>.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nSerializer whose output is a <code>Value</code>.\nRepresents a JSON string.\nRepresents any valid JSON value.\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nRepresents the number as f64 if possible. Returns None …\nIf the <code>Number</code> is an integer, represent it as i128 if …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Number</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Number</code> is an integer, represent it as u128 if …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nIf the <code>Number</code> is an integer, represent it as u64 if …\nReturns the argument unchanged.\nConverts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …\nConverts an <code>i128</code> to a <code>Number</code>. Numbers smaller than …\nConverts a <code>u128</code> to a <code>Number</code>. Numbers greater than u64::MAX …\nInterpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.\nIndex into a JSON array or map. A string index can be used …\nMutably index into a JSON array or map. A string index can …\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Number</code> can be represented by f64.\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if the <code>Value</code> is an integer between zero and …\nReturns true if the <code>Number</code> is an integer between zero and …\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nReorders the entries of all <code>Value::Object</code> nested within …\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nConvert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA type that can be used to index into a <code>serde_json::Value</code>.\nUsed in panic messages.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerializer whose output is a <code>Value</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")