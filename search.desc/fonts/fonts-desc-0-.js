searchState.loadedDescShard("fonts", 0, "All fonts will be searched, including those specified via …\nAn index that refers to a byte offset in a text run. This …\nThis data structure represents the various optional …\nA version of <code>FontStyle</code> from Stylo that is serializable. …\nWhether or not font fallback selection prefers the emoji …\nThe FontContext represents the per-thread/thread state …\nA data structure to store data for fonts. Data is stored …\n<code>FontDescriptor</code> describes the parameters of a <code>Font</code>. It …\nThe font family parameters for font selection.\nA <code>FontGroup</code> is a prioritised list of fonts for a given set …\nThe scope within which we will look for a font.\nThis describes all the information needed to create font …\nDescribes how to select a font from a given family. This …\nA reference to a <code>FontTemplate</code> with shared ownership and …\nA list of font templates that make up a given font family.\nGlyphEntry is a port of Gecko’s CompressedGlyph scheme …\nThe id of a particular glyph within a font\nA single series of glyphs within a text run.\nStores the glyph data belonging to a text run.\nOnly local system fonts will be searched.\nVarious options that control text shaping.\nThe system font service. There is one of these for every …\nCommands that the <code>FontContext</code> sends to the …\nThe public interface to the <code>SystemFontService</code>, used by …\nWhether or not this font can do fast shaping, ie whether …\nWhether or not this character is in the unicode ranges …\nA sender that can send messages and receive replies from …\nThe data for this font. This might be uninitialized for …\nGet a <code>FontTemplateDescriptor</code> from a <code>PlatformFont</code>. This is …\nGet the descriptor.\nCalculate the distance from this <code>FontTemplate</code>s descriptor …\nA store of the detailed glyph data. Detailed glyphs …\nWhether or not this glyph store ends with whitespace …\nA buffer of glyphs within the text run, in the order in …\nVarious flags.\nThe data for each web font <code>FontIdentifier</code>. This data might …\nThe actual instances of fonts ie a <code>FontTemplate</code> combined …\nThis is an optimization that allows the <code>SystemFontService</code> …\nThis is an optimization that allows the <code>SystemFontService</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the number of nanoseconds spent shaping text across …\nThe glyphs.\nWhether or not this font supports color bitmaps or a COLR …\nUsed to check if fast path should be used in glyph …\nGet the <code>FontIdentifier</code> for this template.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not this glyph store contains only a single …\nWhether or not this glyph store contains only glyphs for …\nSpacing to add between each letter. Corresponds to the CSS …\nReturns true if the given descriptor matches the one in …\nThe byte range of characters in the containing run.\nA caching map between the specification of a font in CSS …\nThe Unicode script property of the characters in this run.\nThe advance of the space character (’ ’) in this font …\nIf this font is a web font, this is a reference to the …\nIf this is a synthesized small caps font, then this font …\nA cache of the advance of the entire glyph store.\nA cache of the number of word separators in the entire …\nGet the necessary <code>FontInstanceFlags</code>` for this font.\nA collection of WebRender <code>FontInstanceKey</code>s generated for …\nA collection of WebRender <code>FontKey</code>s generated for the web …\nSpacing to add between each word. Corresponds to the CSS …\nAll fonts will be searched, including those specified via …\nSet if we are to disable kerning.\nSet if the text ends with whitespace.\n<code>FontDescriptor</code> describes the parameters of a <code>Font</code>. It …\nThe font family parameters for font selection.\nA <code>FontGroup</code> is a prioritised list of fonts for a given set …\nA <code>FontGroupFamily</code> is a single font family in a <code>FontGroup</code>. …\nA <code>FontGroupFamily</code> can have multiple members if it is a “…\nThe scope within which we will look for a font.\nSet if we are to ignore ligatures.\nSet if the text is entirely whitespace.\nSet if word-break is set to keep-all.\nOnly local system fonts will be searched.\nText direction is right-to-left.\nAn entry in the shape cache.\nVarious options that control text shaping.\nNanoseconds spent shaping text across all layout threads.\nGet a flags value with all known bits set.\nGet the <code>FontBaseline</code> for this font.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nWhether not a particular text and <code>ShapingOptions</code> …\nWhether or not this font can do fast shaping, ie whether …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturn the data for this <code>Font</code>. Note that this is currently …\nThe data for this font. This might be uninitialized for …\nGet a <code>FontTemplateDescriptor</code> from a <code>PlatformFont</code>. This is …\nThe intersection of a source flags value with the …\nCreate an empty <code>FontMetrics</code> mainly to be used in …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nAttempts to find a font which matches the given …\nFinds the first font, or else the first fallback font, …\nAttempts to find a suitable fallback font which matches …\nFind the first available font in the group, or the first …\nVarious flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet the number of nanoseconds spent shaping text across …\nWhether or not this font supports color bitmaps or a COLR …\nA unique identifier for the font, allowing comparison.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nSpacing to add between each letter. Corresponds to the CSS …\nGiven a mapping array <code>mapping</code> and a value, map that value …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe Unicode script property of the characters in this run.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nFast path for ASCII text that only needs simple horizontal …\nThe advance of the space character (’ ’) in this font …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nIf this is a synthesized small caps font, then this font …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the necessary <code>FontInstanceFlags</code>` for this font.\nSpacing to add between each word. Corresponds to the CSS …\nThe FontContext represents the per-thread/thread state …\nA sender that can send messages and receive replies from …\nCreate a <code>Font</code> for use in layout calculations, from a …\nReturns a font matching the parameters. Fonts are cached, …\nThe data for each web font <code>FontIdentifier</code>. This data might …\nReturns a <code>FontGroup</code> representing fonts which can be used …\nLike <code>Self::font_group</code>, but overriding the size found in …\nThe actual instances of fonts ie a <code>FontTemplate</code> combined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the situation where a web font finishes loading, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to find matching templates in this <code>FontContext</code>, first …\nAfter a download finishes, try to process the downloaded …\nA caching map between the specification of a font in CSS …\nA collection of WebRender <code>FontInstanceKey</code>s generated for …\nA collection of WebRender <code>FontKey</code>s generated for the web …\nA list of font templates that make up a given font family.\nA struct that represents the available templates in a “…\nFind a font in this family that matches a given descriptor.\nFind a font in this family that matches a given descriptor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a web font load finishing, adding the new font to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA trait for implementing the CSS font matching algorithm …\nThis describes all the information needed to create font …\nDescribes how to select a font from a given family. This …\nA reference to a <code>FontTemplate</code> with shared ownership and …\nWhether or not this character is in the unicode ranges …\nGet the descriptor.\nCalculate the distance from this <code>FontTemplate</code>s descriptor …\nReturns a score indicating how far apart visually the two …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>FontIdentifier</code> for this template.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the given descriptor matches the one in …\nCreate a new <code>FontTemplate</code>.\nCreate a new <code>FontTemplate</code> for a <code>@font-family</code> with a …\nIf this font is a web font, this is a reference to the …\nAn index that refers to a byte offset in a text run. This …\nGlyphEntry is a port of Gecko’s CompressedGlyph scheme …\nThe id of a particular glyph within a font\nA single series of glyphs within a text run.\nStores the glyph data belonging to a text run.\nAdds a single glyph.\nTrue if the original character was a word separator. These …\nA store of the detailed glyph data. Detailed glyphs …\nWhether or not this glyph store ends with whitespace …\nA buffer of glyphs within the text run, in the order in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe glyphs.\nUsed to check if fast path should be used in glyph …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not this glyph store contains only a single …\nWhether or not this glyph store contains only glyphs for …\nCreates a new entry for one glyph.\nInitializes the glyph store, but doesn’t actually shape …\nThe byte range of characters in the containing run.\nA cache of the advance of the entire glyph store.\nA cache of the number of word separators in the entire …\nAn identifier for a local font on systems using Freetype.\nCreates a String from the given null-terminated buffer. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe path to the font.\nThe variation index within the font.\nData from the OS/2 table of an OpenType font. See …\nConvert FreeType-style 26.6 fixed point to an <code>f64</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFind the scale to use for metrics of unscalable fonts. …\nA FreeType library handle to be used for creating and …\nReturns the argument unchanged.\nGet the shared FreeType library handle. This is protected …\nCalls <code>U::from(self)</code>.\nCallbacks from Harfbuzz when font map and glyph advance …\nReturns shaped glyph data for one glyph, and updates the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ShapedGlyphData</code> from the given HarfBuzz …\nCalculate the layout metrics associated with the given …\nThis data structure represents the various optional …\nA version of <code>FontStyle</code> from Stylo that is serializable. …\nThe system font service. There is one of these for every …\nCommands that the <code>FontContext</code> sends to the …\nThe public interface to the <code>SystemFontService</code>, used by …\nThis is an optimization that allows the <code>SystemFontService</code> …\nThis is an optimization that allows the <code>SystemFontService</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")