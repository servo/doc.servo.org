searchState.loadedDescShard("icu_collator", 0, "Comparing strings according to language-dependent …\nWhat to do about characters whose comparison level can be …\nWhether second level compares the last accent difference …\nTreatment of case. (Large and small kana differences are …\nWhether to distinguish case in sorting, even for sorting …\nCompares strings according to culturally-relevant ordering.\nA list of error outcomes for various operations in this …\nOptions settable by the user of the API.\nCharacters classified as spaces, punctuation, symbols, or …\nAn error originating inside of the data provider.\nCompare the NFD form by code point order as the quinary …\nLower case first.\nRequested data was found but was malformed\nWhat characters get shifted to the quaternary level with …\nKeep the characters whose level can be varied on the …\nThe requested collation does not exist\nWhen set to <code>On</code>, any sequence of decimal digits is sorted …\nUse the default tertiary weights.\nLeave off the case level option.  Case differences will be …\nLeave off the numeric option.  Decimal digits will be …\nLeave off the backward second level option. Diacritics in …\nTurn on the case level option, thereby making a separate …\nTurn on numeric sorting for any sequence of decimal …\nTurn on backward second level ordering so that the second …\nCompare only on the level of base letters. This level …\nCharacters classified as spaces or punctuation are shifted.\nCompare also on the quaternary level. For Japanese, Higana …\nThe resolved (actually used) options used by the collator.\nCompare also on the secondary level, which corresponds to …\nShift the characters at or below <code>MaxVariable</code> to the …\nCharacters classified as spaces are shifted.\nThe collation strength that indicates how many levels to …\nCharacters classified as spaces, punctuation, or symbols …\nCompare also on the tertiary level. By default, if the …\nUpper case first.\nUser-specified alternate handling collation option.\nResolved alternate handling collation option.\nUser-specified backward second level collation option.\nResolved backward second level collation option.\nUser-specified case first collation option.\nResolved case first collation option.\nUser-specified case level collation option.\nResolved case level collation option.\nThis module holds the <code>Collator</code> struct whose <code>compare_impl()</code> …\nThis module exists to contain implementation docs and …\nThis module holds the 64-bit <code>CollationElement</code> struct used …\nCollator-specific error\nUser-specified max variable collation option.\nResolved max variable collation option.\nUser-specified numeric collation option.\nResolved numeric collation option.\nThis module contains the types that are part of the API …\n🚧 [Unstable] Data provider struct definitions for this …\nUser-specified strength collation option.\nResolved strength collation option.\nCompares strings according to culturally-relevant ordering.\nCompare guaranteed well-formed UTF-8 slices.\nCompare potentially ill-formed UTF-16 slices. Unpaired …\nCompare potentially well-formed UTF-8 slices. Ill-formed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe resolved options showing how the default options, the …\nCreates a collator for the given locale and options from …\nA version of <code>Self::try_new</code> that uses custom data provided …\nA version of <code>Self::try_new</code> that uses custom data provided …\nMarker for starters that decompose to themselves but may …\nBuilder data, used only in the CollationDataBuilder, not …\nSet if at least one contraction suffix contains a starter\nSet if there is no match for the single (no-suffix) …\nSet if any contraction suffix ends with lccc!=0.\nPack a <code>char</code> and a <code>CanonicalCombiningClass</code> in 32 bits (the …\nThis struct makes the handling of the <code>upcoming</code> buffer …\nA collation element is a 64-bit value.\nA compressed form of a collation element as stored in the …\nIterator that transforms an iterator over <code>char</code> into an …\nPoints to contraction data. Bits 31..13: Index into …\nDecimal digit. Bits 31..13: Index into uint32_t table for …\nPoints to one or more 64-bit CEs. Bits 31..13: Index into …\nPoints to one or more simple/long-primary/long-secondary …\nMarker value for U+FDFA in NFKD\nFall back to the base collator. This is the tag value in …\nTag for a Hangul syllable. Bits 31..9: Unused, 0. Bit      …\nImplicit CE tag. Compute an unassigned-implicit CE. All …\nLatin mini expansions of two simple CEs [pp, 05, tt] [00, …\nTag for a lead surrogate code unit. Optional optimization …\nLong-primary CE with COMMON_SEC_AND_TER_CE. Bits 31..8: …\nLong-secondary CE with zero primary. Bits 31..16: …\nMarker that a complex decomposition isn’t round-trippable\nThe purpose of grouping the non-primary bits into a struct …\nTag for CEs with primary weights in code point order. Bits …\nPoints to prefix trie. Bits 31..13: Index into …\nUnused. May be used in the future for single-byte …\n<code>u16</code> version of the previous marker value.\nSpecial-CE32 tags, from bits 3..0 of a special 32-bit CE. …\nTag for U+0000, for moving the NUL-termination handling …\nGet the bits\nGet the case bits as the high two bits of a u16\nExtracts a canonical combining class (possibly zero) from …\nConvert a <code>u16</code> <em>obtained from data provider data</em> to <code>char</code>.\nConvert a <code>u32</code> <em>obtained from data provider data</em> to <code>char</code>.\nChecks if a trie value signifies a character whose …\nThe <code>CollationElement32</code> mapping for the Combining …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the index from this element.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether <code>iter</code> has been exhausted\nThe <code>CollationElement32</code> mapping for the Hangul Jamo block.\nGets the length from this element.\nWhether the Lithuanian combining dot above handling is …\nMicro optimization for doing a simpler write when we know …\nConstructor\nGet the non-primary weights\nIf numeric mode is enabled, the 8 high bits of the numeric …\nAlready computed but not yet returned <code>CollationElement</code>s.\nThe index of the next item to be returned from <code>pending</code>. …\nThe characters most previously seen (or never-matching …\nGet the primary weight\nGet the quaternary weight in the original storage bit …\nThe root collation data.\nNFD complex decompositions on the BMP\nNFD complex decompositions on supplementary planes\nGet the secondary weight\nGet the secondary weight\nReturns the tag if this element is special. …\nTailoring if applicable.\nGet the tertiary weight as u16 with the high two bits of …\nGet any combination of tertiary, case, and quaternary by …\nExpands to 64 bits if the expansion is to a single 64-bit …\nExpands to 64 bits if the expansion is to a single 64-bit …\nExpands to 64 bits if the expansion is to a single 64-bit …\nNFD main trie.\nChecks if a trie value carries a (non-zero) canonical …\nChecks if the trie signifies a special non-starter …\nIf <code>opt</code> is <code>Some</code>, unwrap it. If <code>None</code>, panic if debug …\n<code>upcoming</code> holds the characters that have already been read …\nA list of error outcomes for various operations in this …\nAn error originating inside of the data provider.\nRequested data was found but was malformed\nThe requested collation does not exist\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 3..4 : Alternate handling: 00 non-ignorable, 01 …\nWhat to do about characters whose comparison level can be …\nBit    11 : Backward secondary level\nWhether second level compares the last accent difference …\nBit     9 : Keep the case bits in the tertiary weight …\nBit    10 : Insert the case level between the secondary …\nTreatment of case. (Large and small kana differences are …\nWhether to distinguish case in sorting, even for sorting …\nOptions settable by the user of the API.\nCharacters classified as spaces, punctuation, symbols, or …\nWhether alternate handling is explicitly set.\nWhether backward secondary is explicitly set.\nWhether case first is explicitly set.\nWhether case level is explicitly set.\nWhether max variable is explicitly set.\nWhether numeric is explicitly set.\nWhether strength is explicitly set.\nCompare the NFD form by code point order as the quinary …\nLower case first.\nBits 5..6 : 2-bit max variable value to be shifted by …\nWhat characters get shifted to the quaternary level with …\nBit    12 : Numeric\nKeep the characters whose level can be varied on the …\nWhen set to <code>On</code>, any sequence of decimal digits is sorted …\nUse the default tertiary weights.\nLeave off the case level option.  Case differences will be …\nLeave off the numeric option.  Decimal digits will be …\nLeave off the backward second level option. Diacritics in …\nTurn on the case level option, thereby making a separate …\nTurn on numeric sorting for any sequence of decimal …\nTurn on backward second level ordering so that the second …\nCompare only on the level of base letters. This level …\nCharacters classified as spaces or punctuation are shifted.\nCompare also on the quaternary level. For Japanese, Higana …\nThe resolved (actually used) options used by the collator.\nBits 0..2 : Strength\nCompare also on the secondary level, which corresponds to …\nShift the characters at or below <code>MaxVariable</code> to the …\nCharacters classified as spaces are shifted.\nThe collation strength that indicates how many levels to …\nCharacters classified as spaces, punctuation, or symbols …\nCompare also on the tertiary level. By default, if the …\nBit     7 : Reserved for extending max variable. Bit     8 …\nUpper case first.\nWhether certain characters are moved from the primary …\nUser-specified alternate handling collation option.\nResolved alternate handling collation option.\nWhether second level compares the last accent difference …\nUser-specified backward second level collation option.\nResolved backward second level collation option.\nUser-specified case first collation option.\nResolved case first collation option.\nWhether there’s a dedicated case level.\nUser-specified case level collation option.\nResolved case level collation option.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience conversion for copying the options from an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum character class that <code>AlternateHandling::Shifted</code>\nUser-specified max variable collation option.\nResolved max variable collation option.\nCreate a new <code>CollatorOptions</code> with the defaults.\nCreate a new <code>CollatorOptionsBitField</code> with the defaults.\nWhether sequences of decimal digits are compared according …\nUser-specified numeric collation option.\nResolved numeric collation option.\nWhether certain characters are moved from the primary …\nWhether second level compares the last accent difference …\nWhether case is the most significant part of the tertiary …\nWhether there’s a dedicated case level. If <code>true</code>, detaches\nFor options left as defaults in this <code>CollatorOptions</code>, set …\nThe maximum character class that <code>AlternateHandling::Shifted</code>\nWhether sequences of decimal digits are compared according …\nThis is the BCP47 key <code>ks</code>. See the enum for examples.\nThis is the BCP47 key <code>ks</code>.\nUser-specified strength collation option.\nResolved strength collation option.\nIf strength is &lt;= secondary, returns <code>None</code>. Otherwise, …\nInternal upper first getter\nBaked data\nThe main collation data either for the root or for a …\nMarker type for <code>CollationDataV1</code>: “collator/data@1”\nSecondary weights for the start of the Combining …\nMarker type for <code>CollationDiacriticsV1</code>: “collator/dia@1”\n<code>CollationElement32</code>s for the Hangul Jamo Unicode Block\nMarker type for <code>CollationJamoV1</code>: “collator/jamo@1”\nEach non-alias collation that the data provider knows …\nMarker type for <code>CollationMetadataV1</code>: “collator/meta@1”\nScript reordering data\nMarker type for <code>CollationReorderingV1</code>: “collator/reord@1…\nSpecial primaries associated with the root collation\nMarker type for <code>CollationSpecialPrimariesV1</code>: “…\nThai\nCanadian French\nSee the mask constants in the <code>impl</code> block for the bit …\n<code>CollationElement32</code>s used in expansions and as defaults for …\n<code>CollationElement32</code>s (as <code>u32</code>s) for the Hangul Jamo Unicode …\n<code>CollationElement</code>s used in expansions and offset CE32s …\nDefaults and tries for prefix and contraction matching\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe primaries corresponding to <code>MaxVariable</code> character …\nLithuanian\nLimit of last reordered range. 0 if no reordering or no …\nThe high 8 bits of the numeric primary\nPrimary-weight ranges for script reordering, to be used by …\n256-byte table for reordering permutation of primary lead …\nSecondary weights for characters starting from U+0300 up …\nVietnamese and Ewe\nMapping from <code>char</code> to <code>CollationElement32</code> (represented as …")