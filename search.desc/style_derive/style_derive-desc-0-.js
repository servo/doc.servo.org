searchState.loadedDescShard("style_derive", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven an input type which has some where clauses already, …\nGiven “FooBar”, returns “Foo” and sets <code>camel_case</code> …\nTransforms “FooBar” to “foo-bar”.\nTransforms foo-bar to FOO_BAR.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerive from the given fields. Return false if the fields …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlags that can go mixed with each other, comma-separated.\nReturns a vector of (rust_name, css_name) of a given flag …\nWhether there are overlapping bits we need to take care of …\nFlags that can only go on their own, comma-separated.\nExtra validation of the resulting mixed flags.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")