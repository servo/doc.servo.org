searchState.loadedDescShard("euclid", 0, "A collection of strongly typed math tools for computer …\nAn angle in radians\nA 2d vector of booleans, useful for component-wise logic …\nA 3d vector of booleans, useful for component-wise logic …\nA 2d axis aligned rectangle represented by its minimum and …\nAn axis aligned 3D box represented by its minimum and …\nHomogeneous vector in 3D space.\nA one-dimensional distance, with value represented by <code>T</code> …\nA 2d Point tagged with a unit.\nA 3d Point tagged with a unit.\nA 2d Rectangle optionally tagged with a unit.\nA rigid transformation. All lengths are preserved under …\nA transform that can represent rotations in 2d, …\nA transform that can represent rotations in 3d, …\nA scaling factor between two different units of …\nA group of 2D side offsets, which correspond to …\nA 2d size tagged with a unit.\nA 3d size tagged with a unit.\nA 2d transform represented by a column-major 3 by 3 …\nA 3d transform stored as a column-major 4 by 4 matrix.\nA 2d transformation from a space to another that can only …\nA 3d transformation from a space to another that can only …\nTrait for basic trigonometry functions, so they can be …\nThe default unit.\nA 2d Vector tagged with a unit.\nA 3d Vector tagged with a unit.\nAngle in radians\nUtilities for testing approximate ordering - especially …\nShorthand for …\nShorthand for <code>BoolVector2D { x, y }</code>.\nShorthand for <code>BoolVector3D { x, y, z }</code>.\nA set of aliases for all types, tagged with the default …\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nReturns the argument unchanged.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nCalls <code>U::from(self)</code>.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nA one-dimensional length, tagged with its units.\nA one-dimensional length, tagged with its units.\nShorthand for <code>Point2D::new(x, y)</code>.\nShorthand for <code>Point3D::new(x, y)</code>.\nThe real part.\nShorthand for …\nAll matrix multiplication in this module is in row-vector …\nA type-checked scaling factor between units.\nA group of side offsets, which correspond to …\nShorthand for <code>Size2D::new(w, h)</code>.\nShorthand for <code>Size3D::new(w, h, d)</code>.\nConvenience constructor.\nConvenience constructor.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nAn angle in radians\nReturns the shortest signed angle between two angles.\nCast from one numeric representation to another.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the angle is a finite number.\nLinear interpolation between two angles, using the …\nReturns this angle in the [0..2*PI[ range.\nReturns this angle in the ]-PI..PI] range.\nReturns <code>(sin(self), cos(self))</code>.\nCast angle to <code>f32</code>.\nCast angle <code>f64</code>.\nFallible cast from one numeric representation to another.\nTrait for testing approximate equality\nDefault epsilon value\nReturns <code>true</code> if this object is approximately equal to the …\nReturns <code>true</code> if this object is approximately equal to the …\nA 2d axis aligned rectangle represented by its minimum and …\nCast from one numeric representation to another, …\nCast the unit\nReturns <code>true</code> if this box2d contains the point <code>p</code>. A point …\nReturns <code>true</code> if this box contains the interior of the …\nReturns <code>true</code> if this box contains the point <code>p</code>. A point is …\nReturns the argument unchanged.\nConstructor.\nReturns the smallest box containing all of the provided …\nCreates a <code>Box2D</code> of the given size, at offset zero.\nTag a unitless value with units.\nInflates the box by the specified sizes on each side …\nCalculate the size and position of an inner box.\nComputes the intersection of two boxes, returning <code>None</code> if …\nComputes the intersection of two boxes without check …\nReturns <code>true</code> if the two boxes intersect.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the size is zero, negative or NaN.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if the box has a negative area.\nLinearly interpolate between this box and another box.\nConstructor.\nCalculate the b and position of an outer box.\nReturn a box with edges rounded to integer coordinates, …\nReturn a box with faces/edges rounded to integer …\nReturn a box with faces/edges rounded to integer …\nChange the size of the box by adjusting the max endpoint …\nCast into an <code>f32</code> box.\nCast into an <code>f64</code> box.\nCast into an <code>i32</code> box, truncating decimals if any.\nCast into an <code>i64</code> box, truncating decimals if any.\nCast into an <code>u32</code> box, truncating decimals if any.\nDrop the units, preserving only the numeric value.\nCast into an <code>usize</code> box, truncating decimals if any.\nReturns the same box, translated by a vector.\nFallible cast from one numeric representation to another, …\nComputes the union of two boxes.\nConstructor, setting all sides to zero.\nAn axis aligned 3D box represented by its minimum and …\nShorthand for …\nCast from one numeric representation to another, …\nCast the unit\nReturns <code>true</code> if this box3d contains the point <code>p</code>. A point …\nReturns <code>true</code> if this box3d contains the interior of the …\nReturns <code>true</code> if this box3d contains the point <code>p</code>. A point …\nReturns the argument unchanged.\nConstructor.\nReturns the smallest box containing all of the provided …\nCreates a <code>Box3D</code> of the given size, at offset zero.\nTag a unitless value with units.\nInflates the box by the specified sizes on each side …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the size is zero, negative or NaN.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if the box has a negative volume.\nLinearly interpolate between this box3d and another box3d.\nConstructor.\nReturn a box3d with edges rounded to integer coordinates, …\nReturn a box3d with faces/edges rounded to integer …\nReturn a box3d with faces/edges rounded to integer …\nCast into an <code>f32</code> box3d.\nCast into an <code>f64</code> box3d.\nCast into an <code>i32</code> box3d, truncating decimals if any.\nCast into an <code>i64</code> box3d, truncating decimals if any.\nCast into an <code>u32</code> box3d, truncating decimals if any.\nDrop the units, preserving only the numeric value.\nCast into an <code>usize</code> box3d, truncating decimals if any.\nReturns the same box3d, translated by a vector.\nFallible cast from one numeric representation to another, …\nComputes the union of two boxes.\nConstructor, setting all sides to zero.\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nThe real part.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nHomogeneous vector in 3D space.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor taking scalar values directly.\nConvert into Cartesian 2D point.\nConvert into Cartesian 3D point.\nA one-dimensional distance, with value represented by <code>T</code> …\nCast from one numeric representation to another, …\nCast the unit\nReturns the argument unchanged.\nUnpack the underlying value from the wrapper.\nCalls <code>U::from(self)</code>.\nLinearly interpolate between this length and another …\nReturns maximum between this length and another length.\nReturns minimum between this length and another length.\nAssociate a value with a unit of measure.\nFallible cast from one numeric representation to another, …\nDefines the smallest integer equal or greater than the …\nDefines the biggest integer equal or lower than the …\nDefines the nearest integer value to the original value.\nRounds to the smallest integer equal or greater than the …\nRounds to the biggest integer equal or lower than the …\nRounds to the nearest integer value.\nA 2d Point tagged with a unit.\nA 3d Point tagged with a unit.\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast the unit, preserving the numeric value.\nCast the unit, preserving the numeric value.\nSee <code>Point2D::ceil</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Point3D::ceil</code>.\nRounds each component to the smallest integer equal or …\nReturns the point each component of which clamped by …\nReturns the point each component of which clamped by …\nCalculates Euclidean division, the matching method for …\nCalculates Euclidean division, the matching method for …\nCreate a 3d point from this one, using the specified z …\nSee <code>Point2D::floor</code>.\nRounds each component to the biggest integer equal or …\nSee <code>Point3D::floor</code>.\nRounds each component to the biggest integer equal or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructor taking properly Lengths instead of scalar …\nConstructor taking properly Lengths instead of scalar …\nTag a unitless value with units.\nTag a unitless value with units.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nLinearly interpolate between this point and another point.\nLinearly interpolate between this point and another point.\nApply the function <code>f</code> to each component of this point.\nApply the function <code>f</code> to each component of this point.\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nShorthand for <code>Point2D::new(x, y)</code>.\nShorthand for <code>Point3D::new(x, y)</code>.\nCalculates the least nonnegative remainder of …\nCalculates the least nonnegative remainder of …\nRounds each component to the nearest integer value.\nSee <code>Point2D::round</code>.\nRounds each component to the nearest integer value.\nSee <code>Point3D::round</code>.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConvert into a 2d point.\nConvert into a 3d point with z-coordinate equals to zero.\nCast into an array with x and y.\nCast into an array with x, y and z.\nCast into an <code>f32</code> point.\nCast into an <code>f32</code> point.\nCast into an <code>f64</code> point.\nCast into an <code>f64</code> point.\nCast into an <code>i32</code> point, truncating decimals if any.\nCast into an <code>i32</code> point, truncating decimals if any.\nCast into an <code>i64</code> point, truncating decimals if any.\nCast into an <code>i64</code> point, truncating decimals if any.\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nCast into an <code>u32</code> point, truncating decimals if any.\nCast into an <code>u32</code> point, truncating decimals if any.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast this point into a vector.\nCast this point into a vector.\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nReturns a 2d point using this point’s x and y coordinates\nReturns a 2d point using this point’s x and z coordinates\nSwap x and y.\nReturns a 2d point using this point’s x and z coordinates\nThe same as <code>Point2D::origin</code>.\nThe same as <code>Point3D::origin</code>.\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nA 2d Rectangle optionally tagged with a unit.\nCast from one numeric representation to another, …\nCast the unit\nReturns <code>true</code> if this rectangle contains the point. Points …\nReturns <code>true</code> if this rectangle contains the interior of …\nReturns the argument unchanged.\nReturns the smallest rectangle defined by the …\nCreates a rect of the given size, at offset zero.\nTag a unitless value with units.\nCalculate the size and position of an inner rectangle.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all members are finite.\nLinearly interpolate between this rectangle and another …\nConstructor.\nCalculate the size and position of an outer rectangle.\nShorthand for …\nReturn a rectangle with edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nCast into an <code>f32</code> rectangle.\nCast into an <code>f64</code> rectangle.\nCast into an <code>i32</code> rectangle, truncating decimals if any.\nCast into an <code>i64</code> rectangle, truncating decimals if any.\nCast into an <code>u32</code> rectangle, truncating decimals if any.\nCast into an <code>u64</code> rectangle, truncating decimals if any.\nDrop the units, preserving only the numeric value.\nCast into an <code>usize</code> rectangle, truncating decimals if any.\nReturns the same rectangle, translated by a vector.\nFallible cast from one numeric representation to another, …\nConstructor, setting all sides to zero.\nA rigid transformation. All lengths are preserved under …\nDecompose this into a translation and an rotation to be …\nReturns the argument unchanged.\nTag a unitless value with units.\nConstruct an identity transform\nCalls <code>U::from(self)</code>.\nInverts the transformation\nConstruct a new rigid transformation, where the <code>rotation</code> …\nConstruct a new rigid transformation, where the <code>translation</code>…\nReturns the multiplication of the two transforms such that …\nDrop the units, preserving only the numeric value.\nA transform that can represent rotations in 2d, …\nA transform that can represent rotations in 3d, …\nAngle in radians\nCreates a rotation around a given axis.\nCreates a rotation around the x axis.\nCreates a rotation around the y axis.\nCreates a rotation around the z axis.\nCast the unit, preserving the numeric value.\nCast the unit, preserving the numeric value.\nCreates a rotation from Euler angles.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTag a unitless value with units.\nTag a unitless value with units.\nReturns self.angle as a strongly typed <code>Angle&lt;T&gt;</code>.\nComponent multiplied by the imaginary number <code>i</code>.\nCreates the identity rotation.\nCreates the identity rotation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inverse of this rotation.\nReturns the inverse of this rotation.\nReturns <code>true</code> if norm of this quaternion is (approximately) …\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nBasic Linear interpolation between this rotation and …\nCreates a rotation from an angle in radians.\nComputes the norm of this quaternion.\nReturns a unit quaternion from this one.\nCreates a rotation around from a quaternion representation.\nThe real part.\nCreates a rotation from an angle in radians.\nSpherical linear interpolation between this rotation and …\nComputes the squared norm of this quaternion.\nReturns a rotation representing the other rotation …\nReturns a rotation representing this rotation followed by …\nCreates a 3d rotation (around the z axis) from this 2d …\nReturns the matrix representation of this rotation.\nReturns the matrix representation of this rotation.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nReturns the given 2d point transformed by this rotation.\nReturns the given 2d point transformed by this rotation …\nReturns the given 3d point transformed by this rotation.\nReturns the given 2d vector transformed by this rotation.\nReturns the given 2d vector transformed by this rotation …\nReturns the given 3d vector transformed by this rotation.\nCreates a rotation around from a quaternion representation …\nReturns the vector part (i, j, k) of this quaternion.\nA scaling factor between two different units of …\nCast from one numeric representation to another, …\nReturns the point each component of which clamped by …\nReturns the argument unchanged.\nReturns the underlying scalar scale factor.\nCreates an identity scale (1.0).\nCalls <code>U::from(self)</code>.\nThe inverse Scale (1.0 / self).\nReturns <code>true</code> if this scale has no effect.\nReturns the given box transformed by this scale.\nReturns the given box transformed by this scale.\nReturns the given point transformed by this scale.\nReturns the given point transformed by this scale.\nReturns the given rect transformed by this scale.\nReturns the given size transformed by this scale.\nReturns the given vector transformed by this scale.\nFallible cast from one numeric representation to another, …\nA group of 2D side offsets, which correspond to …\nReturns the argument unchanged.\nConstructor setting the same value to all sides, taking a …\nConstructor taking a typed Length for each side.\nConstruct side offsets from min and a max vector offsets.\nConstruct side offsets from min and a max vector offsets.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all side offsets are zero.\nConstructor taking a scalar for each side.\nConstructor setting the same value to all sides, taking a …\nConstructor, setting all sides to zero.\nA 2d size tagged with a unit.\nA 3d size tagged with a unit.\nComputes the absolute value of each component.\nComputes the absolute value of each component.\nReturns result of multiplication of both components\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast the unit\nCast the unit\nSee <code>Size2D::ceil</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Size3D::ceil</code>.\nRounds each component to the smallest integer equal or …\nReturns the size each component of which clamped by …\nReturns the size each component of which clamped by …\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nDeserializes 2d size from tuple of width and height.\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nSee <code>Size2D::floor</code>.\nRounds each component to the biggest integer equal or …\nRounds each component to the biggest integer equal or …\nSee <code>Size3D::floor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructor taking scalar strongly typed lengths.\nConstructor taking scalar strongly typed lengths.\nTag a unitless value with units.\nTag a unitless value with units.\nReturns vector with results of “greater then” …\nReturns vector with results of “greater than” …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if any component of size is zero, negative, …\nReturns <code>true</code> if any component of size is zero, negative or …\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if both components is positive and <code>false</code> any …\nReturns <code>true</code> if all components is positive and <code>false</code> any …\nLinearly interpolate each component between this size and …\nLinearly interpolate between this size and another size.\nReturns vector with results of “lower then” operation …\nReturns vector with results of “lower than” operation …\nReturns the size each component of which are maximum of …\nReturns the size each component of which are maximum of …\nReturns the size each component of which are minimum of …\nReturns the size each component of which are minimum of …\nConstructor taking scalar values.\nConstructor taking scalar values.\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nSee <code>Size2D::round</code>.\nRounds each component to the nearest integer value.\nRounds each component to the nearest integer value.\nSee <code>Size3D::round</code>.\nSerializes 2d size to tuple of width and height.\nShorthand for <code>Size2D::new(w, h)</code>.\nShorthand for <code>Size3D::new(w, h, d)</code>.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nReturn this size as an array of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into an <code>f32</code> size.\nCast into an <code>f32</code> size.\nCast into an <code>f64</code> size.\nCast into an <code>f64</code> size.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nReturn this size as a tuple of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u64</code> size, truncating decimals if any.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nCast into an <code>uint</code> size, truncating decimals if any.\nCast into an <code>uint</code> size, truncating decimals if any.\nReturn this size as a vector with width and height.\nReturn this size as a vector with width, height and depth.\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nReturns result of multiplication of all components\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nThe same as <code>Zero::zero</code> but available without importing …\nThe same as <code>Zero::zero</code> but available without importing …\nA 2d transform represented by a column-major 3 by 3 …\nReturns <code>true</code> if this transform is approximately equal to …\nReturns <code>true</code> if this transform is approximately equal to …\nReturns <code>true</code> if this transform is approximately equal to …\nCast from one numeric representation to another, …\nReturns the identity transform.\nComputes and returns the determinant of this transform.\nReturns the argument unchanged.\nCreate a transform providing its components via an array …\nEquivalent to <code>from_array</code> with elements packed two at a time\nTag a unitless value with units.\nCreate an identity matrix:\nCalls <code>U::from(self)</code>.\nReturns the inverse transform if possible.\nIntentional not public, because it checks for exact …\nReturns whether it is possible to compute the inverse …\nCreate a transform specifying its components in using the …\nReturns a box that encompasses the result of transforming …\nReturns a rectangle that encompasses the result of …\nApplies a rotation before self’s transformation and …\nApplies a scale before self’s transformation and returns …\nApplies a translation before self’s transformation and …\nReturns a rotation transform.\nCreate a 2d scale transform:\nReturns the multiplication of the two matrices such that …\nApplies a rotation after self’s transformation and …\nApplies a scale after self’s transformation and returns …\nApplies a translation after self’s transformation and …\nCreate a 3D transform from the current transform\nReturns an array containing this transform’s terms.\nReturns an array containing this transform’s terms …\nEquivalent to <code>to_array</code> with elements packed two at a time …\nDrop the units, preserving only the numeric value.\nReturns the given point transformed by this transform.\nReturns the given vector transformed by this matrix.\nCreate a 2d translation transform:\nFallible cast from one numeric representation to another, …\nReturns the same transform with a different destination …\nReturns the same transform with a different source unit.\nA 3d transform stored as a column-major 4 by 4 matrix.\nReturns <code>true</code> if this transform is approximately equal to …\nReturns <code>true</code> if this transform is approximately equal to …\nCast from one numeric representation to another, …\nReturns the identity transform.\nCompute the determinant of the transform.\nReturns the argument unchanged.\nCreate a transform providing its components via an array …\nEquivalent to <code>from_array</code> with elements packed four at a …\nConvenience function to create a scale transform from a …\nTag a unitless value with units.\nCreates an identity matrix:\nCalls <code>U::from(self)</code>.\nReturns the inverse transform if possible.\nReturns <code>true</code> if this transform can be represented with a …\nCheck whether shapes on the XY plane with Z pointing …\nIntentional not public, because it checks for exact …\nReturns whether it is possible to compute the inverse …\nMultiplies all of the transform’s component by a scalar …\nCreate a transform specifying all of it’s component as a …\nCreate a transform representing a 2d transformation from …\nCreate an orthogonal projection transform.\nReturns a 2d box that encompasses the result of …\nReturns a 3d box that encompasses the result of …\nReturns a rectangle that encompasses the result of …\nCreate a simple perspective transform, projecting to the …\nReturns a transform with a rotation applied before self’…\nReturns a transform with a scale applied before self’s …\nReturns a transform with a translation applied before self…\nReturns a projection of this transform in 2d space.\nCreate a 3d rotation transform from an angle / axis. The …\nCreate a 3d scale transform:\nCreate a 2d skew transform.\nReturns the multiplication of the two matrices such that …\nReturns a transform with a rotation applied after self’s …\nReturns a transform with a scale applied after self’s …\nReturns a transform with a translation applied after self…\nCreate a 2D transform picking the relevant terms from this …\nReturns an array containing this transform’s terms.\nReturns an array containing this transform’s terms …\nEquivalent to <code>to_array</code> with elements packed four at a time …\nEquivalent to <code>to_array_transposed</code> with elements packed …\nDrop the units, preserving only the numeric value.\nReturns the given 2d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nReturns the given 3d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nReturns the given 2d vector transformed by this matrix.\nReturns the given 3d vector transformed by this matrix.\nCreate a 3d translation transform:\nFallible cast from one numeric representation to another, …\nReturns the same transform with a different destination …\nReturns the same transform with a different source unit.\nA 2d transformation from a space to another that can only …\nA 3d transformation from a space to another that can only …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTag a unitless value with units.\nTag a unitless value with units.\nCreates no-op translation (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).\nCreates no-op translation (both <code>x</code> and <code>y</code> is <code>zero()</code>).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inverse transformation.\nReturn the inverse transformation.\nCheck if translation does nothing (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).\nCheck if translation does nothing (both x and y is <code>zero()</code>).\nCast into an array with x, y and z.\nCast into an array with x and y.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an i32 vector, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nReturns the matrix representation of this translation.\nReturns the matrix representation of this translation.\nCast into a tuple with x, y and z.\nCast into a tuple with x and y.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into a 3D vector.\nCast into a 2D vector.\nTranslate a 2D box and cast its unit.\nTranslate a 2D box and cast its unit.\nTranslate a 3D box and cast its unit.\nTranslate a point and cast its unit.\nTranslate a point and cast its unit.\nTranslate a point and cast its unit.\nTranslate a rectangle and cast its unit.\nTranslate a rectangle and cast its unit.\nNo-op, just cast the unit.\nNo-op, just cast the unit.\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nTrait for basic trigonometry functions, so they can be …\nA 2d vector of booleans, useful for component-wise logic …\nA 3d vector of booleans, useful for component-wise logic …\nA 2d Vector tagged with a unit.\nA 3d Vector tagged with a unit.\nComputes the vector with absolute values of each component.\nComputes the vector with absolute values of each component.\nReturns <code>true</code> if all components are <code>true</code> and <code>false</code> …\nReturns <code>true</code> if all components are <code>true</code> and <code>false</code> …\nReturns new vector with by-component AND operation applied.\nReturns new vector with by-component AND operation applied.\nReturns the signed angle between this vector and the x …\nReturns the signed angle between this vector and another …\nReturns the positive angle between this vector and another …\nReturns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.\nReturns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.\nShorthand for <code>BoolVector2D { x, y }</code>.\nShorthand for <code>BoolVector3D { x, y, z }</code>.\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast the unit.\nCast the unit.\nSee <code>Vector2D::ceil</code>.\nRounds each component to the smallest integer equal or …\nRounds each component to the smallest integer equal or …\nSee <code>Vector3D::ceil</code>.\nReturns the vector each component of which is clamped by …\nReturns the vector each component of which is clamped by …\nReturn this vector with minimum and maximum lengths …\nReturn this vector with minimum and maximum lengths …\nReturns the component-wise division of the two vectors.\nReturns the component-wise division of the two vectors.\nReturns the component-wise multiplication of the two …\nReturns the component-wise multiplication of the two …\nReturns the norm of the cross product [self.x, self.y, 0] …\nCross product.\nDot product.\nDot product.\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nCreate a 3d vector from this one, using the specified z …\nRounds each component to the biggest integer equal or …\nSee <code>Vector2D::floor</code>.\nRounds each component to the biggest integer equal or …\nSee <code>Vector3D::floor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructor taking angle and length\nConstructor taking properly  Lengths instead of scalar …\nConstructor taking properly  Lengths instead of scalar …\nTag a unit-less value with units.\nTag a unitless value with units.\nReturns vector with results of “greater than” …\nReturns vector with results of “greater than” …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns the vector length.\nReturns the vector length.\nLinearly interpolate each component between this vector …\nLinearly interpolate each component between this vector …\nReturns vector with results of “lower than” operation …\nReturns vector with results of “lower than” operation …\nApply the function <code>f</code> to each component of this vector.\nApply the function <code>f</code> to each component of this vector.\nReturns the vector each component of which are maximum of …\nReturns the vector each component of which are maximum of …\nReturns the vector each component of which are minimum of …\nReturns the vector each component of which are minimum of …\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nReturns the vector with length of one unit.\nReturns the vector with length of one unit\nReturns new vector with results of negation operation on …\nReturns new vector with results of negation operation on …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nConstructor, setting all components to one.\nConstructor, setting all components to one.\nReturns new vector with by-component OR operation applied.\nReturns new vector with by-component OR operation applied.\nReturns this vector projected onto another one.\nReturns this vector projected onto another one.\nReturns a reflection vector using an incident ray and a …\nReturns a reflection vector using an incident ray and a …\nReturn the normalized vector even if the length is larger …\nReturn the normalized vector even if the length is larger …\nRounds each component to the nearest integer value.\nSee <code>Vector2D::round</code>.\nRounds each component to the nearest integer value.\nSee <code>Vector3D::round</code>.\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns vector, each component of which or from <code>a</code>, or from …\nReturns vector, each component of which or from <code>a</code>, or from …\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nReturns the vector’s length squared.\nReturns the vector’s length squared.\nConvert into a 2d vector.\nConvert into a 3d vector with <code>z</code> coordinate equals to …\nCast into an array with x and y.\nCast into an array with x, y and z.\nCast into an array with x, y, z and 0.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an i32 vector, truncating decimals if any.\nCast into an <code>i32</code> vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an <code>i64</code> vector, truncating decimals if any.\nCast this vector into a point.\nCast this vector into a point.\nCast this vector into a size.\nCreates translation by this vector in vector units.\nCreates translation by this vector in vector units\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nCast into a tuple with x, y, z and 0.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nReturns the vector with length of one unit.\nReturns the vector with length of one unit.\nConvenience constructor.\nConvenience constructor.\nReturn this vector scaled to fit the provided length.\nReturn this vector capped to a maximum length.\nReturn this vector capped to a maximum length.\nReturn this vector with a minimum length applied.\nReturn this vector with a minimum length applied.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s x and z …\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nSwap x and y.\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s y and z …\nThe <code>z</code> (traditionally, depth) coordinate.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …")