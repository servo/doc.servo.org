searchState.loadedDescShard("walkdir", 0, "Crate <code>walkdir</code> provides an efficient and cross platform …\nAn ancestor is an item in the directory tree traversed by …\nA closed handle.\nA directory entry.\nUnix-specific extension methods for <code>walkdir::DirEntry</code>\nA sequence of unconsumed directory entries.\nContains the error value\nAn error produced by recursively walking a directory.\nA recursive directory iterator that skips entries.\nAn iterator for recursively descending into a directory.\nContains the success value\nAn opened handle.\nA result type for walkdir operations.\nA builder to create an iterator for recursively walking a …\nYield a directory’s contents before the directory …\nA list of DirEntries corresponding to directories, that are\nThe depth at which this entry was generated relative to …\nThe current depth of iteration (the length of the stack at …\nYields only entries which satisfy the given predicate and …\nYields only entries which satisfy the given predicate and …\nIs set when this entry was created from a symbolic link …\nFollow symbolic links. By default, this is disabled.\nFollow symbolic links if these are the root of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …\nThe underlying inode number (Unix only).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if the given open file handle …\nLike try, but for iterators that return …\nSet the maximum depth of entries yield by the iterator.\nSet the maximum number of simultaneously open file …\nSet the minimum depth of entries yielded by the iterator.\nCreate a builder for a recursive directory iterator …\nCreate a new ancestor from the given directory path.\nAdvances the iterator and returns the next value.\nAdvances the iterator and returns the next value.\nAn index into <code>stack_list</code> that points to the oldest open …\nOptions specified in the builder. Depths, max fds, etc.\nThe path as reported by the <code>fs::ReadDir</code> iterator (even if …\nThe path of this ancestor.\nThe device of the root file path when the first call to …\nDo not cross file system boundaries.\nSkips the current directory.\nSkips the current directory.\nSet a function for sorting directory entries with a …\nSort directory entries by file name, to ensure a …\nSet a function for sorting directory entries with a key …\nA stack of open (up to max fd) or closed handles to …\nA stack of file paths.\nThe start path.\nThe file type. Necessary for recursive iteration, so store …\nA directory entry.\nUnix-specific extension methods for <code>walkdir::DirEntry</code>\nReturns the depth at which this entry was created relative …\nThe depth at which this entry was generated relative to …\nReturn the file name of this entry.\nReturn the file type for the file that this entry points …\nIs set when this entry was created from a symbolic link …\nReturns the argument unchanged.\nReturns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …\nReturns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …\nThe underlying inode number (Unix only).\nCalls <code>U::from(self)</code>.\nThe full path that this entry represents.\nReturns true if and only if this entry points to a …\nReturn the metadata for the file that this entry points to.\nThe full path that this entry represents.\nThe path as reported by the <code>fs::ReadDir</code> iterator (even if …\nReturns <code>true</code> if and only if this entry was created from a …\nThe file type. Necessary for recursive iteration, so store …\nAn error produced by recursively walking a directory.\nReturns the depth at which this error occurred relative to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimilar to <code>io_error</code> except consumes self to convert to the …\nInspect the original <code>io::Error</code> if there is one.\nReturns the path at which a cycle was detected.\nReturns the path associated with this error if one exists.")