searchState.loadedDescShard("webgpu", 0, "Creates context\n…\nhttps://www.w3.org/TR/webgpu/#gpuerror\nhttps://www.w3.org/TR/webgpu/#enumdef-gpuerrorfilter\nWebGPU is disabled\n…\nReads texture to swapchains buffer and maps it\nRecreates swapchain (if needed)\nReturns the argument unchanged.\nError scopes and GPUError types\nCalls <code>U::from(self)</code>.\nData and main loop of WGPU poll thread.\nRender pass commands\nData and main loop of WebGPU thread.\npresent only on ASYNC versions\npresent only on ASYNC versions\nhttps://www.w3.org/TR/webgpu/#gpuerror\nhttps://www.w3.org/TR/webgpu/#enumdef-gpuerrorfilter\nhttps://www.w3.org/TR/webgpu/#gpu-error-scope\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIPC messages that are received in wgpu thread (usually …\nIPC messages that are send to WebGPU DOM objects.\nIPC messages that are send to script thread.\nCreates context\nReads texture to swapchains buffer and maps it\nRecreates swapchain (if needed)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\npresent only on ASYNC versions\npresent only on ASYNC versions\nWebGPU is disabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPolls devices while there is something to poll.\nRAII indicating that there is some work enqueued (closure …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle to the WGPU poller thread (to be used for unparking …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if thread should die after all work in submission is …\nLock for device maintain calls (in poll_all_devices and …\nLock for device maintain calls (in poll_all_devices and …\nCreates a token of work\nWakes the poller thread to start polling.\nThe number of closures that still needs to be fired. When …\n…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuffer is already created and ready to be used immediately\nBuffer is currently actively mapped to be used by wr\nBuffer is currently running mapAsync\nStates of presentation buffer\nPresentation id encodes current configuration and current …\nInitial state, buffer has yet to be created, only its id …\nReturns true if presentation id was updated (was newer)\nCurrent id that is presented/configured\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns id of available buffer and sets state to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInit ContextData as dummy (transparent black)\nReturns new presentation id\nNext presentation id to be returned\nIf there is no associated swapchain the context is dummy …\nReturns true if needs image update (if it’s changed)\nWhen pass is ended we need to drop it so we replace it …\nPass is open (not ended)\nThis roughly matches …\nStore compute passes\nhttps://www.w3.org/TR/webgpu/#abstract-opdef-dispatch-error\nThis stores first error on command encoder, because wgpu …\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDispatches error (if there is any)\nCreates new open pass\nProvides access to poller thread\nStore render passes\nCopies data async from provided texture using encoder_id …\nReplaces pass with ended\nActual pass\nwe need to store valid field because wgpu does not …")