searchState.loadedDescShard("servo_media_gstreamer", 0, "Channel to communicate media instances with its owner …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttaches encoding adapters to the stream, returning the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGLib type: GObject with reference counted clone semantics.\nMakes a clone of this shared reference.\nComparison for two GObjects.\nEquality for two GObjects.\nReturns the argument unchanged.\nHashes the memory address of this object.\nCalls <code>U::from(self)</code>.\nPartial comparison for two GObjects.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegisters the type only once.\nChannel to communicate with the owner GStreamerBackend …\nThe ID of the client context this player belongs to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe player unique ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether the setup was succesfully performed and …\nDecorator used to setup the video sink and process the …\nIndicates whether the type of media stream to be played is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to create a new intance of the <code>RenderUnix</code>\nGLib type: GObject with reference counted clone semantics.\nMakes a clone of this shared reference.\nComparison for two GObjects.\nEquality for two GObjects.\nReturns the argument unchanged.\nHashes the memory address of this object.\nCalls <code>U::from(self)</code>.\nPartial comparison for two GObjects.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegisters the type only once.\nThe caps for the given m-line\nWe can’t trigger a negotiation-needed event until we …\nlink_stream, but for all pending streams\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not this sink pad has already been connected\nStreams need to be linked to the correct pads, so we …\nThe payload value of the given m-line\nTemporary storage for remote_mline_info until the remote …\nDisconnected streams that are waiting to be linked. …\nEach new webrtc stream should have a new payload/pt value, …\nStreams need to be connected to the relevant sink pad, and …\nIn case we get multiple remote offers, this lets us keep …\nWe keep track of how many request pads have been created …\nAll the streams that are actually connected to the …\nA handle to the event loop abstraction surrounding the …")