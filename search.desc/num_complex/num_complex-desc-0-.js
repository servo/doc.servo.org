searchState.loadedDescShard("num_complex", 0, "Complex numbers.\nA complex number in Cartesian form.\nComputes the principal value of the inverse cosine of <code>self</code>.\nComputes the principal value of inverse hyperbolic cosine …\nCalculate the principal Arg of self.\nComputes the principal value of the inverse sine of <code>self</code>.\nComputes the principal value of inverse hyperbolic sine of …\nComputes the principal value of the inverse tangent of <code>self</code>…\nComputes the principal value of inverse hyperbolic tangent …\nComputes the principal value of the cube root of <code>self</code>.\nReturns the complex conjugate. i.e. <code>re - i im</code>\nComputes the cosine of <code>self</code>.\nComputes the hyperbolic cosine of <code>self</code>.\nComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …\nRaises a floating point number to the complex power <code>self</code>.\nReturns <code>self/other</code> using floating-point operations.\nReturns <code>1/self</code> using floating-point operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a polar representation into a complex number.\nParses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …\nParses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …\nReturns imaginary unit\nImaginary portion of the complex number\nImaginary portion of the complex number\nImaginary portion of the complex number\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>1/self</code>\nChecks if the given complex number is finite\nChecks if the given complex number is infinite\nChecks if the given complex number is NaN\nChecks if the given complex number is normal\nReturns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …\nComputes the principal value of natural logarithm of <code>self</code>.\nReturns the logarithm of <code>self</code> with respect to an arbitrary …\nCreate a new Complex\nCalculate |self|\nReturns the square of the norm (since <code>T</code> doesn’t …\nRaises <code>self</code> to a complex power.\nRaises <code>self</code> to a floating point power.\nRaises <code>self</code> to a signed integer power.\nRaises <code>self</code> to an unsigned integer power.\nReal portion of the complex number\nReal portion of the complex number\nReal portion of the complex number\nMultiplies <code>self</code> by the scalar <code>t</code>.\nComputes the sine of <code>self</code>.\nComputes the hyperbolic sine of <code>self</code>.\nComputes the principal value of the square root of <code>self</code>.\nComputes the tangent of <code>self</code>.\nComputes the hyperbolic tangent of <code>self</code>.\nConvert to polar form (r, theta), such that …\nDivides <code>self</code> by the scalar <code>t</code>.")