searchState.loadedDescShard("xml5ever", 0, "This crate provides a push based XML parser library that …\nA tag attribute, e.g. <code>class=&quot;test&quot;</code> in …\nAn expanded name, containing the tag and the namespace.\nA fully qualified name (with a namespace), used to depict …\nRepresents a set of “small characters”, those with …\nThe <code>BufferQueue</code> struct and helper types.\nData that is known at compile-time and hard-coded into the …\nDriver\nTake a reference of <code>self</code> as an <code>ExpandedName</code>, dropping the …\nHelper to quickly create an expanded name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTypes for tag and attribute names, and tree-builder …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe local name (e.g. <code>table</code> in <code>&lt;furn:table&gt;</code> above).\nTakes a local name as a string and returns its key in the …\nThe name of the attribute (e.g. the <code>class</code> in …\nTakes a namespace prefix string and returns its key in a …\nTakes a namespace url string and returns its key in a …\nBasic constructor function.\nThe namespace after resolution (e.g. <code>https://furniture.rs</code> …\nMaps the input of <code>namespace_prefix!</code> to  the output of …\nThe prefix of qualified (e.g. <code>furn</code> in <code>&lt;furn:table&gt;</code> above). …\nSerializer for XML5.\nCreate a <code>SmallCharSet</code>, with each space-separated number …\nThis module contains a single struct <code>SmallCharSet</code>. See its …\nXML5 tokenizer - converts input into tokens\nXML5 tree builder - converts tokens into a tree like …\nThe value of the attribute (e.g. the <code>&quot;test&quot;</code> in …\nA queue of owned string buffers, which supports …\nA character from the <code>SmallCharSet</code>.\nA string buffer containing no characters from the …\nResult from <code>pop_except_from</code> containing either a character …\nCreate an empty BufferQueue.\nConsume bytes matching the pattern, using a custom …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the queue is empty.\nGet the next character if one is available, removing it …\nLook at the next available character without removing it, …\nPops and returns either a single character from the given …\nGet the buffer at the beginning of the queue.\nAdd a buffer to the end of the queue.\nAdd a buffer to the beginning of the queue.\nThe spec replaces most characters in the ISO-2022 C1 …\nA map of entity names to their codepoints. The second …\nAll-encompasing parser setting structure.\nAn XML parser, ready to receive Unicode input through the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nWrap this parser into a <code>TendrilSink</code> that accepts UTF-8 …\nInput used by XmlParser.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse and send results to a <code>TreeSink</code>.\nTokenizer used by XmlParser.\nXml tokenizer options.\nXml tree builder .\nA tag attribute, e.g. <code>class=&quot;test&quot;</code> in …\nContinue without interruptions.\nAn abstraction over any type that can represent an element…\nSpecial properties of an element, useful for tagging …\nAn expanded name, containing the tag and the namespace.\n<code>Handle</code> is a reference to a DOM node.  The tree builder …\nAlmost standards mode\nWhether to interrupt further parsing of the current input …\nStandards mode\nSomething which can be inserted into the DOM.\nThe overall result of parsing.\nA fully qualified name (with a namespace), used to depict …\nFull quirks mode\nA document’s quirks mode, for compatibility with old …\nStop further parsing.\nTrace hooks for a garbage-collected DOM.\nMethods a parser can use to create the DOM. The DOM …\nAdd each attribute to the given element, if no attribute …\nAppend a node as the last child of the given node.  If …\nWhen the insertion point is decided by the existence of a …\nAppend a node as the sibling immediately before the given …\nAppend a <code>DOCTYPE</code> element to the <code>Document</code> node.\nAssociate the given form-associatable element with the …\nIndicate that a <code>script</code> element is complete.\nCreate a comment node.\nA constructor for an element.\nCreate an element.\nCreate a Processing Instruction node.\nWhat is the name of this element?\nConsume this sink and return the overall result of parsing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a handle to the <code>Document</code> node.\nGet a handle to a template’s template contents. The tree …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the adjusted current node is an HTML …\nThe local name (e.g. <code>table</code> in <code>&lt;furn:table&gt;</code> above).\nMark a HTML <code>&lt;script&gt;</code> as “already started”.\nThis boolean should be recorded with the element and …\nThe name of the attribute (e.g. the <code>class</code> in …\nThe namespace after resolution (e.g. <code>https://furniture.rs</code> …\nSignal a parse error.\nIndicate that a node was popped off the stack of open …\nThe prefix of qualified (e.g. <code>furn</code> in <code>&lt;furn:table&gt;</code> above). …\nDetach the given node from its parent.\nRemove all the children from node and append them to …\nDo two handles refer to the same node?\nCalled whenever the line number changes.\nSet the document’s quirks mode.\nA document fragment should be created, associated with the …\nUpon a call to <code>trace_handles</code>, the tree builder will call …\nThis module contains functionality for managing the DOM, …\nThe value of the attribute (e.g. the <code>&quot;test&quot;</code> in …\nContinue without interruptions.\nAn abstraction over any type that can represent an element…\nSpecial properties of an element, useful for tagging …\n<code>Handle</code> is a reference to a DOM node.  The tree builder …\nAlmost standards mode\nWhether to interrupt further parsing of the current input …\nStandards mode\nSomething which can be inserted into the DOM.\nThe overall result of parsing.\nFull quirks mode\nA document’s quirks mode, for compatibility with old …\nStop further parsing.\nTrace hooks for a garbage-collected DOM.\nMethods a parser can use to create the DOM. The DOM …\nAdd each attribute to the given element, if no attribute …\nAppend a node as the last child of the given node.  If …\nWhen the insertion point is decided by the existence of a …\nAppend a node as the sibling immediately before the given …\nAppend a <code>DOCTYPE</code> element to the <code>Document</code> node.\nAssociate the given form-associatable element with the …\nIndicate that a <code>script</code> element is complete.\nCreate a comment node.\nA constructor for an element.\nCreate an element.\nCreate a Processing Instruction node.\nWhat is the name of this element?\nConsume this sink and return the overall result of parsing.\nGet a handle to the <code>Document</code> node.\nGet a handle to a template’s template contents. The tree …\nReturns true if the adjusted current node is an HTML …\nMark a HTML <code>&lt;script&gt;</code> as “already started”.\nThis boolean should be recorded with the element and …\nSignal a parse error.\nIndicate that a node was popped off the stack of open …\nDetach the given node from its parent.\nRemove all the children from node and append them to …\nDo two handles refer to the same node?\nCalled whenever the line number changes.\nSet the document’s quirks mode.\nA document fragment should be created, associated with the …\nUpon a call to <code>trace_handles</code>, the tree builder will call …\nA type alias for an attribute name and value (e.g. the …\nOnly serialize the children of the node, treating any …\nInclude the parent node when serializing.\nTypes that can be serialized (according to the xml-like …\nStruct for setting serializer options.\nTypes that are capable of serializing implement this trait\nUsed as a parameter to <code>serialize</code>, telling it if we want to …\nStruct used for serializing nodes into a text that other …\nSerialize the end of an element, for example <code>&lt;/div&gt;</code>.\nSerializes given end element into text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Serializier from a writer and given …\nMethod for serializing generic node to a given writer.\nTake the serializer and call its methods to serialize this …\nSerialize the start of an element, for example …\nSerializes given start element into text. Start element …\nSerialize the root node? Default: ChildrenOnly\nSerialize a comment node, for example <code>&lt;!-- comment --&gt;</code>.\nSerializes comment into text.\nSerialize a doctype node, for example <code>&lt;!doctype html&gt;</code>.\nSerializes given doctype\nSerialize a processing instruction node, for example …\nSerializes given processing instruction.\nSerialize a plain text node.\nSerializes text for a node or an attributes.\nWrites given text into the Serializer, escaping it, …\nRepresents a set of “small characters”, those with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCount the number of bytes of characters at the beginning …\nA marker of an atomic (and hence concurrent) tendril.\nThe multithreadedness of a tendril.\n<code>Tendril</code> for storing binary data.\nTrait for format marker types.\nA marker of a non-atomic tendril.\nWhat the overall result of processing is.\nExtension trait for <code>io::Read</code>.\nA simple wrapper to make <code>Tendril</code> <code>Send</code>.\n<code>Tendril</code>-related methods for Rust slices.\n<code>Tendril</code> for storing native Rust strings.\nErrors that can occur when slicing a <code>Tendril</code>.\nCompact string type for zero-copy parsing.\nTrait for types that can process a tendril.\nView as uninterpreted bytes.\nView as a superset format, for free.\nTruncate to length 0 without discarding any owned storage.\nIndicates that an error has occurred.\nIndicates the end of the stream.\nCompute any fixup needed when concatenating buffers.\nMarker types for formats.\nHelper for the <code>format_tendril!</code> macro.\nCreate a <code>StrTendril</code> through string formatting.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a <code>Tendril</code> by copying a byte slice, without …\nCreate a <code>Tendril</code> from a single character.\nRead from the file at the given path and process …\nConsume an iterator of tendrils, processing each item, …\nBuild a <code>Tendril</code> by copying a slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into uninterpreted bytes.\nConvert <code>self</code> into a type which is <code>Send</code>.\nConvert into a superset format, for free.\nIs the backing buffer shared?\nIs the backing buffer shared with this other <code>Tendril</code>?\nGet the length of the <code>Tendril</code>.\nCreate a new, empty <code>Tendril</code> in any format.\nProcess one tendril and finish.\nDrop <code>n</code> bytes from the back.\nDrop <code>n</code> bytes from the front.\nRemove and return the first character, if any.\nRemove and return a run of characters at the front of the …\nProcess this tendril.\nPush some bytes onto the end of the <code>Tendril</code>, without …\nPush a character onto the end.\nPush a slice onto the end of the <code>Tendril</code>.\nPush another <code>Tendril</code> onto the end of this one.\nPush “uninitialized bytes” onto the end.\nRead from the given stream of bytes until exhaustion and …\nView as another format, without validating.\nConvert into another format, without validating.\nReserve space for additional bytes.\nStreams of tendrils.\nSlice this <code>Tendril</code> as a new <code>Tendril</code>.\nMake a <code>Tendril</code> from this slice.\nView as a subset format, if the <code>Tendril</code> conforms to that …\nBuild a <code>Tendril</code> by copying a byte slice, if it conforms to …\nConvert into a subset format, if the <code>Tendril</code> conforms to …\nDrop <code>n</code> bytes from the back.\nTry to drop <code>n</code> bytes from the front.\nPush some bytes onto the end of the <code>Tendril</code>, if they …\nPush a character, if it can be represented in this format.\nConvert into another format, if the <code>Tendril</code> conforms to …\nView as another format, if the bytes of the <code>Tendril</code> are …\nAttempt to slice this <code>Tendril</code> as a new <code>Tendril</code>.\nDrop <code>n</code> bytes from the back.\nDrop <code>n</code> bytes from the front.\nSlice this <code>Tendril</code> as a new <code>Tendril</code>.\nCheck whether the buffer is valid for this format.\nCheck whether the buffer is valid for this format.\nCheck whether the buffer is valid for this format.\nCheck whether the buffer is valid for this format.\nCreate a new, empty <code>Tendril</code> with a specified capacity.\nThe Big5 encoding.\nThe initializer for the Big5 encoding.\nResult of a (potentially partial) decode or encode …\nA converter that decodes a byte stream into Unicode …\nResult of a (potentially partial) decode operation without …\nThe EUC-JP encoding.\nThe initializer for the EUC-JP encoding.\nThe EUC-KR encoding.\nThe initializer for the EUC-KR encoding.\nA converter that encodes a Unicode stream into bytes …\nResult of a (potentially partial) encode operation without …\nAn encoding as defined in the Encoding Standard.\nThe gb18030 encoding.\nThe initializer for the gb18030 encoding.\nThe GBK encoding.\nThe initializer for the GBK encoding.\nThe IBM866 encoding.\nThe initializer for the IBM866 encoding.\nThe ISO-2022-JP encoding.\nThe initializer for the ISO-2022-JP encoding.\nThe ISO-8859-10 encoding.\nThe initializer for the ISO-8859-10 encoding.\nThe ISO-8859-13 encoding.\nThe initializer for the ISO-8859-13 encoding.\nThe ISO-8859-14 encoding.\nThe initializer for the ISO-8859-14 encoding.\nThe ISO-8859-15 encoding.\nThe initializer for the ISO-8859-15 encoding.\nThe ISO-8859-16 encoding.\nThe initializer for the ISO-8859-16 encoding.\nThe ISO-8859-2 encoding.\nThe initializer for the ISO-8859-2 encoding.\nThe ISO-8859-3 encoding.\nThe initializer for the ISO-8859-3 encoding.\nThe ISO-8859-4 encoding.\nThe initializer for the ISO-8859-4 encoding.\nThe ISO-8859-5 encoding.\nThe initializer for the ISO-8859-5 encoding.\nThe ISO-8859-6 encoding.\nThe initializer for the ISO-8859-6 encoding.\nThe ISO-8859-7 encoding.\nThe initializer for the ISO-8859-7 encoding.\nThe ISO-8859-8 encoding.\nThe ISO-8859-8-I encoding.\nThe initializer for the ISO-8859-8 encoding.\nThe initializer for the ISO-8859-8-I encoding.\nThe input was exhausted.\nThe input was exhausted.\nThe input was exhausted.\nThe KOI8-R encoding.\nThe initializer for the KOI8-R encoding.\nThe KOI8-U encoding.\nThe initializer for the KOI8-U encoding.\nThe macintosh encoding.\nThe initializer for the macintosh encoding.\nThe decoder encountered a malformed byte sequence.\nThe converter cannot produce another unit of output, …\nThe decoder cannot produce another unit of output, because …\nThe encoder cannot produce another unit of output, because …\nThe replacement encoding.\nThe initializer for the replacement encoding.\nThe Shift_JIS encoding.\nThe initializer for the Shift_JIS encoding.\nThe UTF-16BE encoding.\nThe initializer for the UTF-16BE encoding.\nThe UTF-16LE encoding.\nThe initializer for the UTF-16LE encoding.\nThe UTF-8 encoding.\nThe initializer for the UTF-8 encoding.\nThe encoder encountered an unmappable character.\nThe windows-1250 encoding.\nThe initializer for the windows-1250 encoding.\nThe windows-1251 encoding.\nThe initializer for the windows-1251 encoding.\nThe windows-1252 encoding.\nThe initializer for the windows-1252 encoding.\nThe windows-1253 encoding.\nThe initializer for the windows-1253 encoding.\nThe windows-1254 encoding.\nThe initializer for the windows-1254 encoding.\nThe windows-1255 encoding.\nThe initializer for the windows-1255 encoding.\nThe windows-1256 encoding.\nThe initializer for the windows-1256 encoding.\nThe windows-1257 encoding.\nThe initializer for the windows-1257 encoding.\nThe windows-1258 encoding.\nThe initializer for the windows-1258 encoding.\nThe windows-874 encoding.\nThe initializer for the windows-874 encoding.\nThe x-mac-cyrillic encoding.\nThe initializer for the x-mac-cyrillic encoding.\nThe x-user-defined encoding.\nThe initializer for the x-user-defined encoding.\nValidates ASCII.\nChecks whether the <em>output encoding</em> of this encoding can …\nDecode complete input to <code>Cow&lt;&#39;a, str&gt;</code> <em>with BOM sniffing</em> …\nIncrementally decode a byte stream into UTF-8 with …\nIncrementally decode a byte stream into UTF-8 with type …\nIncrementally decode a byte stream into UTF-8 with …\nIncrementally decode a byte stream into UTF-8 using a …\nIncrementally decode a byte stream into UTF-16 with …\nIncrementally decode a byte stream into UTF-16 <em>without </em>…\nIncrementally decode a byte stream into UTF-8 with …\nIncrementally decode a byte stream into UTF-8 <em>without </em>…\nDecode complete input to <code>Cow&lt;&#39;a, str&gt;</code> <em>with BOM removal</em> and …\nDecode complete input to <code>Cow&lt;&#39;a, str&gt;</code> <em>without BOM handling</em> …\nDecode complete input to <code>Cow&lt;&#39;a, str&gt;</code> <em>without BOM handling</em> …\nEncode complete input to <code>Cow&lt;&#39;a, [u8]&gt;</code> using the <em>output </em>…\nIncrementally encode into byte stream from UTF-16 with …\nIncrementally encode into byte stream from UTF-16 <em>without </em>…\nIncrementally encode into byte stream from UTF-8 with …\nIncrementally encode into byte stream from UTF-8 with …\nIncrementally encode into byte stream from UTF-8 <em>without </em>…\nIncrementally encode into byte stream from UTF-8 <em>without </em>…\nThe <code>Encoding</code> this <code>Decoder</code> is for.\nThe <code>Encoding</code> this <code>Encoder</code> is for.\nPerforms non-incremental BOM sniffing.\nImplements the <em>get an encoding</em> algorithm.\nThis method behaves the same as <code>for_label()</code>, except when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if this is an ISO-2022-JP encoder that’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the bytes 0x00…0x7F map exclusively to …\nChecks whether this encoding maps one byte to one Basic …\nValidates ISO-2022-JP ASCII-state data.\nChecks for compatibility with storing Unicode scalar …\nQuery the worst-case output size when encoding from UTF-16 …\nQuery the worst-case output size when encoding from UTF-16 …\nQuery the worst-case output size when encoding from UTF-8 …\nQuery the worst-case output size when encoding from UTF-8 …\nQuery the worst-case UTF-16 output size (with or without …\nQuery the worst-case UTF-8 output size <em>with replacement</em>.\nQuery the worst-case UTF-8 output size <em>without replacement</em>.\nFunctions for converting between different in-RAM …\nReturns the name of this encoding.\nInstantiates a new decoder for this encoding with BOM …\nInstantiates a new decoder for this encoding with BOM …\nInstantiates a new decoder for this encoding with BOM …\nInstantiates a new encoder for the <em>output encoding</em> of this …\nReturns the <em>output encoding</em> of this encoding. This is …\nValidates UTF-8.\nThere is at least one right-to-left character.\nEvery character is below U+0100.\nClassification of text as Latin1 (all code points are …\nThere is at least one character that’s U+0100 or higher, …\nChecks whether a valid UTF-8 buffer contains code points …\nChecks whether a potentially invalid UTF-16 buffer …\nChecks whether a potentially invalid UTF-8 buffer contains …\nConverts bytes whose unsigned value is interpreted as …\nConverts bytes whose unsigned value is interpreted as …\nConverts bytes whose unsigned value is interpreted as …\nConverts bytes whose unsigned value is interpreted as …\nConverts bytes whose unsigned value is interpreted as …\nConverts valid UTF-8 to valid UTF-16.\nIf the input is valid UTF-16 representing only Unicode …\nConverts potentially-invalid UTF-16 to valid UTF-8 with …\nConverts potentially-invalid UTF-16 to valid UTF-8 with …\nConverts potentially-invalid UTF-16 to valid UTF-8 with …\nConverts potentially-invalid UTF-16 to valid UTF-8 with …\nIf the input is valid UTF-8 representing only Unicode code …\nConverts potentially-invalid UTF-8 to valid UTF-16 with …\nConverts potentially-invalid UTF-8 to valid UTF-16 …\nCopies ASCII from source to destination up to the first …\nCopies ASCII from source to destination zero-extending it …\nCopies Basic Latin from source to destination narrowing it …\nConverts bytes whose unsigned value is interpreted as …\nIf the input is valid UTF-8 representing only Unicode code …\nReplaces unpaired surrogates in the input with the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether the buffer is all-ASCII.\nChecks whether the buffer is all-Basic Latin (i.e. UTF-16 …\nChecks whether a scalar value triggers right-to-left …\nChecks whether a valid UTF-8 buffer contains code points …\nChecks whether the buffer represents only code points less …\nChecks whether a UTF-16 buffer contains code points that …\nChecks whether a UTF-16 code unit triggers right-to-left …\nChecks whether the buffer represents only code point less …\nChecks whether a potentially-invalid UTF-8 buffer contains …\nChecks whether the buffer is valid UTF-8 representing only …\nReturns the index of first byte that starts a non-Latin1 …\nReturns the index of the first unpaired surrogate or, if …\nReturns the index of first byte that starts an invalid byte\nMarker type for ASCII text.\nMarker type for uninterpreted bytes.\nIndicates a format which contains characters from Unicode …\nTrait for format marker types.\nIterator for characters and their byte indices.\nMarker type for the single-byte encoding of the first 256 …\nIndicates a Rust slice type that is represented in memory …\nIndicates a format which corresponds to a Rust slice type, …\nIndicates that one format is a subset of another.\nMarker type for UTF-8 text.\nMarker type for WTF-8 text.\nAccess the raw bytes of the slice.\nIterate over the characters of the string and their byte …\nEncode the character as bytes and pass them to a …\nCompute any fixup needed when concatenating buffers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a byte slice to this kind of slice.\nConvert a byte slice to this kind of slice.\nImplementation details.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate the <em>other</em> direction of conversion; check if this …\nCheck whether the buffer is valid for this format.\nCheck whether the buffer is valid for this format.\nCheck whether the buffer is valid for this format.\nCheck whether the buffer is valid for this format.\nDescribes how to fix up encodings when concatenating.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>TendrilSink</code> adaptor that takes bytes, decodes them as …\nWhat the overall result of processing is.\nTrait for types that can process a tendril.\nA <code>TendrilSink</code> adaptor that takes bytes, decodes them as …\nIndicates that an error has occurred.\nIndicates the end of the stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead from the file at the given path and process …\nConsume an iterator of tendrils, processing each item, …\nGive a reference to the inner sink.\nGive a mutable reference to the inner sink.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new incremental UTF-8 decoder.\nCreate a new incremental decoder using the encoding_rs …\nProcess one tendril and finish.\nProcess this tendril.\nRead from the given stream of bytes until exhaustion and …\nCreate a new incremental decoder for the UTF-8 encoding.\nToken that represents a series of characters.\nComment token.\nA <code>DOCTYPE</code> token. Doctype token in XML5 is rather limited …\nDoctype token\nEnd of File found.\nEmpty tag (e.g. <code>&lt;a/&gt;</code>).\nEnd of a tag (e.g. <code>&lt;/a&gt;</code>).\nNullCharacter encountered.\nProcessing Instruction token\nError happened\nA ProcessingInstruction token.\nShort tag (e.g. <code>&lt;/&gt;</code>).\nBeginning of a tag (e.g. <code>&lt;a&gt;</code>).\nXML 5 Tag Token\nTag kind denotes which kind of tag did we encounter.\nToken tag founds. This token applies to all possible kinds …\nDescribes tokens encountered during parsing of input.\nTypes which can receive tokens from the tokenizer.\nThe Xml tokenizer.\nCopy of Tokenizer options, with an impl for <code>Default</code>.\nAre we at the end of the file, once buffers have been …\nList of attributes attached to this tag. Only valid in …\nTokenizer for character references, if we’re tokenizing …\nCurrent attribute name.\nCurrent attribute value.\nCurrent input character.  Just consumed, may reconsume.\nCurrent comment.\nCurrent processing instruction value.\nCurrent processing instruction target.\nCurrent tag attributes.\nCurrent tag kind.\nCurrent tag name.\nText of processing instruction.\nDiscard a U+FEFF BYTE ORDER MARK if we see one?  Only done …\nDiscard a <code>U+FEFF BYTE ORDER MARK</code> if we see one at the …\nIndicate that we have reached the end of the input.\nReport all parse errors described in the spec, at some …\nFeed an input string into the tokenizer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDid we just consume \\r, translating it to \\n?  In that …\nInitial state override.  Only the test runner should use a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nToken kind denotes which type of token was encountered. …\nQualified name of the tag.\nName of DOCTYPE declared\nCreate a new tokenizer which feeds tokens to a particular …\nOptions controlling the behavior of the tokenizer.\nProcess a token.\nKeep a record of how long we spent in each state?  Printed …\nPublic identifier of this DOCTYPE.\nShould we reconsume the current input character?\nRun the state machine for as long as we can.\nDestination for tokens we emit.\nThe abstract machine state as described in the spec.\nRecord of how many ns we spent in each state, if profiling …\nTokenizer states.\nSystem identifier of this DOCTYPE.\nWhat is the name of processing instruction.\nTemporary buffer\nRecord of how many ns we spent in the token sink.\nThe resulting character(s)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow many slots in <code>chars</code> are valid?\nToken that represents a series of characters.\nComment token.\nA <code>DOCTYPE</code> token. Doctype token in XML5 is rather limited …\nDoctype token\nEnd of File found.\nEmpty tag (e.g. <code>&lt;a/&gt;</code>).\nEnd of a tag (e.g. <code>&lt;/a&gt;</code>).\nNullCharacter encountered.\nProcessing Instruction token\nError happened\nA ProcessingInstruction token.\nShort tag (e.g. <code>&lt;/&gt;</code>).\nBeginning of a tag (e.g. <code>&lt;a&gt;</code>).\nXML 5 Tag Token\nTag kind denotes which kind of tag did we encounter.\nToken tag founds. This token applies to all possible kinds …\nDescribes tokens encountered during parsing of input.\nTypes which can receive tokens from the tokenizer.\nList of attributes attached to this tag. Only valid in …\nText of processing instruction.\nSignal to the sink that parsing has ended.\nSignal to the sink that parsing has ended.\nSorts attributes in a tag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nToken kind denotes which type of token was encountered. …\nQualified name of the tag.\nName of DOCTYPE declared\nProcess a token.\nPublic identifier of this DOCTYPE.\nThe tokenizer will call this after emitting any start tag. …\nThe tokenizer will call this after emitting any start tag. …\nSystem identifier of this DOCTYPE.\nWhat is the name of processing instruction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContinue without interruptions.\nAn abstraction over any type that can represent an element…\nContains the error value\n<code>Handle</code> is a reference to a DOM node.  The tree builder …\nWhether to interrupt further parsing of the current input …\nSomething which can be inserted into the DOM.\nContains the success value\nThe overall result of parsing.\nStop further parsing.\nTrace hooks for a garbage-collected DOM.\nMethods a parser can use to create the DOM. The DOM …\nThe XML tree builder.\nTree builder options, with an impl for Default.\nConfiguration options for XmlTreeBuilder\nAdd each attribute to the given element, if no attribute …\nAppend a node as the last child of the given node.  If …\nWhen the insertion point is decided by the existence of a …\nAppend a node as the sibling immediately before the given …\nAppend a <code>DOCTYPE</code> element to the <code>Document</code> node.\nAssociate the given form-associatable element with the …\nIndicate that a <code>script</code> element is complete.\nCreate a comment node.\nCreate an element.\nCreate a Processing Instruction node.\nCurrent element pointer.\nCurrent namespace identifier\nThe document node, which is created by the sink.\nWhat is the name of this element?\nConsume this sink and return the overall result of parsing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a handle to the <code>Document</code> node.\nGet a handle to a template’s template contents. The tree …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the adjusted current node is an HTML …\nMark a HTML <code>&lt;script&gt;</code> as “already started”.\nStack of namespace identifiers and namespaces.\nCreate a new tree builder which sends tree modifications …\nNext state change for the tokenizer, if any.\nStack of open elements, most recently added at end.\nSignal a parse error.\nCurrent tree builder phase.\nIndicate that a node was popped off the stack of open …\nDetach the given node from its parent.\nRemove all the children from node and append them to …\nDo two handles refer to the same node?\nCalled whenever the line number changes.\nSet the document’s quirks mode.\nConsumer of tree modifications.\nUpon a call to <code>trace_handles</code>, the tree builder will call …\nCall the <code>Tracer</code>’s <code>trace_handle</code> method on every <code>Handle</code> in …\nA subset/refinement of <code>tokenizer::XToken</code>.  Everything else …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")