searchState.loadedDescShard("mio", 0, "Mio is a fast, low-level I/O library for Rust focusing on …\nInterest used in registering.\nPolls for readiness events on all registered values.\nRegisters I/O resources.\nAssociates readiness events with <code>event::Source</code>s.\nWaker allows cross-thread waking of <code>Poll</code>.\nReadiness event types and utilities.\nMio’s optional features.\nGetting started guide.\nWhether this selector currently has an associated waker.\nMacros to ease conditional code based on enabled features.\nNetworking primitives.\nModule with system specific types.\nUnix only extensions.\nA readiness event.\nA collection of readiness events.\n<code>Events</code> iterator.\nAn event source that may be registered with <code>Registry</code>.\nDeregister <code>self</code> from the given <code>Registry</code> instance.\nRegister <code>self</code> with the given <code>Registry</code> instance.\nRe-register <code>self</code> with the given <code>Registry</code> instance.\nA readiness event.\nReturns the argument unchanged.\nCreate a reference to an <code>Event</code> from a platform specific …\nCalls <code>U::from(self)</code>.\nReturns true if the event contains AIO readiness.\nReturns true if the event contains error readiness.\nReturns true if the event contains LIO readiness.\nReturns true if the event contains priority readiness.\nReturns true if the event contains read closed readiness.\nReturns true if the event contains readable readiness.\nReturns true if the event contains writable readiness.\nReturns true if the event contains write closed readiness.\nReturns the event’s token.\nA collection of readiness events.\n<code>Events</code> iterator.\nReturns the number of <code>Event</code> values that <code>self</code> can hold.\nClearing all <code>Event</code> values from container explicitly.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> contains no <code>Event</code> values.\nReturns an iterator over the <code>Event</code> values.\nReturns the inner <code>sys::Events</code>.\nReturn a new <code>Events</code> capable of holding up to <code>capacity</code> …\nAn event source that may be registered with <code>Registry</code>.\nDeregister <code>self</code> from the given <code>Registry</code> instance.\nRegister <code>self</code> with the given <code>Registry</code> instance.\nRe-register <code>self</code> with the given <code>Registry</code> instance.\nInterest used in registering.\nReturns a <code>Interest</code> set representing priority completion …\nReturns a <code>Interest</code> set representing readable interests.\nReturns a <code>Interest</code> set representing writable interests.\nAdd together two <code>Interest</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if <code>Interest</code> contains AIO readiness.\nReturns true if <code>Interest</code> contains LIO readiness.\nReturns true if <code>Interest</code> contains priority readiness.\nReturns true if the value includes readable readiness.\nReturns true if the value includes writable readiness.\nRemoves <code>other</code> <code>Interest</code> from <code>self</code>.\nAdapter for a <code>RawFd</code> or <code>RawSocket</code> providing an <code>event::Source</code>\nUsed to associate an <code>IoSource</code> with a <code>sys::Selector</code>.\nValue of <code>id</code> if <code>SelectorId</code> is not associated with any …\nAssociate an I/O source with <code>registry</code>, returning an error …\nCheck the association of an I/O source with <code>registry</code>, …\nExecute an I/O operations ensuring that the socket …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the I/O source, dropping the state.\nCreate a new <code>IoSource</code>.\nCreate a new <code>SelectorId</code>.\nRemove a previously made association from <code>registry</code>, …\nThe <code>os-ext</code> feature is enabled, or one of the features that …\nOne of the features enabled that needs <code>IoSource</code>. That is …\nThe <code>net</code> feature is enabled.\nThe <code>os-poll</code> feature is disabled.\nThe <code>os-ext</code> feature is enabled.\nThe <code>os-poll</code> feature is enabled.\nA structure representing a socket server\nA non-blocking TCP stream between a local socket and a …\nA User Datagram Protocol socket.\nA Unix datagram socket.\nA non-blocking Unix domain socket server.\nA non-blocking Unix stream socket.\nPrimitives for working with UDP.\nA structure representing a socket server\nAccepts a new <code>TcpStream</code>.\nConvenience method to bind a new TCP listener to the …\nReturns the argument unchanged.\nConverts a <code>RawFd</code> to a <code>TcpListener</code>.\nCreates a new <code>TcpListener</code> from a standard <code>net::TcpListener</code>.\nCalls <code>U::from(self)</code>.\nReturns the local socket address of this listener.\nSets the value for the <code>IP_TTL</code> option on this socket.\nGet the value of the <code>SO_ERROR</code> option on this socket.\nGets the value of the <code>IP_TTL</code> option for this socket.\nA non-blocking TCP stream between a local socket and a …\nCreate a new TCP stream and issue a non-blocking connect …\nReturns the argument unchanged.\nConverts a <code>RawFd</code> to a <code>TcpStream</code>.\nCreates a new <code>TcpStream</code> from a standard <code>net::TcpStream</code>.\nCalls <code>U::from(self)</code>.\nReturns the socket address of the local half of this TCP …\nGets the value of the <code>TCP_NODELAY</code> option on this socket.\nReceives data on the socket from the remote address to …\nReturns the socket address of the remote peer of this TCP …\nSets the value of the <code>TCP_NODELAY</code> option on this socket.\nSets the value for the <code>IP_TTL</code> option on this socket.\nShuts down the read, write, or both halves of this …\nGet the value of the <code>SO_ERROR</code> option on this socket.\nExecute an I/O operation ensuring that the socket receives …\nGets the value of the <code>IP_TTL</code> option for this socket.\nA User Datagram Protocol socket.\nCreates a UDP socket from the given address.\nGets the value of the <code>SO_BROADCAST</code> option for this socket.\nConnects the UDP socket setting the default destination …\nReturns the argument unchanged.\nConverts a <code>RawFd</code> to a <code>UdpSocket</code>.\nCreates a new <code>UdpSocket</code> from a standard <code>net::UdpSocket</code>.\nCalls <code>U::from(self)</code>.\nExecutes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.\nReturns the socket address that this socket was created …\nGets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nGets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nGets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nGet the value of the <code>IPV6_V6ONLY</code> option on this socket.\nReceives data from the socket, without removing it from …\nReceives data from the socket, without removing it from …\nReturns the socket address of the remote peer this socket …\nReceives data from the socket previously bound with …\nReceives data from the socket. On success, returns the …\nSends data on the socket to the address previously bound …\nSends data on the socket to the given address. On success, …\nSets the value of the <code>SO_BROADCAST</code> option for this socket.\nSets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nSets the value for the <code>IP_TTL</code> option on this socket.\nGet the value of the <code>SO_ERROR</code> option on this socket.\nExecute an I/O operation ensuring that the socket receives …\nGets the value of the <code>IP_TTL</code> option for this socket.\nA Unix datagram socket.\nCreates a Unix datagram socket bound to the given path.\nCreates a new <code>UnixDatagram</code> bound to the specified socket …\nConnects the socket to the specified address.\nReturns the argument unchanged.\nConverts a <code>RawFd</code> to a <code>UnixDatagram</code>.\nCreates a new <code>UnixDatagram</code> from a standard …\nCalls <code>U::from(self)</code>.\nReturns the address of this socket.\nCreate an unnamed pair of connected sockets.\nReturns the address of this socket’s peer.\nReceives data from the socket.\nReceives data from the socket.\nSends data on the socket to the socket’s peer.\nSends data on the socket to the specified address.\nShut down the read, write, or both halves of this …\nReturns the value of the <code>SO_ERROR</code> option.\nExecute an I/O operation ensuring that the socket receives …\nCreates a Unix Datagram socket which is not bound to any …\nA non-blocking Unix domain socket server.\nAccepts a new incoming connection to this listener.\nCreates a new <code>UnixListener</code> bound to the specified socket …\nCreates a new <code>UnixListener</code> bound to the specified socket …\nReturns the argument unchanged.\nConverts a <code>RawFd</code> to a <code>UnixListener</code>.\nCreates a new <code>UnixListener</code> from a standard …\nCalls <code>U::from(self)</code>.\nReturns the local socket address of this listener.\nReturns the value of the <code>SO_ERROR</code> option.\nA non-blocking Unix stream socket.\nConnects to the socket named by <code>path</code>.\nConnects to the socket named by <code>address</code>.\nReturns the argument unchanged.\nConverts a <code>RawFd</code> to a <code>UnixStream</code>.\nCreates a new <code>UnixStream</code> from a standard <code>net::UnixStream</code>.\nCalls <code>U::from(self)</code>.\nReturns the socket address of the local half of this …\nCreates an unnamed pair of connected sockets.\nReturns the socket address of the remote half of this …\nShuts down the read, write, or both halves of this …\nReturns the value of the <code>SO_ERROR</code> option.\nExecute an I/O operation ensuring that the socket receives …\nPolls for readiness events on all registered values.\nRegisters I/O resources.\nDeregister an <code>event::Source</code> with the <code>Poll</code> instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether this selector currently has an associated waker.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a new <code>Poll</code> handle.\nWait for readiness events\nRegister an <code>event::Source</code> with the <code>Poll</code> instance.\nInternal check to ensure only a single <code>Waker</code> is active per …\nCreate a separate <code>Registry</code> which can be used to register …\nRe-register an <code>event::Source</code> with the <code>Poll</code> instance.\nGet access to the <code>sys::Selector</code>.\nCreates a new independently owned <code>Registry</code>.\nUnix pipe.\nHelper macro to execute a system call that returns an …\nA type with the same memory layout as <code>libc::sockaddr</code>. Used …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new non-blocking socket.\nConverts a Rust <code>SocketAddr</code> into the system representation.\nConverts a <code>libc::sockaddr</code> compatible struct into a native …\nReceiving end of an Unix pipe.\nSending end of an Unix pipe.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new non-blocking Unix pipe.\nSet the <code>Sender</code> into or out of non-blocking mode.\nSet the <code>Receiver</code> into or out of non-blocking mode.\nExecute an I/O operation ensuring that the socket receives …\nExecute an I/O operation ensuring that the socket receives …\nUnique id for use as <code>SelectorId</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBoth <code>kqueue(2)</code> and <code>epoll(2)</code> don’t need to hold any user …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdapter for <code>RawFd</code> providing an <code>event::Source</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the <code>sun_path</code> field offset of <code>sockaddr_un</code> for the …\nConverts a Rust <code>SocketAddr</code> into the system representation.\nWaker backed by <code>eventfd</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReset the eventfd object, only need to call this if <code>wake</code> …\nAssociates readiness events with <code>event::Source</code>s.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdapter for <code>RawFd</code> providing an <code>event::Source</code> …\nUnix pipe.\nReceiving end of an Unix pipe.\nSending end of an Unix pipe.\nCreate a new non-blocking Unix pipe.\nWaker allows cross-thread waking of <code>Poll</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Waker</code>.\nWake up the <code>Poll</code> associated with this <code>Waker</code>.")