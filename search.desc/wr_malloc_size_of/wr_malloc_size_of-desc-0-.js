searchState.loadedDescShard("wr_malloc_size_of", 0, "A reduced fork of Firefox’s malloc_size_of crate, for …\nTrait for measuring the “shallow” heap usage of a …\nTrait for measuring the “deep” heap usage of a data …\nOperations used when measuring heap usage of data …\nA C function that takes a pointer to a heap allocation and …\nLike <code>size_of_op</code>, but can take an interior pointer. …\nReturns the argument unchanged.\nIs an <code>enclosing_size_of_op</code> available?\nCalls <code>U::from(self)</code>.\nCheck if an allocation is empty. This relies on knowledge …\nCall <code>enclosing_size_of_op</code>, which must be available, on <code>ptr</code>…\nCall <code>size_of_op</code> on <code>ptr</code>, first checking that the allocation …\nFor use on types where size_of() returns 0.\nMeasure the heap usage of immediate heap-allocated …\nMeasure the heap usage of all descendant heap-allocated …\nA function that returns the size of a heap allocation.")