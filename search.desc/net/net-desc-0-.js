searchState.loadedDescShard("net", 0, "Implementation of cookie creation and matching as …\nImplementation of cookie storage as specified in …\nAdapted from an implementation in reqwest. A non-blocking …\nAn implementation of the Fetch specification\nA memory cache implementing the logic specified in …\nA thread that takes a URL and streams back the binary data.\nA module for re-exports of items used in unit tests.\nThe websocket handler has three main responsibilities:\nThis data structure is used to track certificate …\nAdd a certificate to this manager’s list of certificates …\nWhich ALPN protocols we include in our client hello. If …\nA mapping of certificates and their hosts, which have seen …\nHow to decide what client auth certificate/keys to use.\nCreate a TlsConfig to use for managing a HTTP connection. …\nWhether to send data on the first flight (“early data”…\nWhether to send the Server Name Indication (SNI) extension …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow to output key material for debugging.  The default …\nThe maximum size of TLS message we’ll emit.  If None, we …\nA list of certificates that should be accepted despite …\nGiven the a string representation of a sever host name, …\nHow and when the client can resume a previous session.\nA stored cookie that wraps the definition in cookie-rs. …\nhttp://tools.ietf.org/html/rfc6265#section-5.4 step 1\nhttp://tools.ietf.org/html/rfc6265#section-5.1.4\nhttp://tools.ietf.org/html/rfc6265#section-5.1.3\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSteps 6-22 from …\nhttp://tools.ietf.org/html/rfc6265#section-5.1.4\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>Brotli</code> decoder will uncompress the brotli-encoded …\nA response decompressor over a non-blocking stream of …\nA <code>Delfate</code> decoder will uncompress the inflated response …\nA <code>Gzip</code> decoder will uncompress the gzipped response …\nA future attempt to poll the response body for EOF so we …\nA decoder that doesn’t have a value yet.\nA <code>PlainText</code> decoder just returns the response content as …\nConstructs a Decoder from a hyper response.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA pending decoder.\nA plain text decoder.\nAn implementation of the CORS preflight cache For now this …\nA simple, vector-based CORS Cache\nAn entry in the CORS cache\nUnion type for CORS cache entries\nRemove old entries\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert an entry\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if an entry with a matching header is found\nUpdates max age if an entry for a matching header is found.\nReturns true if an entry with a matching method is found\nUpdates max age if an entry for a matching method is found.\nThe <code>sec-fetch-dest</code> header\nThe <code>sec-fetch-mode</code> header\nThe <code>sec-fetch-site</code> header\nThe <code>sec-fetch-user</code> header\nConverts to the spec representation of a RequestMode\nhttps://fetch.spec.whatwg.org/#determine-nosniff\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe range bounds are known and set to final values.\nNo value.\nWe need extra information to set the range bounds. i.e. …\nRange header start and end values.\nSome value of type <code>T</code>.\nFetch\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a request from the user interface to ignore …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nhttps://fetch.spec.whatwg.org/#bad-port\nhttps://fetch.spec.whatwg.org/#network-scheme\nMain fetch\nScheme fetch\nhttps://fetch.spec.whatwg.org/#block-bad-port\n…\n…\nhttps://www.w3.org/TR/CSP/#should-block-request\nFile backend implementation\nFile manager’s data store. It maintains a thread-safe …\nFileManagerStore’s entry\nIn-memory Blob buffer object\nMetadata of on-disk file\nA reference to parent entry in <code>FileManagerStore</code>, …\nRead a file for the Fetch implementation. It gets the …\nBackend implementation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopy out the file backend implementation content\nMessage handler\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUUIDs only become valid blob URIs when explicitly requested\nOrigin of the entry’s “creator”\nUUIDs of fetch instances that acquired an interest in this …\nNumber of FileID holders that the ID is used to index this …\nStep 2.9 of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>HstsList</code> from the bytes of a JSON preload file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key used to differentiate requests in the cache.\nMetadata about a loaded resource, such as is obtained from …\nA complete cached resource.\nWrapper around a cached response, including information on …\nA memory cache.\nCalculating Age …\nCharacter set.\nClear the contents of this cache.\nConstructing Responses from Caches. …\nMIME type / subtype.\nCreate a CachedResponse from a request and a …\nCreate a new resource, based on the bytes requested, and …\nFields that implement MallocSizeOf\ncached responses.\nFinal URL after redirects.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRequest Cache-Control Directives …\nDetermine the expiry date from relevant headers, or uses a …\nSupport for range requests …\nHeaders\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidation. …\nDetermine if a response is cacheable by default …\nThe revalidation flag for the stored response\nCreate a cache-key from a request.\nFreshening Stored Responses upon Validation. …\nThe response constructed from the cached resource\nDetermine if a given response is cacheable. Based on …\nHTTP Status\nStoring Responses in Caches. …\nWake-up consumers of cached resources whose response body …\nMessages from the IPC route to the fetch worker, used to …\nThe sink side of the body passed to hyper, used to enqueue …\nThe stream side of the body passed to hyper.\nA body whose bytes are buffered and sent in one chunk over …\nA Crossbeam sender used to send chunks to the fetch worker,\nA chunk of bytes.\nA receiver that can be used in Body::wrap_stream, for …\nA Tokio sender used to feed chunks to the network stream.\n…\nhttps://fetch.spec.whatwg.org/#document-accept-header-value\nBody is done.\nThe various states an entry of the HttpCache can be in.\nThe entry is pending a number of concurrent stores.\nThe entry is fully up-to-date, there are no pending …\n…\n…\nCORS check\nCORS preflight fetch\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA map of cache key to entry state, reflecting whether the …\nHTTP fetch\nHTTP network fetch\nHTTP network or cache fetch\nHTTP redirect fetch\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nhttps://fetch.spec.whatwg.org/#redirect-status\n…\n…\n…\n…\n…\n…\nhttps://fetch.spec.whatwg.org/#serializing-a-request-origin\nStep 13 of https://fetch.spec.whatwg.org/#concept-fetch.\n…\n…\n…\n…\n…\n…\nhttps://w3c.github.io/webappsec-referrer-policy/#strip-url\nResult of accessing a cache.\nRepresents an image that has completed loading. Images …\nMessage that the decoder worker threads send to the image …\nThe value was in the cache.\n…\nThe value was not in the cache and needed to be …\nRepresents an image that is either being loaded by the …\nAdd a new listener for the given pending image id. If the …\nRequire self.store.lock() before calling.\nThe bytes loaded so far. Reset to an empty vector once …\nThe CORS attribute setting for the requesting\nThe CORS status of this image response.\nTODO(gw): Remaining work on image cache: * Make use of the …\nThe URL of the final response that contains a body.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a completed image if it exists, or None if there is …\nHandle a message from one of the decoder worker threads or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe listeners that are waiting for this response to …\nThe origin that requested this load.\nImage metadata, if available.\nInform the image cache about a response for a pending …\nOnce loading is complete, the result of the operation.\nThread pool for image decoding\nThe url being loaded. Do not forget that this may be …\nReturns an the string of an JavaScript <code>&lt;script&gt;</code> tag …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate the MIME checker configuration\nReturns the argument unchanged.\nGet the range bounds if the <code>Range</code> header is present.\nCalls <code>U::from(self)</code>.\nSpecify if resources served by that protocol can be …\nTriggers the load of a resource for this protocol and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThreadpool used by Fetch and file operations.\nThe state of the thread-pool used by CoreResource.\nWhether the pool can spawn additional work.\nHow many workers are currently active?\nThe number of active workers.\nSubstract from the count of active workers.\nExit the core resource manager.\nPrevent further work from being spawned, and wait until …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd to the count of active workers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the pool still able to spawn new work?\nLoad a file with CA certificate and produce a …\nCreate a CoreResourceThread\nReturns a tuple of (public, private) senders to the new …\nReturns false if the thread should exit.\nSpawn work on the thread-pool, if still active.\nPrevent additional work from being spawned.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSends Some(old_value) in case there was a previous value …\nSends Ok(changed, Some(old_value)) in case there was a …\nA “space character” according to:\n…\nReturns the argument unchanged.\n…\n…\nCalls <code>U::from(self)</code>.\n…\n…\n…\nCreate a new websocket connection for the given request.\nCreate a tungstenite Request object for the initial HTTP …\nReturns the argument unchanged.\nCreate a new websocket connection for the given request.\nCalls <code>U::from(self)</code>.\nProcess an HTTP response resulting from a WS handshake. …\nListen for WS events from the DOM and the network until …\nInitialize a listener for DOM actions. These are routed …\nInitiate a new async WS connection. Returns an error if …")