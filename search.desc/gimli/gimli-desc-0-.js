searchState.loadedDescShard("gimli", 0, "<code>gimli</code> is a library for reading and writing the DWARF …\nARM 64-bit (AArch64) architecture specific definitions.\nAAarch64 extensions.\nARM architecture specific definitions.\nBig endian byte order.\nBig endian byte order.\nThe <code>.debug_abbrev</code> section.\nAn offset into the <code>.debug_abbrev</code> section.\nThe <code>.debug_addr</code> section.\nAn offset to a set of entries in the <code>.debug_addr</code> section.\nAn index into a set of addresses in the <code>.debug_addr</code> …\nThe <code>.debug_aranges</code> section.\nAn offset into the <code>.debug_aranges</code> section.\nThe <code>.debug_cu_index</code> section.\nThe <code>.debug_frame</code> section.\nAn offset into the <code>.debug_frame</code> section.\nThe <code>.debug_info</code> section.\nAn offset into the <code>.debug_info</code> section.\nAn offset into the <code>.debug_info</code> section.\nThe <code>.debug_line</code> section.\nAn offset into the <code>.debug_line</code> section.\nThe <code>.debug_line_str</code> section.\nAn offset into the <code>.debug_line_str</code> section.\nThe <code>.debug_loc</code> section.\nThe <code>.debug_loclists</code> section.\nAn offset to a set of location list offsets in the …\nAn index into a set of location list offsets in the …\nThe <code>.debug_macinfo</code> section.\nAn offset into the <code>.debug_macinfo</code> section.\nThe <code>.debug_macro</code> section.\nAn offset into the <code>.debug_macro</code> section.\nThe <code>.debug_pubnames</code> section.\nThe <code>.debug_pubtypes</code> section.\nThe <code>.debug_ranges</code> section.\nThe <code>.debug_rnglists</code> section.\nAn offset to a set of range list offsets in the …\nAn index into a set of range list offsets in the …\nThe <code>.debug_str</code> section.\nAn offset into the <code>.debug_str</code> section.\nThe <code>.debug_str_offsets</code> section.\nAn offset to a set of entries in the <code>.debug_str_offsets</code> …\nAn index into a set of entries in the <code>.debug_str_offsets</code> …\nThe <code>.debug_tu_index</code> section.\nA type signature as used in the <code>.debug_types</code> section.\nThe <code>.debug_types</code> section.\nAn offset into the <code>.debug_types</code> section.\nAn offset into the <code>.debug_types</code> section.\nA default set of extensions, including some common GNU …\n32-bit DWARF\n64-bit DWARF\nThe “type” of file with DWARF debugging information. …\nA .dwo split DWARF file.\nAn optionally-provided implementation-defined compilation …\nThe <code>.eh_frame</code> section.\nThe <code>.eh_frame_hdr</code> section.\nAn offset into the <code>.eh_frame</code> section.\nEncoding parameters that are commonly used for multiple …\nA trait describing the endianity of some buffer.\nWhether the format of a compilation unit is 32- or 64-bit.\nEncoding parameters for a line number program.\nLittle endian byte order.\nLittle endian byte order.\nAn offset into either the <code>.debug_loc</code> section or the …\nLoongArch architecture specific definitions.\nMIPS architecture specific definitions.\nA normal executable or object file.\nThe native endianity for the target platform.\nPowerPC 64bit\nAn offset into either the <code>.debug_ranges</code> section or the …\nAn offset into either the <code>.debug_ranges</code> section or the …\nA DWARF register number.\nRISC-V architecture specific definitions.\nByte order that is selectable at runtime.\nAn identifier for a DWARF section.\nAn offset into the <code>.debug_info</code> or <code>.debug_types</code> sections.\nWhich vendor extensions to support.\nIntel i386 architecture specific definitions.\nAMD64 architecture specific definitions.\nThe size of an address.\nConstant definitions.\nThe initial value of the <code>is_stmt</code> register.\nTypes for compile-time and run-time endianity.\nWhether the DWARF format is 32- or 64-bit.\nReturn true for big endian byte order.\nRead and write DWARF’s “Little Endian Base 128” …\nThe minimum value which a special opcode can add to the …\nThe range of values which a special opcode can add to the …\nThe maximum number of individual operations that may be …\nThe size in bytes of the smallest target machine …\nRead DWARF debugging information.\nThe DWARF version of the header.\nARM 64-bit (AArch64) architecture specific definitions.\nARM architecture specific definitions.\nLoongArch architecture specific definitions.\nMIPS architecture specific definitions.\nPowerPC 64bit\nRISC-V architecture specific definitions.\nIntel i386 architecture specific definitions.\nAMD64 architecture specific definitions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a register name into a register number.\nConverts a register name into a register number.\nConverts a register name into a register number.\nConverts a register name into a register number.\nConverts a register name into a register number.\nConverts a register name into a register number.\nConverts a register name into a register number.\nConverts a register name into a register number.\nThe name of a register, or <code>None</code> if the register number is …\nThe name of a register, or <code>None</code> if the register number is …\nThe name of a register, or <code>None</code> if the register number is …\nThe name of a register, or <code>None</code> if the register number is …\nThe name of a register, or <code>None</code> if the register number is …\nThe name of a register, or <code>None</code> if the register number is …\nThe name of a register, or <code>None</code> if the register number is …\nThe name of a register, or <code>None</code> if the register number is …\nAAarch64 extensions.\nThe <code>.debug_abbrev</code> section.\nAn offset into the <code>.debug_abbrev</code> section.\nThe <code>.debug_addr</code> section.\nAn offset to a set of entries in the <code>.debug_addr</code> section.\nAn index into a set of addresses in the <code>.debug_addr</code> …\nThe <code>.debug_aranges</code> section.\nAn offset into the <code>.debug_aranges</code> section.\nThe <code>.debug_cu_index</code> section.\nThe <code>.debug_frame</code> section.\nAn offset into the <code>.debug_frame</code> section.\nThe <code>.debug_info</code> section.\nAn offset into the <code>.debug_info</code> section.\nAn offset into the <code>.debug_info</code> section.\nThe <code>.debug_line</code> section.\nAn offset into the <code>.debug_line</code> section.\nThe <code>.debug_line_str</code> section.\nAn offset into the <code>.debug_line_str</code> section.\nThe <code>.debug_loc</code> section.\nThe <code>.debug_loclists</code> section.\nAn offset to a set of location list offsets in the …\nAn index into a set of location list offsets in the …\nThe <code>.debug_macinfo</code> section.\nAn offset into the <code>.debug_macinfo</code> section.\nThe <code>.debug_macro</code> section.\nAn offset into the <code>.debug_macro</code> section.\nThe <code>.debug_pubnames</code> section.\nThe <code>.debug_pubtypes</code> section.\nThe <code>.debug_ranges</code> section.\nThe <code>.debug_rnglists</code> section.\nAn offset to a set of range list offsets in the …\nAn index into a set of range list offsets in the …\nThe <code>.debug_str</code> section.\nAn offset into the <code>.debug_str</code> section.\nThe <code>.debug_str_offsets</code> section.\nAn offset to a set of entries in the <code>.debug_str_offsets</code> …\nAn index into a set of entries in the <code>.debug_str_offsets</code> …\nThe <code>.debug_tu_index</code> section.\nA type signature as used in the <code>.debug_types</code> section.\nThe <code>.debug_types</code> section.\nAn offset into the <code>.debug_types</code> section.\nAn offset into the <code>.debug_types</code> section.\nA default set of extensions, including some common GNU …\n32-bit DWARF\n64-bit DWARF\nThe “type” of file with DWARF debugging information. …\nA .dwo split DWARF file.\nAn optionally-provided implementation-defined compilation …\nThe <code>.eh_frame</code> section.\nThe <code>.eh_frame_hdr</code> section.\nAn offset into the <code>.eh_frame</code> section.\nEncoding parameters that are commonly used for multiple …\nWhether the format of a compilation unit is 32- or 64-bit.\nEncoding parameters for a line number program.\nAn offset into either the <code>.debug_loc</code> section or the …\nA normal executable or object file.\nAn offset into either the <code>.debug_ranges</code> section or the …\nAn offset into either the <code>.debug_ranges</code> section or the …\nA DWARF register number.\nAn identifier for a DWARF section.\nAn offset into the <code>.debug_info</code> or <code>.debug_types</code> sections.\nWhich vendor extensions to support.\nThe size of an address.\nReturns the <code>DebugInfoOffset</code> inside, or <code>None</code> otherwise.\nReturns the <code>DebugTypesOffset</code> inside, or <code>None</code> otherwise.\nReturns a <code>DebugLocListsBase</code> with the default value of …\nReturns a <code>DebugRngListsBase</code> with the default value of …\nReturns a <code>DebugStrOffsetsBase</code> with the default value of …\nThe initial value of the <code>is_stmt</code> register.\nReturns the ELF section name for this kind, when found in …\nWhether the DWARF format is 32- or 64-bit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the serialized size of an initial length field for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this is a mergeable string section.\nThe minimum value which a special opcode can add to the …\nThe range of values which a special opcode can add to the …\nThe maximum number of individual operations that may be …\nThe size in bytes of the smallest target machine …\nReturns the ELF section name for this kind.\nConvert an offset to be relative to the start of the given …\nConvert an offset to be relative to the start of the given …\nConvert an offset to be relative to the start of the given …\nThe DWARF version of the header.\nReturn the natural word size for the format\nReturns the XCOFF section name for this kind.\nThe encodings of the constants used in the …\nThe encodings of the constants used in the …\nThe attribute encodings for DIE attributes.\nThe encodings of the constants used in the <code>DW_AT_encoding</code> …\nThe encodings of the constants used in the …\nThe opcode for a call frame instruction.\nThe child determination encodings for DIE attributes.\nThe encodings of the constants used in the <code>DW_AT_defaulted</code> …\nThe encodings of the constants used in the …\nThe encodings of the constants used in the <code>DW_AT_discr_list</code>…\nPointer encoding used by <code>.eh_frame</code>.\nThe encodings of the constants used in the <code>DW_AT_endianity</code> …\nThe attribute form encodings for DIE attributes.\nThe encodings of the constants used in the …\nName index attribute encodings.\nThe encodings of the constants used in the <code>DW_AT_inline</code> …\nThe encodings of the constants used in the <code>DW_AT_language</code> …\nThe encodings of the constants used in location list …\nThe encodings for the line number header entry formats.\nThe encodings for the extended opcodes for line number …\nThe encodings for the standard opcodes for line number …\nThe encodings for macro information entry types.\nThe encodings for DWARF expression operations.\nThe encodings of the constants used in the <code>DW_AT_ordering</code> …\nRange list entry encoding values.\nThe section type field in a <code>.dwp</code> unit index.\nThe section type field in a <code>.dwp</code> unit index with version 2.\nThe tag encodings for DIE attributes.\nThe unit type field in a unit header.\nThe encodings of the constants used in the <code>DW_AT_virtuality</code>…\nThe encodings of the constants used in the <code>DW_AT_visibility</code>…\nGet the pointer encoding’s application.\nGet the default DW_AT_lower_bound for this language.\nGet the pointer encoding’s format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this encoding the absent pointer encoding?\nIs this coding indirect? If so, its encoded value is the …\nIs this a known, valid pointer encoding?\nBig endian byte order.\nBig endian byte order.\nA trait describing the endianity of some buffer.\nLittle endian byte order.\nLittle endian byte order.\nThe native endianity for the target platform.\nByte order that is selectable at runtime.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true for big endian byte order.\nReturn true for little endian byte order.\nReturn true for little endian byte order.\nReads a 32 bit floating point number from <code>buf</code>.\nReads a 32 bit floating point number from <code>buf</code>.\nReads a 32 bit floating point number from <code>buf</code>.\nReads a 32 bit floating point number from <code>buf</code>.\nReads a signed 16 bit integer from <code>buf</code>.\nReads a signed 16 bit integer from <code>buf</code>.\nReads a signed 32 bit integer from <code>buf</code>.\nReads a signed 32 bit integer from <code>buf</code>.\nReads a signed 64 bit integer from <code>buf</code>.\nReads a signed 64 bit integer from <code>buf</code>.\nReads an unsigned 16 bit integer from <code>buf</code>.\nReads an unsigned 16 bit integer from <code>buf</code>.\nReads an unsigned 32 bit integer from <code>buf</code>.\nReads an unsigned 32 bit integer from <code>buf</code>.\nReads an unsigned 64 bit integer from <code>buf</code>.\nReads an unsigned 64 bit integer from <code>buf</code>.\nRead an unsigned n-bytes integer u64.\nRead an unsigned n-bytes integer u64.\nWrites an unsigned 16 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 16 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 32 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 32 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 64 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 64 bit integer <code>n</code> to <code>buf</code>.\nA module for reading signed and unsigned integers that …\nRead a signed LEB128 number from the given <code>Reader</code> and …\nRead bytes until the LEB128 continuation bit is not set.\nRead an LEB128 u16 from the given <code>Reader</code> and return it or …\nRead an unsigned LEB128 number from the given <code>Reader</code> and …\nAn abbreviation describes the shape of a …\nAn abbreviation declared that its tag is zero, but zero is …\nA set of type abbreviations.\nA cache of previously parsed <code>Abbreviations</code>.\nThe strategy to use for caching abbreviations.\nTake the absolute value of the top of the stack.\nThe value of a <code>DW_AT_accessibility</code> attribute.\n“Refers to some location in the address space of the …\nRelocate the address if needed, and push it on the stack.\nThe piece is found in memory.\nThe value of a <code>DW_AT_address_class</code> attribute.\nRead the address at the given index in `.debug_addr, …\nA location from DWARF version &lt;= 4.\nA range from DWARF version &lt;= 4.\nAn address calculation overflowed.\n“The DW_LNS_advance_line opcode takes a single signed …\n“The DW_LNS_advance_line opcode takes a single signed …\nThe <code>AdvanceLoc</code> instruction is used for all of …\n“The DW_LNS_advance_pc opcode takes a single unsigned …\n“The DW_LNS_advance_pc opcode takes a single unsigned …\nCache all abbreviations.\nBitwise <code>and</code> of the top two values on the stack.\nA single parsed arange.\nAn iterator over the aranges from a <code>.debug_aranges</code> section.\nA header for a set of entries in the <code>.debug_arange</code> section.\nAn iterator over the headers of a <code>.debug_aranges</code> section.\n“The rule is defined externally to this specification by …\nDW_CFA_GNU_args_size\nMarker trait for types that can be used as backing storage …\nAn attribute in a <code>DebuggingInformationEntry</code>, consisting of …\nAn attribute specification declared that its form is zero, …\nThe description of an attribute in an abbreviated type. It …\nThe value of an attribute in a <code>DebuggingInformationEntry</code>.\nAn iterator over a particular entry’s attributes.\nWe support the z-style augmentation defined by <code>.eh_frame</code>.\nInvalid branch target for a DW_OP_bra or DW_OP_skip.\nThe abbreviation’s has-children byte was not one of …\nThe specified length is impossible.\nAn error parsing a signed LEB128 value.\nAn error parsing an unsigned LEB128 value.\nFound an invalid UTF-8 string.\nDW_LLE_base_address\nDW_RLE_base_address\nOptional base addresses for the relative <code>DW_EH_PE_*</code> …\nDW_LLE_base_addressx\nDW_RLE_base_addressx\nA slice of an arbitrary number of bytes.\nBranch to the target location if the top of stack is …\nThe piece is represented by some constant bytes.\nEvaluate a DWARF expression as a subroutine.  The …\nCompute the call frame CFA and push it on the stack.\nA parsed call frame instruction.\nA lazy iterator parsing call frame instructions.\nThe value of a <code>DW_AT_calling_convention</code> attribute.\nCannot parse a pointer with a <code>DW_EH_PE_omit</code> encoding.\nThe canonical frame address (CFA) recovery rules.\nAn iterator over CIE and FDE entries in a <code>.debug_frame</code> or …\nEncountered a call frame instruction in a context in which …\nThis CFI entry is a <code>CommonInformationEntry</code>.\nEither a <code>CommonInformationEntry</code> (CIE) or a …\nA column number, whose range begins at 1.\nThe type of column that a row is referring to.\nA Common Information Entry holds information that is …\nIn DWARF5, a unit with type <code>DW_UT_compile</code>. In previous …\nThe <code>Evaluation</code> is complete, and <code>Evaluation::result()</code> can …\nDeprecated. <code>CompleteLineNumberProgram</code> has been renamed to …\nA line number program that has previously been run to …\nThe DW_LNS_const_add_pc opcode takes no operands. It …\nThe DW_LNS_const_add_pc opcode takes no operands. It …\nThis is a pseudo-register with a constant value.\nRead the address at the given index in `.debug_addr, and …\nPop the top stack entry, convert it to a different type, …\n“<code>LineInstruction::Copy</code> appends a row to the matrix using …\n“<code>LineInstruction::Copy</code> appends a row to the matrix using …\nA one byte constant data value. How to interpret the byte …\nA two byte constant data value. How to interpret the bytes …\nA four byte constant data value. How to interpret the …\nAn eight byte constant data value. How to interpret the …\nFound a data relative pointer, but the data base is …\nThe <code>DebugAbbrev</code> struct represents the abbreviations …\nThe <code>.debug_abbrev.dwo</code> section.\nThe raw contents of the <code>.debug_addr</code> section.\nAn offset to a set of addresses in the <code>.debug_addr</code> section.\nAn index into a set of addresses in the <code>.debug_addr</code> …\nThe <code>DebugAranges</code> struct represents the DWARF address range …\nThe data in the <code>.debug_cu_index</code> section of a <code>.dwp</code> file.\n<code>DebugFrame</code> contains the <code>.debug_frame</code> section’s frame …\nThe <code>DebugInfo</code> struct represents the DWARF debugging …\nThe <code>.debug_info.dwo</code> section.\nA section-relative reference.\nAn offset into the current <code>.debug_info</code> section, but …\nAn offset into the <code>.debug_info</code> section of the …\nAn iterator over the units of a .debug_info section.\nThe <code>DebugLine</code> struct contains the source location to …\nThe <code>.debug_line.dwo</code> section.\nAn offset into the <code>.debug_line</code> section.\nThe <code>DebugLineStr</code> struct represents the DWARF strings found …\nAn offset into the <code>.debug_line_str</code> section.\nThe raw contents of the <code>.debug_loc</code> section.\nThe <code>.debug_loc.dwo</code> section.\nThe <code>DebugLocLists</code> struct represents the DWARF data found …\nThe <code>.debug_loclists.dwo</code> section.\nAn offset to a set of offsets in the <code>.debug_loclists</code> …\nAn index into a set of offsets in the <code>.debug_loclists</code> …\nThe <code>.debug_macinfo.dwo</code> section.\nAn offset into the <code>.debug_macinfo</code> section.\nThe <code>.debug_macro.dwo</code> section.\nAn offset into the <code>.debug_macro</code> section.\nThe <code>DebugPubNames</code> struct represents the DWARF public names …\nThe <code>DebugPubTypes</code> struct represents the DWARF public types …\nThe raw contents of the <code>.debug_ranges</code> section.\nThe <code>DebugRngLists</code> struct represents the contents of the …\nThe <code>.debug_rnglists.dwo</code> section.\nAn offset to a set of offsets in the <code>.debug_rnglists</code> …\nAn index into a set of offsets in the <code>.debug_rnglists</code> …\nThe <code>DebugStr</code> struct represents the DWARF strings found in …\nThe raw contents of the <code>.debug_str_offsets</code> section.\nThe <code>.debug_str_offsets.dwo</code> section.\nAn offset to a set of entries in the <code>.debug_str_offsets</code> …\nAn index into a set of entries in the <code>.debug_str_offsets</code> …\nAn offset into the <code>.debug_str</code> section.\nAn offset into the <code>.debug_str</code> section of the supplementary …\nThe data in the <code>.debug_tu_index</code> section of a <code>.dwp</code> file.\nThe <code>DebugTypes</code> struct represents the DWARF type information\nThe <code>.debug_types.dwo</code> section.\nA type signature.\nAn iterator over the type-units of this <code>.debug_types</code> …\nA Debugging Information Entry (DIE).\nThe value of a <code>DW_AT_decimal_sign</code> attribute.\nDW_CFA_def_cfaThe DW_CFA_def_cfa instruction takes two …\nDW_CFA_def_cfa_expressionThe DW_CFA_def_cfa_expression …\nDW_CFA_def_cfa_offsetThe DW_CFA_def_cfa_offset instruction …\nDW_CFA_def_cfa_offset_sfThe DW_CFA_def_cfa_offset_sf …\nDW_CFA_def_cfa_registerThe DW_CFA_def_cfa_register …\nDW_CFA_def_cfa_sfThe DW_CFA_def_cfa_sf instruction takes …\nDW_LLE_default_location\nDefines a new source file in the line number program and …\nDefines a new source file in the line number program and …\nDereference the topmost value of the stack.\nA reference to a DIE, either relative to the current CU or …\nThis value is the decoded pointer value.\nDivide the top two values on the stack.\nDivision or modulus by zero when evaluating an expression.\nDrop an item from the stack.\nFound an abbreviation code that has already been used.\nFound a duplicate arange.\nCache abbreviations that are used more than once.\nAll of the commonly used DWARF sections, and other common …\nThe sections from a <code>.dwp</code> file, with parsed indices.\nThe sections from a <code>.dwp</code> file.\nAll of the commonly used DWARF sections.\nAn implementation-defined identifier uniquely identifying …\n<code>EhFrame</code> contains the frame unwinding information needed …\n<code>EhFrameHdr</code> contains the information about the <code>.eh_frame_hdr</code>…\nThe CFI binary search table that is an optional part of …\nAn iterator for <code>.eh_frame_hdr</code> section’s binary search …\nThe piece is empty.  Ordinarily this means the piece has …\nThe value of a <code>DW_AT_encoding</code> attribute.\n<code>LineInstruction::EndSequence</code> sets the end_sequence …\n<code>LineInstruction::EndSequence</code> sets the end_sequence …\nThe endianity of bytes that are read.\n<code>EndianBuf</code> has been renamed to <code>EndianSlice</code>. For ease of …\nA <code>&amp;[u8]</code> slice with endianity metadata.\nThe value of a <code>DW_AT_endianity</code> attribute.\nA cursor into the Debugging Information Entries tree for a …\nA raw reader of the data that defines the Debugging …\nThe state information for a tree view of the Debugging …\nAn iterator that allows traversal of the children of an …\nA node in the Debugging Information Entry tree.\nEvaluate an expression at the entry to the current …\nCompare the top two stack values for equality.\nContains the error value\nAn error that occurred when parsing.\nA DWARF expression evaluator.\nThe state of an <code>Evaluation</code> after evaluating a DWARF …\nSpecification of what storage should be used for <code>Evaluation</code>…\nExpected an attribute value to be a string form.\nExpected a zero, found something else.\nThe bytecode for a DWARF expression or location …\nThe CFA is obtained by evaluating a DWARF expression …\n“The previous value of this register is located at the …\nDW_CFA_expressionThe DW_CFA_expression instruction takes …\nThe storage used for the expression stack.\n“The information bytes contain a DWARF expression (see …\n32-bit floating point type.\nA 32-bit floating point value.\n64-bit floating point type.\nA 64-bit floating point value.\nThis CFI entry is a <code>FrameDescriptionEntry</code>, however fully …\nAn entry in the <code>LineProgramHeader</code>’s <code>file_names</code> set.\nThe format of a component of an include directory or file …\nAn index into the filename entries from the line number …\nThe DW_LNS_fixed_advance_pc opcode takes a single uhalf …\nThe DW_LNS_fixed_advance_pc opcode takes a single uhalf …\nA boolean that indicates presence or absence of the …\nA <code>FrameDescriptionEntry</code> is a set of CFA instructions for …\nCompute the frame base (using <code>DW_AT_frame_base</code>), add the …\nFound a function relative pointer in a context that does …\nCompare the top two stack values using <code>&gt;=</code>.\nThe generic type, which is address-sized and of …\nA generic value, which is address-sized and of unspecified …\nCompare the top two stack values using <code>&gt;</code>.\nSigned 16-bit integer type.\nA signed 16-bit integer value.\nSigned 32-bit integer type.\nA signed 32-bit integer value.\nSigned 64-bit integer type.\nA signed 64-bit integer value.\nSigned 8-bit integer type.\nA signed 8-bit integer value.\nThe value of a <code>DW_AT_identifier_case</code> attribute.\nThe object is a pointer to a value which has no actual …\nThe piece is a pointer to a value which has no actual …\nThe object has no location, but has a known constant value.\nDeprecated. <code>IncompleteLineNumberProgram</code> has been renamed …\nA line number program that has not been run to completion.\nSection kinds which are permitted in a <code>.dwp</code> index.\nThis value is <em>not</em> the pointer value, but points to the …\nThe value of a <code>DW_AT_inline</code> attribute.\nAn expression operation required an integral type but saw a\nThe end of an address range was before the beginning.\nThe size of a deref expression must not be larger than the …\nAn unrecognized operation was found while parsing a DWARF …\nAn expression-terminating operation was followed by …\n<code>DW_FORM_implicit_const</code> used in an invalid context.\nInvalid hash row in <code>.dwp</code> index.\nInvalid section count in <code>.dwp</code> index.\nInvalid slot count in <code>.dwp</code> index.\nThe expression had a piece followed by an expression …\nDW_OP_push_object_address used but no address passed in.\nThe shift value in an expression must be a non-negative …\nAn I/O error occurred while reading.\nType of the elements being stored.\nThe value of a <code>DW_AT_language</code> attribute.\nCompare the top two stack values using <code>&lt;=</code>.\nThe <code>LeftEdge</code> means that the statement begins at the start …\nA parsed line number program instruction.\nAn iterator yielding parsed instructions.\nDeprecated. <code>LineNumberProgram</code> has been renamed to …\nDeprecated. <code>LineNumberProgramHeader</code> has been renamed to …\nDeprecated. <code>LineNumberRow</code> has been renamed to <code>LineRow</code>.\nDeprecated. <code>LineNumberSequence</code> has been renamed to …\nA <code>LineProgram</code> provides access to a <code>LineProgramHeader</code> and a …\nA header for a line number program in the <code>.debug_line</code> …\nThe line range must not be zero.\nA row in the line number program’s resulting matrix.\nExecutes a <code>LineProgram</code> to iterate over the rows in the …\nA sequence within a line number program.  A sequence, as …\nAn iterator over a location list.\nA single location of a piece of the result of a DWARF …\nA location list entry from the <code>.debug_loc</code> or …\nThe DWARF data found in <code>.debug_loc</code> and <code>.debug_loclists</code> …\nAn offset into either the <code>.debug_loc</code> section or the …\nCompare the top two stack values using <code>&lt;</code>.\nThe maximum operations per instruction must not be zero.\nThe minimum instruction length must not be zero.\nSubtract the top two values on the stack.\nMissing DW_LNCT_path in file entry format.\nA compilation unit or type unit is missing its top level …\nModulus of the top two values on the stack.\nMultiply the top two values on the stack.\nCompare the top two stack values using <code>!=</code>.\nNegate the top of the stack.\nDW_CFA_AARCH64_negate_ra_state\n“The DW_LNS_negate_stmt opcode takes no operands. It …\n“The DW_LNS_negate_stmt opcode takes no operands. It …\nDid not find an entry at the given offset.\nDo not have unwind info for the given address.\nDW_CFA_nopThe DW_CFA_nop instruction has no operands and …\nNo operation.\nBitwise <code>not</code> of the top of the stack.\nExpected to find the CIE ID, but found something else.\nExpected to find a pointer to a CIE, but found the CIE ID …\nNot enough items on the stack when evaluating an …\nExpected to find a pointer to an FDE, but found a CIE …\n“The previous value of this register is saved at the …\nThe <code>Offset</code> instruction represents both <code>DW_CFA_offset</code> and …\nThe offset type associated with this CFI section. Either …\nThe type used for offsets and lengths.\nDW_CFA_offset_extended_sfThe DW_CFA_offset_extended_sf …\nThe given offset is out of bounds.\nDW_LLE_offset_pair\nDW_RLE_offset_pair\nContains the success value\nDeprecated. <code>Opcode</code> has been renamed to <code>LineInstruction</code>.\nThe opcode base must not be zero.\nDeprecated. <code>OpcodesIter</code> has been renamed to …\nA single decoded DWARF expression operation.\nAn iterator for the operations in an expression.\nBitwise <code>or</code> of the top two values on the stack.\nThe value of a <code>DW_AT_ordering</code> attribute.\nThis represents a parameter that was optimized out.\n<code>ParsedEhFrameHdr</code> contains the parsed information from the …\nA unit with type <code>DW_UT_partial</code>. The root DIE of this unit …\nA partially parsed <code>FrameDescriptionEntry</code>.\nFound a PC relative pointer, but the section base is …\nPick an item from the stack and push it on top of the …\nThe description of a single piece of the result of a DWARF …\nTerminate a piece.\nAdd the top two values on the stack.\nAdd a constant to the topmost value on the stack.\nA decoded pointer.\nWhen evaluating call frame instructions, found a …\nA single parsed pubname.\nAn iterator over the pubnames from a <code>.debug_pubnames</code> …\nA single parsed pubtype.\nAn iterator over the pubtypes from a <code>.debug_pubtypes</code> …\nPush the object address on the stack.\nAn address range from the <code>.debug_ranges</code>, <code>.debug_rnglists</code>, …\nAn iterator for the address ranges of a …\nThe DWARF data found in <code>.debug_ranges</code> and <code>.debug_rnglists</code> …\nAn offset into the <code>.debug_ranges</code> section.\nA raw entry in .debug_loclists.\nA raw iterator over a location list.\nA raw entry in .debug_rnglists\nA raw iterator over an address range list.\nA trait for reading the data from a DWARF section.\nA trait for offsets with a DWARF section.\nAn identifier for an offset within a section reader.\n“The previous value of this register is stored in …\nDW_CFA_registerThe DW_CFA_register instruction takes two …\nIndicate that this piece’s location is in the given …\nThe piece is found in a register.\nThe CFA is given offset from the given register’s value.\nFind the value of the given register, add the offset, and …\nAn entry in the abstract CFI table that describes how to …\nAn unordered iterator for register rules.\nPop the top stack entry, reinterpret the bits in its value …\nTrait for relocating addresses and offsets while reading a …\nA <code>Reader</code> which applies relocations to addresses and …\nDW_CFA_remember_stateThe DW_CFA_remember_state instruction …\nThe <code>Evaluation</code> needs the DWARF expression at the given …\nThe <code>Evaluation</code> needs the <code>ValueType</code> for the base type DIE at\nThe <code>Evaluation</code> needs the CFA to proceed further.  Once the …\nThe <code>Evaluation</code> needs the value produced by evaluating a …\nThe <code>Evaluation</code> needs the frame base address to proceed …\nThe <code>Evaluation</code> needs an address from the <code>.debug_addr</code> …\nThe <code>Evaluation</code> needs a value from memory to proceed …\nThe <code>Evaluation</code> needs the value of the parameter at the …\nThe <code>Evaluation</code> needs a value from a register to proceed …\nThe <code>Evaluation</code> needs an address to be relocated to proceed …\nThe <code>Evaluation</code> needs a value from TLS to proceed further.  …\nThe <code>Restore</code> instruction represents both <code>DW_CFA_restore</code> and …\nDW_CFA_restore_stateThe DW_CFA_restore_state instruction …\nThe result of a parse.\nThe storage used for the results.\nAn iterator over an address range list.\nRotate the top three stack items.\nThe storage used for register rules in a unwind table row.\nThis register has not been modified from the previous …\nDW_CFA_same_valueThe DW_CFA_same_value instruction takes a …\nA signed integer constant.\nAn offset into another section. Which section this is an …\nA convenience trait for loading DWARF sections from object …\nOptional base addresses for the relative <code>DW_EH_PE_*</code> …\nThe DW_LNE_set_address opcode takes a single relocatable …\nThe DW_LNE_set_address opcode takes a single relocatable …\n“The DW_LNS_set_basic_block opcode takes no operands. It …\n“The DW_LNS_set_basic_block opcode takes no operands. It …\n“The DW_LNS_set_column opcode takes a single unsigned …\n“The DW_LNS_set_column opcode takes a single unsigned …\n“The DW_LNE_set_discriminator opcode takes a single …\n“The DW_LNE_set_discriminator opcode takes a single …\n“<code>LineInstruction::SetEpilogueBegin</code> sets the …\n“<code>LineInstruction::SetEpilogueBegin</code> sets the …\n“The DW_LNS_set_file opcode takes a single unsigned …\n“The DW_LNS_set_file opcode takes a single unsigned …\n“The DW_LNS_set_isa opcode takes a single unsigned …\n“The DW_LNS_set_isa opcode takes a single unsigned …\nDW_CFA_set_locThe DW_CFA_set_loc instruction takes a …\n“<code>LineInstruction::SetPrologueEnd</code> sets the prologue_end …\n“<code>LineInstruction::SetPrologueEnd</code> sets the prologue_end …\nLogical left shift of the 2nd value on the stack by the …\nRight shift of the 2nd value on the stack by the number of …\nArithmetic left shift of the 2nd value on the stack by the …\nPush a signed constant value on the stack.  This handles …\nA unit with type <code>DW_UT_skeleton</code>. The enclosed dwo_id can …\nUnconditional branch to the target location.\n6.2.5.1 Special Opcodes\n6.2.5.1 Special Opcodes\nA unit with type <code>DW_UT_split_compile</code>. The enclosed dwo_id …\nA unit with type <code>DW_UT_split_type</code>. A split type unit is …\nThe storage used for unwind table row stack.\nThe storage used for the evaluation stack.\nAttempted to push onto the CFI or evaluation stack, but it …\nThe object has no location, but its value is at the top of …\nDW_LLE_start_end\nDW_RLE_start_end\nDW_LLE_start_length\nDW_RLE_start_length\nDW_LLE_startx_endx\nDW_RLE_startx_endx\nDW_LLE_startx_length\nDW_RLE_startx_length\nDeprecated. <code>StateMachine</code> has been renamed to <code>LineRows</code>.\nIndicates that storage should be allocated on heap.\nA slice of bytes representing a string. Does not include a …\nSwap the top two stack items.\nCompute the address of a thread-local variable and push it …\nFound a <code>.text</code> relative pointer, but the <code>.text</code> base is …\nToo many iterations to compute the expression.\nThe CFI program defined more register rules than we have …\nIn DWARF5, a unit with type <code>DW_UT_type</code>. In DWARF4, any …\nAn expression operation used mismatching types.\nInterpret the value bytes as a constant of a given type, …\nUnsigned 16-bit integer type.\nAn unsigned 16-bit integer value.\nUnsigned 32-bit integer type.\nAn unsigned 32-bit integer value.\nUnsigned 64-bit integer type.\nAn unsigned 64-bit integer value.\nUnsigned 8-bit integer type.\nAn unsigned 8-bit integer value.\nAn unsigned integer constant.\nA register that has this rule has no recoverable value in …\nDW_CFA_undefinedThe DW_CFA_undefined instruction takes a …\nHit the end of input before it was expected.\nRead a null entry before it was expected.\nAll of the commonly used information for a unit in the …\nThe common fields for the headers of compilation units and …\nThe partially parsed index from a <code>DebugCuIndex</code> or …\nInformation about a unit’s contribution to a section in …\nAn iterator over the section offsets and sizes for a row …\nAn offset into the current compilation or type unit.\nA reference to a <code>Unit</code> and its associated <code>Dwarf</code>.\nA CU-relative reference.\nAn offset into the current compilation unit.\nThis enum specifies the type of the unit and any type …\nFound a record with an unknown abbreviation code.\nFound an unknown CFI augmentation.\nAn unknown DW_CFA_* instruction.\nAn unknown extended opcode and the slice of its unparsed …\nAn unknown extended opcode and the slice of its unparsed …\nFound an unknown extended opcode.\nFound an unknown <code>DW_FORM_*</code> type.\nUnknown section type in <code>.dwp</code> index.\nUnknown section type in version 2 <code>.dwp</code> index.\nFound an unknown location-lists format.\nThe given pointer encoding is either unknown or invalid.\nFound an unknown range-lists format.\nFound an unknown reserved length value.\nAn unknown standard opcode with zero operands.\nAn unknown standard opcode with zero operands.\nAn unknown standard opcode with one operand.\nAn unknown standard opcode with one operand.\nAn unknown standard opcode with multiple operands.\nAn unknown standard opcode with multiple operands.\nFound an unknown standard opcode.\nFound an unknown DWARF version.\nPush an unsigned constant value on the stack.  This …\nRanges using AddressIndex are not supported yet.\nThe specified address size is not supported.\nA DIE attribute used an unsupported form.\nAn unsupported operation was found while evaluating a …\nThe specified field size is not supported.\nAn offset value was larger than the maximum supported …\nThe specified offset size is not supported.\nWe do not support the given pointer encoding yet.\nRegisters larger than <code>u16</code> are not supported.\nNonzero segment selector sizes aren’t supported yet.\nAn expression operation used types that are not supported.\nThe <code>DW_UT_*</code> value for this unit is not supported yet.\nCommon context needed when evaluating the call frame …\nSpecification of what storage should be used for …\nThe location of a DWARF expression within an unwind …\nAn offset into an <code>UnwindSection</code>.\nA section holding unwind information: either <code>.debug_frame</code> …\nThe <code>UnwindTable</code> iteratively evaluates a …\nA row in the virtual unwind table that describes how to …\n“The previous value of this register is the value …\nDW_CFA_val_expressionThe DW_CFA_val_expression instruction …\n“The previous value of this register is the value CFA+N …\nDW_CFA_val_offsetThe DW_CFA_val_offset instruction takes …\nDW_CFA_val_offset_sfThe DW_CFA_val_offset_sf instruction …\nThe value of an entry on the DWARF stack.\nThe piece has no location but its value is known.\nThe type of an entry on the DWARF stack.\nThe <code>.eh_frame_hdr</code> binary search table claims to be …\nThe value of a <code>DW_AT_virtuality</code> attribute.\nThe value of a <code>DW_AT_visibility</code> attribute.\nThe index of a global.\nThe index of a local in the currently executing function.\nThe index of an item on the operand stack.\nBitwise <code>xor</code> of the top two values on the stack.\nFunctions for parsing DWARF debugging abbreviations.\nThe parsed abbreviations for the unit.\nA cache of previously parsed abbreviations for units in …\nAdd a file to the file table if necessary.\nThe <code>DW_AT_addr_base</code> attribute of the unit. Defaults to 0.\n“The number of bytes of program instructions described …\nThe size of a target address in this CIE and any FDEs that …\nThe parsed augmentation, if any.\nThe parsed augmentation data, if we have any.\nThe beginning address of the range.\nIf given, the bit offset of the piece within the location. …\nChecked subtraction. Computes <code>self - other</code>.\n“A constant offset into the .debug_frame section that …\n“A constant that is factored out of all advance location …\nThe current directory of the compilation.\nThe <code>DW_AT_comp_dir</code> attribute of the unit.\nThe current directory of the compilation.\nThe primary source file.\nThe primary source file.\nThe type of information that is represented by the …\nThe <code>.debug_cu_index</code> section.\nThe compilation unit index in the <code>.debug_cu_index</code> section.\nThe base address for data relative pointers.\nThe data containing a single location description.\nA constant that is factored out of certain offset …\nThe <code>.debug_abbrev</code> section.\nThe <code>.debug_abbrev</code> section.\nThe <code>.debug_abbrev.dwo</code> section.\nThe <code>.debug_abbrev.dwo</code> section.\nThe <code>.debug_addr</code> section.\nThe <code>.debug_addr</code> section.\nThe <code>.debug_aranges</code> section.\nThe <code>.debug_aranges</code> section.\nThe <code>.debug_info</code> section.\nThe <code>.debug_info</code> section.\nThe <code>.debug_info.dwo</code> section.\nThe <code>.debug_info.dwo</code> section.\nThe <code>.debug_line</code> section.\nThe <code>.debug_line</code> section.\nThe <code>.debug_line.dwo</code> section.\nThe <code>.debug_line.dwo</code> section.\nThe <code>.debug_line_str</code> section.\nThe <code>.debug_line_str</code> section.\nThe <code>.debug_loc</code> section.\nThe <code>.debug_loc.dwo</code> section.\nThe <code>.debug_loc.dwo</code> section.\nThe <code>.debug_loclists</code> section.\nThe <code>.debug_loclists.dwo</code> section.\nThe <code>.debug_loclists.dwo</code> section.\nThe <code>.debug_ranges</code> section.\nThe <code>.debug_rnglists</code> section.\nThe <code>.debug_rnglists.dwo</code> section.\nThe <code>.debug_rnglists.dwo</code> section.\nThe <code>.debug_str</code> section.\nThe <code>.debug_str</code> section.\nThe <code>.debug_str.dwo</code> section.\nThe <code>.debug_str.dwo</code> section.\nThe <code>.debug_str_offsets</code> section.\nThe <code>.debug_str_offsets</code> section.\nThe <code>.debug_str_offsets.dwo</code> section.\nThe <code>.debug_str_offsets.dwo</code> section.\nThe <code>.debug_types</code> section.\nThe <code>.debug_types</code> section.\nThe <code>.debug_types.dwo</code> section.\nThe <code>.debug_types.dwo</code> section.\nA short description of the error.\n“A sequence of directory entry format descriptions.”\n“A sequence of directory entry format descriptions.”\nThe <code>Dwarf</code> that contains the unit.\nThe DWO ID of a skeleton unit or split compilation unit.\nReturns the ELF section name (if any) for this type when …\nReturns the subrange of the section that is the …\nThe base addresses to use for pointers in the <code>.eh_frame</code> …\nThe base addresses to use for pointers in the <code>.eh_frame_hdr</code>…\nSet the number of bytes remaining to zero.\nAn empty section.\nThe first address that is <em>not</em> covered by this sequence …\nThe first address that is <em>not</em> covered by this sequence …\nThe first address past the end of the range.\nReturn the endianity of bytes that are read.\nWorking with byte slices that have an associated endianity.\nA ‘R’ may be present at any position after the first …\n“A sequence of file entry format descriptions.”\n“A sequence of file entry format descriptions.”\n“Entries in this sequence describe source files that …\n“Entries in this sequence describe source files that …\nThe type of this file.\nFind the index of the first occurrence of the given byte. …\nThe encoding form of the component value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an i16 to an offset.\nConvert a u16 to an offset.\nConvert a u32 to an offset.\nConvert a u64 to an offset.\nConvert a u8 to an offset.\nGet a reference to the held <code>LineProgramHeader</code>.\nThe header of the unit.\nReturns the section id for this type.\nEntries in this sequence describe each path that was …\nEntries in this sequence describe each path that was …\nThe address of the first location associated with this …\nA sequence of rules that are interpreted to create the …\n“A sequence of table defining instructions that are …\nConvert an <code>UnwindOffset&lt;T&gt;</code> into a <code>T</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an offset to a u64.\nTrue if this CIE’s FDEs are trampolines for signal …\nReturn the number of bytes remaining.\nA constant that gives the number of bytes of the CIE …\nA constant that gives the number of bytes of the header and\nThe length of the expression.\nThe line number program of the unit.\nTry to load the section using the given loader function.\nWhere this piece is to be found.\nThe location lists in the <code>.debug_loc</code> and <code>.debug_loclists</code> …\nThe <code>DW_AT_loclists_base</code> attribute of the unit. Defaults to …\nReturn the offset corresponding to the given <code>id</code> if it is …\nReturns the <code>Reader</code> for this section.\nThe <code>DW_AT_low_pc</code> attribute of the unit. Defaults to 0.\nA ‘L’ may be present at any position after the first …\nThe <code>DW_AT_name</code> attribute of the unit.\nThe offset of this entry from the start of its containing …\nThe start of this entry within its containing section.\nThe offset of the expression within the section.\nThe base offset of the unit’s contribution to the …\nReturn the offset of this reader’s data relative to the …\nReturn an identifier for the current reader offset.\nFunctions for parsing and evaluating DWARF expressions.\n“The number assigned to the first special opcode.”\n“The number assigned to the first special opcode.”\nA ‘P’ may be present at any position after the first …\nThe encoded line program instructions.\nThe encoded line program instructions.\nThe address range that this location is valid for.\nThe range lists in the <code>.debug_ranges</code> and <code>.debug_rnglists</code> …\nRead exactly <code>buf.len()</code> bytes into <code>buf</code>.\nReturns the <code>Reader</code> for this section.\nRelocate an address which was read from the given section …\nRelocate a value which was read from the given section …\nAn unsigned LEB128 constant that indicates which column in …\nThe <code>DW_AT_rnglists_base</code> attribute of the unit. Defaults to …\nThe address of the section containing the pointer.\nThe section kind.\nReturns the ELF section name for this type.\nThe size of the unit’s contribution to the section.\nIf given, the size of the piece in bits.  If <code>None</code>, there …\nDiscard the specified number of bytes.\nSplit a reader in two.\n“This array specifies the number of LEB128 operands for …\n“This array specifies the number of LEB128 operands for …\nThe first address that is covered by this sequence within …\nThe first address that is covered by this sequence within …\nThe <code>DW_AT_str_offsets_base</code> attribute of the unit. Defaults …\nThe DWARF sections for a supplementary object file.\nThe base address for text relative pointers. This is …\nConvert an offset to be relative to the start of the …\nConvert an offset to be relative to the start of the …\nReturn all remaining data as a clone-on-write slice.\nConvert all remaining data to a clone-on-write string.\nConvert all remaining data to a clone-on-write string, …\nConvert an offset to be relative to the start of the …\nSet the number of bytes remaining to the specified length.\nThe <code>.debug_tu_index</code> section.\nThe type unit index in the <code>.debug_tu_index</code> section.\nFunctions for parsing DWARF <code>.debug_info</code> and <code>.debug_types</code> …\nThe <code>Unit</code> being referenced.\nDefinitions for values used in DWARF expressions.\nA version number (see Section 7.23). This number is …\nWrapping (modular) addition. Computes <code>self + other</code>.\nReturns the XCOFF section name (if any) for this type when …\nThe target address.\nThe delta to be added to the current address.\nThe number of the register whose rule is being changed.\nThe location of the DWARF expression.\nThe location of the DWARF expression.\nThe location of the DWARF expression.\nThe factored offset.\nThe factored offset.\nThe factored offset.\nThe factored offset.\nThe factored offset.\nThe factored offset.\nThe non-factored offset.\nThe non-factored offset.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe register to be reset.\nThe size of the arguments which have been pushed onto the …\nThe number of the register where the other register’s …\nThe offset from the register’s base value.\nThe register containing the base value.\nThe address of the value required.\nThe DIE of the base type or 0 to indicate the generic type\nThe DIE of the base type or 0 to indicate the generic type\nThe index of the address in the <code>.debug_addr</code> section, …\nThe register number.\nWhether the address also needs to be relocated.\nThe size of the value required. This is guaranteed to be …\nIf not <code>None</code>, a target-specific address space value.\nThe address.\nThe byte offset into the value that the implicit pointer …\nThe register number.\nThe value.\nThe value.\nThe <code>.debug_info</code> offset of the value that this is an …\nThe offset to add.\nThe DIE of the base type or 0 to indicate the generic type\nThe DIE of the base type or 0 to indicate the generic type\nThe DIE of the base type.\nThe DIE of the base type.\nThe DIE of the base type.\nThe bit offset of this piece.  If <code>None</code>, then this piece …\nThe byte offset into the value that the implicit pointer …\nThe implicit value to use.\nThe expression to be evaluated.\nThe index, from the top of the stack, of the item to copy.\nThe index of the address in <code>.debug_addr</code>.\nThe index of the address in <code>.debug_addr</code>.\nThe index of the local.\nThe index of the global.\nThe index of the stack item. 0 is the bottom of the …\nThe offset to add.\nThe offset to add.\nThe DIE to use.\nThe DIE to use.\nThe register number.\nThe register number.\nThe size of the data to dereference.\nThe size of this piece in bits.\nTrue if the dereference operation takes an address space …\nThe relative offset to the target bytecode.\nThe relative offset to the target bytecode.\nThe value to add.\nThe value to push.\nThe value to push.\nThe <code>.debug_info</code> offset of the value that this is an …\nThe value bytes.\nbase address\nbase address\nStart of range. May be an address or an offset.\nstart of range\nstart of range\nstart of range\nstart of range\nstart of range\nexpression\nexpression\nexpression\nexpression\nexpression\nexpression\nexpression\nEnd of range. May be an address or an offset.\nend of range\nend of range\nend of range\nlength of range\nlength of range\nbase address\nbase address\nStart of range. May be an address or an offset.\nstart of range\nstart of range\nstart of range\nstart of range\nstart of range\nEnd of range. May be an address or an offset.\nend of range\nend of range\nend of range\nlength of range\nlength of range\nThe offset within this type unit where the type is defined.\nThe offset within this type unit where the type is defined.\nThe unique type signature for this type unit.\nThe unique type signature for this type unit.\nAn abbreviation describes the shape of a …\nA set of type abbreviations.\nA cache of previously parsed <code>Abbreviations</code>.\nThe strategy to use for caching abbreviations.\nCache all abbreviations.\nThe description of an attribute in an abbreviated type. It …\nA list of attributes found in an <code>Abbreviation</code>\nThe <code>DebugAbbrev</code> struct represents the abbreviations …\nCache abbreviations that are used more than once.\nParse the abbreviations at the given <code>offset</code> within this …\nGet this abbreviation’s attributes.\nCreate a <code>DebugAbbrev</code> section that references the data in …\nGet this abbreviation’s code.\nConstruct a new, empty set of abbreviations.\nGet the attribute’s form.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse the abbreviations at the given offset.\nGet the abbreviation associated with the given code.\nReturn true if this abbreviation’s type has children, …\nGet the attribute’s implicit const value.\nInsert an abbreviation into the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the attribute’s name.\nConstruct a new <code>DebugAbbrev</code> instance from the data in the …\nCreate an empty abbreviations cache.\nConstruct a new <code>Abbreviation</code>.\nReturns a new empty list of attributes\nConstruct a new <code>AttributeSpecification</code> from the given name …\nParse a series of abbreviations, terminated by a null …\nParse an abbreviation. Return <code>None</code> for the null …\nParse an attribute specification. Returns <code>None</code> for the …\nParse a series of attribute specifications, terminated by …\nParse an attribute’s form.\nParse an abbreviation’s “does the type have children?…\nParse an abbreviation’s tag.\nParse abbreviations and store them in the cache.\nPushes a new value onto this list of attributes.\nSet an entry in the abbreviations cache.\nReturn the size of the attribute, in bytes.\nGet this abbreviation’s tag.\nThe raw contents of the <code>.debug_addr</code> section.\nCreate a <code>DebugAddr</code> section that references the data in <code>self</code>…\nReturns the argument unchanged.\nReturns the address at the given <code>base</code> and <code>index</code>.\nCalls <code>U::from(self)</code>.\nA single parsed arange.\nAn iterator over the aranges from a <code>.debug_aranges</code> section.\nA header for a set of entries in the <code>.debug_arange</code> section.\nAn iterator over the headers of a <code>.debug_aranges</code> section.\nThe <code>DebugAranges</code> struct represents the DWARF address range …\nReturn the beginning address of this arange.\nCreate a <code>DebugAranges</code> section that references the data in …\nReturn the offset into the .debug_info section for this …\nReturn the encoding parameters for this set of entries.\nReturn the arange entries in this set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the header at the given offset.\nIterate the sets of entries in the <code>.debug_aranges</code> section.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the length of this set of entries, including the …\nReturn the length of this arange.\nConstruct a new <code>DebugAranges</code> instance from the data in the …\nAdvance the iterator to the next header.\nAdvance the iterator and return the next arange.\nAdvance the iterator and return the next arange without …\nReturn the offset of this header within the <code>.debug_aranges</code> …\nParse a single arange. Return <code>None</code> for the null arange, …\nReturn the range.\nThe <code>AdvanceLoc</code> instruction is used for all of …\n“The rule is defined externally to this specification by …\nDW_CFA_GNU_args_size\nWe support the z-style augmentation defined by <code>.eh_frame</code>.\nParsed augmentation data for a <code>FrameDescriptEntry</code>.\nOptional base addresses for the relative <code>DW_EH_PE_*</code> …\nA parsed call frame instruction.\nA lazy iterator parsing call frame instructions.\nThe canonical frame address (CFA) recovery rules.\nAn iterator over CIE and FDE entries in a <code>.debug_frame</code> or …\nThis CFI entry is a <code>CommonInformationEntry</code>.\nEither a <code>CommonInformationEntry</code> (CIE) or a …\nA Common Information Entry holds information that is …\nThis is a pseudo-register with a constant value.\n<code>DebugFrame</code> contains the <code>.debug_frame</code> section’s frame …\nDW_CFA_def_cfaThe DW_CFA_def_cfa instruction takes two …\nDW_CFA_def_cfa_expressionThe DW_CFA_def_cfa_expression …\nDW_CFA_def_cfa_offsetThe DW_CFA_def_cfa_offset instruction …\nDW_CFA_def_cfa_offset_sfThe DW_CFA_def_cfa_offset_sf …\nDW_CFA_def_cfa_registerThe DW_CFA_def_cfa_register …\nDW_CFA_def_cfa_sfThe DW_CFA_def_cfa_sf instruction takes …\nThis value is the decoded pointer value.\n<code>EhFrame</code> contains the frame unwinding information needed …\n<code>EhFrameHdr</code> contains the information about the <code>.eh_frame_hdr</code>…\nThe CFI binary search table that is an optional part of …\nAn iterator for <code>.eh_frame_hdr</code> section’s binary search …\nThe CFA is obtained by evaluating a DWARF expression …\n“The previous value of this register is located at the …\nDW_CFA_expressionThe DW_CFA_expression instruction takes …\nThis CFI entry is a <code>FrameDescriptionEntry</code>, however fully …\nA <code>FrameDescriptionEntry</code> is a set of CFA instructions for …\nThis value is <em>not</em> the pointer value, but points to the …\nDW_CFA_AARCH64_negate_ra_state\nDW_CFA_nopThe DW_CFA_nop instruction has no operands and …\n“The previous value of this register is saved at the …\nThe <code>Offset</code> instruction represents both <code>DW_CFA_offset</code> and …\nThe offset type associated with this CFI section. Either …\nDW_CFA_offset_extended_sfThe DW_CFA_offset_extended_sf …\n<code>ParsedEhFrameHdr</code> contains the parsed information from the …\nA partially parsed <code>FrameDescriptionEntry</code>.\nA decoded pointer.\n“The previous value of this register is stored in …\nDW_CFA_registerThe DW_CFA_register instruction takes two …\nThe CFA is given offset from the given register’s value.\nAn entry in the abstract CFI table that describes how to …\nAn unordered iterator for register rules.\nDW_CFA_remember_stateThe DW_CFA_remember_state instruction …\nThe <code>Restore</code> instruction represents both <code>DW_CFA_restore</code> and …\nDW_CFA_restore_stateThe DW_CFA_restore_state instruction …\nThe storage used for register rules in a unwind table row.\nThis register has not been modified from the previous …\nDW_CFA_same_valueThe DW_CFA_same_value instruction takes a …\nOptional base addresses for the relative <code>DW_EH_PE_*</code> …\nDW_CFA_set_locThe DW_CFA_set_loc instruction takes a …\nThe storage used for unwind table row stack.\nA register that has this rule has no recoverable value in …\nDW_CFA_undefinedThe DW_CFA_undefined instruction takes a …\nCommon context needed when evaluating the call frame …\nSpecification of what storage should be used for …\nThe location of a DWARF expression within an unwind …\nAn offset into an <code>UnwindSection</code>.\nA section holding unwind information: either <code>.debug_frame</code> …\nThe <code>UnwindTable</code> iteratively evaluates a …\nA row in the virtual unwind table that describes how to …\n“The previous value of this register is the value …\nDW_CFA_val_expressionThe DW_CFA_val_expression instruction …\n“The previous value of this register is the value CFA+N …\nDW_CFA_val_offsetThe DW_CFA_val_offset instruction takes …\nDW_CFA_val_offset_sfThe DW_CFA_val_offset_sf instruction …\n“The number of bytes of program instructions described …\nThe size of addresses (in bytes) in this CIE.\nThe size of a target address in this CIE and any FDEs that …\nGet the augmentation data, if any exists.\nThe parsed augmentation, if any.\nThe parsed augmentation data, if we have any.\nGet the canonical frame address (CFA) recovery rule for …\nGet a reference to this FDE’s CIE.\n“A constant offset into the .debug_frame section that …\nParse the <code>CommonInformationEntry</code> at the given offset.\nParse the <code>CommonInformationEntry</code> at the given offset.\nGet the offset of this FDE’s CIE.\nA constant that is factored out of all advance location …\n“A constant that is factored out of all advance location …\nReturn <code>true</code> if the given address is within this FDE, <code>false</code> …\nReturn <code>true</code> if the given <code>address</code> is within this row’s …\nThe base address for data relative pointers.\nA constant that is factored out of certain offset …\nA constant that is factored out of certain offset …\nReturn the direct pointer value.\nThe base addresses to use for pointers in the <code>.eh_frame</code> …\nThe base addresses to use for pointers in the <code>.eh_frame_hdr</code>…\nReturns the address of the binary’s <code>.eh_frame</code> section.\nReturn the encoding parameters for this CIE.\nOne more than the last address that this entry has unwind …\nGet the end PC address where this row’s register rules …\nIterate over the <code>CommonInformationEntry</code>s and …\nIterate over the <code>CommonInformationEntry</code>s and …\nA constant that gives the number of bytes of the CIE …\nA constant that gives the number of bytes of the header and\nA constant that gives the number of bytes of the header and\nEvaluate one call frame instruction. Return <code>Ok(true)</code> if …\nReturn the encoding of the addresses for this CIE’s FDEs.\nA ‘R’ may be present at any position after the first …\nFind the <code>FrameDescriptionEntry</code> for the given address.\nFind the <code>FrameDescriptionEntry</code> for the given address.\nReturns a parsed FDE for the given address, or …\nParse the <code>FrameDescriptionEntry</code> at the given offset.\nParse the <code>FrameDescriptionEntry</code> at the given offset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the expression from the section.\nReturns <code>None</code> if we have not completed evaluation of a CIE…\nTrue if this CIE’s FDEs have a LSDA.\nThe first address for which this entry has unwind …\nThe address of the first location associated with this …\nA sequence of rules that are interpreted to create the …\nRun the CIE’s initial instructions and initialize this …\nIterate over this CIE’s initial instructions.\nIterate over this FDE’s instructions.\n“A sequence of table defining instructions that are …\nConvert an <code>UnwindOffset&lt;T&gt;</code> into a <code>T</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current row with the lifetime of the context.\nTrue if this CIE’s FDEs are trampolines for signal …\nReturn true if this FDE’s function is a trampoline for a …\nTrue if this CIE’s FDEs are trampolines for signal …\nReturn an iterator that can walk the <code>.eh_frame_hdr</code> table.\nThe number of bytes of instructions that this entry has …\nA constant that gives the number of bytes of the CIE …\nA constant that gives the number of bytes of the header and\nThe length of the expression.\n<em>Probably</em> returns a pointer to the FDE for the given …\nThe address of this FDE’s language-specific data area …\nA ‘L’ may be present at any position after the first …\nReturn the encoding of the LSDA address for this CIE’s …\nConstruct a new <code>DebugFrame</code> instance from the data in the …\nConstructs a new <code>EhFrameHdr</code> instance from the data in the …\nConstruct a new <code>EhFrame</code> instance from the data in the …\nConstruct a new call frame unwinding context.\nConstruct a new <code>UnwindTable</code> for the given …\nConstruct a new call frame unwinding context.\nYield the next entry in the <code>EhHdrTableIter</code>.\nAdvance the iterator to the next entry.\nParse the next call frame instruction.\nEvaluate call frame instructions until the next row of the …\nYield the nth entry in the <code>EhHdrTableIter</code>\nGet the offset of this entry from the start of its …\nGet the offset of this entry from the start of its …\nGet the offset of this entry from the start of its …\nThe offset of this entry from the start of its containing …\nThe start of this entry within its containing section.\nThe offset of the expression within the section.\nParses this <code>EhFrameHdr</code> to a <code>ParsedEhFrameHdr</code>.\nFully parse this FDE.\nParse the <code>PartialFrameDescriptionEntry</code> at the given offset.\nParse the <code>PartialFrameDescriptionEntry</code> at the given offset.\nReturn the address of the personality routine handler for …\nReturn the address of the FDE’s function’s personality …\nA ‘P’ may be present at any position after the first …\nReturn the encoding and address of the personality routine …\nReturn the pointer value, discarding indirectness …\nConvert a <code>Pointer</code> to a section offset.\nGet the register recovery rule for the given register …\nIterate over all defined register <code>(number, rule)</code> pairs.\nAn unsigned … constant that indicates which column in …\nAn unsigned LEB128 constant that indicates which column in …\nReturn the table of unwind information for this FDE.\nReturns the amount of args currently on the stack.\nThe address of the section containing the pointer.\nSet the size of a target address in bytes.\nSet the size of a target address in bytes.\nSet the <code>.eh_frame</code> section base address.\nSet the <code>.eh_frame_hdr</code> section base address.\nSet the <code>.got</code> section base address.\nSet the <code>.text</code> section base address.\nSet the vendor extensions to use.\nSet the vendor extensions to use.\nGet the starting PC address that this row applies to.\nRetrieves the CFI binary search table, if there is one.\nThe base address for text relative pointers. This is …\nFind the frame unwind information for the given address.\nFind the frame unwind information for the given address.\nReturns the frame unwind information for the given address,\nFind the frame unwind information for the given address.\nA version number (see Section 7.23). This number is …\nA version number (see Section 7.23). This number is …\nThe target address.\nThe delta to be added to the current address.\nThe number of the register whose rule is being changed.\nThe location of the DWARF expression.\nThe location of the DWARF expression.\nThe location of the DWARF expression.\nThe factored offset.\nThe factored offset.\nThe factored offset.\nThe factored offset.\nThe factored offset.\nThe factored offset.\nThe non-factored offset.\nThe non-factored offset.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe target register’s number.\nThe register to be reset.\nThe size of the arguments which have been pushed onto the …\nThe number of the register where the other register’s …\nThe offset from the register’s base value.\nThe register containing the base value.\nAll of the commonly used DWARF sections, and other common …\nThe sections from a <code>.dwp</code> file, with parsed indices.\nThe sections from a <code>.dwp</code> file.\nAll of the commonly used DWARF sections.\nAn iterator for the address ranges of a …\nAll of the commonly used information for a unit in the …\nA reference to a <code>Unit</code> and its associated <code>Dwarf</code>.\nParse the abbreviations for a compilation unit.\nThe parsed abbreviations for the unit.\nA cache of previously parsed abbreviations for units in …\nThe <code>DW_AT_addr_base</code> attribute of the unit. Defaults to 0.\nReturn the address at the given index.\nReturn the address at the given index.\nTry to return an attribute value as an address.\nTry to return an attribute value as an address.\nTry to return an attribute value as a location list entry …\nTry to return an attribute value as a location list entry …\nTry to return an attribute value as a location list offset.\nTry to return an attribute value as a location list offset.\nTry to return an attribute value as a range list entry …\nTry to return an attribute value as a range list entry …\nTry to return an attribute value as a range list offset.\nTry to return an attribute value as a range list offset.\nReturn an attribute value as a string slice.\nReturn an attribute value as a string slice.\nCreate a <code>Dwarf</code> structure that references the data in <code>self</code>.\nCreate a <code>Dwarf</code> structure that references the data in <code>self</code>.\nCreate a <code>DwarfPackage</code> structure that references the data …\nCreate a <code>Dwarf</code> structure that references the data in <code>self</code> …\nThe <code>DW_AT_comp_dir</code> attribute of the unit.\nCopy attributes that are subject to relocation from …\nThe <code>.debug_cu_index</code> section.\nThe compilation unit index in the <code>.debug_cu_index</code> section.\nReturn the section contributions of the compilation unit …\nThe <code>.debug_abbrev</code> section.\nThe <code>.debug_abbrev</code> section.\nThe <code>.debug_abbrev.dwo</code> section.\nThe <code>.debug_abbrev.dwo</code> section.\nThe <code>.debug_addr</code> section.\nThe <code>.debug_addr</code> section.\nThe <code>.debug_aranges</code> section.\nThe <code>.debug_aranges</code> section.\nThe <code>.debug_info</code> section.\nThe <code>.debug_info</code> section.\nThe <code>.debug_info.dwo</code> section.\nThe <code>.debug_info.dwo</code> section.\nThe <code>.debug_line</code> section.\nThe <code>.debug_line</code> section.\nThe <code>.debug_line.dwo</code> section.\nThe <code>.debug_line.dwo</code> section.\nThe <code>.debug_line_str</code> section.\nThe <code>.debug_line_str</code> section.\nThe <code>.debug_loc</code> section.\nThe <code>.debug_loc.dwo</code> section.\nThe <code>.debug_loc.dwo</code> section.\nThe <code>.debug_loclists</code> section.\nThe <code>.debug_loclists.dwo</code> section.\nThe <code>.debug_loclists.dwo</code> section.\nThe <code>.debug_ranges</code> section.\nThe <code>.debug_rnglists</code> section.\nThe <code>.debug_rnglists.dwo</code> section.\nThe <code>.debug_rnglists.dwo</code> section.\nThe <code>.debug_str</code> section.\nThe <code>.debug_str</code> section.\nThe <code>.debug_str.dwo</code> section.\nThe <code>.debug_str.dwo</code> section.\nThe <code>.debug_str_offsets</code> section.\nThe <code>.debug_str_offsets</code> section.\nThe <code>.debug_str_offsets.dwo</code> section.\nThe <code>.debug_str_offsets.dwo</code> section.\nThe <code>.debug_types</code> section.\nThe <code>.debug_types</code> section.\nThe <code>.debug_types.dwo</code> section.\nThe <code>.debug_types.dwo</code> section.\nReturn an iterator for the address ranges of a …\nReturn an iterator for the address ranges of a …\nThe <code>Dwarf</code> that contains the unit.\nThe DWO ID of a skeleton unit or split compilation unit.\nFind the dwo name (if any) for this unit, automatically …\nAn empty section.\nReturn the encoding parameters for this unit.\nNavigate this unit’s <code>DebuggingInformationEntry</code>s.\nNavigate this unit’s <code>DebuggingInformationEntry</code>s starting …\nRead the raw data that defines the Debugging Information …\nNavigate this unit’s <code>DebuggingInformationEntry</code>s as a tree\nRead the <code>DebuggingInformationEntry</code> at the given offset.\nThe type of this file.\nFind the compilation unit with the given DWO identifier …\nFind the type unit with the given type signature and …\nReturns a string representation of the given error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Dwarf</code> structure from the given sections.\nCreate a <code>DwarfPackage</code> structure from the given sections.\nThe header of the unit.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line number program of the unit.\nReturn the string at the given offset in <code>.debug_line_str</code>.\nReturn the string at the given offset in <code>.debug_line_str</code>.\nTry to load the DWARF sections using the given loader …\nTry to load the DWARF sections using the given loader …\nTry to load the <code>.dwp</code> sections using the given loader …\nTry to load the <code>.dwp</code> sections using the given loader …\nLoad the DWARF sections from the supplementary object file.\nIterate over the <code>LocationListEntry</code>s starting at the given …\nIterate over the <code>LocationListEntry</code>s starting at the given …\nThe location lists in the <code>.debug_loc</code> and <code>.debug_loclists</code> …\nReturn the location list offset at the given index.\nReturn the location list offset at the given index.\nThe <code>DW_AT_loclists_base</code> attribute of the unit. Defaults to …\nCall <code>Reader::lookup_offset_id</code> for each section, and return …\nThe <code>DW_AT_low_pc</code> attribute of the unit. Defaults to 0.\nAssuming <code>self</code> was loaded from a .dwo, take the appropriate …\nThe <code>DW_AT_name</code> attribute of the unit.\nConstruct a new <code>Unit</code> from the given unit header.\nConstruct a new <code>UnitRef</code> from a <code>Dwarf</code> and a <code>Unit</code>.\nConstruct a new <code>Unit</code> from the given unit header and …\nAdvance the iterator to the next range.\nParse abbreviations and store them in the cache.\nIterate over the <code>RangeListEntry</code>s starting at the given …\nIterate over the <code>RangeListEntry</code>s starting at the given …\nThe range lists in the <code>.debug_ranges</code> and <code>.debug_rnglists</code> …\nReturn the range list offset at the given index.\nReturn the range list offset at the given index.\nReturn the range list offset for the given raw offset.\nReturn the range list offset for the given raw offset.\nIterate over the raw <code>LocationListEntry</code>s starting at the …\nIterate over the raw <code>LocationListEntry</code>s starting at the …\nIterate over the <code>RawRngListEntry</code>ies starting at the given …\nIterate over the <code>RawRngListEntry</code>ies starting at the given …\nThe <code>DW_AT_rnglists_base</code> attribute of the unit. Defaults to …\nReturn the section contributions of a unit.\nStore the DWARF sections for the supplementary object file.\nThe <code>DW_AT_str_offsets_base</code> attribute of the unit. Defaults …\nReturn the string at the given offset in <code>.debug_str</code>.\nReturn the string at the given offset in <code>.debug_str</code>.\nReturn the string offset at the given index.\nReturn the string offset at the given index.\nReturn a reference to the DWARF sections for the …\nThe DWARF sections for a supplementary object file.\nReturn the string at the given offset in the <code>.debug_str</code> in …\nReturn the string at the given offset in the <code>.debug_str</code> in …\nThe <code>.debug_tu_index</code> section.\nThe type unit index in the <code>.debug_tu_index</code> section.\nReturn the section contributions of the compilation unit …\nIterate the type-unit headers in the <code>.debug_types</code> section.\nConstruct a new <code>Unit</code> from the given unit header.\nThe <code>Unit</code> being referenced.\nReturn an iterator for the address ranges of a <code>Unit</code>.\nReturn an iterator for the address ranges of the <code>Unit</code>.\nReturn a reference to this unit and its associated <code>Dwarf</code>.\nIterate the unit headers in the <code>.debug_info</code> section.\nA <code>&amp;[u8]</code> slice with endianity metadata.\nFind the first occurrence of a byte in the slice, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>EndianSlice</code> with the given slice and …\nReturn the offset of the start of the slice relative to …\nTake the given <code>start..end</code> range of the underlying slice …\nTake the given <code>start..</code> range of the underlying slice and …\nTake the given <code>..end</code> range of the underlying slice and …\nReturn a reference to the raw slice.\nSplit the slice in two at the given index, resulting in …\nConverts the slice to a string using <code>str::from_utf8</code>.\nConverts the slice to a string, including invalid …\nThe <code>.debug_abbrev.dwo</code> section.\nThe data in the <code>.debug_cu_index</code> section of a <code>.dwp</code> file.\nThe <code>.debug_info.dwo</code> section.\nThe <code>.debug_line.dwo</code> section.\nThe <code>.debug_loc.dwo</code> section.\nThe <code>.debug_loclists.dwo</code> section.\nThe <code>.debug_macinfo.dwo</code> section.\nThe <code>.debug_macro.dwo</code> section.\nThe <code>.debug_rnglists.dwo</code> section.\nThe <code>.debug_str_offsets.dwo</code> section.\nThe data in the <code>.debug_tu_index</code> section of a <code>.dwp</code> file.\nThe <code>.debug_types.dwo</code> section.\nSection kinds which are permitted in a <code>.dwp</code> index.\nThe partially parsed index from a <code>DebugCuIndex</code> or …\nInformation about a unit’s contribution to a section in …\nAn iterator over the section offsets and sizes for a row …\nCreate a <code>DebugCuIndex</code> section that references the data in …\nCreate a <code>DebugTuIndex</code> section that references the data in …\nReturns the ELF section name for this kind, when found in …\nFind <code>id</code> in the index hash table, and return the row index.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse the index header.\nParse the index header.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>DebugCuIndex</code> instance from the data in the …\nConstruct a new <code>DebugTuIndex</code> instance from the data in the …\nThe base offset of the unit’s contribution to the …\nThe section kind.\nReturn the number of sections.\nReturns the corresponding <code>SectionId</code>.\nReturn the section offsets and sizes for the given row …\nThe size of the unit’s contribution to the section.\nReturn the number of slots.\nReturn the number of units.\nReturn the version.\n“The DW_LNS_advance_line opcode takes a single signed …\n“The DW_LNS_advance_line opcode takes a single signed …\n“The DW_LNS_advance_pc opcode takes a single unsigned …\n“The DW_LNS_advance_pc opcode takes a single unsigned …\nA column number, whose range begins at 1.\nThe type of column that a row is referring to.\nDeprecated. <code>CompleteLineNumberProgram</code> has been renamed to …\nA line number program that has previously been run to …\nThe DW_LNS_const_add_pc opcode takes no operands. It …\nThe DW_LNS_const_add_pc opcode takes no operands. It …\n“<code>LineInstruction::Copy</code> appends a row to the matrix using …\n“<code>LineInstruction::Copy</code> appends a row to the matrix using …\nThe <code>DebugLine</code> struct contains the source location to …\nDefines a new source file in the line number program and …\nDefines a new source file in the line number program and …\n<code>LineInstruction::EndSequence</code> sets the end_sequence …\n<code>LineInstruction::EndSequence</code> sets the end_sequence …\nAn entry in the <code>LineProgramHeader</code>’s <code>file_names</code> set.\nThe format of a component of an include directory or file …\nThe DW_LNS_fixed_advance_pc opcode takes a single uhalf …\nThe DW_LNS_fixed_advance_pc opcode takes a single uhalf …\nDeprecated. <code>IncompleteLineNumberProgram</code> has been renamed …\nA line number program that has not been run to completion.\nThe <code>LeftEdge</code> means that the statement begins at the start …\nA parsed line number program instruction.\nAn iterator yielding parsed instructions.\nDeprecated. <code>LineNumberProgram</code> has been renamed to …\nDeprecated. <code>LineNumberProgramHeader</code> has been renamed to …\nDeprecated. <code>LineNumberRow</code> has been renamed to <code>LineRow</code>.\nDeprecated. <code>LineNumberSequence</code> has been renamed to …\nA <code>LineProgram</code> provides access to a <code>LineProgramHeader</code> and a …\nA header for a line number program in the <code>.debug_line</code> …\nA row in the line number program’s resulting matrix.\nExecutes a <code>LineProgram</code> to iterate over the rows in the …\nA sequence within a line number program.  A sequence, as …\n“The DW_LNS_negate_stmt opcode takes no operands. It …\n“The DW_LNS_negate_stmt opcode takes no operands. It …\nDeprecated. <code>Opcode</code> has been renamed to <code>LineInstruction</code>.\nDeprecated. <code>OpcodesIter</code> has been renamed to …\nThe DW_LNE_set_address opcode takes a single relocatable …\nThe DW_LNE_set_address opcode takes a single relocatable …\n“The DW_LNS_set_basic_block opcode takes no operands. It …\n“The DW_LNS_set_basic_block opcode takes no operands. It …\n“The DW_LNS_set_column opcode takes a single unsigned …\n“The DW_LNS_set_column opcode takes a single unsigned …\n“The DW_LNE_set_discriminator opcode takes a single …\n“The DW_LNE_set_discriminator opcode takes a single …\n“<code>LineInstruction::SetEpilogueBegin</code> sets the …\n“<code>LineInstruction::SetEpilogueBegin</code> sets the …\n“The DW_LNS_set_file opcode takes a single unsigned …\n“The DW_LNS_set_file opcode takes a single unsigned …\n“The DW_LNS_set_isa opcode takes a single unsigned …\n“The DW_LNS_set_isa opcode takes a single unsigned …\n“<code>LineInstruction::SetPrologueEnd</code> sets the prologue_end …\n“<code>LineInstruction::SetPrologueEnd</code> sets the prologue_end …\n6.2.5.1 Special Opcodes\n6.2.5.1 Special Opcodes\nDeprecated. <code>StateMachine</code> has been renamed to <code>LineRows</code>.\nAn unknown extended opcode and the slice of its unparsed …\nAn unknown extended opcode and the slice of its unparsed …\nAn unknown standard opcode with zero operands.\nAn unknown standard opcode with zero operands.\nAn unknown standard opcode with one operand.\nAn unknown standard opcode with one operand.\nAn unknown standard opcode with multiple operands.\nAn unknown standard opcode with multiple operands.\nAdd a file to the file table if necessary.\n“The program-counter value corresponding to a machine …\nGet the size in bytes of a target machine address.\nStep 1 of section 6.2.5.1\nStep 2 of section 6.2.5.1\n“A boolean indicating that the current instruction is …\nCreate a <code>DebugLine</code> section that references the data in <code>self</code>…\n“An unsigned integer indicating a column number within a …\nThe current directory of the compilation.\nThe current directory of the compilation.\nThe primary source file.\nThe primary source file.\nThe type of information that is represented by the …\nGet the default value of the <code>is_stmt</code> register for this …\nThe include directory with the given directory index.\nGet this file’s directory.\nGet the format of a directory entry.\n“A sequence of directory entry format descriptions.”\n“A sequence of directory entry format descriptions.”\nAn unsigned LEB128 number representing the directory index …\n“An unsigned integer identifying the block to which the …\nReturn the encoding parameters for this header’s line …\nThe first address that is <em>not</em> covered by this sequence …\nThe first address that is <em>not</em> covered by this sequence …\n“A boolean indicating that the current address is that …\n“A boolean indicating that the current address is one …\nSection 6.2.5.1\nExecute the given instruction, and return true if a new …\nThe source file corresponding to the current machine …\nThe source file with the given file index.\nReturn true if the file name entry format contains an MD5 …\nReturn true if the file entries may have valid sizes.\nReturn true if the file name entry format contains a …\nReturn true if the file entries may have valid timestamps.\n“An unsigned integer indicating the identity of the …\nGet the format of a file name entry.\n“A sequence of file entry format descriptions.”\n“A sequence of file entry format descriptions.”\nGet the list of source files that appear in this header’…\n“Entries in this sequence describe source files that …\n“Entries in this sequence describe source files that …\nThe encoding form of the component value.\nWhether this line program is encoded in 64- or 32-bit …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the held <code>LineProgramHeader</code>.\nGet a reference to the header for this state machine’s …\nRetrieve the <code>LineProgramHeader</code> for this program.\nRetrieve the <code>LineProgramHeader</code> for this program.\nGet the length of the encoded line number program header, …\nGet the set of include directories for this header’s …\nEntries in this sequence describe each path that was …\nEntries in this sequence describe each path that was …\nIterate over the instructions in this header’s line …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n“A boolean indicating that the current instruction is a …\nTag for the current instruction set architecture.\n“An unsigned integer indicating a source line number. …\nGet the line base for this header’s line program.\nGet the line encoding parameters for this header’s line …\nGet the line range for this header’s line program.\nGet the maximum number of operations each instruction in …\nA 16-byte MD5 digest of the file contents.\nGet the minimum instruction length any instruction in this …\nConstruct a new <code>DebugLine</code> instance from the data in the …\nCreate a line number row in the initial state for the …\nAdvance the iterator and return the next instruction.\nParse and execute the next instructions in the line number …\nReturn the offset of the line number program header in the …\nAn unsigned integer representing the index of an operation …\nGet opcode base for this header’s line program.\n“The number assigned to the first special opcode.”\n“The number assigned to the first special opcode.”\nA slice containing the full or relative path name of a …\nParse the line number program whose header is at the given …\nThe encoded line program instructions.\nThe encoded line program instructions.\n“A boolean indicating that the current address is one …\nGet the raw, un-parsed <code>EndianSlice</code> containing this header…\nPerform any reset that was required after copying the …\nConstruct a new <code>LineRows</code> for executing the subset of the …\nConstruct a new <code>LineRows</code> for executing this program to …\nExecute the line number program, completing the …\nThe size of the file in bytes, or 0 if not available.\nThe source code of this file. (UTF-8 source text string …\nAn array of <code>u8</code> that specifies the number of LEB128 …\n“This array specifies the number of LEB128 operands for …\n“This array specifies the number of LEB128 operands for …\nThe first address that is covered by this sequence within …\nThe first address that is covered by this sequence within …\nThe implementation-defined time of last modification of …\nReturn the length of the line number program and header, …\nGet the version of this header’s line program.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the serialized size of the table header.\nReturn the serialized size of the table header.\nA location from DWARF version &lt;= 4.\nThe bare location list format used before DWARF 5.\nDW_LLE_base_address\nDW_LLE_base_addressx\nThe raw contents of the <code>.debug_loc</code> section.\nThe <code>DebugLocLists</code> struct represents the DWARF data found …\nDW_LLE_default_location\nThe DW_LLE encoded range list format used in DWARF 5 and …\nAn iterator over a location list.\nA location list entry from the <code>.debug_loc</code> or …\nThe DWARF data found in <code>.debug_loc</code> and <code>.debug_loclists</code> …\nDW_LLE_offset_pair\nA raw entry in .debug_loclists.\nA raw iterator over a location list.\nDW_LLE_start_end\nDW_LLE_start_length\nDW_LLE_startx_endx\nDW_LLE_startx_length\nCreate a <code>DebugLoc</code> section that references the data in <code>self</code>.\nCreate a <code>DebugLocLists</code> section that references the data in …\nCreate a <code>LocationLists</code> that references the data in <code>self</code>.\nThe data containing a single location description.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>.debug_loclists</code> offset at the given <code>base</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over the <code>LocationListEntry</code>s starting at the given …\nSimilar to <code>locations</code>, but with special handling for .dwo …\nCall <code>Reader::lookup_offset_id</code> for each section, and return …\nConstruct a new <code>DebugLoc</code> instance from the data in the …\nConstruct a new <code>DebugLocLists</code> instance from the data in …\nConstruct a new <code>LocationLists</code> instance from the data in …\nConstruct a <code>RawLocListIter</code>.\nConstruct a <code>LocListIter</code>.\nAdvance the iterator to the next location.\nAdvance the iterator to the next location.\nParse a location list entry from <code>.debug_loclists</code>\nThe address range that this location is valid for.\nIterate over the raw <code>LocationListEntry</code>s starting at the …\nSimilar to <code>raw_locations</code>, but with special handling for …\nbase address\nbase address\nStart of range. May be an address or an offset.\nstart of range\nstart of range\nstart of range\nstart of range\nstart of range\nexpression\nexpression\nexpression\nexpression\nexpression\nexpression\nexpression\nEnd of range. May be an address or an offset.\nend of range\nend of range\nend of range\nlength of range\nlength of range\nThe type of the produced entry.\nThe type of the produced header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdvance the iterator and return the next entry.\nParse a single entry from <code>input</code>. Returns either a parsed …\nParse a single pubthing. Return <code>None</code> for the null …\nParse a header from <code>input</code>. Returns a tuple of <code>input</code> sliced …\nParse an pubthings set header. Returns a tuple of the …\nTake the absolute value of the top of the stack.\nRelocate the address if needed, and push it on the stack.\nThe piece is found in memory.\nRead the address at the given index in `.debug_addr, …\nBitwise <code>and</code> of the top two values on the stack.\nBranch to the target location if the top of stack is …\nThe piece is represented by some constant bytes.\nEvaluate a DWARF expression as a subroutine.  The …\nCompute the call frame CFA and push it on the stack.\nThe <code>Evaluation</code> is complete, and <code>Evaluation::result()</code> can …\nRead the address at the given index in `.debug_addr, and …\nPop the top stack entry, convert it to a different type, …\nA section-relative reference.\nDereference the topmost value of the stack.\nA reference to a DIE, either relative to the current CU or …\nDivide the top two values on the stack.\nDrop an item from the stack.\nThe piece is empty.  Ordinarily this means the piece has …\nEvaluate an expression at the entry to the current …\nCompare the top two stack values for equality.\nA DWARF expression evaluator.\nThe state of an <code>Evaluation</code> after evaluating a DWARF …\nSpecification of what storage should be used for <code>Evaluation</code>…\nThe bytecode for a DWARF expression or location …\nThe storage used for the expression stack.\nCompute the frame base (using <code>DW_AT_frame_base</code>), add the …\nCompare the top two stack values using <code>&gt;=</code>.\nCompare the top two stack values using <code>&gt;</code>.\nThe object is a pointer to a value which has no actual …\nThe piece is a pointer to a value which has no actual …\nThe object has no location, but has a known constant value.\nCompare the top two stack values using <code>&lt;=</code>.\nA single location of a piece of the result of a DWARF …\nCompare the top two stack values using <code>&lt;</code>.\nSubtract the top two values on the stack.\nModulus of the top two values on the stack.\nMultiply the top two values on the stack.\nCompare the top two stack values using <code>!=</code>.\nNegate the top of the stack.\nNo operation.\nBitwise <code>not</code> of the top of the stack.\nA single decoded DWARF expression operation.\nAn iterator for the operations in an expression.\nBitwise <code>or</code> of the top two values on the stack.\nThis represents a parameter that was optimized out.\nPick an item from the stack and push it on top of the …\nThe description of a single piece of the result of a DWARF …\nTerminate a piece.\nAdd the top two values on the stack.\nAdd a constant to the topmost value on the stack.\nPush the object address on the stack.\nIndicate that this piece’s location is in the given …\nThe piece is found in a register.\nFind the value of the given register, add the offset, and …\nPop the top stack entry, reinterpret the bits in its value …\nThe <code>Evaluation</code> needs the DWARF expression at the given …\nThe <code>Evaluation</code> needs the <code>ValueType</code> for the base type DIE at\nThe <code>Evaluation</code> needs the CFA to proceed further.  Once the …\nThe <code>Evaluation</code> needs the value produced by evaluating a …\nThe <code>Evaluation</code> needs the frame base address to proceed …\nThe <code>Evaluation</code> needs an address from the <code>.debug_addr</code> …\nThe <code>Evaluation</code> needs a value from memory to proceed …\nThe <code>Evaluation</code> needs the value of the parameter at the …\nThe <code>Evaluation</code> needs a value from a register to proceed …\nThe <code>Evaluation</code> needs an address to be relocated to proceed …\nThe <code>Evaluation</code> needs a value from TLS to proceed further.  …\nThe storage used for the results.\nRotate the top three stack items.\nLogical left shift of the 2nd value on the stack by the …\nRight shift of the 2nd value on the stack by the number of …\nArithmetic left shift of the 2nd value on the stack by the …\nPush a signed constant value on the stack.  This handles …\nUnconditional branch to the target location.\nThe storage used for the evaluation stack.\nThe object has no location, but its value is at the top of …\nSwap the top two stack items.\nCompute the address of a thread-local variable and push it …\nInterpret the value bytes as a constant of a given type, …\nA CU-relative reference.\nPush an unsigned constant value on the stack.  This …\nThe piece has no location but its value is known.\nThe index of a global.\nThe index of a local in the currently executing function.\nThe index of an item on the operand stack.\nBitwise <code>xor</code> of the top two values on the stack.\nGet the result of this <code>Evaluation</code>.\nIf given, the bit offset of the piece within the location. …\nEvaluate a DWARF expression.  This method should only ever …\nCreate an evaluation for this expression.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the piece is empty.\nWhere this piece is to be found.\nCreate a new DWARF expression evaluator.\nCreate a new DWARF expression evaluator.\nRead the next operation in an expression.\nReturn the current byte offset of the iterator.\nReturn an iterator for the operations in the expression.\nParse a single DWARF expression operation.\nGet the result of this <code>Evaluation</code>.\nResume the <code>Evaluation</code> with the provided <code>bytes</code>.  This will …\nResume the <code>Evaluation</code> with the provided <code>base_type</code>.  This …\nResume the <code>Evaluation</code> with the provided <code>cfa</code>.  This will …\nResume the <code>Evaluation</code> with the provided <code>entry_value</code>.  This …\nResume the <code>Evaluation</code> with the provided <code>frame_base</code>.  This …\nResume the <code>Evaluation</code> with the provided indexed <code>address</code>.  …\nResume the <code>Evaluation</code> with the provided memory <code>value</code>.  …\nResume the <code>Evaluation</code> with the provided <code>parameter_value</code>.  …\nResume the <code>Evaluation</code> with the provided <code>register</code> value.  …\nResume the <code>Evaluation</code> with the provided relocated <code>address</code>. …\nResume the <code>Evaluation</code> with the provided <code>value</code>.  This will …\nSet an initial value to be pushed on the DWARF expression …\nSet the maximum number of iterations to be allowed by the …\nSet the enclosing object’s address, as used by …\nIf given, the size of the piece in bits.  If <code>None</code>, there …\nGet the result if this is an evaluation for a value.\nThe address of the value required.\nThe DIE of the base type or 0 to indicate the generic type\nThe DIE of the base type or 0 to indicate the generic type\nThe index of the address in the <code>.debug_addr</code> section, …\nThe register number.\nWhether the address also needs to be relocated.\nThe size of the value required. This is guaranteed to be …\nIf not <code>None</code>, a target-specific address space value.\nThe address.\nThe byte offset into the value that the implicit pointer …\nThe register number.\nThe value.\nThe value.\nThe <code>.debug_info</code> offset of the value that this is an …\nThe offset to add.\nThe DIE of the base type or 0 to indicate the generic type\nThe DIE of the base type or 0 to indicate the generic type\nThe DIE of the base type.\nThe DIE of the base type.\nThe DIE of the base type.\nThe bit offset of this piece.  If <code>None</code>, then this piece …\nThe byte offset into the value that the implicit pointer …\nThe implicit value to use.\nThe expression to be evaluated.\nThe index, from the top of the stack, of the item to copy.\nThe index of the address in <code>.debug_addr</code>.\nThe index of the address in <code>.debug_addr</code>.\nThe index of the local.\nThe index of the global.\nThe index of the stack item. 0 is the bottom of the …\nThe offset to add.\nThe offset to add.\nThe DIE to use.\nThe DIE to use.\nThe register number.\nThe register number.\nThe size of the data to dereference.\nThe size of this piece in bits.\nTrue if the dereference operation takes an address space …\nThe relative offset to the target bytecode.\nThe relative offset to the target bytecode.\nThe value to add.\nThe value to push.\nThe value to push.\nThe <code>.debug_info</code> offset of the value that this is an …\nThe value bytes.\nThe <code>DebugPubNames</code> struct represents the DWARF public names …\nA single parsed pubname.\nAn iterator over the pubnames from a <code>.debug_pubnames</code> …\nReturns the offset into the compilation unit for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate the pubnames in the <code>.debug_pubnames</code> section.\nReturns the name this entry refers to.\nConstruct a new <code>DebugPubNames</code> instance from the data in …\nAdvance the iterator and return the next pubname.\nReturns the offset into the .debug_info section for the …\nThe <code>DebugPubTypes</code> struct represents the DWARF public types …\nA single parsed pubtype.\nAn iterator over the pubtypes from a <code>.debug_pubtypes</code> …\nReturns the offset into the compilation unit for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate the pubtypes in the <code>.debug_pubtypes</code> section.\nReturns the name of the type this entry refers to.\nConstruct a new <code>DebugPubTypes</code> instance from the data in …\nAdvance the iterator and return the next pubtype.\nReturns the offset into the .debug_info section for the …\nThe endianity of bytes that are read.\nThe type used for offsets and lengths.\nA trait for reading the data from a DWARF section.\nA trait for addresses within a DWARF section.\nA trait for offsets with a DWARF section.\nAn identifier for an offset within a section reader.\nAdd a length to an address of the given size.\nChecked subtraction. Computes <code>self - other</code>.\nSet the number of bytes remaining to zero.\nReturn the endianity of bytes that are read.\nFind the index of the first occurrence of the given byte. …\nReturns the argument unchanged.\nConvert an i16 to an offset.\nConvert a u16 to an offset.\nConvert a u32 to an offset.\nConvert a u64 to an offset.\nConvert a u8 to an offset.\nCalls <code>U::from(self)</code>.\nConvert an offset to a u64.\nReturn true if the number of bytes remaining is zero.\nReturn true if the number of bytes remaining is zero.\nReturn the number of bytes remaining.\nReturn the offset corresponding to the given <code>id</code> if it is …\nReturn the offset of this reader’s data relative to the …\nReturn an identifier for the current reader offset.\nThe all-ones value of an address of the given size.\nRead an address-sized integer, and return it as a <code>u64</code>.\nRead an address-sized integer, and return it as a <code>u64</code>.\nRead a byte and validate it as an address size.\nRead a byte and validate it as an address size.\nRead a f32.\nRead a f32.\nRead a f64.\nRead a f64.\nRead an i16.\nRead an i16.\nRead an i32.\nRead an i32.\nRead an i64.\nRead an i64.\nRead an i8.\nRead an i8.\nRead an initial length field.\nRead an initial length field.\nParse a word-sized section length according to the DWARF …\nParse a word-sized section length according to the DWARF …\nRead a null-terminated slice, and return it (excluding the …\nRead a null-terminated slice, and return it (excluding the …\nParse a word-sized section offset according to the DWARF …\nParse a word-sized section offset according to the DWARF …\nParse a section offset of the given size.\nParse a section offset of the given size.\nRead a signed LEB128 encoded integer.\nRead a signed LEB128 encoded integer.\nRead exactly <code>buf.len()</code> bytes into <code>buf</code>.\nRead a u16.\nRead a u16.\nRead a u32.\nRead a u32.\nRead a u64.\nRead a u64.\nRead a u8.\nRead a u8.\nRead a u8 array.\nRead a u8 array.\nRead an unsigned n-bytes integer u64.\nRead an unsigned n-bytes integer u64.\nRead an unsigned LEB128 encoded integer.\nRead an unsigned LEB128 encoded integer.\nRead an unsigned LEB128 encoded u16.\nRead an unsigned LEB128 encoded u16.\nRead an unsigned LEB128 encoded u32.\nRead an unsigned LEB128 encoded u32.\nParse a word-sized integer according to the DWARF format.\nParse a word-sized integer according to the DWARF format.\nDiscard the specified number of bytes.\nSkip a LEB128 encoded integer.\nSkip a LEB128 encoded integer.\nSplit a reader in two.\nReturn all remaining data as a clone-on-write slice.\nConvert all remaining data to a clone-on-write string.\nConvert all remaining data to a clone-on-write string, …\nSet the number of bytes remaining to the specified length.\nWrapping (modular) addition. Computes <code>self + other</code>.\nAdd a length to an address of the given size.\nTrait for relocating addresses and offsets while reading a …\nA <code>Reader</code> which applies relocations to addresses and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>RelocateReader</code> which applies relocations to …\nRelocate an address which was read from the given section …\nRelocate a value which was read from the given section …\nA range from DWARF version &lt;= 4.\nThe bare range list format used before DWARF 5.\nDW_RLE_base_address\nDW_RLE_base_addressx\nThe raw contents of the <code>.debug_ranges</code> section.\nThe <code>DebugRngLists</code> struct represents the contents of the …\nDW_RLE_offset_pair\nAn address range from the <code>.debug_ranges</code>, <code>.debug_rnglists</code>, …\nThe DWARF data found in <code>.debug_ranges</code> and <code>.debug_rnglists</code> …\nA raw address range from the <code>.debug_ranges</code> section.\nA raw entry in .debug_rnglists\nA raw iterator over an address range list.\nThe DW_RLE encoded range list format used in DWARF 5.\nAn iterator over an address range list.\nDW_RLE_start_end\nDW_RLE_start_length\nDW_RLE_startx_endx\nDW_RLE_startx_length\nAdd a base address to this range.\nThe beginning address of the range.\nThe beginning address of the range.\nCreate a <code>DebugRanges</code> section that references the data in …\nCreate a <code>DebugRngLists</code> section that references the data in …\nCreate a <code>RangeLists</code> that references the data in <code>self</code>.\nReturn the <code>.debug_ranges</code> section.\nReturn the <code>.debug_rnglists</code> section.\nThe first address past the end of the range.\nThe first address past the end of the range.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>.debug_rnglists</code> offset at the given <code>base</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this is a base address selection entry.\nCheck if this is a range end entry.\nCall <code>Reader::lookup_offset_id</code> for each section, and return …\nConstruct a new <code>DebugRanges</code> instance from the data in the …\nConstruct a new <code>DebugRngLists</code> instance from the data in the\nConstruct a new <code>RangeLists</code> instance from the data in the …\nConstruct a <code>RawRngListIter</code>.\nConstruct a <code>RngListIter</code>.\nAdvance the iterator to the next range.\nAdvance the iterator to the next range.\nParse a range entry from <code>.debug_rnglists</code>\nParse an address range entry from <code>.debug_ranges</code> or …\nIterate over the <code>Range</code> list entries starting at the given …\nIterate over the <code>RawRngListEntry</code>ies starting at the given …\nReplace the <code>.debug_ranges</code> section.\nbase address\nbase address\nStart of range. May be an address or an offset.\nstart of range\nstart of range\nstart of range\nstart of range\nstart of range\nEnd of range. May be an address or an offset.\nend of range\nend of range\nend of range\nlength of range\nlength of range\nThe <code>DebugLineStr</code> struct represents the DWARF strings found …\nThe <code>DebugStr</code> struct represents the DWARF strings found in …\nThe raw contents of the <code>.debug_str_offsets</code> section.\nCreate a <code>DebugStr</code> section that references the data in <code>self</code>.\nCreate a <code>DebugStrOffsets</code> section that references the data …\nCreate a <code>DebugLineStr</code> section that references the data in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLookup a string from the <code>.debug_str</code> section by …\nLookup a string from the <code>.debug_line_str</code> section by …\nReturns the <code>.debug_str</code> offset at the given <code>base</code> and <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>DebugStr</code> instance from the data in the …\nConstruct a new <code>DebugLineStr</code> instance from the data in the …\nThe value of a <code>DW_AT_accessibility</code> attribute.\n“Refers to some location in the address space of the …\nThe value of a <code>DW_AT_address_class</code> attribute.\nAn attribute in a <code>DebuggingInformationEntry</code>, consisting of …\nThe value of an attribute in a <code>DebuggingInformationEntry</code>.\nAn iterator over a particular entry’s attributes.\nA slice of an arbitrary number of bytes.\nThe value of a <code>DW_AT_calling_convention</code> attribute.\nIn DWARF5, a unit with type <code>DW_UT_compile</code>. In previous …\nA one byte constant data value. How to interpret the byte …\nA two byte constant data value. How to interpret the bytes …\nA four byte constant data value. How to interpret the …\nAn eight byte constant data value. How to interpret the …\nAn offset to a set of addresses in the <code>.debug_addr</code> section.\nAn index into a set of addresses in the <code>.debug_addr</code> …\nThe <code>DebugInfo</code> struct represents the DWARF debugging …\nAn offset into the current <code>.debug_info</code> section, but …\nAn offset into the <code>.debug_info</code> section of the …\nAn iterator over the units of a .debug_info section.\nAn offset into the <code>.debug_line</code> section.\nAn offset into the <code>.debug_line_str</code> section.\nAn offset to a set of offsets in the <code>.debug_loclists</code> …\nAn index into a set of offsets in the <code>.debug_loclists</code> …\nAn offset into the <code>.debug_macinfo</code> section.\nAn offset into the <code>.debug_macro</code> section.\nAn offset to a set of offsets in the <code>.debug_rnglists</code> …\nAn index into a set of offsets in the <code>.debug_rnglists</code> …\nAn offset to a set of entries in the <code>.debug_str_offsets</code> …\nAn index into a set of entries in the <code>.debug_str_offsets</code> …\nAn offset into the <code>.debug_str</code> section.\nAn offset into the <code>.debug_str</code> section of the supplementary …\nThe <code>DebugTypes</code> struct represents the DWARF type information\nA type signature.\nAn iterator over the type-units of this <code>.debug_types</code> …\nA Debugging Information Entry (DIE).\nThe value of a <code>DW_AT_decimal_sign</code> attribute.\nAn implementation-defined identifier uniquely identifying …\nThe value of a <code>DW_AT_encoding</code> attribute.\nThe value of a <code>DW_AT_endianity</code> attribute.\nA cursor into the Debugging Information Entries tree for a …\nA raw reader of the data that defines the Debugging …\nThe state information for a tree view of the Debugging …\nAn iterator that allows traversal of the children of an …\nA node in the Debugging Information Entry tree.\n“The information bytes contain a DWARF expression (see …\nAn index into the filename entries from the line number …\nA boolean that indicates presence or absence of the …\nThe value of a <code>DW_AT_identifier_case</code> attribute.\nThe value of a <code>DW_AT_inline</code> attribute.\nThe value of a <code>DW_AT_language</code> attribute.\nAn offset into either the <code>.debug_loc</code> section or the …\nThe value of a <code>DW_AT_ordering</code> attribute.\nA unit with type <code>DW_UT_partial</code>. The root DIE of this unit …\nAn offset into the <code>.debug_ranges</code> section.\nA signed integer constant.\nAn offset into another section. Which section this is an …\nA unit with type <code>DW_UT_skeleton</code>. The enclosed dwo_id can …\nA unit with type <code>DW_UT_split_compile</code>. The enclosed dwo_id …\nA unit with type <code>DW_UT_split_type</code>. A split type unit is …\nA slice of bytes representing a string. Does not include a …\nIn DWARF5, a unit with type <code>DW_UT_type</code>. In DWARF4, any …\nAn unsigned integer constant.\nThe common fields for the headers of compilation units and …\nAn offset into the current compilation unit.\nThis enum specifies the type of the unit and any type …\nThe value of a <code>DW_AT_virtuality</code> attribute.\nThe value of a <code>DW_AT_visibility</code> attribute.\nParse this unit’s abbreviations.\nThe size of addresses (in bytes) in this compilation unit.\nReturn the input buffer after the last attribute.\nFind the first attribute in this entry which has the given …\nFind the first attribute in this entry which has the given …\nFind the first attribute in this entry which has the given …\nIterate over this entry’s set of attributes.\nCreate a <code>DebugInfo</code> section that references the data in <code>self</code>…\nCreate a <code>DebugTypes</code> section that references the data in …\nCreate an iterator for the children of the current entry.\nGet this entry’s code.\nGet a reference to the entry that the cursor is currently …\nThe offset into the <code>.debug_abbrev</code> section for this …\nReturn the encoding parameters for this unit.\nNavigate this unit’s <code>DebuggingInformationEntry</code>s.\nNavigate this compilation unit’s …\nRead the raw data that defines the Debugging Information …\nNavigate this unit’s <code>DebuggingInformationEntry</code>s as a tree\nRead the <code>DebuggingInformationEntry</code> at the given offset.\nReturns the current entry in the tree.\nTry to convert this attribute’s value to an expression …\nTry to convert this attribute’s value to an expression …\nWhether this compilation unit is encoded in 64- or 32-bit …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn true if this entry’s type can have children, …\nGet the UnitHeader located at offset from this .debug_info …\nThe serialized size of the header for this compilation …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if there is no more input.\nGet the length of the debugging info for this compilation …\nGet this attribute’s name.\nConstruct a new <code>DebugInfo</code> instance from the data in the …\nConstruct a new <code>UnitHeader</code>.\nConstruct a new <code>DebuggingInformationEntry</code>.\nConstruct a new <code>DebugTypes</code> instance from the data in the …\nAdvance the iterator to the next unit header.\nAdvance the iterator and return the next attribute.\nMove the cursor to the next entry at the specified depth.\nReturns an <code>EntriesTreeNode</code> for the next child entry.\nAdvance the iterator to the next type unit header.\nReturn the depth of the next entry.\nMove the cursor to the next DIE in the tree in DFS order.\nMove the cursor to the next DIE in the tree.\nReturn the unit offset at which the reader will read next.\nMove the cursor to the next sibling DIE of the current one.\nGet the offset of this unit within its section.\nGet this entry’s offset.\nTry to convert this attribute’s value to an offset.\nTry to convert this attribute’s value to an offset.\nParse an entry. Returns <code>Ok(None)</code> for null entries.\nParse the <code>debug_abbrev_offset</code> in the compilation unit …\nParse the <code>debug_info_offset</code> in the arange header.\nParse a dwo_id from a header\nParse a type unit header’s type offset.\nParse a type unit header’s unique type signature. …\nParse a unit header.\nParse the unit type from the unit header.\nGet the underlying bytes for the supplied range.\nGet the underlying bytes for the supplied range.\nGet the underlying bytes for the supplied range.\nGet this attribute’s raw value.\nRead an abbreviation code and lookup the corresponding …\nRead an attribute.\nReturns the root node of the tree.\nTry to convert this attribute’s value to a signed …\nTry to convert this attribute’s value to a signed …\nUse the <code>DW_AT_sibling</code> attribute to find the input buffer …\nReturn the serialized size of the common unit header for …\nSkip all the attributes of an abbreviation.\nTry to return this attribute’s value as a string slice.\nTry to return this attribute’s value as a string slice.\nTry to return this attribute’s value as a string slice.\nTry to return this attribute’s value as a string slice.\nGet this entry’s <code>DW_TAG_whatever</code> tag.\nGet the UnitType of this unit.\nTry to convert this attribute’s value to a u16.\nTry to convert this attribute’s value to a u16.\nTry to convert this attribute’s value to a u8.\nTry to convert this attribute’s value to a u8.\nTry to convert this attribute’s value to an unsigned …\nTry to convert this attribute’s value to an unsigned …\nGet the length of the debugging info for this compilation …\nIterate the units in this <code>.debug_info</code> section.\nIterate the type-units in this <code>.debug_types</code> section.\nGet this attribute’s normalized value.\nGet the DWARF version of the debugging info for this …\nThe offset within this type unit where the type is defined.\nThe offset within this type unit where the type is defined.\nThe unique type signature for this type unit.\nThe unique type signature for this type unit.\nMarker trait for types that can be used as backing storage …\nType of the elements being stored.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n32-bit floating point type.\nA 32-bit floating point value.\n64-bit floating point type.\nA 64-bit floating point value.\nThe generic type, which is address-sized and of …\nA generic value, which is address-sized and of unspecified …\nSigned 16-bit integer type.\nA signed 16-bit integer value.\nSigned 32-bit integer type.\nA signed 32-bit integer value.\nSigned 64-bit integer type.\nA signed 64-bit integer value.\nSigned 8-bit integer type.\nA signed 8-bit integer value.\nUnsigned 16-bit integer type.\nAn unsigned 16-bit integer value.\nUnsigned 32-bit integer type.\nAn unsigned 32-bit integer value.\nUnsigned 64-bit integer type.\nAn unsigned 64-bit integer value.\nUnsigned 8-bit integer type.\nAn unsigned 8-bit integer value.\nThe value of an entry on the DWARF stack.\nThe type of an entry on the DWARF stack.\nPerform an absolute value operation.\nPerform an addition operation.\nPerform a bitwise and operation.\nThe size in bits of a value for this type.\nConvert a <code>Value</code> to the given <code>value_type</code>.\nPerform a division operation.\nPerform the <code>==</code> relational operation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>ValueType</code> from the attributes of a base type …\nConstruct a <code>ValueType</code> from a base type DIE.\nCreate a <code>Value</code> with the given <code>value_type</code> from a <code>f32</code> value.\nCreate a <code>Value</code> with the given <code>value_type</code> from a <code>f64</code> value.\nCreate a <code>Value</code> with the given <code>value_type</code> from a <code>u64</code> value.\nPerform the <code>&gt;=</code> relational operation.\nPerform the <code>&gt;</code> relational operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform the `&lt;= relational operation.\nPerform the `&lt; relational operation.\nPerform a multiplication operation.\nPerform the `!= relational operation.\nPerform a negation operation.\nPerform a bitwise not operation.\nPerform a bitwise or operation.\nRead a <code>Value</code> with the given <code>value_type</code> from a <code>Reader</code>.\nReinterpret the bits in a <code>Value</code> as the given <code>value_type</code>.\nPerform a remainder operation.\nConvert value to bit length suitable for a shift operation.\nPerform a shift left operation.\nPerform a logical shift right operation.\nPerform an arithmetic shift right operation.\nConvert a u64 to an i64, with sign extension if required.\nPerform a subtraction operation.\nConvert a <code>Value</code> to a <code>u64</code>.\nReturn the <code>ValueType</code> corresponding to this <code>Value</code>.\nPerform a bitwise exclusive-or operation.")