searchState.loadedDescShard("h2", 0, "An asynchronous, HTTP/2 server and client implementation.\nRepresents HTTP/2 operation errors.\nA handle to release window capacity to a remote stream.\nSent via <code>PingPong</code> to send a PING frame to a peer.\nA handle to send and receive PING frames with the peer.\nReceived via <code>PingPong</code> when a peer acknowledges a <code>Ping</code>.\nHTTP/2 error codes.\nReceives the body stream and trailers from the remote peer.\nSends the body stream and trailers to the remote peer.\nA stream identifier, as described in Section 5.1.1 of RFC …\nClient implementation of the HTTP/2 protocol.\nExtensions specific to the HTTP/2 protocol.\nServer implementation of the HTTP/2 protocol.\nBuilds client connections with custom configuration values.\nManages all state associated with an HTTP/2 client …\nA pushed response and corresponding request headers\nA stream of pushed responses and corresponding promised …\nA future of a pushed HTTP response.\nReturns a <code>SendRequest</code> instance once it is ready to send at …\nA future of an HTTP response.\nInitializes new HTTP/2 streams on a connection by sending …\nEnables or disables server push promises.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new configured HTTP/2 client with default …\nCreates a new configured HTTP/2 client backed by <code>io</code>.\nSets the header table size.\nIndicates the initial window size (in octets) for …\nSets the initial maximum of locally initiated (send) …\nInitial maximum number of locally initiated (send) streams.\nInitial target window size for new connections.\nIndicates the initial window size (in octets) for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the push promise’s request …\nReturns whether the extended CONNECT protocol is enabled …\nMaximum number of locally reset streams due to protocol …\nReturns the maximum number of concurrent streams that may …\nSets the maximum number of concurrent locally reset …\nReturns the maximum number of concurrent streams that may …\nSets the maximum number of concurrent streams.\nIndicates the size (in octets) of the largest HTTP/2 frame …\nSets the max size of received header frames.\nSets the maximum number of local resets due to protocol …\nSets the maximum number of pending-accept remotely-reset …\nSets the maximum send buffer size per stream.\nMaximum amount of bytes to “buffer” for writing per …\nReturns a new client builder instance initialized with …\nMaximum number of remotely reset streams to allow in the …\nTakes a <code>PingPong</code> instance from the connection.\nReturns <code>Ready</code> when the connection can initialize a new …\nGet the next <code>PushPromise</code>.\nReturns a stream of PushPromises\nConsumes <code>self</code>, returning a future that returns <code>self</code> back …\nReturns a reference to the push promise’s request …\nThe request headers\nReturns a mutable reference to the push promise’s …\nSets the duration to remember locally reset streams.\nTime to keep locally reset streams around before reaping.\nMaximum number of locally reset streams to keep at a time.\nThe pushed response\nSends a HTTP/2 request to the server.\nSet a new <code>INITIAL_WINDOW_SIZE</code> setting (in octets) for …\nSets the target window size for the whole connection.\nInitial <code>Settings</code> frame to send as part of the handshake.\nReturns the stream ID of the response stream.\nReturns the stream ID of the response stream.\nThe stream ID of the first (lowest) stream. Subsequent …\nBuffer a frame.\nFlush buffered data to the wire\nReturns the argument unchanged.\nGet a mutable reference to the inner stream.\nCalls <code>U::from(self)</code>.\nReturns the max frame size that can be sent to the peer.\nReturns a new <code>Codec</code> with the default max frame size\nFlush buffered data to the wire\nReturns <code>Ready</code> when the codec can buffer a frame\nReturns <code>Ready</code> when the codec can buffer a frame\nUpdates the max received frame size.\nSet the max header list size that can be received.\nSet the peer’s max frame size.\nSet the decoder header table size size.\nSet the peer’s header table size size.\nShutdown the send half\nTakes the data payload value that was fully written to the …\nReturns a new <code>Codec</code> with the given maximum frame size\nThe stream ID is no longer accepting frames.\nIllegal headers, such as connection-specific headers.\nRequest submitted with relative URI.\nThe stream ID space is overflowed.\nThe payload size is too big\nTries to send push promise to peer who has disabled server …\nCalls <code>SendResponse::poll_reset</code> after having called …\nThe application attempted to initiate too many streams to …\nThe released capacity is larger than claimed capacity.\nErrors caused by sending a message\nCalls <code>PingPong::send_ping</code> before receiving a pong.\nTries to update local SETTINGS while ACK has not been …\nThe stream is not currently expecting a frame of this type.\nErrors caused by users of the library\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPartially loaded headers frame\nPartial header payload\nDecodes a frame.\nEmpty frame\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current max frame size setting\nUpdate the header table size setting.\nUpdates the max frame size setting.\nUpdate the max header list size setting.\nChain payloads bigger than this when vectored I/O is …\nChain payloads bigger than this when vectored I/O is <strong>not</strong> …\nInitialize the connection with this amount of write buffer.\nWrite buffer\nBuffer a frame.\nChain payloads bigger than this.\nFlush buffered data to the wire\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHPACK encoder\nUpstream <code>AsyncWrite</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast data frame\nReturns the max frame size that can be sent\nMax frame size, this is specified by the peer\nMin buffer required to attempt to write a frame\nNext frame to encode\nReturns <code>Ready</code> when <code>send</code> is able to accept a frame\nSet the peer’s header table size.\nSet the peer’s max frame size.\nClose the codec\nRetrieve the last data frame that has been sent\nRepresents HTTP/2 operation errors.\nA GO_AWAY frame was received or sent.\nAn <code>io::Error</code> occurred while trying to read or write.\nThe user created an error from a bare Reason.\nA RST_STREAM frame was received or sent.\nAn error resulting from an invalid action taken by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the error if the error is an io::Error\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the error if the error is an io::Error\nReturns true if the error is from a <code>GOAWAY</code>.\nReturns true if the error is an io::Error\nReturns true if the error was created by <code>h2</code>.\nReturns true if the error was received in a frame from the …\nReturns true if the error is from a <code>RST_STREAM</code>.\nIf the error was caused by the remote peer, the error …\nRepresents the <code>:protocol</code> pseudo-header used by the …\nReturns a str representation of the header.\nReturns the argument unchanged.\nConverts a static string to a protocol name.\nCalls <code>U::from(self)</code>.\nA length value other than 8 was set on a PING message.\nErrors that can occur during parsing an HTTP/2 frame.\nFailed to perform HPACK decoding\nAn invalid stream dependency ID was provided\nReceived a payload with an ACK settings frame\nThe payload length specified by the frame header was not …\nAn invalid setting value was provided\nAn invalid stream identifier was provided.\nAn invalid window update value\nA request or response is malformed.\nThe padding length was larger than the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA helper macro that unpacks a sequence of 4 bytes found in …\nData frame\nEncode the data frame into the <code>dst</code> buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code> and returns the frame’s payload.\nGets the value of the <code>END_STREAM</code> flag for this frame.\nCreates a new DATA frame.\nReturns a reference to this frame’s payload.\nReturns a mutable reference to this frame’s payload.\nSets the value for the <code>END_STREAM</code> flag on this frame.\nReturns the stream identifier that this frame is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse an HTTP/2 frame header\nHeader frame\nCalculates the size of the currently decoded header list.\nReturns a <code>HeadersFlag</code> value with <code>END_HEADERS</code> set.\nReturns a <code>PushPromiseFlag</code> value with <code>END_HEADERS</code> set.\nPrecomputed size of all of our header fields, for perf …\nHeader fields\nThe decoded header fields\nThe associated flags\nThe associated flags\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe header block fragment\nThe header block fragment\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code>, returning the parts of the frame\nWhether it has status 1xx\nWhether it has status 1xx\nSet to true if decoding went over the max header list size.\nLoads the header frame but doesn’t actually do HPACK …\nLoads the push promise frame but doesn’t actually do …\nCreate a new HEADERS frame\nThe ID of the stream being reserved by this PushPromise.\nPseudo headers\nPseudo headers, these are broken out as they must be sent …\nThe stream dependency information, if any.\nThe ID of the stream with which this frame is associated.\nThe ID of the stream with which this frame is associated.\nStream ID of continuation frame\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilds a <code>Ping</code> frame from a raw frame.\nThe ID of the stream dependency target\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the stream dependency is exclusive.\nThe weight for the stream. The value exposed (and set) …\nUsed by the endpoint to indicate that the stream is no …\nThe endpoint is unable to maintain the header compression …\nThe connection established in response to a CONNECT …\nThe endpoint detected that its peer is exhibiting a …\nThe endpoint detected that its peer violated the …\nThe endpoint received a frame with an invalid size.\nThe endpoint requires that HTTP/1.1 be used instead of …\nThe underlying transport has properties that do not meet …\nThe endpoint encountered an unexpected internal error.\nThe associated condition is not a result of an error.\nThe endpoint detected an unspecific protocol error.\nThe endpoint refused the stream prior to performing any …\nHTTP/2 error codes.\nThe endpoint sent a SETTINGS frame but did not receive a …\nThe endpoint received a frame after a stream was …\nGet a string description of the error code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe default value of SETTINGS_INITIAL_WINDOW_SIZE\nThe default value of MAX_FRAME_SIZE\nThe default value of SETTINGS_HEADER_TABLE_SIZE\nINITIAL_WINDOW_SIZE upper bound\nMAX_FRAME_SIZE upper bound\nAn enum that lists all valid settings that can be sent in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Setting</code> with the correct variant …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Setting</code> by parsing the given buffer of 6 …\nThe maximum allowed stream ID.\nA stream identifier, as described in Section 5.1.1 of RFC …\nStream ID 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this stream ID corresponds to a stream that\nReturns true if this stream ID corresponds to a stream that\nReturns true if this stream ID is zero.\nReturns the next stream ID initiated by the same peer as …\nParse the stream ID\nReturn a new <code>StreamId</code> for stream 0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStrip padding from the given payload.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilds a <code>WindowUpdate</code> frame from a raw frame.\nDecodes headers using HPACK\nRepresents all errors that can be encountered while …\nIndexed header field representation\nLiteral Header Field Never Indexed\nLiteral Header Field with Incremental Indexing\nLiteral Header Field without Indexing\nDynamic Table Size Update\nDecodes the headers found in the given buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the entry located at the given index.\nGet an entry from the static table\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Decoder</code> with all settings set to default …\nQueues a potential size update\nEncode a set of headers into the provide buffer\nEncode an integer into the given destination buffer\nReturns true if the in the int can be fully encoded in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQueues a max size update.\nHTTP/2 Header\nThe header field name\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the header name\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHPACK encoder table\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex the header in the HPACK table.\nChecks the static table for the header. If found, returns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the header stored in the table\nIn a closed state\nThe codec must be flushed\nAn H2 connection\nCurrently open in a sane state\nClient or server\nRead / write frame values\nAn error to report back once complete.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPending GOAWAY frames to write.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the maximum number of concurrent streams that may …\nReturns the maximum number of concurrent streams that may …\nCloses the connection by transitioning to a GOAWAY state …\nPing/pong handler\nAdvances the internal state of the connection.\nSend any pending GOAWAY frames.\nReturns <code>Ready</code> when the connection is ready to receive a …\nSend a new SETTINGS frame with extended CONNECT protocol …\nSend a new SETTINGS frame with an updated initial window …\nconnection flow control\nConnection settings\nA <code>tracing</code> span tracking the lifetime of the connection.\nTracks the connection level state transitions.\nStream state handler\nEither an H2 reason  or an I/O error\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nManages our sending of GOAWAY frames.\nKeeps a memory of any GOAWAY frames we’ve sent before.\nWhether the connection should close now, or wait until …\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnqueue a GOAWAY frame to be written.\nReturns the going away info, if any.\nRecords if we’ve sent any GOAWAY before.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn if a GOAWAY has ever been scheduled.\nWhether the user started the GOAWAY by calling …\nStores the highest stream ID of a GOAWAY that has been …\nA GOAWAY frame that must be buffered in the Codec …\nRecords the error code of any GOAWAY frame sent.\nTry to write a pending GOAWAY frame to the buffer.\nReturns if the connection should close now, or wait until …\nReturns if the connection should be closed when idle.\nA dynamic representation of <code>Peer</code>.\nEither a Client or a Server\nMessage type polled from the transport\nReturns true if the remote peer can initiate a stream with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAcknowledges ping requests from the remote.\nStatus returned from <code>PingPong::recv_ping</code>.\nThe connection is closed.\nNo user ping pending.\nUser has called <code>send_ping</code>, but PING hasn’t been written …\nUser PING has been written, waiting for PONG.\nWe’ve received user PONG, waiting for user to <code>poll_pong</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTask to wake up the main <code>Connection</code>.\nTask to wake up <code>share::PingPong::poll_pong</code>.\nProcess a ping\nSend any pending pings.\nSend any pending pongs.\nCan only be called once. If called a second time, returns …\nOur local settings are in sync with the remote.\nWe want to send these SETTINGS to the remote when the …\nWe have sent these SETTINGS and are waiting for the remote …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOur local SETTINGS sync state with the remote.\nReceived SETTINGS frame pending processing. The ACK must …\nIf extended connect protocol is enabled.\nReturns the argument unchanged.\nInitial maximum number of locally initiated streams. After …\nCalls <code>U::from(self)</code>.\nInitial window size of locally initiated streams\nMax amount of DATA bytes to buffer per stream.\nMaximum number of locally reset streams due to protocol …\nThe stream ID to start the next local stream with\nIf the local peer is willing to receive push promises\nHow long a locally reset stream should ignore frames\nMaximum number of locally reset streams to keep at a time\nInitial window size of remote initiated streams\nMaximum number of remote initiated streams\nMaximum number of remotely reset “pending accept” …\nBuffers frames for multiple streams.\nA sequence of frames in a <code>Buffer</code>\nTracks the head &amp; tail for a sequence of frames in a <code>Buffer</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if we can issue another local reset due to …\nReturns true if the receive stream concurrency can be …\nReturns true if the number of pending REMOTE reset streams …\nReturns true if the number of pending reset streams can be …\nReturns true if the send stream concurrency can be …\nReturns the argument unchanged.\nIncrements the number of concurrent receive streams.\nIncrements the number of pending REMOTE reset streams.\nIncrements the number of pending reset streams.\nIncrements the number of concurrent send streams.\nCalls <code>U::from(self)</code>.\nMaximum number of locally reset streams due to protocol …\nMaximum number of pending locally reset streams\nReturns the maximum number of streams that can be …\nMaximum number of remote initiated streams\nMax number of “pending accept” streams that were …\nReturns the maximum number of streams that can be …\nMaximum number of locally initiated streams\nCreate a new <code>Counts</code> using the provided configuration …\nReturns true when the next opened stream will reach …\nTotal number of locally reset streams due to protocol …\nCurrent number of pending locally reset streams\nCurrent number of locally initiated streams\nCurrent number of “pending accept” streams that were …\nCurrent number of remote initiated streams\nReturns the current peer\nActing as a client or server. This allows us to track …\nRun a block of code that could potentially transition a …\nThe current capacity of a flow-controlled Window.\nReturns the window size available to the consumer\nWindow that we know about.\nDecrement the recv-side window size.\nDecrement the send-side window size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if there is unavailable window capacity\nIncrease the window size.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecrements the window reflecting data has actually been …\nIf a WINDOW_UPDATE frame should be sent, returns a …\nReturns the window size as known by the peer\nWindow the peer knows about.\nThere is a <code>DATA</code> frame in flight belonging to the given …\nThere was a <code>DATA</code> frame, but the stream’s queue was since …\nThere is no <code>DATA</code> frame in flight.\nWarning\nConnection level flow control governing sent data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhat <code>DATA</code> frame is currently being sent in the codec.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStream ID of the last stream opened.\nThe maximum amount of bytes a stream should buffer.\nQueue of streams waiting for window capacity to produce …\nStreams waiting for capacity due to max concurrency\nQueue of streams waiting for socket capacity to send a …\nPush the frame to the front of the stream’s deque, …\nQueue a frame to be sent to the remote\nReclaim all capacity assigned to the stream and re-assign …\nTries to reclaim a pending data frame from the codec.\nReclaim just reserved capacity, not buffered capacity, and …\nRequest capacity to send data\nSend a data frame\nRequest capacity to send data\nHolds frames that are waiting to be read\nCalled on EOF\nAdd a locally reset stream to queue to be eventually …\nReturns true if the remote peer can reserve a stream with …\nEnsures that <code>id</code> is not in the <code>Idle</code> state.\nConnection level flow control governing received data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a connection-level error\nAmount of connection window capacity currently used by …\nReturns the initial receive window size\nInitial window size of remote initiated streams\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf extended connect protocol is enabled.\nIf push promises are allowed to be received.\nReturns the ID of the last processed stream\nThe stream ID of the last processed stream\nGet the max ID of streams we can receive.\nAny streams with a higher ID are ignored.\nThe lowest stream ID that is still idle\nUpdate state reflecting a new, remotely opened stream\nNew streams to be accepted\nLocally reset streams that should be reaped when they …\nStreams that have pending window updates\nCalled by the client to get pushed response\nCalled by the client to get the response\nTransition the stream state based on receiving headers\nHandle remote sending an explicit RST_STREAM.\nTransition the stream based on receiving trailers\nRefused StreamId, this represents a frame that must be …\nReleases capacity back to the connection &amp; stream\nRelease any unclaimed capacity for a closed stream.\nReleases capacity of the connection\nHow long locally reset streams should ignore received …\nSend connection level window update\nSend any pending refusals.\nSend stream level window update\nSet the “target” connection window size.\nCalled by the server to get the request\nA value to detect which public API has called <code>poll_reset</code>.\nManages state transitions related to outbound frames.\nCurrent available stream send capacity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the initial send window size\nInitial window size of locally initiated streams\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf extended connect protocol is enabled.\nAny streams with a higher ID are ignored.\nCreate a new <code>Send</code>\nStream identifier to use for next initialized stream.\nPrioritization layer\nRequest capacity to send data\nSend an explicit RST_STREAM frame\nThis indicates to the connection that a reset frame must …\nRepresents the state of an H2 stream\nReturns a reason if the stream has been reset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a connection-level error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true when the stream is in a state to receive …\nReturns true if the stream is already reset.\nIndicates that the remote side will not send more data to …\nOpens the receive-half of the stream when a HEADERS frame …\nThe remote explicitly sent a RST_STREAM.\nTransition from Idle -&gt; ReservedLocal\nTransition from Idle -&gt; ReservedRemote\nIndicates that the local side will not send more data to …\nOpens the send-half of a stream if it is not already open.\nSet the stream state to reset locally.\nSet the stream state to a scheduled reset.\nA linked list\nReferences an entry in the store.\n“Pointer” to an entry in the store\nStorage for streams\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the Key associated with the stream\nQueue the stream.\nQueue the stream\nRemove the stream from the store\nKeep the stream ID in the key as an ABA guard, since slab …\nRemove the StreamId -&gt; stream state association.\nState related to validating a stream’s content-length\nTracks Stream related state\nAmount of data buffered at the prioritization layer. TODO: …\nCurrent available stream send capacity\nValidate content-length headers\nReturns <code>Err</code> when the decrement cannot be completed due to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe h2 stream identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true when the consumer of the stream has dropped …\nReturns true if the stream is closed\nSet to <code>true</code> when the stream is counted against the …\nSet to true when the stream is pending accept\nSet to true when the stream is pending to be opened\nSet to true when a push is pending for this stream\nReturns true if stream is currently being held for some …\nSet to true when the stream is pending accept\nTrue if the stream is waiting for outbound connection …\nTrue if the stream is waiting to send a window update\nWhen the RecvStream drop occurs, no data should be …\nReturns true if the stream is no longer in use\nReturns true if frames for this stream are ready to be …\nNext node in the open linked list\nNext node in the accept linked list\nNext node in the accept linked list\nNext node in the linked list of streams waiting for …\nNext node in list of reset streams that should expire …\nNext node in the linked list of streams waiting to send …\nIf the capacity was limited because of the …\nThe stream’s pending push promises\nFrames pending for this stream to read\nFrames pending for this stream being sent to the socket\nReceive data flow control\nTask tracking receiving frames\nNumber of outstanding handles pointing to this stream\nDecrements the stream’s ref count\nIncrement the stream’s ref count\nAmount of send capacity that has been requested, but not …\nThe time when this stream may have been locally reset.\nSet to true when the send capacity has been incremented\nSend data flow control\nTask tracking additional send capacity (i.e. window …\nCurrent state of the stream\nFields needed to manage state related to managing the set …\nReference to the stream state that hides the send data …\nContains the buffer of frames to be written to the wire.\nReference to the stream state\nConnection level state and performs actions on streams\nReturns the stream’s current send capacity.\nClear the receive queue and set the status to no longer …\nIf the connection errors, a copy is kept for any …\nTracks send &amp; recv stream concurrency.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNotify all streams that a connection-level error happened.\nHolds most of the connection and stream related state for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalled by a client to see if the current stream is pending …\nCheck if we possibly could have processed and since …\nRequest to be notified when the stream’s capacity …\nCalled by a client to check for a pushed request.\nRequest to be notified for if a <code>RST_STREAM</code> is received for …\nCalled by a client to check for a received response.\nManages state transitions initiated by receiving frames\nThis function is safe to call multiple times.\nThe number of stream refs to this shared state.\nReleases recv capacity back to the peer. This may result …\nRequest capacity to send data\nManages state transitions initiated by sending frames\nThis is the queue of frames to be written to the wire. …\nStores stream state\nCalled by the server after the stream is accepted. Given …\nTask that calls <code>poll_complete</code>.\nBuilds server connections with custom configuration values.\nAccepts inbound HTTP/2 streams on a connection.\nState 3. Handshake is done, polling again would panic.\nFlush a Sink\nState 1. Connection is flushing pending SETTINGS frame.\nIn progress HTTP/2 connection handshake future.\nStages of an in-progress handshake.\nRead the client connection preface\nState 2. Connection is waiting for the client preface.\nSend a response to a promised request\nSend a response back to the client\nSets the connection to a GOAWAY state.\nAccept the next incoming request on this connection.\nThe config to pass to Connection::new after handshake …\nEnables the extended CONNECT protocol.\nEnables the extended CONNECT protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStarts a graceful shutdown process.\nCreates a new configured HTTP/2 server with default …\nCreates a new configured HTTP/2 server backed by <code>io</code>.\nIndicates the initial window size (in octets) for …\nInitial target window size for new connections.\nIndicates the initial window size (in octets) for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of locally reset streams due to protocol …\nReturns the maximum number of concurrent streams that may …\nSets the maximum number of concurrent locally reset …\nReturns the maximum number of concurrent streams that may …\nSets the maximum number of concurrent streams.\nIndicates the size (in octets) of the largest HTTP/2 frame …\nSets the max size of received header frames.\nSets the maximum number of local resets due to protocol …\nSets the maximum number of pending-accept remotely-reset …\nSets the maximum send buffer size per stream.\nMaximum amount of bytes to “buffer” for writing per …\nReturns a new server builder instance initialized with …\nMaximum number of remotely reset streams to allow in the …\nTakes a <code>PingPong</code> instance from the connection.\nReturns <code>Ready</code> when the underlying connection has closed.\nPolls to be notified when the client resets this stream.\nPolls to be notified when the client resets this stream.\nPush a request and response to the client\nSets the maximum number of concurrent locally reset …\nTime to keep locally reset streams around before reaping.\nMaximum number of locally reset streams to keep at a time.\nSend a stream reset to the peer.\nSend a stream reset to the peer.\nSend a response to a promised request.\nSend a response to a client request.\nSet a new <code>INITIAL_WINDOW_SIZE</code> setting (in octets) for …\nSets the target window size for the whole connection.\nInitial <code>Settings</code> frame to send as part of the handshake.\nSpan tracking the handshake\nThe current state of the handshake.\nReturns the stream ID of the response stream.\nReturns the stream ID of the response stream.\nA handle to release window capacity to a remote stream.\nSent via <code>PingPong</code> to send a PING frame to a peer.\nA handle to send and receive PING frames with the peer.\nReceived via <code>PingPong</code> when a peer acknowledges a <code>Ping</code>.\nReceives the body stream and trailers from the remote peer.\nSends the body stream and trailers to the remote peer.\nA stream identifier, as described in Section 5.1.1 of RFC …\nReturns the <code>u32</code> corresponding to this <code>StreamId</code>\nGet the current available capacity of data this stream …\nReturns the stream’s current send capacity.\nGet the next data frame.\nGet a mutable reference to this stream’s <code>FlowControl</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the receive half has reached the end of …\nCreates a new opaque <code>Ping</code> to be sent via a <code>PingPong</code>.\nSend a PING frame and wait for the peer to send the pong.\nRequests to be notified when the stream’s capacity …\nPoll for the next data frame.\nPolls to be notified when the client resets this stream.\nRelease window capacity back to remote stream.\nRequests capacity to send data.\nSends a single data frame to the remote peer.\nResets the stream.\nSends trailers to the remote peer.\nReturns the stream ID of this stream.\nReturns the stream ID of this <code>SendStream</code>.\nReturns the stream ID of the stream whose capacity will be …\nGet optional trailers for this stream.\nGet the currently <em>used</em> capacity for this stream.")