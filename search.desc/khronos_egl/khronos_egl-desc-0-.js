searchState.loadedDescShard("khronos_egl", 0, "This crate provides a binding for the Khronos EGL 1.5 API. …\nEGL API provider.\nEGL cannot access a requested resource (for example a …\nEGL failed to allocate resources for the requested …\nAn unrecognized attribute or attribute value was passed in …\nAn Config argument does not name a valid EGL frame buffer …\nAn Context argument does not name a valid EGL rendering …\nThe current surface of the calling thread is a window, …\nAn Display argument does not name a valid EGL display …\nArguments are inconsistent (for example, a valid context …\nA NativePixmapType argument does not refer to a valid …\nA NativeWindowType argument does not refer to a valid …\nOne or more argument values are invalid.\nAn Surface argument does not name a valid surface (window, …\nA power management event has occurred. The application …\nDynamic EGL API interface.\nAlias for dynamically linked instances with the latest …\nEGL version type.\nEGL version type.\nEGL version type.\nEGL version type.\nEGL version type.\nEGL version type.\nEGL errors.\nEGL API instance.\nThe provided version does not meet the requirements.\nLatest available EGL version.\nLatest available EGL version.\nSomething wrong happend while loading the library.\nEGL is not initialized, or could not be initialized, for …\nSet the current rendering API.\nDefines a two-dimensional texture image.\nCast the API.\nReturn a list of EGL frame buffer configurations that …\nReturn the first EGL frame buffer configuration that match …\nWait in the client for a sync object to be signalled.\nCopy EGL surface color buffer to a native pixmap.\nCreate a new EGL rendering context.\nCreate a new Image object.\nCreate a new EGL pixel buffer surface bound to an OpenVG …\nCreate a new EGL pixel buffer surface.\nCreate a new EGL offscreen surface.\nCreate a new EGL offscreen surface.\nCreate a new EGL on-screen rendering surface.\nCreate a new EGL sync object.\nCreate a new EGL window surface.\nDestroy an EGL rendering context.\nDestroy an Image object.\nDestroy an EGL surface.\nDestroy a sync object.\nCast the API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn information about an EGL frame buffer configuration.\nReturn the number of all frame buffer configurations.\nGet the list of all EGL frame buffer configurations for a …\nReturn the current EGL rendering context.\nReturn the display for the current EGL rendering context.\nReturn the read or draw surface for the current EGL …\nReturn an EGL display connection.\nReturn error information.\nReturn an EGL display connection.\nReturn a GL or an EGL extension function.\nReturn an attribute of a sync object.\nInitialize an EGL display connection.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying EGL library.\nReturn the underlying EGL library.\nCreate an EGL instance by finding and loading the …\nCreate an EGL instance by finding and loading the …\nCreate an EGL instance using the symbols provided by the …\nLoad the EGL API symbols from the given library.\nCreate an EGL instance by finding and loading a dynamic …\nCreate an EGL instance by finding and loading a dynamic …\nCreate an EGL instance by finding and loading the …\nCreate an EGL instance by finding and loading the …\nCreate an EGL instance by finding and loading the …\nCreate an EGL instance by finding and loading the …\nCreate an EGL instance by finding and loading the …\nCreate an EGL instance by finding and loading the …\nLoad the EGL API symbols from the given library.\nLoad the EGL API symbols from the given library.\nLoad the EGL API symbols from the given library.\nLoad the EGL API symbols from the given library.\nLoad the EGL API symbols from the given library.\nLoad the EGL API symbols from the given library.\nCreate an EGL instance by finding and loading the …\nCreate an EGL instance by finding and loading the …\nCreate an EGL instance by finding and loading the …\nCreate an EGL instance by finding and loading the …\nCreate an EGL instance by finding and loading the …\nCreate an EGL instance by finding and loading the …\nCreate an EGL instance using the symbols provided by the …\nCreate an EGL instance using the symbols provided by the …\nCreate an EGL instance using the symbols provided by the …\nCreate an EGL instance using the symbols provided by the …\nCreate an EGL instance using the symbols provided by the …\nCreate an EGL instance using the symbols provided by the …\nCreate an EGL instance by finding and loading a dynamic …\nCreate an EGL instance by finding and loading a dynamic …\nCreate an EGL instance by finding and loading a dynamic …\nCreate an EGL instance by finding and loading a dynamic …\nCreate an EGL instance by finding and loading a dynamic …\nCreate an EGL instance by finding and loading a dynamic …\nCreate an EGL instance by finding and loading a dynamic …\nCreate an EGL instance by finding and loading a dynamic …\nCreate an EGL instance by finding and loading a dynamic …\nCreate an EGL instance by finding and loading a dynamic …\nCreate an EGL instance by finding and loading a dynamic …\nCreate an EGL instance by finding and loading a dynamic …\nAttach an EGL rendering context to EGL surfaces.\nReturn the number of EGL frame buffer configurations that …\nQuery the current rendering API.\nReturn EGL rendering context information.\nReturn a string describing properties of the EGL client or …\nReturn EGL surface information.\nReleases a color buffer that is being used as a texture.\nRelease EGL per-thread state.\nSets the EGL version.\nSet an EGL surface attribute.\nPost EGL surface color buffer to a native window.\nSpecifies the minimum number of video frame periods per …\nTerminate an EGL display connection.\nTry to cast the API.\nWraps the given library but does not load the symbols.\nWraps the given library but does not load the symbols.\nCast the API.\nVersion of the provided EGL API.\nReturns the version of the provided EGL API.\nReturns the EGL version.\nReturns the provided EGL version.\nReturns the provided EGL version.\nComplete client API execution prior to subsequent native …\nComplete GL execution prior to subsequent native rendering …\nComplete native execution prior to subsequent GL rendering …\nWait in the server for a sync object to be signalled.\nEGL API interface.\nEGL API interface.\nEGL API interface.\nEGL API interface.\nEGL API interface.\nEGL API interface.\nEGL cannot access a requested resource (for example a …\nEGL failed to allocate resources for the requested …\nAn unrecognized attribute or attribute value was passed in …\nAn Config argument does not name a valid EGL frame buffer …\nAn Context argument does not name a valid EGL rendering …\nThe current surface of the calling thread is a window, …\nAn Display argument does not name a valid EGL display …\nArguments are inconsistent (for example, a valid context …\nA NativePixmapType argument does not refer to a valid …\nA NativeWindowType argument does not refer to a valid …\nOne or more argument values are invalid.\nAn Surface argument does not name a valid surface (window, …\nA power management event has occurred. The application …\nEGL errors.\nEGL is not initialized, or could not be initialized, for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new display from its EGL pointer.\nCreates a new configuration form its EGL pointer.\nCreates a new context form its EGL pointer.\nCreates a new surface form its EGL pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCreates a new client buffer form its EGL pointer.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new sync form its EGL pointer.\nCreates a new image form its EGL pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")