searchState.loadedDescShard("fixedbitset", 0, "<code>FixedBitSet</code> is a simple fixed size set of bits.\nAn iterator producing elements in the difference of two …\n<code>FixedBitSet</code> is a simple fixed size set of bits that each …\n<strong>IndexRange</strong> is implemented by Rust’s built-in range …\nAn iterator producing elements in the intersection of two …\nAn  iterator producing the indices of the set bit in a set.\nAn iterator producing elements in the union of two sets.\nView the bitset as a mutable slice of <code>u32</code> blocks. Writing …\nView the bitset as a slice of <code>u32</code> blocks\nClear all bits.\nReturn <strong>true</strong> if the bit is enabled in the <strong>FixedBitSet</strong>, <strong>false</strong>…\nCopies boolean value from specified bit to the specified …\nCount the number of set bits in the given bit range.\nReturns a lazy iterator over the difference of two …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGrow capacity to <strong>bits</strong>, all new bits initialized to zero\nEnable <code>bit</code>.\nEnables every bit in the given range.\nReturns a lazy iterator over the intersection of two …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the length of the <code>FixedBitSet</code> in bits.\nlength in bits\nIterates over all enabled bits.\nEnable <code>bit</code>, and return its previous value.\n<strong>Panics</strong> if <strong>bit</strong> is out of bounds.\nSets every bit in the given range to the given state (…\nReturns a lazy iterator over the union of two <code>FixedBitSet</code>s.\nCreate a new <strong>FixedBitSet</strong> with a specific number of bits, …\n<strong>IndexRange</strong> is implemented by Rust’s built-in range …\nEnd index (exclusive)\nEnd index (exclusive)\nStart index (inclusive)\nStart index (inclusive)")