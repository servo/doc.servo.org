searchState.loadedDescShard("servoshell", 0, "Similar to <code>println!(&quot;{:?}&quot;, Backtrace::new())</code>, but …\nContains files specific to the servoshell app for Desktop …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApplication entry point, runs the event loop.\nA modified version of EguiGlow from egui_glow 0.22.0 that …\nImplements the global methods required by Servo (not …\nAn event loop implementation that works in headless mode.\nA winit window implementation.\nA headless window implementation.\nDefinition of Window. Implemented by headless and headed …\nAction to be taken by the caller of <code>App::handle_events</code>.\nThe caller should shut down Servo and its related context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPumps events and messages between the embedder and Servo, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProcesses the given winit Event, possibly converting it to …\nUse <code>egui</code> from a <code>glow</code> app based on <code>winit</code>.\nIf true, egui consumed this event, i.e. wants exclusive …\nCall to release the allocated graphics resources.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor automatic shader version detection set <code>shader_version</code> …\nPaint the results of the last call to <code>Self::run</code>.\nDo we need an egui refresh because of this event?\nReturns the <code>Duration</code> of the timeout after which egui …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe real or fake OS event loop.\nwinit removed their ControlFlow::Exit variant in 0.29.2\nA fake event loop which contains a signalling flag used to …\nAnother process or thread has kicked the OS event loop …\nA real Winit windowing event loop.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper function to handle a click\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA map of winit’s key codes to key values that are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGo button clicked.\nDraws a browser tab, checking for clicks and returns an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true iff the given position is in the Servo browser …\nWhether the location has been edited by the user without …\nPreprocess the given winit::event::WindowEvent, returning …\nPaint the minibrowser, as of the last update.\nTakes any outstanding events from the Minibrowser, …\nCreate a frameless button with square sizing, as used in …\nUpdate the minibrowser, but don’t paint. If …\nUpdates the location field from the given WebViewManager, …\nUpdates the spinner from the given WebViewManager, …\nUpdates all fields taken from the given WebViewManager, …\nThe framebuffer object name for the widget surface we …\nThis protocol handler loads files from the &lt;…\nLoads resources using a mapping from well-known shortcuts …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the log target for an event, as a static string.\nLog an event to servo (…\nLog an event from servo (…\nLog an event from winit (winit::event::Event) at trace …\nThe order in which the webviews were created.\nThe webview that is currently focused. Modified by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle updates to connected gamepads from GilRs\nHandle key events after they have been handled by Servo.\nHandle key events before sending them to Servo.\nReturns true if the caller needs to manually present a new …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPre-creation state for WebViews. This is needed because in …\nList of top-level browsing contexts. Modified by …\nInterpret an input URL.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")