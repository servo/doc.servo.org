searchState.loadedDescShard("tiny_skia_path", 0, "A tiny-skia Bezier path implementation.\nConnects outside edges.\nNo stroke extension.\nAn immutable, finite <code>f32</code>.\nAn integer rectangle.\nAn integer size.\nAn integer length that is guarantee to be &gt; 0\nDraws at the beginning and end of an open path contour.\nSpecifies how corners are drawn when a shape is stroked.\nExtends to miter limit, then switches to bevel.\nExtends to miter limit, then clips the corner.\nAn immutable, finite <code>f32</code> that is known to be &gt; 0.\nA rectangle defined by left, top, right and bottom edges.\nAn immutable, finite <code>f32</code> in a 0..=1 range.\nAn immutable <code>f32</code> that is larger than 0 but less then 1.\nA <code>NormalizedF32</code> value initialized with one.\nA Bezier path.\nA path builder.\nA path segment.\nA path segments iterator.\nA path stroker.\nA path verb.\nA point.\nA rectangle defined by left, top, right and bottom edges.\nAdds circle.\nAdds circle.\nCustom float to integer conversion routines.\nCustom float to integer rounding routines.\nFloat number extension methods.\nA size.\nAdds square.\nStroke properties.\nA stroke dashing properties.\nAn affine transformation matrix.\nA <code>NormalizedF32</code> value initialized with zero.\nChecks that two <code>Point</code>s are almost equal.\nReturns the cross product of vector and vec.\nA stroke dashing properties.\nReturns the Euclidean distance from origin.\nReturns the dot product of two points.\nChecks that two <code>Point</code>s are almost equal using the …\nA pair of f32 numbers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Point</code> from <code>f32x2</code>.\nCreates a new <code>Point</code>.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a <code>FiniteF32</code>.\nReturns the value as a <code>FiniteF32</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if both x and y are measurable values.\nReturns true if x and y are both zero.\nReturns the Euclidean distance from origin.\nA stroke line cap.\nA stroke line join.\nThe limit at which a sharp corner is drawn beveled.\nCreates a finite <code>f32</code>.\nCreates a new <code>NonZeroPositiveF32</code> if the given value is &gt; 0.\nCreates a <code>NormalizedF32</code> if the given value is in a 0..=1 …\nCreates a <code>NormalizedF32</code> clamping the given value to a …\nCreates a <code>NormalizedF64</code> by dividing the given value by …\nCreates a <code>NormalizedF32</code> by dividing the given value by 255.\nCreates a finite <code>f32</code> without checking the value.\nCreates a new <code>NonZeroPositiveF32</code> without checking the …\nCreates a new <code>NormalizedF32</code> without checking the value.\nScales (fX, fY) so that length() returns one, while …\nA collection of functions to work with Bezier paths.\nReturn the closest integer for the given float.\nScales Point in-place by scale.\nScales vector so that distanceToOrigin() returns length, …\nSets vector to (x, y) scaled to length, if possible.\nSets vector to (x, y) scaled so length() returns one, and …\nConverts a <code>Point</code> into a <code>f32x2</code>.\nReturns the value as a <code>u16</code>.\nReturns the value as a <code>u8</code>.\nA stroke thickness.\nCreates a point at 0x0 position.\nA stroke dashing properties.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLinearly interpolate between A and B, based on t.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new stroke dashing object.\nReturns an absolute value.\nA pair of f32 numbers.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a maximum value.\nReturns a maximum of both values.\nReturns a minimum value.\nCreates a new pair.\nCreates a new pair from a single value.\nReturns the first value.\nReturns the second value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nJust a random, valid number.\nAn immutable, finite <code>f32</code>.\nA predefined 0.5 value.\nAn immutable, finite <code>f32</code> that is known to be &gt; 0.\nAn immutable, finite <code>f32</code> in a 0..=1 range.\nAn immutable <code>f32</code> that is larger than 0 but less then 1.\nCustom float to integer conversion routines.\nCustom float to integer rounding routines.\nReturn the float as a 2s compliment int. Just to be used …\nReturns the argument unchanged.\nReturns the value as a primitive type.\nCalls <code>U::from(self)</code>.\nCreates a <code>NormalizedF32Exclusive</code>.\nCreates a <code>NormalizedF32Exclusive</code> clamping the given value.\nReturn the closest integer for the given float.\nConvert a sign-bit int (i.e. float interpreted as int) …\nReturns the value as a <code>FiniteF32</code>.\nA Bezier path.\nA path segment.\nA path segments iterator.\nA path verb.\nReturns the bounds of the path’s points.\nClears the path and returns a <code>PathBuilder</code> that will reuse …\nCalculates path’s tight bounds.\nReturns the current verb.\nConverts the current path into a dashed one.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn if the path is empty.\nReturns the number of segments in the path.\nReturns the next verb.\nReturns an internal vector of points.\nReturns an iterator over path’s segments.\nSets the auto closing mode. Off by default.\nReturns a stoked path.\nReturns a transformed in-place path.\nReturns an internal vector of verbs.\nCounter-clockwise direction for adding closed contours.\nClockwise direction for adding closed contours.\nA path builder.\nReset the builder.\nCloses the current contour.\nAdds a cubic curve from the last point to <code>x</code>, <code>y</code>.\nFinishes the builder and returns a <code>Path</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Path</code> from a circle.\nCreates a new <code>Path</code> from an oval.\nCreates a new <code>Path</code> from <code>Rect</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the builder has any segments added.\nReturns the last point if any.\nReturns the current number of segments in the builder.\nAdds a line from the last point.\nAdds beginning of a contour.\nCreates a new builder.\nAdds a circle contour.\nAdds an oval contour bounded by the provided rectangle.\nAdds a path.\nAdds a rectangle contour.\nAdds a quad curve from the last point to <code>x</code>, <code>y</code>.\nAppends, in a reverse order, the first contour of path …\nCreates a new builder with a specified capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSolve coeff(t) == 0, returning the number of roots that …\nAn integer rectangle.\nA rectangle defined by left, top, right and bottom edges.\nA rectangle defined by left, top, right and bottom edges.\nApplies a bounding box transform.\nApplies a bounding box transform.\nReturns rect’s bottom edge.\nReturns the bottom edge.\nReturns the bottom edge.\nChecks that the rect is completely includes <code>other</code> Rect.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>IntRect</code>.\nCreates new <code>Rect</code>.\nCreates new <code>NonZeroRect</code>.\nCreates a Rect from Point array.\nCreates a new <code>IntRect</code>.\nCreates new <code>Rect</code>.\nCreates new <code>NonZeroRect</code>.\nReturns rect’s height.\nReturns rect’s height.\nReturns rect’s height.\nInsets the rectangle.\nInsets the rectangle by the specified offset.\nReturns an intersection of two rectangles.\nReturns an intersection of two rectangles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns rect’s left edge.\nReturns the left edge.\nReturns the left edge.\nOutsets the rectangle.\nOutsets the rectangle by the specified offset.\nReturns rect’s right edge.\nReturns the right edge.\nReturns the right edge.\nConverts into an <code>IntRect</code> by adding 0.5 and discarding the …\nConverts into an <code>IntRect</code> rounding outwards.\nReturns rect’s size.\nReturns rect’s size.\nConverts into <code>IntRect</code>.\nConverts into <code>NonZeroRect</code>.\nConverts into <code>Rect</code>.\nConverts into <code>Rect</code>.\nReturns rect’s top edge.\nReturns the top edge.\nReturns the top edge.\nTransforms the rect using the provided <code>Transform</code>.\nTransforms the rect using the provided <code>Transform</code>.\nTranslates the rect by the specified offset.\nTranslates the rect to the specified position.\nTranslates the rect to the specified position.\nReturns rect’s width.\nReturns rect’s width.\nReturns rect’s width.\nReturns rect’s X position.\nReturns rect’s X position.\nReturns rect’s X position.\nReturns rect’s Y position.\nReturns rect’s Y position.\nReturns rect’s Y position.\nFloat number extension methods.\nAn integer size.\nA size.\nReturns width and height as a tuple.\nExpands current size to specified size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>IntSize</code> from width and height.\nCreates a new <code>Size</code> from width and height.\nReturns height.\nReturns height.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nScales current size by the specified factor.\nScales current size to the specified size.\nScales current size to specified size.\nScales current size to the specified height.\nScales current size to the specified width.\nConverts into <code>IntRect</code> at the provided position.\nConverts into <code>IntSize</code>.\nConverts the current size to <code>NonZeroRect</code> at provided …\nConverts the current size to <code>Rect</code> at provided position.\nConverts into <code>Size</code>.\nReturns width.\nReturns width.\nConnects outside edges.\nNo stroke extension.\nDraws at the beginning and end of an open path contour.\nSpecifies how corners are drawn when a shape is stroked.\nExtends to miter limit, then switches to bevel.\nExtends to miter limit, then clips the corner.\nA path stroker.\nAdds circle.\nAdds circle.\nAdds square.\nStroke properties.\nComputes a resolution scale.\nGiven a cubic, determine if all four points are in a line.\nA stroke dashing properties.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA stroke line cap.\nA stroke line join.\nThe limit at which a sharp corner is drawn beveled.\nCreates a new PathStroker.\nGiven quad, see if all there points are in a line. Return …\nStokes the path.\nA stroke thickness.\nAn affine transformation matrix.\nReturns the argument unchanged.\nConverts <code>Rect</code> into a bounding box <code>Transform</code>.\nCreates a new rotating <code>Transform</code>.\nCreates a new rotating <code>Transform</code> at the specified position.\nCreates a new <code>Transform</code>.\nCreates a new scaling <code>Transform</code>.\nCreates a new skewing <code>Transform</code>.\nCreates a new translating <code>Transform</code>.\nReturns transform’s scale part.\nChecks that transform contains a scale part.\nChecks that transform contains a skew part.\nChecks that transform contains a translate part.\nCreates an identity transform.\nCalls <code>U::from(self)</code>.\nReturns an inverted transform.\nChecks that transform is finite.\nChecks that transform is identity.\nChecks that transform is scale-only.\nChecks that transform contains only scale and translate.\nChecks that transform is skew-only.\nChecks that transform is translate-only.\nChecks that transform is finite and has non-zero scale.\nTransforms a points using the current transform.\nTransforms a slice of points using the current transform.\nPost-concats the current transform.\nPost-rotates the current transform.\nPost-rotates the current transform by the specified …\nPost-scales the current transform.\nPost-translates the current transform.\nPre-concats the current transform.\nPre-rotates the current transform.\nPre-rotates the current transform by the specified …\nPre-scales the current transform.\nPre-translates the current transform.")