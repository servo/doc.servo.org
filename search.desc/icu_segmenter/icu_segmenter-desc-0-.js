searchState.loadedDescShard("icu_segmenter", 0, "Segment strings by lines, graphemes, words, and sentences.\nBreaks text assuming there is a soft wrap opportunity ‚Ä¶\nBreaking is allowed within ‚Äúwords‚Äù. ‚Ä¶\nAn error originating inside of the data provider.\nImplements the <code>Iterator</code> trait over the grapheme cluster ‚Ä¶\nGrapheme cluster break iterator for a Latin-1 (8-bit) ‚Ä¶\nGrapheme cluster break iterator for a potentially invalid ‚Ä¶\nGrapheme cluster break iterator for a UTF-16 string.\nGrapheme cluster break iterator for an <code>str</code> (a UTF-8 ‚Ä¶\nSegments a string into grapheme clusters.\nBreaking is forbidden within ‚Äúword‚Äù. ‚Ä¶\nLetter category tag, including CJK.\nImplements the <code>Iterator</code> trait over the line break ‚Ä¶\nLine break iterator for a Latin-1 (8-bit) string.\nLine break iterator for a potentially invalid UTF-8 string.\nLine break iterator for a UTF-16 string.\nLine break iterator for an <code>str</code> (a UTF-8 string).\nOptions to tailor line-breaking behavior.\nAn enum specifies the strictness of line-breaking rules. ‚Ä¶\nAn enum specifies the line break opportunities between ‚Ä¶\nSupports loading line break data, and creating line break ‚Ä¶\nBreaks text using the least restrictive set of ‚Ä¶\nNo category tag.\nBreaks text using the most common set of line-breaking ‚Ä¶\nWords break according to their customary rules. See the ‚Ä¶\nNumber category tag.\nA list of error outcomes for various operations in this ‚Ä¶\nImplements the <code>Iterator</code> trait over the sentence boundaries ‚Ä¶\nSentence break iterator for a Latin-1 (8-bit) string.\nSentence break iterator for a potentially invalid UTF-8 ‚Ä¶\nSentence break iterator for a UTF-16 string.\nSentence break iterator for an <code>str</code> (a UTF-8 string).\nSupports loading sentence break data, and creating ‚Ä¶\nBreaks text using the most stringent set of line-breaking ‚Ä¶\nImplements the <code>Iterator</code> trait over the word boundaries of ‚Ä¶\nWord break iterator for a Latin-1 (8-bit) string.\nWord break iterator for a potentially invalid UTF-8 string.\nWord break iterator for a UTF-16 string.\nWord break iterator for an <code>str</code> (a UTF-8 string).\nSupports loading word break data, and creating word break ‚Ä¶\nThe word type tag that is returned by ‚Ä¶\nMacros and utilities to help implement the various ‚Ä¶\nUse <code>true</code> as a hint to the line segmenter that the writing ‚Ä¶\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nStrictness of line-breaking rules. See <code>LineBreakStrictness</code>.\nLine break opportunities between letters. See ‚Ä¶\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nReturn UTF-8 segment offset array using dictionary or lstm ‚Ä¶\nReturn UTF-16 segment offset array using dictionary or ‚Ä¶\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe character type.\nA trait for dictionary based iterator\nThe iterator over characters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a dictionary based break iterator for an <code>str</code> (a ‚Ä¶\nCreate a dictionary based break iterator for a UTF-16 ‚Ä¶\nThis struct is an iterator that returns the string per ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>compute_hc1</code> implemens the evaluation of one LSTM layer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Err</code> if grapheme data is required but not present\nCreate an LSTM based break iterator for an <code>str</code> (a UTF-8 ‚Ä¶\nCreate an LSTM based break iterator for a UTF-16 string.\nA <code>D</code>-dimensional, borrowed matrix.\nA <code>D</code>-dimensional, mutably borrowed matrix.\nA <code>D</code>-dimensional, heap-allocated matrix.\nA <code>D</code>-dimensional matrix borrowed from a <code>ZeroSlice</code>.\nCalculate the dot product of a and b, adding the result to ‚Ä¶\nCalculate the dot product of a and b, adding the result to ‚Ä¶\nCalculate the dot product of a and b, adding the result to ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMutates this matrix by applying a softmax transformation.\nReturns the tightly packed submatrix at <em>index</em>, or <code>None</code> if ‚Ä¶\nSee <code>MatrixOwned::submatrix</code>.\nSee <code>MatrixOwned::submatrix</code>.\nA mutable version of <code>Self::submatrix</code>.\nCompute the dot product of an aligned and an unaligned f32 ‚Ä¶\nCompute the dot product of two unaligned f32 slices.\nAn error originating inside of the data provider.\nA list of error outcomes for various operations in this ‚Ä¶\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplements the <code>Iterator</code> trait over the grapheme cluster ‚Ä¶\nGrapheme cluster break iterator for a Latin-1 (8-bit) ‚Ä¶\nGrapheme cluster break iterator for a potentially invalid ‚Ä¶\nGrapheme cluster break iterator for a UTF-16 string.\nGrapheme cluster break iterator for an <code>str</code> (a UTF-8 ‚Ä¶\nSegments a string into grapheme clusters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>GraphemeClusterSegmenter</code> with an invariant ‚Ä¶\nCreates a grapheme cluster break iterator from grapheme ‚Ä¶\nCreates a grapheme cluster break iterator from grapheme ‚Ä¶\nCreates a grapheme cluster break iterator for a Latin-1 ‚Ä¶\nCreates a grapheme cluster break iterator for an <code>str</code> (a ‚Ä¶\nCreates a grapheme cluster break iterator for a UTF-16 ‚Ä¶\nCreates a grapheme cluster break iterator for a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by ‚Ä¶\nSimilar to <code>core::str::CharIndices</code> for Latin-1 strings, ‚Ä¶\nSimilar to <code>core::str::CharIndices</code> for UTF-16 strings, ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBreaks text assuming there is a soft wrap opportunity ‚Ä¶\nBreaking is allowed within ‚Äúwords‚Äù. ‚Ä¶\nThe character type.\nThe iterator over characters.\nBreaking is forbidden within ‚Äúword‚Äù. ‚Ä¶\nImplements the <code>Iterator</code> trait over the line break ‚Ä¶\nLine break iterator for a Latin-1 (8-bit) string.\nLine break iterator for a potentially invalid UTF-8 string.\nLine break iterator for a UTF-16 string.\nLine break iterator for an <code>str</code> (a UTF-8 string).\nOptions to tailor line-breaking behavior.\nAn enum specifies the strictness of line-breaking rules. ‚Ä¶\nA trait allowing for LineBreakIterator to be generalized ‚Ä¶\nAn enum specifies the line break opportunities between ‚Ä¶\nSupports loading line break data, and creating line break ‚Ä¶\nBreaks text using the least restrictive set of ‚Ä¶\nBreaks text using the most common set of line-breaking ‚Ä¶\nWords break according to their customary rules. See the ‚Ä¶\nBreaks text using the most stringent set of line-breaking ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhandle_complex_language impl for UTF8 iterators\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse <code>true</code> as a hint to the line segmenter that the writing ‚Ä¶\nConstructs a <code>LineSegmenter</code> with an invariant locale and ‚Ä¶\nConstructs a <code>LineSegmenter</code> with an invariant locale, ‚Ä¶\nConstructs a <code>LineSegmenter</code> with an invariant locale and ‚Ä¶\nConstructs a <code>LineSegmenter</code> with an invariant locale, ‚Ä¶\nConstructs a <code>LineSegmenter</code> with an invariant locale and ‚Ä¶\nConstructs a <code>LineSegmenter</code> with an invariant locale, ‚Ä¶\nCreates a line break iterator for a Latin-1 (8-bit) string.\nCreates a line break iterator for an <code>str</code> (a UTF-8 string).\nCreates a line break iterator for a UTF-16 string.\nCreates a line break iterator for a potentially ill-formed ‚Ä¶\nStrictness of line-breaking rules. See <code>LineBreakStrictness</code>.\nA version of <code>Self::new_auto</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::new_auto</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::new_auto_with_options</code> that uses custom ‚Ä¶\nA version of <code>Self::new_auto_with_options</code> that uses custom ‚Ä¶\nA version of <code>Self::new_dictionary</code> that uses custom data ‚Ä¶\nA version of <code>Self::new_dictionary</code> that uses custom data ‚Ä¶\nA version of <code>Self::new_dictionary_with_options</code> that uses ‚Ä¶\nA version of <code>Self::new_dictionary_with_options</code> that uses ‚Ä¶\nA version of <code>Self::new_lstm</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::new_lstm</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::new_lstm_with_options</code> that uses custom ‚Ä¶\nA version of [<code>Self::try_new_lstm_with_options</code>] that uses ‚Ä¶\nLine break opportunities between letters. See ‚Ä¶\nBaked data\nBreak\nBreak state\nA model working on code points\nMarker type for <code>UCharDictionaryBreakDataV1</code>: ‚Äú‚Ä¶\nMarker type for <code>UCharDictionaryBreakDataV1</code>: ‚Äú‚Ä¶\nThe data as matrices of zerovec f32 values.\nMarker type for <code>RuleBreakDataV1</code>: ‚Äúsegmenter/grapheme@1‚Äù\nA model working on grapheme clusters\nIndex of a state.\nWe have to look ahead one more character.\nKeep rule\nMarker type for <code>RuleBreakDataV1</code>: ‚Äúsegmenter/line@1‚Äù\nThe struct that stores a LSTM model.\nThe data to power the LSTM segmentation model.\nMarker type for <code>LstmDataV1</code>: ‚Äúsegmenter/lstm/wl_auto@1‚Äù\nThe struct that stores a LSTM‚Äôs matrix.\nThe struct that stores a LSTM‚Äôs matrix.\nThe struct that stores a LSTM‚Äôs matrix.\nThe type of LSTM model\nNon-matching rule\nPre-processed Unicode data in the form of tables to be ‚Ä¶\nMarker type for <code>RuleBreakDataV1</code>: ‚Äúsegmenter/sentence@1‚Äù\nchar16trie data for dictionary break\nMarker type for <code>RuleBreakDataV1</code>: ‚Äúsegmenter/word@1‚Äù\nBreak state table.\nThe backward layer‚Äôs bias. Shape (h, 4)\nThe backward layer‚Äôs second matrix. Shape (h, 4, h)\nThe backward layer‚Äôs first matrix. Shape (h, 4, e)\nThe index of ‚ÄúSA‚Äù state (or 127 if the complex ‚Ä¶\nThe grapheme cluster dictionary used to train the model\nThe embedding layer. Shape (dic.len + 1, e)\nThe index of EOT (end of text) state ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe forward layer‚Äôs bias. Shape (h, 4)\nThe forward layer‚Äôs second matrix. Shape (h, 4, h)\nThe forward layer‚Äôs first matrix. Shape (h, 4, e)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe index of the last simple state for ‚Ä¶\nData provider struct definitions for the lstm\nType of the model\nNumber of properties; should be the square root of the ‚Ä¶\nProperty table.\nThe index of SOT (start of text) state for ‚Ä¶\nThe output layer‚Äôs bias. Shape (4)\nThe output layer‚Äôs weights. Shape (2, 4, h)\nDictionary data of char16trie.\nWord type table. Only used for word segmenter.\nA model working on code points\nThe data as matrices of zerovec f32 values.\nA model working on grapheme clusters\nThe struct that stores a LSTM model.\nThe data to power the LSTM segmentation model.\nMarker type for <code>LstmDataV1</code>: ‚Äúsegmenter/lstm/wl_auto@1‚Äù\nThe struct that stores a LSTM‚Äôs matrix.\nThe struct that stores a LSTM‚Äôs matrix.\nThe struct that stores a LSTM‚Äôs matrix.\nThe type of LSTM model\nThe backward layer‚Äôs bias. Shape (h, 4)\nThe backward layer‚Äôs second matrix. Shape (h, 4, h)\nThe backward layer‚Äôs first matrix. Shape (h, 4, e)\nThe grapheme cluster dictionary used to train the model\nThe embedding layer. Shape (dic.len + 1, e)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe forward layer‚Äôs bias. Shape (h, 4)\nThe forward layer‚Äôs second matrix. Shape (h, 4, h)\nThe forward layer‚Äôs first matrix. Shape (h, 4, e)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType of the model\nThe output layer‚Äôs bias. Shape (4)\nThe output layer‚Äôs weights. Shape (2, 4, h)\nThe character type.\nThe iterator over characters.\nImplements the <code>Iterator</code> trait over the segmenter ‚Ä¶\nA trait allowing for RuleBreakIterator to be generalized ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true when break boundary is word-like such as ‚Ä¶\nReturn the status value of break boundary. If segmenter isn‚Ä¶\nImplements the <code>Iterator</code> trait over the sentence boundaries ‚Ä¶\nSentence break iterator for a Latin-1 (8-bit) string.\nSentence break iterator for a potentially invalid UTF-8 ‚Ä¶\nSentence break iterator for a UTF-16 string.\nSentence break iterator for an <code>str</code> (a UTF-8 string).\nSupports loading sentence break data, and creating ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>SentenceSegmenter</code> with an invariant locale ‚Ä¶\nCreates a sentence break iterator for a Latin-1 (8-bit) ‚Ä¶\nCreates a sentence break iterator for an <code>str</code> (a UTF-8 ‚Ä¶\nCreates a sentence break iterator for a UTF-16 string.\nCreates a sentence break iterator for a potentially ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by ‚Ä¶\nLetter category tag, including CJK.\nNo category tag.\nNumber category tag.\nImplements the <code>Iterator</code> trait over the word boundaries of ‚Ä¶\nWord break iterator for a Latin-1 (8-bit) string.\nWord break iterator for a potentially invalid UTF-8 string.\nWord break iterator for a UTF-16 string.\nWord break iterator for an <code>str</code> (a UTF-8 string).\nSupports loading word break data, and creating word break ‚Ä¶\nThe word type tag that is returned by ‚Ä¶\n<code>ULE</code> type for WordType\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhandle_complex_language impl for UTF8 iterators\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> when the segment preceding the current ‚Ä¶\nWhether the segment is word-like; word-like segments ‚Ä¶\nReturns an iterator over pairs of boundary position and ‚Ä¶\nConstructs a <code>WordSegmenter</code> with an invariant locale and ‚Ä¶\nConstruct a <code>WordSegmenter</code> with an invariant locale and ‚Ä¶\nAttempt to construct the value from its corresponding ‚Ä¶\nConstructs a <code>WordSegmenter</code> with an invariant locale and ‚Ä¶\nCreates a word break iterator for a Latin-1 (8-bit) string.\nCreates a word break iterator for an <code>str</code> (a UTF-8 string).\nCreates a word break iterator for a UTF-16 string.\nCreates a word break iterator for a potentially ill-formed ‚Ä¶\nA version of <code>Self::new_auto</code> that uses custom data provided ‚Ä¶\nA version of [<code>Self::try_new_auto</code>] that uses custom data ‚Ä¶\nA version of <code>Self::new_dictionary</code> that uses custom data ‚Ä¶\nA version of <code>Self::new_dictionary</code> that uses custom data ‚Ä¶\nA version of <code>Self::new_lstm</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::new_lstm</code> that uses custom data provided ‚Ä¶\nReturns the word type of the segment preceding the current ‚Ä¶")