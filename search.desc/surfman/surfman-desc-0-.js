searchState.loadedDescShard("surfman", 0, "Cross-platform GPU device and surface management.\nVarious flags that control attributes of the context …\nAttributes that control aspects of a context and/or …\nA unique ID among all currently-allocated contexts.\nOpenGL (full or desktop OpenGL).\nThe API (OpenGL or OpenGL ES).\nOpenGL ES (embedded OpenGL).\nDescribes the OpenGL version that is requested when a …\nThe surface data is accessible by the GPU and CPU.\nThe surface data is accessible by the GPU and CPU, and the …\nThe surface data is accessible by the GPU only.\nAn off-screen surface that has a pixel size. Generic …\nSpecifies how and if the CPU has direct access to the …\nA unique ID per allocated surface.\nVarious data about the surface.\nInformation specific to the type of surface: generic or …\nVarious data about the surface.\nA surface displayed inside a native widget (window or …\nAn implementation of thread-safe swap chains for the …\nThe abstract interface that all connections conform to.\nDeclarations common to all platform contexts.\nThe ID of the context that this surface belongs to.\nWhen using <code>surfman</code>, you should place this macro at the top …\nThe abstract interface that all devices conform to.\nVarious errors that methods can produce.\nVarious flags.\nThe OpenGL framebuffer object that can be used to render …\nVarious OpenGL utilities used by the different backends.\nThe ID of the surface. This should be globally unique for …\nThe ID of the surface. This should be globally unique for …\nOpenGL information.\nA macro for use in the top-level crate.\nThe major OpenGL version (e.g. 4 in 4.2).\nThe minor OpenGL version (e.g. 2 in 4.2).\nPlatform-specific backends.\nA utility module for backends that wrap surfaces in OpenGL …\nThe surface’s size, in device pixels.\nThe surface’s size, in device pixels.\nInformation related to hardware surfaces.\nThe OpenGL or OpenGL ES version that this context supports.\nA native widget type specific to the backend.\nThe size of the surface.\nA thread-safe swap chain.\nThe consumer’s view of a swap chain\nA thread-safe collection of swap chains.\nThe consumer’s view of a collection of swap chains\nClear the current back buffer. Called by the producer. …\nCreate a new attached swap chain\nCreate a new attached swap chain and insert it in the …\nCreate a new detached swap chain\nCreate a new dettached swap chain and insert it in the …\nDestroy the swap chain. Called by the producer. Returns an …\nDestroy a swap chain. Called by the producer. Returns an …\nDestroy all the swap chains for a particular producer …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a swap chain\nGet a swap chain\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this the attached swap chain?\nIs this the attached swap chain?\nIterate over all the swap chains for a particular producer …\nCreate a new collection.\nRecycle the current front buffer.\nRecycle the current front buffer. Called by a consumer.\nRecycle the current back buffer. Called by a producer.\nResize the swap chain. This creates a new back buffer of …\nGet the current size. Called by a consumer.\nSwap the back and front buffers. Called by the producer. …\nSwap the attached swap chain. Called by the producer. …\nTake the current front buffer. Returns <code>None</code> if there is no …\nTake the current front buffer.\nTake the current front buffer. Returns the most recent …\nTake the current back buffer. Called by a producer.\nThe adapter type associated with this connection.\nMethods relating to display server connections.\nThe device type associated with this connection.\nThe native type associated with this connection.\nThe native device type associated with this connection.\nThe native widget type associated with this connection.\nReturns the “best” adapter on this system, preferring …\nOpens a device.\nWraps an existing native device type in a device.\nReturns the “best” adapter on this system, preferring …\nReturns the “best” adapter on this system, preferring …\nCreates a native widget from a raw pointer\nCreate a native widget type from the given <code>WindowHandle</code>.\nReturns the “best” adapter on this system, preferring …\nOpens the display connection corresponding to the given …\nReturns the OpenGL API flavor that this connection …\nReturns the native connection corresponding to this …\nConnects to the default display.\nSurfaces created for this context will have an alpha …\nThe OpenGL compatibility profile will be used. If this is …\nVarious flags that control attributes of the context …\nAttributes that control aspects of a context and/or …\nA unique ID among all currently-allocated contexts.\nSurfaces created for this context will have a 24-bit depth …\nSurfaces created for this context will have an 8-bit …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nVarious flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe OpenGL or OpenGL ES version that this context supports.\nThe connection type associated with this device.\nThe context type associated with this device.\nThe context descriptor type associated with this device.\nA thread-local handle to a device.\nThe native context type associated with this device.\nThe surface type associated with this device.\nThe surface texture type associated with this device.\nReturns the adapter that this device was created with.\nAttaches a surface to a context for rendering.\nReturns the display server connection that this device was …\nReturns the descriptor that this context was created with.\nReturns the attributes that the context descriptor was …\nReturns a unique ID representing a context.\nReturns various information about the surface attached to …\nCreates a new OpenGL context.\nCreates a context descriptor with the given attributes.\nWraps a native context object in an OpenGL context.\nCreates either a generic or a widget surface, depending on …\nCreates a surface texture from an existing generic surface …\nDestroys a context.\nDestroys a surface.\nDestroys a surface texture and returns the underlying …\nFetches the address of an OpenGL function associated with …\nReturns the OpenGL API flavor that this device supports …\nMakes the context the current OpenGL context for this …\nRemoves the current OpenGL context from this thread.\nReturns the native context associated with the given …\nReturns the native device associated with this device.\nDisplays the contents of a widget surface on screen.\nResizes a widget surface.\nReturns the OpenGL texture target needed to read from this …\nReturns various information about the surface, including …\nReturns the OpenGL texture object containing the contents …\nRemoves and returns any attached surface from this context.\nFallbacks: ClientWaitSyncKHR\nFallbacks: CreateSync64KHR\nFallbacks: DestroyImageKHR\nFallbacks: DestroySyncKHR\nThe function pointer that will be used when calling the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the function has been successfully loaded.\nTrue if the pointer points to a real function, false if …\nLoad each OpenGL symbol using a custom load function. This …\nCreates a <code>FnPtr</code> from a load attempt.\nTypes that can be transferred across thread boundaries.\nBasic functions for dealing with memory.\nCompatibility module for C platform-specific types. Use …\nAssume only that alignment conditions are met.\nWhat transmutation safety conditions shall the compiler …\nAre values of a type transmutable into values of another …\nOpaque type representing the discriminant of an enum.\nAssume only that lifetime conditions are met.\nA wrapper to inhibit the compiler from automatically …\nA wrapper type to construct uninitialized instances of <code>T</code>.\nDo not assume that <em>you</em> have ensured any safety properties …\nAssume only that safety conditions are met.\nAssume only that dynamically-satisfiable validity …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nReturns the ABI-required minimum alignment of the type of …\nWhen <code>true</code>, the compiler assumes that <em>you</em> are ensuring …\nAssume both <code>self</code> and <code>other_assumptions</code>.\nExtracts the values from an array of <code>MaybeUninit</code> …\nReturns the contents of this <code>MaybeUninit</code> as a slice of …\nReturns the contents of this <code>MaybeUninit</code> as a mutable …\nGets a mutable pointer to the contained value. Reading …\nGets a pointer to the contained value. Reading from this …\nExtracts the value from the <code>MaybeUninit&lt;T&gt;</code> container. This …\nDrops the contained value in place.\nGets a mutable (unique) reference to the contained value.\nReads the value from the <code>MaybeUninit&lt;T&gt;</code> container. The …\nGets a shared reference to the contained value.\nAssume <code>self</code>, excepting <code>other_assumptions</code>.\nClones the elements from <code>src</code> to <code>this</code>, returning a mutable …\nBitwise-copies a value.\nCopies the elements from <code>src</code> to <code>this</code>, returning a mutable …\nReturns a value uniquely identifying the enum variant in <code>v</code>.\nDisposes of a value.\nManually drops the contained value. This is exactly …\nFills <code>this</code> with elements by cloning <code>value</code>, returning a …\nFills <code>this</code> with elements yielded by an iterator until …\nFills <code>this</code> with elements returned by calling a closure …\nTakes ownership and “forgets” about the value <strong>without </strong>…\nLike <code>forget</code>, but also accepts unsized values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the value from the <code>ManuallyDrop</code> container.\nWhen <code>true</code>, the compiler assume that <em>you</em> are ensuring that …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nReturns <code>true</code> if dropping values of type <code>T</code> matters.\nWrap a value to be manually dropped.\nCreates a new <code>MaybeUninit&lt;T&gt;</code> initialized with the given …\nExpands to the offset in bytes of a field from the …\nMoves <code>src</code> into the referenced <code>dest</code>, returning the previous …\nWhen <code>true</code>, the compiler assumes that <em>you</em> have ensured that …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nReturns the size of the pointed-to value in bytes.\nReturns the contents of this slice of <code>MaybeUninit</code> as a …\nReturns the contents of this mutable slice of <code>MaybeUninit</code> …\nGets a mutable pointer to the first element of the array.\nGets a pointer to the first element of the array.\nAssuming all the elements are initialized, get a mutable …\nAssuming all the elements are initialized, get a slice to …\nSwaps the values at two mutable locations, without …\nReplaces <code>dest</code> with the default value of <code>T</code>, returning the …\nTakes the value from the <code>ManuallyDrop&lt;T&gt;</code> container out.\nReinterprets the bits of a value of one type as another …\nInterprets <code>src</code> as having type <code>&amp;Dst</code>, and then reads <code>src</code> …\nTransposes a <code>MaybeUninit&lt;[T; N]&gt;</code> into a <code>[MaybeUninit&lt;T&gt;; N]</code>…\nCreates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state.\nCreate a new array of <code>MaybeUninit&lt;T&gt;</code> items, in an …\nBypasses Rust’s normal memory-initialization checks by …\nWhen <code>true</code>, the compiler assumes that <em>you</em> are ensuring that …\nReturns the number of variants in the enum type <code>T</code>.\nSets the value of the <code>MaybeUninit&lt;T&gt;</code>.\nReturns the value of type <code>T</code> represented by the all-zero …\nCreates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state, …\nEquivalent to C’s <code>char</code> type.\nEquivalent to C’s <code>double</code> type.\nEquivalent to C’s <code>float</code> type.\nEquivalent to C’s <code>signed int</code> (<code>int</code>) type.\nEquivalent to C’s <code>signed long</code> (<code>long</code>) type.\nEquivalent to C’s <code>signed long long</code> (<code>long long</code>) type.\nEquivalent to C’s <code>signed char</code> type.\nEquivalent to C’s <code>signed short</code> (<code>short</code>) type.\nEquivalent to C’s <code>unsigned char</code> type.\nEquivalent to C’s <code>unsigned int</code> type.\nEquivalent to C’s <code>unsigned long</code> type.\nEquivalent to C’s <code>unsigned long long</code> type.\nEquivalent to C’s <code>unsigned short</code> type.\nEquivalent to C’s <code>void</code> type when used as a pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEGL: EGL cannot access a requested resource (for example a …\nCGL: Invalid address; e.g. null pointer passed to function …\nCGL: Invalid memory allocation; i.e. CGL couldn’t …\nCGL: Invalid pixel format attribute. EGL: An unrecognized …\nCGL: Invalid code module.\nEGL: The EGL configuration is unsupported.\nCGL: Invalid Core Graphics connection.\nCGL: Invalid context object. EGL: An EGLContext argument …\nEGL: The current surface of the calling thread is a …\nCGL: Invalid display. EGL: An EGLDisplay argument does not …\nInvalid drawable.\nCGL: Invalid enumerant (constant). X11: Invalid enum value.\nCGL: Invalid full-screen drawable.\nCGL: Invalid share context. EGL: Arguments are …\nEGL: A NativePixmapType argument does not refer to a valid …\nEGL: A NativeWindowType argument does not refer to a valid …\nCGL: Invalid off-screen drawable.\nGL: Given when the set of state for a command is not legal …\nEGL: One or more argument values are invalid.\nCGL: Invalid pixel format object. X11: Invalid framebuffer …\nCGL: Invalid renderer property.\nCGL: Invalid renderer information object.\nX11: Screen number is bad.\nCGL: Invalid context state.\nEGL: An EGLSurface argument does not name a valid surface …\nCGL: Invalid numerical value. X11: Invalid value. GL: …\nX11: Visual number not known by GLX.\nCGL: Invalid window.\nA connection to the display server could not be opened.\nA connection to the window server is required to open a …\nThe system couldn’t create an OpenGL context.\nThe system couldn’t destroy the OpenGL context.\nEGL: A power management event has occurred. The …\nThe device couldn’t be opened.\nVarious errors that methods can produce.\nThis context renders to an externally-managed render …\nThe method failed for a miscellaneous reason.\nMiscellaneous error.\nLooking up an OpenGL function address failed.\nThe adapter type does not match the supplied connection.\nThe context is from a hardware device, but this is a …\nThe context descriptor is from a hardware device, but this …\nThe native context does not match the supplied device.\nThe native device does not match the supplied connection.\nThe native widget type does not match the supplied device.\nThe <code>raw display handle</code> is incompatible with this backend.\nThe shared context is not compatible for sharing.\nThe surface was not created from this context.\nThe surface texture is from a hardware device, but this is …\nThe native widget is invalid.\nThe system couldn’t make the OpenGL context current or …\nNo suitable adapter could be found.\nThe current connection couldn’t be fetched because there …\nA context couldn’t be created because there is no …\nX11: The GLX extension is unavailable on the server.\nThe system OpenGL library couldn’t be located.\nThe system couldn’t choose an OpenGL pixel format.\nThe surface has no window attachment.\nEGL: EGL is not initialized, or could not be initialized, …\nChoosing an OpenGL pixel format failed.\nThe system couldn’t present a widget surface.\nAn extension necessary for this library to function isn’…\nA surface was already attached to this context.\nThe system couldn’t create a surface.\nThe surface was not created with the <code>CPU_READ_WRITE</code> flag, …\nThe system couldn’t import a surface from another thread.\nThe surface could not be locked for CPU reading due to an …\nThe system couldn’t create a surface texture from a …\nThe platform supports this method in theory, but the …\nThe system doesn’t support the requested OpenGL …\nThe system doesn’t support the requested OpenGL API type …\nThe system doesn’t support the requested OpenGL API …\nThe platform doesn’t support this method.\nThe surface has a window attachment.\nAbstraction of the errors that EGL, CGL, GLX, CGL, etc. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFallbacks: ActiveTextureARB\nFallbacks: AttachObjectARB\nFallbacks: BeginConditionalRenderNV\nFallbacks: BeginQueryARB\nFallbacks: BeginTransformFeedbackEXT, …\nFallbacks: BindAttribLocationARB\nFallbacks: BindBufferARB\nFallbacks: BindBufferBaseEXT, BindBufferBaseNV\nFallbacks: BindBufferRangeEXT, BindBufferRangeNV\nFallbacks: BindFragDataLocationEXT\nFallbacks: BindFragDataLocationIndexedEXT\nFallbacks: BindTextureEXT\nFallbacks: BindVertexArrayOES\nFallbacks: BlendColorEXT\nFallbacks: BlendEquationEXT\nFallbacks: BlendEquationSeparateEXT\nFallbacks: BlendFuncSeparateEXT, BlendFuncSeparateINGR\nFallbacks: BlitFramebufferEXT, BlitFramebufferNV\nFallbacks: BufferDataARB\nFallbacks: BufferSubDataARB\nFallbacks: CheckFramebufferStatusEXT\nFallbacks: ClampColorARB\nFallbacks: ClientWaitSyncAPPLE\nFallbacks: ColorMaskIndexedEXT, ColorMaskiEXT, …\nFallbacks: CompileShaderARB\nFallbacks: CompressedTexImage1DARB\nFallbacks: CompressedTexImage2DARB\nFallbacks: CompressedTexImage3DARB\nFallbacks: CompressedTexSubImage1DARB\nFallbacks: CompressedTexSubImage2DARB\nFallbacks: CompressedTexSubImage3DARB\nFallbacks: CopyBufferSubDataNV\nFallbacks: CopyTexImage1DEXT\nFallbacks: CopyTexImage2DEXT\nFallbacks: CopyTexSubImage1DEXT\nFallbacks: CopyTexSubImage2DEXT\nFallbacks: CopyTexSubImage3DEXT\nFallbacks: CreateProgramObjectARB\nFallbacks: CreateShaderObjectARB\nFallbacks: DeleteBuffersARB\nFallbacks: DeleteFramebuffersEXT\nFallbacks: DeleteQueriesARB\nFallbacks: DeleteRenderbuffersEXT\nFallbacks: DeleteSyncAPPLE\nFallbacks: DeleteVertexArraysAPPLE, DeleteVertexArraysOES\nFallbacks: DetachObjectARB\nFallbacks: DisableVertexAttribArrayARB\nFallbacks: DisableIndexedEXT, DisableiEXT, DisableiNV, …\nFallbacks: DrawArraysEXT\nFallbacks: DrawArraysInstancedANGLE, …\nFallbacks: DrawBuffersARB, DrawBuffersATI, DrawBuffersEXT\nFallbacks: DrawElementsBaseVertexEXT, …\nFallbacks: DrawElementsInstancedANGLE, …\nFallbacks: DrawElementsInstancedBaseVertexEXT, …\nFallbacks: DrawRangeElementsEXT\nFallbacks: DrawRangeElementsBaseVertexEXT, …\nFallbacks: EnableVertexAttribArrayARB\nFallbacks: EnableIndexedEXT, EnableiEXT, EnableiNV, …\nFallbacks: EndConditionalRenderNV, EndConditionalRenderNVX\nFallbacks: EndQueryARB\nFallbacks: EndTransformFeedbackEXT, EndTransformFeedbackNV\nFallbacks: FenceSyncAPPLE\nFallbacks: FlushMappedBufferRangeAPPLE, …\nFallbacks: FramebufferRenderbufferEXT\nFallbacks: FramebufferTextureARB, FramebufferTextureEXT, …\nFallbacks: FramebufferTexture1DEXT\nFallbacks: FramebufferTexture2DEXT\nFallbacks: FramebufferTexture3DEXT\nFallbacks: FramebufferTextureLayerARB, …\nFallbacks: GenBuffersARB\nFallbacks: GenFramebuffersEXT\nFallbacks: GenQueriesARB\nFallbacks: GenRenderbuffersEXT\nFallbacks: GenVertexArraysAPPLE, GenVertexArraysOES\nFallbacks: GenerateMipmapEXT\nFallbacks: GetActiveAttribARB\nFallbacks: GetActiveUniformARB\nFallbacks: GetAttribLocationARB\nFallbacks: GetBooleanIndexedvEXT\nFallbacks: GetBufferParameterivARB\nFallbacks: GetBufferPointervARB, GetBufferPointervOES\nFallbacks: GetBufferSubDataARB\nFallbacks: GetCompressedTexImageARB\nFallbacks: GetFragDataIndexEXT\nFallbacks: GetFragDataLocationEXT\nFallbacks: GetFramebufferAttachmentParameterivEXT\nFallbacks: GetInteger64vAPPLE\nFallbacks: GetIntegerIndexedvEXT\nFallbacks: GetMultisamplefvNV\nFallbacks: GetQueryObjecti64vEXT\nFallbacks: GetQueryObjectivARB, GetQueryObjectivEXT\nFallbacks: GetQueryObjectui64vEXT\nFallbacks: GetQueryObjectuivARB\nFallbacks: GetQueryivARB\nFallbacks: GetRenderbufferParameterivEXT\nFallbacks: GetSamplerParameterIivEXT, …\nFallbacks: GetSamplerParameterIuivEXT, …\nFallbacks: GetShaderSourceARB\nFallbacks: GetSyncivAPPLE\nFallbacks: GetTexParameterIivEXT, GetTexParameterIivOES\nFallbacks: GetTexParameterIuivEXT, GetTexParameterIuivOES\nFallbacks: GetTransformFeedbackVaryingEXT\nFallbacks: GetUniformLocationARB\nFallbacks: GetUniformfvARB\nFallbacks: GetUniformivARB\nFallbacks: GetUniformuivEXT\nFallbacks: GetVertexAttribIivEXT\nFallbacks: GetVertexAttribIuivEXT\nFallbacks: GetVertexAttribPointervARB, …\nFallbacks: GetVertexAttribdvARB, GetVertexAttribdvNV\nFallbacks: GetVertexAttribfvARB, GetVertexAttribfvNV\nFallbacks: GetVertexAttribivARB, GetVertexAttribivNV\nFallbacks: IsBufferARB\nFallbacks: IsEnabledIndexedEXT, IsEnablediEXT, …\nFallbacks: IsFramebufferEXT\nFallbacks: IsQueryARB\nFallbacks: IsRenderbufferEXT\nFallbacks: IsSyncAPPLE\nFallbacks: IsVertexArrayAPPLE, IsVertexArrayOES\nFallbacks: LinkProgramARB\nFallbacks: MapBufferARB, MapBufferOES\nFallbacks: MapBufferRangeEXT\nFallbacks: MultiDrawArraysEXT\nFallbacks: MultiDrawElementsEXT\nFallbacks: MultiDrawElementsBaseVertexEXT\nFallbacks: PointParameterfARB, PointParameterfEXT, …\nFallbacks: PointParameterfvARB, PointParameterfvEXT, …\nFallbacks: PointParameteriNV\nFallbacks: PointParameterivNV\nFallbacks: PolygonModeNV\nFallbacks: ProvokingVertexEXT\nFallbacks: QueryCounterEXT\nFallbacks: RenderbufferStorageEXT\nFallbacks: RenderbufferStorageMultisampleEXT, …\nFallbacks: SampleCoverageARB\nFallbacks: SamplerParameterIivEXT, SamplerParameterIivOES\nFallbacks: SamplerParameterIuivEXT, SamplerParameterIuivOES\nFallbacks: ShaderSourceARB\nFallbacks: StencilOpSeparateATI\nFallbacks: TexBufferARB, TexBufferEXT, TexBufferOES\nFallbacks: TexImage3DEXT\nFallbacks: TexParameterIivEXT, TexParameterIivOES\nFallbacks: TexParameterIuivEXT, TexParameterIuivOES\nFallbacks: TexSubImage1DEXT\nFallbacks: TexSubImage2DEXT\nFallbacks: TexSubImage3DEXT\nFallbacks: TransformFeedbackVaryingsEXT\nFallbacks: Uniform1fARB\nFallbacks: Uniform1fvARB\nFallbacks: Uniform1iARB\nFallbacks: Uniform1ivARB\nFallbacks: Uniform1uiEXT\nFallbacks: Uniform1uivEXT\nFallbacks: Uniform2fARB\nFallbacks: Uniform2fvARB\nFallbacks: Uniform2iARB\nFallbacks: Uniform2ivARB\nFallbacks: Uniform2uiEXT\nFallbacks: Uniform2uivEXT\nFallbacks: Uniform3fARB\nFallbacks: Uniform3fvARB\nFallbacks: Uniform3iARB\nFallbacks: Uniform3ivARB\nFallbacks: Uniform3uiEXT\nFallbacks: Uniform3uivEXT\nFallbacks: Uniform4fARB\nFallbacks: Uniform4fvARB\nFallbacks: Uniform4iARB\nFallbacks: Uniform4ivARB\nFallbacks: Uniform4uiEXT\nFallbacks: Uniform4uivEXT\nFallbacks: UniformMatrix2fvARB\nFallbacks: UniformMatrix2x3fvNV\nFallbacks: UniformMatrix2x4fvNV\nFallbacks: UniformMatrix3fvARB\nFallbacks: UniformMatrix3x2fvNV\nFallbacks: UniformMatrix3x4fvNV\nFallbacks: UniformMatrix4fvARB\nFallbacks: UniformMatrix4x2fvNV\nFallbacks: UniformMatrix4x3fvNV\nFallbacks: UnmapBufferARB, UnmapBufferOES\nFallbacks: UseProgramObjectARB\nFallbacks: ValidateProgramARB\nFallbacks: VertexAttrib1dARB, VertexAttrib1dNV\nFallbacks: VertexAttrib1dvARB, VertexAttrib1dvNV\nFallbacks: VertexAttrib1fARB, VertexAttrib1fNV\nFallbacks: VertexAttrib1fvARB, VertexAttrib1fvNV\nFallbacks: VertexAttrib1sARB, VertexAttrib1sNV\nFallbacks: VertexAttrib1svARB, VertexAttrib1svNV\nFallbacks: VertexAttrib2dARB, VertexAttrib2dNV\nFallbacks: VertexAttrib2dvARB, VertexAttrib2dvNV\nFallbacks: VertexAttrib2fARB, VertexAttrib2fNV\nFallbacks: VertexAttrib2fvARB, VertexAttrib2fvNV\nFallbacks: VertexAttrib2sARB, VertexAttrib2sNV\nFallbacks: VertexAttrib2svARB, VertexAttrib2svNV\nFallbacks: VertexAttrib3dARB, VertexAttrib3dNV\nFallbacks: VertexAttrib3dvARB, VertexAttrib3dvNV\nFallbacks: VertexAttrib3fARB, VertexAttrib3fNV\nFallbacks: VertexAttrib3fvARB, VertexAttrib3fvNV\nFallbacks: VertexAttrib3sARB, VertexAttrib3sNV\nFallbacks: VertexAttrib3svARB, VertexAttrib3svNV\nFallbacks: VertexAttrib4NbvARB\nFallbacks: VertexAttrib4NivARB\nFallbacks: VertexAttrib4NsvARB\nFallbacks: VertexAttrib4NubARB, VertexAttrib4ubNV\nFallbacks: VertexAttrib4NubvARB, VertexAttrib4ubvNV\nFallbacks: VertexAttrib4NuivARB\nFallbacks: VertexAttrib4NusvARB\nFallbacks: VertexAttrib4bvARB\nFallbacks: VertexAttrib4dARB, VertexAttrib4dNV\nFallbacks: VertexAttrib4dvARB, VertexAttrib4dvNV\nFallbacks: VertexAttrib4fARB, VertexAttrib4fNV\nFallbacks: VertexAttrib4fvARB, VertexAttrib4fvNV\nFallbacks: VertexAttrib4ivARB\nFallbacks: VertexAttrib4sARB, VertexAttrib4sNV\nFallbacks: VertexAttrib4svARB, VertexAttrib4svNV\nFallbacks: VertexAttrib4ubvARB\nFallbacks: VertexAttrib4uivARB\nFallbacks: VertexAttrib4usvARB\nFallbacks: VertexAttribDivisorANGLE, …\nFallbacks: VertexAttribI1iEXT\nFallbacks: VertexAttribI1ivEXT\nFallbacks: VertexAttribI1uiEXT\nFallbacks: VertexAttribI1uivEXT\nFallbacks: VertexAttribI2iEXT\nFallbacks: VertexAttribI2ivEXT\nFallbacks: VertexAttribI2uiEXT\nFallbacks: VertexAttribI2uivEXT\nFallbacks: VertexAttribI3iEXT\nFallbacks: VertexAttribI3ivEXT\nFallbacks: VertexAttribI3uiEXT\nFallbacks: VertexAttribI3uivEXT\nFallbacks: VertexAttribI4bvEXT\nFallbacks: VertexAttribI4iEXT\nFallbacks: VertexAttribI4ivEXT\nFallbacks: VertexAttribI4svEXT\nFallbacks: VertexAttribI4ubvEXT\nFallbacks: VertexAttribI4uiEXT\nFallbacks: VertexAttribI4uivEXT\nFallbacks: VertexAttribI4usvEXT\nFallbacks: VertexAttribIPointerEXT\nFallbacks: VertexAttribPointerARB\nFallbacks: WaitSyncAPPLE\nThe function pointer that will be used when calling the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the function has been successfully loaded.\nTrue if the pointer points to a real function, false if …\nLoad each OpenGL symbol using a custom load function. This …\nCreates a <code>FnPtr</code> from a load attempt.\nTypes that can be transferred across thread boundaries.\nBasic functions for dealing with memory.\nCompatibility module for C platform-specific types. Use …\nWhat transmutation safety conditions shall the compiler …\nAre values of a type transmutable into values of another …\nOpaque type representing the discriminant of an enum.\nA wrapper to inhibit the compiler from automatically …\nA wrapper type to construct uninitialized instances of <code>T</code>.\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nReturns the ABI-required minimum alignment of the type of …\nWhen <code>true</code>, the compiler assumes that <em>you</em> are ensuring …\nBitwise-copies a value.\nReturns a value uniquely identifying the enum variant in <code>v</code>.\nDisposes of a value.\nTakes ownership and “forgets” about the value <strong>without </strong>…\nLike <code>forget</code>, but also accepts unsized values.\nWhen <code>true</code>, the compiler assume that <em>you</em> are ensuring that …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nReturns <code>true</code> if dropping values of type <code>T</code> matters.\nExpands to the offset in bytes of a field from the …\nMoves <code>src</code> into the referenced <code>dest</code>, returning the previous …\nWhen <code>true</code>, the compiler assumes that <em>you</em> have ensured that …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nReturns the size of the pointed-to value in bytes.\nSwaps the values at two mutable locations, without …\nReplaces <code>dest</code> with the default value of <code>T</code>, returning the …\nReinterprets the bits of a value of one type as another …\nInterprets <code>src</code> as having type <code>&amp;Dst</code>, and then reads <code>src</code> …\nBypasses Rust’s normal memory-initialization checks by …\nWhen <code>true</code>, the compiler assumes that <em>you</em> are ensuring that …\nReturns the number of variants in the enum type <code>T</code>.\nReturns the value of type <code>T</code> represented by the all-zero …\nEquivalent to C’s <code>char</code> type.\nEquivalent to C’s <code>double</code> type.\nEquivalent to C’s <code>float</code> type.\nEquivalent to C’s <code>signed int</code> (<code>int</code>) type.\nEquivalent to C’s <code>signed long</code> (<code>long</code>) type.\nEquivalent to C’s <code>signed long long</code> (<code>long long</code>) type.\nEquivalent to C’s <code>signed char</code> type.\nEquivalent to C’s <code>signed short</code> (<code>short</code>) type.\nEquivalent to C’s <code>unsigned char</code> type.\nEquivalent to C’s <code>unsigned int</code> type.\nEquivalent to C’s <code>unsigned long</code> type.\nEquivalent to C’s <code>unsigned long long</code> type.\nEquivalent to C’s <code>unsigned short</code> type.\nEquivalent to C’s <code>void</code> type when used as a pointer.\nNo value.\nNo value.\nNo value.\nNo value.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpenGL (full or desktop OpenGL).\nThe API (OpenGL or OpenGL ES).\nOpenGL ES (embedded OpenGL).\nDescribes the OpenGL version that is requested when a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe major OpenGL version (e.g. 4 in 4.2).\nThe minor OpenGL version (e.g. 2 in 4.2).\nCreates a GL version structure with the given major and …\nInternal macro used for generating implementations of the …\nBackends that are not specific to any operating system.\nBackends specific to Unix-like systems, particularly Linux.\nFunctionality common to EGL-based backends.\nAn abstraction that allows the choice of backends …\nFunctionality common to backends using EGL contexts.\nFunctionality common to backends using EGL displays.\nTranslation of errors from the EGL API to <code>surfman</code> errors.\nFFI-related functionality common to the various EGL …\nFunctionality common to backends using EGL surfaces.\nInformation needed to create a context. Some APIs call …\nWrapper for a native <code>EGLContext</code>.\nReturns the current EGL context and surfaces, if …\nThe EGL context.\nThe EGL draw surface that is to be attached to that …\nThe EGL read surface that is to be attached to that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA connection abstraction that allows the choice of …\nA context abstraction that allows the choice of backends …\nA device abstraction that allows the choice of backends …\nA surface abstraction that allows the choice of backends …\nThe alternate connection to the display server.\nThe alternate native connection type.\nA connection to the display server.\nThe default connection to the display server.\nThe default native connection type.\nThe native connection type.\nReturns the “best” adapter on this system.\nOpens the hardware device corresponding to the given …\nWraps a native device in a device.\nReturns the “best” adapter on this system, preferring …\nReturns the “best” adapter on this system, preferring …\nCreate a native widget from a raw pointer\nCreate a native widget type from the given <code>WindowHandle</code>.\nReturns the “best” adapter on this system, preferring …\nReturns the argument unchanged.\nReturns the argument unchanged.\nOpens the display connection corresponding to the given …\nReturns the OpenGL API flavor that this connection …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the native connection corresponding to this …\nConnects to the default display.\nThe alternate rendering context type.\nThe alternate context type.\nThe alternate context descriptor type.\nRepresents an OpenGL rendering context.\nInformation needed to create a context. Some APIs call …\nThe default rendering context type.\nThe default context type.\nThe default context descriptor type.\nWraps a platform-specific native context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a hardware display adapter that can be used for …\nThe alternate adapter type.\nThe alternate device type.\nThe alternate native device type.\nThe default adapter type.\nThe default device type.\nThe default native device type.\nA thread-local handle to a device.\nRepresents a native platform-specific device.\nReturns the adapter that this device was created with.\nAttaches a surface to a context for rendering.\nReturns the display server connection that this device was …\nReturns the descriptor that this context was created with.\nReturns the attributes that the context descriptor was …\nReturns a unique ID representing a context.\nReturns various information about the surface attached to …\nCreates a new OpenGL context.\nCreates a context descriptor with the given attributes.\nWraps an existing native context in a <code>Context</code> object.\nCreates either a generic or a widget surface, depending on …\nCreates a surface texture from an existing generic surface …\nDestroys a context.\nDestroys a surface.\nDestroys a surface texture and returns the underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetches the address of an OpenGL function associated with …\nReturns the OpenGL API flavor that this device supports …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes the context the current OpenGL context for this …\nRemoves the current OpenGL context from this thread.\nReturns the native context underlying this context.\nReturns the native device underlying this device.\nDisplays the contents of a widget surface on screen.\nResizes a widget surface.\nReturns the OpenGL texture target needed to read from this …\nReturns various information about the surface, including …\nReturns the OpenGL texture object containing the contents …\nRemoves and returns any attached surface from this context.\nThe alternate surface type.\nThe alternate surface texture type.\nThe alternate native widget type.\nThe default surface type.\nThe default surface texture type.\nThe default native widget type.\nA native widget/window type that can dynamically switch …\nRepresents a hardware buffer of pixels that can be …\nRepresents an OpenGL texture that wraps a surface.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe default backend for Unix, which dynamically switches …\nThe Mesa “surfaceless” backend, which only supports …\nBindings to Wayland via the Linux GBM interface.\nBindings to EGL via Xlib.\nWayland or X11 display server connections.\nOpenGL rendering contexts.\nThread-local handles to devices.\nHardware buffers of pixels.\nThe alternate device type.\nThe alternate connection to the display server.\nThe alternate native connection type.\nEither a Wayland or an X11 display server connection.\nThe default device type.\nThe default connection to the display server.\nThe default native connection type.\nEither a Wayland or an X11 native connection\nThe alternate device type.\nThe alternate rendering context type.\nThe alternate context descriptor type.\nThe alternate context type.\nRepresents an OpenGL rendering context.\nInformation needed to create a context. Some APIs call …\nThe default device type.\nThe default rendering context type.\nThe default context descriptor type.\nThe default context type.\nEither a Wayland or an X11 native context\nRepresents a hardware display adapter that can be used for …\nThe alternate device type.\nThe alternate adapter type.\nThe alternate device type.\nThe alternate native device type.\nThe default device type.\nThe default adapter type.\nThe default device type.\nThe default native device type.\nA thread-local handle to a device.\nEither a Wayland or an X11 native device\nThe alternate device type.\nThe alternate native widget type.\nThe alternate surface type.\nThe alternate surface texture type.\nThe default device type.\nThe default native widget type.\nThe default surface type.\nThe default surface texture type.\nA wrapper for a Wayland surface or an X11 <code>Window</code>, as …\nRepresents a hardware buffer of pixels that can be …\nRepresents an OpenGL texture that wraps a surface.\nRepresents a connection to a display server.\nOpenGL rendering contexts on surfaceless Mesa.\nA wrapper around surfaceless Mesa <code>EGLDisplay</code>s.\nsurfman/surfman/src/platform/unix/generic/surface.rs\nA no-op connection.\nNative connections.\nNative connections.\nReturns the “best” adapter on this system, preferring …\nOpens the hardware device corresponding to the given …\nAn alias for <code>connection.create_device()</code> with the default …\nReturns the “best” adapter on this system, preferring …\nReturns the “best” adapter on this system, preferring …\nCreate a native widget from a raw pointer\nCreate a native widget type from the given <code>WindowHandle</code>.\nReturns the “best” adapter on this system, preferring …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOpens the display connection corresponding to the given …\nAn alias for <code>Connection::new()</code>, present for consistency …\nReturns the OpenGL API flavor that this connection …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying native connection.\nOpens a surfaceless Mesa display.\nRepresents an OpenGL rendering context.\nInformation needed to create a context. Some APIs call …\nWrapper for a native <code>EGLContext</code>.\nThe EGL context.\nThe EGL draw surface that is to be attached to that …\nThe EGL read surface that is to be attached to that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a hardware display adapter that can be used for …\nA thread-local handle to a device.\nWraps an adapter.\nReturns the adapter that this device was created with.\nThe hardware adapter corresponding to this device.\nAttaches a surface to a context for rendering.\nReturns the display server connection that this device was …\nReturns the descriptor that this context was created with.\nReturns the attributes that the context descriptor was …\nReturns a unique ID representing a context.\nReturns various information about the surface attached to …\nCreates a new OpenGL context.\nCreates a context descriptor with the given attributes.\nWraps an <code>EGLContext</code> in a native context and returns it.\nCreates either a generic or a widget surface, depending on …\nCreates a surface texture from an existing generic surface …\nDestroys a context.\nDestroys a surface.\nDestroys a surface texture and returns the underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetches the address of an OpenGL function associated with …\nReturns the OpenGL API flavor that this device supports …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a pointer to the underlying surface data for …\nMakes the context the current OpenGL context for this …\nRemoves the current OpenGL context from this thread.\nGiven a context, returns its underlying EGL context and …\nReturns the native device associated with this device.\nReturns the native device corresponding to this device.\nDisplays the contents of a widget surface on screen.\nResizes a widget surface.\nReturns the OpenGL texture target needed to read from this …\nReturns various information about the surface, including …\nReturns the OpenGL texture object containing the contents …\nRemoves and returns any attached surface from this context.\nA placeholder wrapper for a native widget.\nRepresents a hardware buffer of pixels that can be …\nRepresents the CPU view of the pixel data of this surface.\nRepresents an OpenGL texture that wraps a surface.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA wrapper for Wayland connections (displays).\nOpenGL rendering contexts on Wayland.\nA wrapper around Wayland <code>EGLDisplay</code>s.\nA surface implementation using Wayland surfaces backed by …\nA connection to the Wayland server.\nAn EGL display wrapping a Wayland display.\nReturns the “best” adapter on this system, preferring …\nOpens the hardware device corresponding to the given …\nOpens the hardware device corresponding to the adapter …\nReturns the “best” adapter on this system, preferring …\nReturns the “best” adapter on this system, preferring …\nCreate a native widget from a raw pointer\nCreates a native widget type from the given <code>WindowHandle</code>\nReturns the “best” adapter on this system, preferring …\nReturns the current native connection, if applicable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOpens the display connection corresponding to the given …\nWraps an existing EGL display in a <code>Connection</code>.\nReturns the OpenGL API flavor that this connection …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying native connection.\nConnects to the default Wayland server.\nRepresents an OpenGL rendering context.\nInformation needed to create a context. Some APIs call …\nWrapper for a native <code>EGLContext</code>.\nThe EGL context.\nThe EGL draw surface that is to be attached to that …\nThe EGL read surface that is to be attached to that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA thread-local handle to a device.\nWraps an adapter.\nReturns the adapter that this device was created with.\nThe hardware adapter corresponding to this device.\nAttaches a surface to a context for rendering.\nReturns the display server connection that this device was …\nReturns the descriptor that this context was created with.\nReturns the attributes that the context descriptor was …\nReturns a unique ID representing a context.\nReturns various information about the surface attached to …\nCreates a new OpenGL context.\nCreates a context descriptor with the given attributes.\nWraps an <code>EGLContext</code> in a native context and returns it.\nCreates either a generic or a widget surface, depending on …\nCreates a surface texture from an existing generic surface …\nDestroys a context.\nDestroys a surface.\nDestroys a surface texture and returns the underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetches the address of an OpenGL function associated with …\nReturns the OpenGL API flavor that this device supports …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a pointer to the underlying surface data for …\nMakes the context the current OpenGL context for this …\nRemoves the current OpenGL context from this thread.\nGiven a context, returns its underlying EGL context and …\nReturns the native device corresponding to this device.\nReturns the native device associated with this device.\nDisplays the contents of a widget surface on screen.\nResizes a widget surface.\nReturns the OpenGL texture target needed to read from this …\nReturns various information about the surface, including …\nReturns the OpenGL texture object containing the contents …\nRemoves and returns any attached surface from this context.\nA wrapper for a Wayland surface, with associated size.\nRepresents a hardware buffer of pixels that can be …\nRepresents the CPU view of the pixel data of this surface.\nRepresents an OpenGL texture that wraps a surface.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA wrapper for X11 server connections (<code>DISPLAY</code> variables).\nOpenGL rendering contexts on X11 via EGL.\nA wrapper around X11 <code>EGLDisplay</code>s.\nA surface implementation using X11 surfaces backed by …\nA connection to the X11 display server.\nWrapper for an X11 and EGL display.\nReturns the “best” adapter on this system, preferring …\nOpens the hardware device corresponding to the given …\nOpens the hardware device corresponding to the adapter …\nReturns the “best” adapter on this system, preferring …\nReturns the “best” adapter on this system, preferring …\nCreate a native widget from a raw pointer\nCreate a native widget type from the given <code>WindowHandle</code>.\nReturns the “best” adapter on this system, preferring …\nThe EGL display associated with that X11 display.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOpens the display connection corresponding to the given …\nWraps an existing X11 <code>Display</code> in a <code>Connection</code>.\nReturns the OpenGL API flavor that this connection …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying native connection.\nConnects to the default display.\nThe corresponding Xlib Display. This must be present; do …\nRepresents an OpenGL rendering context.\nInformation needed to create a context. Some APIs call …\nWrapper for a native <code>EGLContext</code>.\nThe EGL context.\nThe EGL draw surface that is to be attached to that …\nThe EGL read surface that is to be attached to that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA thread-local handle to a device.\nWraps an adapter.\nReturns the adapter that this device was created with.\nThe hardware adapter corresponding to this device.\nAttaches a surface to a context for rendering.\nReturns the display server connection that this device was …\nReturns the descriptor that this context was created with.\nReturns the attributes that the context descriptor was …\nReturns a unique ID representing a context.\nReturns various information about the surface attached to …\nCreates a new OpenGL context.\nCreates a context descriptor with the given attributes.\nWraps an <code>EGLContext</code> in a native context and returns it.\nCreates either a generic or a widget surface, depending on …\nCreates a surface texture from an existing generic surface …\nDestroys a context.\nDestroys a surface.\nDestroys a surface texture and returns the underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetches the address of an OpenGL function associated with …\nReturns the OpenGL API flavor that this device supports …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a pointer to the underlying surface data for …\nMakes the context the current OpenGL context for this …\nRemoves the current OpenGL context from this thread.\nGiven a context, returns its underlying EGL context and …\nReturns the native device associated with this device.\nReturns the native device corresponding to this device.\nDisplays the contents of a widget surface on screen.\nResizes a widget surface.\nReturns the OpenGL texture target needed to read from this …\nReturns various information about the surface, including …\nReturns the OpenGL texture object containing the contents …\nRemoves and returns any attached surface from this context.\nA wrapper for a Wayland surface, with associated size.\nRepresents a hardware buffer of pixels that can be …\nRepresents the CPU view of the pixel data of this surface.\nRepresents an OpenGL texture that wraps a surface.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe surface data is accessible by the GPU and CPU.\nThe surface data is accessible by the GPU and CPU, and the …\nThe surface data is accessible by the GPU only.\nAn off-screen surface that has a pixel size. Generic …\nSpecifies how and if the CPU has direct access to the …\nA unique ID per allocated surface.\nVarious data about the surface.\nInformation specific to the type of surface: generic or …\nVarious data about the surface.\nA surface displayed inside a native widget (window or …\nThe ID of the context that this surface belongs to.\nThe OpenGL framebuffer object that can be used to render …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the surface. This should be globally unique for …\nThe ID of the surface. This should be globally unique for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe surface’s size, in device pixels.\nThe surface’s size, in device pixels.\nA native widget type specific to the backend.\nThe size of the surface.")