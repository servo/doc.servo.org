searchState.loadedDescShard("icu_collections", 0, "Efficient collections for Unicode data.\nThis module provides a data structure for a …\nThis module provides necessary functionality for highly …\nThis module provides functionality for querying of sets of …\nThis module provides a data structure for an …\nThis struct represents a de-serialized <code>Char16Trie</code> that was …\nThis struct represents an iterator over a <code>Char16Trie</code>.\nThe input unit(s) continued a matching string and there is …\nThe input unit(s) continued a matching string and there is …\nThe input unit(s) did not continue a matching string. Once …\nThe input unit(s) matched a string but there is no value …\nAn enum representing the return value from a lookup in …\nIndex of next trie unit to read, or <code>None</code> if there are no …\nRemaining length of a linear-match node, minus 1, or <code>None</code> …\nA reference to the Char16Trie data to iterate over.\nThis struct represents a de-serialized <code>Char16Trie</code> that was …\nThis struct represents an iterator over a <code>Char16Trie</code>.\nThe input unit(s) continued a matching string and there is …\nThe input unit(s) continued a matching string and there is …\nThe input unit(s) did not continue a matching string. Once …\nThe input unit(s) matched a string but there is no value …\nAn enum representing the return value from a lookup in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>Char16TrieIterator</code> backed by borrowed data …\nReturns a new <code>Char16Trie</code> with ownership of the provided …\nReturns a new <code>Char16TrieIterator</code> backed by borrowed data …\nTraverses the trie from the current state for this input …\nTraverses the trie from the current state for this input …\nTraverses the trie from the current state for this input …\nIndex of next trie unit to read, or <code>None</code> if there are no …\nRemaining length of a linear-match node, minus 1, or <code>None</code> …\nA reference to the Char16Trie data to iterate over.\nA macro that takes an <code>Option</code> argument and either unwraps …\nA membership wrapper for <code>CodePointInversionList</code>.\nA builder for <code>CodePointInversionList</code>.\nCustom Errors for <code>CodePointInversionList</code>.\n<code>VarULE</code> type for <code>CodePointInversionList</code>. See …\nA CodePointInversionList was constructed containing an …\nA CodePointInversionList was constructed with an invalid …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA builder for <code>CodePointInversionList</code>.\nAdd the range to the <code>CodePointInversionListBuilder</code>\nAdd the code point value to the …\nAdd the character to the <code>CodePointInversionListBuilder</code>\nAdd the range of characters to the …\nAdd the range of characters, represented as u32, to the …\nSame as <code>Self::add_range32</code>.\nAbstraction for adding/removing a range from start..end\nAdd the <code>CodePointInversionList</code> reference to the …\nSame as <code>Self::add32</code>.\nReturns a <code>CodePointInversionList</code> and consumes the …\nComputes the complement of the builder, inverting the …\nSee <code>Self::complement_char</code>\nComplements the character in the builder, adding it if not …\nComputes the complement of the argument, adding any …\nComplements the range in the builder, adding any elements …\nSee <code>Self::complement_range</code>\nComplements the set in the builder, adding any elements in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether the build is empty.\nReturns empty <code>CodePointInversionListBuilder</code>\nRemoves the range from the <code>CodePointInversionListBuilder</code>\nSee <code>Self::remove_char</code>\nRemove the character from the <code>CodePointInversionListBuilder</code>\nRemove the range of characters from the …\nSee <code>Self::remove_range</code>\nRemove the <code>CodePointInversionList</code> from the …\nSee <code>Self::retain_char</code>\nRetain the specified character in the …\nRetain the range of characters located within the …\nSee <code>Self::retain_range</code>\nRetain the elements in the specified set within the …\nRepresents the inversion list for all of the code points …\nRepresents the inversion list for a set of all code points …\nRepresents the end code point of the Basic Multilingual …\nA membership wrapper for <code>CodePointInversionList</code>.\n<code>VarULE</code> type for <code>CodePointInversionList</code>. See …\nReturns <code>CodePointInversionList</code> spanning entire Unicode …\nReturns the inversion list as a slice\nReturns <code>CodePointInversionList</code> spanning BMP range\nChecks to see the query is in the <code>CodePointInversionList</code>\nChecks to see the unsigned int is in the …\nWrapper for contains\nChecks to see if the range is in the <code>CodePointInversionList</code>\nCheck if the calling <code>CodePointInversionList</code> contains all …\nReturns the argument unchanged.\nReturns an owned inversion list representing the current …\nReturns a specific range contained in this …\nReturns the number of ranges contained in this …\nCalls <code>U::from(self)</code>.\nAttempts to convert this list into a fully-owned one. …\nReturns whether or not the <code>CodePointInversionList</code> is empty\nYields an <code>Iterator</code> going through the character set in the …\nYields an <code>Iterator</code> returning the ranges of the code points …\nYields an <code>Iterator</code> returning the ranges of the code points …\nReturns the number of elements of the …\nReturns the end of the initial substring where the …\nReturns the start of the trailing substring (starting from …\nReturns a new, fully-owned <code>CodePointInversionList</code> by …\nReturns a new <code>CodePointInversionList</code> from an inversion list\nReturns a new <code>CodePointInversionList</code> by borrowing an …\nReturns start (inclusive) and end (exclusive) bounds of …\nReturns whether the vector is sorted ascending non …\nA data structure providing a concrete implementation of a …\nCustom Errors for <code>CodePointInversionListAndStringList</code>.\n<code>VarULE</code> type for <code>CodePointInversionListAndStringList</code>. See …\nAn invalid CodePointInversionList was constructed\nA string in the string list had an invalid length\nTwo strings in the string list compare to each other …\nA string in the string list appears more than once\nAccess the underlying <code>CodePointInversionList</code>.\nExamples\nExamples\nExamples\nAccess the VarULE type behind the unsized <code>cp_inv_list</code> field\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn true if this set contains multi-code point strings …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of elements in this set (its …\nAccess the VarULE type behind the unsized <code>str_list</code> field\nAccess the contained strings.\nReturns a new <code>CodePointInversionListAndStringList</code> from …\nRepresents a range of consecutive code points sharing the …\nA custom <code>Iterator</code> type specifically for a code point trie …\nThis struct represents a de-serialized <code>CodePointTrie</code> that …\nA custom error type for <code>CodePointTrie</code>.\nThis struct contains the fixed-length header fields of a …\n<code>CodePointTrie</code> must be constructed from data vector with at …\nRepresents the “fast” type code point tries for the …\nCould not construct <code>CodePointTrie</code> from deserialized values\nRepresents the “small” type code point tries for the …\nThe type of trie represents whether the trie has an …\nA trait representing the values stored in the data array …\nLast-resort fallback value to return if we cannot read …\nInternal data null block offset, not shifted. Set to an …\nCustom error type(s) for the parent module.\nThe code point of the start of the last range of the trie. …\nOffset for the null block in the “index-3” table of …\nThe value stored in the trie that represents a null value …\nSample data for <code>CodePointTrie</code> that returns the code point…\nRange of code points from start to end (inclusive).\nA version of the <code>high_start</code> value that is right-shifted 12 …\nThe enum value representing the type of trie, where trie …\nA parsing function that is primarily motivated by …\nTrie value associated with this range.\nReason for inability to deserialize values.\nRepresents a range of consecutive code points sharing the …\nA custom <code>Iterator</code> type specifically for a code point trie …\nThis struct represents a de-serialized <code>CodePointTrie</code> that …\nThis struct contains the fixed-length header fields of a …\nRepresents the “fast” type code point tries for the …\nRepresents the “small” type code point tries for the …\nThe type of trie represents whether the trie has an …\nA trait representing the values stored in the data array …\nLast-resort fallback value to return if we cannot read …\nInternal data null block offset, not shifted. Set to an …\nReturns the value used as an error value for this trie\nReturns the position in the <code>data</code> array for the given code …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value that is associated with <code>char</code> in this …\nReturns the value that is associated with <code>code_point</code> in …\nReturns the value that is associated with <code>code_point</code> for …\nReturns a reference to the ULE of the value that is …\nReturns a <code>CodePointMapRange</code> struct which represents a …\nYields an <code>Iterator</code> returning the ranges of the code points …\nReturns a <code>CodePointInversionList</code> for the code points that …\nThe code point of the start of the last range of the trie. …\nOffset for the null block in the “index-3” table of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nYields an <code>Iterator</code> returning ranges of consecutive code …\nYields an <code>Iterator</code> returning the ranges of the code points …\nHelper function used by [<code>get_range</code>]. Converts occurrences …\nThe value stored in the trie that represents a null value …\nRange of code points from start to end (inclusive).\nA version of the <code>high_start</code> value that is right-shifted 12 …\nReturns the position in the <code>data</code> array for the given code …\nA method for converting back to a <code>u32</code> that can roundtrip …\nA method for converting back to a <code>u32</code> that can roundtrip …\nReturns the position in the data array containing the trie…\nThe enum value representing the type of trie, where trie …\nMaps the <code>CodePointTrie</code> into one that returns a different …\nA parsing function that is primarily motivated by …\nConverts the <code>CodePointTrie</code> into one that returns another …\nReturns a new <code>CodePointTrie</code> backed by borrowed data for …\nTrie value associated with this range.\n<code>CodePointTrie</code> must be constructed from data vector with at …\nA custom error type for <code>CodePointTrie</code>.\nCould not construct <code>CodePointTrie</code> from deserialized values\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReason for inability to deserialize values.\nThe length of the BMP index table. 1024=0x400\nNumber of code points per index-2 table entry. 512=0x200\nOffset from dataLength (to be subtracted) for fetching the …\nNumber of entries in a data block for code points below …\nMask for getting the lower bits for the in-fast-data-block …\nFast indexing limit for “fast”-type trie\nOffset from dataLength (to be subtracted) for fetching the …\nNumber of entries in an index-2 block. 32=0x20\nMask for getting the lower bits for the in-index-2-block …\nNumber of entries in an index-3 block. 32=0x20\nMask for getting the lower bits for the in-index-3-block …\nNumber of index-1 entries for the BMP. (4) This part of …\nShift size for getting the index-1 table offset.\nDifference between two shift sizes, for getting an index-1 …\nShift size for getting the index-2 table offset.\nDifference between two shift sizes, for getting an index-2 …\nShift size for getting the index-3 table offset.\nNumber of entries in a small data block. 16=0x10\nMask for getting the lower bits for the …\nFast indexing limit for “small”-type trie\nReturn a <code>CodePointTrie</code> that returns the Unicode plane …\nThis is an iterator that coalesces adjacent ranges in an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")