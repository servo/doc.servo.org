searchState.loadedDescShard("ipc_channel", 0, "An implementation of the Rust channel API over process …\nA custom error message from Serde.\nSerde has a deserialize_any method that lets the format …\nAn error that can be produced during (de)serializing.\nThe kind of error that can be produced during a …\nReturned if the deserializer attempts to deserialize a …\nReturned if the deserializer attempts to deserialize a …\nReturned if the deserializer attempts to deserialize the …\nReturned if the deserializer attempts to deserialize a …\nIf the error stems from the reader/writer that is being …\nBincode can not encode sequences of unknown length (like …\nIf (de)serializing a message takes more than the provided …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRouters allow converting IPC channels to crossbeam …\nThe channel has been closed for the IpcReceiver identified …\nReceiving end of a channel that does not used serialized …\nSending end of a channel that does not used serialized …\nStructure used to represent a raw message from an <code>IpcSender</code>…\nA server associated with a given name.\nReceiving end of a channel using serialized messages.\nCollection of IpcReceivers moved into the set; thus …\nResult for readable events returned from …\nSending end of a channel using serialized messages.\nShared memory descriptor that will be made accessible to …\nA message received from the <code>IpcReceiver</code> in the <code>IpcMessage</code> …\nAdd and consume the IpcReceiver to the set of receivers to …\nAdd an OpaqueIpcReceiver to the set of receivers to be …\nCreate a connected IpcBytesSender and IpcBytesReceiver.\nCreate a connected IpcSender and IpcReceiver that transfer …\nCreate an IpcSender connected to a previously defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a chunk of shared memory that is filled with the …\nCreate shared memory initialized with the bytes provided.\nCreate a new <code>IpcMessage</code> with data and without any …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new empty IpcReceiverSet.\nNone represents no data (empty slice)\nBlocking receive.\nBlocking receive.\nWait for IPC messages received on any of the receivers in …\nSend data across the channel to the receiver.\nDeserialize the raw data in the contained message into the …\nErase the type of the channel.\nNon-blocking receive\nNon-blocking receive\nBlocks for up to the specified duration attempting to …\nHelper method to move the value out of the …\nCalculate maximum payload data size of first fragment.\nCalculate maximum payload data size per fragment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMaximum data size that can be transferred over this …\nMaximum size of the kernel buffer used for transfers over …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister the receiver OpaqueIpcReceiver for listening for …\nGlobal object wrapping a <code>RouterProxy</code>. Add routes (add_route…\nRouter runs in its own thread listening for events. Adds …\nFunction to call when a new event is received from the …\nA <code>RouterProxy</code> provides methods for talking to the router. …\nShutdown the router, providing a sender to send an …\nLike RouterHandler but includes the type that will be …\nAdd a new (receiver, callback) pair to the router, and …\nAdd a new <code>(receiver, callback)</code> pair to the router, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMaps ids to their handler functions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet of all receivers which have been registered for us to …\nGet messages from RouterProxy.\nThe ID/index of the special channel we use to identify …\nA convenience function to route an <code>IpcReceiver&lt;T&gt;</code> to an …\nA convenience function to route an <code>IpcReceiver&lt;T&gt;</code> to a …\nContinuously loop waiting for wakeup signals from router …\nSend a shutdown message to the router containing a ACK …")