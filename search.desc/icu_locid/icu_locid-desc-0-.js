searchState.loadedDescShard("icu_locid", 0, "Parsing, manipulating, and serializing Unicode Language …\nDuplicated extension.\nInvalid extension subtag.\nInvalid language subtag.\nInvalid script, region or variant subtag.\nA core struct representing a …\nA core struct representing a <code>Unicode Locale Identifier</code>.\nResolved ordering between the locale object and the …\nList of parser errors that can be generated while parsing …\nThe result of a subtag iterator comparison operation.\nPotentially remaining subtags after the comparison …\nUnicode Extensions provide a mechanism to extend the …\nAny extensions present in the locale identifier.\nThe basic language/script/region components in the locale …\nA macro allowing for compile-time construction of valid …\nLanguage subtag of the language identifier.\nA macro allowing for compile-time construction of valid …\nUtilities for performing ordering operations on locales.\nRegion subtag of the language identifier.\nScript subtag of the language identifier.\nThis module includes variable-length data types that are …\nLanguage Identifier and Locale contains a set of subtags …\nVariant subtags of the language identifier.\nDocumentation on zero-copy deserialization of locale types.\nDefines the type of extension.\nA map of extensions associated with a given <code>Locale</code>.\nAll other extension types.\nPrivate Extension Type marked as <code>x</code>.\nTransform Extension Type marked as <code>t</code>.\nUnicode Extension Type marked as <code>u</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction to create a new map of extensions containing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are no extensions present.\nReturns a new empty map of extensions. Same as <code>default()</code>, …\nOther Use Extensions is a list of extensions other than …\nA sequence of any other extensions that are present in the …\nPrivate Use Extensions is a list of extensions intended for\nA representation of the data for a private-use extension, …\nRetains the specified extension types, clearing all others.\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nTransform Extensions provide information on content …\nA representation of the data for a transform extension, …\nUnicode Extensions provide information about user …\nA representation of the data for a Unicode extension, when …\nA list of <code>Other Use Extensions</code> as defined in …\nA single item used in a list of <code>Other</code> extensions.\nReturns the argument unchanged.\nA constructor which takes a pre-sorted list of <code>Subtag</code>.\nGets the tag character for this extension as a char.\nGets the tag character for this extension as a byte.\nGets the tag character for this extension as a &amp;str.\nCalls <code>U::from(self)</code>.\nA macro allowing for compile-time construction of valid …\nA single item used in a list of <code>Other</code> extensions.\nA helper function for displaying as a <code>&amp;str</code>.\nReturns the argument unchanged.\nUnsafely creates a <code>Subtag</code> from its raw format as returned …\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by …\nCompare with a potentially unnormalized BCP-47 string.\nCompare with BCP-47 bytes.\nA constructor which takes a UTF-8 slice, parses it and …\nEquivalent to <code>try_from_bytes(bytes[start..end])</code>, but …\nSafely creates a <code>Subtag</code> from its raw format as returned by …\nA list of <code>Private Use Extensions</code> as defined in …\nA single item used in a list of <code>Private</code> extensions.\nEmpties the <code>Private</code> list.\nReturns the argument unchanged.\nA constructor which takes a pre-sorted list of <code>Subtag</code>.\nCalls <code>U::from(self)</code>.\nReturns a new empty list of private-use extensions. Same …\nA constructor which takes a single <code>Subtag</code>.\nA macro allowing for compile-time construction of valid …\nA single item used in a list of <code>Private</code> extensions.\nA helper function for displaying as a <code>&amp;str</code>.\nReturns the argument unchanged.\nUnsafely creates a <code>Subtag</code> from its raw format as returned …\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by …\nCompare with a potentially unnormalized BCP-47 string.\nCompare with BCP-47 bytes.\nA constructor which takes a UTF-8 slice, parses it and …\nEquivalent to <code>try_from_bytes(bytes[start..end])</code>, but …\nSafely creates a <code>Subtag</code> from its raw format as returned by …\nA list of <code>Key</code>-<code>Value</code> pairs representing functional …\nA key used in a list of <code>Fields</code>.\nA list of <code>Unicode BCP47 T Extensions</code> as defined in …\nA value used in a list of <code>Fields</code>.\nClears the transform extension, effectively removing it …\nThe key-value pairs present in this locale extension, with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there are no tfields and no tlang in the …\nA macro allowing for compile-time construction of valid <code>Key</code>…\nThe <code>LanguageIdentifier</code> specified with this locale …\nReturns a new empty map of Transform extensions. Same as …\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nA list of <code>Key</code>-<code>Value</code> pairs representing functional …\nEmpties the <code>Fields</code> list.\nReturns <code>true</code> if the list contains a <code>Value</code> for the …\nReturns the argument unchanged.\nReturns a reference to the <code>Value</code> corresponding to the <code>Key</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there are no fields.\nReturns a new empty list of key-value pairs. Same as …\nRetains a subset of fields as specified by the predicate …\nSets the specified keyword, returning the old value if it …\nA key used in a list of <code>Fields</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nReturns the argument unchanged.\nUnsafely creates a <code>Key</code> from its raw format as returned by …\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by …\nCompare with a potentially unnormalized BCP-47 string.\nCompare with BCP-47 bytes.\nA constructor which takes a UTF-8 slice, parses it and …\nEquivalent to <code>try_from_bytes(bytes[start..end])</code>, but …\nSafely creates a <code>Key</code> from its raw format as returned by …\nA value used in a list of <code>Fields</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA constructor which takes a utf8 slice, parses it and …\nAn attribute used in a set of <code>Attributes</code>.\nA set of <code>Attribute</code> elements as defined in …\nA key used in a list of <code>Keywords</code>.\nA list of <code>Key</code>-<code>Value</code> pairs representing functional …\nUnicode Extensions provide information about user …\nA value used in a list of <code>Keywords</code>.\nA macro allowing for compile-time construction of valid …\nA canonically ordered sequence of single standalone …\nClears all Unicode extension keywords and attributes, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there list of keywords and attributes is …\nA macro allowing for compile-time construction of valid <code>Key</code>…\nThe key-value pairs present in this locale extension, with …\nReturns a new empty map of Unicode extensions. Same as …\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nA macro allowing for compile-time construction of valid …\nAn attribute used in a set of <code>Attributes</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nReturns the argument unchanged.\nUnsafely creates a <code>Attribute</code> from its raw format as …\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by …\nCompare with a potentially unnormalized BCP-47 string.\nCompare with BCP-47 bytes.\nA constructor which takes a UTF-8 slice, parses it and …\nEquivalent to <code>try_from_bytes(bytes[start..end])</code>, but …\nSafely creates a <code>Attribute</code> from its raw format as returned …\nA set of <code>Attribute</code> elements as defined in …\nEmpties the <code>Attributes</code> list.\nReturns the argument unchanged.\nA constructor which takes a pre-sorted list of <code>Attribute</code> …\nCalls <code>U::from(self)</code>.\nReturns a new empty set of attributes. Same as <code>default()</code>, …\nA key used in a list of <code>Keywords</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nReturns the argument unchanged.\nUnsafely creates a <code>Key</code> from its raw format as returned by …\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by …\nCompare with a potentially unnormalized BCP-47 string.\nCompare with BCP-47 bytes.\nA constructor which takes a UTF-8 slice, parses it and …\nEquivalent to <code>try_from_bytes(bytes[start..end])</code>, but …\nSafely creates a <code>Key</code> from its raw format as returned by …\nA list of <code>Key</code>-<code>Value</code> pairs representing functional …\nClears all Unicode extension keywords, leaving Unicode …\nReturns <code>true</code> if the list contains a <code>Value</code> for the …\nReturns the argument unchanged.\nReturns a reference to the <code>Value</code> corresponding to the <code>Key</code>.\nReturns a mutable reference to the <code>Value</code> corresponding to …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there are no keywords.\nReturns a new empty list of key-value pairs. Same as …\nCreate a new list of key-value pairs having exactly one …\nRemoves the specified keyword, returning the old value if …\nRetains a subset of keywords as specified by the predicate …\nSets the specified keyword, returning the old value if it …\nCompare this <code>Keywords</code> with BCP-47 bytes.\nCompare this <code>Keywords</code> with an iterator of BCP-47 subtags.\nA value used in a list of <code>Keywords</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA constructor which takes a utf8 slice, parses it and …\nConst constructor for when the value contains only a …\nA core struct representing a …\nThe default undefined language “und”. Same as <code>default()</code>…\nThis is a best-effort operation that performs all …\nExecutes <code>f</code> on each subtag string of this <code>LanguageIdentifier</code>…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLanguage subtag of the language identifier.\nCompare this <code>LanguageIdentifier</code> with a potentially …\nRegion subtag of the language identifier.\nScript subtag of the language identifier.\nCompare this <code>LanguageIdentifier</code> with BCP-47 bytes.\nCompare this <code>LanguageIdentifier</code> with an iterator of BCP-47 …\nCompare this <code>LanguageIdentifier</code> with another …\nA constructor which takes a utf8 slice, parses it and …\nA constructor which takes a utf8 slice which may contain …\nVariant subtags of the language identifier.\nWrites this <code>LanguageIdentifier</code> to a sink, replacing …\nA core struct representing a <code>Unicode Locale Identifier</code>.\nThe default undefined locale “und”. Same as <code>default()</code>.\nThis is a best-effort operation that performs all …\nAny extensions present in the locale identifier.\nReturns the argument unchanged.\nThe basic language/script/region components in the locale …\nCalls <code>U::from(self)</code>.\nCompare this <code>Locale</code> with a potentially unnormalized BCP-47 …\nCompare this <code>Locale</code> with BCP-47 bytes.\nCompare this <code>Locale</code> with an iterator of BCP-47 subtags.\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nA constructor which takes a utf8 slice, parses it and …\nResolved ordering between the locale object and the …\nThe result of a subtag iterator comparison operation.\nPotentially remaining subtags after the comparison …\nInvoke this function if there are no remaining locale …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDuplicated extension.\nInvalid extension subtag.\nInvalid language subtag.\nInvalid script, region or variant subtag.\nList of parser errors that can be generated while parsing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA boxed slice that supports no-allocation, constant values …\nA boxed slice that supports no-allocation, constant values …\nAn iterator that yields elements from a <code>ShortBoxSlice</code>.\nRemoves all elements from the collection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts an element at the specified index into the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the collection is empty.\nReturns the number of elements in the collection.\nCreates a new, empty <code>ShortBoxSlice</code>.\nCreates a new <code>ShortBoxSlice</code> containing a single element.\nPushes an element onto this <code>ShortBoxSlice</code>.\nRemoves the element at the specified index from the …\nRetains only the elements specified by the predicate.\nGets a single element from the <code>ShortBoxSlice</code>.\nA language subtag (examples: <code>&quot;en&quot;</code>, <code>&quot;csb&quot;</code>, <code>&quot;zh&quot;</code>, <code>&quot;und&quot;</code>, …\nA region subtag (examples: <code>&quot;US&quot;</code>, <code>&quot;CN&quot;</code>, <code>&quot;AR&quot;</code> etc.)\nA script subtag (examples: <code>&quot;Latn&quot;</code>, <code>&quot;Arab&quot;</code>, etc.)\nA variant subtag (examples: <code>&quot;macos&quot;</code>, <code>&quot;posix&quot;</code>, <code>&quot;1996&quot;</code> etc.)\nA list of variants (examples: <code>[&quot;macos&quot;, &quot;posix&quot;]</code>, etc.)\nA macro allowing for compile-time construction of valid …\nA macro allowing for compile-time construction of valid …\nA macro allowing for compile-time construction of valid …\nA macro allowing for compile-time construction of valid …\nA language subtag (examples: <code>&quot;en&quot;</code>, <code>&quot;csb&quot;</code>, <code>&quot;zh&quot;</code>, <code>&quot;und&quot;</code>, …\nThe default undefined language “und”. Same as <code>default()</code>…\nA helper function for displaying as a <code>&amp;str</code>.\nResets the <code>Language</code> subtag to an empty one (equal to <code>&quot;und&quot;</code>…\nReturns the argument unchanged.\nUnsafely creates a <code>Language</code> from its raw format as …\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by …\nTests if the <code>Language</code> subtag is empty (equal to <code>&quot;und&quot;</code>).\nCompare with a potentially unnormalized BCP-47 string.\nCompare with BCP-47 bytes.\nA constructor which takes a UTF-8 slice, parses it and …\nEquivalent to <code>try_from_bytes(bytes[start..end])</code>, but …\nSafely creates a <code>Language</code> from its raw format as returned …\nA region subtag (examples: <code>&quot;US&quot;</code>, <code>&quot;CN&quot;</code>, <code>&quot;AR&quot;</code> etc.)\nA helper function for displaying as a <code>&amp;str</code>.\nReturns the argument unchanged.\nUnsafely creates a <code>Region</code> from its raw format as returned …\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by …\nReturns true if the Region has an alphabetic code.\nCompare with a potentially unnormalized BCP-47 string.\nCompare with BCP-47 bytes.\nA constructor which takes a UTF-8 slice, parses it and …\nEquivalent to <code>try_from_bytes(bytes[start..end])</code>, but …\nSafely creates a <code>Region</code> from its raw format as returned by …\nA script subtag (examples: <code>&quot;Latn&quot;</code>, <code>&quot;Arab&quot;</code>, etc.)\nA helper function for displaying as a <code>&amp;str</code>.\nReturns the argument unchanged.\nUnsafely creates a <code>Script</code> from its raw format as returned …\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by …\nCompare with a potentially unnormalized BCP-47 string.\nCompare with BCP-47 bytes.\nA constructor which takes a UTF-8 slice, parses it and …\nEquivalent to <code>try_from_bytes(bytes[start..end])</code>, but …\nSafely creates a <code>Script</code> from its raw format as returned by …\nA variant subtag (examples: <code>&quot;macos&quot;</code>, <code>&quot;posix&quot;</code>, <code>&quot;1996&quot;</code> etc.)\nA helper function for displaying as a <code>&amp;str</code>.\nReturns the argument unchanged.\nUnsafely creates a <code>Variant</code> from its raw format as returned …\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by …\nCompare with a potentially unnormalized BCP-47 string.\nCompare with BCP-47 bytes.\nA constructor which takes a UTF-8 slice, parses it and …\nEquivalent to <code>try_from_bytes(bytes[start..end])</code>, but …\nSafely creates a <code>Variant</code> from its raw format as returned …\nA list of variants (examples: <code>[&quot;macos&quot;, &quot;posix&quot;]</code>, etc.)\nEmpties the <code>Variants</code> list.\nReturns the argument unchanged.\nCreates a new <code>Variants</code> set from a single <code>Variant</code>.\nCreates a new <code>Variants</code> set from a <code>Vec</code>. The caller is …\nCalls <code>U::from(self)</code>.\nReturns a new empty list of variants. Same as <code>default()</code>, …")