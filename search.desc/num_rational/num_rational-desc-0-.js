searchState.loadedDescShard("num_rational", 0, "Rational numbers\nA constant <code>Ratio</code> 1/1.\nRepresents the ratio between two numbers.\nAlias for a <code>Ratio</code> of machine-sized integers.\nAlias for a <code>Ratio</code> of 32-bit-sized integers.\nAlias for a <code>Ratio</code> of 64-bit-sized integers.\nA constant <code>Ratio</code> 0/1.\nRounds towards plus infinity.\nReturns zero\nGets an immutable reference to the denominator.\nDenominator.\nDenominator.\nDenominator.\nDenominator.\nRounds towards minus infinity.\nReturns the fractional part of a number, with division …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Ratio</code> representing the integer <code>t</code>.\nParses <code>numer/denom</code> or just <code>numer</code>.\nParses <code>numer/denom</code> where the numbers are in base <code>radix</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs a <code>Ratio</code> into its numerator and denominator.\nReturns true if the rational number is an integer …\nMultiply <code>x</code> by 2 to the power of <code>exp</code>. Returns an accurate …\nCreates a new <code>Ratio</code>.\nCreates a <code>Ratio</code> without checking for <code>denom == 0</code> or …\nGets an immutable reference to the numerator.\nNumerator.\nNumerator.\nNumerator.\nNumerator.\nRaises the <code>Ratio</code> to the power of an exponent.\nConverts a ratio of <code>T</code> to an f64.\nReturns the reciprocal.\nPuts self into lowest terms, with <code>denom</code> &gt; 0.\nReturns a reduced copy of self.\nRounds to the nearest integer. Rounds half-way cases away …\nConverts to an integer, rounding towards zero.\nRounds towards zero.")