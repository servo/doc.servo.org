searchState.loadedDescShard("aes", 0, "Pure Rust implementation of the Advanced Encryption …\nAES-128 block cipher\nAES-128 block cipher (decrypt-only)\nAES-128 block cipher (encrypt-only)\nAES-192 block cipher\nAES-192 block cipher (decrypt-only)\nAES-192 block cipher (encrypt-only)\nAES-256 block cipher\nAES-256 block cipher (decrypt-only)\nAES-256 block cipher (encrypt-only)\n128-bit AES block\nEight 128-bit AES blocks\nAutodetection support for hardware accelerated AES …\nAES block ciphers implementation using AES-NI instruction …\nAES block cipher constant-time implementation.\nAES-128 block cipher\nAES-128 block cipher (decrypt-only)\nAES-128 block cipher (encrypt-only)\nAES-192 block cipher\nAES-192 block cipher (decrypt-only)\nAES-192 block cipher (encrypt-only)\nAES-256 block cipher\nAES-256 block cipher (decrypt-only)\nAES-256 block cipher (encrypt-only)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialization token\nReturns the argument unchanged.\nInitialize underlying storage if needed and get stored …\nGet initialized value\nInitialize underlying storage if needed and get …\nGet stored value and initialization token, initializing …\nCalls <code>U::from(self)</code>.\nAES-128 block cipher\nAES-128 block cipher (decrypt-only)\nAES-128 block cipher (encrypt-only)\nAES-192 block cipher\nAES-192 block cipher (decrypt-only)\nAES-192 block cipher (encrypt-only)\nAES-256 block cipher\nAES-256 block cipher (decrypt-only)\nAES-256 block cipher (encrypt-only)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUtility functions\nAES-128 round keys\nAES-192 round keys\nAES-192 round keys\nAES-128 block cipher\nAES-128 block cipher (decrypt-only)\nAES-128 block cipher (encrypt-only)\nAES-192 block cipher\nAES-192 block cipher (decrypt-only)\nAES-192 block cipher (encrypt-only)\nAES-256 block cipher\nAES-256 block cipher (decrypt-only)\nAES-256 block cipher (encrypt-only)\nFixsliced implementations of AES-128, AES-192 and AES-256 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAES block batch size for this implementation\nAES-128 round keys\nAES-192 round keys\nAES-256 round keys\n512-bit internal state\nXOR the round key to the internal state. The round keys …\nFully-fixsliced AES-128 decryption (the InvShiftRows is …\nFully-fixsliced AES-128 encryption (the ShiftRows is …\nFully bitsliced AES-128 key schedule to match the …\nFully-fixsliced AES-192 decryption (the InvShiftRows is …\nFully-fixsliced AES-192 encryption (the ShiftRows is …\nFully bitsliced AES-192 key schedule to match the …\nFully-fixsliced AES-256 decryption (the InvShiftRows is …\nFully-fixsliced AES-256 encryption (the ShiftRows is …\nFully bitsliced AES-256 key schedule to match the …\nBitslice four 128-bit input blocks input0, input1, input2, …\nComputation of the MixColumns transformation in the …\nUn-bitslice a 512-bit internal state into four 128-bit …\nNote that the 4 bitwise NOT (^= 0xffffffffffffffff) are …\nCopy 32-bytes within the provided slice to an 8-byte offset\nApplies ShiftRows once on an AES state (or key).\nApplies ShiftRows twice on an AES state (or key).\nApplies ShiftRows three times on an AES state (or key).\nBitsliced implementation of the AES Sbox based on Boyar, …\nNOT operations that are omitted in S-box\nXOR the columns after the S-box during the key schedule …")