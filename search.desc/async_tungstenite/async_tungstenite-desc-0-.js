searchState.loadedDescShard("async_tungstenite", 0, "Async WebSockets.\nA wrapper around an underlying raw stream which implements …\nAccepts a new WebSocket connection with the provided …\nThe same as <code>accept_async()</code> but the one can specify a …\nAccepts a new WebSocket connection with the provided …\nThe same as <code>accept_hdr_async()</code> but the one can specify a …\nCreates a WebSocket handshake from a request and a stream. …\nThe same as <code>client_async()</code> but the one can specify a …\nClose the underlying web socket\nGet a domain from an URL.\nReturns the argument unchanged.\nConvert a raw socket into a WebSocketStream without …\nConvert a raw socket into a WebSocketStream without …\nReturns a reference to the configuration of the …\nReturns a mutable reference to the inner stream.\nReturns a shared reference to the inner stream.\nCalls <code>U::from(self)</code>.\nGet the port from an URL.\nTungstenite is probably ready to receive more data.\nConvenience wrapper for streams to switch between plain …\n<code>tokio</code> integration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnencrypted socket stream.\nStream, either plain TCP or TLS.\nEncrypted socket stream.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nType alias for the stream type of the <code>client_async()</code> …\nType alias for the stream type of the <code>connect_async()</code> …\nUnencrypted socket stream.\nUnencrypted socket stream.\nEncrypted socket stream.\nEncrypted socket stream.\nAdapter for <code>tokio::io::AsyncRead</code> and <code>tokio::io::AsyncWrite</code> …\nAccepts a new WebSocket connection with the provided …\nThe same as <code>accept_async()</code> but the one can specify a …\nAccepts a new WebSocket connection with the provided …\nThe same as <code>accept_hdr_async()</code> but the one can specify a …\nCreates a WebSocket handshake from a request and a stream. …\nCreates a WebSocket handshake from a request and a stream, …\nCreates a WebSocket handshake from a request and a stream, …\nCreates a WebSocket handshake from a request and a stream, …\nCreates a WebSocket handshake from a request and a stream, …\nThe same as <code>client_async()</code> but the one can specify a …\nConnect to a given URL.\nConnect to a given URL with a given WebSocket …\nConnect to a given URL using the provided TLS connector.\nConnect to a given URL using the provided TLS connector.\nReturns the argument unchanged.\nGet a mutable reference to the underlying value.\nGet a reference to the underlying value.\nCalls <code>U::from(self)</code>.\nConsumes this <code>TokioAdapter</code>, returning the underlying value.\nCreates a new <code>TokioAdapter</code> wrapping the provided value.\nA stream that might be protected with TLS.\nUnencrypted socket stream.\nUnencrypted socket stream.\nEncrypted socket stream.\nEncrypted socket stream.\nCreates a WebSocket handshake from a request and a stream, …")