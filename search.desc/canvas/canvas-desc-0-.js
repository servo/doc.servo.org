searchState.loadedDescShard("canvas", 0, "Path builder in device-space.\nA generic PathBuilder that abstracts the interface for …\nA wrapper around a stored PathBuilder and an optional …\nThe canvas data stores a state machine for the current …\nPath in user-space. If a transform has been applied but …\nPath builder in user-space. If a transform has been applied\n…\nFind the <em>anchor_point</em> for the given parameters of a line …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\nAn old webrender image key that can be deleted when the …\nIt reads image data from the canvas canvas_size: The size …\nThe current 2D transform matrix.\nAn old webrender image key that can be deleted when the …\nIt writes an image to the destination target draw_target: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>CanvasPaintThread</code> and returns an <code>IpcSender</code> to\nThe shared font cache used by all canvases that render on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBridge between the webrender::ExternalImage callbacks and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>WebGLComm</code> object.\nANGLE adds a <code>_u</code> prefix to variable names:\nHelper struct to store cached WebGLContext information.\nWebGL Commands Implementation\nA WebGLThread manages the life cycle and message …\nThe data required to initialize an instance of the …\nBridge between WebGL and WebXR\nGet a flags value with all known bits set.\nWhether this context is a GL or GLES context.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCurrent bound context.\nCached information for WebGLContexts.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nMap of live WebGLContexts.\nCreates a new WebGLContext\nCreates a <code>webrender_api::ImageKey</code> that uses shared …\nThe GPU device.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nHelper function to create a <code>ImageData::External</code> instance.\nList of registered webrender external images. We use it to …\nFlips the pixels in the Vec on the Y axis.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGets the GLSL Version supported by a GLContext.\nHandles a generic WebGLMsg message\nHandles a WebGLCommand for a specific WebGLContext\nHandles a WebXR message\nHelper function to create a <code>ImageDescriptor</code>.\nCurrently used WebRender image key.\nTranslates an image in rgba8 (red in the first byte) …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nGets a reference to a Context for a given WebGLContextId …\nGets a mutable reference to a GLContextWrapper for a …\nCreate a new instance of WebGLThread.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe receiver that will be used for processing WebGL …\nThe intersection of a source flags value with the …\nRemoves a WebGLContext and releases attached resources.\nResizes a WebGLContext\nPerform all initialization required to run an instance of …\nThe receiver that should be used to send WebGL messages …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nWhich access mode to use\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nTell WebRender to invalidate any cached tiles for a given …\nChannel used to generate/update or delete <code>ImageKey</code>s.\nThe swap chains used by webrender\nThe bridge to WebXR")