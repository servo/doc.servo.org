searchState.loadedDescShard("diplomat_core", 0, "The Diplomat core module contains common logic between the …\nThe type resolution environment\nThe type resolution environment within a specific module\nA symbol that is a pointer to another path.\nAn elided lifetime.\nParameters in a method that might be borrowed in the …\nA <code>Box&lt;T&gt;</code> type.\nA compact representation that will fit multiple rust_link …\nA type declared inside a Diplomat-annotated module.\nA symbol that is a custom type.\nA fieldless enum declaration in an FFI module.\nA fieldless enum.\nHidden. Useful for programmatically annotating an API as …\nAn identifier, analogous to <code>syn::Ident</code> and …\nA lifetime, analogous to [<code>syn::Lifetime</code>].\nA lifetime dependency graph used for tracking which …\nCollect all lifetimes that are either longer_or_shorter\nThe type of markdown generated by <code>Docs::to_markdown()</code>\nA method declared in the <code>impl</code> associated with an FFI …\nA symbol declared in a module, which can either be a …\nAn unresolved path to a custom type, which can be resolved …\nA named lifetime, like <code>&#39;a</code>.\nA named lifetime, e.g. <code>&#39;a</code>.\nRegular markdown with no specific extensions, compatible …\nA nice expanded representation that includes the type name\nA struct annotated with [<code>diplomat::opaque</code>] whose fields …\nA struct annotated with [<code>diplomat::opaque</code>] whose fields …\nA <code>Option&lt;T&gt;</code> type.\nstd::cmp::Ordering or core::cmp::Ordering\nA parameter taken by a <code>Method</code>, not including <code>self</code>.\nA named type that is just a path, e.g. …\nA built-in Rust scalar primitive.\nA <code>&amp;[T]</code> or <code>Box&lt;[T]&gt;</code> type, where <code>T</code> is a primitive. Owned …\nA built-in Rust primitive scalar type.\nAn optionally mutable reference to another type.\nA <code>Result&lt;T, E&gt;</code> or <code>diplomat_runtime::DiplomatWriteable</code> …\nMarkdown that can be losslessly converted to …\nThe <code>self</code> parameter taken by a <code>Method</code>.\nThe <code>Self</code> type.\nThe <code>&#39;static</code> lifetime.\nA <code>&amp;DiplomatStr</code> or <code>Box&lt;DiplomatStr&gt;</code> type. Owned strings don…\n<code>&amp;[&amp;DiplomatStr]</code>\nA struct declaration in an FFI module that is not opaque.\nA non-opaque struct whose fields will be visible across …\nA symbol that is a submodule.\nA local type reference, such as the type of a field, …\nThe <code>()</code> type.\nThe caller guarantees that they’re passing valid UTF-8, …\nAs part of the macro expansion and code generation …\nThe list of <code>cfg</code> attributes (if any).\na primitive byte that is not meant to be interpreted …\nLines of documentation for the method.\nThe name of the FFI function wrapping around the method.\nThe lifetimes introduced in this method and surrounding …\nThe name of the method as initially declared.\nThe name of the parameter in the original method …\nAll non-<code>self</code> params taken by the method.\nThe type of the parameter, which will be a named reference …\nThe lifetime and mutability of the <code>self</code> param, if it’s a …\nThe return type of the method, if any.\nThe <code>self</code> param of the method, if any.\nThe type of the parameter.\nA list of variants of the enum. (name, discriminant, docs, …\nThe list of attributes on a type. All attributes except …\nA <code>#[diplomat::attr(...)]</code> attribute\nWhen a method is inheriting from an impl\nWhen a method or an impl is inheriting from a module\nA pattern for use in rename attributes, like …\nHelper type for parsing standard attributes. A standard …\nRenames to apply to the underlying C symbol. Can be found …\nApply all renames to a given string\nHIR backend attributes.\nGet a copy of these attributes for use in inheritance, …\nGet a copy of these attributes for use in inheritance, …\nThe regular #[cfg()] attributes. Inherited, though the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse from a Meta. Returns an error when no string value …\nFrom a replacement pattern, like “icu4x_{0}”. Can have …\nThe index in <code>replacement</code> in which to insert the original …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this rename is empty and will perform no changes\nThe string to replace with\nAST backends only. For using features that may panic AST …\nA compact representation that will fit multiple rust_link …\nHidden. Useful for programmatically annotating an API as …\nThe type of markdown generated by <code>Docs::to_markdown()</code>\nRegular markdown with no specific extensions, compatible …\nA nice expanded representation that includes the type name\nMarkdown that can be losslessly converted to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to markdown\nA fieldless enum declaration in an FFI module.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtract an <code>Enum</code> metadata value from an AST node.\nA list of variants of the enum. (name, discriminant, docs, …\nAn identifier, analogous to <code>syn::Ident</code> and …\nAn <code>Ident</code> containing “this”.\nGet the <code>&amp;str</code> representation.\nThe derived <code>Deserialize</code> allows for creating <code>Ident</code>s that do …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttempt to create a new <code>Ident</code>.\nValidate a string\nAn elided lifetime.\nA lifetime, analogous to [<code>syn::Lifetime</code>].\nA lifetime dependency graph used for tracking which …\nA lifetime, along with ptrs to all lifetimes that are …\nCollect all lifetimes that are either longer_or_shorter\nA helper type for <code>LifetimeTransitivity</code> determining whether …\nA named lifetime, like <code>&#39;a</code>.\nA named lifetime, e.g. <code>&#39;a</code>.\nThe <code>&#39;static</code> lifetime.\nReturns a reference to the inner <code>NamedLifetime</code> if the …\nPerforms depth-first search through the <code>LifetimeEnv</code> …\nReturns either the indices of the longer or shorter …\nAdd edges to the lifetime graph.\nAdd the lifetimes from generic parameters and where bounds.\nTraverse a type, adding any implicit lifetime bounds that …\nAdd isolated lifetimes to the graph.\nReturns the transitively reachable lifetimes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>LifetimeEnv</code> for a method, accounting for …\nReturns a <code>LifetimeEnv</code> for a struct, accounding for …\nReturns the index of a lifetime in the graph, or <code>None</code> if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the graph contains no lifetimes.\nReturns the number of lifetimes in the graph.\nThe name of the lifetime.\n<code>&lt;&#39;a, &#39;b, &#39;c&gt;</code>\nReturns a new <code>LifetimeTransitivity</code> that finds all longer …\nPointers to all lifetimes that live <em>at least</em> as long as …\nReturns all the lifetimes longer than a provided …\nIterate through the names of the lifetimes in scope.\nReturns a new <code>LifetimeTransitivity</code>.\nConstruct an empty <code>LifetimeEnv</code>.\nReturns a new <code>LifetimeTransitivity</code> that finds all shorter …\nPointers to all lifetimes that this lives <em>at least</em> as long …\nReturns all the lifetimes shorter than the provided …\nReturns the inner <code>NamedLifetime</code> if the lifetime is the …\nConverts the <code>Lifetime</code> back into an AST node that can be …\nVisits a lifetime, as well as all the nodes it’s …\nParameters in a method that might be borrowed in the …\nThe type of lifetime.\nA method declared in the <code>impl</code> associated with an FFI …\nA parameter taken by a <code>Method</code>, not including <code>self</code>.\nParam must live at least as long as the returned object.\nThe <code>self</code> parameter taken by a <code>Method</code>.\nParam must live for the duration of the program.\nThe list of <code>cfg</code> attributes (if any).\nReturns the parameters that the output is lifetime-bound …\nReturns <code>true</code> if there are any borrowed params, otherwise …\nReturns <code>true</code> if the <code>self</code> param is borrowed, otherwise <code>false</code>…\nReturns <code>true</code> if a provided param name is included in the …\nReturns the documentation block\nLines of documentation for the method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts a <code>Method</code> from an AST node inside an <code>impl</code>.\nThe name of the FFI function wrapping around the method.\nChecks if any parameters are writeable (regardless of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there are no borrowed parameters, …\nCheck if this parameter is a Writeable\nChecks whether the method qualifies for special writeable …\nReturns the number of borrowed params.\nThe lifetimes introduced in this method and surrounding …\nThe name of the method as initially declared.\nThe name of the parameter in the original method …\nAll non-<code>self</code> params taken by the method.\nThe type of the parameter, which will be a named reference …\nThe lifetime and mutability of the <code>self</code> param, if it’s a …\nReturns an <code>Iterator</code> through the names of the parameters …\nThe return type of the method, if any.\nThe <code>self</code> param of the method, if any.\nReturns an <code>Iterator</code> through the names of the parameters …\nThe type of the parameter.\nCustom Diplomat attribute that can be placed on a struct …\nThe <code>#[diplomat::opaque]</code> attribute, used for marking a …\nThe <code>#[diplomat::opaque_mut]</code> attribute, used for marking a …\nThe <code>#[diplomat::out]</code> attribute, used for non-opaque …\nFuses all declared types into a single environment <code>HashMap</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all custom types across all modules defined in a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a <code>DiplomatStructAttribute</code> from an array of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA struct annotated with [<code>diplomat::opaque</code>] whose fields …\nA struct declaration in an FFI module that is not opaque.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract a <code>Struct</code> metadata value from an AST node.\nExtract a <code>OpaqueStruct</code> metadata value from an AST node.\nA symbol that is a pointer to another path.\nA <code>Box&lt;T&gt;</code> type.\nA type declared inside a Diplomat-annotated module.\nA symbol that is a custom type.\nA fieldless enum.\nA symbol declared in a module, which can either be a …\nAn unresolved path to a custom type, which can be resolved …\nA struct annotated with [<code>diplomat::opaque</code>] whose fields …\nA <code>Option&lt;T&gt;</code> type.\nstd::cmp::Ordering or core::cmp::Ordering\nA named type that is just a path, e.g. …\nA built-in Rust scalar primitive.\nA <code>&amp;[T]</code> or <code>Box&lt;[T]&gt;</code> type, where <code>T</code> is a primitive. Owned …\nA built-in Rust primitive scalar type.\nAn optionally mutable reference to another type.\nAn <code>fmt::Display</code> type for formatting Rust references.\nA <code>Result&lt;T, E&gt;</code> or <code>diplomat_runtime::DiplomatWriteable</code> …\nThe <code>Self</code> type.\nA <code>&amp;DiplomatStr</code> or <code>Box&lt;DiplomatStr&gt;</code> type. Owned strings don…\n<code>&amp;[&amp;DiplomatStr]</code>\nA non-opaque struct whose fields will be visible across …\nA symbol that is a submodule.\nA local type reference, such as the type of a field, …\nThe <code>()</code> type.\nThe caller guarantees that they’re passing valid UTF-8, …\nReturns <code>true</code> if all lifetimes satisfy a predicate, …\nGet all rust links on this type and its methods\nReturns <code>true</code> if any lifetime satisfies a predicate, …\na primitive byte that is not meant to be interpreted …\nGet the doc lines of the custom type.\nThe name of the destructor in C\nGet the <code>Self</code> type from a struct declaration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtract a <code>TypeName</code> from a <code>syn::Type</code> AST node. The …\nShorthand ternary operator for choosing a value based on …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>&amp;self</code> is the immutable variant, otherwise …\nReturns <code>true</code> if <code>&amp;self</code> is the mutable variant, otherwise …\nReturns <code>true</code> if <code>self</code> is the <code>TypeName::SelfType</code> variant, …\nGet the lifetimes of the custom type.\nReturns all lifetimes in a <code>LifetimeEnv</code> that must live at …\nGet the methods declared in impls of the custom type.\nGet the name of the custom type, which is unique within a …\nIf this is a <code>TypeName::Named</code>, grab the <code>CustomType</code> it …\nIf this is a <code>TypeName::Named</code>, grab the <code>CustomType</code> it …\nReturns all lifetimes in a <code>LifetimeEnv</code> that are outlived …\nConverts the <code>TypeName</code> back into an AST node that can be …\nVisits the provided <code>LifetimeTransitivity</code> value with all …\nRecurse down the type tree, visiting all lifetimes.\nThe type resolution environment\nThe type resolution environment within a specific module\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven a path to a module and a name, get the item, if any\nGiven an item name, fetch it\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all items in this module\nIterate over all name-item pairs in this module\nIterate over all items in the environment\nIterate over all modules\nIterate over all names in this module")