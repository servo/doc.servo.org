searchState.loadedDescShard("flate2", 0, "A DEFLATE-based stream compression/decompression library\nIndicates that forward progress is not possible due to …\nRaw in-memory compression stream for blocks of data.\nError returned when a compression object is used …\nWhen compressing data, the compression level can be …\nThe CRC calculated by a <code>CrcReader</code>.\nA wrapper around a <code>Read</code> that calculates the CRC.\nA wrapper around a <code>Write</code> that calculates the CRC.\nRaw in-memory decompression stream for blocks of data.\nError returned when a decompression object finds that the …\nPending input is processed and pending output is flushed.\nPending input is processed and pending output is flushed.\nValues which indicate the form of flushing to be used when …\nValues which indicate the form of flushing to be used when …\nAll output is flushed as with <code>Flush::Sync</code> and the …\nA builder structure to create a new gzip Encoder.\nA structure representing the header of a gzip stream.\nA typical parameter for passing to …\nA typical parameter for passing to …\nIndicates success.\nAll pending output is flushed to the output buffer, but …\nPossible status results of compressing some data or …\nIndicates that all input has been consumed and all output …\nAll pending output is flushed to the output buffer and the …\nAll pending output is flushed to the output buffer and the …\nOptimize for the size of data being encoded.\nTypes which operate over <code>BufRead</code> streams, both encoders …\nSimple CRC bindings backed by miniz.c\nOptimize for the best speed of encoding.\nThis module contains backend-specific code.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns an integer representing the compression level, …\nCreates a new description of the compression level with an …\nNo compression is to be performed, this may actually …\nTypes which operate over <code>Read</code> streams, both encoders and …\nTypes which operate over <code>Write</code> streams, both encoders and …\nA DEFLATE decoder, or decompressor.\nA DEFLATE encoder, or compressor.\nA decoder for a single member of a gzip file.\nA gzip streaming encoder\nA gzip streaming decoder that decodes a gzip file that may …\nA ZLIB decoder, or decompressor.\nA ZLIB encoder, or compressor.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe CRC calculated by a <code>CrcReader</code>.\nA wrapper around a <code>Read</code> that calculates the CRC.\nA wrapper around a <code>Write</code> that calculates the CRC.\nThe number of bytes that have been used to calculate the …\nCombine the CRC with the CRC for the subsequent block of …\nGet the Crc for this <code>CrcReader</code>.\nGet the Crc for this <code>CrcWriter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the reader that is wrapped by …\nGet a mutable reference to the writer that is wrapped by …\nGet the reader that is wrapped by this <code>CrcReader</code> by …\nGet the writer that is wrapped by this <code>CrcWriter</code> by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the reader that is wrapped by this <code>CrcReader</code>.\nGet the writer that is wrapped by this <code>CrcWriter</code>.\nCreate a new CRC.\nCreate a new <code>CrcReader</code>.\nCreate a new <code>CrcWriter</code>.\nReset the CRC.\nReset the Crc in this <code>CrcReader</code>.\nReset the Crc in this <code>CrcWriter</code>.\nReturns the current crc32 checksum.\nUpdate the CRC with the bytes in <code>data</code>.\nA DEFLATE decoder, or decompressor.\nA DEFLATE encoder, or compressor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying stream\nAcquires a mutable reference to the underlying stream\nAcquires a reference to the underlying reader\nAcquires a reference to the underlying stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this encoder, returning the underlying reader.\nConsumes this decoder, returning the underlying reader.\nCreates a new encoder which will read uncompressed data …\nCreates a new decoder which will decompress data read from …\nResets the state of this encoder entirely, swapping out …\nResets the state of this decoder entirely, swapping out …\nResets the state of this decoder’s data\nReturns the number of bytes that have been read into this …\nReturns the number of bytes that the decompressor has …\nReturns the number of bytes that the compressor has …\nReturns the number of bytes that the decompressor has …\nA DEFLATE decoder, or decompressor.\nA DEFLATE encoder, or compressor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying stream\nAcquires a mutable reference to the underlying stream\nAcquires a reference to the underlying reader\nAcquires a reference to the underlying stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this encoder, returning the underlying reader.\nConsumes this decoder, returning the underlying reader.\nCreates a new encoder which will read uncompressed data …\nCreates a new decoder which will decompress data read from …\nSame as <code>new</code>, but the intermediate buffer for data is …\nResets the state of this encoder entirely, swapping out …\nResets the state of this decoder entirely, swapping out …\nReturns the number of bytes that have been read into this …\nReturns the number of bytes that the decompressor has …\nReturns the number of bytes that the compressor has …\nReturns the number of bytes that the decompressor has …\nA DEFLATE decoder, or decompressor.\nA DEFLATE encoder, or compressor.\nConsumes this encoder, flushing the output stream.\nConsumes this encoder, flushing the output stream.\nConsumes this encoder, flushing the output stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying writer.\nAcquires a mutable reference to the underlying writer.\nAcquires a reference to the underlying writer.\nAcquires a reference to the underlying writer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new encoder which will write compressed data to …\nCreates a new decoder which will write uncompressed data …\nResets the state of this encoder entirely, swapping out …\nResets the state of this decoder entirely, swapping out …\nReturns the number of bytes that have been written to this …\nReturns the number of bytes that the decompressor has …\nReturns the number of bytes that the compressor has …\nReturns the number of bytes that the decompressor has …\nAttempt to finish this output stream, writing out final …\nAttempt to finish this output stream, writing out final …\nTraits specifying the interface of the backends.\nImplementation for <code>miniz_oxide</code> rust backend.\nNot implemented.\nBuffer-related error.\nError in inflation; see <code>inflate::stream::inflate()</code> for …\nHow compressed data is wrapped.\nContains the error value\nUnused\nAttempt to flush the remaining data and end the stream.\nSame as <code>Sync</code>, but resets the compression dictionary so …\nA list of miniz failed status codes.\nA list of flush types.\n<code>Result</code> alias for all miniz status codes both successful …\nA list of miniz successful status codes.\nUnused\nUnused\nDon’t force any flushing. Used when more input data is …\nContains the success value\nOperation succeeded.\nBad parameters.\nZlib partial flush. Currently treated as <code>Sync</code>.\nRaw DEFLATE.\nGeneral stream error.\nOperation succeeded and end of deflate stream was found.\nA structure containing the result of a call to the inflate …\nFinish compressing the currently buffered data, and output …\nUnused\nZlib wrapped but ignore and don’t compute the adler32 …\nWrapped using the zlib format.\nThe number of bytes consumed from the input slice.\nThe number of bytes written to the output slice.\nThis module contains functionality for compression.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis module contains functionality for decompression.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an MZFlush value from an integer value.\nThe return status of the call.\nSlow/high compression. Do a lot of checks to try to find …\nFast compression. Uses a special compression routine that …\nHow much processing the compressor should do to compress …\nUse the default compression level.\nDefault compromise between speed and compression.\nDon’t do any compression, only output uncompressed …\nEven more checks, can be very slow.\nCompress the input data to a vector, using the specified …\nCompress the input data to a vector, using the specified …\nStreaming compression functionality.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtra streaming compression functionality.\nUsage error.\nCallback function and user used in <code>compress_to_output</code>.\nStrategy setting for compression.\nMain compression struct.\nDon’t use any of the special strategies.\nCompression succeeded and the deflate stream was ended.\nOnly use matches that are at least 5 bytes long.\nTry to flush everything and end the deflate stream.\nOnly use static/fixed blocks. (Blocks using the default …\nSame as <code>Sync</code>, but reset the dictionary so that the …\nDon’t look for matches, only huffman encode the literals.\nNormal operation.\nCompression succeeded normally.\nError putting data into output buffer.\nOnly look for matches with a distance of 1, i.e do …\nTry to flush all the current data and output an empty raw …\nA list of deflate flush types.\nReturn status of compression.\nGet the adler32 checksum of the currently encoded data.\nMain compression function. Tries to compress as much as …\nMain compression function. Callbacks output.\nCreate a set of compression flags using parameters used by …\nReturns whether the compressor is wrapping the data in a …\nInitialize the compressor with a level of 4, zlib wrapper …\nGet the raw compressor flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>CompressorOxide</code> with the given flags.\nGet the return status of the previous <code>compress</code> call with …\nReset the state of the compressor, keeping the same …\nSet the compression level of the compressor.\nSet the compression level of the compressor using an …\nUpdate the compression settings of the compressor.\nShould we compute the adler32 checksum.\nOnly use matches that are at least 6 bytes long.\nForce the compressor to only output raw/uncompressed …\nForce the compressor to only output static blocks. (Blocks …\nShould we use greedy parsing (as opposed to lazy parsing …\nUsed in miniz to skip zero-initializing hash and dict. We …\nOnly look for matches with a distance of 0.\nWhether to use a zlib wrapper.\nTry to compress from input to output with the given …\nThe decompression went fine, but the adler32 checksum did …\nThe output buffer is an invalid size; consider the <code>flags</code> …\nStruct return when decompress_to_vec functions fail.\nFinished decompression without issues.\nFailed to decompress due to invalid data.\nMore input data was expected, but the caller indicated …\nThere is still pending data that didn’t fit in the …\nThe decompressor needs more input data to continue …\nReturn status codes.\nStreaming decompression functionality.\nDecompress one or more source slices from an iterator into …\nDecompress the deflate-encoded data in <code>input</code> to a vector.\nDecompress the deflate-encoded data in <code>input</code> to a vector.\nDecompress the deflate-encoded data (with a zlib wrapper) …\nDecompress the deflate-encoded data (with a zlib wrapper) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe currently decompressed data if any.\nDecompressor status on failure. See TINFLStatus for …\nExtra streaming decompression functionality.\nMain decompression struct.\nReturns the adler32 checksum of the currently decompressed …\nReturns the adler32 that was read from the zlib header if …\nMain decompression function. Keeps decompressing data from …\nCreate a new tinfl_decompressor with all fields set to 0.\nReturns the argument unchanged.\nFlags to <code>decompress()</code> to control how inflation works.\nSet the current state to <code>Start</code>.\nCalls <code>U::from(self)</code>.\nCreate a new tinfl_decompressor with all fields set to 0.\nCalculate the adler32 checksum of the output data even if …\nThere will be more input that hasn’t been given to the …\nIgnore adler32 checksum even if we are inflating a zlib …\nShould we try to parse a zlib header?\nThe output buffer should not wrap around.\nFull reset of the state, including zeroing memory.\nA struct that compbines a decompressor with extra data for …\nResets state, without performing expensive ops (e.g. …\nTag that determines reset policy of InflateState\nResets state and zero memory, continuing to use the same …\nAccess the innner decompressor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to decompress from <code>input</code> to <code>output</code> with the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the status of the last call to <code>inflate</code> with this …\nCreate a new state.\nCreate a new state on the heap.\nCreate a new state using miniz/zlib style window bits …\nPerforms reset\nReset the decompressor without re-allocating memory, using …\nResets the state according to specified policy.\nA builder structure to create a new gzip Encoder.\nA structure representing the header of a gzip stream.\nConsume this builder, creating a reader encoder in the …\nReturns the <code>comment</code> field of this gzip stream’s header, …\nConfigure the <code>comment</code> field in the gzip header.\nReturns the <code>extra</code> field of this gzip stream’s header, if …\nConfigure the <code>extra</code> field in the gzip header.\nReturns the <code>filename</code> field of this gzip stream’s header, …\nConfigure the <code>filename</code> field in the gzip header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis gives the most recent modification time of the …\nConfigure the <code>mtime</code> field in the gzip header.\nReturns the most recent modification time represented by a …\nCreate a new blank builder with no header by default.\nReturns the <code>operating_system</code> field of this gzip stream’s …\nConfigure the <code>operating_system</code> field in the gzip header.\nConsume this builder, creating a reader encoder in the …\nConsume this builder, creating a writer encoder in the …\nA decoder for a single member of a gzip file.\nA gzip streaming encoder\nA gzip streaming decoder that decodes a gzip file that may …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying reader.\nAcquires a mutable reference to the underlying stream.\nAcquires a mutable reference to the underlying stream.\nAcquires a reference to the underlying reader.\nAcquires a reference to the underlying reader.\nAcquires a reference to the underlying reader.\nReturns the header associated with this stream, if it was …\nReturns the current header associated with this stream, if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying stream, consuming this encoder\nConsumes this decoder, returning the underlying reader.\nConsumes this decoder, returning the underlying reader.\nCreates a new encoder which will use the given compression …\nCreates a new decoder from the given reader, immediately …\nCreates a new decoder from the given reader, immediately …\nA decoder for a single member of a gzip file.\nA gzip streaming encoder\nA gzip streaming decoder that decodes a gzip file that may …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying reader.\nAcquires a mutable reference to the underlying stream.\nAcquires a mutable reference to the underlying stream.\nAcquires a reference to the underlying reader.\nAcquires a reference to the underlying reader.\nAcquires a reference to the underlying reader.\nReturns the header associated with this stream, if it was …\nReturns the current header associated with this stream, if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying stream, consuming this encoder\nConsumes this decoder, returning the underlying reader.\nConsumes this decoder, returning the underlying reader.\nCreates a new encoder which will use the given compression …\nCreates a new decoder from the given reader, immediately …\nCreates a new decoder from the given reader, immediately …\nA decoder for a single member of a gzip file.\nA gzip streaming encoder\nA gzip streaming decoder that decodes a gzip file with …\nFinish encoding this stream, returning the underlying …\nConsumes this decoder, flushing the output stream.\nConsumes this decoder, flushing the output stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying writer.\nAcquires a mutable reference to the underlying writer.\nAcquires a mutable reference to the underlying writer.\nAcquires a reference to the underlying writer.\nAcquires a reference to the underlying writer.\nAcquires a reference to the underlying writer.\nReturns the header associated with this stream.\nReturns the header associated with the current member.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new encoder which will use the given compression …\nCreates a new decoder which will write uncompressed data …\nCreates a new decoder which will write uncompressed data …\nAttempt to finish this output stream, writing out final …\nAttempt to finish this output stream, writing out final …\nAttempt to finish this output stream, writing out final …\nIndicates that forward progress is not possible due to …\nRaw in-memory compression stream for blocks of data.\nError returned when a compression object is used …\nRaw in-memory decompression stream for blocks of data.\nError returned when a decompression object finds that the …\nThe inner state for an error when decompressing\nPending input is processed and pending output is flushed.\nPending input is processed and pending output is flushed.\nValues which indicate the form of flushing to be used when …\nValues which indicate the form of flushing to be used when …\nAll output is flushed as with <code>Flush::Sync</code> and the …\nA typical parameter for passing to …\nA typical parameter for passing to …\nIndicates success.\nAll pending output is flushed to the output buffer, but …\nPossible status results of compressing some data or …\nIndicates that all input has been consumed and all output …\nAll pending output is flushed to the output buffer and the …\nAll pending output is flushed to the output buffer and the …\nCompresses the input data into the output, consuming only …\nCompresses the input data into the extra space of the …\nDecompresses the input data into the output, consuming …\nDecompresses the input data into the extra space in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieve the implementation’s message about why the …\nRetrieve the implementation’s message about why the …\nIndicates whether decompression failed due to requiring a …\nCreates a new object ready for compressing data that it’…\nCreates a new object ready for decompressing data that it…\nQuickly resets this compressor without having to …\nPerforms the equivalent of replacing this decompression …\nReturns the total number of input bytes which have been …\nReturns the total number of input bytes which have been …\nReturns the total number of output bytes which have been …\nReturns the total number of output bytes which have been …\nAllows <code>writer</code> to write data into the spare capacity of the …\nA DEFLATE decoder, or decompressor.\nA DEFLATE encoder, or compressor.\nA decoder for a single member of a gzip file.\nA gzip streaming encoder\nA gzip streaming decoder that decodes a gzip file that may …\nA ZLIB decoder, or decompressor.\nA ZLIB encoder, or compressor.\nA DEFLATE decoder, or decompressor.\nA DEFLATE encoder, or compressor.\nA decoder for a single member of a gzip file.\nA gzip streaming encoder\nA gzip streaming decoder that decodes a gzip file with …\nA ZLIB decoder, or decompressor.\nA ZLIB encoder, or compressor.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA ZLIB decoder, or decompressor.\nA ZLIB encoder, or compressor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying stream\nAcquires a mutable reference to the underlying stream\nAcquires a reference to the underlying reader\nAcquires a reference to the underlying stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this encoder, returning the underlying reader.\nConsumes this decoder, returning the underlying reader.\nCreates a new encoder which will read uncompressed data …\nCreates a new decoder which will decompress data read from …\nCreates a new encoder with the given <code>compression</code> settings …\nCreates a new decoder which will decompress data read from …\nResets the state of this encoder entirely, swapping out …\nResets the state of this decoder entirely, swapping out …\nReturns the number of bytes that have been read into this …\nReturns the number of bytes that the decompressor has …\nReturns the number of bytes that the compressor has …\nReturns the number of bytes that the decompressor has …\nA ZLIB decoder, or decompressor.\nA ZLIB encoder, or compressor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying stream\nAcquires a mutable reference to the underlying stream\nAcquires a reference to the underlying stream\nAcquires a reference to the underlying stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this encoder, returning the underlying reader.\nConsumes this decoder, returning the underlying reader.\nCreates a new encoder which will read uncompressed data …\nCreates a new decoder which will decompress data read from …\nCreates a new decoder which will decompress data read from …\nCreates a new encoder with the given <code>compression</code> settings …\nCreates a new decoder which will decompress data read from …\nCreates a new decoder which will decompress data read from …\nResets the state of this encoder entirely, swapping out …\nResets the state of this decoder entirely, swapping out …\nReturns the number of bytes that have been read into this …\nReturns the number of bytes that the decompressor has …\nReturns the number of bytes that the compressor has …\nReturns the number of bytes that the decompressor has …\nA ZLIB decoder, or decompressor.\nA ZLIB encoder, or compressor.\nConsumes this encoder, flushing the output stream.\nConsumes this encoder, flushing the output stream.\nConsumes this encoder, flushing the output stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying writer.\nAcquires a mutable reference to the underlying writer.\nAcquires a reference to the underlying writer.\nAcquires a reference to the underlying writer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new encoder which will write compressed data to …\nCreates a new decoder which will write uncompressed data …\nCreates a new encoder which will write compressed data to …\nCreates a new decoder which will write uncompressed data …\nResets the state of this encoder entirely, swapping out …\nResets the state of this decoder entirely, swapping out …\nReturns the number of bytes that have been written to this …\nReturns the number of bytes that the decompressor has …\nReturns the number of bytes that the compressor has …\nReturns the number of bytes that the decompressor has …\nAttempt to finish this output stream, writing out final …\nAttempt to finish this output stream, writing out final …")