searchState.loadedDescShard("zerotrie", 0, "A data structure offering zero-copy storage and retrieval …\nThe collection reached its maximum supported capacity.\nThe builder could not solve the perfect hash function.\nMixed-case data was added to a case-insensitive trie.\nNon-ASCII data was added to an ASCII-only collection.\nA data structure that compactly maps from ASCII strings to …\nA data structure that compactly maps from byte sequences …\nError types for the <code>zerotrie</code> crate.\nA data structure that maps from a large number of byte …\nA data structure that compactly maps from byte strings to …\nA data structure that compactly maps from ASCII strings to …\nZeroTrie Builder\nByte Perfect Hash Function Internals\nTypes for walking stepwise through a trie.\nOptions for building and reading from a ZeroTrie.\nInternal layout of ZeroTrie\nVarint spec for ZeroTrie:\nIntermediate metadata for a branch node under construction.\nThe lead byte for this branch. Formerly it was required to …\nCreates a new empty <code>BranchMeta</code>.\nThe number of later sibling branches, including this.\nThe size in bytes of this and all later sibling branches.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe size in bytes of the trie data reachable from this …\nA struct transparent over <code>[u8]</code> with convenient helper …\nReturns the byte at the given index, panicking if out of …\nConst function to evaluate <code>self &lt; other</code>.\nConst function to evaluate …\nThis module contains internal collections for the const …\nA low-level builder for ZeroTrieSimpleAscii. Works in …\nPerforms the operation <code>self[index] |= bits</code>\nThe actual builder algorithm. For an explanation, see …\nReturns the argument unchanged.\nCreates a new builder containing the elements in the given …\nCreates a new builder containing the elements in the given …\nCalls <code>U::from(self)</code>.\nCreates a new empty builder.\nPrepends an ASCII node to the front of the builder. …\nPrepends a branch node to the front of the builder. …\nPrepends multiple zeros to the front of the builder. …\nPrepends multiple arbitrary bytes to the front of the …\nPrepends a value node to the front of the builder. Returns …\nReturns the trie data, panicking if the buffer is the …\nA const-friendly mutable data structure backed by an array.\nA data structure that holds up to K <code>BranchMeta</code> items.\nA const-friendly slice type. It is backed by a full slice …\nReturns the initialized elements as a <code>ConstSlice</code>.\nNon-const function that returns the initialized elements …\nNon-const function that returns this <code>ConstSlice</code> as a …\nNon-const function that returns a slice of the initialized …\nSpecialized function that performs <code>self[index] |= bits</code>\nPrepends multiple elements to the front of the builder, …\nEvaluates a block over each element of a const slice. …\nPrepends an element to the front of the builder, panicking …\nTakes a fully initialized builder as an array. Panics if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>ConstSlice</code> with the given start and limit.\nCreates a new builder with some initial content in …\nCreates a <code>ConstSlice</code> representing an entire slice.\nThe full slice.\nReturns a copy of the <code>BranchMeta</code> at the specified index.\nGets the element at <code>index</code>, panicking if not present.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the stack is empty.\nWhether there are no initialized elements in the builder.\nGets the last element or <code>None</code> if empty.\nReturns the length of the <code>ConstSlice</code>.\nReturns the number of initialized elements in the builder.\nThe non-inclusive end index of the slice represented by …\nConverts this builder-array of <code>BranchMeta</code> to one of the …\nCreates a new empty <code>ConstLengthsStack</code>.\nCreates a new, empty builder of the given size. <code>cursor</code> …\nReturns a copy of the <code>BranchMeta</code> on the top of the stack, …\nRemoves many <code>BranchMeta</code>s from the stack, returning them in …\nAdds a <code>BranchMeta</code> to the stack, panicking if there is no …\nThe start index of the slice represented by this <code>ConstSlice</code>…\nSwaps the elements at positions <code>i</code> and <code>j</code>.\nThis module contains internal collections for the …\nA low-level builder for ZeroTrie. Supports all options.\nThe actual builder algorithm. For an explanation, see …\nReturns the argument unchanged.\nBuilds a ZeroTrie from an iterator of bytes. It first …\nBuilds a ZeroTrie with the given items and options. …\nInternal constructor that does not re-sort the items.\nCalls <code>U::from(self)</code>.\nPrepends a byte value to the front of the builder. If it …\nPrepends a branch node to the front of the builder. …\nPrepends multiple arbitrary bytes to the front of the …\nPrepends a value node to the front of the builder. Returns …\nReturns the trie data as a <code>Vec&lt;u8&gt;</code>.\nA data structure that holds any number of <code>BranchMeta</code> items.\nA trait applied to a data structure for building a …\nNon-const function that returns the initialized elements …\nPerform the operation <code>self[index] |= bits</code>\nPush multiple bytes to the front of the store.\nReturn the length in bytes of the store.\nCreate a new empty store.\nRemove and return the first element in the store, or <code>None</code> …\nPrepend <code>n</code> zeros to the front of the store.\nPush a byte to the front of the store.\nSwap the adjacent ranges <code>self[start..mid]</code> and …\nRead the store into a <code>Vec&lt;u8&gt;</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether the stack is empty.\nCreates a new empty <code>NonConstLengthsStack</code>.\nReturns a copy of the <code>BranchMeta</code> on the top of the stack, …\nRemoves many <code>BranchMeta</code>s from the stack, returning them in …\nAdds a <code>BranchMeta</code> to the stack.\nThe cutoff for the fast version of <code>f1</code>.\nThe maximum allowable value of <code>p</code>. This could be raised if …\nA constant-time map from bytes to unique indices.\nThe cutoff for the fast version of <code>f2</code>.\nThe maximum allowable value of <code>q</code>. This could be raised if …\nConverts from <code>PerfectByteHashMap&lt;AsRef&lt;[u8]&gt;&gt;</code> to …\nReturns the map as bytes. The map can be recovered with …\nCalculates the function <code>f1</code> for the PHF. For the exact …\nCalculates the function <code>f2</code> for the PHF. For the exact …\nReturns the argument unchanged.\nCreates an instance from pre-existing bytes. See …\nCreates an instance from a pre-existing store. See …\nGets the usize for the given byte, or <code>None</code> if it is not in …\nCalls <code>U::from(self)</code>.\nGet an iterator over the keys in the order in which they …\nThis is called <code>num_items</code> because <code>len</code> is ambiguous: it …\nComputes a new <code>PerfectByteHashMap</code>.\nTo speed up the search algorithm, we limit the number of …\nDirectly compute the perfect hash function.\nHelper class for caching the results of multiple …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new empty instance.\nGets the <code>PerfectByteHashMap</code> for the given bytes, …\nInformation about a probed edge.\nA cursor into a <code>ZeroAsciiIgnoreCaseTrie</code>, useful for …\nA cursor into a <code>ZeroTrieSimpleAscii</code>, useful for stepwise …\nThe character’s byte value between this node and its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the cursor points to an empty trie.\nChecks whether the cursor points to an empty trie.\nSteps the cursor one character into the trie based on an …\nProbes the next byte in the cursor.\nSteps the cursor one character into the trie based on the …\nSteps the cursor one byte into the trie.\nTakes the value at the current position.\nTakes the value at the current position.\nThe number of siblings of this node, <em>including itself</em>.\nEquivalent to <code>ZeroTrieSimpleAsciiCursor::step()</code>, except …\nEquivalent to <code>ZeroAsciiIgnoreCaseTrieCursor::step()</code>, …\nSteps the cursor through each ASCII byte of the string.\nSteps the cursor through each ASCII byte of the string.\nThe collection reached its maximum supported capacity.\nThe builder could not solve the perfect hash function.\nError types for the <code>zerotrie</code> crate.\nMixed-case data was added to a case-insensitive trie.\nNon-ASCII data was added to an ASCII-only collection.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe maximum number of base-10 digits required for …\nFormats a usize as a string of length N, padded with …\nLike slice::split_at but debug-panics and returns an empty …\nUnwraps the option or panics in debug mode, returning the …\nLike slice::split_at but returns an Option instead of …\nWhether to support non-ASCII data in the ZeroTrie.\nSupport only ASCII, returning an error if non-ASCII is …\nUse binary search for all branch nodes.\nSupport all data, creating span nodes for non-ASCII bytes.\nWhether to enforce a limit to the capacity of the ZeroTrie.\nHow to handle strings with mixed ASCII case at a node, …\nConstruct the trie without returning an error.\nReject strings with different case and sort them as if …\nReturn an error if the trie requires a branch of more than …\nWhether to use the perfect hash function in the ZeroTrie.\nAllow all strings and sort them by byte value.\nUse the perfect hash function for large branch nodes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn ASCII node. Contains a single literal ASCII byte and no …\nA branch node. Contains a varint of the number of output …\nThe node type. See the module-level docs for more …\nA span node. Contains a varint indicating how big the span …\nA value node. Contains a varint representing the value.\nInternal iterator type for walking the strings contained …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven a slice starting with an offset table, returns the …\nVersion of <code>get_branch()</code> specialized for the case <code>w == 0</code> …\nPanics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSteps one node into the trie, assuming all branch nodes …\nIntermediate state during iteration:\nSteps one node into the trie assuming all branch nodes are …\nSteps one node into the trie if the head node is a value …\nWhether the PHF is enabled on this trie.\nReads a varint with 2 bits of metadata in the lead byte.\nReads a varint with 3 bits of metadata in the lead byte.\nReads and removes a varint with 3 bits of metadata from a …\nReturns a new <code>ConstArrayBuilder</code> containing a varint with 2 …\nReturns a new <code>ConstArrayBuilder</code> containing a varint with 3 …\nA data structure that compactly maps from ASCII strings to …\nA data structure that compactly maps from byte sequences …\nA data structure that maps from a large number of byte …\nA data structure that compactly maps from byte strings to …\nA data structure that compactly maps from ASCII strings to …\nReturns this trie as a reference transparent over a byte …\nReturns this trie as a reference transparent over a byte …\nReturns this trie as a reference transparent over a byte …\nReturns this trie as a reference transparent over a byte …\nReturns a trie with a store borrowing from this trie.\nReturns a trie with a store borrowing from this trie.\nReturns a trie with a store borrowing from this trie.\nReturns a trie with a store borrowing from this trie.\nReturns the bytes contained in the underlying store.\nReturns the bytes contained in the underlying store.\nReturns the bytes contained in the underlying store.\nReturns the bytes contained in the underlying store.\nReturns the size of the trie in number of bytes.\nReturns the size of the trie in number of bytes.\nReturns the size of the trie in number of bytes.\nReturns the size of the trie in number of bytes.\nReturns the size of the trie in number of bytes.\nConverts this trie’s store to a different store …\nConverts this trie’s store to a different store …\nConverts this trie’s store to a different store …\nConverts this trie’s store to a different store …\nConverts this trie’s store to a different store …\nGets a cursor into the current trie.\nGets a cursor into the current trie.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCasts from a byte slice to a reference to a trie with the …\nCasts from a byte slice to a reference to a trie with the …\nCasts from a byte slice to a reference to a trie with the …\nCasts from a byte slice to a reference to a trie with the …\n<strong>Const Constructor:</strong> Creates an <code>ZeroTrieSimpleAscii</code> from a …\n<strong>Const Constructor:</strong> Creates an <code>ZeroTrieSimpleAscii</code> from a …\nCreate a trie directly from a store.\nCreate a trie directly from a store.\nCreate a trie directly from a store.\nCreate a trie directly from a store.\nQueries the trie for a string.\nQueries the trie for a string.\nQueries the trie for a string.\nQueries the trie for a string.\nQueries the trie for a string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSame as <code>ZeroTrieSimpleAscii::cursor()</code> but moves self to …\nSame as <code>ZeroAsciiIgnoreCaseTrie::cursor()</code> but moves self …\nWrap this specific ZeroTrie variant into a ZeroTrie.\nWrap this specific ZeroTrie variant into a ZeroTrie.\nWrap this specific ZeroTrie variant into a ZeroTrie.\nReturns <code>true</code> if the trie is empty.\nReturns <code>true</code> if the trie is empty.\nReturns <code>true</code> if the trie is empty.\nReturns <code>true</code> if the trie is empty.\nReturns <code>true</code> if the trie is empty.\nReturns an iterator over the key/value pairs in this trie.\nReturns an iterator over the key/value pairs in this trie.\nReturns an iterator over the key/value pairs in this trie.\nReturns an iterator over the key/value pairs in this trie.\nTakes the byte store from this trie.\nTakes the byte store from this trie.\nTakes the byte store from this trie.\nTakes the byte store from this trie.\nTakes the byte store from this trie.\nExports the data from this ZeroTrie into a BTreeMap.\nExports the data from this ZeroTrie type into a BTreeMap.\nExports the data from this ZeroTrie type into a BTreeMap.\nExports the data from this ZeroTrie type into a BTreeMap.\nExports the data from this ZeroTrie type into a BTreeMap.\nThis impl allows <code>ZeroTrieSimpleAscii</code> to be used inside of …\nConverts a possibly-borrowed $name to an owned one.\nThis impl allows <code>ZeroAsciiIgnoreCaseTrie</code> to be used inside …\nConverts a possibly-borrowed $name to an owned one.\nConverts a possibly-borrowed $name to an owned one.\nThis impl allows <code>ZeroTriePerfectHash</code> to be used inside of …\nThis impl allows <code>ZeroTrieExtendedCapacity</code> to be used …\nConverts a possibly-borrowed $name to an owned one.")