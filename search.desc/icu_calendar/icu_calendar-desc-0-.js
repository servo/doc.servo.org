searchState.loadedDescShard("icu_calendar", 0, "Types for dealing with dates, times, and custom calendars.\nTypes that contain a calendar\nA calendar implementation\nThe calendar being wrapped\nA list of error outcomes for various operations in this …\nAn error originating inside of the data provider.\nA date for a given calendar.\nThe internal type used to represent dates\nA date+time for a given calendar.\nAn operation required a calendar but a calendar was not …\nMissing required input field for formatting\nOut of range\nAn input overflowed its range.\nAn input could not be parsed.\nThis exists as a wrapper around <code>&amp;&#39;a T</code> so that <code>Date&lt;&amp;&#39;a C&gt;</code> …\nAn input underflowed its range.\nNo support for a given calendar in AnyCalendar\nUnknown era\nUnknown month code for a given calendar\nModule for working with multiple calendars at once\nObtain the inner calendar\nThis module contains types and implementations for the …\nThis module contains types and implementations for the …\nThis module contains types and traits for use in the …\nThis module contains types and implementations for the …\nThis module contains types and implementations for the …\nThe date\nConstruct a date from era/month codes and fields\nConstruct the date from an ISO date\nObtain an ISO date from this date\nThe calendar-specific day-of-month represented by <code>date</code>\nInformation of the day of the year\nCount the number of days in a given month, specified by …\nCount the number of days in a given year, specified by …\nObtain a name for the calendar for debug printing\nThis module contains types and implementations for the …\nThis module contains types and implementations for the …\nThis module contains types and implementations for the …\nThis module contains types and implementations for the …\nCalculate if a date is in a leap year\nThis module contains types and implementations for the …\nThis module contains types and implementations for the ISO …\nThis module contains types and implementations for the …\nThis module contains types and implementations for the …\nThe calendar-specific month represented by <code>date</code>\nCount the number of months in a given year, specified by …\nThis module contains types and implementations for the …\n🚧 [Unstable] Data provider struct definitions for this …\nThis module contains types and implementations for the …\nThe time\nThis module contains various types used by <code>icu_calendar</code> …\nFunctions for week-of-month and week-of-year arithmetic.\nThe calendar-specific year represented by <code>date</code>\nThe name of the field\nThe name of the field\nThe maximum value\nThe minimum value\nThis is a calendar that encompasses all formattable …\nConvenient type for selecting the kind of AnyCalendar to …\nThe inner date type for <code>AnyCalendar</code>\nA <code>Buddhist</code> calendar\nA date for a <code>Buddhist</code> calendar\nThe kind of a <code>Buddhist</code> calendar\nA <code>Chinese</code> calendar\nA date for a <code>Chinese</code> calendar\nThe kind of a <code>Chinese</code> calendar\nA <code>Coptic</code> calendar\nA date for a <code>Coptic</code> calendar\nThe kind of a <code>Coptic</code> calendar\nA <code>Dangi</code> calendar\nA date for a <code>Dangi</code> calendar\nThe kind of a <code>Dangi</code> calendar\nAn <code>Ethiopian</code> calendar\nA date for an <code>Ethiopian</code> calendar\nThe kind of an <code>Ethiopian</code> calendar, with Amete Mihret era\nThe kind of an <code>Ethiopian</code> calendar, with Amete Alem era\nA <code>Gregorian</code> calendar\nA date for a <code>Gregorian</code> calendar\nThe kind of a <code>Gregorian</code> calendar\nA <code>Hebrew</code> calendar\nA date for a <code>Hebrew</code> calendar\nThe kind of a <code>Hebrew</code> calendar\nAn <code>Indian</code> calendar\nA date for an <code>Indian</code> calendar\nThe kind of a <code>Indian</code> calendar\nTrait for calendars that may be converted to <code>AnyCalendar</code>\nAn <code>IslamicCivil</code> calendar\nA date for an <code>IslamicCivil</code> calendar\nThe kind of an <code>IslamicCivil</code> calendar\nAn <code>IslamicObservational</code> calendar\nA date for an <code>IslamicObservational</code> calendar\nThe kind of an <code>IslamicObservational</code> calendar\nAn <code>IslamicTabular</code> calendar\nA date for an <code>IslamicTabular</code> calendar\nThe kind of an <code>IslamicTabular</code> calendar\nAn <code>IslamicUmmAlQura</code> calendar\nA date for an <code>IslamicUmmAlQura</code> calendar\nThe kind of an <code>IslamicUmmAlQura</code> calendar\nAn <code>Iso</code> calendar\nA date for an <code>Iso</code> calendar\nThe kind of an <code>Iso</code> calendar\nA <code>Japanese</code> calendar\nA date for a <code>Japanese</code> calendar\nThe kind of a <code>Japanese</code> calendar\nA <code>JapaneseExtended</code> calendar\nA date for a <code>JapaneseExtended</code> calendar\nThe kind of a <code>JapaneseExtended</code> calendar\nA <code>Persian</code> calendar\nA date for a <code>Persian</code> calendar\nThe kind of a <code>Persian</code> calendar\nA <code>Roc</code> calendar\nA date for a <code>Roc</code> calendar\nThe kind of a <code>Roc</code> calendar\nConvert to a BCP-47 string\nConvert to a BCP-47 <code>Value</code>\nGiven an AnyCalendar date, convert that date to another …\nGiven an AnyCalendar datetime, convert that date to …\nConvert a date for this calendar into an <code>AnyDateInner</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nInformation of the day of the year\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct from a BCP-47 byte string\nConstruct from a BCP-47 string\nConstruct from a BCP-47 <code>Value</code>\nExtract the calendar component from a <code>DataLocale</code>\nExtract the calendar component from a <code>Locale</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe calendar-specific check if <code>date</code> is in a leap year\nThe <code>AnyCalendarKind</code> corresponding to the calendar this …\nThe calendar-specific month represented by <code>date</code>\nConstructs an AnyCalendar for a given calendar kind from …\nConstructs an AnyCalendar for a given calendar kind from …\nConvert this calendar into an <code>AnyCalendar</code>, moving it\nConvert this calendar into an <code>AnyCalendar</code>, cloning it\nA version of <code>Self::new_for_locale</code> that uses custom data …\nA version of <code>Self::new_for_locale</code> that uses custom data …\nA version of <code>Self::new</code> that uses custom data provided by a …\nA version of <code>Self::new</code> that uses custom data provided by …\nThe calendar-specific year represented by <code>date</code>\nThe number of years the Buddhist Era is ahead of C.E. by\nThe Thai Solar Buddhist Calendar\nThe calendar-specific day-of-month represented by <code>date</code>\nInformation of the day of the year\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific year represented by <code>date</code>\nA calendar implementation\nThe internal type used to represent dates\nThe <code>AnyCalendarKind</code> corresponding to this calendar, if one …\nThe <code>AnyCalendarKind</code> corresponding to this calendar, if one …\nConstruct a date from era/month codes and fields\nConstruct the date from an ISO date\nObtain an ISO date from this date\nThe calendar-specific day-of-month represented by <code>date</code>\nCalculate the day of the week and return it\nCalculate the day of the week and return it\nInformation of the day of the year\nCount the number of days in a given month, specified by …\nCount the number of days in a given year, specified by …\nObtain a name for the calendar for debug printing\nCalculate if a date is in a leap year\nThe calendar-specific month represented by <code>date</code>\nCount the number of months in a given year, specified by …\nThe calendar-specific year represented by <code>date</code>\nMaximum number of iterations when iterating through the …\nIn case we plan to cache per-year data, this stores useful …\n1-based day of month\nCalculate the days in a given year Can be overridden with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGiven a calendar year, load (or compute) the YearInfo for …\nThe <code>types::FormattableMonth</code> for the current month (with …\n1-based month of year\nConstruct a new arithmetic date from a year, month code, …\nConstruct a new arithmetic date from a year, month …\nConstruct a new arithmetic date from a year, month …\nCreate a new <code>ArithmeticDate</code> without checking that <code>month</code> …\nCreate a new <code>ArithmeticDate</code> without checking that <code>month</code> …\nInvariant: MUST be updated to match the info for <code>year</code> …\nThe Chinese Calendar\nThe inner date type used for representing <code>Date</code>s of <code>Chinese</code>…\nThe <code>AnyCalendarKind</code> corresponding to this calendar\nThe calendar-specific day-of-month represented by <code>date</code>\nInformation of the day of the year\nObtain a name for the calendar for debug printing\nGet a FormattableYear from an integer Chinese year; …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe calendar-specific month code represented by <code>date</code>; …\nCreates a new <code>Chinese</code> with some precomputed calendrical …\nConstruct a new <code>Chinese</code> without any precomputed …\nA version of <code>Self::new</code> that uses custom data provided by a …\nA version of <code>Self::new</code> that uses custom data provided by …\nThe calendar-specific year represented by <code>date</code>\nChinese-based calendars define DateInner as a …\nContains any loaded precomputed data. If constructed with …\nThe trait ChineseBased is used by Chinese-based calendars …\nA data struct used to load and use information for a set …\nGet a ChineseBasedDateInner from a fixed date, with the …\nGet a ChineseBasedDateInner from a fixed date and the …\nGet the ordinal lunar month from a code for chinese-based …\nCompute ChineseBasedYearInfo for a given extended year\nCompute ChineseBasedYearInfo for a given extended year, …\nCalculate the number of days in the year so far for a …\nCalls <code>days_in_month</code> on an instance of ChineseBasedDateInner\nGets the days in the previous year\nCalls days_in_year on an instance of ChineseBasedDateInner\nGet a RataDie from a ChineseBasedDateInner\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the compiled const data for a ChineseBased calendar; …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe last day of year in the current month. <code>month</code> is …\nThe last day of year in the previous month. <code>month</code> is …\nGet which month is the leap month. This produces the month …\nGiven an ISO date (in both ArithmeticDate and R.D. …\nThe calendar-specific month code represented by <code>date</code>; …\nCall <code>months_in_year_with_info</code> on a <code>ChineseBasedDateInner</code>\nReturn the number of months in a given year, which is 13 …\nCreate a new arithmetic date from a year, month ordinal, …\nGet the new year R.D. given the extended year that this …\nGet the next new year R.D. given the extended year that …\nContains:\nThe Coptic Calendar\nThe inner date type used for representing <code>Date</code>s of <code>Coptic</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Dangi Calendar\nThe inner date type used for representing <code>Date</code>s of <code>Dangi</code>. …\nGet a <code>FormattableYear</code> from an integer Dangi year; …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Dangi</code> with some precomputed calendrical …\nConstruct a new <code>Dangi</code> without any precomputed calendrical …\nA version of <code>Self::new</code> that uses custom data provided by a …\nA version of <code>Self::new</code> that uses custom data provided by …\nTypes that contain a calendar\nThe calendar being wrapped\nA date for a given calendar.\nThis exists as a wrapper around <code>&amp;&#39;a T</code> so that <code>Date&lt;&amp;&#39;a C&gt;</code> …\nObtain the inner calendar\nGet a reference to the contained calendar\nGet a reference to the contained calendar wrapper\nThe calendar-specific day-of-month represented by <code>self</code>\nThe day of the week for this date\nThe calendar-specific day-of-month represented by <code>self</code>\nThe number of days in the month of this date\nThe number of days in the year of this date\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a date from raw values for a given calendar. …\nGet the inner date implementation. Should not be called …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether <code>self</code> is in a calendar-specific leap year\nThe calendar-specific month represented by <code>self</code>\nThe number of months in the year of this date\nConstruct a date from an ISO date and some calendar …\nType-erase the date, converting it to a date for …\nConvert the Date to a date in a different calendar\nConvert the Date to an ISO Date\nConstruct a new Buddhist Date.\nConstruct a new Chinese date from a <code>year</code>, <code>month</code>, and <code>day</code>. …\nConstruct new Coptic Date.\nConstruct a new Dangi date from a <code>year</code>, <code>month</code>, and <code>day</code>. …\nConstruct new Ethiopian Date.\nConstruct a date from from era/month codes and fields, and …\nConstruct a new Gregorian Date.\nConstruct new Hebrew Date.\nConstruct new Hebrew Date given a calendar.\nConstruct new Indian Date, with year provided in the Śaka …\nConstruct new Civil Islamic Date.\nConstruct new Tabular Islamic Date.\nConstruct a new ISO date from integers.\nConstruct a new Japanese Date.\nConstruct a new Japanese Date with all eras.\nConstruct new Julian Date.\nConstruct new Islamic Observational Date.\nConstruct new Persian Date.\nConstruct a new Republic of China calendar Date.\nConstruct new Islamic Umm al-Qura Date.\nConstructs an ISO date representing the UNIX epoch on …\nThe week of the month containing this date.\nThe week of the year containing this date.\nWrap the calendar type in <code>Arc&lt;T&gt;</code>\nWrap the calendar type in <code>Rc&lt;T&gt;</code>\nThe calendar-specific year represented by <code>self</code>\nA date+time for a given calendar.\nThe date\nReturns the argument unchanged.\nConvert minute count since 00:00:00 on Jan 1st, 1970 to …\nCalls <code>U::from(self)</code>.\nConstructs an ISO datetime representing the UNIX epoch on …\nMinute count representation of calendars starting from …\nConstruct a <code>DateTime</code> for a given <code>Date</code> and <code>Time</code>\nConstruct a DateTime from an ISO datetime and some …\nThe time\nType-erase the date, converting it to a date for …\nConvert the DateTime to a DateTime in a different calendar\nConvert the DateTime to an ISO DateTime\nConstruct a new Buddhist datetime from integers.\nConstruct a new Chinese datetime from integers using the …\nConstruct a new Coptic datetime from integers.\nConstruct a new Dangi DateTime from integers. See …\nConstruct a new Ethiopian datetime from integers.\nConstruct a datetime from from era/month codes and fields, …\nConstruct a new Gregorian datetime from integers.\nConstruct a new Hebrew datetime from integers.\nConstruct new Hebrew DateTime given a calendar.\nConstruct a new Indian datetime from integers, with year …\nConstruct a new Civil Islamic datetime from integers.\nConstruct a new Tabular Islamic datetime from integers.\nConstruct a new ISO datetime from integers.\nConstruct a new Japanese datetime from integers.\nConstruct a new Japanese datetime from integers with all …\nConstruct a new Julian datetime from integers.\nConstruct a new Islamic Observational datetime from …\nConstruct a new Persian datetime from integers.\nConstruct a new Republic of China calendar datetime from …\nConstruct a new Islamic Umm al-Qura datetime from integers.\nWrap the calendar type in <code>Arc&lt;T&gt;</code>\nWrap the calendar type in <code>Rc&lt;T&gt;</code>\nA list of error outcomes for various operations in this …\nAn error originating inside of the data provider.\nAn operation required a calendar but a calendar was not …\nMissing required input field for formatting\nOut of range\nAn input overflowed its range.\nAn input could not be parsed.\nAn input underflowed its range.\nNo support for a given calendar in AnyCalendar\nUnknown era\nUnknown month code for a given calendar\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate an error when an <code>AnyCalendarKind</code> is expected but …\nThe name of the field\nThe name of the field\nThe maximum value\nThe minimum value\nThe number of years the Amete Alem epoch precedes the …\nUse an era scheme of the Anno Mundi era, anchored at the …\nUse an era scheme of pre- and post- Incarnation eras, …\nThe Ethiopian Calendar\nThe inner date type used for representing <code>Date</code>s of …\nWhich era style the ethiopian calendar uses\nReturns whether this has the Amete Alem era\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new Ethiopian Calendar for the Amete Mihret …\nConstruct a new Ethiopian Calendar with a value specifying …\nSet whether or not this uses the Amete Alem era scheme\nThe Gregorian Calendar\nThe inner date type used for representing <code>Date</code>s of …\nThe calendar-specific day-of-month represented by <code>date</code>\nInformation of the day of the year\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific year represented by <code>date</code>\nThe Civil Hebrew Calendar\nThe inner date type used for representing <code>Date</code>s of <code>Hebrew</code>. …\nConvenience method to compute for a given year. Don’t …\nCompute for a given year when the keviyah is already known\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>Hebrew</code>\nConstruct a new <code>Hebrew</code>\nThe Saka calendar starts on the 81st day of the Gregorian …\nThe Indian National Calendar (aka the Saka calendar)\nThe inner date type used for representing <code>Date</code>s of <code>Indian</code>. …\nThe Saka calendar is 78 years behind Gregorian. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new Indian Calendar\nCivil / Arithmetical Islamic Calendar (Used for …\nThe inner date type used for representing <code>Date</code>s of …\nThe inner date type used for representing <code>Date</code>s of …\nIslamic Observational Calendar (Default)\nContains any loaded precomputed data. If constructed with …\nA Tabular version of the Arithmetical Islamic Calendar\nThe inner date type used for representing <code>Date</code>s of …\nUmm al-Qura Hijri Calendar (Used in Saudi Arabia)\nThe inner date type used for representing <code>Date</code>s of …\nCompact representation of the length of an Islamic year.\nUnexpectedly Short (353-day) Islamic year\nShort (354-day) Islamic year\nLong (355-day) Islamic year\nGiven a year info and the first month it is possible for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven an ISO date (in both ArithmeticDate and R.D. …\nCreates a new <code>IslamicObservational</code> with some compiled data …\nConstruct a new <code>IslamicCivil</code>\nCreates a new <code>IslamicUmmAlQura</code> with some compiled data …\nConstruct a new <code>IslamicTabular</code>\nConstruct a new <code>IslamicObservational</code> without any …\nConstruct a new <code>IslamicCivil</code> (deprecated: we will not add …\nConstruct a new <code>IslamicUmmAlQura</code> without any precomputed …\nConstruct a new <code>IslamicTabular</code> (deprecated: we will not …\nGet the new year R.D. given the extended year that this …\nGet the date’s R.D. given (y, m, d) in this info’s year\nA version of <code>Self::new</code> that uses custom data provided by a …\nA version of <code>Self::new</code> that uses custom data provided by a …\nA version of <code>Self::new</code> that uses custom data provided by …\nA version of <code>Self::new</code> that uses custom data provided by …\nThe ISO Calendar\nThe inner date type used for representing <code>Date</code>s of <code>Iso</code>. …\nConstruct a date from era/month codes and fields\nThe calendar-specific day-of-month represented by <code>date</code>\nCount the number of days in a given month/year combo\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe calendar-specific month represented by <code>date</code>\nConstruct a new ISO Calendar\nThe calendar-specific year represented by <code>date</code>\nWrap the year in the appropriate era code\nThe Japanese Calendar (with modern eras only)\nThe inner date type used for representing <code>Date</code>s of <code>Japanese</code>…\nThe Japanese Calendar (with historical eras)\nGiven an ISO date, give year and era for that date in the …\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nInformation of the day of the year\nInformation of the day of the year\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven an date, obtain the era data (not counting spliced …\nReturns the range of dates for a given Japanese era code, …\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month represented by <code>date</code>\nCreates a new <code>Japanese</code> using only modern eras (post-meiji) …\nCreates a new <code>Japanese</code> from using all eras (including …\nA version of <code>Self::new</code> that uses custom data provided by a …\nA version of <code>Self::new</code> that uses custom data provided by a …\nA version of <code>Self::new</code> that uses custom data provided by …\nA version of <code>Self::new</code> that uses custom data provided by …\nThe calendar-specific year represented by <code>date</code>\nThe calendar-specific year represented by <code>date</code>\nThe Julian Calendar\nThe inner date type used for representing <code>Date</code>s of <code>Julian</code>. …\nThe calendar-specific day-of-month represented by <code>date</code>\nConvenience function so we can call days_in_year without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe calendar-specific month represented by <code>date</code>\nConstruct a new Julian Calendar\nThe calendar-specific year represented by <code>date</code> Julian has …\nThe Persian Calendar\nThe inner date type used for representing <code>Date</code>s of <code>Persian</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new Persian Calendar\nBaked data\nThe date at which an era started\n<code>ULE</code> type for <code>EraStartDate</code>\nA data structure containing the necessary era data for …\nMarker type for <code>JapaneseErasV1</code>: “calendar/japanese@1”\nMarker type for <code>JapaneseErasV1</code>: “calendar/japanext@1”\nAn ICU4X mapping to a subset of CLDR weekData. See …\nMarker type for <code>WeekDataV1</code>: “datetime/week_data@1”\nAn ICU4X mapping to a subset of CLDR weekData. See …\nMarker type for <code>WeekDataV2</code>: “datetime/week_data@2”\nBitset representing weekdays.\n🚧 [Unstable] Data provider struct definitions for …\nReturns whether the set contains the day.\nA map from era start dates to their era codes\nThe day the era started in\nThe first day of a week.\nThe first day of a week.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n🚧 [Unstable] Data provider struct definitions for …\nFor a given week, the minimum number of that week’s days …\nFor a given week, the minimum number of that week’s days …\nThe month the era started in\nCreates a new WeekdaySet using the provided days.\nBitset representing weekdays that are part of the ‘…\nThe year the era started in\nCached/precompiled data for a certain range of years for a …\nMarker type for <code>ChineseBasedCacheV1</code>: “…\nMarker type for <code>ChineseBasedCacheV1</code>: “…\nThe first day of the ISO year on which Chinese New Year …\nThe struct containing compiled ChineseData\nA list of precomputed data for each year beginning with …\nThe extended year corresponding to the first data entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the cached data for a given extended year\nGet the cached data for the Chinese Year corresponding to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe day of the year (1-indexed) that this is in the ISO …\nCached/precompiled data for a certain range of years for a …\nMarker type for <code>IslamicCacheV1</code>: “…\nMarker type for <code>IslamicCacheV1</code>: “…\nThe struct containing compiled Islamic YearInfo\nA list of precomputed data for each year beginning with …\nThe number of days in a given 1-indexed month\nThe extended year corresponding to the first data entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the cached data for a given extended year\nGet the cached data for the Islamic Year corresponding to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nYear of the beginning of the Taiwanese (ROC/Minguo) …\nThe Republic of China (ROC) Calendar\nThe inner date type used for representing <code>Date</code>s of <code>Roc</code>. …\nThe <code>AnyCalendarKind</code> corresponding to this calendar\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA day number in a month. Usually 1-based.\nA day of week in month. 1-based.\nA struct containing various details about the position of …\nThe era of a particular date\nRepresentation of a formattable month.\nRepresentation of a formattable year.\nAn ISO-8601 hour component, for use with ISO calendars.\nAn ISO-8601 minute component, for use with ISO calendars.\nAn ISO-8601 second component, for use with ISO calendars.\nA weekday in a 7-day week, according to ISO-8601.\nRepresentation of a month in a year\nA fractional second component, stored as nanoseconds.\nA representation of a time in hours, minutes, seconds, and …\nA week number in a month. Usually 1-based.\nA week number in a year. Usually 1-based.\nDefines the bit order used for encoding and reading …\nThe month code, used to distinguish months during leap …\nThe year in the current cycle for cyclic calendars …\nThe current day of the year, 1-based.\nThe number of days in the previous year.\nThe number of days in a year.\nThis macro defines a struct for 0-based date fields: …\nThe era containing the year.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from an ISO-8601 weekday number to an <code>IsoWeekday</code> …\nTakes a number of minutes, which could be positive or …\nReturns an option which is <code>Some</code> containing the non-month …\n0-based hour.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>Time</code> representing midnight (00:00.000)\n0-based minute.\nFractional second\nConstruct a new Year given an era and number\nConstruct a new <code>Time</code>, without validating that all …\nReturns the day after the current day.\nThe next year.\nGets the numeric value for this component.\nGets the numeric value for this component.\nGets the numeric value for this component.\nGets the numeric value for this component.\nThe year number in the current era (usually 1-based).\nThe month number in this given year. For calendars with …\nGet the month number and whether or not it is leap from …\nThe previous year.\nThe related ISO year. This is normally the ISO (proleptic …\n0-based second.\nAttempts to add two values. Returns <code>Some</code> if the sum is …\nAttempts to add two values. Returns <code>Some</code> if the sum is …\nAttempts to add two values. Returns <code>Some</code> if the sum is …\nAttempts to add two values. Returns <code>Some</code> if the sum is …\nConstruct a new <code>Time</code>, whilst validating that all …\nAttempts to subtract two values. Returns <code>Some</code> if the …\nAttempts to subtract two values. Returns <code>Some</code> if the …\nAttempts to subtract two values. Returns <code>Some</code> if the …\nAttempts to subtract two values. Returns <code>Some</code> if the …\nCreates a new value at 0.\nCreates a new value at 0.\nCreates a new value at 0.\nCreates a new value at 0.\nA week that’s assigned to the current year/month. e.g. …\nA week that is assigned to the next year/month. e.g. …\nA week that is assigned to previous year/month. e.g. …\nThe year or month that a calendar assigns a week to …\nCalculator for week-of-month and week-of-year based on …\nThe week number assigned to a given week according to a …\nThe first day of a week.\nFor a given week, the minimum number of that week’s days …\nThe month/year that this week is in, relative to the …\nWeek of month/year. 1 based.\nThe set of weekend days, if available\nA week that’s assigned to the current year/month. e.g. …\nA week that is assigned to the first week of the next …\nA week that is assigned to the last week of the previous …\nMinimum number of days in a month unit required for using …\nA week that is assigned to the next year/month. e.g. …\nA week that is assigned to previous year/month. e.g. …\nThe year or month that a calendar assigns a week to …\nWhich year or month that a calendar assigns a week to …\nInformation about a year or month.\nCalculator for week-of-month and week-of-year based on …\nThe week number assigned to a given week according to a …\nA week that’s assigned to the current year/month. The …\nIterator that yields weekdays that are part of the weekend.\nReturns the weekday that’s <code>num_days</code> after <code>weekday</code>.\nDay being evaluated.\nThe number of days in this year/month.\nThe weekday of this year/month’s first day.\nReturns the start of this unit’s first week.\nThe first day of a week.\nDetermines the order in which we should start reading …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor a given week, the minimum number of that week’s days …\nCreates a UnitInfo for a given year or month.\nCreates the Iterator. Sets <code>current_day</code> to the day after …\nReturns the number of weeks in this unit according to …\nReturns the week number for the given day in this unit.\nComputes &amp; returns the week of given month or year …\nCreates a new <code>WeekCalculator</code> from compiled data.\nA version of <code>Self::try_new</code> that uses custom data provided …\nA version of <code>Self::try_new_unstable</code> that uses custom data …\nThe month/year that this week is in, relative to the …\nWeek of month/year. 1 based.\nComputes &amp; returns the week of given month/year according …\nReturns the week of month according to a calendar with …\nReturns the week of year according to the weekday and …\nReturns the zero based index of <code>weekday</code> vs this calendar’…\nWeekdays that are part of the ‘weekend’, for calendar …\nThe set of weekend days, if available\nBitset to read weekdays from.")