searchState.loadedDescShard("plane_split", 0, "Plane splitting.\nBinary Space Partitioning splitter, uses a BSP tree.\nA helper object to clip polygons by a number of planes.\nPolygons are coplanar, including the case of being on the …\nPlanes are different, thus we can either determine that …\nPolygons are actually intersecting.\nPolygon intersection results.\nA generic line.\nThe projection of a <code>Polygon</code> on a line.\nAn error returned when everything would end up projected …\nPolygon planes are intersecting, but polygons are not.\nAn infinite plane in 3D space, defined by equation: dot(v, …\nThe result of a polygon being cut by a plane. The “cut”…\nA convex polygon with 4 points lying on a plane.\nThe planes are one the same geometrical plane.\nA simple anchoring index to allow association of the …\nCheck if a convex shape defined by a set of points is …\nCheck if this plane contains another one.\nNormalized direction of the line.\nCompute the distance across the line to the plane plane, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new plane from unnormalized equation.\nCompute the line of intersection with another plane.\nIntersect an edge given by the end points. Returns the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the line has consistent parameters.\nProjected value of each point in the polygon.\nCheck if two lines match each other.\nNormalized vector perpendicular to the plane.\nConstant offset from the normal plane, specified in the …\nArbitrary point on the line.\nA plane describing polygon orientation.\nPoints making the polygon.\nCompute the sum of signed distances to each of the points …\nReturn the signed distance from this plane to a point. The …\nA node in the <code>BspTree</code>, which can be considered a tree …\nBinary Space Partitioning splitter, uses a BSP tree.\nAdd a polygon to the plane splitter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a value into the sub-tree starting with this node. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new BSP splitter.\nCreate a new node.\nBuild the draw order of this sub-tree into an <code>out</code> vector, …\nPut the splitter back in it initial state.\nProcess a set of polygons at once.\nSort the added and split polygons against the view vector.\nA helper object to clip polygons by a number of planes.\nAdd a clipping plane to the list. The plane will clip …\nClip specified polygon by the contained planes, return the …\nClip the primitive with the frustum of the specified …\nReturns the argument unchanged.\nExtract the clipping planes that define the frustum for a …\nCalls <code>U::from(self)</code>.\nCreate a new clipper object.\nReset the clipper internals, but preserve the allocation.\nPolygons are coplanar, including the case of being on the …\nPlanes are different, thus we can either determine that …\nPolygons are actually intersecting.\nPolygon intersection results.\nThe projection of a <code>Polygon</code> on a line.\nPolygon planes are intersecting, but polygons are not.\nThe result of a polygon being cut by a plane. The “cut”…\nA convex polygon with 4 points lying on a plane.\nThe planes are one the same geometrical plane.\nA simple anchoring index to allow association of the …\nCheck if this polygon contains another one.\nCut a polygon with another one.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a polygon from points that are already …\nConstruct a polygon from a non-transformed rectangle.\nConstruct a polygon from a rectangle with 3D transform.\nConstruct a polygon from a rectangle with an invertible 3D …\nGet the min/max of the line projection markers.\nCheck intersection with another line projection.\nCompute the line of intersection with another polygon.\nCompute the line of intersection with an infinite plane.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether both polygon’s planes are parallel.\nCheck if the polygon doesn’t contain any space. This may …\nReturn true if the intersection cuts the source polygon.\nReturn true if the intersection is completely outside.\nCheck if all the points are indeed placed on the plane …\nProjected value of each point in the polygon.\nA plane describing polygon orientation.\nPoints making the polygon.\nProject this polygon onto a 3D vector, returning a line …\nSplit the polygon along the specified <code>Line</code>. Will do …\nSplit the polygon along the specified <code>Line</code>, with a normal …\nTransform a polygon by an affine transform (preserving …\nBring a point into the local coordinate space, returning …")