searchState.loadedDescShard("wgpu_core", 0, "This library safely implements WebGPU on native platforms. …\nNo value.\nSome value of type <code>T</code>.\nThe index of a queue submission.\nModule for hashing utilities.\nAllocating resource ids, and tracking the resources they …\nLazy initialization of texture and buffer memory.\nInstrumented lock types.\nPresentation.\nResource State and Lifetime Trackers\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes a group of bindings and the resources to be …\nBindable resource and the slot to bind it to.\nBind group layout.\nDescribes a <code>BindGroupLayout</code>.\nUsed by <code>BindGroupLayout</code>. It indicates whether the BGL must …\nDescribes a pipeline layout.\nDescribes a group of bindings and the resources to be …\nBindable resource and the slot to bind it to.\nDescribes a pipeline layout.\nBind groups that this pipeline uses. The first entry will …\nBind groups that this pipeline uses. The first entry will …\nSlot for which binding provides resource. Corresponds to …\nSlot for which binding provides resource. Corresponds to …\nThe index of the binding.\nThe range that the binding covers.\nThe binding type.\nThe size of the buffer.\nThe resources to bind to this bind group.\nThe resources to bind to this bind group.\nArray of entries in this BindGroupLayout\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the bind group.\nDebug label of the bind group.\nDebug label of the bind group layout.\nThe <code>label</code> from the descriptor used to create the resource.\nDebug label of the pipeline layout.\nDebug label of the pipeline layout.\nThe <code>label</code> from the descriptor used to create the resource.\nThe <code>label</code> from the descriptor used to create the resource.\nActual binding sizes for buffers that don’t have …\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nThe maximum value the dynamic offset can have before …\nIt is very important that we know if the bind group comes …\nSet of push constant ranges this pipeline uses. Each …\nSet of push constant ranges this pipeline uses. Each …\nResource to attach to the binding\nResource to attach to the binding\nValidate push constants match up with expected ranges.\nDescribes a depth/stencil attachment to a render pass.\nDescribes an attachment location in words.\nClear the output attachment with the clear color. Clearing …\nError encountered while attempting a clear.\nA buffer of commands to be submitted to the GPU for …\nThe mutable state of a <code>CommandBuffer</code>.\nA raw <code>CommandEncoder</code>, and the raw <code>CommandBuffer</code>s built …\nThe current state of a <code>CommandBuffer</code>.\nError encountered when performing a compute pass.\nError encountered when performing a compute pass.\nError encountered while attempting to do a copy on a …\nError type returned from <code>RenderBundleEncoder::new</code> if the …\nDiscards the content of the render target.\nError validating a draw call.\nAn error occurred while recording a compute or render pass.\nError type returned from <code>RenderBundleEncoder::new</code> if the …\nCommand recording is complete, and the buffer is ready for …\nDo not clear output attachment.\nOperation to perform to the output attachment at the start …\nLocked by a render or compute pass.\nDescribes an individual channel within a render pass, such …\nDescribes the writing of timestamp values in a render or …\nError encountered when dealing with queries\nError encountered while trying to use queries\nReady to record commands. An encoder’s initial state.\nDescribes a <code>RenderBundleEncoder</code>.\nError encountered when finishing recording a render bundle.\nError encountered when encoding a render command. This is …\nDescribes a color attachment to a render pass.\nDescribes a depth/stencil attachment to a render pass.\nDescribes the attachments of a render pass.\nError encountered when performing a render pass.\nError encountered when performing a render pass.\nError encountered while trying to resolve a query.\nSet a range of push constants to values stored in …\nStore the result of the renderpass.\nOperation to perform to the output attachment at the end …\nError encountered while attempting a data transfer.\nThe copy aspect.\nThe copy aspect.\nAll pass data &amp; records is stored here.\nAll pass data &amp; records is stored here.\nThe index of the query set at which a start timestamp of …\nThe buffer to be copied to/from.\nThe regions of buffers and textures these commands will …\nRender Bundles\nWhat operations will be performed on this color attachment.\nChecks that the encoder is in the …\nIf load_op is <code>LoadOp::Clear</code>, the attachment will be …\nFinish the current command buffer, if any, and add it to …\nFinish the current command buffer, if any, and place it at …\nThe color attachments of the render pass.\nThe formats of the color attachments that this render …\nThe color space of this texture.\nThe mutable state of this command buffer.\nWhat operations will be performed on the depth part of the …\nWhat operations will be performed on the depth part of the …\nInformation about the depth attachment that this render …\nThe depth and stencil attachment of the render pass, if …\nDiscard the command buffer under construction, if any.\nThe <code>wgpu_hal::Api::CommandBuffer</code>s we’ve built so far, …\nThe index of the query set at which an end timestamp of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if <code>raw</code> is in the “recording” state.\nDebug label of the render bundle encoder. This will show …\nThe <code>label</code> from the descriptor used to create the resource.\nDebug label of the render bundle encoder.\nThe <code>label</code> from the descriptor used to create the resource.\nThe layout of the texture data in this buffer.\nAll the raw command buffers for our owning <code>CommandBuffer</code>, …\nOperation to perform to the output attachment at the start …\nLocks the encoder by putting it in the …\nThe target mip level of the texture.\nThe target mip level of the texture.\nIf this render bundle will rendering to multiple array …\nDefines where the occlusion query results will be stored …\nBegin recording a new command buffer, if we haven’t …\nBegin recording a new command buffer for a render pass, …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nParent command buffer that this pass records commands into.\nParent command buffer that this pass records commands into.\nThe premultiplication of this texture\nThe query set to write the timestamps to.\nThe underlying <code>wgpu_hal</code> <code>CommandEncoder</code>.\nIf true, the relevant channel is not changed by a …\nThe view that will receive the resolved output if …\nSample count this render bundle is capable of rendering to.\nThe current state of this command buffer’s encoder.\nWhat operations will be performed on the stencil part of …\nWhat operations will be performed on the stencil part of …\nOperation to perform to the output attachment at the end …\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nDefines where and when timestamp values will be written …\nDefines where and when timestamp values will be written …\nAll the resources that the commands recorded so far have …\nUnlocks the <code>CommandBuffer</code> and puts it back into the …\nThe view to use as an attachment.\nThe view to use as an attachment.\nThe view to use as an attachment.\nThe byte offset within the push constant storage to write …\nThe number of bytes to write. This must be a multiple of …\nIndex in <code>push_constant_data</code> of the start of the data to be …\nA pool of free <code>wgpu_hal::CommandEncoder</code>s, owned by a <code>Device</code>…\nReturn a fresh <code>wgpu_hal::CommandEncoder</code> in the “closed”…\nFree the pool of command encoders.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdd <code>encoder</code> back to the free pool.\nScan active buffer bindings corresponding to layouts …\nBreak up possibly overlapping push constant ranges into a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSince <code>LateBufferBinding</code> may contain information about the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA bind group that has been set at a particular index …\nError type returned from <code>RenderBundleEncoder::new</code> if the …\nError type returned from <code>RenderBundleEncoder::new</code> if the …\nA render bundle’s current index buffer state.\nThe bundle’s current pipeline, and some cached …\nDescribes a <code>RenderBundleEncoder</code>.\nError encountered when finishing recording a render bundle.\nError encountered when finishing recording a render bundle.\nState for analyzing and cleaning up bundle command streams.\nThe state of a single vertex buffer slot during render …\nThe bind group set at each index, if any.\nThe id of the bind group set at this index.\nThe formats of the color attachments that this render …\nInformation about the depth attachment that this render …\nThe range of dynamic offsets for this bind group, in the …\nActually encode the contents into a native command buffer.\nConvert this encoder’s commands into a <code>RenderBundle</code>.\nDynamic offset values used by the cleaned-up command …\nGenerate a <code>SetIndexBuffer</code> command to prepare for an …\nGenerate a <code>SetVertexBuffer</code> command for this slot, if …\nGenerate <code>SetBindGroup</code> commands for any bind groups that …\nGenerate a <code>SetIndexBuffer</code> command to prepare for an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe current index buffer, if one has been set. We flush …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMark all non-empty bind group table entries from <code>index</code> …\nDetermine which bind group slots need to be re-set after a …\nTrue if this index’s contents have been changed since …\nDebug label of the render bundle encoder. This will show …\nDebug label of the render bundle encoder.\nThe <code>label</code> from the descriptor used to create the resource.\nReturn the number of entries in the current index buffer.\nIf this render bundle will rendering to multiple array …\nReturn the current pipeline state. Return an error if none …\nThe pipeline\nThe currently set pipeline, if any.\nRanges of push constants this pipeline uses, copied from …\nSample count this render bundle is capable of rendering to.\nSet the bundle’s current index buffer and its associated …\nHow this pipeline’s vertex shader traverses each vertex …\nResources used by this bundle. This will become …\nThe number of bind groups this pipeline uses.\n…\nThe state of each vertex buffer slot.\nReturn a sequence of commands to zero the push constant …\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nError encountered while attempting a clear.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError encountered when performing a compute pass.\nError encountered when performing a compute pass.\nAll pass data &amp; records is stored here.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the parent command buffer is invalid, the returned pass …\nParent command buffer that this pass records commands into.\nImmediate texture inits required because of prior …\nDefines where and when timestamp values will be written …\nDefines where and when timestamp values will be written …\nEquivalent to <code>ComputeCommand</code> but the Ids resolved into …\nSet a range of push constants to values stored in …\nSet a range of push constants to values stored in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResolves all ids in a list of commands into the …\nThe byte offset within the push constant storage to write …\nThe number of bytes to write. This must be a multiple of …\nIndex in <code>push_constant_data</code> of the start of the data to be …\nThe byte offset within the push constant storage to write …\nThe number of bytes to write. This must be a multiple of …\nIndex in <code>push_constant_data</code> of the start of the data to be …\nError validating a draw call.\nError encountered when encoding a render command. This is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSurface that was discarded by <code>StoreOp::Discard</code> of a …\nAll the discards that haven’t been followed by init …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe tracker actions that we need to be executed before the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nError encountered when dealing with queries\nError encountered while trying to use queries\nError encountered while trying to resolve a query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes a color attachment to a render pass.\nDescribes a depth/stencil attachment to a render pass.\nDescribes the attachments of a render pass.\nDescribes an attachment location in words.\nClear the output attachment with the clear color. Clearing …\nDiscards the content of the render target.\nDo not clear output attachment.\nOperation to perform to the output attachment at the start …\nDescribes an individual channel within a render pass, such …\nDescribes a color attachment to a render pass.\nDescribes a depth/stencil attachment to a render pass.\nDescribes the attachments of a render pass.\nError encountered when performing a render pass.\nError encountered when performing a render pass.\nStore the result of the renderpass.\nOperation to perform to the output attachment at the end …\nAll pass data &amp; records is stored here.\nWhat operations will be performed on this color attachment.\nWhat operations will be performed on this color attachment.\nIf load_op is <code>LoadOp::Clear</code>, the attachment will be …\nThe color attachments of the render pass.\nThe color attachments of the render pass.\nWhat operations will be performed on the depth part of the …\nWhat operations will be performed on the depth part of the …\nThe depth and stencil attachment of the render pass, if …\nThe depth and stencil attachment of the render pass, if …\nValidate the given aspects’ read-only flags against …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLength of the shortest instance rate vertex buffer\nBuffer slot which the shortest instance rate vertex buffer …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOperation to perform to the output attachment at the start …\nIf the parent command buffer is invalid, the returned pass …\nDefines where the occlusion query results will be stored …\nDefines where the occlusion query results will be stored …\nParent command buffer that this pass records commands into.\nIf true, the relevant channel is not changed by a …\nAll render attachments, including depth/stencil\nReset the <code>RenderBundle</code>-related states.\nThe view that will receive the resolved output if …\nThe view that will receive the resolved output if …\nWhat operations will be performed on the stencil part of …\nWhat operations will be performed on the stencil part of …\nOperation to perform to the output attachment at the end …\nDefines where and when timestamp values will be written …\nDefines where and when timestamp values will be written …\nLength of the shortest vertex rate vertex buffer\nBuffer slot which the shortest vertex rate vertex buffer …\nThe view to use as an attachment.\nThe view to use as an attachment.\nThe view to use as an attachment.\nThe view to use as an attachment.\nDescribes the writing of timestamp values in a render or …\nDescribes the writing of timestamp values in a render or …\nThe index of the query set at which a start timestamp of …\nThe index of the query set at which a start timestamp of …\nThe index of the query set at which an end timestamp of …\nThe index of the query set at which an end timestamp of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe query set to write the timestamps to.\nThe query set to write the timestamps to.\nError encountered while attempting to do a copy on a …\nError encountered while attempting a data transfer.\nThe copy aspect.\nThe copy aspect.\nThe buffer to be copied to/from.\nThe color space of this texture.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPrepare a transfer’s destination texture.\nPrepare a transfer’s source texture.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe layout of the texture data in this buffer.\nThe target mip level of the texture.\nThe target mip level of the texture.\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nThe premultiplication of this texture\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nWebGPU’s validating linear texture data algorithm.\nWebGPU’s validating texture copy range algorithm.\nCreate a validator with the given validation flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nOnly use this function in contexts where there is no <code>Device</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label for the device.\nHints for memory allocation strategies.\nSpecifies the features that are required by the device …\nSpecifies the limits that are required by the device …\nThe bind group layout was derived and is not present in …\nA HashMap-like structure that stores a BindGroupLayouts …\nWhere a given BGL came from.\nThe bind group layout was created by the user and is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>EntryMap</code> from a slice of …\nGet the <code>wgt::BindGroupLayoutEntry</code> for the given binding …\nIterator over all the binding indices in this map.\nWe use a IndexMap here so that we can sort the entries by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the count of <code>wgt::BindGroupLayoutEntry</code>s in this map.\nWe keep track of whether the map is sorted or not, so that …\nIterator over all the <code>wgt::BindGroupLayoutEntry</code>s in this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA command submitted to the GPU for execution.\nResource tracking for a device.\nResources used by queue submissions still in flight. One …\nReturns true if this submission contains the given buffer.\nReturns true if this submission contains the given texture.\nClosure to be called on “lose the device”. This is …\nCommand buffers used by this submission, and the encoder …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the submission index of the most recent submission …\nReturns the submission index of the most recent submission …\nMap the buffers in <code>self.ready_to_map</code>.\nThe index of the submission we track.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuffers to be mapped once this submission has completed.\nBuffers for which a call to <code>Buffer::map_async</code> has …\nReturn true if there are no queue submissions still in …\nBuffers the user has asked us to map, and which are not …\nTemporary resources to be freed once this queue submission …\nStart tracking resources associated with a new queue …\nDetermine which buffers are ready to map, and which must …\nSort out the consequences of completed submissions.\nList of queue “on_submitted_work_done” closures to be …\nQueue “on_submitted_work_done” closures that were …\nA series of raw <code>CommandBuffer</code>s that have been submitted to …\nA private command encoder for writes made directly on the …\nA texture or buffer to be freed soon.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if <code>command_encoder</code> is in the “recording” state, as\nFree all of our command buffers.\nThese are the buffers that have been tracked by …\nThese are the textures that have been tracked by …\nStructure describing a logical device. Some members are …\nThe index of the last command submission that was …\nReturns the backend this device is using.\nPool of bind group layouts, allowing deduplication.\nSafety\nRun some destroy operations that were deferred.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>label</code> from the descriptor used to create the resource.\nThe index of the last successful submission to this device…\nCheck this device for completed commands.\nGenerate information about late-validated buffer bindings …\nWait for idle and remove resources that we can, before we …\nAll live resources allocated with this <code>Device</code>.\nIs this device valid? Valid is closely associated with “…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDon’t use this error type with thiserror’s #[…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nSafety\nCreates a compute pass.\nCreates a render pass.\nGet an ID of one of the bind group layouts. The ID adds a …\nSafety\nAssign <code>id_in</code> an error with the given <code>label</code>.\nSafety\nSafety\nAssign <code>id_in</code> an error with the given <code>label</code>.\nSafety\nSafety\nSafety\nCreate a shader module with the given <code>source</code>.\nSafety\nSafety\nCheck <code>device_id</code> for freeable resources and completed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nSafety\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPoll all devices on all backends.\nPoll all devices belonging to the specified backend.\nGet an ID of one of the bind group layouts. The ID adds a …\nSafety\nSafety\nSafety\nHashMap using a fast, non-cryptographic hash algorithm.\nHashSet using a fast, non-cryptographic hash algorithm.\nIndexMap using a fast, non-cryptographic hash algorithm.\nA hasher which does nothing. Useful for when you want to …\nA pre-hashed key using FxHash which allows the hashing …\nHashMap that uses pre-hashed keys and an identity hasher.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll the resources tracked by a <code>crate::global::Global</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn identifier for a wgpu object.\nMarker trait used to determine which types uniquely …\nThe raw underlying representation of an identifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nDefine identifiers for each resource.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCoerce the identifiers into its raw underlying …\nMarker types for each resource.\nUnzip a raw identifier into its components.\nZip together an identifier and return its raw underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA simple structure to allocate <code>Id</code> identifiers.\nAllocate a fresh, never-before-seen id with the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFree <code>id</code>. It will never be returned from <code>alloc</code> again.\nTracks initialization status of a linear range from 0..size\nChecks for uninitialized ranges within a given query range.\nChecks if an action has/requires any effect on the …\nCreates an action if it would have any effect on the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNon-overlapping list of all uninitialized ranges, sorted by\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNon-overlapping list of all uninitialized ranges, sorted by\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNon-overlapping list of all uninitialized ranges, sorted by\nError when requesting a device from the adaptor\nSurface that is required to be presentable with the …\nIndicates that only a fallback adapter can be returned. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nList of instances per backend.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a set of backends from a comma separated list of …\nPower preference for the adapter.\nRanks for <code>wgpu-core</code> locks, restricting acquisition order.\nLock types that enforce well-ranked lock acquisition order.\nPlain, uninstrumented wrappers around <code>parking_lot</code> lock …\nThe rank of a lock.\nA bitflags type representing a set of lock ranks.\nGet a flags value with all known bits set.\nThe bit representing this lock.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nDefine a set of lock ranks, and each rank’s permitted …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nA bitmask of permitted successor ranks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nPer-thread state for the deadlock checker.\nA container that restores a <code>LockState</code> when dropped.\nA <code>Mutex</code> instrumented for deadlock prevention.\nA guard produced by locking <code>Mutex</code>.\nAn <code>RwLock</code> instrumented for deadlock prevention.\nA read guard produced by locking <code>RwLock</code> for reading.\nA write guard produced by locking <code>RwLock</code> for writing.\nCheck and record the acquisition of a lock with <code>new_rank</code>.\nThe number of locks currently held.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe last lock we acquired, and where.\nRecord the release of a lock whose saved state was <code>saved</code>.\nA plain wrapper around <code>parking_lot::Mutex</code>.\nA guard produced by locking <code>Mutex</code>.\nA plain wrapper around <code>parking_lot::RwLock</code>.\nA read guard produced by locking <code>RwLock</code> as a reader.\nA write guard produced by locking <code>RwLock</code> as a writer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes a compute pipeline.\nDescribes fragment processing in a render pipeline.\nNumber of implicit bind groups derived at pipeline …\nInformation about buffer bindings, which is validated …\nDescribes a programmable pipeline stage.\nDescribes a render (graphics) pipeline.\nDescribes a compute pipeline.\nDescribes fragment processing in a render pipeline.\nDescribes a programmable pipeline stage.\nDescribes a render (graphics) pipeline.\nDescribes the vertex process in a render pipeline.\nDescribes how the vertex buffer is interpreted.\nDescribes the vertex process in a render pipeline.\nHow a render pipeline will retrieve attributes from a …\nGet a flags value with all known bits set.\nThe stride, in bytes, between elements of this buffer.\nThe list of attributes which comprise a single vertex.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe format of any vertex buffers used with this pipeline.\nThe format of any vertex buffers used with this pipeline.\nThe pipeline cache to use when creating this pipeline.\nThe pipeline cache to use when creating this pipeline.\nThe pipeline cache to use when creating this pipeline.\nThe pipeline cache to use when creating this pipeline.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSpecifies the values of pipeline-overridable constants in …\nSpecifies the values of pipeline-overridable constants in …\nWhether all set bits in a source flags value are also set …\nThe effect of draw calls on the depth and stencil aspects …\nThe effect of draw calls on the depth and stencil aspects …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe name of the entry point in the compiled shader. The …\nThe name of the entry point in the compiled shader. The …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe fragment processing state for this pipeline.\nThe fragment processing state for this pipeline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe <code>label</code> from the descriptor used to create the resource.\nThe <code>label</code> from the descriptor used to create the resource.\nThe <code>label</code> from the descriptor used to create the resource.\nThe <code>label</code> from the descriptor used to create the resource.\nThe byte size required to fit the last vertex in the …\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nWhether the buffer is indexed by vertex number or instance …\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe multi-sampling properties of the pipeline.\nThe multi-sampling properties of the pipeline.\nIf the pipeline will be used with a multiview render pass, …\nIf the pipeline will be used with a multiview render pass, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe properties of the pipeline at the primitive assembly …\nThe properties of the pipeline at the primitive assembly …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe compiled compute stage and its entry point.\nThe compiled compute stage and its entry point.\nThe compiled vertex stage and its entry point.\nThe compiled vertex stage and its entry point.\nThe compiled fragment stage and its entry point.\nThe compiled fragment stage and its entry point.\nHow often this vertex buffer is “stepped” forward.\nThe byte stride in the buffer between one attribute value …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe effect of draw calls on the color aspect of the output …\nThe effect of draw calls on the color aspect of the output …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe vertex processing state for this pipeline.\nThe vertex processing state for this pipeline.\nCould the error have been avoided? That is, is there a …\nWhether workgroup scoped memory will be initialized with …\nWhether workgroup scoped memory will be initialized with …\nThe value used to fill <code>PipelineCacheHeader::hash_space</code>\nThe key which identifiers the device/adapter. This is used …\nThe id for the backend in use, from wgt::Backend\nThe number of bytes in the pointers of this ABI, because …\nThe length of the data which is sent to/recieved from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSpace reserved for a hash of the data in future\nThe version of this wgpu header Should be equal to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe magic header to ensure that we have the right file …\nValidate the data in a pipeline cache\nA key used to validate that this device is still …\nReturns the argument unchanged.\nGet a resource from the pool with the given entry map, or …\nCalls <code>U::from(self)</code>.\nRemove the given entry map from the pool.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegistry is the primary holder of each resource type Every …\nAssign a new resource to this ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMapping was aborted (by unmapping or destroying the buffer …\nMapped\nThe buffer is already mapped.\nThe status code provided to the buffer mapping callback.\nThe context is Lost.\nA buffer that has been marked as destroyed and is staged …\nA texture that has been marked as destroyed and is staged …\nContains the error value\nAn unknown error.\nNot mapped\nMapped at creation.\nThe buffer is in an invalid state.\nThe range isn’t properly aligned.\nThe range isn’t fully contained in the buffer.\nIncompatible usage flags.\nMapping was already requested.\nAddressMode::ClampToBorder requires feature …\nContains the success value\nDescribes a <code>Sampler</code>\nA temporary buffer, consumed by the command that uses it.\nThe Buffer is successfully mapped, <code>get_mapped_range</code> can be …\nDescribes a <code>TextureView</code>.\nInformation about the wgpu-core resource.\nWaiting for GPU to be done before mapping\nHow to deal with out of bounds accesses in the u (i.e. x) …\nMust be at least 1. If this is not 1, all filter modes …\nBorder color to use when address_mode is …\nChecks that the given buffer usage contains the required …\nChecks that the given texture usage contains the required …\nIf this is enabled, this is a comparison sampler using the …\n<code>true</code> if this is a comparison sampler\nTotal count of queries the set contains. Must not be zero. …\nDimensions of the texture.\nThe dimension of the texture view.\n<code>true</code> if this is a filtering sampler\nFormat of the texture.\nFormat of the texture view, or <code>None</code> for the same format as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a string identifying this resource for logging and …\nDebug label of a buffer. This will show up in graphics …\nDebug label of the texture. This will show up in graphics …\nDebug label for the query set.\nThe <code>label</code> from the descriptor used to create the resource.\nThe <code>label</code> from the descriptor used to create the resource.\nDebug label of the texture view.\nThe <code>label</code> from the descriptor used to create the resource.\nDebug label of the sampler.\nThe <code>label</code> from the descriptor used to create the resource.\nThe <code>label</code> from the descriptor used to create the resource.\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nReturns the mapping callback in case of error so that the …\nAllows a buffer to be mapped immediately after they are …\nHow to filter the texture when it needs to be minified …\nMip count of texture. For a texture with no extra mips, …\nHow to filter between mip map levels\nSAFETY: You must not call any functions of <code>self</code> until you …\nRange within the texture that is accessible via this view.\nThis is <code>Err</code> only if the texture view is not renderable\nSample count of texture. If this is not 1, texture must …\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nKind of query that this query set should contain.\nUsages of a buffer. If the buffer is used in any way that …\nAllowed usages of the texture. If used in other ways, the …\nSpecifies what view formats will be allowed when calling …\nSAFETY: The offsets and size must be in-bounds.\nA guard that allows snatching the snatchable data.\nA guard that provides read access to snatchable data.\nA Device-global lock for all snatchable data.\nA value that is mostly immutable but can be “snatched” …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet read access to the value. Requires a the snatchable …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe safety of <code>Snatchable::get</code> and <code>Snatchable::snatch</code> rely …\nRequest read access to snatchable resources.\nTake the value. Requires a the snatchable lock’s write …\nTake the value without a guard. This can only be used with …\nRequest write access to snatchable resources.\nAn entry in a <code>Storage::map</code> table.\nThere is one live id with this index, allocated at the …\nA table of <code>T</code> values indexed by the id type <code>I</code>.\nThere are no live ids with this index.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an owned reference to an item. Panics if there is an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll the usages that a bind group contains. The uses are …\nA tracker used by Device.\nAll flags that are exclusive.\nPretty print helper that shows helpful descriptions of a …\nA structure containing all the information about a …\nThis is a render bundle specific usage scope. It includes …\nThe uses that a resource or subresource can be in.\nThe selector used by this resource.\nSee TrackerIndexAllocator.\nA full double sided tracker used by CommandBuffers.\nwgpu-core internally use some array-like storage for …\nA usage scope tracker. Only needs to store stateful …\nA pool for storing the memory used by <code>UsageScope</code>s. We take …\nReturns true if the all the uses are ordered.\nReturns true if any of the uses are exclusive.\nTurn the resource into a pile of bits.\nBuffer Trackers\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProduce the hal barrier corresponding to the transition.\nProduce the hal barrier corresponding to the transition.\nReturns true if the given states violates the usage scope …\nMerge the inner contents of a bind group into the render …\nMerge the inner contents of a bind group into the usage …\nMerge the inner contents of a bind group into the usage …\nThe <code>ResourceMetadata</code> type.\nCreate the render bundle scope and pull the maximum IDs …\nOptimize the bind group states by sorting them by ID.\nIterates through all resources in the given bind group and …\nReturns true if the transition from one state to another …\nTexture Trackers\nStores a bind group’s buffers + their usages (within the …\nSource of Buffer State.\nStores all buffer state within a command buffer.\nStores all buffer state within a single usage scope.\nStores all buffer state within a device.\nGet a state that was provided directly.\nGet a state from an an array of states.\nExtend the vectors to let the given index be valid.\nExtend the vectors to let the given index be valid.\nExtend the vectors to let the given index be valid.\nReturns true if the given buffer is tracked.\nDrains all currently pending transitions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the state from the provider, given a resource ID …\nIf the resource isn’t tracked\nDoes an insertion operation if the index isn’t tracked …\nInserts a single buffer and its state into the resource …\nAdds the given resource with the given state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge the list of buffer states in the given bind group …\nMerge a single state into the UsageScope.\nMerge the list of buffer states in the given usage scope …\nOptimize the buffer bind group state by sorting it by ID.\nIterates through all buffers in the given bind group and …\nSets the given state for all buffers in the given tracker.\nSets the given state for all buffers in the given tracker.\nSets the given state for all buffers in the given …\nSets the state of a single buffer.\nSets the state of a single buffer.\nSets the size of all the vectors inside the tracker.\nSets the size of all the vectors inside the tracker.\nReturns a list of all buffers tracked.\nReturns a list of all buffers tracked.\nReturns a list of all buffers tracked. May contain …\nComes directly from explicit values.\nComes from another metadata tracker.\nA set of resources, holding a <code>Arc&lt;T&gt;</code> and epoch for each …\nA source of resource metadata.\nReturns true if the set contains the resource with the …\nReturns true if the set contains the resource with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the resource from this.\nGet the resource with the given index.\nInsert a resource into the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the tracker owns no resources.\nProduces an iterator that yields the indexes of all bits …\nIf the resource with index <code>i</code> is a member, <code>owned[i]</code> is <code>true</code>.\nReturns an iterator over the indices of all resources …\nReturns an iterator over the resources owned by <code>self</code>.\nRemove the resource with the given index from the set.\nResizes the given bitvec to the given size. I’m not sure …\nA vector holding clones of members’ <code>T</code>s.\nReturns the number of indices we can accommodate.\nEnsures a given index is in bounds for all arrays and does …\nStructure that keeps track of a I -&gt; T mapping, optimized …\nMerge the neighboring ranges together, where possible.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSplit the storage ranges in such a way that there is a …\nList of ranges, each associated with a singe value. Ranges …\nA tracker that holds strong references to resources.\nReturns the argument unchanged.\nInserts a single resource into the resource tracker.\nCalls <code>U::from(self)</code>.\nRepresents the complex state of textures where every …\nStores all texture state within a device.\nAn iterator adapter that can store two different iterator …\nComes directly from a single state.\nComes from a selector and a single state.\nContainer that signifies storing both different things if …\nSpecifies a particular set of subresources in a texture.\nComes from another texture set.\nA source of texture state.\nContainer for corresponding simple and complex texture …\nStores all texture state within a command buffer.\nStores all texture state within a single usage scope.\nStores a bind group’s texture views + their usages …\nExtend the vectors to let the given index be valid.\nExtend the vectors to let the given index be valid.\nReturns true if the tracker owns the given texture.\nDrain all currently pending transitions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience function turning <code>Option&lt;Selector&gt;</code> into this …\nInitialize a complex state from a selector representing …\nGet the state provided by this.\nIf the resource isn’t tracked\nDoes an insertion operation if the index isn’t tracked …\nInserts a single texture and a state into the resource …\nAdds the given resource with the given state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the tracker owns no resources.\nMerge the list of texture states in the given bind group …\nMerge a single state into the UsageScope.\nMerge the list of texture states in the given usage scope …\nCreates complex texture state for the given sizes.\nOptimize the texture bind group state by sorting it by ID.\nUnconditionally removes the given resource from the …\nIterates through all textures in the given bind group and …\nSets the given state for all texture in the given tracker.\nSets the given state for all texture in the given tracker.\nSets the given state for all textures in the given …\nSets the given state for all textures in the given …\nSets the state of a single texture.\nSets the state of a single texture.\nSets the size of all the vectors inside the tracker.\nSets the size of all the vectors inside the tracker.\nConvert a complex state into an iterator over all states …\nReturns a list of all textures tracked.\nReturns a list of all textures tracked.\nThe binding layout is derived from the pipeline layout.\nThe binding layout is provided by the user in BGLs.\nErrors produced when validating a programmable stage of a …\nReturn true if the fragment <code>format</code> is covered by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")