searchState.loadedDescShard("webrender", 1, "Slow scrolling or animation frame after a scene build.\nSlow renders with a high number of render targets.\nSlow frames dominated by texture uploads.\nSum of the values recorded during the current time slice.\nReturns true if the current thread is being profiled.\nReturns true if the current thread is being profiled.\nUnregister a thread with the Gecko Profiler.\nUnregister a thread with the profiler.\nSum a few counters and if the total amount is larger than …\nThe quad is not affected by any mask and is drawn directly …\nThe quad is drawn entirely in an intermediate target and a …\nA rounded rectangle clip is applied to the quad primitive …\nDescribes how clipping affects the rendering of a quad …\nA helper struct for classifying a set of tiles within a …\nClassification result for a tile within a quad\nSplit the primitive into coarse tiles so that each tile …\nAdd an area that needs a clip mask / indirect area\nClassify all the tiles in to categories, based on the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA builder that applies occlusion culling with rectangles …\nA visible part of a rectangle after occlusion culling.\nAdd a rectangle, potentially splitting it and discarding …\nThe visible non-opaque rectangles (front-to-back order).\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe visible opaque rectangles (front-to-back order).\nReturns true if the provided rect is at least partially …\nPre-allocating constructor.\nCreates a blob-image resource with provided parameters.\nSee <code>AddBlobImage</code>.\nAdds a new document with given initial size.\nCreates a font resource.\nSee <code>AddFont</code>.\nCreates a font instance resource.\nSee <code>AddFontInstance</code>.\nCreates an image resource with provided parameters.\nSee <code>AddImage</code>.\nMessage sent by the <code>RenderApi</code> to the render backend thread.\nBit flags for WR stages to store in a capture.\nInformation about a loaded capture of each document that …\nMask for clearing caches in debug commands.\nClear cached resources, forcing them to be re-uploaded …\nAdds a new document namespace.\nAdds a new document namespace.\nUpdate of the state of built-in debugging facilities.\nChange debugging options.\nDelete existing blob image resource.\nDeletes an already existing font resource.\nDeletes an already existing font instance resource.\nDelete an existing image resource.\nEnable/disable native compositor usage\nFrame messages affect frame generation (applied after …\nWhether to generate a frame, and if so, an id that allows …\nInvalidate GPU cache, forcing the update from the CPU …\nLoad a capture of all the documents state.\nFlush from the caches anything that isn’t necessary, to …\nCollection of heap sizes, in bytes. …\nDon’t generate a frame even if something has changed.\nClear render target pool\nThe main entry point to interact with WebRender.\nAllows the API to communicate with WebRender.\nCollects a memory report.\nUpdate of a persistent resource in WebRender.\nSave a capture of all the documents state.\nMessage from the scene builder thread.\nFrame messages affect building the scene.\nSets the maximum amount of existing batches to visit …\nSee <code>AddBlobImage::visible_area</code>.\nSets the provided debug flags.\nSet an override for max off-screen surface size\nSet an override tile size to use for picture caches\nSet the current quality / performance configuration for …\nCauses the scene builder to pause for a given amount of …\nStart capturing a sequence of scene/frame changes.\nStop capturing a sequence of scene/frame changes.\nA Transaction is a group of commands to apply atomically …\nRepresents a transaction in the format sent through the …\nUpdates an already existing blob-image resource.\nSee <code>UpdateBlobImage</code>.\nA message targeted at a particular document.\nUpdates an already existing image resource.\nSee <code>UpdateImage</code>.\nGenerate a frame if something changed.\nSee <code>ResourceUpdate::AddBlobImage</code>.\nAdd a document to the WebRender instance.\nSee <code>add_document</code>\nSee <code>ResourceUpdate::AddFontInstance</code>.\nSee <code>ResourceUpdate::AddImage</code>.\nSee <code>ResourceUpdate::AddFont</code>.\nSee <code>ResourceUpdate::AddFont</code>.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nAdd to the list of animated property bindings that should …\nAdd to the list of animated property bindings that should …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCreates a new resource API object with a dedicated …\nCreates a new resource API object with a dedicated …\nTime when this transaction was constructed.\nCreation time of this transaction.\nThe pixels of the image.\nThe pixels of the image.\nThe blob-image’s serialized commands.\nThe blob-image’s serialized commands.\nSee <code>ResourceUpdate::DeleteBlobImage</code>.\nDelete a document.\nSee <code>ResourceUpdate::DeleteFont</code>.\nSee <code>ResourceUpdate::DeleteFontInstance</code>.\nSee <code>ResourceUpdate::DeleteImage</code>.\nProperties of the image.\nProperties of the image.\nProperties of the image.\nProperties of the image.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nAn optional dirty rect that lets WebRender optimize the …\nAn optional dirty rect that lets WebRender optimize the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nBlock until a round-trip to the scene builder thread has …\nThe font resource’s key.\nCreates a transaction message from a single frame message.\nOperations affecting the generation of frames (applied …\nChanges to animated properties that do not require …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a <code>BlobImageKey</code>.\nGenerate a new font instance key\nGenerate a new font key\nGenerate a new frame. When it’s done and a …\nWhether to generate a frame, and if so, an id that allows …\nWhether to trigger frame building and rendering if …\nCreates an <code>ImageKey</code>.\nCreate a new unique key that can be used for animated …\nConsumes this object and just returns the frame ops.\nGets the dimensions for the supplied glyph keys\nGets the glyph indices for the supplied string. These can …\nReturns the namespace ID used by this API object.\nGlyph size in app units.\nDoes a hit test on display items in the specified …\nReturn the frame ID, if a frame is generated.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidate rendered frame. It ensure that frame will be …\nSet to true in order to force re-rendering even if …\nWhether to force frame building and rendering even if no …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns true if the transaction has no effect.\nReturns true if this transaction has no effect.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns whether this transaction is marked as low priority.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nA key to identify the image resource.\nThe key identfying the image resource to update.\nA key to identify the blob-image resource.\nThe key identfying the blob-image resource to update.\nA key to identify the font instance.\nLoad a capture of the current frame state for debugging.\nConstructor.\nUsed internally by the <code>Renderer</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nHandlers to notify at certain points of the pipeline.\nTrigger a notification at a certain stage of the rendering …\nNotify WebRender that now is a good time to flush caches …\nCollect various data along the rendering pipeline to …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRemoves data associated with a pipeline from the internal …\nKeep track of who asks rendering to happen.\nSynchronously requests memory report.\nSynchronously request an object that can perform fast hit …\nReset the list of animated property bindings that should …\nPersistent resource updates to apply as part of this …\nUpdates to resources that persist across display lists.\nSave a capture of the current frame state for debugging.\nOperations affecting the scene (applied before scene …\nChanges that require re-building the scene.\nUpdate the state of builtin debugging facilities.\nA Gecko-specific notification mechanism to get some code …\nA helper method to send document messages.\nSend a transaction to WebRender.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSee <code>ResourceUpdate::SetBlobImageVisibleArea</code>.\nUpdate debugging flags.\nSupplies a new frame to WebRender.\nSetup the output region in the framebuffer for a given …\nA hint that this transaction can be processed at a lower …\nSpecify data for APZ minimap debug overlay to be composited\nUpdate a instance-global parameter.\nSet the current quality / performance settings for this …\nSets the root pipeline.\nSet multiple scroll offsets with generations to the node …\nShut the WebRender instance down.\nMarks this transaction to allow it to skip going through …\nStart capturing a sequence of frames.\nStop capturing sequences of frames.\nStop RenderBackend’s task until shut down\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe blob image’s tile size to apply when rasterizing the …\nAn optional tiling scheme to apply when storing the image…\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSee <code>ResourceUpdate::UpdateBlobImage</code>.\nUpdate a pipeline’s epoch.\nSee <code>ResourceUpdate::UpdateImage</code>.\nAdd a set of persistent resource updates to apply as part …\nMarks this transaction to enforce going through the scene …\nTrue if the transaction needs the scene building thread’…\nWhether to enforce that this transaction go through the …\nThe portion of the plane in the blob-image’s internal …\nSee <code>AddBlobImage::visible_rect</code>.\nAn id that allows tracking the frame transaction through …\nThe set of available quality / performance config values.\nA collection of resources that are shared by clips, …\nThe unique id for WR resource identification. The …\nThe render backend is responsible for transforming high …\nSome rendering parameters applying at the scene level.\nIf <code>Some</code>, do ‘sequence capture’ logging, recording …\nTracks if we need to invalidate dirty rects for this …\nProperties that are resolved during frame building and can …\nThe builder object that prodces frames, kept around to …\nTrack whether the last built frame is up to date or if it …\nThe id of the latest PublishDocument\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the local coverage (space occupied) for a …\nReturns the local rect for a primitive. For most …\nWe track this information to be able to display debugging …\nA data structure to allow hit testing against rendered …\nThe id of this document\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIn certain cases, resources shared by multiple documents …\nTracks the state of the picture cache tiles that were …\nReturns true if this primitive has anti-aliasing enabled.\nReturns true if this primitive might need repition.\nTemporary list of removed pipelines received from the …\nReports CPU heap usage.\nAllows graphs of render tasks to be created, and then …\nThe latest built scene, usable to build frames. received …\nContains various vecs of data that is used only during …\nReturns true if the node actually changed position or …\nTo avoid synchronous messaging we update a shared …\nRetained frame-building version of the spatial tree\nThe id and time of the current frame.\nA map of tile caches. These are stored in the backend as …\nUpdate the state of tile caches when a new scene is being …\nContains the work (in the form of instance arrays) needed …\nContains the work (in the form of instance arrays) needed …\nRepresents a number of rendering operations on a surface.\nA tag used to identify the output format of a <code>RenderTarget</code>.\nA series of <code>RenderTarget</code> instances, serving as the …\nGenerates SVGFEFilterInstances from a single …\nAssociates a <code>RenderTask</code> with this target. That task must …\nOptional hook to provide additional processing for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the GPU task address for a given clip task …\nHelper function to get the clip task address for a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new RenderTarget of the given type.\nIn order to avoid duplicating the down-scaling and blur …\nSince we only use it within a single primitive, the key …\nWill be replaced by a Static location after the texture …\nThe <code>RenderTask</code> should be drawn to a target provided by the …\nSame allocation as an existing task deeper in the …\nThis render task will be drawn to a picture cache texture …\nOnly used as a source for render tasks, can be any texture …\nIdentifies the output buffer location for a given …\nA task that is output to a persistent / retained target.\nA render task location that targets a persistent output …\nThe output of the <code>RenderTask</code> will be persisted beyond this …\nA dynamic task that has not yet been allocated a texture …\nWhether this task can be allocated on a shared render …\nCopy an existing picture task, but set a new command …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this is a dynamic location.\nCalled by the render task cache.\nCreates render tasks from PictureCompositeMode::SVGFEGraph.\nThe gpu cache handle for the render task’s destination …\nRectangle in the texture this task occupies\nRectangle in the texture this task occupies\nRequested size of this render task\nRequested size of this render task\nTarget to draw to\nTexture that this task was allocated to render on\nDescribes either a WR texture or a native OS compositor …\nWhat format this texture cache surface is\nWhich texture in the texture cache should be drawn into.\nParent is a render task\nDescribes a parent dependency for a render task. Render …\nParent is a surface\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf a render task was generated for this cache entry on <em>this</em>…\nA temporary (intermediate) surface.\nA pass expresses dependencies between tasks. Each pass …\nA render pass represents a set of rendering operations …\nAllows initializing a render task directly into the render …\nThe RenderTaskGraph is the immutable representation of the …\nThe persistent interface that is used during frame …\nA subpass is a specific render target, and a list of tasks …\nA sub-pass can draw to either a dynamic (temporary render …\nAn internal representation of a dynamic surface that tasks …\nIf we ever need a larger texture than the ideal, we better …\nAdd a new task to the graph.\nExpress a dependency, such that <code>task_id</code> depends on <code>input</code> …\nAllocate a rect within a shared surfce. Returns None if the\nAllocator for this surface texture\nThe subpasses that describe targets being rendered to in …\nBegin a new frame\nEnd the graph building phase and produce the immutable …\nReturn current frame id, used for validation\nCurrent frame id, used for debug validation\nCurrent frame id, used for debug validation\nThe pass that we can free this surface after (guaranteed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet immutable access to a task\nGet mutable access to a task\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe can only allocate into this for reuse if it’s a …\nWhether this is a color or alpha render target\nConstruct a new graph builder. Typically constructed once …\nCreates an intermediate off-screen pass.\nThe passes that were created, based on dependencies …\nPrint the render task graph to console\nList of task roots\nThe subpasses that make up this dependency pass\nThe surface this subpass draws to\nGPU specific data for each task that is made available to …\nThe tasks assigned to this subpass.\nThe tasks assigned to this render pass\nList of tasks added to the builder\nList of tasks added to the graph\nA list of texture surfaces that can be freed at the end of …\nA list of intermediate surfaces that can be invalidated …\nReference to the texture or picture cache surface being …\nColor / alpha render target\nThe renderer texture id\nThe rectangle occupied by tasks in this surface. Used as a …\nOnly start async compile\nNumber of GPU blocks per UV rectangle provided for an …\nTracks buffer damage rects over a series of frames.\nFlags to enable/disable various builtin debugging tools.\nInformation about the state of the debugging / profiler …\nNeeded for const initialization\nDo a full compile/link during startup\nThe cumulative times spent in each painting phase to …\nThe selected partial present mode for a given frame.\nReturn type from render(), which contains some repr(C) …\nThe renderer is responsible for submitting to the GPU the …\nSome basic statistics about the rendered scene, used in …\nFlags that control how shaders are pre-cached, if at all.\nThe device supports fewer dirty rects than the number of …\nThe clear color used for the texture cache when the debug …\nHelper struct for resolving device Textures for use during …\nEnumeration of the texture samplers used across the …\nThe size of the array of each type of vertex data texture …\nGet a flags value with all known bits set.\nMaintains a set of allocated native composite surfaces. …\nBind a draw target for the debug / profiler overlays, if …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTracks the dirty rectangles from previous frames. Used on …\nUpdate the dirty rects based on current compositing mode …\nClears the texture with a given color.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nComposite picture cache tiles into the framebuffer. This …\nThe compositing config, affecting how WR composites into …\nCount consecutive oom frames to detectif we are stuck …\nWhether all set bits in a source flags value are also set …\nList of profile results from previous frames. Can be …\nReturns the Epoch of the current frame in a pipeline.\nThe current size of the debug overlay surface. None …\nThe current mouse position. This is used for debugging …\nState related to the debug / profiling overlays\nThe intersection of a source flags value with the …\nA list of the device dirty rects that were updated this …\nThe set of documents which we’ve seen a publish for …\nDraw an alpha batch container into a given draw target. …\nDraw all the instances in a clip batcher list to the …\nDraw a list of tiles to the framebuffer\nA special 1x1 dummy texture used for shaders that expect …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nOptional trait object that allows the client application …\nMap of external image IDs to native textures.\nReset the current partial present state. This forces the …\nIf true, partial present state has been reset and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nDecides when a given mix-blend-mode can be implemented in …\nGet a flags value with the bits of a flag with the given …\nGets the damage rect for the current backbuffer, given the …\nRetrieve (and clear) the current list of recorded frame …\nTake a screenshot and scale it asynchronously.\nReturns the size of the texture in pixels\nWhen the GPU cache debugger is enabled, we keep track of …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nTrue if any of the current debug flags will result in …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nMap the contents of the screenshot given by the handle and …\nMap a frame captured for the composition recorder into the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNotification requests to be fulfilled after rendering.\nHold a next ResultMsg that will be handled by update().\nTrue if there are any TextureCacheUpdate pending.\nInformation about the state of picture cache tiles. This …\nSets the damage rect for the current frame. Should only be …\nPass-through to <code>Device::read_pixels_into</code>, used by Gecko’…\nRecord a frame for the Composition Recorder.\nFree the data structures used by the composition recorder.\nRelease the screenshot grabbing structures that the …\nThe intersection of a source flags value with the …\nRenders the current frame.\nCollects a memory report.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nUpdate the current position of the debug cursor.\nSet a callback for handling external images.\nupdate() defers processing of ResultMsg, if …\nGuards to check if we might be rendering a frame with …\nOptional function pointers for measuring memory used by a …\nStatistics about the frame that was rendered.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nupdate() defers processing of ResultMsg, if …\nA map to resolve texture cache IDs to native textures.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nUnbind the draw target for debug / profiler overlays, if …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nProcesses the result queue.\nUpdate the state of any debug / profiler overlays. This is …\nRasterize any external compositor surfaces that require …\nThis module contains the convoluted logic that goes into …\nRendering logic related to the vertex shaders and their …\nA lazily created texture for the zoom debugging widget.\nDraws a line of text at the provided starting coordinates.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns mut ref to <code>debug::DebugRenderer</code> if one already …\nRecord a patch to the GPU buffer for a render task\nA single texel in RGBAF32 texture - 16 bytes.\nA single texel in RGBAI32 texture - 16 bytes.\nInterface to allow writing multiple GPU blocks, possibly …\nClose this writer, returning the GPU address of this set …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPush one (16 byte) block of data in to the writer\nPush a reference to a render task in to the writer. Once …\nBegin writing a specific number of blocks\nTracks the state of each row in the GPU cache texture.\nEnabling this toggle would force the GPU cache scattered …\nThe bus over which CPU and GPU versions of the GPU cache …\nThe device-specific representation of the cache texture in …\nPBO-based updates, currently operate on a row granularity. …\nShader-based scattering updates. Currently rendered by a …\nMirrored block data on CPU for this row. We store a copy of\nEnsures that we have an appropriately-sized texture.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe last offset in this row that is dirty.\nThe first offset in this row that is dirty.\nVBO for positional data, supplied as normalized <code>u16</code>.\nVBO for gpu block data.\nCurrently stored block count.\nSpecial program to run the scattered update.\nPer-row data.\nVAO containing the source vertex buffers.\nAllows callers to hook into the main render_backend loop …\nNumber of batches to look back in history for adding the …\nFlags to enable/disable various builtin debugging tools.\nIs only false if no WR instances have ever been created.\nSince we are re-initializing the instance buffers on every …\nUse this hint for all vertex data re-initialization. This …\nAllows callers to hook in at certain points of the async …\nIf true, allow textures to be initialized with …\nIf true, we allow the data uploaded in a different format …\nUse <code>ps_clear</code> shader with batched quad rendering to clear …\nThe configuration options defining how WR composites the …\nInitializes WebRender and creates a <code>Renderer</code> and …\nThis is called exactly once, when the scene builder thread …\nThis is called exactly once, when the render backend …\nOutput the source of the shader with the given name.\nIf true, we’ll use instanced vertex attributes. Each …\nEnable sub-pixel anti-aliasing if a fast implementation is …\nReturns the argument unchanged.\nSet to true if this GPU supports hardware fast clears as a …\nCalls <code>U::from(self)</code>.\nIf enabled, pinch-zoom will apply the zoom factor during …\nIf true, panic whenever a GL error occurs. This has a …\nThis is a generic callback which provides an opportunity …\nThis is called after a scene build completes without any …\nThis is called after a resource update operation on the …\nThis is called after each scene swap occurs. The …\nThis is called before each scene build starts.\nThis is called before each scene swap occurs.\nThis is called exactly once, when the scene builder thread …\nThis is called exactly once, when the render backend …\nIf true, we’ll reject contexts backed by a software …\nThis is called for each transaction with the …\nIf namespaces are allocated by the client, then the …\nThe default size in bytes for PBOs used to upload texture …\nWhether to use shaders that have been optimized at build …\nReturns true if a WR instance has ever been initialized in …\nWhich extension version to use for texture external …\nThese are “cache clip shaders”. These shaders are used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA very basic pool to avoid reallocating staging textures …\nCopy from the staging PBOs or textures to texture cache …\nGenerate and submit composite shader batches to copy from …\nCopy an item into a batched upload staging buffer.\nDeallocate this pool’s CPU and GPU memory.\nDeallocate some textures if there are too many for a long …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate or reuse a temporary CPU buffer.\nCreate or reuse a staging texture.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn memory that was obtained from this pool via …\nHand the staging texture back to the pool after being done …\nTake this code path instead of copying into a staging CPU …\nTemporary buffers that are used when using staging uploads …\nThe textures in the pool associated with a last used frame …\nUpload a number of items to texture cache textures.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an estimate of the GPU memory consumed by this …\nReturns a borrow of the GPU texture. Panics if it hasn’t …\nAn series of commands that can be rasterized into an image …\nRepresents the backing store of an image in the cache. …\nAn image owned by the embedding, and referenced by …\nPost scene building state.\nA simple series of bytes, provided by the embedding and …\nInternal information about allocated render targets in the …\nHigh-level container for resources managed by the …\nWe keep one around to be able to call clear_namespace …\nTODO(gw): We should expire (parts of) this cache …\nUsed for capture sequences. If the resource cache is …\nProperly deletes all images matching the predicate.\nClear all current render targets (e.g. on memory pressure)\nQueue up allocation of a new OS native compositor surface …\nQueue construction of a native compositor tile on a given …\nA log of the last three frames worth of deleted image keys …\nQueue up destruction of an existing native OS surface. …\nQueue destruction of a native compositor tile.\nReleases any texture cache entries held alive by this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGarbage collect and remove old render targets from the …\nReturn the current generation of an image template\nGet a render target from the pool, or allocate a new one …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, this is currently leant out, and not available to …\nReturns true if this represents a blob.\nThe set of images that aren’t present or valid in the …\nA list of queued compositor surface updates to apply next …\nA pool of render targets for use by the render task graph\nReports the CPU heap usage of this ResourceCache.\nRequests an image to ensure that it will be in the texture …\nReturn a render target to the pool.\nMaximum texture size before we consider it preferrable to …\nReturns true if this texture was used within <code>threshold</code> …\nReturns true if this variant of CachedImageData should go …\nThis is used to express images that are virtually very …\nWebRender’s internal representation of the scene.\nA complete representation of the layout bundling visible …\nA representation of the layout within the display port for …\nStores a map of the animated property bindings for the …\nStores the allocation sizes of various arrays in the built …\nAdd to the current property list for this display list.\nAdd to the current transform property list for this …\nFlush any pending updates to the scene properties. Returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the memory usage statistics to pre-allocate for the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSend the scene back to the scene builder thread so that …\nDeallocating memory outside of the thread that allocated …\nReset the pending properties without flush.\nGet the current value for a color property.\nGet the current value for a float property.\nGet the current value for a transform property.\nRepresent the remaining work associated to a transaction …\nThe same as <code>Transactions</code>, but also supplies a <code>CaptureConfig</code>…\nThis struct contains all items that can be shared between …\nA scene builder thread which executes expensive operations …\nMessage to the scene builder thread.\nThe scene builder has stopped sequence capture, so the …\nSend the results of process_transaction back to the render …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo the bulk of the work of the scene builder thread.\nReports CPU heap memory used by the SceneBuilder.\nReports CPU heap memory used by the interners.\nThe scene builder thread’s event loop.\nSend a message to the render backend thread.\nA primitive instance + some extra information about the …\nProperties of a stacking context that are maintained …\nRepresents an atomic container (can’t split out …\nSlice created by a prim that has …\nA data structure that keeps track of mapping between API …\nA primitive that is added while a shadow context is active …\nAs shadows are pushed, they are stored as pending shadows, …\nHelper struct to build picture chains during scene …\nRepresents the current input for a picture chain builder …\nA structure that converts a serialized display list into a …\nA helper for reusing the scene builder’s memory …\nOffsets primitives (and clips) by the external scroll …\nSlice flags\nInternal tracking information about the currently pushed …\nConvenience interface that creates a primitive entry and …\nWrap the existing content with a new picture with the …\nAdd an already created primitive to the draw lists.\nAdd a new rectangle clip, positioned by the spatial node …\nIf no stacking contexts are present (i.e. we are adding …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBitfield of reasons this stacking context needs to be an …\nThe clip chain for this stacking context\nThe store which holds all complex clipping information.\nUsed to build a ClipTree from the clip-chains, clips and …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe list of filters / mix-blend-mode for this stacking …\nThe configuration to use for the FrameBuilder. We consult …\nStack of spatial node indices forming containing block for …\nWhether all set bits in a source flags value are also set …\nDefines the relationship to a preserve-3D hiearachy.\nCreate a primitive and add it to the prim store. This …\nThe current input source for the next picture\nRetrieve the current external scroll offset on the …\nCut the sequence of the immediate children recorded so far …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nIf true, mark the last picture as a sub-graph\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nHelper struct to map spatial nodes to external scroll …\nReturn the accumulated external scroll offset for a spatial\nFinish building this picture chain. Set the clip chain on …\nTraverse the picture prim list and update any late-set …\nPrim flags for any pictures in this chain\nFlags identifying the type of container (among other …\nThe map of all font instances.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreate a new picture chain builder, from a picture wrapper …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreate a new picture chain builder, from a primitive list\nAdvance and return the next instance id for a given …\nReturns true if this builder wraps a picture\nReturns true if this CompositeOps contains any filters …\nInformation about all primitives involved in hit testing.\nThe data structure that converts between ClipId/SpatialId …\nThe current recursion depth of iframes encountered. Used …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReference to the set of data that is interned across …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the stacking context has a valid …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturn true if the stacking context isn’t needed.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nKeep track of allocated plane splitters for this scene. A …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nMaintains state for any currently active shadows\nA DAG that represents dependencies between picture …\nA map of pipeline ids encountered during scene build - …\nIf true, pop and entry from the containing block stack.\nIf true, pop an entry from the flattened stacking context …\nPrimitive instance flags for compositing this stacking …\nA list of all primitive instances in the scene. We store …\nThe list of primitive instances added to this stacking …\nThe store of primitives.\nPush a new stacking context. Returns context that must be …\nThe current quality / performance settings for this scene.\nRequested raster space for enclosing stacking context\nRequested raster space for this stacking context\nStack of requested raster spaces for stacking contexts\nDo some bookkeeping of past memory allocations, retaining …\nThe intersection of a source flags value with the …\nClip-chain for root iframes applied to any tile caches …\nA stack of stacking context properties.\nThe scene that we are currently building.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nIf true, set first picture as a resolve target\nIf true, set a tile cache barrier when popping the …\nA helper struct to snap local rects in device space. …\nPositioning node for this picture chain\nThe positioning node for this stacking context\nThe SpatialTree that we are currently building during …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nOffset to be applied to any filter sub-regions\nA list of surfaces (backing textures) that are relevant …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMaintains state about the list of tile caches being built …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCSS transform-style property.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAn asynchronously captured screenshot bound to a PBO which …\nRenderer infrastructure for capturing screenshots and …\nHow the <code>AsyncScreenshotGrabber</code> captures frames.\nA handle to a screenshot that is being asynchronously …\nCapture screenshots for the CompositionRecorder.\nCapture screenshots for the Gecko profiler.\nA handle to a recorded frame that was captured.\nPBOs available to be used for screenshot readback.\nPBOs containing screenshots that are awaiting readback.\nThe stride of the data in the PBO.\nDeinitialize the allocated textures and PBOs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTake a screenshot and scale it asynchronously.\nThge image format of the screenshot.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap the contents of the screenshot given by the handle and …\nThe mode the grabber operates in.\nCreate a new AsyncScreenshotGrabber for the composition …\nThe handle for the net PBO that will be inserted into …\nThe PBO that will contain the screenshot data.\nTake the screenshot in the given <code>ReadTarget</code> and scale it …\nThe textures used to scale screenshots.\nThe size of the screenshot.\nEach bit of the edge AA mask is: 0, when the edge of the …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA normal spatial node uid, defined by a caller provided …\nInternal reference frame created during scene building for …\nInternal scroll frame created during scene building for …\nA reference frame establishes a new coordinate space in …\nContains information about reference frames.\nThe root node of the entire spatial tree\nScene building specific representation of a spatial node, …\nTransforms it’s content, but doesn’t clip it. Can also …\nDefines whether we have an implicit scroll frame for a …\nContains information common among all types of SpatialTree …\nDefines the content of a spatial node. If the values in …\nInformation about a spatial node that can be queried …\nA unique identifier for a spatial node, that is stable …\nThe kind of a spatial node uid. These are required because …\nA special kind of node that adjusts its position based on …\nChild layers\nContent scale/offset relative to the coordinate system.\nThe axis-aligned coordinate system id of this node.\nDescriptor describing how this spatial node behaves\nAn external id to identify this scroll frame to API …\nAmount that visual components attached to this scroll node …\nStores whether this is a scroll frame added implicitly by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the document containing this scroll frame has any …\nInstance of this pipeline id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if this node is transformed by an invertible …\nWhether this node or any of its ancestors is being pinch …\nWhether this specific node is currently being async zoomed.\nTrue if this is the root reference frame for a given …\nIf true, this spatial node is known to exist in the root …\nReturns true for ReferenceFrames whose source_transform is …\nThe unique key for a given pipeline for this uid\nThe type of this node and any data associated with that …\nThe type of this node and any data associated with that …\nThe type of this node and any data associated with that …\nThe generation of the external_scroll_offset. This is used …\nA set of a pair of negated scroll offset and scroll …\nThe original, not including the transform and relative to …\nParent spatial node. If this is None, we are the root node.\nParent spatial node. If this is None, we are the root node.\nParent layer. If this is None, we are the root node.\nPipeline id to namespace key kinds\nPipeline that this layer belongs to\nPipeline that this layer belongs to\nAmount that this ScrollFrame can scroll in both directions.\nSnap an offset to be incorporated into a transform, where …\nSnapping scale/offset relative to the coordinate system. …\nSnapping scale/offset relative to the coordinate system. …\nSnapping scale/offset relative to the coordinate system. …\nThe source transform and perspective matrices provided by …\nThe current transform kind of this node.\nThe rectangle of the viewport of this scroll frame. This …\nThe scale/offset of the viewport for this spatial node, …\nTransformation between two nodes in the spatial tree that …\nA node in the hierarchy of coordinate system transforms.\nAn id that identifies coordinate systems in the …\nThe representation of the spatial tree during scene …\nAllows functions and methods to retrieve common …\nRepresents the spatial tree during frame building, which …\nThe delta updates to apply after building a new scene to …\nMay be set on a cluster / picture during scene building if …\nApply updates from a new scene to the frame spatial tree\nA list of transforms that establish new coordinate systems.\nScale and offset from the coordinate system that started …\nAn id for keeping track of the axis-aligned space of this …\nComplete building this scene, return the updates to apply …\nSet to true if this state represents a scroll node with …\nFind the spatial node that is the scroll root for a given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculate the accumulated external scroll offset for a …\nGet the visible face of the transfrom from the specified …\nGet the common information for a given spatial node\nCalculate the relative transform from <code>child_index</code> to …\nCalculate the relative transform from <code>child_index</code> to …\nCalculate the relative transform from <code>index</code> to the root.\nCalculate the relative transform from <code>index</code> to the root. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if this node is transformed by an invertible …\nCheck if a given spatial node is an ancestor of another …\nTrue if the any parent nodes are currently zooming\nReturns true if both supplied spatial nodes are in the …\nTrue if this node is a part of Preserve3D hierarchy.\nThe root reference frame, which is the true root of the …\nThe root reference frame, which is the true root of the …\nThe node scroll offset if this state is a scroll/sticky …\nGet total number of spatial nodes\nA set of the uids we’ve encountered for spatial nodes, …\nNodes which determine the positions (offsets and …\nNodes which determine the positions (offsets and …\nA debug check that the caller never adds a spatial node …\nStack of current state for each parent node while …\nVisit all nodes from the root of the tree, invoking a …\nVisit all nodes from the root of the tree, invoking a …\nThe compositing task for this tile, if required. This is …\nTarget render task for commands added to this tile. This …\nDirty rect for this tile\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor a given rect and sub-slice, get a list of command …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister the current surface as the source of a resolve …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA handle for an entry with automatic eviction.\nThe entry will be evicted under the normal rules (which …\nThe different budget types for the texture cache. Each …\nContainer struct for the various parameters used in cache …\nA fresh handle.\nItems in the texture cache can either be standalone …\nDescribes the eviction policy for a given entry in the …\nThe maximum number of items that will be evicted per …\nA handle for an entry with manual eviction.\nThe entry will not be evicted until the policy is …\nA set of lazily allocated, fixed size, texture arrays for …\nThe size of each region in shared cache texture arrays.\nInformation about which shader will use the entry.\nGeneral-purpose manager for images in GPU memory. This …\nStartup parameters for the texture cache.\nA texture cache handle is a weak reference to a cache …\nAllocate a render target via the pending updates sent to …\nAllocates a cache entry for the given parameters, and …\nAllocate a block from the shared cache.\nAllocates a new standalone cache entry.\nCalled at the beginning of each frame.\nMemory usage of allocated entries in all of the shared or …\nHow many bytes a single texture of the given type takes …\nClears each texture in the set, with the given set of …\nClear all entries in the texture cache. This is a fairly …\nThe current set of debug flags.\nDetails specific to standalone or shared items.\nEvict a texture cache handle that was previously set to be …\nInternal helper function to evict a strong texture cache …\nEvict old items from the shared and standalone caches, if …\nOptional notice when the entry is evicted from the cache.\nFree an existing render target\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA more detailed version of get(). This allows access to …\nGet the eviction threshold, in bytes, for the given budget …\nImage format of the data that the entry expects.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe last frame this item was requested for rendering.\nCache of texture cache handles with automatic lifetime …\nCache of texture cache entries with manual liftime …\nStrong handles for the manual_entries FreeList.\nMaximum texture size supported by hardware.\nMints a new set of shared textures.\nThe next unused virtual texture ID. Monotonically …\nThe current <code>FrameStamp</code>. Used for cache eviction policies.\nA list of allocations and updates that need to be applied …\nReturns a mutable borrow for the shared texture array …\nSet of texture arrays in different formats used for the …\nReturns whether to continue eviction and how cold an item …\nSize of the requested item, in device pixels. Does not …\nSettings on using texture unit swizzling.\nThe actual device texture ID this is part of.\nMaximum texture size before it is considered preferable to …\nArbitrary user data associated with this item.\nHandle to the resource rect in the GPU cache.\nThe type of UV rect this entry specifies.\nID of the allocation specific to its allocator.\nThe allocated size in bytes for this entry.\nOrigin within the texture layer where this item exists.\nNumber of bytes this entry allocates\nID of an allocation within a given allocator.\nA faster but less precise Shelf-packing dynamic texture …\nSpecific parameters of the allocator.\nA shelf-packing dynamic texture atlas allocator tracking …\nOptions to tweak the behavior of the atlas allocator.\nA number of 2D textures (single layer), with their own …\nAlign item sizes to a multiple of this alignment.\nAllocate a rectangle.\nAllocate a rectangle.\nAllocate a rectangle in the atlas.\nAllocate a rectangle in the atlas.\nAllocated area in pixels.\nAmount of occupied space in the atlas.\nAmount of occupied space in the atlas.\nDeallocate a rectangle and return its size.\nDeallocate a rectangle and return its size.\nDeallocate a rectangle in the atlas.\nDeallocate a rectangle in the atlas.\nWrite a debug visualization of the atlas fitting in the …\nDump a visual representation of the atlas in SVG, omitting …\nDump a visual representation of the atlas in SVG, omitting …\nDump a visual representation of the atlas in SVG format.\nDump a visual representation of the atlas in SVG format.\nHow much space is available for future allocations.\nHow much space is available for future allocations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the allocation info associated to the allocation …\nTurn a valid AllocId into an index that can be used as a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if there is no live allocations.\nConstructor\nCreate an atlas allocator with default options.\nCreate an atlas allocator with default options.\nIf possible split the allocator’s surface into multiple …\nAttempt to move some allocations from a texture to another …\nUse vertical instead of horizontal shelves.\nCreate an atlas allocator with provided options.\nCreate an atlas allocator with provided options.\nA texture allocator using the guillotine algorithm.\nThe minimum number of pixels on each side that we require …\nAdd a new slice to the allocator, and immediately allocate …\nFind a suitable rect in the free list. We choose the first …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTile was culled (not visible in current display port)\nTile was dirty, and was updated\nDebug information about a tile that was dirty and was …\nTile was occluded by a tile in front of it\nDebug information about a set of picture cache slices, …\nDebug information about a set of picture cache tiles, …\nUsed during scene building to construct the list of …\nThe output of a tile cache builder, containing all details …\nDebug information about the state of a tile\nTile was valid (no rasterization was done) and visible\nAdd a primitive, either to the current tile cache, or a …\nSet a barrier that forces a new tile cache next time a …\nOptional background color of this slice\nConsume this object and build the list of tile cache …\nCreate a new tile cache for an existing prim_list\nGiven a PrimitiveList and scroll root, construct a tile …\nDebug flags to provide to our TileCacheInstances.\nFind the scroll root for a given spatial node\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOptional root clip for the iframe\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the current slice has no primitives added …\nWhether this slice is atomic or has secondary slice(s)\nConstruct a new tile cache builder.\nNumber of picture cache slices that were created (for …\nCache the previous scroll root search for a spatial node, …\nList of tile caches that have been created so far (last in …\nHandle to the root reference frame\nConvenience method to retrieve a given slice. Deliberately …\nInformation about how to draw and composite this slice\nConvenience method to retrieve a given tile. Deliberately …\nMapping of slice id to the parameters needed to construct …\nA typesafe helper that separates new value construction …\nAn enum that tries to avoid expensive transformation …\nMaximum extra capacity that a recycled vector is allowed …\nMinimum extra capacity to keep when re-allocating the …\nMinimum sensible vector length to consider for …\nA simple offset, which can be used without doing any …\nA simple offset, which can be used without doing any …\nA simple offset, which can be used without doing any …\nRecord the size of a data structure to preallocate a …\nArc wrapper to support measurement via MallocSizeOf.\nA 2D transformation with an inverse.\nA 2D transformation with an inverse.\nA 2D transformation with an inverse.\nAn entry into a vector, similar to …\nThis is inspired by the <code>weak-table</code> crate. It holds a Vec …\nGrowns the vector by a single entry, returning the …\nClamp scaling factor to a power of two.\nReturn the determinant of the 2D part of the matrix.\nRun the first callback over all elements in the array. If …\nEither returns an existing elemenet, or grows the vector …\nCheck if the matrix post-scaling on either the X or Y axes …\nReturn an aligned rectangle that is inside the clip region …\nReturn an aligned rectangle that is inside the clip region …\nTurn Z transformation into identity. This is useful when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if this is an identity transform\nProduce a ScaleOffset that includes both self and other. …\nPreallocate vector storage.\nThe size that we’ll preallocate the vector with.\nA port of the preserves2dAxisAlignment function in Skia. …\nRecord the size of a vector to preallocate it the next …\nClear a vector for re-use, while retaining the backing …\nRounds a value up to the nearest multiple of mul\nComputes the scale factors of this matrix; that is, the …\nEquivalent to <code>mem::replace(&amp;mut vec, Vec::new())</code>\nFunctionally equivalent to …\nProduce a ScaleOffset that includes both self and other. …\nCulled for being off-screen, or not possible to render …\nImplies that this primitive covers the entire picture …\nA picture that doesn’t have a surface - primitives are …\nInformation stored for a visible primitive about the …\nA set of bitflags that can be set in the visibility …\nUninitialized - this should never be encountered after …\nContains the current state of the primitive’s visibility.\nA primitive that has been found to be visible\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe clip chain instance that was built for this primitive.\nAn index into the clip task instances array in the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCurrent visibility state of the primitive.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nA stack of currently active off-screen surfaces during the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSub-slice within the picture cache that this prim exists on\nA set of flags that define how this primitive should be …")