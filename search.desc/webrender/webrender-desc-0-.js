searchState.loadedDescShard("webrender", 0, "A GPU based renderer for the web.\nAllows callers to hook into the main render_backend loop …\nA handle to a screenshot that is being asynchronously …\nThe background color changed\nThe clip node content or spatial node changed\nThe value of a color binding changed\nOptional extra information returned by is_same when …\nThe content of one of the primitives was different\nCounts differ\nTile was culled (not visible in current display port)\nRender each quad with their own draw call.\nDisable various bits of the WebRender pipeline, to help …\nFlags to enable/disable various builtin debugging tools.\nSomething in the PrimitiveDescriptor was different\nTile was dirty, and was updated\nDebug information about a tile that was dirty and was …\nPrint driver messages to stdout.\nDisplay the pipeline epochs.\nPrimitives match\nPrimitives match\nInvalidate picture tiles every frames (useful when …\nTaint the transparent area of the glyphs with a random …\nDisplay the contents of GPU cache.\nQuery the number of pixels that pass the depth test …\nDisplay GPU timing results.\nIf set, dump picture cache invalidation debug to console.\nAn image dependency was dirty\nJust call <code>glTexSubImage</code> directly with the CPU data pointer\nDebugging information about why a tile was invalidated\nA Compositor variant that supports mapping tiles into CPU …\nInformation about the underlying data buffer of a mapped …\nAn arbitrary identifier for a native (OS compositor) …\nInformation about a bound surface that the native …\nThere was no backing native surface (never rendered, or …\nThere was no backing texture (evicted or never rendered)\nTwo items are not equal\nUse this hint for all vertex data re-initialization. This …\nTile was occluded by a tile in front of it\nThe value of an opacity binding changed\nShow picture caching debug overlay\nHighlight all primitives with colors based on kind.\nCollect and dump profiler statistics to captures.\nDisplay the frame profiler on screen.\nDefines an interface to a non-native (application-level) …\nDebug information about a set of picture cache slices, …\nAccumulate the changes in PBO first before transferring to …\nUser callback returned true on item\nThe primitive count in the dependency list was different\nThe result of a primitive dependency comparison. Size is a …\nDefines the interface for hooking up an external profiler …\nThe interfaces that an application can implement to handle …\nDisplay intermediate render targets on screen.\nRender large blobs with at a smaller size (incorrectly). …\nA handle to a recorded frame that was captured.\nReturn type from render(), which contains some repr(C) …\nThe renderer is responsible for submitting to the GPU the …\nSome basic statistics about the rendered scene, used in …\nShow an overlay displaying overdraw amount.\nScale the debug renderer down for a smaller screen. This …\nThe profiler only displays information that is out of the …\nEnable surface promotion logging.\nDescriptor for a locked surface that will be directly …\nAllows callers to hook in at certain points of the async …\nSentinel\nFlags that control how shaders are pre-cached, if at all.\nDebug information about a set of picture cache tiles, …\nThe opaque state of the backing native surface changed\nDisplay all texture cache pages on screen.\nClear evicted parts of the texture cache for debugging …\nStartup parameters for the texture cache.\nDebug information about the state of a tile\nUniquely describes the content of this tile, in a way that …\nA stable ID for a given tile, to help debugging. These are …\nA node in the dirty rect tracking quadtree.\nDetails for a node in a quadtree that tracks dirty rects …\nThe value of the transform changed\nMethod of uploading texel data from CPU to GPU.\nTile was valid (no rasterization was done) and visible\nDisplay window visibility on screen.\nDraw a zoom widget showing part of the framebuffer zoomed …\nCalled with a duration to indicate a text marker that just …\nGet a flags value with all known bits set.\nMaintains a set of allocated native composite surfaces. …\nIf true, allow textures to be initialized with …\nIf true, we allow the data uploaded in a different format …\nIf non-None, |gl| points to a profiling wrapper, and this …\nNumber of pixels below which we prefer batched uploads.\nCalled at the beginning of a profile scope.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTracks the dirty rectangles from previous frames. Used on …\nUse <code>ps_clear</code> shader with batched quad rendering to clear …\nInternal representation of clips in WebRender.\nColor depth of surface if using a YUV format.\nColor space of surface if using a YUV format.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe configuration options defining how WR composites the …\nThe compositing config, affecting how WR composites into …\nCount consecutive oom frames to detectif we are stuck …\nWhether all set bits in a source flags value are also set …\nList of profile results from previous frames. Can be …\nInitializes WebRender and creates a <code>Renderer</code> and …\nThese are “cache clip shaders”. These shaders are used …\nThe current mouse position. This is used for debugging …\nState related to the debug / profiling overlays\nPacked per-prim dependency information\nTrack depth state for assertions. Note that the default …\nMap from texture dimensions to shared depth buffers for …\nThis is called exactly once, when the scene builder thread …\nThis is called exactly once, when the render backend …\nThe intersection of a source flags value with the …\nA list of the device dirty rects that were updated this …\nThe set of documents which we’ve seen a publish for …\nDumps the source of the shader with the given name\nOutput the source of the shader with the given name.\nGet a flags value with all bits unset.\nIf true, we’ll use instanced vertex attributes. Each …\nEnable sub-pixel anti-aliasing if a fast implementation is …\nCalled at the end of a profile scope.\nMeta-macro to enumerate the various interner identifiers …\nCalled to mark an event happening.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFormat that we expect the data to be provided when filling …\nOptional trait object that allows the client application …\nThe ID of the FBO that WR should bind to, in order to draw …\nIf true, partial present state has been reset and …\nA generic backing store for caches.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nOverview of the GPU cache.\nWhen the GPU cache debugger is enabled, we keep track of …\nSet to true if this GPU supports hardware fast clears as a …\nThis module contains the logic to obtain a primitive’s …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe interning module provides a generic data structure …\nFormat the texel data is internally stored in within a …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLeaf or internal node\nThe last frame this tile had its dependencies updated …\nPicture space rect that contains valid pixels region of …\nIf enabled, pinch-zoom will apply the zoom factor during …\nMap a tile’s underlying buffer so it can be used as the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNotification requests to be fulfilled after rendering.\nAn offset into the surface that WR should draw. Some …\nIf true, panic whenever a GL error occurs. This has a …\nPrograms that have not yet been cached to disk (by …\nHold a next ResultMsg that will be handled by update().\nTrue if there are any TextureCacheUpdate pending.\nA picture represents a dynamically rendered image.\nInformation about the state of picture cache tiles. This …\nAssociated pixel type.\nThis is a generic callback which provides an opportunity …\nThis is called after a scene build completes without any …\nThis is called after a resource update operation on the …\nThis is called after each scene swap occurs. The …\nThis is called before each scene build starts.\nThis is called before each scene swap occurs.\nPrepare pass\nList of primitive instance unique identifiers. The uid is …\nOverlay profiler\nOptional trait object that allows the client application …\nFormat to read the texels as, so that they can be uploaded …\nRect of this node in the same space as the tile cache …\nA simple occlusion culling algorithm for axis-aligned …\nThis is called exactly once, when the scene builder thread …\nThis is called exactly once, when the render backend …\nRegister a thread with the profiler.\nIf true, we’ll reject contexts backed by a software …\nThe intersection of a source flags value with the …\nThe high-level module responsible for managing the …\nThis module contains the render task graph.\nThe high-level module responsible for interfacing with the …\nRequired stride alignment for pixel transfers. This may be …\nWhether we must ensure the source strings passed to …\nWhether we must unbind any texture from …\nThis is called for each transaction with the …\nScene building\nScreen capture infrastructure for the Gecko Profiler and …\nPrimitive segmentation\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nAllows webrender to specify the total region that will be …\nSet the profiler callbacks, or None to disable the …\nA debug boolean for tracking if the shader program has …\nIf namespaces are allocated by the client, then the …\nGuards to check if we might be rendering a frame with …\nThe actual source surface size before transformation.\nOptional function pointers for measuring memory used by a …\nUtilities to deal with coordinate spaces.\nStatistics about the frame that was rendered.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nupdate() defers processing of ResultMsg, if …\nWhen to use glTexStorage*. We prefer this over glTexImage* …\nTextures for planes of the surface, or 0 if not applicable.\nReturns true if the current thread is being profiled.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnmap a tile that was was previously mapped via map_tile …\nUnregister a thread with the profiler.\nThe default size in bytes for PBOs used to upload texture …\nWhether to use draw calls instead of regular blitting …\nWhether to use shaders that have been optimized at build …\nWhether to use shaders that have been optimized at build …\nVisibility pass\nThe number of YUV planes in the surface. 0 indicates …\nA lazily created texture for the zoom debugging widget.\nThe four children of this node\nThe index buffer of primitives that affect this tile on …\nA bitset of which of the last 64 frames have been dirty …\nThe number of frames since this node split or merged.\nThe index buffer of primitives that affected this tile …\nWe use this to generate the async blob rendering requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee ImageResource::visible_rect.\nEncapsulates the logic of building batches for items that …\nSupports (recursively) adding a list of primitives and …\nFeatures of the batch that, if not requested, may allow a …\nOptional textures that can be used as a source in the …\nThe parameters that are specific to a kind of brush, used …\nIndicates a primitive in this batch may use a clip mask.\nThe minimum size of a clip mask before trying to draw in …\nSize in device pixels for tiles that clip masks are drawn …\nA list of clip instances to be drawn into a target.\nBatcher managing draw calls into the clip mask (in the RT …\nA list of clip instances to be drawn into a target.\nUsed to signal there are no segments provided with this …\nEither a single texture / user data for all segments, or a …\nEach segment can optionally specify a per-segment texture …\nInput textures for a primitive, without consideration of …\nDraw a (potentially masked) alpha cutout so that a video …\nAdd a single segment instance to a batch.\nAdd any segment(s) from a brush to batches.\nWhere appropriate, draw a clip rectangle as a small series …\nGet a flags value with all known bits set.\nUnion of all of the batch’s item rects.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nClear all current batches in this list. This is typically …\nClear all current batches in this list. This is typically …\nClear all current batches in this builder. This is …\nClear all current batchers. This is typically used when a …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nA composite style effect with single input texture\nA composite style effect with up to 3 input textures\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nAn empty batch textures (no binding slots set)\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nRetrieve the correct clip batch list to append to, …\nA temporary buffer that is used during glyph fetching, …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThis brush instance has a list of per-segment instance …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhen the batch rectangle above isn’t a good enough …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nA textured primitive\nA textured primitive with optional clip mask\nAn untextured primitive with optional clip mask\nThe first clip in each clip task. This will overwrite all …\nThe intersection of a source flags value with the …\nAny subsequent clip masks (rare) for a clip task get drawn …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThis brush instance shares the per-segment data across all …\nRectangle draws fill up the rectangles with rounded …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe rectangle of the owning render target that this set of …\nThe overall scissor rect for this render task, if one is …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe kind of border corner clip.\nCache key that uniquely identifies a border segment in the …\nInformation needed to place and draw a border edge.\nMaximum resolution in device pixels at which borders are …\nMaximum number of dots or dashes per segment to avoid …\nAdd a corner segment (if valid) to the list of border …\nAdd an edge segment (if valid) to the list of border …\nBuild the set of border instances needed to draw a border …\nCreate the set of border segments and render task cache …\nWhether to apply anti-aliasing on the border corners.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the maximum scale that we allow for this set of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOffset in local space to place the edge from origin.\nSize of the edge in local space.\nLocal stretch size for this edge (repeat past this).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn image that <code>ResourceCache</code> is unable to resolve during a …\nA short description of an external image to be saved …\nPath to the RON file describing the texel data.\nExternal image data source.\nFrame sequence ID when capturing multiple frames. Zero for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResource sequence ID when capturing multiple frames. Zero …\nScene sequence ID when capturing multiple frames. Zero for …\nUV sub-rectangle of the image.\nRepresents a clip-chain as defined by the public API that …\nThe data available about an interned clip node during …\nID for a ClipTreeLeaf\nID for a ClipTreeNode\nHelper to identify simple clips (normal rects) from other …\nA helper struct for converting between coordinate systems …\nThe main clipping public interface that other modules …\nA clip-tree built during scene building and used during …\nUsed by the scene builder to build the clip-tree that is …\nA leaf node in a clip-tree. Any primitive that is clipped …\nA (non-leaf) node inside a clip-tree\nA rectangle with ClipOut, or any other kind of clip.\nRepresents a local rect and a device space rectangles that …\nPolygonKeys get interned, because it’s a convenient way …\nA normal clip rectangle, with Clip mode.\nAdd a set of clips to the provided tree node id, reusing …\nAdd clips from a given clip-chain to the set of clips for …\nAdd a set of clips to the provided tree node id, reusing …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe main interface external code uses. Given a local …\nMain entry point to build a path in the clip-tree for a …\nBuild a clip-leaf for a picture\nBuild a clip-leaf for a normal primitive\nBuild a clip-leaf for a tile-cache\nCheck if a clip-chain has complex (non-rectangular) clips\nClip-chains defined by the display list\nA temporary buffer stored here to avoid constant heap …\nClips defined by the display list\nCheck if a clip-node has complex (non-rectangular) clips\nThe build clip_node_id for this level of the stack\nList of clips pushed/popped by grouping items, such as …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nGet the current clip root (the node in the clip-tree where …\nDefine a clip-chain\nDefine a image mask clip\nDefine a new rect clip\nDefine a new rounded rect clip\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFinalize building and return the clip-tree\nFind the lowest common ancestor of two clip tree nodes. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGiven a clip-chain instance, return a safe rect within the …\nRetrieve a clip tree leaf by id\nGet a clip leaf by id\nRetrieve a clip tree node by id\nGet a clip node by id\nRecursive impl to check if a clip-chain has complex …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nTest where point p is relative to the infinite line that …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCache the previous clip-chain build, since this is a …\nConstruct a new clip space converter between two spatial …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPop a clip off the clip_stack, when exiting a grouping item\nPop a clip root, when exiting a surface.\nDebug print the clip-tree\nPush a clip-chain that will be applied to any prims built …\nPush a clip-id that will be applied to any prims built …\nPush a clip root (e.g. when a surface is encountered) that …\nPush a clip root (e.g. when a surface is encountered) that …\nThe intersection of a source flags value with the …\nReturn true if the rounded rectangle described by <code>container</code>…\nSet of clips that were already seen and included in …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSetup the active clip chains for building a clip chain …\nSetup the active clip chains, based on an existing …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns true if this clip mask can run through the fast …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe tree we are building\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nIf true, the prim is 2d and axis-aligned in device space. …\nDraw a complex (3d-split) primitive, that has multiple GPU …\nDraw a primitive, that has a single GPU buffer addresses.\nDraw a generic quad primitive\nDraw a simple primitive that needs prim instance index …\nBitmask for command bits of the command.\nSet a list of variable-length segments\nChange the current spatial node.\nA tightly packed command stored in a command buffer\nA list of commands describing how to draw a primitive list.\nAbstracts whether a command buffer is being built for a …\nIf true, the device-pixel scale is already applied, so …\nIf true, render as a mask. This ignores the blue, green …\nDefines the space that a quad primitive is drawn in\nBitmask for param bits of the command.\nThe unpacked equivalent to a <code>Command</code>.\nFlags related to quad primitives\nIf true, use segments for drawing the AA edges, to allow …\nAdd a cmd to the command buffer.\nAdd a primitive to the command buffer.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe encoded drawing commands.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCached current spatial node.\nEncode arbitrary data word.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nEncode drawing a complex prim.\nEncode drawing a simple primitive.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nIf a command buffer establishes a sub-graph, then at the …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nList of render tasks that depend on the task that will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nIterate the command list, calling a provided closure for …\nConstruct a new cmd buffer.\nConstruct a simple command buffer builder.\nConstruct a tiled command buffer builder.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nIf this surface builds a sub-graph, it will mark a task in …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nEncode a list of segments that follow\nPush a list of segments in to the cmd buffer\nEncode changing spatial node.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDon’t create a native compositor surface, blit it as a …\nDescribes surface properties used to composite a frame. …\nOptional features that can be opted-out of when …\nThe list of tiles to be drawn this frame\nDescribes the properties that identify a surface …\nThe surface format for a tile being composited.\nDescribes the geometry and surface of a tile to be …\nDescribes properties that identify a tile composition …\nDescribes the source surface information for a tile to be …\nDefines an interface to a native (OS level) compositor. If …\nPublic interface specified in <code>WebRenderOptions</code> that …\nThis is a representation of <code>CompositorConfig</code> without the …\nWhich method is being used to draw a requested compositor …\nThe transform type to apply to Compositor surfaces.\nA transform for either a picture cache or external …\nA special id for the native surface that is used for debug …\nA special id for the native surface that is used for debug …\nLet WR draw tiles via normal batching. This requires no …\nWR handles compositing via drawing.\nInformation about a plane in a YUV or RGB surface.\nDescribes information about drawing a primitive as a …\nA Compositor variant that supports mapping tiles into CPU …\nInformation about the underlying data buffer of a mapped …\nUse a native OS compositor to draw tiles. This requires …\nNative OS compositor.\nAn arbitrary identifier for a native (OS compositor) …\nInformation about a bound surface that the native …\nDescribes an operation to apply to a native surface\nDescribes details of an operation to apply to a native …\nInformation about an opaque surface used to occlude tiles.\nList of registered occluders.\nCreate a native surface, draw it between sub-slices …\nDefines an interface to a non-native (application-level) …\nAn ExternalSurfaceDescriptor that has had image keys …\nDescriptor for a locked surface that will be directly …\nThe backing surface kind for a tile. Same as <code>TileSurface</code>, …\nCreate a native surface, draw it under content (must be …\nAdd a surface to the visual tree to be composited. Visuals …\nGet a flags value with all known bits set.\nReturn the total area covered by a set of occluders, …\nAttaches an ExternalImageId to an OS compositor surface …\nBegin the frame\nBind this surface such that WR can issue OpenGL commands …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nColor depth of surface if using a YUV format.\nColor space of surface if using a YUV format.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nUse the client provided native compositor interface to add …\nThe kind of compositor for picture cache tiles (e.g. drawn …\nWhether all set bits in a source flags value are also set …\nCreate a new OS backdrop surface that will display a color.\nCreate a new OS compositor surface that can be used with an\nCreate a new OS compositor surface with the given …\nCreate a new OS compositor tile with the given properties.\nDefault compositor config is full present without partial …\nDefault compositor config is full present without partial …\nSafely deinitialize any remaining resources owned by the …\nDescription of the surfaces and properties that are being …\nDestroy the surface with the specified id. WR may call this\nDestroy an existing compositor tile.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nConstruct an empty descriptor.\nEnable/disable native compositor usage\nCommit any changes in the compositor tree for this frame. …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nList of primitives that were promoted to be compositor …\nThe ID of the FBO that WR should bind to, in order to draw …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet the capabilities struct for this compositor. This is …\nGet the surface -&gt; device compositor transform\nCalculate the device-space rect of a local compositor …\nGet the local -&gt; device compositor transform\nCalculate an optional occlusion rect for a given …\nCalculate the device-space rect of a local compositor …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMark a tile as invalid before any surfaces are queued for …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns true if a tile with the specified rectangle and …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nWhether we have low quality pinch zoom enabled\nMap a tile’s underlying buffer so it can be used as the …\nThe maximum number of dirty rects that can be provided per …\nIf native compositing is enabled, the native compositor …\nReturns true if the type of compositor surface needs an …\nConstruct a new state for compositing picture tiles. This …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nList of registered occluders\nAn offset into the surface that WR should draw. Some …\nDebugging information about the state of the pictures …\nPush a compositor surface on to the list of tiles to be …\nAdd a picture cache to be composited\nWhether the compositor requires redrawing on invalidation.\nRegister an occluder during picture cache updates that can …\nRegister use of a transform for a picture cache tile or …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nAllows webrender to specify the total region that will be …\nThe actual source surface size before transformation.\nNotify the compositor that all tiles have been invalidated …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nWhether external compositor surface supports negative …\nReturns true if the compositor surface strategy supports …\nWhether or not this compositor will create surfaces for …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTextures for planes of the surface, or 0 if not applicable.\nList of tiles to be drawn by the Draw compositor. Tiles …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nList of registered transforms used by picture cache or …\nUnbind the surface. This is called by WR when it has …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnmap a tile that was was previously mapped via map_tile …\nCompare this state vs. a previous frame state, and …\nIf the native surface needs to be updated, this will …\nThe virtual surface size used by the underlying platform.\nThe number of YUV planes in the surface. 0 indicates …\nUsed to generate z-id values for tiles in the Draw …\nA client provided interface to a native / OS compositor.\nIf this is true, WR must draw the previous frames’ dirty …\nIf this is zero, a full screen present occurs at the end …\nA client provided interface to a compositor handling …\nThe capabilities of the underlying platform.\nDraw previous regions when doing partial present.\nPartial present support.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse the device’s default draw target, with the provided …\nUse the device’s default draw target.\nContains the parameters necessary to bind a draw target.\nUse an FBO attached to an external texture.\nUse an FBO attached to an external texture.\nSequence number for frames, as tracked by the device layer.\nThis texture corresponds to one of the shared texture …\nJust call <code>glTexSubImage</code> directly with the CPU data pointer\nAn OS compositor surface\nAn FBO bound to a native (OS compositor) surface\nAccumulate the changes in PBO first before transferring to …\nThe interfaces that an application can implement to handle …\nContains the parameters necessary to bind a texture-backed …\nA refcounted depth target, which may be shared by multiple …\nDescribes a required alignment for a stride, which can …\nDescribes for which texture formats to use the glTexStorage…\nPlain old data that can be used to initialize a texture.\nWebRender interface to an OpenGL texture.\nUse the provided texture.\nUse the provided texture,\nA structure defining a particular workflow of texture …\nUsed to perform a series of texture uploads. Create using …\nMethod of uploading texel data from CPU to GPU.\nA PBO for uploading texture data, managed by UploadPBOPool.\nAllocates and recycles PBOs used for uploading texture …\nA buffer used to manually stage data to be uploaded to a …\nAn internally mutable swizzling state that may change …\nAdd a new ProgramBinary to the cache. This function is …\nGet a flags value with all known bits set.\nAttaches the provided texture to the current Read FBO …\nList of allocated PBOs ready to be re-used.\nIf non-None, |gl| points to a profiling wrapper, and this …\nNumber of pixels below which we prefer batched uploads.\nTo be called at the beginning of a series of uploads. …\nThe binary.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nPerform a blit between src_target and dest_target. This …\nPerform a blit between self.bound_read_fbo and …\nPerforms a blit while flipping vertically. Useful for …\nThe PixelBuffer containing this upload.\nA list of buffers containing uploads that need to be …\nGiven a scissor rect, convert it to the right coordinate …\nEnsures that the maximum texture size is less than or …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nCopies the entire contents of one texture to another. The …\nCopies the specified subregion from src_texture to …\nCreates an unbound FBO object. Additional attachment API …\nCreates an FBO with the given texture bound as the color …\nCreate a shader program. This does minimal amount of work …\nCreate a shader program and link it immediately.\nThe preferred size, in bytes, of the buffers to allocate.\nTrack depth state for assertions. Note that the default …\nReturns the size in bytes of a depth target with the given …\nMap from texture dimensions to shared depth buffers for …\nThe intersection of a source flags value with the …\nReturns the dimensions of this draw-target.\nDumps the source of the shader with the given name\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFormat that we expect the data to be provided when filling …\nFormat we expect the users to provide the texels in.\nFramebuffer Object allowing this texture to be rendered to.\nSame as the above, but with a depth buffer attached.\nReturns the flags for this texture.\nReturns a mutable borrow of the flags for this texture.\nFlushes all pending texture uploads. Must be called after …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns a mapping of the data in the buffer, to be written …\nObtain a PBO, either by reusing an existing PBO or …\nReturns the required stride of the data to be written to …\nGet texels of a texture into the specified output slice.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nFormat the texel data is internally stored in within a …\nFormat the GPU natively stores texels in.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNotifies the device that the contents of the current …\nNotifies the device that the contents of a render target …\nWhether all known bits in this flags value are set.\nReturns true if this draw target corresponds to the …\nWhether all bits in this flags value are unset.\nReturns whether this GPU belongs to the Mali Bifrost family\nReturns whether this GPU belongs to the Mali Midgard family\nReturns whether this GPU belongs to the Mali Valhall family\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLink a program, attaching the supplied vertex format.\nTrue if the binary has been linked, i.e. used for …\nReturns the limit on texture dimensions (width or height).\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe offset of this upload within the PixelBuffer.\nFrees all allocated buffers in response to a memory …\nPBOs which have been orphaned. We can recycle their IDs …\nParses the major, release, and patch versions from a …\nPool used to obtain PBOs to fill with texture data.\nPrograms that have not yet been cached to disk (by …\nAssociated pixel type.\nWhether clearing a render target (immediately after …\nOptional trait object that allows the client application …\nThe Render Buffer Object representing the depth target.\nFormat to read the texels as, so that they can be uploaded …\nRead rectangle of pixels into the specified output slice.\nReference count. When this drops to zero, the RBO is …\nThe intersection of a source flags value with the …\nThe name of the renderer, as reported by GL\nReturns the number of bytes allocated for shaders in the …\nGenerates a memory report for the resources managed by the …\nGenerates a memory report.\nRequired stride alignment for pixel transfers. This may be …\nReturns the size and stride in bytes required to upload an …\nWhether we must perform a full unscissored glClear on …\nWhether to enforce that texture uploads be batched …\nWhether we must ensure the source strings passed to …\nWhether we must unbind any texture from …\nWhether the VAO must be rebound after an attached VBO has …\nReturns a PBO to the pool. If the PBO is recyclable it is …\nPBOs which have been returned during the current frame, …\nNotifies the device that a render target is about to be …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the uTextureSize uniform. Most shaders do not require …\nA debug boolean for tracking if the shader program has …\nThe size of this upload.\nReturns the number of bytes (generally in GPU memory) that …\nReturns a reference to the source digest hash.\nReturns an UploadStagingBuffer which can be used to …\nThe stride of the data within the buffer.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nWhether advanced blend equations are supported.\nWhether we are able to ue glClear to clear regions of an …\nWhether the device supports persistently mapped buffers, …\nWhether the RGBAF32 textures can be bound to framebuffers.\nWhether the function <code>glCopyImageSubData</code> is available.\nWhether dual-source blending is supported.\nWhether the extension GL_OES_EGL_image_external_essl3 is …\nWhether KHR_debug is supported for getting debug messages …\nWhether multisampled render targets are supported.\nWhether the driver supports uploading to textures from a …\nWhether the extension QCOM_tiled_rendering is supported.\nWhether the driver can reliably upload data to R8 format …\nWhether the driver can correctly invalidate render …\nWhether offscreen render targets can be partially updated.\nWhether we can use SSBOs.\nWhether we can configure texture units to do swizzling on …\nWhether the driver supports specifying the texture usage …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nWhen to use glTexStorage*. We prefer this over glTexImage* …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSave any new program binaries to the disk cache, and if …\nUploads texture data to the specified texture.\nUploads manually staged texture data to the specified …\nReturns a <code>TextureUploader</code> which can be used to upload …\nPerforms an immediate (non-PBO) texture upload.\nUsage hint to provide to the driver for optimizations.\nWhether to use draw calls instead of regular blitting …\nWhether to use shaders that have been optimized at build …\nReturns true if this texture was used within <code>threshold</code> …\nWhether anti-aliasing is supported natively by the GL …\nWhether clip-masking is supported natively by the GL …\nPBOs which are waiting until their sync object is …\nSize of the texture in pixels\nFBO that corresponds to the selected layer / depth mode\nNative GL texture ID\nTarget rectangle to draw.\nNative GL texture target\nTotal size of the target.\nWhether to draw with the texture’s associated depth …\nID of the FBO to read from.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents an ellipse centred at a local space origin.\nNumber of steps to integrate arc length over.\nBinary search to estimate the angle of an ellipse for a …\nReturns the argument unchanged.\nGet a point and tangent on this ellipse from a given angle.\nUse Simpsons rule to approximate the arc length of part of …\nCalls <code>U::from(self)</code>.\nFind the signed distance from this ellipse given a point. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the GPU cache for a given filter data template. …\nA rendering-oriented representation of the frame built by …\nProduces the frames that are sent to the renderer.\nA set of common / global resources that are retained …\nImmutable context of a picture when processing children.\nMutable state of a picture that gets modified when the …\nCompute the contribution (bounding rectangles, and …\nProcesses this pass to prepare it for rendering.\nContains picture cache tiles, and associated information. …\nRetrieve the current dirty region during primitive …\nDebugging information to overlay for this frame.\nA GPU cache config for drawing cut-out rectangle …\nThe image shader block for the most common / default set …\nList of textures that we don’t know about yet from the …\nThe rectangle to show the frame in, on screen.\nWhether ImageBufferKind::TextureExternal images must first …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMain GPU data buffer constructed (primarily) during the …\nThe GPU cache frame that the contents of Self depend on\nTrue if this frame has been drawn by the renderer.\nTrue if this frame contains any render tasks that write to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPop the top dirty region from the stack.\nPush a command to a set of command buffers\nPush a new dirty region for child primitives to cull / …\nPush a primitive command to a set of command buffers\nSet the active list of segments in a set of command buffers\nThe surface that this picture will render on.\nTrue if we’re running tests (i.e. via wrench).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an always-invalid epoch.\nReturns an always-invalid handle.\nReturns true if this handle and the supplied weak handle …\nMints a new epoch.\nMints a new <code>FreeList</code> with no entries.\nIf possible, remove entirely any empty glyph key caches.\nClear out evicted entries from glyph key caches.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes an allocated chunk.\nRepresents the index of a Block in the block array. We …\nThe number of frames an entry can go unused before being …\nDescribes a freed chunk.\nAt the time of this writing, Firefox uses about 15 GPU …\nA single texel in RGBAF32 texture - 16 bytes.\nThe main LRU cache interface.\nCommand to inform the debug display in the renderer when …\nA wrapper object for GPU data requests, works as a …\nCreates an invalid dummy block ID.\nThe amount of time utilization must be below the above …\nThe ratio of utilized blocks to total blocks for which we …\nBegin a new frame.\nA flat list of GPU blocks that are pending upload to GPU …\nDrops everything in the GPU cache. Must not be called once …\nWhether the texture should be cleared before updates are …\nWhole state GPU block metadata for debugging.\nThe current debug flags for the system.\nThe set of documents which have had frames built in this …\nEnd the frame. Return the list of updates to apply to the …\nExtract the pending updates from the cache.\nThe frame current update list was generated from.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the actual GPU address in the texture for a given slot …\nThe current height of the texture. The render thread …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCurrent FrameId.\nWhether there is a pending clear to send with the next …\nIndicates that prepare_for_frames has been called for this …\nRequest a resource be added to the cache. If the resource …\nThis indicates that we performed a cleanup operation which …\nNumber of blocks requested this frame that don’t need to …\nSets the current debug flags for the system.\nReturns true if utilization has been low enough for long …\nCPU-side texture allocator.\nList of updates to apply.\nReturns the ratio of utilized blocks.\nFlags that define how the common brush shader code should …\nConvenience structure to encode into PrimitiveInstanceData.\nVertex format for issuing colored quads.\nVertex format for picture cache composite shader. When …\nA GPU-friendly representation of the <code>ScaleOffset</code> type\nWhether to force the anti-aliasing when the primitive is …\nIdentity transform ID.\nConvenience structure to encode into the image brush’s …\nApply perspective interpolation to UVs\nMiddle (fill) area of a border-image-repeat.\nDo interpolation relative to segment rect, rather than …\nRepeat UVs horizontally.\nWhether to position the repetitions so that the middle tile\nHorizontally follow border-image-repeat: round.\nRepeat UVs vertically.\nWhether to position the repetitions so that the middle tile\nVertically follow border-image-repeat: round.\nThe extra segment data is a texel rect.\nThe GPU data payload for a transform palette entry.\nSpecifies that an RGB CompositeInstance’s UV coordinates …\nSpecifies that an RGB CompositeInstance’s UV coordinates …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOverride the kind of transform stored in this id. This can …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nExtract the transform kind from the id.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA copy of important spatial node data to use during hit …\nDefines the immutable part of a hit tester for a given …\nStatistics about allocation sizes of current hit tester, …\nAdd a hit testing primitive.\nThe accumulated external scroll offset for this spatial …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet stats about the current scene allocation sizes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of hit testing primitives.\nConstruct a new hit testing scene, pre-allocating to size …\nParent clip node\nThe pipeline id of this node.\nA particular point must be inside all of these regions to …\nThe positioning node for this clip\nWorld transform for content transformed by this node.\nWorld viewport transform for content transformed by this …\nResolve a resource cache’s imagre request into a texture …\nSize of the first tile in layout space.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRange of tiles of the full image including tiles that are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSize of the last tile in layout space.\nPosition of the top-left corner of the primitive rect in …\nPosition of blob point (0, 0) in layout space.\nIf repetitions are far enough apart that only one is within\nRange of visible tiles to iterate over in number of tiles.\nCompute the range of tiles (in number of tiles) that …\nDecompose tiles along an arbitrary axis.\nThe data store lives in the frame builder thread. It …\nImplement <code>Internable</code> for a type that wants to participate …\nThe main interning data structure. This lives in the scene …\nMemory report for interning-related data structures. …\nA globally, unique identifier\nA list of updates to be applied to the data store, …\nType marker for create_handle method\nApply any updates from the scene builder thread to this …\nConstruct a stable handle value from the item details\nThe current epoch for the interner.\nRetrieve the pending list of updates for an interner that …\nList of free slots in the data store for re-use.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex into the freelist this item is located\nItems to insert.\nIntern a data structure, and return a handle to that data. …\nFrame that this element was first interned\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast frame this element was referenced (used to GC intern …\nThe information associated with each interned item that …\nUniquely map an interning key to a handle\nItems to remove.\nPending list of updates that need to be applied.\nPerforms an initial texture allocation.\nAn ID for a texture that is owned by the <code>texture_cache</code> …\nClears the target area, rather than uploading any pixels. …\nSelect a dummy 1x1 white texture. This can be used by image\nAn external image texture, mananged by the embedding.\nEquivalent to api::FilterOp with added internal information\nIdentifier to track a sequence of frames.\nFrees the texture and the corresponding cache ID.\nAn invalid sentinel FrameId, which will always compare …\nAn invalid sentinel FrameStamp.\nEquivalent to <code>None</code>, allowing us to avoid using <code>Option</code>s …\nPrimitive metadata we pass around in a bunch of places\nAn arbitrary number which we assume opacity is invisible …\nCustom field embedded inside the Polygon struct of the …\nA concrete plane splitter type used in WebRender.\nAn index into the scene’s list of plane splitters\nWraps a frame_builder::Frame, but conceptually could hold …\nReallocates the texture without preserving its contents.\nA list of updates built by the render backend that should …\ncombine 2 images with SVG_FEBLEND_MODE_COLOR parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_COLOR_BURN …\ncombine 2 images with SVG_FEBLEND_MODE_COLOR_DODGE …\ncombine 2 images with SVG_FEBLEND_MODE_DARKEN parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_DIFFERENCE …\ncombine 2 images with SVG_FEBLEND_MODE_EXCLUSION …\ncombine 2 images with SVG_FEBLEND_MODE_HARD_LIGHT …\ncombine 2 images with SVG_FEBLEND_MODE_HUE parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_LIGHTEN parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_LUMINOSITY …\ncombine 2 images with SVG_FEBLEND_MODE_MULTIPLY …\ncombine 2 images with SVG_FEBLEND_MODE_NORMAL parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_OVERLAY parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_SATURATION …\ncombine 2 images with SVG_FEBLEND_MODE_SCREEN parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_SOFT_LIGHT …\ntransform colors of image through 5x4 color matrix …\ntransform colors of image through configurable gradients …\nProcessed version of SVGFEComponentTransfer with the …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ntransform image through convolution matrix of up to 25 …\ntransform image through convolution matrix of up to 25 …\ntransform image through convolution matrix of up to 25 …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncalculate a distorted version of first input image using …\ncreate and merge a dropshadow version of the specified …\nsynthesize a new image of specified size containing a …\ncreate a blurred version of the input image parameters: …\nFilter that does no transformation of the colors, used to …\nsynthesize a new image based on a url (i.e. blob image …\ncreate a new image based on the input image with the …\ncreate a new image based on the input image with the …\nrepresents CSS opacity property as a graph node like the …\nFilter that copies the SourceAlpha image into the …\nFilter that copies the SourceGraphic image into the …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncreate a new image based on the input image, repeated …\nconvert a color image to an alpha channel - internal use; …\nsynthesize a new image based on Fractal Noise (Perlin) …\nsynthesize a new image based on Fractal Noise (Perlin) …\nsynthesize a new image based on Turbulence Noise (offset …\nsynthesize a new image based on Turbulence Noise (offset …\nSwizzle settings of the texture cache.\nAn entry in the texture cache.\nInformation used when allocating / reallocating.\nCommand to allocate, reallocate, or free a texture for the …\nSub-operation-specific information for allocation …\nA little bit of extra information to make memory reports …\nCommand to update the contents of the texture cache.\nCommand to update the contents of the texture cache.\nIdentifies the source of an input texture to a shader.\nAtomic set of commands to manipulate the texture cache, …\nAdvances this FrameId to the next frame.\nAdvances to a new frame.\nCommands to alloc/realloc/free the textures. Processed …\nReturns the backing u64 for this FrameId.\nSwizzle required on sampling a texture with BGRA8 format.\nId of the picture in question in a namespace unique to …\nIndicates that there was some kind of cleanup clear …\nCommands to move items within the cache, these are applied …\nGets the DocumentId in this stamp.\nReturns a FrameId corresponding to the first frame.\nReturns a FrameStamp corresponding to the first frame.\nGets the FrameId in this stamp.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf true, this texture requires a depth target.\nThe virtual ID (i.e. distinct from device ID) of the …\nEqual to the inflate value of the referenced buffer, or 0\npadding for output rect if we need a border to get correct …\nvirtualized picture input bindings, these refer to other …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this update list has no effect.\nReturns true if this is a no-op (no updates to be applied).\nIndicates whether this corresponds to one of the shared …\nIndicates this graph node was marked as necessary by the …\nDetails corresponding to the operation in question.\ntrue if color_interpolation_filter == LinearRgb; shader …\nList of OS native surface create / destroy operations to …\nMints a new <code>TextureUpdateList</code>.\nSets the clears_shared_cache flag for renderer-side sanity …\nDuring scene build this is the offset to apply to the …\nPushes an allocation operation onto the list.\nPush a copy operation from a texture to another.\nSends a command to the Renderer to clear the portion of …\nPushes a free operation onto the list, potentially …\nPushes a reallocation operation onto the list, potentially …\nPushes an update operation onto the list.\nNOTE: this is <em>ideally</em> redundant with the clip_rect but that…\nPadding on each side to represent how this input is read …\nSet by wrap_prim_with_filters to the subregion of the …\nclipping rect for filter node output\nPadding on each side to represent how this input affects …\nAtomic set of texture cache updates to apply.\nGets the time associated with this FrameStamp.\nCommands to update the contents of the textures. Processed …\nStores a strong handle controlling the lifetime of the …\nIndex of an LRU tracking element\nThe main public interface to the LRU cache\nStores the data supplied by the user to be cached, and an …\nInternal implementation of the LRU tracking list\nA free list of cache entries, and indices into the LRU …\nAs tracking items are removed, they are stored in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet immutable access to the data at a given slot. Since …\nGet mutable access to the data at a given slot. Since this …\nCurrent head of the list - this is the oldest item that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe freelist that stores all the LRU tracking items\nInternal function that takes an item index, and links it …\nThe LRU tracking list, allowing O(1) access to the oldest …\nThe location of the LRU tracking element for this cache …\nCalled to mark that an item was used on this frame. It …\nConstruct a new LRU cache\nConstruct a new LRU tracker\nThe LRU partition that tracks this entry.\nReturns a reference to the oldest element, or None if the …\nReturn a reference to the oldest item in the cache, …\nRemove the oldest element from the front of the LRU list. …\nRemove the oldest item from the cache. This is used to …\nInsert a new element into the cache. Returns a weak handle …\nPush a new LRU tracking item on to the back of the list, …\nManually evict a specific item.\nManually remove an item from the LRU tracking list. This …\nThis is a special case of <code>push_new</code>, which is a requirement …\nCurrent tail of the list - this is the most recently used …\nThis is used by the calling code to signal that the …\nInternal function that takes an LRU item index, and …\nThe cached data provided by the caller for this element.\nA 32bit payload used as input for the pattern-specific …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis surface allows subpixel AA text\nA backdrop that is reused which requires a surface.\nStores information about the calculated opaque backdrop of …\nThe background color changed\nInformation stored in a tile descriptor for a binding.\nInformation about the state of a binding.\nDraw to intermediate surface, copy straight across. This …\nA set of flags describing why a picture may need a backing …\nClip node that <em>might</em> require a surface.\nThe clip node content or spatial node changed\nA set of flags describing why a picture may need a backing …\nThe value of a color binding changed\nOptional extra information returned by is_same when …\nApply a component transfer filter.\nWrapper struct around an external surface descriptor with …\nSubpixel AA can be drawn on this surface, if not …\nThe content of one of the primitives was different\nCounts differ\nIf set, this picture should not apply snapping via …\nIn some cases, we need to know the dirty rect of all tiles …\nSubpixel AA text cannot be drawn on this surface\nSomething in the PrimitiveDescriptor was different\nRepresents the dirty region of a tile cache picture.\nPrimitives match\nPrimitives match\nInformation about a native compositor surface cached …\nHash key for an external native compositor surface\nApply a CSS filter (except component transfer).\nMix-blend-mode on a child that requires isolation.\nWhether this cluster is visible when the position node is …\nThis picture is a resolve target (doesn’t actually …\nThis picture establishes a sub-graph, which affects how …\nThis flag is set during the first pass picture traversal, …\nAn image dependency was dirty\nInformation stored an image dependency\nThe picture is a part of 3D context.\nA surface that is used as an input to another primitive\nDebugging information about why a tile was invalidated\nThe maximum number of compositor surfaces that are allowed …\nMaximum size of a compositor surface.\nThe maximum size per axis of a surface, in DevicePixel …\nA comparable transform matrix, that compares with epsilon …\nApply CSS mix-blend-mode effect.\nUsed to get unique tile IDs, even when the tile cache is …\nWhen using an OS compositor, the tile is drawn into a …\nRepresents the native surfaces created for a picture …\nThere was no backing native surface (never rendered, or …\nThere was no backing texture (evicted or never rendered)\nTwo items are not equal\nThe value of an opacity binding changed\nInformation about a preserve-3D hierarchy child that has …\nThe picture is not a part of 3D context sub-hierarchy.\nPreserve-3D requires a surface for plane-splitting.\nEnum value describing the place of a picture in a 3D …\nSpecifies how this Picture should be composited onto the …\nFlags describing properties for a given PicturePrimitive\nUser callback returned true on item\nThe primitive count in the dependency list was different\nDescriptor for a cluster of primitives. For now, this is …\nThe result of a primitive dependency comparison. Size is a …\nA helper struct to compare a primitive and all its …\nA key for storing primitive comparison results during tile …\nAn index into the prims array in a TileDescriptor.\nInformation about the dependencies of a single primitive …\nDefines a key that uniquely identifies a primitive …\nA list of primitive instances that are added to a picture …\nThis is the same as a <code>SurfaceTextureDescriptor</code> but has …\nApply an SVG filter graph\nA comparable scale-offset, that compares with epsilon …\nSentinel\nThe key that identifies a tile cache instance. For now, it…\nA helper for comparing spatial nodes between frames. The …\nA dependency for a transform is defined by the spatial …\nA SubSlice represents a potentially overlapping set of …\nDefines which sub-slice (effectively a z-index) a …\nSpecify whether a surface allows subpixel AA text …\nInformation from <code>get_surface_rects</code> about the allocated …\nInformation about an offscreen surface. For now, it …\nThe opaque state of the backing native surface changed\nA descriptor for the kind of texture that a picture cache …\nApply an SVG filter\nThe size in device pixels of a normal cached tile.\nThe size in device pixels of a tile for horizontal scroll …\nThe size in device pixels of a tile for vertical scroll …\nWhen using the WR compositor, the tile is drawn into an …\nInformation about a cached tile.\nUsed to cache a picture as a series of tiles.\nRepresents a cache of tiles that make up a picture …\nInformation that is required to reuse or create a new tile …\nUnit for tile coordinates.\nUniquely describes the content of this tile, in a way that …\nA stable ID for a given tile, to help debugging. These are …\nUniquely identifies a tile within a picture cache slice\nThe kind of modification that a tile wants to do\nA node in the dirty rect tracking quadtree.\nDetails for a node in a quadtree that tracks dirty rects …\nThe backing surface for this tile.\nThe value of the transform changed\nA comparable / hashable version of a coordinate space …\nAdd a dirty region to the tracker. Returns the visibility …\nAdd a primitive instance to this cluster, at the start or …\nAdd a primitive instance to the end of the list\nAdd a primitive dependency to this node\nAdd dependencies for a given primitive to this tile.\nAdd a primitive instance to the plane splitter. The …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nIf true, allow snapping on this and child surfaces\nNative surface for alpha tiles\nCompositor descriptors of visible, alpha tiles (used by …\nReturn true if the transforms for two given spatial nodes …\nGet an array index for this sub-slice\nCalled during initial picture traversal, before we know the\nThe calculated backdrop information for this cache …\nInformation about the calculated backdrop content of this …\nThe picture space rectangle of the backdrop, if kind is …\nThe optional background color of the picture cache instance\nThe last rendered background color on this tile.\nThe background color from the renderer. If this is set …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bounding rect of the cluster, in the local space of …\nTrue if it was changed (or is new) since the last frame …\nTrue if it was changed (or is new) since the last frame …\nTrue if it was changed (or is new) since the last frame …\nClamps the blur radius depending on scale factors.\nClear the dependency information for a tile, when the …\nCalled during pre_update, to clear the current dependencies\nThe lowest common ancestor clip of all of the primitives …\nThe local space coverage of child primitives after they are\nThe (conservative) valid part of this surface rect. Used …\nClips that this primitive depends on.\nList of primitives grouped into clusters.\nColor binding this primitive depends on.\nInformation about color bindings from the picture cache.\nList of color bindings, with some extra information about …\nThe overall dirty rect, a combination of dirty_rects\nA cache of recent comparisons between prev and current …\nA cache of comparison results to avoid re-computation …\nkeep around the hash map used as compare_cache to avoid …\nCheck if two primitive descriptors are the same.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nHow this picture should be composited into the parent …\nHow this picture should be composited. If None, don’t …\nCurrent configuration and setup for compositing all the …\nCurrent configuration and setup for compositing all the …\nList of visible tiles to be composited for this subslice\nList of compositor surfaces that have been promoted from …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nUniquely describes the content of this tile, in a way that …\nThe current raster scale for tiles in this cache\nDepth of off-screen surfaces that are currently pushed …\nCurrent size in device pixels of tiles for this cache\nThe currently selected tile size to use for this cache\nA list of extra dirty invalidation tests that can only be …\nPacked per-prim dependency information\nDestroy any manually managed resources before this picture …\nThe device space dirty rect for this tile. TODO(gw): We …\nThe device pixel ratio specific to this surface.\nDevice space rect that contains valid pixels region of …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe current dirty region tracker for this picture.\nDraw debug information about this tile node\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nConstruct an empty primitive list. This is just used …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nA cache of compositor surfaces that are retained between …\nVarious flags / state for this cluster.\nFlags for this picture primitive\nIf true, the scissor rect must be set when drawing this …\nIs there a backdrop associated with this cache\nThe current frame id for this picture cache\nCurrent frame ID of this tile cache instance. Used for …\nThe number of frames until this cache next evaluates what …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCalculate the four child rects for a given node\nHere we compute the source and target rects for SVGFEGraph …\nClip and transform a local rect to a device rect suitable …\nGet the tile coordinates for a given rectangle.\nGlobal scale factor from world -&gt; device pixels.\nThe visible part of the screen in world coords.\nThe tile id is stable between display lists and / or …\nList of image keys, and current image generations, that …\nThe YUV/RGB image keys that are used to draw this surface.\nThe number of Image compositor surfaces that were found …\nImage keys this primitive depends on.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidate this tile. If <code>invalidation_rect</code> is None, the …\nIf true, the scale factor of the root transform for this …\nIf true, we need to invalidate all tiles during <code>post_update</code>\nThe first reason the tile was invalidated this frame.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nIf false and transform ends up showing the back of the …\nReturn true if this cluster is compatible with the given …\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if there are no clusters (and thus primitives)\nWhether all bits in this flags value are unset.\nIf true, the tile was determined to be opaque, which means …\nIf true, we know this surface is completely opaque\nSet to true if we know for sure the picture is fully …\nReturn true if this sub-slice is the primary sub-slice …\nIf true, this tile is marked valid, and the existing …\nIf true, this tile intersects with the currently visible …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReturns a static str describing the type of …\nKind of the backdrop\nLeaf or internal node\nThe last frame this tile had its dependencies updated …\nThe local clip rect (in picture space) of the entire …\nThe local clip rect, from the shared clips of this picture.\nThe picture space dirty rect for this tile.\nThe local rect of the overall picture cache\nLocal rect (unclipped) of the picture this cache covers.\nLocal scale factors surface to raster transform\nThe current local rect of this tile.\nCurrent transform mapping local picture space to …\nThe local space valid rect for all primitives that affect …\nPicture space rect that contains valid pixels region of …\nHelper structs for mapping local rects in different …\nApply a merge or split operation to this tile, if desired\nTrims memory held by the tile cache, such as native …\nThe allocated compositor surfaces for this picture cache. …\nThe native compositor surface handle\nConstruct a new comparer\nConstruct dependency info for a new primitive.\nConstruct a new, invalid tile.\nConstruct a new sub-slice\nConstruct a new dirty region tracker.\nConstruct a new primitive cluster for a given positioning …\nConstruct a new leaf node, with the given primitive …\nAdvance to the next frame\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSwitch back and forth between old and new bindings …\nSwitch back and forth between old and new bindings …\nInformation about opacity bindings from the picture cache.\nOpacity bindings this primitive depends on.\nList of opacity bindings, with some extra information …\nNative surface for opaque tiles\nThe picture space rectangle that is known to be opaque. …\na part of the cluster that we know to be opaque if any. …\nCompositor descriptors of visible, opaque tiles (used by …\n“Region” (actually a spanning rect) containing all …\nMaps from picture cache coords -&gt; world space coords.\nMaps from picture cache coords -&gt; world space coords.\nPop an off-screen surface off the stack during dependency …\nCalled during tile cache instance post_update. Allows …\nApply any updates after prim dependency updates. This …\nCalled during pre_update of a tile cache instance. Allows …\nUpdate transforms, opacity, color bindings and tile rects.\nDo initial checks to determine whether this picture should …\nReset this tile cache with the updated parameters from a …\nThe content descriptor for this tile from the previous …\nStore the state of the previous local rect for this …\nThe (conservative) clipped area in picture space this …\nList of primitives, and associated info for this picture.\nThe range of primitive instance indices associated with …\nThe picture-cache local rect of the primitive being checked\nUnique content identifier of the primitive.\nAll render tasks have 0-2 input tasks.\nList of primitive instance unique identifiers. The uid is …\nPrint debug information about this tile to a tree printer.\nPrint debug information about this picture cache to a tree …\nPrint debug information about this tile descriptor to a …\nCalled after updating child pictures during the initial …\nPush an estimated rect for an off-screen surface during …\nRequested raster space for this picture\nThe rasterization root for this surface.\nCurrent transform mapping compositor surface raster space …\nRect of this node in the same space as the tile cache …\nThe root spatial node index of the tile cache\nA set of frames that we need to retain spatial node …\nRegister a transform that is used, and build the transform …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReset the list of compositor surfaces that follow this …\nReset the dirty regions back to empty\nResize the tile grid to match a new tile bounds\nCreate a resolved surface texture for this descriptor\nAllow access to the texture cache for requesting tiles\nAllow access to the texture cache for requesting tiles\nEnsure that the comparer won’t GC any nodes for a given …\nRoot node of the quadtree dirty rect tracker.\nThe screen rect, transformed to local picture space.\nIf a mix-blend-mode, contains the render task for the …\nIf false, this picture needs to (re)build segments if it …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nIf this is not an ‘external’ compositor surface …\nIndex of the tile cache / slice for this frame builder. It…\nPropagated information about the slice\nIf the backdrop covers the entire slice with an opaque …\nInformation about transform node differences from last …\nA helper to compare transforms between previous and …\nThe positioning node for this tile cache.\nSpatial node of the picture cache this region represents\nThe positioning node for this cluster.\nThe spatial node index of this picture when it is …\nMaintains a map of currently active transform keys\nSpatial nodes references by the clip dependencies of this …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe list of sub-slices in this tile cache\nThe allowed subpixel mode for this surface, which depends …\nHandle to the backing surface for this tile.\nThe surface index that this tile cache will be drawn into.\nIndex to the surface descriptor for this picture.\nThe positioning node for the surface itself,\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nPre-calculated versions of the tile_rect above, used to …\nReturn the total number of tiles allocated by this tile …\nThe grid position of this tile within the picture cache\nTile coords of the currently allocated grid.\nThe tile rect that the primitive being checked affects\nCurrent size of tiles in picture units.\nCurrent size of tiles in picture units.\nThe currently considered tile size override. Used to check …\nHash of tiles present in this picture.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRegistered transform in CompositeState for this picture …\nA local rect defining the size of this surface, in the …\nThe list of compositor underlays for this picture cache\nList of underlay compositor surfaces that exist in this …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInvalidate a tile based on change in content. This must be …\nCalled during tile cache instance post_update. Allows …\nCheck if the content of the previous and current tile …\nUpdate the dirty state of this node, building the overall …\nUpdate the dependencies for each tile for a given …\nIf true, the surface was used this frame. Used for a …\nThe current value retrieved from dynamic scene properties.\nThe current value retrieved from dynamic scene properties.\nThe current value retrieved from dynamic scene properties.\nFor DirectComposition, virtual surfaces don’t support …\nThe scale factors of the surface to world transform.\nThe current world rect of this tile.\nWorld space rect that contains valid pixels region of this …\nThe number of YuvImage compositor surfaces that were found …\nThe number YuvImage prims in this cache, provided in our …\nThe remaining number of YuvImage prims we will see this …\nPre-allocated z-id to assign to tiles during post_update.\nz-buffer id for this tile\nThe spatial node index of an “ancestor” element, i.e. …\nIndex in the built scene’s array of plane splitters.\nAdditional data per child for the case of this a root of …\nThe arbitrary id of this tile.\nThe size of the tile in device pixels.\nThe texture ID to draw to.\nThe arbitrary id of this tile.\nThe four children of this node\nThe index buffer of primitives that affect this tile on …\nA bitset of which of the last 64 frames have been dirty …\nThe number of frames since this node split or merged.\nThe index buffer of primitives that affected this tile …\nDescriptor for the surface that this tile draws into.\nA graph of picture dependencies, allowing updates to be …\nAdd a root picture to the graph\nAssign surfaces and scale factors to each picture (root -&gt; …\nRecursive function that assigns pictures to the earliest …\nBuild a list of update passes based on the dependencies …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPropegate bounding rects from pictures to parents (leaf -&gt; …\nThe textures used to hold picture cache tiles.\nThe textures used to hold picture cache tiles.\nNumber of currently allocated textures in the pool\nCache of picture cache entries.\nStrong handles for the picture_cache_entries FreeList.\nDefault tile size for content tiles\nExpire picture cache tiles that haven’t been referenced …\nTexture filter to use for picture cache textures\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSimple garbage collect of picture cache tiles\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe last frame this item was requested for rendering.\nSize of the requested tile.\nThe actual device texture ID this is part of.\nCurrent list of textures in the pool\nHandle to the resource rect in the GPU cache.\nPrepare an interned primitive for rendering, by requesting …\nWrite out to the clip mask instances array the correct …\nRender a portion of a specified backdrop.\nInformation about how to cache a border segment, along …\nAlways rendered via a cached render task. Usually faster …\nClear out a rect, used for special effects.\nRepresents the visibility state of a segment (wrt clip …\nThe segment is made invisible / clipped completely.\nFor external images, it’s not possible to know the UV …\nA hashable float for using as a key during primitive …\nTrait for primitives that are directly internable. see …\nA line decoration. cache_handle refers to a cached render …\nAlways rendered directly into the picture. This tends to be\nThe segment has a clip mask, specified by the render task.\nA hashable descriptor for nine-patches, used by image and …\nThe segment has no clip mask.\nDirect reference to a Picture\nA hashable point for using as a key during primitive …\nTo create a fixed-size representation of a polygon, we use …\nContains various vecs of data that is used only during …\nThe shared information for a given primitive. This is …\nA hashable SideOffset2D that can be used in primitive keys.\nA hashable size for using as a key during primitive …\nA run of glyphs, with associated font parameters.\nA hashable vec for using as a key during primitive …\nList of render task handles for border segment instances …\nAll information and state related to clip(s) for this …\nContains a list of clip mask instance parameters per …\nanimated color bindings for this primitive.\nList of debug display items for rendering.\nSpecifies the edges that are <em>allowed</em> to have anti-aliasing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nList of glyphs keys that are allocated by each text run …\nThe GPU cache handle for a primitive template. Since this …\nA list of visible tiles that tiled gradients use to store …\nA list of image instances. These are stored separately as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild a new key from self with <code>info</code>.\nIdentifies the kind of primitive this instance is, and …\nList of current debug messages to log on screen\nTemporary buffers for building segments in to during …\nA retained classifier for checking which segments of a …\nSet of sub-graphs that are required, determined during …\nA list of segment ranges and GPU cache handles for prim …\nA list of brush segments that have been built for this …\nUpdate the GPU cache for a given primitive template. This …\nInformation related to the current visibility state of this\nWrite any GPU blocks for the primitive template to the …\nHandle to the common interned data for this primitive.\nHandle to the common interned data for this primitive.\nHandle to the common interned data for this primitive.\nHandle to the common interned data for this primitive.\nHandle to the common interned data for this primitive.\nHandle to the common interned data for this primitive.\nHandle to the common interned data for this primitive.\nHandle to the common interned data for this primitive.\nHandle to the common interned data for this primitive.\nHandle to the common interned data for this primitive.\nHandle to the common interned data for this primitive.\nHandle to the common interned data for this primitive.\nHandle to the common interned data for this primitive.\nIndex to the per instance scratch data for this primitive.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the GPU cache for a given primitive template. This …\nUpdate the GPU cache for a given primitive template. This …\nAn entry in a gradient data table representing a segment …\nA hashable gradient stop that can be used in primitive …\nConic gradients\nGenerate a color ramp filling the indices in [start_idx, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCompute an index into the gradient entry table based on a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinear gradients\nRadial gradients\nThe per-instance shader input of a radial gradient render …\nIdentifying key for a line decoration.\nHashable conic gradient parameters, for use during prim …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the GPU cache for a given primitive template. This …\nThe per-instance shader input of a fast-path linear …\nThe per-instance shader input of a linear gradient render …\nIdentifying key for a linear gradient.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform a few optimizations to the gradient that are …\nUpdate the GPU cache for a given primitive template. This …\nThe per-instance shader input of a radial gradient render …\nIdentifying key for a radial gradient.\nHashable radial gradient parameters, for use during prim …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAvoid invoking the radial gradient shader on large areas …\nUpdate the GPU cache for a given primitive template. This …\nInstance specific fields for an image primitive. These are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the GPU cache for a given primitive template. This …\nUpdate the GPU cache for a given primitive template. This …\nIdentifying key for a line decoration.\nMaximum resolution in device pixels at which line …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChoose the decoration mask tile size for a given line.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the GPU cache for a given primitive template. This …\nreference to another (earlier) node in filter graph\nempty slot in feMerge inputs\nRepresents a hashable description of how a picture …\ncombine 2 images with SVG_FEBLEND_MODE_COLOR parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_COLOR_BURN …\ncombine 2 images with SVG_FEBLEND_MODE_COLOR_DODGE …\ncombine 2 images with SVG_FEBLEND_MODE_DARKEN parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_DIFFERENCE …\ncombine 2 images with SVG_FEBLEND_MODE_EXCLUSION …\ncombine 2 images with SVG_FEBLEND_MODE_HARD_LIGHT …\ncombine 2 images with SVG_FEBLEND_MODE_HUE parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_LIGHTEN parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_LUMINOSITY …\ncombine 2 images with SVG_FEBLEND_MODE_MULTIPLY …\ncombine 2 images with SVG_FEBLEND_MODE_NORMAL parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_OVERLAY parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_SATURATION …\ncombine 2 images with SVG_FEBLEND_MODE_SCREEN parameters: …\ncombine 2 images with SVG_FEBLEND_MODE_SOFT_LIGHT …\ntransform colors of image through 5x4 color matrix …\ntransform colors of image through configurable gradients …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ncomposite 2 images with chosen composite mode with …\ntransform image through convolution matrix of up to 25 …\ntransform image through convolution matrix of up to 25 …\ntransform image through convolution matrix of up to 25 …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncalculate a distorted version of first input image using …\ncreate and merge a dropshadow version of the specified …\nsynthesize a new image of specified size containing a …\ncreate a blurred version of the input image parameters: …\nFilter that does no transformation of the colors, needed …\nsynthesize a new image based on a url (i.e. blob image …\ncreate a new image based on the input image with the …\ncreate a new image based on the input image with the …\nrepresents CSS opacity property as a graph node like the …\nrepresents CSS opacity property as a graph node like the …\nFilter that copies the SourceAlpha image into the …\nFilter that copies the SourceGraphic image into the …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncalculate lighting based on heightmap image with provided …\ncreate a new image based on the input image, repeated …\nconvert a color image to an alpha channel - internal use; …\nsynthesize a new image based on Fractal Noise (Perlin) …\nsynthesize a new image based on Fractal Noise (Perlin) …\nsynthesize a new image based on Turbulence Noise (offset …\nsynthesize a new image based on Turbulence Noise (offset …\nId of the picture in question in a namespace unique to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nvirtualized picture input binding 1 (i.e. texture source), …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates this graph node was marked as unnecessary by the …\nTrue if color_interpolation_filter == LinearRgb; shader …\nTranslate the subregion by this amount\nPlace the input image here in Layout space (like …\nrect this node will render into, in filter space, does not …\nCreate an empty <code>Range</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck for an empty <code>Range</code>\nA run of glyphs, with associated font information.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the raster space to use when rendering this primitive.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the GPU cache for a given primitive template. This …\nA struct that makes it easier to print out a pretty tree …\nA trait that makes it easy to describe a pretty tree of …\nAdd an item to the current level in the tree.\nAscend one level in the tree.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe current level of recursion.\nDescend one level in the tree with the given title.\nAn item which is queued up, so that we can determine if we …\nThe sink to print to.\nRanges of expected value for a profile counter.\nThe current global profiler callbacks, if set by embedder.\nProfiler UI string presets. Defined in the profiler UI …\nA simple RAII style struct to manage a profile scope.\nDefines the interface for hooking up an external profiler …\nA container for profiling information that moves along the …\nRecords a marker of the given duration that just ended.\nRecords a marker of the given duration that just ended.\nCalled with a duration to indicate a text marker that just …\nThe average value of the previous time slice (displayed).\nCalled at the beginning of a profile scope.\nIncremented when the counter changes.\nCalled at the end of a profile scope.\nSimilar to end_time, but doesn’t panic if not matched …\nCalled to mark an event happening.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe max value of the previous time slice (displayed).\nBegin a new profile scope\nThe max value in in-progress time slice.\nNumber of samples in the current time slice.\nA helper macro to define profile scopes.\nRegister a thread with the Gecko Profiler.\nRegister a thread with the profiler.\nSet the profiler callbacks, or None to disable the …\nSlow uploads with a high number of blob tiles.\nSlow renders with a high number of draw calls.\nSlow frames dominated by frame building.\nTotal number of slow frames on the CPU.\nTotal number of slow frames on the GPU.\nSlow frames dominated by draw call submission.")