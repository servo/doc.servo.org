searchState.loadedDescShard("chrono", 0, "Chrono: Date and Time for Rust\nApril\nAugust\nISO 8601 calendar date with time zone.\nISO 8601 combined date and time with time zone.\nThe common set of methods for date component.\nA duration in calendar days.\nDecember\nAlias of <code>TimeDelta</code>.\nFebruary\nThe time zone with fixed offset, from UTC-23:59:59 to …\nFriday.\nJanuary\nJuly\nJune\nThe local timescale.\nMarch\nMay\nMonday.\nThe month of the year.\nA duration in calendar months\nISO 8601 calendar date without timezone. Allows for every …\nISO 8601 combined date and time without timezone.\nISO 8601 time without timezone. Allows for the nanosecond …\nNovember\nOctober\nThe offset from the local time to UTC.\nAn associated offset type. This type is used to store the …\nOut of range error type used in various converting APIs\nSaturday.\nSeptember\nSunday.\nThursday.\nTime duration with nanosecond precision.\nThe time zone.\nThe common set of methods for time component.\nTuesday.\nThe UTC time zone. This is the most efficient time zone …\nWednesday.\nThe day of week.\nISO 8601 calendar date with time zone.\nISO 8601 date and time with time zone.\nParses a string with the specified format string and …\nReturns the day of month starting from 1.\nReturns the day of month starting from 0.\nWorkaround because <code>.expect()</code> is not (yet) available in …\nReturns the fixed offset from UTC to the local time stored.\nFormatting (and parsing) utilities for date and time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the local <code>NaiveDate</code> to the timezone-aware <code>Date</code> if …\nConverts the local <code>NaiveDateTime</code> to the timezone-aware …\nReconstructs the time zone from the offset.\nConverts the UTC <code>NaiveDate</code> to the local time. The UTC is …\nConverts the UTC <code>NaiveDateTime</code> to the local time. The UTC …\nReturns the hour number from 0 to 23.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the ISO week.\nMakes a new <code>Date</code> from ISO week date (year and week …\nMakes a new <code>Date</code> from ISO week date (year and week …\nReturns the minute number from 0 to 59.\nReturns the month number starting from 1.\nReturns the month number starting from 0.\nDate and time types unconcerned with timezones.\nReturns the number of nanoseconds since the whole non-leap …\nThe time zone, which calculates offsets from the local …\nCreates the offset(s) for given local <code>NaiveDate</code> if …\nCreates the offset(s) for given local <code>NaiveDateTime</code> if …\nCreates the offset for given UTC <code>NaiveDate</code>. This cannot …\nCreates the offset for given UTC <code>NaiveDateTime</code>. This …\nReturns the day of year starting from 1.\nReturns the day of year starting from 0.\nA convenience module appropriate for glob imports (…\nFunctionality for rounding or truncating a <code>DateTime</code> by a …\nReturns the second number from 0 to 59.\nSerialization/Deserialization with serde\nTemporal quantification\nMakes a new <code>DateTime</code> from the number of non-leap seconds …\nMakes a new <code>DateTime</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from the number of non-leap seconds …\nReturns the day of week.\nMakes a new value with the day of month (starting from 1) …\nMakes a new value with the day of month (starting from 0) …\nMakes a new value with the hour number changed.\nMakes a new value with the minute number changed.\nMakes a new value with the month number (starting from 1) …\nMakes a new value with the month number (starting from 0) …\nMakes a new value with nanoseconds since the whole …\nMakes a new value with the day of year (starting from 1) …\nMakes a new value with the day of year (starting from 0) …\nMakes a new value with the second number changed.\nMakes a new value with the year number changed, while …\nMake a new <code>DateTime</code> from year, month, day, time components …\nReturns the year number in the calendar date.\nMakes a new <code>Date</code> from year, month, day and the current …\nMakes a new <code>Date</code> from year, month, day and the current …\nMakes a new <code>Date</code> from year, day of year (DOY or “ordinal…\nMakes a new <code>Date</code> from year, day of year (DOY or “ordinal…\nISO 8601 calendar date with time zone.\nThe maximum possible <code>Date</code>.\nThe maximum possible <code>Date</code>.\nThe minimum possible <code>Date</code>.\nThe minimum possible <code>Date</code>.\nMakes a new <code>DateTime</code> from the current date, hour, minute …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute …\nMakes a new <code>DateTime</code> from the current date and given …\nAdds given <code>TimeDelta</code> to the current date.\nSubtracts given <code>TimeDelta</code> from the current date.\nFormats the date with the specified format string. See the …\nFormats the date with the specified formatting items.\nReturns the argument unchanged.\nMakes a new <code>Date</code> with given <em>UTC</em> date and offset. The local …\nCalls <code>U::from(self)</code>.\nMaps the local date to other date with given conversion …\nReturns a view to the naive local date.\nReturns a view to the naive UTC date.\nRetrieves an associated offset from UTC.\nMakes a new <code>Date</code> for the prior date.\nMakes a new <code>Date</code> for the prior date.\nSubtracts another <code>Date</code> from the current date. Returns a …\nMakes a new <code>Date</code> for the next date.\nMakes a new <code>Date</code> for the next date.\nRetrieves an associated time zone.\nChanges the associated time zone. This does not change the …\nReturns the number of whole years from the given <code>base</code> …\nISO 8601 combined date and time with time zone.\nThe maximum possible <code>DateTime&lt;Utc&gt;</code>.\nThe maximum possible <code>DateTime&lt;Utc&gt;</code>.\nThe minimum possible <code>DateTime&lt;Utc&gt;</code>.\nThe minimum possible <code>DateTime&lt;Utc&gt;</code>.\nThe Unix Epoch, 1970-01-01 00:00:00 UTC.\nNumber of days between Januari 1, 1970 and December 31, 1 …\nAdd a duration in <code>Days</code> to the date part of the <code>DateTime</code>.\nAdds given <code>Months</code> to the current date and time.\nAdds given <code>TimeDelta</code> to the current date and time.\nSubtract a duration in <code>Days</code> from the date part of the …\nSubtracts given <code>Months</code> from the current date and time.\nSubtracts given <code>TimeDelta</code> from the current date and time.\nRetrieves the date component with an associated timezone.\nRetrieves the date component.\nFix the offset from UTC to its current value, dropping the …\nFormats the combined date and time per the specified …\nFormats the combined date and time with the specified …\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a <code>DateTime&lt;Local&gt;</code> …\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a …\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a …\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nReturns the argument unchanged.\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a <code>DateTime&lt;Utc&gt;</code> …\nMakes a new <code>DateTime</code> from a <code>NaiveDateTime</code> in <em>local</em> time …\nMakes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …\nMakes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nMakes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …\nCalls <code>U::from(self)</code>.\nMaps the local datetime to other datetime with given …\nReturns a view to the naive local datetime.\nReturns a view to the naive UTC datetime.\nRetrieves an associated offset from UTC.\nReturns the naive local datetime.\nParses a string from a user-specified format into a …\nParses an RFC 2822 date-and-time string into a …\nParses an RFC 3339 date-and-time string into a …\nParses a string from a user-specified format into a …\nCompare two DateTimes based on their true time, ignoring …\ndocumented at re-export site\nSubtracts another <code>DateTime</code> from the current date and time. …\nRetrieves the time component.\nReturns the number of non-leap seconds since January 1, …\nReturns the number of non-leap-microseconds since January …\nReturns the number of non-leap-milliseconds since January …\nReturns the number of non-leap-nanoseconds since January …\nReturns the number of non-leap-nanoseconds since January …\nReturns the number of microseconds since the last second …\nReturns the number of milliseconds since the last second …\nReturns the number of nanoseconds since the last second …\nRetrieves an associated time zone.\nReturns an RFC 2822 date and time string such as …\nReturns an RFC 3339 and ISO 8601 date and time string such …\nReturn an RFC 3339 and ISO 8601 date and time string with …\nTurn this <code>DateTime</code> into a <code>DateTime&lt;Utc&gt;</code>, dropping the …\nMakes a new <code>DateTime</code> with the day of month (starting from …\nMakes a new <code>DateTime</code> with the day of month (starting from …\nMakes a new <code>DateTime</code> with the hour number changed.\nMakes a new <code>DateTime</code> with the minute number changed.\nMakes a new <code>DateTime</code> with the month number (starting from …\nMakes a new <code>DateTime</code> with the month number (starting from …\nMakes a new <code>DateTime</code> with nanoseconds since the whole …\nMakes a new <code>DateTime</code> with the day of year (starting from …\nMakes a new <code>DateTime</code> with the day of year (starting from …\nMakes a new <code>DateTime</code> with the second number changed.\nSet the time to a new fixed time on the existing date.\nChanges the associated time zone. The returned <code>DateTime</code> …\nMakes a new <code>DateTime</code> with the year number changed, while …\nRetrieve the elapsed years from now to the given <code>DateTime</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSer/de to/from timestamps in microseconds\nSer/de to/from optional timestamps in microseconds\nSer/de to/from timestamps in milliseconds\nSer/de to/from optional timestamps in milliseconds\nSer/de to/from timestamps in nanoseconds\nSer/de to/from optional timestamps in nanoseconds\nSer/de to/from timestamps in seconds\nSer/de to/from optional timestamps in seconds\nDeserialize a <code>DateTime</code> from a microsecond timestamp\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a microsecond timestamp or none\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize a UTC datetime into an integer number of …\nDeserialize a timestamp in microseconds since the epoch\nDeserialize a timestamp in microseconds since the epoch\nDeserialize a timestamp in microseconds since the epoch\nDeserialize a <code>DateTime</code> from a millisecond timestamp\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a millisecond timestamp or none\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize a UTC datetime into an integer number of …\nDeserialize a timestamp in milliseconds since the epoch\nDeserialize a timestamp in milliseconds since the epoch\nDeserialize a timestamp in milliseconds since the epoch\nDeserialize a <code>DateTime</code> from a nanosecond timestamp\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a nanosecond timestamp or none\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize a UTC datetime into an integer number of …\nDeserialize a timestamp in nanoseconds since the epoch\nDeserialize a timestamp in nanoseconds since the epoch\nDeserialize a timestamp in nanoseconds since the epoch\nDeserialize a <code>DateTime</code> from a seconds timestamp\nSerialize a UTC datetime into an integer number of seconds …\nDeserialize a <code>DateTime</code> from a seconds timestamp or none\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize a UTC datetime into an integer number of seconds …\nDeserialize a timestamp in seconds since the epoch\nDeserialize a timestamp in seconds since the epoch\nDeserialize a timestamp in seconds since the epoch\nAutomatically select one of <code>Secs</code>, <code>Millis</code>, <code>Micros</code>, or <code>Nanos</code> …\nThere was an error on the formatting string, or there were …\nColon (<code>:</code>) as separator\nThe separator between hours and minutes in an offset.\nDay of the month (FW=PW=2).\nA <em>temporary</em> object which can be used as an argument to …\nContains the error value\nIssues a formatting error. Used to signal an invalid …\nFixed-format item types.\nFixed-format item.\nHour number in the 24-hour clocks (FW=PW=2).\nHour number in the 12-hour clocks (FW=PW=2).\nFormat offset from UTC as only hours. Not recommended, it …\nThere is no possible date and time value with given set of …\nInternal uses only.\nInternal uses only.\nAn opaque type representing fixed-format item types for …\nAn opaque type representing numeric item types for …\nThe input string has some invalid character sequence for …\nWeek number in the ISO week date (FW=PW=2).\nYear in the ISO week date (FW=4, PW=∞). May accept years …\nYear in the ISO week date, divided by 100 (FW=PW=2). …\nYear in the ISO week date, modulo 100 (FW=PW=2). Cannot be …\nA single formatting item. This is used for both formatting …\nA literally printed and parsed text.\nFull month names.\nFull day of the week names.\nAM/PM.\nNo separator when formatting, colon allowed when parsing.\nUse fixed 6 subsecond digits. This corresponds to …\nUse fixed 3 subsecond digits. This corresponds to …\nThe number of minutes since the last whole hour (FW=PW=2).\nFormat offset from UTC as hours and minutes. Any seconds …\nMonth (FW=PW=2).\nUse fixed 9 subsecond digits. This corresponds to …\nThe number of nanoseconds since the last whole second …\nAn optional dot plus one or more digits for left-aligned …\nSame as <code>Nanosecond</code> but the accuracy is fixed to 3.\nSame as <code>Nanosecond</code> but the accuracy is fixed to 3 and …\nSame as <code>Nanosecond</code> but the accuracy is fixed to 6.\nSame as <code>Nanosecond</code> but the accuracy is fixed to 6 and …\nSame as <code>Nanosecond</code> but the accuracy is fixed to 9.\nSame as <code>Nanosecond</code> but the accuracy is fixed to 9 and …\nNo padding.\nNo separator\nGiven set of fields is not enough to make a requested date …\nDay of the week, where Sunday = 0 and Saturday = 6 …\nNumeric item types. They have associated formatting width …\nNumeric item. Can be optionally padded to the maximal …\nType for specifying the format of UTC offsets.\nThe precision of an offset from UTC formatting item.\nContains the success value\nFormat offset from UTC as hours, and optionally with …\nFormat offset from UTC as hours and optionally minutes and …\nFormat offset from UTC as hours and minutes, and …\nDay of the year (FW=PW=3).\nGiven field is out of permitted range.\nSame as <code>Literal</code> but with the string owned by the item.\nSame as <code>Space</code> but with the string owned by the item.\nPadding characters for numeric items.\nAn error from the <code>parse</code> function.\nThe category of parse error\nSame as <code>Result&lt;T, ParseError&gt;</code>.\nA type to hold parsed fields of date and time that can …\nRFC 2822 date and time syntax. Commonly used for email and …\nRFC 3339 &amp; ISO 8601 date and time syntax.\nThe number of seconds since the last whole minute …\nFormat offset from UTC as hours, minutes and seconds.\nSpecific formatting options for seconds. This may be …\nFormat whole seconds only, with no decimal point nor …\nAbbreviated month names.\nAbbreviated day of the week names.\nSpace padding.\nWhitespace. Prints literally but reads zero or more …\nThe number of non-leap seconds since the midnight UTC on …\nTimezone name.\nSame as <code>TimezoneOffsetColon</code> but prints no colon. Parsing …\nOffset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or …\nOffset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or <code>Z</code>).\nOffset from the local time to UTC with seconds (<code>+09:00:00</code> …\nSame as <code>TimezoneOffsetColonZ</code>, but allows missing minutes …\nOffset from the local time to UTC without minutes (<code>+09</code> or …\nSame as <code>TimezoneOffsetColonZ</code> but prints no colon. Parsing …\nAll formatting items have been read but there is a …\nThe input string has been prematurely ended.\nAM/PM.\nAn uninhabited type used for <code>InternalNumeric</code> and …\nWeek number, where the week 1 starts at the first Monday …\nWeek number, where the week 1 starts at the first Sunday …\nDay of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\nFull Gregorian year (FW=4, PW=∞). May accept years …\nGregorian year divided by 100 (century number; FW=PW=2). …\nGregorian year modulo 100 (FW=PW=2). Cannot be negative.\nZero (<code>0</code>) padding.\nRepresent <code>+00:00</code> as <code>Z</code>.\nSeparator between hours, minutes and seconds.\nThe date view, if any.\nTries to format given arguments with given formatting …\nWrites an offset from UTC with the format defined by <code>self</code>.\nFormats single formatting item\nDate and time formatting routines.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator returning formatting items.\nThe category of parse error\nLocale used for text. ZST if the <code>unstable-locales</code> feature …\nThe name and local-to-UTC difference for the offset …\nPad the hour value to two digits.\nDate and time parsing routines.\nTries to parse given string into <code>parsed</code> with given …\nTries to parse given string into <code>parsed</code> with given …\nA collection of parsed date and time items. They can be …\nSee <code>OffsetPrecision</code>.\nVarious scanning routines for the parser.\n<code>strftime</code>/<code>strptime</code>-inspired date and time formatting syntax.\nThe time view, if any.\nConvert items that contain a reference to the format …\nAutomatically select one of <code>Secs</code>, <code>Millis</code>, <code>Micros</code>, or <code>Nanos</code> …\nA <em>temporary</em> object which can be used as an argument to …\nUse fixed 6 subsecond digits. This corresponds to …\nUse fixed 3 subsecond digits. This corresponds to …\nUse fixed 9 subsecond digits. This corresponds to …\nSpecific formatting options for seconds. This may be …\nFormat whole seconds only, with no decimal point nor …\nThe date view, if any.\nTries to format given arguments with given formatting …\nFormats single formatting item\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator returning formatting items.\nLocale used for text. ZST if the <code>unstable-locales</code> feature …\nMakes a new <code>DelayedFormat</code> value out of local date and time.\nMakes a new <code>DelayedFormat</code> value out of local date and time …\nThe name and local-to-UTC difference for the offset …\nThe time view, if any.\nEquivalent to <code>{:02}</code> formatting for n &lt; 100.\nwrite datetimes like <code>Tue, 1 Jul 2003 10:52:37 +0200</code>, same …\nWrites the date, time and offset to the string. same as …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to parse given string into <code>parsed</code> with given …\nTries to parse given string into <code>parsed</code> with given …\nAccepts a relaxed form of RFC3339.\nA type to hold parsed fields of date and time that can …\nGet the <code>day</code> of the month field if set.\nReturns the argument unchanged.\nGet the <code>hour_div_12</code> field (am/pm) if set.\nGet the <code>hour_mod_12</code> field if set.\nCalls <code>U::from(self)</code>.\nGet the <code>isoweek</code> field that is part of an ISO 8601 week date…\nGet the <code>isoyear</code> field that is part of an ISO 8601 week date…\nGet the <code>isoyear_div_100</code> field that is part of an ISO 8601 …\nGet the <code>isoyear_mod_100</code> field that is part of an ISO 8601 …\nGet the <code>minute</code> field if set.\nGet the <code>month</code> field if set.\nGet the <code>nanosecond</code> field if set.\nReturns the initial value of parsed parts.\nGet the <code>offset</code> field if set.\nGet the <code>ordinal</code> (day of the year) field if set.\nCreate a <code>NaiveDate</code> when given a year, week, weekday, and …\nGet the <code>second</code> field if set.\nSet the <code>hour_div_12</code> am/pm field to the given value.\nSet the <code>day</code> of the month field to the given value.\nSet the <code>hour_div_12</code> and <code>hour_mod_12</code> fields to the given …\nSet the <code>hour_mod_12</code> field, for the hour number in 12-hour …\nChecks if <code>old</code> is either empty or has the same value as <code>new</code> …\nSet the <code>isoweek</code> field for an ISO 8601 week date to the …\nSet the <code>isoyear</code> field, that is part of an ISO 8601 week …\nSet the <code>isoyear_div_100</code> field, that is part of an ISO 8601 …\nSet the <code>isoyear_mod_100</code> field, that is part of an ISO 8601 …\nSet the <code>minute</code> field to the given value.\nSet the <code>month</code> field to the given value.\nSet the <code>nanosecond</code> field to the given value.\nSet the <code>offset</code> field to the given value.\nSet the <code>ordinal</code> (day of the year) field to the given value.\nSet the <code>second</code> field to the given value.\nSet the <code>timestamp</code> field to the given value.\nSet the <code>week_from_mon</code> week number field to the given value.\nSet the <code>week_from_sun</code> week number field to the given value.\nSet the <code>weekday</code> field to the given value.\nSet the <code>year</code> field to the given value.\nSet the <code>year_div_100</code> field to the given value.\nSet the <code>year_mod_100</code> field to the given value.\nGet the <code>timestamp</code> field if set.\nReturns a parsed timezone-aware date and time out of given …\nReturns a parsed timezone-aware date and time out of given …\nReturns a parsed fixed time zone offset out of given …\nReturns a parsed naive date out of given fields.\nReturns a parsed naive date and time out of given fields, …\nReturns a parsed naive time out of given fields.\nGet the <code>week_from_mon</code> field if set.\nGet the <code>week_from_sun</code> field if set.\nGet the <code>weekday</code> field if set.\nGet the <code>year</code> field if set.\nGet the <code>year_div_100</code> field if set.\nGet the <code>year_mod_100</code> field if set.\nTries to consume exactly one given character.\nConsumes any number (including zero) of colon or spaces.\nTries to consume an RFC2822 comment including preceding <code> </code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to consume at least one digits as a fractional …\nTries to consume a fixed number of digits as a fractional …\nTries to parse the non-negative number from <code>min</code> to <code>max</code> …\nTries to parse the month index (0 through 11) with the …\nTries to parse the month index (0 through 11) with short …\nTries to parse the weekday with short or long weekday …\nTries to parse the weekday with the first three ASCII …\nTries to consume one or more whitespace.\nParse a timezone from <code>s</code> and return the offset in seconds.\nSame as <code>timezone_offset</code> but also allows for RFC 2822 …\nParsing iterator for <code>strftime</code>-like format strings.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new parsing iterator from a <code>strftime</code>-like format …\nParse format string into a <code>Vec</code> of formatting <code>Item</code>’s.\nParse format string into a <code>Vec</code> of <code>Item</code>’s that contain no …\nIf the current specifier is composed of multiple …\nRemaining portion of the string.\nApril\nAugust\nDecember\nFebruary\nJanuary\nJuly\nJune\nMarch\nMay\nThe month of the year.\nA duration in calendar months\nNovember\nOctober\nAn error resulting from reading <code>&lt;Month&gt;</code> value with <code>FromStr</code>.\nSeptember\nReturns the total number of months in the <code>Months</code> instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an <code>Option&lt;Month&gt;</code> from a i64, assuming a 1-index, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the name of the month\nConstruct a new <code>Months</code> from a number of months\nReturns a month-of-year number starting from January = 1.\nThe previous month.\nThe next month.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA duration in calendar days.\nISO 8601 week.\nThe maximum possible <code>NaiveDate</code> (December 31, 262143 CE).\nThe maximum possible <code>NaiveDateTime</code>.\nThe minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).\nThe minimum possible <code>NaiveDateTime</code>.\nISO 8601 calendar date without timezone. Allows for every …\nIterator over <code>NaiveDate</code> with a step size of one day.\nISO 8601 combined date and time without timezone.\nIterator over <code>NaiveDate</code> with a step size of one week.\nISO 8601 time without timezone. Allows for the nanosecond …\nA week represented by a <code>NaiveDate</code> and a <code>Weekday</code> which is …\nISO 8601 calendar date without timezone.\nISO 8601 date and time without timezone.\nReturns a <code>RangeInclusive&lt;T&gt;</code> representing the whole week …\nReturns a date representing the first day of the week.\nReturns the argument unchanged.\nInternal helper types for working with dates.\nCalls <code>U::from(self)</code>.\nISO 8601 week.\nReturns a date representing the last day of the week.\nCreate a new <code>NaiveWeek</code>\nConstruct a new <code>Days</code> from a number of days\nSerialization/Deserialization of <code>NaiveDateTime</code> in …\nISO 8601 time without timezone.\nOne day after the maximum possible <code>NaiveDate</code> (January 1, …\nOne day before the minimum possible <code>NaiveDate</code> (December …\nThe maximum possible <code>NaiveDate</code> (December 31, 262142 CE).\nThe maximum possible <code>NaiveDate</code> (December 31, 262143 CE).\nMAX_YEAR is one year less than the type is capable of …\nThe minimum possible <code>NaiveDate</code> (January 1, 262144 BCE).\nThe minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).\nMIN_YEAR is one year more than the type is capable of …\nISO 8601 calendar date without timezone. Allows for every …\nIterator over <code>NaiveDate</code> with a step size of one day.\nIterator over <code>NaiveDate</code> with a step size of one week.\nAdd a duration of <code>i32</code> days to the date.\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date and given …\nAdd a duration in <code>Days</code> to the date\nAdd a duration in <code>Months</code> to the date\nAdds the number of whole days in the given <code>TimeDelta</code> to …\nSubtract a duration in <code>Days</code> from the date\nSubtract a duration in <code>Months</code> from the date\nSubtracts the number of whole days in the given <code>TimeDelta</code> …\nReturns the day of month starting from 1.\nReturns the day of month starting from 0.\nFormats the date with the specified format string. See the …\nFormats the date with the specified formatting items. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMakes a new <code>NaiveDate</code> from the ISO week date (year, week …\nMakes a new <code>NaiveDate</code> from the ISO week date (year, week …\nMakes a new <code>NaiveDate</code> from year and packed month-day-flags.\nMakes a new <code>NaiveDate</code> from a day’s number in the …\nMakes a new <code>NaiveDate</code> from a day’s number in the …\nMakes a new <code>NaiveDate</code> from year, ordinal and flags. Does …\nMakes a new <code>NaiveDate</code> by counting the number of …\nMakes a new <code>NaiveDate</code> by counting the number of …\nMakes a new <code>NaiveDate</code> from the calendar date (year, month …\nMakes a new <code>NaiveDate</code> from the calendar date (year, month …\nMakes a new <code>NaiveDate</code> from the ordinal date (year and day …\nMakes a new <code>NaiveDate</code> from the ordinal date (year and day …\nCreate a new <code>NaiveDate</code> from a raw year-ordinal-flags <code>i32</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that steps by days across all …\nReturns an iterator that steps by weeks across all …\nReturns <code>true</code> if this is a leap year.\nReturns the packed month-day-flags.\nReturns the month number starting from 1.\nReturns the month number starting from 0.\nCounts the days in the proleptic Gregorian calendar, with …\nReturns the day of year starting from 1.\nReturns the day of year starting from 1.\nReturns the day of year starting from 0.\nParses a string from a user-specified format into a new …\nParses a string with the specified format string and …\nMakes a new <code>NaiveDate</code> for the previous calendar date.\nMakes a new <code>NaiveDate</code> for the previous calendar date.\nSubtracts another <code>NaiveDate</code> from the current date. Returns …\nMakes a new <code>NaiveDate</code> for the next calendar date.\nMakes a new <code>NaiveDate</code> for the next calendar date.\nReturns the <code>NaiveWeek</code> that the date belongs to, starting …\nReturns the day of week.\nReturns the day of week.\nMakes a new <code>NaiveDate</code> with the day of month (starting from …\nMakes a new <code>NaiveDate</code> with the day of month (starting from …\nMakes a new <code>NaiveDate</code> with the packed month-day-flags …\nMakes a new <code>NaiveDate</code> with the month number (starting from …\nMakes a new <code>NaiveDate</code> with the month number (starting from …\nMakes a new <code>NaiveDate</code> with the day of year (starting from …\nMakes a new <code>NaiveDate</code> with the day of year (starting from …\nMakes a new <code>NaiveDate</code> with the year number changed, while …\nReturns the year number in the calendar date.\nReturns the number of whole years from the given <code>base</code> …\nGet the raw year-ordinal-flags <code>i32</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe maximum possible <code>NaiveDateTime</code>.\nThe maximum possible <code>NaiveDateTime</code>.\nThe minimum possible <code>NaiveDateTime</code>.\nThe minimum possible <code>NaiveDateTime</code>.\nISO 8601 combined date and time without timezone.\nThe Unix Epoch, 1970-01-01 00:00:00.\nConverts the <code>NaiveDateTime</code> into a timezone-aware …\nConverts the <code>NaiveDateTime</code> into the timezone-aware …\nAdd a duration in <code>Days</code> to the date part of the …\nAdds given <code>Months</code> to the current date and time.\nAdds given <code>FixedOffset</code> to the current datetime. Returns …\nAdds given <code>TimeDelta</code> to the current date and time.\nSubtract a duration in <code>Days</code> from the date part of the …\nSubtracts given <code>Months</code> from the current date and time.\nSubtracts given <code>FixedOffset</code> from the current datetime. …\nSubtracts given <code>TimeDelta</code> from the current date and time.\nRetrieves a date component.\nReturns the day of month starting from 1.\nReturns the day of month starting from 0.\nFormats the combined date and time with the specified …\nFormats the combined date and time with the specified …\nConverts a <code>NaiveDate</code> to a <code>NaiveDateTime</code> of the same date …\nReturns the argument unchanged.\nMakes a new <code>NaiveDateTime</code> corresponding to a UTC date and …\nCreates a new NaiveDateTime from microseconds since the …\nCreates a new NaiveDateTime from milliseconds since the …\nCreates a new NaiveDateTime from nanoseconds since the …\nMakes a new <code>NaiveDateTime</code> corresponding to a UTC date and …\nReturns the hour number from 0 to 23.\nCalls <code>U::from(self)</code>.\nReturns the minute number from 0 to 59.\nReturns the month number starting from 1.\nReturns the month number starting from 0.\nReturns the number of nanoseconds since the whole non-leap …\nMakes a new <code>NaiveDateTime</code> from date and time components. …\nReturns the day of year starting from 1.\nReturns the day of year starting from 0.\nAdds given <code>FixedOffset</code> to the current datetime. The …\nSubtracts given <code>FixedOffset</code> from the current datetime. The …\nParses a string with the specified format string and …\nParses a string with the specified format string and …\nReturns the second number from 0 to 59.\nTools to help serializing/deserializing <code>NaiveDateTime</code>s\nSubtracts another <code>NaiveDateTime</code> from the current date and …\nRetrieves a time component.\nReturns the number of non-leap seconds since the midnight …\nReturns the number of non-leap <em>microseconds</em> since midnight …\nReturns the number of non-leap <em>milliseconds</em> since midnight …\nReturns the number of non-leap <em>nanoseconds</em> since midnight …\nReturns the number of non-leap <em>nanoseconds</em> since midnight …\nReturns the number of microseconds since the last whole …\nReturns the number of milliseconds since the last whole …\nReturns the number of nanoseconds since the last whole …\nReturns the day of week.\nMakes a new <code>NaiveDateTime</code> with the day of month (starting …\nMakes a new <code>NaiveDateTime</code> with the day of month (starting …\nMakes a new <code>NaiveDateTime</code> with the hour number changed.\nMakes a new <code>NaiveDateTime</code> with the minute number changed.\nMakes a new <code>NaiveDateTime</code> with the month number (starting …\nMakes a new <code>NaiveDateTime</code> with the month number (starting …\nMakes a new <code>NaiveDateTime</code> with nanoseconds since the whole …\nMakes a new <code>NaiveDateTime</code> with the day of year (starting …\nMakes a new <code>NaiveDateTime</code> with the day of year (starting …\nMakes a new <code>NaiveDateTime</code> with the second number changed.\nMakes a new <code>NaiveDateTime</code> with the year number changed, …\nReturns the year number in the calendar date.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUsed to serialize/deserialize from microsecond-precision …\nSer/de to/from optional timestamps in microseconds\nUsed to serialize/deserialize from millisecond-precision …\nSer/de to/from optional timestamps in milliseconds\nUsed to serialize/deserialize from nanosecond-precision …\nSer/de to/from optional timestamps in nanoseconds\nUsed to serialize/deserialize from second-precision …\nSer/de to/from optional timestamps in seconds\nDeserialize a <code>NaiveDateTime</code> from a microseconds timestamp\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize a datetime into an integer number of …\nDeserialize a <code>NaiveDateTime</code> from a nanosecond timestamp or …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize a datetime into an integer number of …\nDeserialize a timestamp in microseconds since the epoch\nDeserialize a timestamp in microseconds since the epoch\nDeserialize a timestamp in microseconds since the epoch\nDeserialize a <code>NaiveDateTime</code> from a milliseconds timestamp\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize a datetime into an integer number of …\nDeserialize a <code>NaiveDateTime</code> from a millisecond timestamp …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize a datetime into an integer number of …\nDeserialize a timestamp in milliseconds since the epoch\nDeserialize a timestamp in milliseconds since the epoch\nDeserialize a timestamp in milliseconds since the epoch\nDeserialize a <code>NaiveDateTime</code> from a nanoseconds timestamp\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize a datetime into an integer number of nanoseconds …\nDeserialize a <code>NaiveDateTime</code> from a nanosecond timestamp or …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize a datetime into an integer number of nanoseconds …\nDeserialize a timestamp in nanoseconds since the epoch\nDeserialize a timestamp in nanoseconds since the epoch\nDeserialize a timestamp in nanoseconds since the epoch\nDeserialize a <code>NaiveDateTime</code> from a seconds timestamp\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize a datetime into an integer number of seconds …\nDeserialize a <code>NaiveDateTime</code> from a second timestamp or none\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize a datetime into an integer number of seconds …\nDeserialize a timestamp in seconds since the epoch\nDeserialize a timestamp in seconds since the epoch\nDeserialize a timestamp in seconds since the epoch\nMonth, day of month and year flags: …\nYear flags (aka the dominical letter).\nReturns the day of this <code>Mdf</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMakes a new <code>Mdf</code> value from an <code>i32</code> with an ordinal and a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the month of this <code>Mdf</code>.\nMakes a new <code>Mdf</code> value from month, day and <code>YearFlags</code>.\nReturns the ordinal that corresponds to this <code>Mdf</code>.\nReturns the ordinal that corresponds to this <code>Mdf</code>, encoded …\nReplaces the day of this <code>Mdf</code>, keeping the month and flags.\nReplaces the flags of this <code>Mdf</code>, keeping the month and day.\nReplaces the month of this <code>Mdf</code>, keeping the day and flags.\nReturns the year flags of this <code>Mdf</code>.\nISO 8601 week.\nReturns the argument unchanged.\nReturns the corresponding <code>IsoWeek</code> from the year and the <code>Of</code> …\nCalls <code>U::from(self)</code>.\nReturns the ISO week number starting from 1.\nReturns the ISO week number starting from 0.\nReturns the year number for this ISO week.\nUsed to serialize/deserialize from microsecond-precision …\nSer/de to/from optional timestamps in microseconds\nUsed to serialize/deserialize from millisecond-precision …\nSer/de to/from optional timestamps in milliseconds\nUsed to serialize/deserialize from nanosecond-precision …\nSer/de to/from optional timestamps in nanoseconds\nUsed to serialize/deserialize from second-precision …\nSer/de to/from optional timestamps in seconds\nDeserialize a <code>NaiveDateTime</code> from a microseconds timestamp\nSerialize a datetime into an integer number of …\nDeserialize a <code>NaiveDateTime</code> from a nanosecond timestamp or …\nSerialize a datetime into an integer number of …\nDeserialize a <code>NaiveDateTime</code> from a milliseconds timestamp\nSerialize a datetime into an integer number of …\nDeserialize a <code>NaiveDateTime</code> from a millisecond timestamp …\nSerialize a datetime into an integer number of …\nDeserialize a <code>NaiveDateTime</code> from a nanoseconds timestamp\nSerialize a datetime into an integer number of nanoseconds …\nDeserialize a <code>NaiveDateTime</code> from a nanosecond timestamp or …\nSerialize a datetime into an integer number of nanoseconds …\nDeserialize a <code>NaiveDateTime</code> from a seconds timestamp\nSerialize a datetime into an integer number of seconds …\nDeserialize a <code>NaiveDateTime</code> from a second timestamp or none\nSerialize a datetime into an integer number of seconds …\nThe earliest possible <code>NaiveTime</code>\nISO 8601 time without timezone. Allows for the nanosecond …\nFormats the time with the specified format string. See the …\nFormats the time with the specified formatting items. …\nReturns the argument unchanged.\nMakes a new <code>NaiveTime</code> from hour, minute and second.\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute and second.\nMakes a new <code>NaiveTime</code> from the number of seconds since …\nMakes a new <code>NaiveTime</code> from the number of seconds since …\nReturns a triple of the hour, minute and second numbers.\nReturns the hour number from 0 to 23.\nCalls <code>U::from(self)</code>.\nReturns the minute number from 0 to 59.\nReturns the number of nanoseconds since the whole non-leap …\nReturns the number of nanoseconds since the whole non-leap …\nReturns the number of non-leap seconds past the last …\nReturns the number of non-leap seconds past the last …\nAdds given <code>FixedOffset</code> to the current time, and returns …\nAdds given <code>TimeDelta</code> to the current time, and also returns …\nSubtracts given <code>FixedOffset</code> from the current time, and …\nSubtracts given <code>TimeDelta</code> from the current time, and also …\nParses a string from a user-specified format into a new …\nParses a string with the specified format string and …\nReturns the second number from 0 to 59.\nSubtracts another <code>NaiveTime</code> from the current time. Returns …\nMakes a new <code>NaiveTime</code> with the hour number changed.\nMakes a new <code>NaiveTime</code> with the minute number changed.\nMakes a new <code>NaiveTime</code> with nanoseconds since the whole …\nMakes a new <code>NaiveTime</code> with the second number changed.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe local time is <em>ambiguous</em> because there is a <em>fold</em> in the …\nThe local time is <em>ambiguous</em> because there is a <em>fold</em> in the …\nThe time zone with fixed offset, from UTC-23:59:59 to …\nThe local timescale.\nOld name of <code>MappedLocalTime</code>. See that type for more …\nThe result of mapping a local time to a concrete instant …\nThe local time does not exist because there is a <em>gap</em> in …\nThe local time does not exist because there is a <em>gap</em> in …\nThe offset from the local time to UTC.\nAn associated offset type. This type is used to store the …\nThe local time maps to a single unique result.\nThe local time maps to a single unique result.\nThe time zone.\nThe UTC time zone. This is the most efficient time zone …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute …\nMakes a new <code>DateTime</code> from the current date, hour, minute …\nMaps a <code>MappedLocalTime&lt;T&gt;</code> into <code>MappedLocalTime&lt;U&gt;</code> with …\nMaps a <code>MappedLocalTime&lt;T&gt;</code> into <code>MappedLocalTime&lt;U&gt;</code> with …\nMakes a new <code>DateTime</code> from the current date and given …\nMakes a new <code>DateTime</code> from the current date and given …\nParses a string with the specified format string and …\nReturns the earliest possible result of a the time zone …\nReturns the earliest possible result of a the time zone …\nReturns the fixed offset from UTC to the local time stored.\nThe time zone which has a fixed offset from UTC.\nReturns the argument unchanged.\nConverts the local <code>NaiveDate</code> to the timezone-aware <code>Date</code> if …\nConverts the local <code>NaiveDateTime</code> to the timezone-aware …\nReconstructs the time zone from the offset.\nConverts the UTC <code>NaiveDate</code> to the local time. The UTC is …\nConverts the UTC <code>NaiveDateTime</code> to the local time. The UTC …\nCalls <code>U::from(self)</code>.\nMakes a new <code>Date</code> from ISO week date (year and week …\nMakes a new <code>Date</code> from ISO week date (year and week …\nReturns the latest possible result of a the time zone …\nReturns the latest possible result of a the time zone …\nThe local (system) time zone.\nMaps a <code>MappedLocalTime&lt;T&gt;</code> into <code>MappedLocalTime&lt;U&gt;</code> with …\nMaps a <code>MappedLocalTime&lt;T&gt;</code> into <code>MappedLocalTime&lt;U&gt;</code> with …\nCreates the offset(s) for given local <code>NaiveDate</code> if …\nCreates the offset(s) for given local <code>NaiveDateTime</code> if …\nCreates the offset for given UTC <code>NaiveDate</code>. This cannot …\nCreates the offset for given UTC <code>NaiveDateTime</code>. This …\nReturns <code>Some</code> if the time zone mapping has a single result.\nReturns <code>Some</code> if the time zone mapping has a single result.\nMakes a new <code>DateTime</code> from the number of non-leap seconds …\nMakes a new <code>DateTime</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from the number of non-leap seconds …\nReturns a single unique conversion result or panics.\nReturns a single unique conversion result or panics.\nThe UTC (Coordinated Universal Time) time zone.\nMake a new <code>DateTime</code> from year, month, day, time components …\nMakes a new <code>Date</code> from year, month, day and the current …\nMakes a new <code>Date</code> from year, month, day and the current …\nMakes a new <code>Date</code> from year, day of year (DOY or “ordinal…\nMakes a new <code>Date</code> from year, day of year (DOY or “ordinal…\nThe time zone with fixed offset, from UTC-23:59:59 to …\nMakes a new <code>FixedOffset</code> for the Eastern Hemisphere with …\nMakes a new <code>FixedOffset</code> for the Eastern Hemisphere with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the number of seconds to add to convert from UTC …\nReturns the number of seconds to add to convert from the …\nMakes a new <code>FixedOffset</code> for the Western Hemisphere with …\nMakes a new <code>FixedOffset</code> for the Western Hemisphere with …\nThe local timescale.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a <code>DateTime&lt;Local&gt;</code> which corresponds to the current …\nReturns a <code>Date</code> which corresponds to the current date.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCumulated month days in a normal year\nNumber of days in one week\nMonth days in a normal year\nDate time error\nUnified error type for everything in the crate\nLocal time type search error\nNumber of hours in one day\nInvalid slice for integer conversion\nInvalid Tzif file\nInvalid TZ string\nI/O error\nLocal time type error\nOut of range error\nInteger parsing error\nDate time projection error\nNumber of seconds in one day\nNumber of seconds in one hour\nSystem time error\nTime zone error\nTransition rule error\nUnsupported Tzif file\nUnsupported TZ string\nUTF-8 error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTypes related to a time zone.\nA <code>Cursor</code> contains a slice of a buffer and a read count.\nTZif header\nTZif data blocks\nVersion 1\nVersion 2\nVersion 3\nTZif version\nNumber of time zone names bytes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if data is remaining\nNumber of leap-second records\nLeap seconds data block\nLocal time types data block\nTime zone names data block\nRead TZif data blocks\nConstruct a new <code>Cursor</code> from remaining data\nParse time values\nNumber of already read bytes\nRead exactly <code>count</code> bytes, reducing remaining data and …\nRead bytes if the remaining data is prefixed by the …\nRead bytes and compare them to the provided tag\nRead bytes until the provided predicate is true\nRead bytes as long as the provided predicate is true\nReturns remaining data\nSlice representing the remaining data to be read\nNumber of standard/wall indicators\nUT/local indicators data block\nTime size in bytes\nNumber of transition times\nTransition times data block\nTransition types data block\nNumber of local time type records\nNumber of UT/local indicators\nStandard/wall indicators data block\nTZif version\nAlternate local time types\nTransition rule representing alternate local time types\nNumber of days in 100 years (including 24 leap years)\nNumber of days in 400 years (including 97 leap years)\nNumber of days in 4 years (including 1 leap year)\nNumber of days in a normal year\nMonth days in a leap year from March\nFixed local time type\nZero-based Julian day in <code>[0, 365]</code>, taking occasional Feb …\nJulian day in <code>[1, 365]</code>, without taking occasional Feb 29 …\nNumber of minutes in one hour\nNumber of months in one year\nDay represented by a month, a month week and a week day\nNumber of nanoseconds in one second\nOffset year\nTransition rule day\nNumber of seconds in one hour\nNumber of seconds in one minute\nTransition rule\nUnix time at <code>2000-03-01T00:00:00Z</code> (Wednesday)\nUTC date time exprimed in the proleptic gregorian calendar\nCompute the number of days since Unix epoch (…\nLocal time type for Daylight Saving Time\nEnd day of Daylight Saving Time\nLocal end day time of Daylight Saving Time, in seconds\nStart day of Daylight Saving Time\nLocal start day time of Daylight Saving Time, in seconds\nFind the local time type associated to the transition rule …\nFind the local time type associated to the alternate …\nFind the local time type associated to the transition rule …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a UTC date time from a Unix time in seconds and …\nParse a POSIX TZ string containing a time zone …\nHours since midnight in <code>[0, 23]</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a year is a leap year\nConstruct a transition rule day represented by a …\nConstruct a transition rule day represented by a Julian …\nMinutes in <code>[0, 59]</code>\nMonth in <code>[1, 12]</code>\nDay of the month in <code>[1, 31]</code>\nConstruct a transition rule day represented by a month, a …\nConstruct a transition rule representing alternate local …\nParse transition rule\nParse hours, minutes and seconds\nParse time zone name\nParse time zone offset\nParse transition rule time\nParse transition rule time with TZ string extensions\nParse signed hours, minutes and seconds\nSeconds in <code>[0, 60]</code>, with a possible leap second\nLocal time type for standard time\nGet the transition date for the provided year\nReturns the UTC Unix time in seconds associated to the …\nYear\nMonth in <code>[1, 12]</code>\nWeek of the month in <code>[1, 5]</code>, with <code>5</code> representing the last …\nDay of the week in <code>[0, 6]</code> from Sunday\nLeap second of a TZif file\nLocal time type associated to a time zone\nNumber of seconds in 28 days\nNumber of seconds in one week\nTime zone\nASCII-encoded fixed-capacity string, used for storing time …\nReference to a time zone\nTransition of a TZif file\nThe UTC time zone\nReturns time zone name as a byte slice\nReturns a reference to the time zone\nLength-prefixed string buffer\nLeap second correction\nCheck if two time zone names are equal\nExtra transition rule applicable after the last transition\nExtra transition rule applicable after the last transition\nFind the local time type associated to the time zone at …\nFind the local time type associated to the time zone at …\nOpen the TZif file corresponding to a TZ string\nConstruct a time zone with the specified UTC offset in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a time zone from the contents of a time zone file\nConstruct a time zone from a POSIX TZ string, as described …\nConstruct a time zone from the contents of a time zone file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns daylight saving time indicator\nDaylight Saving Time indicator\nList of leap seconds\nList of leap seconds\nReturns local time zone.\nIndex specifying the local time type of the transition\nList of local time types (cannot be empty)\nList of local time types (cannot be empty)\nTime zone name\nConstruct a time zone\nConstruct a TZif file transition\nConstruct a TZif file leap second\nConstruct a time zone name\nConstruct a local time type\nReturns offset from UTC in seconds\nList of transitions\nList of transitions\nReturns Unix leap time\nReturns Unix leap time\nUnix leap time\nUnix leap time\nConvert Unix leap time to Unix time, from the list of leap …\nConvert Unix time to Unix leap time, from the list of leap …\nOffset from UTC in seconds\nConstruct the time zone associated to UTC\nCheck time zone inputs\nConstruct a local time type with the specified UTC offset …\nThe UTC time zone. This is the most efficient time zone …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a <code>DateTime&lt;Utc&gt;</code> which corresponds to the current …\nReturns a <code>Date</code> which corresponds to the current date.\nError when <code>TimeDelta.num_nanoseconds</code> exceeds the limit.\nError when the TimeDelta exceeds the TimeDelta from or …\nExtension trait for rounding or truncating a DateTime by a …\nError that can occur in rounding or truncating\nAn error from rounding by <code>TimeDelta</code>\nExtension trait for subsecond rounding or truncation to a …\nError when <code>DateTime.timestamp_nanos</code> exceeds the limit.\nReturn a copy rounded by TimeDelta.\nReturn a copy truncated by TimeDelta.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn a copy rounded to the specified number of subsecond …\nReturn a copy truncated to the specified number of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a custom <code>de::Error</code> with <code>SerdeError::InvalidTimestamp</code>…\nSer/de to/from timestamps in microseconds\nSer/de to/from optional timestamps in microseconds\nSer/de to/from timestamps in milliseconds\nSer/de to/from optional timestamps in milliseconds\nSer/de to/from timestamps in nanoseconds\nSer/de to/from optional timestamps in nanoseconds\nSer/de to/from timestamps in seconds\nSer/de to/from optional timestamps in seconds\nDeserialize a <code>DateTime</code> from a microsecond timestamp\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a microsecond timestamp or none\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a millisecond timestamp\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a millisecond timestamp or none\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a nanosecond timestamp\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a nanosecond timestamp or none\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a seconds timestamp\nSerialize a UTC datetime into an integer number of seconds …\nDeserialize a <code>DateTime</code> from a seconds timestamp or none\nSerialize a UTC datetime into an integer number of seconds …\nThe maximum possible <code>TimeDelta</code>: <code>i64::MAX</code> milliseconds.\nThe number of microseconds per second.\nThe number of milliseconds per second.\nThe minimum possible <code>TimeDelta</code>: <code>-i64::MAX</code> milliseconds.\nThe number of nanoseconds in a microsecond.\nThe number of nanoseconds in a millisecond.\nThe number of nanoseconds in seconds.\nRepresents error when converting <code>TimeDelta</code> to/from a …\nThe number of (non-leap) seconds in days.\nThe number of seconds in an hour.\nThe number of seconds in a minute.\nThe number of (non-leap) seconds in a week.\nTime duration with nanosecond precision.\nReturns the <code>TimeDelta</code> as an absolute (non-negative) value.\nAdd two <code>TimeDelta</code>s, returning <code>None</code> if overflow occurred.\nDivide a <code>TimeDelta</code> with a i32, returning <code>None</code> if dividing …\nMultiply a <code>TimeDelta</code> with a i32, returning <code>None</code> if …\nSubtract two <code>TimeDelta</code>s, returning <code>None</code> if overflow …\nMakes a new <code>TimeDelta</code> with the given number of days.\nFormat a <code>TimeDelta</code> using the ISO 8601 format\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>TimeDelta</code> object from <code>std::time::Duration</code>\nMakes a new <code>TimeDelta</code> with the given number of hours.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>TimeDelta</code> equals <code>TimeDelta::zero()</code>.\nThe maximum possible <code>TimeDelta</code>: <code>i64::MAX</code> milliseconds.\nMakes a new <code>TimeDelta</code> with the given number of …\nMakes a new <code>TimeDelta</code> with the given number of …\nThe minimum possible <code>TimeDelta</code>: <code>-i64::MAX</code> milliseconds.\nMakes a new <code>TimeDelta</code> with the given number of minutes.\nMakes a new <code>TimeDelta</code> with the given number of nanoseconds.\nThis duplicates <code>Neg::neg</code> because trait methods can’t be …\nMakes a new <code>TimeDelta</code> with given number of seconds and …\nReturns the total number of whole days in the <code>TimeDelta</code>.\nReturns the total number of whole hours in the <code>TimeDelta</code>.\nReturns the total number of whole microseconds in the …\nReturns the total number of whole milliseconds in the …\nReturns the total number of whole minutes in the <code>TimeDelta</code>.\nReturns the total number of whole nanoseconds in the …\nReturns the total number of whole seconds in the <code>TimeDelta</code>.\nReturns the total number of whole weeks in the <code>TimeDelta</code>.\nMakes a new <code>TimeDelta</code> with the given number of seconds.\nReturns the number of nanoseconds such that …\nCreates a <code>std::time::Duration</code> object from a <code>TimeDelta</code>.\nMakes a new <code>TimeDelta</code> with the given number of days.\nMakes a new <code>TimeDelta</code> with the given number of hours.\nMakes a new <code>TimeDelta</code> with the given number of …\nMakes a new <code>TimeDelta</code> with the given number of minutes.\nMakes a new <code>TimeDelta</code> with the given number of seconds.\nMakes a new <code>TimeDelta</code> with the given number of weeks.\nMakes a new <code>TimeDelta</code> with the given number of weeks.\nA <code>TimeDelta</code> where the stored seconds and nanoseconds are …\nThe common set of methods for date component.\nThe common set of methods for time component.\nReturns the day of month starting from 1.\nReturns the day of month starting from 0.\nReturns the hour number from 0 to 23.\nReturns the hour number from 1 to 12 with a boolean flag, …\nReturns the hour number from 1 to 12 with a boolean flag, …\nReturns the ISO week.\nReturns the minute number from 0 to 59.\nReturns the month number starting from 1.\nReturns the month number starting from 0.\nReturns the number of nanoseconds since the whole non-leap …\nCounts the days in the proleptic Gregorian calendar, with …\nCounts the days in the proleptic Gregorian calendar, with …\nReturns the number of non-leap seconds past the last …\nReturns the number of non-leap seconds past the last …\nReturns the day of year starting from 1.\nReturns the day of year starting from 0.\nReturns the second number from 0 to 59.\nReturns the day of week.\nMakes a new value with the day of month (starting from 1) …\nMakes a new value with the day of month (starting from 0) …\nMakes a new value with the hour number changed.\nMakes a new value with the minute number changed.\nMakes a new value with the month number (starting from 1) …\nMakes a new value with the month number (starting from 0) …\nMakes a new value with nanoseconds since the whole …\nMakes a new value with the day of year (starting from 1) …\nMakes a new value with the day of year (starting from 0) …\nMakes a new value with the second number changed.\nMakes a new value with the year number changed, while …\nReturns the year number in the calendar date.\nReturns the absolute year number starting from 1 with a …\nReturns the absolute year number starting from 1 with a …\nFriday.\nMonday.\nAn error resulting from reading <code>Weekday</code> value with <code>FromStr</code>.\nSaturday.\nSunday.\nThursday.\nTuesday.\nWednesday.\nThe day of week.\nThe number of days since the given day.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a day-of-week number starting from Monday = 0.\nReturns a day-of-week number starting from Sunday = 0.\nReturns a day-of-week number starting from Monday = 1. …\nReturns a day-of-week number starting from Sunday = 1.\nThe previous day in the week.\nThe next day in the week.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")