searchState.loadedDescShard("backtrace", 0, "A library for acquiring a backtrace at runtime\nRepresentation of an owned and self-contained backtrace.\nA formatter for backtraces.\nCaptured version of a frame in a backtrace.\nA formatter for just one frame of a backtrace.\nCaptured version of a symbol in a backtrace.\nA slice, typically provided on Unix platforms.\nA platform independent representation of a string. When …\nA trait representing one frame of a backtrace, yielded to …\nPrints a backtrace that contains all possible information\nThe styles of printing that we can print\nPrints a terser backtrace which ideally only contains …\nA trait representing the resolution of a symbol in a file.\nA wrapper around a symbol name to provide ergonomic …\nWide strings typically from Windows.\nAttempt to reclaim that cached memory used to symbolicate …\nResolve an address to a symbol, passing the symbol to the …\nResolve a previously capture frame to a symbol, passing …\nSame as <code>resolve_frame</code>, only unsafe as it’s …\nSame as <code>resolve</code>, only unsafe as it’s unsynchronized.\nInspects the current call-stack, passing all active frames …\nSame as <code>trace</code>, only unsafe as it’s unsynchronized.\nPlatform dependent types.\nA trait representing one frame of a backtrace, yielded to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the current instruction pointer of this frame.\nBacktrace support using libunwind/gcc_s/etc APIs.\nReturns the base address of the module to which the frame …\nReturns the current stack pointer of this frame.\nReturns the starting symbol address of the frame of this …\nInspects the current call-stack, passing all active frames …\nSame as <code>trace</code>, only unsafe as it’s unsynchronized.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwind library interface used for backtraces\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresentation of an owned and self-contained backtrace.\nCaptured version of a frame in a backtrace.\nCaptured version of a symbol in a backtrace.\nSame as <code>Symbol::addr</code>\nSame as <code>Symbol::colno</code>\nSame as <code>Symbol::filename</code>\nReturns the frames from when this backtrace was captured.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSame as <code>Frame::ip</code>\nSame as <code>Symbol::lineno</code>\nSame as <code>Frame::module_base_address</code>\nSame as <code>Symbol::name</code>\nCaptures a backtrace at the callsite of this function, …\nSimilar to <code>new</code> except that this does not resolve any …\nIf this backtrace was created from <code>new_unresolved</code> then …\nResolve all addresses in this frame to their symbolic …\nResolve all addresses in the frame to their symbolic names.\nSame as <code>Frame::symbol_address</code>\nReturns the list of symbols that this frame corresponds to.\nThe global lock, lazily allocated on first use\nA “Maybe” LockGuard\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAcquire a partially unsound(!!!) global re-entrant lock …\nA formatter for backtraces.\nA formatter for just one frame of a backtrace.\nPrints a backtrace that contains all possible information\nThe styles of printing that we can print\nPrints a terser backtrace which ideally only contains …\nPrints a preamble for the backtrace about to be printed.\nPrints a <code>BacktraceFrame</code> with this frame formatter.\nPrints a <code>BacktraceSymbol</code> within a <code>BacktraceFrame</code>.\nCompletes the backtrace output.\nReturn the inner formatter.\nAdds a frame to the backtrace output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInserts a message in the backtrace output.\nCreate a new <code>BacktraceFmt</code> which will write output to the …\nAdds a raw frame to the backtrace output.\nAdds a raw frame to the backtrace output, including column …\nPrints a raw traced <code>Frame</code> and <code>Symbol</code>, typically from …\nA trait representing the resolution of a symbol in a file.\nA wrapper around a symbol name to provide ergonomic …\nReturns the starting address of this function.\nReturns the raw symbol name as a list of bytes\nReturns the raw (mangled) symbol name as a <code>str</code> if the …\nAttempt to reclaim that cached memory used to symbolicate …\nReturns the column number for where this symbol is …\nReturns the file name where this function was defined.\nReturns the raw filename as a slice. This is mainly useful …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSupport for symbolication using the <code>gimli</code> crate on …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the line number for where this symbol is currently …\nReturns the name of this function.\nCreates a new symbol name from the raw underlying bytes.\nResolve an address to a symbol, passing the symbol to the …\nResolve a previously capture frame to a symbol, passing …\nSame as <code>resolve_frame</code>, only unsafe as it’s …\nSame as <code>resolve</code>, only unsafe as it’s unsynchronized.\nWe were able to locate frame information for this symbol, …\nCouldn’t find debug information, but we found it in the …\nThe “bias” of this library, typically where it’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe size of this segment in memory.\nAll known shared libraries that have been loaded.\nTry to locate a DWARF package file.\nMappings cache where we retain parsed dwarf information.\nCreates a <code>Mapping</code> by ensuring that the <code>data</code> specified is …\nCreates a <code>Mapping</code> from <code>data</code>, or if the closure decides to, …\nLoad debuginfo from an external debug file.\nSegments of this library loaded into memory, and where they…\nThe stated address of this segment in the object file. …\nThe entire file data.\nSize in bytes of this header.\nEntry point virtual address.\nProcessor-specific flags.\nMagic number and other information.\nArchitecture. One of the <code>EM_*</code> constants.\nProgram header table entry size.\nProgram header table entry count.\nProgram header table file offset.\nSection header table entry size.\nSection header table entry count.\nSection header table file offset.\nSection header string table index.\nObject file type. One of the <code>ET_*</code> constants.\nObject file version. Must be <code>EV_CURRENT</code>.\nZero-sized type representing the native endianness.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocate a debug file based on its build ID.\nLocate a file specified in a <code>.gnu_debugaltlink</code> section.\nLocate a file specified in a <code>.gnu_debuglink</code> section.\nList of pre-parsed and sorted symbols by base address.\nSafety\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nstart (inclusive) and limit (exclusive) of address range.\ndevice (major, minor)\nReturns the argument unchanged.\ninode on the device. 0 indicates that no inode is …\nCalls <code>U::from(self)</code>.\nOffset into the file (or “whatever”).\nUsually the file backing the mapping.\nThe perms field are the permissions for the entry\nA simple arena allocator for byte buffers.\nAllocates a buffer of the specified size and returns a …\nStores a <code>Mmap</code> for the lifetime of this <code>Stash</code>, returning a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA slice, typically provided on Unix platforms.\nA platform independent representation of a string. When …\nWide strings typically from Windows.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProvides a <code>Path</code> representation of <code>BytesOrWideString</code>.\nLossy converts to a <code>Cow&lt;str&gt;</code>, will allocate if <code>Bytes</code> is …")