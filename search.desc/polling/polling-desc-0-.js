searchState.loadedDescShard("polling", 0, "Portable interface to epoll, kqueue, event ports, and IOCP.\nA resource with a raw file descriptor.\nA resource with a borrowed file descriptor.\nPoll in edge-triggered mode.\nPoll in both edge-triggered and oneshot mode.\nIndicates that a file descriptor or socket can read or …\nA container for I/O events.\nPoll in level-triggered mode.\nKey associated with notifications.\nPoll in oneshot mode.\nThe mode in which the poller waits for I/O events.\nWaits for I/O events.\nThis is intended to be used from &amp;mut, thread locally, so …\nAdds a file descriptor or socket to the poller.\nAdds a file descriptor or socket to the poller in the …\nAll kinds of events (readable and writable).\nGet the total capacity of the list.\nDelete all of the events in the container.\nRemove any extra information from this event.\nRemoves a file descriptor or socket from the poller.\nBindings to epoll (Linux, Android).\nSystem-specific event data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTells if this event is the result of a connection failure.\nReturns <code>true</code> if the container contains no events.\nTells if this event is the result of a connection failure.\nTell if this event is the result of an interrupt …\nTell if this event is the result of a priority …\nCreate a new iterator over I/O events.\nKey identifying the file descriptor or socket.\nReturns the number of events in the container.\nModifies the interest in a file descriptor or socket.\nModifies interest in a file descriptor or socket to the …\nCreates a new poller.\nCreate a new container for events, using the default …\nCreate a new event.\nNo events.\nWakes up the current or the following invocation of <code>wait()</code>.\nPlatform-specific functionality.\nReturns the raw file descriptor.\nOnly the readable event.\nCan it do a read operation without blocking?\nAdd interruption events to this interest.\nAdd priority events to this interest.\nReturns the borrowed file descriptor.\nTell whether or not this <code>Poller</code> supports edge-triggered …\nTell whether or not this <code>Poller</code> supports level-triggered …\nWaits for at least one I/O event and returns the number of …\nCreate a new container with the provided capacity.\nAdd interruption events to this interest.\nGet a version of this event with no extra information.\nAdd priority events to this interest.\nOnly the writable event.\nCan it do a write operation without blocking?\nExtra information about this event.\nThe primary notifier, using eventfd.\nA list of reported I/O events.\nThe notifier for Linux.\nThe fallback notifier, using a pipe.\nInterface to epoll.\n<code>timespec</code> value that equals zero.\nAdds a new file descriptor.\nThe file descriptor to register in the poller.\nGet the capacity of the list.\nClear the list.\nClear the notification.\nDeletes a file descriptor.\nCreate an empty version of the data.\nFile descriptor for the epoll instance.\nGet the EPOLL flags for the interest.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTell if the interrupt flag is set.\nTell if the priority flag is set.\nIterates over I/O events.\nModifies an existing file descriptor.\nCreates a new poller.\nCreate a new notifier.\nNotifier used to wake up epoll.\nSends a notification to wake up the current or next <code>wait()</code> …\nNotify the poller.\nEpoll flags for all possible readability events.\nAdd the interrupt flag to this event.\nAdd the priority flag to this event.\nWhether the poller supports edge-triggered events.\nWhether this poller supports level-triggered events.\nFile descriptor for the timerfd that produces timeouts.\nWaits for I/O events with an optional timeout.\nCreates an empty list.\nEpoll flags for all possible writability events.\nThe read end of the pipe.\nThe write end of the pipe.")