searchState.loadedDescShard("toml_edit", 0, "<code>toml_edit</code>\nType representing a TOML array, payload of the <code>Value::Array</code>…\nAn inline array of values.\nAn owned iterator type over <code>Table</code>’s key/value pairs.\nAn iterator type over <code>Array</code>’s values.\nAn iterator type over <code>Array</code>’s values.\nType representing a TOML array of tables\nType representing array of tables.\nAn iterator type over <code>ArrayOfTables</code>’s values.\nAn iterator type over <code>ArrayOfTables</code>’s values.\nAn iterator type over <code>ArrayOfTables</code>’s values.\nA boolean value.\nOffset between local time and UTC\nA parsed TOML date value\nA parsed TOML datetime value\nAn RFC 3339 formatted date-time with offset.\nError returned from parsing a <code>Datetime</code> in the <code>FromStr</code> …\nA prefix and suffix,\nType representing a TOML document\nA view into a single location in a map, which may be …\nA 64-bit float value.\nA value together with its <code>to_string</code> representation, …\nA view into a single location in a map, which may be …\nA view into a single occupied location in a <code>IndexMap</code>.\nType representing a TOML inline table, payload of the …\nAn inline table of key/value pairs.\nAn owned iterator type over key/value pairs of an inline …\nAn iterator type over key/value pairs of an inline table.\nA mutable iterator type over key/value pairs of an inline …\nA view into a single empty location in a <code>IndexMap</code>.\nA 64-bit integer value.\nOpaque string storage internal to <code>toml_edit</code>\nAn owned iterator type over <code>Table</code>’s key/value pairs.\nType representing either a value, a table, an array of …\nAn iterator type over <code>Table</code>’s key/value pairs.\nA mutable iterator type over <code>Table</code>’s key/value pairs.\nKey as part of a Key/Value Pair or a table header.\nA mutable reference to a <code>Key</code>\nType representing none.\nAn occupied Entry.\nAn occupied Entry.\nA view into a single occupied location in a <code>IndexMap</code>.\nA parsed TOML time offset\nOpaque string storage for raw TOML; internal to <code>toml_edit</code>\nTOML-encoded value\nA string value.\nType representing a TOML non-inline table\nType representing table.\nThis trait represents either a <code>Table</code>, or an <code>InlineTable</code>.\nA parsed TOML time value\nType representing a TOML parse error\nA vacant Entry.\nA vacant Entry.\nA view into a single empty location in a <code>IndexMap</code>.\nRepresentation of a TOML Value (as part of a Key/Value …\nType representing value.\nA suffix which, when applied to a time, denotes a UTC …\nReturns an empty array of tables.\nClears the table, removing all key-value pairs. Keeps the …\nReturns true if the table contains an item with the given …\nOptional date. Required for: <em>Offset Date-Time</em>, <em>Local </em>…\nDay: 1 to {28, 29, 30, 31} (based on month/year)\nDeserializing TOML into Rust structures.\nGets the given key’s corresponding entry in the Table …\nGets the given key’s corresponding entry in the Table …\nAuto formats the table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an optional reference to an item given the key.\nReturn references to the key-value pair stored for key, if …\nReturn mutable references to the key-value pair stored for …\nReturns an optional mutable reference to an item given the …\nGet key/values for values that are visually children of …\nHour: 0 to 23\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this is a wrapper for dotted keys, rather than a …\nReturns an iterator over key/value pairs.\nReturns an mutable iterator over all key/value pairs, …\nReturns the decor associated with a given key of the table.\nReturns the decor associated with a given key of the table.\nMinute: 0 to 59\nMonth: 1 to 12\nNanosecond: 0 to <code>999_999_999</code>\nOptional offset. Required for: <em>Offset Date-Time</em>.\nRemoves an item given the key.\nSecond: 0 to {58, 59, 60} (based on leap second rules)\nSerializing Rust structures into TOML.\nChange this table’s dotted status\nSorts Key/Value Pairs of the table.\nReturns an empty table.\nOptional time. Required for: <em>Offset Date-Time</em>, <em>Local </em>…\nReturns a formatted value.\nDocument tree traversal to walk a shared borrow of a …\nDocument tree traversal to mutate an exclusive borrow of a …\nYear: four digits\nMinutes: -<code>1_440..1_440</code>\nType representing a TOML array, payload of the <code>Value::Array</code>…\nAn owned iterator type over <code>Table</code>’s key/value pairs.\nAn iterator type over <code>Array</code>’s values.\nAn iterator type over <code>Array</code>’s values.\nClears the array, removing all values. Keeps the allocated …\nReturns the surrounding whitespace\nReturns the surrounding whitespace\nAuto formats the array.\nReturns the argument unchanged.\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nInserts an element at the given position within the array, …\nInserts an already formatted value at the given position …\nCalls <code>U::from(self)</code>.\nReturn true iff <code>self.len() == 0</code>.\nReturns an iterator over all values.\nReturns an iterator over all values.\nReturns the length of the underlying Vec.\nCreate an empty <code>Array</code>\nAppends a new value to the end of the array, applying …\nAppends a new, already formatted value to the end of the …\nRemoves the value at the given index.\nReplaces the element at the given position within the …\nReplaces the element at the given position within the …\nRetains only the values specified by the <code>keep</code> predicate.\nSet whitespace after last element\nSet whether the array will use a trailing comma\nSorts the slice with a comparator function.\nSorts the array with a key extraction function.\nReturns the location within the original document\nWhitespace after last element\nWhether the array will use a trailing comma\nType representing a TOML array of tables\nAn iterator type over <code>ArrayOfTables</code>’s values.\nAn iterator type over <code>ArrayOfTables</code>’s values.\nAn iterator type over <code>ArrayOfTables</code>’s values.\nRemoves all the tables.\nReturns the argument unchanged.\nReturns an optional reference to the table.\nReturns an optional mutable reference to the table.\nCalls <code>U::from(self)</code>.\nConvert to an inline array\nReturns true iff <code>self.len() == 0</code>.\nReturns an iterator over tables.\nReturns an iterator over tables.\nReturns the length of the underlying Vec. To get the …\nCreates an empty array of tables.\nAppends a table to the array.\nRemoves a table with the given index.\nRetains only the elements specified by the <code>keep</code> predicate.\nReturns the location within the original document\nDeserialization for TOML documents.\nErrors that can occur when deserializing a type.\nDeserialization implementation for TOML values.\nAdd key while unwinding\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a document into <code>T</code>.\nConvert a value into <code>T</code>.\nConvert a value into <code>T</code>.\nParses a document from a &amp;str\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat went wrong\nDeserialization implementation for TOML.\nThe start/end index into the original document where the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeserializes table values into enum variants.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeserialization implementation for TOML values.\nReturns the argument unchanged.\nParses a value from a &amp;str\nCalls <code>U::from(self)</code>.\nType representing a TOML document\nReturns a reference to the root item.\nReturns a mutable reference to the root item.\nReturns a reference to the root table.\nReturns a mutable reference to the root table.\nPanics\nReturns the argument unchanged.\nParses a document from a &amp;str\nCalls <code>U::from(self)</code>.\nReturns an iterator over the root table.\nCreates an empty document\nSet whitespace after last element\nWhitespace after last element\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nType representing a TOML parse error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhat went wrong\nThe start/end index into the original document where the …\nA view into a single location in a map, which may be …\nA view into a single occupied location in a <code>IndexMap</code>.\nType representing a TOML inline table, payload of the …\nAn owned iterator type over key/value pairs of an inline …\nAn iterator type over key/value pairs of an inline table.\nA mutable iterator type over key/value pairs of an inline …\nA view into a single empty location in a <code>IndexMap</code>.\nAn occupied Entry.\nA vacant Entry.\nClears the table, removing all key-value pairs. Keeps the …\nReturns true iff the table contains given key.\nReturns the surrounding whitespace\nReturns the surrounding whitespace\nGets the given key’s corresponding entry in the Table …\nGets the given key’s corresponding entry in the Table …\nAuto formats the table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nReturn an optional reference to the value at the given the …\nReturn references to the key-value pair stored for key, if …\nReturn mutable references to the key-value pair stored for …\nGets a mutable reference to the value in the entry.\nReturn an optional mutable reference to the value at the …\nInserts a key/value pair if the table does not contain the …\nGet key/values for values that are visually children of …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntry’s key, …\nInserts a key-value pair into the map.\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the OccupiedEntry into a mutable reference to the …\nConvert to a table\nCheck if this is a wrapper for dotted keys, rather than a …\nReturns true iff the table is empty.\nIf a table has no key/value pairs and implicit, it will …\nReturns an iterator over key/value pairs.\nReturns an iterator over key/value pairs.\nReturns the entry key\nGets a reference to the entry key\nGets a reference to the entry key\nReturns the decor associated with a given key of the table.\nReturns the decor associated with a given key of the table.\nGets a mutable reference to the entry key\nReturns the number of key/value pairs.\nCreates an empty table.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nWhitespace after before element\nTakes the value out of the entry, and returns it\nRemoves an item given the key.\nRemoves a key from the map, returning the stored key and …\nRetains only the elements specified by the <code>keep</code> predicate.\nChange this table’s dotted status\nIf a table has no key/value pairs and implicit, it will …\nSet whitespace after before element\nSorts the key/value pairs by key.\nSort Key/Value Pairs of the table using the using the …\nReturns the location within the original document\nOpaque string storage internal to <code>toml_edit</code>\nAccess the underlying string\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an empty string\nType representing array of tables.\nType representing either a value, a table, an array of …\nType representing none.\nType representing table.\nType representing value.\nReturns an empty array of tables.\nCasts <code>self</code> to array.\nCasts <code>self</code> to mutable array.\nCasts <code>self</code> to array of tables.\nCasts <code>self</code> to mutable array of tables.\nCasts <code>self</code> to boolean.\nCasts <code>self</code> to date-time.\nCasts <code>self</code> to float.\nCasts <code>self</code> to inline table.\nCasts <code>self</code> to mutable inline table.\nCasts <code>self</code> to integer.\nCasts <code>self</code> to str.\nCasts <code>self</code> to table.\nCasts <code>self</code> to either a table or an inline table.\nCasts <code>self</code> to either a table or an inline table.\nCasts <code>self</code> to mutable table.\nCasts <code>self</code> to value.\nCasts <code>self</code> to mutable value.\nReturns the argument unchanged.\nParses a value from a &amp;str\nIndex into a TOML array or map. A string index can be used …\nMutably index into a TOML array or map. A string index can …\nCalls <code>U::from(self)</code>.\nCasts <code>self</code> to array of tables.\nCasts <code>self</code> to table.\nCasts <code>self</code> to value.\nReturns true iff <code>self</code> is an array.\nReturns true iff <code>self</code> is an array of tables.\nReturns true iff <code>self</code> is a boolean.\nReturns true iff <code>self</code> is a date-time.\nReturns true iff <code>self</code> is a float.\nReturns true iff <code>self</code> is an inline table.\nReturns true iff <code>self</code> is an integer.\nReturns true iff <code>self</code> is <code>None</code>.\nReturns true iff <code>self</code> is a string.\nReturns true iff <code>self</code> is a table.\nReturns true iff <code>self</code> is either a table, or an inline …\nReturns true iff <code>self</code> is a value.\nIn-place convert to a value\nSets <code>self</code> to the given item iff <code>self</code> is none and returns a …\nReturns the location within the original document\nReturns an empty table.\nText description of value type\nReturns a formatted value.\nKey as part of a Key/Value Pair or a table header.\nA mutable reference to a <code>Key</code>\nAccess a mutable proxy for the <code>Key</code>.\nReturns key raw representation, if available.\nReturns the raw representation, if available.\nReturns the surrounding whitespace\nReturns the surrounding whitespace\nReturns the surrounding whitespace\nReturns the surrounding whitespace\nReturns the default raw representation.\nReturns the default raw representation.\nReturns a raw representation.\nReturns a raw representation.\nAuto formats the key.\nAuto formats the key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to parse a key from a &amp;str, if fails, tries as basic …\nReturns the parsed key value.\nReturns the parsed key value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new table key\nParse a TOML key expression\nReturns the location within the original document\nWhile creating the <code>Key</code>, add <code>Decor</code> to it\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>char</code> token\nAccumulate context while backtracking errors\nA description of what was being parsed\nContains the error value\nGrammar item that was expected\nCreate a new error with an external error, from …\nDescription of what is currently being parsed\nContains the success value\nFor use with <code>Parser::parse_next</code>\nCore trait for parsing\nAdditional parse context for <code>ContextError</code> added via …\nSee <code>StrContext</code>\nA <code>&amp;str</code> token\nApplies a second parser over the output of the first one\nTreat <code>&amp;mut Self</code> as a parser\nOriginating <code>std::error::Error</code>\nTransforms <code>Incomplete</code> into <code>Backtrack</code>\nIf parsing fails, add context to the error\nAccess context from <code>Parser::context</code>\nProduce a type’s default value\nConvert the parser’s error to another type using …\nCreates a parser from the output of this one\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLike <code>ParserError::from_error_kind</code> but also include an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps a function over the output of a parser\nCreate an empty error\nConvert the parser’s output to another type using …\nParse all of <code>input</code>, generating <code>O</code> from it\nTake tokens from the <code>Stream</code>, turning it into the output\nTake tokens from the <code>Stream</code>, turning it into the output\nApply <code>std::str::FromStr</code> to the output of the parser\nProduce the consumed input as produced value.\nProduce the location of the consumed input as produced …\nApplies a function returning a <code>Result</code> over the output of a …\nProduce the provided value\nReturns the output of the child parser if it satisfies a …\nApply both <code>Parser::verify</code> and <code>Parser::map</code>.\nDiscards the output of the <code>Parser</code>\nProduce the consumed input with the output\nProduce the location of consumed input with the output\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOpaque string storage for raw TOML; internal to <code>toml_edit</code>\nAccess the underlying string\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess the underlying span\nA prefix and suffix,\nA value together with its <code>to_string</code> representation, …\nTOML-encoded value\nAccess the underlying value\nReturns the raw representation, if available.\nGo back to default decor\nReturns the surrounding whitespace\nReturns the surrounding whitespace\nReturns the default raw representation.\nReturns a raw representation.\nAuto formats the value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe wrapped value\nDefault-formatted value\nCreates a new decor from the given prefix and suffix.\nGet the prefix.\nSet the prefix.\nSet the suffix.\nReturns the location within the original document\nReturns the location within the original document\nGet the suffix.\nThe TOML representation of the value\nThe wrapped value\nOther serialization error\nA serialized date was invalid\nErrors that can occur when deserializing a type.\nKey was not convertible to <code>String</code> for serializing to TOML\nValue was out of range for the given type\n<code>None</code> could not be serialized to TOML\nType could not be serialized to TOML\nSerialization for TOML values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize the given data structure into a TOML document.\nSerialize the given data structure as a String of TOML.\nSerialize the given data structure as a “pretty” …\nSerialize the given data structure as a TOML byte vector.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialization for TOML values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new serializer generate a TOML document.\nA view into a single location in a map, which may be …\nAn owned iterator type over <code>Table</code>’s key/value pairs.\nAn iterator type over <code>Table</code>’s key/value pairs.\nA mutable iterator type over <code>Table</code>’s key/value pairs.\nAn occupied Entry.\nA view into a single occupied location in a <code>IndexMap</code>.\nType representing a TOML non-inline table\nThis trait represents either a <code>Table</code>, or an <code>InlineTable</code>.\nA vacant Entry.\nA view into a single empty location in a <code>IndexMap</code>.\nClears the table, removing all key-value pairs. Keeps the …\nClears the table, removing all key-value pairs. Keeps the …\nReturns true if the table contains an array of tables with …\nReturns true if the table contains an item with the given …\nReturns true if the table contains an item with the given …\nReturns true if the table contains a table with the given …\nReturns true if the table contains a value with the given …\nReturns the decor associated with a given key of the table.\nReturns the surrounding whitespace\nGets the given key’s corresponding entry in the Table …\nGets the given key’s corresponding entry in the Table …\nGets the given key’s corresponding entry in the Table …\nGets the given key’s corresponding entry in the Table …\nAuto formats the table.\nAuto formats the table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an optional reference to an item given the key.\nGets a reference to the value in the entry.\nReturns an optional reference to an item given the key.\nReturn references to the key-value pair stored for key, if …\nReturn references to the key-value pair stored for key, if …\nReturn mutable references to the key-value pair stored for …\nReturn mutable references to the key-value pair stored for …\nReturns an optional mutable reference to an item given the …\nGets a mutable reference to the value in the entry.\nReturns an optional mutable reference to an item given the …\nGet key/values for values that are visually children of …\nGet key/values for values that are visually children of …\nInserts a key-value pair into the map.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntry’s key, …\nInserts a key-value pair into the map.\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to an inline table\nConverts the OccupiedEntry into a mutable reference to the …\nCheck if this is a wrapper for dotted keys, rather than a …\nCheck if this is a wrapper for dotted keys, rather than a …\nReturns true if the table is empty.\nReturns true if the table is empty.\nReturns true if the table is empty.\nIf a table has no key/value pairs and implicit, it will …\nReturns an iterator over key/value pairs.\nReturns an iterator over all key/value pairs, including …\nReturns an mutable iterator over all key/value pairs, …\nReturns an mutable iterator over all key/value pairs, …\nReturns the entry key\nGets a reference to the entry key\nGets a reference to the entry key\nReturns the decor associated with a given key of the table.\nReturns the decor associated with a given key of the table.\nReturns the decor associated with a given key of the table.\nReturns the decor associated with a given key of the table.\nGets a mutable reference to the entry key\nReturns the number of nonempty items.\nReturns the number of nonempty items.\nReturns the number of non-empty items in the table.\nCreates an empty table.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nThe position of the <code>Table</code> within the <code>Document</code>.\nRemoves an item given the key.\nTakes the value out of the entry, and returns it\nRemoves an item given the key.\nRemoves a key from the map, returning the stored key and …\nRetains only the elements specified by the <code>keep</code> predicate.\nChange this table’s dotted status\nChange this table’s dotted status\nIf a table has no key/value pairs and implicit, it will …\nSets the position of the <code>Table</code> within the <code>Document</code>.\nSorts Key/Value Pairs of the table.\nSorts Key/Value Pairs of the table.\nSort Key/Value Pairs of the table using the using the …\nReturns the location within the original document\nAn inline array of values.\nA boolean value.\nAn RFC 3339 formatted date-time with offset.\nA 64-bit float value.\nAn inline table of key/value pairs.\nA 64-bit integer value.\nA string value.\nRepresentation of a TOML Value (as part of a Key/Value …\nCasts <code>self</code> to array.\nCasts <code>self</code> to mutable array.\nCasts <code>self</code> to boolean.\nCasts <code>self</code> to date-time.\nCasts <code>self</code> to float.\nCasts <code>self</code> to inline table.\nCasts <code>self</code> to mutable inline table.\nCasts <code>self</code> to integer.\nCasts <code>self</code> to str.\nGet the decoration of the value.\nGet the decoration of the value.\nSets the prefix and the suffix for value.\nReturns the argument unchanged.\nParses a value from a &amp;str\nCalls <code>U::from(self)</code>.\nReturns true iff <code>self</code> is an array.\nReturns true iff <code>self</code> is a boolean.\nReturns true iff <code>self</code> is a date-time.\nReturns true iff <code>self</code> is a float.\nReturns true iff <code>self</code> is an inline table.\nReturns true iff <code>self</code> is an integer.\nReturns true iff <code>self</code> is a string.\nReturns the location within the original document\nText description of value type\nDocument tree traversal to mutate an exclusive borrow of a …\nDocument tree traversal to mutate an exclusive borrow of a …\n<code>visit_table_mut</code> and <code>visit_inline_table_mut</code> both recurse …")