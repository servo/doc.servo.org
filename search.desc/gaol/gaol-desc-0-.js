searchState.loadedDescShard("gaol", 0, "Sandbox profiles—lists of permitted operations.\nCreation and destruction of sandboxes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSandboxing on Linux via miscellaneous kernel features.\nSandboxing on Linux via namespaces.\n<code>seccomp-bpf</code> support on recent Linux kernels.\nA <code>chroot</code> jail with a restricted view of the filesystem …\nCreates a namespace and sets up a chroot jail.\nBind mounts a path into our chroot jail.\nRemoves fake-superuser capabilities. This removes our …\nEnters the <code>chroot</code> jail.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>chroot</code> jail.\nSets up the user and PID namespaces.\nSpawns a child process in a new namespace.\nSyscalls that are always allowed.\nThe architecture number for x86-64.\nThe architecture number for ARM 64-bit.\nThe architecture number for ARM.\nThe architecture number for ppc.\nThe architecture number for ppc64.\nThe architecture number for ppc64le.\nThe architecture number for x86.\nThe architecture number for x86-64.\nA flag set in the architecture number for all 64-bit …\nA flag set in the architecture number for all …\nActivates this filter, applying all of its restrictions …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChild process management on POSIX systems.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes a network address.\nAll network addresses.\nThis operation is always allowed on this platform.\nThis operation can be precisely allowed on this platform.\nThis operation cannot be allowed precisely on this …\nAll file-related reading operations may be performed on …\nMetadata (for example, <code>stat</code> or <code>readlink</code>) of this file may …\nOne specific path.\nA local socket at the given path (for example, a Unix …\nOutbound network connections to the given address may be …\nThis operation is never allowed on this platform.\nAn operation that this process is allowed to perform.\nAllows operations to be queried to determine how precisely …\nHow precisely an operation can be allowed on this platform.\nDescribes a path or paths on the filesystem.\nPlatform-specific operations.\nA sandbox profile, which specifies the set of operations …\nA directory and all of its contents, recursively.\nSystem information may be read (via <code>sysctl</code> on Unix).\nTCP connections on the given port.\nReturns the list of allowed operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new profile with the given set of allowed …\nReturns an <code>OperationSupportLevel</code> describing how well this …\nAll platform-specific sandboxes in the child process …\nAll platform-specific sandboxes implement this trait.\nActivates the restrictions in this child process from here …\nAdds an argument to pass to the program.\nAdds multiple arguments to pass to the program.\nThe arguments to pass.\nInserts or updates an environment variable mapping.\nThe environment of the process.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>Command</code> for launching the current …\nA path to the executable.\nConstructs a new <code>Command</code> for launching the executable at …\nReturns this sandbox profile.\nExecutes the command as a child process, which is returned.\nSpawns a child process eligible for sandboxing.")