searchState.loadedDescShard("layout_2020", 0, "A containing block useful for calculating inline content …\n…\nFlow layout, also known as block-and-inline layout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe containing block used in the layout of this fragment …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSupports writing a trace file created during each layout …\nCreates an <code>IndefiniteContainingBlock</code> with the provided …\nUtilities for querying the layout, as needed by layout.\nFragments at the top-level of the tree.\nWhether or not the root element is sensitive to scroll …\nThe scrollable overflow rectangle for the entire tree …\nhttps://drafts.csswg.org/css-sizing/\nHTML Tables (╯°□°)╯︵ ┻━┻\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA FontContext to be used during layout.\nReturns the argument unchanged.\nReference to the script thread image cache.\nCalls <code>U::from(self)</code>.\nA list of in-progress image loads to be shared with the …\nBits shared by the layout and style system.\nRefers to one of the vecs of a StackingContext.\nRefers to one of the child contents or stacking contexts …\nWhere the information that’s used to build display lists …\nNo value.\nSome value of type <code>T</code>.\nEither a stacking context or a stacking container, per the …\nAtomic inline stacking containers. Separate from …\nAdd a display item for image borders if necessary.\nThe clip chain id of this stacking context if it has one. …\nThe information about the WebRender display list that the …\n…\nThe contents that need to be painted in fragment order.\nA LayoutContext used to get information about the device …\nThe type of this stacking context. Used for collecting and …\nThe current wr::ClipId for this DisplayListBuilder. This …\nThe current ScrollTreeNodeId for this DisplayListBuilder. …\nThe current ScrollTreeNodeId for this DisplayListBuilder. …\nInformation gathered about the painting order, for …\nThe DisplayList used to collect display list items and …\nThe OpaqueNode handle to the node used to paint the page …\nFloat stacking containers. Separate from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProduce a new SpatialTreeItemKey. This is currently unused …\nA recording of the sizes of iframes encountered when …\nThe <code>FragmentFlags</code> of the <code>Fragment</code> that established this …\nThe style of the fragment that established this stacking …\nRadii for the padding edge or content edge\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContentful paint i.e. whether the display list contains …\nCreate a new DisplayList given the dimensions of the …\nStacking contexts that need to be stolen by the parent …\nResolve the WebRender border-image outset area from the …\nResolve the WebRender border-image slice from the style …\nResolve the WebRender border-image width from the style …\nThe spatial id of this fragment. This is used to properly …\nA count of the number of SpatialTree nodes pushed to the …\nThe wr::DisplayListBuilder used to collect display list …\nGet the <code>wr::CommonItemProperties</code> for this background. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAbstract over the horizontal or vertical dimension …\nGet the painting area for this background, which is the …\nGet the positioning area of the background which is the …\nhttps://drafts.csswg.org/css-images-4/#conic-gradients\nhttps://drafts.csswg.org/css-images-3/#linear-gradients\nhttps://drafts.csswg.org/css-images-3/#radial-gradients\nhttps://drafts.csswg.org/css-images-4/#color-stop-fixup\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn index into …\nRefers to one of the vecs of a StackingContext.\nRefers to one of the child contents or stacking contexts …\nA fragment that does not generate a stacking context or …\nEither a stacking context or a stacking container, per the …\nA piece of content that directly belongs to a section of a …\nAdd a child stacking context to this stacking context.\nAtomic inline stacking containers. Separate from …\n…\nThe clip chain id of this stacking context if it has one. …\nThe WebRender ClipId to use for this children of this …\nThe contents that need to be painted in fragment order.\nThe type of this stacking context. Used for collecting and …\nPrint the stacking context tree.\nInformation gathered about the painting order, for …\nPrint a subtree with the given PrintTree, or panic if …\nStore the fact that something was painted, if …\nFloat stacking containers. Separate from …\nThe containing block for fixed and absolute descendants. …\nThe containing block for absolute descendants. “If the …\nThe containing block for all non-absolute descendants. “…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe <code>FragmentFlags</code> of the <code>Fragment</code> that established this …\nThe style of the fragment that established this stacking …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStacking contexts that need to be stolen by the parent …\nThe physical rect of this containing block.\nThe size of the parent scroll frame of this containing …\nThe SpatialId of the spatial node that contains the …\nThe spatial id of this fragment. This is used to properly …\nA wrapper for <code>InnerDOMLayoutData</code>. This is necessary to …\nThe data that is stored in each DOM node that is used by …\nA box that is stored in one of the <code>DOMLayoutData</code> slots.\nReturns the image if it’s loaded, and its size in image …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove boxes for the element itself, and its <code>:before</code> and …\nA data structure used to pass and store related layout …\nAny kind of content that is not replaced, including the …\nRefers to a DOM subtree, plus <code>::before</code> and <code>::after</code> …\nContent of a <code>::before</code> or <code>::after</code> pseudo-element that is …\nExample: an <code>&lt;img src=…&gt;</code> element. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhttps://www.w3.org/TR/CSS2/generate.html#propdef-content\nOr pseudo-element\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true iff the <code>try_from</code> impl below would return …\nA structure to hold the configuration of a flex container …\nThis is an implementation of …\nThe configuration of this <code>FlexContainer</code>.\nCreate a absolutely positioned flex child fragment, using …\nhttps://drafts.csswg.org/css-flexbox/#algo-main-item\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhttps://drafts.csswg.org/css-flexbox/#box-model\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether an item with an <code>auto</code> preferred cross size needs to …\nhttps://drafts.csswg.org/css-flexbox/#layout-algorithm\nOr pseudo-element\nhttps://drafts.csswg.org/css-flexbox/#flex-items\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOr pseudo-element\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nhttps://drafts.csswg.org/css-text/#white-space\nTo be run in parallel with rayon in <code>finish</code>\nThe main axis is the block axis, cross is inline.\nOne of the two bits set by the <code>flex-direction</code> property …\nWhich flow-relative sides map to the main-start and …\nThe main axis is the inline axis of the container (not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe start corner coordinates in both the input rectangle …\nReturn type of <code>FlexLine::layout</code>\nChild of a FlexContainer. Can either be absolutely …\nLayout parameters and intermediate results about a flex …\nA flex item with some intermediate results\nReturn type of <code>FlexItem::layout</code>\nReturn the coordinate of the cross-start side of the …\nThis is <code>align-self</code>, defaulting to <code>align-items</code> if <code>auto</code>\nThis is the baseline of the first and last items with …\nAlign all flex lines per <code>align-content</code> according to …\nhttps://drafts.csswg.org/css-flexbox/#algo-cross-line\nThe final cross size of this flex line.\nWhether or not the size of this <code>FlexItem</code> depends on its …\nhttps://drafts.csswg.org/css-flexbox/#algo-main-item\nWhether the <code>Self::flex_base_size</code> comes from a definite …\nThe free space available to this line after the initial …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhttps://drafts.csswg.org/css-flexbox/#algo-main-item\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>BoxFragment</code>s and <code>PositioningContext</code>s of all flex items,\nThe layout results of the initial layout pass of this flex …\nThe used main size of each item in this line.\nWhether an item with an <code>auto</code> preferred cross size will …\nThe items that are placed in this line.\nReturn the hypothetical cross size together with laid out …\nThe initial size of this flex line, not taking into …\nSum of padding, border, and margin (with <code>auto</code> assumed to …\nReturn the cross-start, cross-end, main-start, and …\nReturn the <em>main size</em> of each item, and the line’s …\nThe ‘shared alignment baseline’ of this flex line. …\nhttps://drafts.csswg.org/css-backgrounds/#root-background\nThe contentes of a BlockContainer created to render a list …\nState that we maintain when placing blocks.\nThe offset of the baselines in this layout in the content …\nFinds the min/max-content inline size of the block-level …\n…\nThe <code>ContainingBlock</code> of the container into which this …\nWhether or not this layout depends on the block size of …\nDistance between the border box and the containing block …\nFloat layout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe element whose style the canvas takes background …\nInline Formatting Context Layout\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is supposed to handle ‘justify-self’, but no …\nLay out a normal flow non-replaced block that does not …\n…\nUsed value for the margin properties, as exposed in …\nIf this <code>PlacementState</code> is laying out a list item with an …\nPlace a single Fragment in a block level context using the …\nContains typically exactly one block-level box, which was …\nDOM node for the root element\nWhether or not the root element should be sensitive to …\nResolves ‘auto’ margins of an in-flow block-level box …\nA block-level element that establishes an independent …\nGiven the style for an in-flow box and its containing …\nResolves ‘auto’ margins of an in-flow block-level box …\nResolves ‘auto’ margins of an in-flow block-level box …\nGiven the containing block and size of an in-flow box, …\nThe computed styles to take background properties from.\nA builder for a block container.\nA block container that may still have to be constructed.\nThe style of the anonymous block boxes pushed to the list …\nA collection of content that is being added to an …\nThe list of block-level boxes to be built for the final …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether or not this builder has yet produced a block which …\nThis NodeAndStyleInfo contains the root node, the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe propagated <code>TextDecorationLine</code>.\n<code>FloatContext</code> positions floats relative to the independent …\nInternal data structure that describes a nonoverlapping …\nA single edge (or lack thereof) in the float band tree.\nA single node in the float band tree.\nA persistent AA tree for float band storage.\nA floating box.\nData kept during layout about the floats in a given block …\nWhether the float is left or right.\nThis data strucure is used to try to place non-floating …\nInformation needed to place an object so that it doesn’t …\nLayout state that we maintain when doing sequential …\nAdds bands to the set of bands under consideration until …\nPlaces a new float and adds it to the list. Returns the …\nAdd a single band to the bands under consideration and …\nAdds a new adjoining margin.\nMoves the current block position (logically) down by …\nThe actual band.\nA persistent AA tree of float bands.\nThe (logically) bottom border edge or top padding edge of …\nThe distance from the block start of the independent block …\nAny uncollapsed block start margins that we have collected …\nReturns the block-end outer edge of the lowest float that …\nReturns the amount of clearance (if any) that a block with …\nA block that is replaced or establishes an independent …\nFind the start and end of the inline space provided by the …\nFind the total inline size provided by the current set of …\nThe “ceiling” used for float placement. This is the …\nThe minimum position in the block direction for the …\nThe block-direction “ceiling” defined by the placement …\nThe block-direction “ceiling” defined by the placement …\nWhich side or sides to clear floats on.\nThe (logically) lowest margin edge of the last left float.\nThe (logically) lowest margin edge of the last right float.\nCollapses margins, moving the block position down by the …\nCreates a new float box.\nDetails about the position of the containing block …\nThe formatting context that makes up the content of this …\nThe current bands we are considering for this placement.\nThe height of the bands under consideration.\nReturn the current block position in the float containing …\nGet the offset of the current containing block and any …\nAny collapsible margins that we’ve encountered after …\nReturns the first band whose top is less than or equal to …\nReturns the first band whose top is less than or equal to …\nReturns the first band whose top is strictly greater than …\nReturns the first band whose top is strictly greater than …\nThe FloatContext to use for this placement.\nHolds all floats in this block formatting context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks if we either have bands or we have gone past all of …\nThe offset from the inline start position of the float …\nThe distance from the inline start position of the float …\nInserts a new band into the tree. If the band has the same …\nInserts a new band into the tree. If the band has the same …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLay out this float box and its children. Note that the …\nThe distance from the left edge of the block formatting …\nThe left child.\nThe level, which increases as you go up the tree.\nThe maximum inline position that the object can attain …\nThe inline position where the object would be if there …\nReturns a new float context representing a containing …\nCreates a new float band tree.\nCreates a new empty <code>SequentialLayoutState</code>.\nThe next band, needed to know the height of the last band …\nDetermines whether an object fits in a band. Returns true …\nThe size of the object to place.\nRun the placement algorithm for this PlacementAmongFloats.\nThis function places a Fragment that has been created for …\nDetermines where a float with the given placement would …\nComputes the position of the block-start border edge of an …\nComputes the position of the block-start border edge of an …\nReplace the entire ContainingBlockPositionInfo data …\nThe distance from the <em>left</em> edge of the block formatting …\nThe right child.\n(Logically) lowers the ceiling to at least <code>new_ceiling</code> …\nAfter placing a table and then laying it out, it may turn …\nSets the side values of all bands within the given …\nSets the side values of all bands within the given …\nWhether the object is (logically) aligned to the left or …\nThe <em>margin</em> box size of the object.\nCorrects tree balance:\nCorrects tree balance:\nThe logical vertical position of the top of this band.\nThe top of the bands under consideration. This is …\nAfter placing an object with <code>height: auto</code> (and using the …\nA block size relative to a line’s final baseline. This …\nA struct which takes care of computing <code>ContentSizes</code> for an …\nA collection of data used to cache <code>FontMetrics</code> in the …\nInformation about the current line under construction for …\nThe current unbreakable segment under construction for an …\nGiven an offset from the line’s root baseline, adjust …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe ascent above the baseline, where a positive value …\nThe baseline offset of this container from the baseline of …\nThe offset of the first and last baselines in the inline …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGiven the amount of whitespace trimmed from the line and …\nWhether or not this character will rpevent a soft wrap …\nCommit the current unbrekable segment to the current line. …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCompute the <code>ContentSizes</code> of the given …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether or not this <code>InlineFormattingContext</code> contains …\nCount the number of justification opportunities in this …\nInformation about the line currently being laid out into …\nInformation about the unbreakable line segment currently …\nWhen a <code>&lt;br&gt;</code> element has <code>clear</code>, this needs to be applied …\nWhether or not the layout of this InlineFormattingContext …\nThe descent below the baseline, where a positive value …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nStack of ending padding, margin, and border to add to the …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFrom https://drafts.csswg.org/css2/visudet.html#line-height…\nFinish layout of all inline boxes for the current line. …\nFinish laying out a particular <code>InlineBox</code> into line items. …\nFlags which describe details of this <code>InlineContainerState</code>.\nThe font metrics of the non-fallback font for this …\nA store of font information for all the shaped segments in …\nA vector of fragment that are laid out. This includes one …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nWhether or not the current line has seen any content …\nWhether or not the current line has seen any content …\nWhether or not this InlineFormattingContext has processed …\nWhether any active linebox has added a glyph or atomic …\nWhether any active linebox has added a glyph or atomic …\nWhether or not we have processed any content (an atomic …\nWhether this IFC contains the 1st formatted line of an …\nWhether or not there are floats that did not fit on the …\nWhether or not this is an <code>InlineFormattingContext</code> has …\nWhether or not a soft wrap opportunity is queued. Soft …\nThe <code>InlineFormattingContext</code> that we are laying out.\nThe depth in the inline box hierarchy at the start of this …\nA stack of <code>InlineBoxContainerState</code> that is used to produce …\nA collection of <code>InlineBoxContainerState</code> of all the inlines …\nThe tree of inline boxes in this <code>InlineFormattingContext</code>. …\nWhether or not a strut should be created for an inline …\nAll <code>InlineItem</code>s in this <code>InlineFormattingContext</code> stored in …\nThe current inline position in the line being laid out …\nThe size of this unbreakable segment in both dimension.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether or not this is an <code>InlineFormattingContext</code> for a …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe LineItems for the current line under construction that …\nThe LineItems for the segment under construction\nAfter a forced line break (for instance from a <code>&lt;br&gt;</code> …\nThe maximum block size of all boxes that ended and are in …\nThe maximum block size that this segment has. This uses …\nThe strut block size of this inline container maxed with …\nReturns true if a new potential line size for the current …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSize for whitespace pending to be added to this line.\nPlace a FloatLineItem. This is done when an unbreakable …\nGiven a new potential line size for the current line, …\nA rectangular area (relative to the containing block / …\nProcess a soft wrap opportunity. This will either commit …\nPush a single line item to this segment. In addition, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReset this segment after its contents have been committed …\nThe <code>InlineContainerState</code> for the container formed by the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nStart laying out a particular <code>InlineBox</code> into line items. …\nThe position where this line will start once it is laid …\nThe block size contribution of this container’s default …\nThe style of this inline container.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe text content of this inline formatting context.\nIndicates whether this nesting level have text decorations …\nThe currently text-wrap-mode setting of this line. This is …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe inline size of any trailing whitespace in this segment.\nTrim whitespace from the beginning of this …\nTrim the trailing whitespace in this line and return the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe currently white-space-collapse setting of this line. …\nThis is an interator that consumes a char iterator and …\nGiven a string and whether the start of the string …\nThe input character iterator.\nWhen we enter a collapsible white space region, we may …\nWhether or not this inline formatting context will contain …\nThe current offset in the final text string of this …\nFinish the current inline formatting context, returning …\nWhether or not the last character produced was newline. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether or not the inline formatting context under …\nWhether or not we have seen any non-white space …\nThe ongoing stack of inline boxes stack of the builder.\nThe current <code>InlineBox</code> tree of this <code>InlineFormattingContext</code> …\nThe current list of <code>InlineItem</code>s in this …\nWhether the last character that we processed was a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if this <code>InlineFormattingContextBuilder</code> is …\nWhether the last processed node ended with whitespace. …\nWhether or not we need to produce a space character if the …\nWhether or not the current state of the inline formatting …\nIf an uppercasing or lowercasing produces more than one …\nWhether or not we should collapse white space completely …\nThe collection of text strings that make up this …\nThe <code>text-transform</code> value to use.\nAn identifier for a particular <code>InlineBox</code> to be used to …\nThe container state common to both <code>InlineBox</code> and the root …\nThe <code>BaseFragmentInfo</code> of the <code>InlineBox</code> that this state …\nThe index of the default font in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe <code>InlineBoxIdentifier</code> of this inline container state. If …\nThe identifier of this inline box in the containing …\nA list of tokens that represent the actual tree of inline …\nA collection of all inline boxes in a particular …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is the last fragment of this InlineBox. This …\nThe <code>PaddingBorderMargin</code> of the <code>InlineBox</code> that this state …\nWhether or not any floats were encountered while laying …\nWhether or not any line items were processed for this …\nWhether or not the starting inline border, padding, or …\nWhether or not the ending inline border, padding, or …\nThe second phase of <code>super::InlineFormattingContext</code> layout: …\nThe state used when laying out a collection of <code>LineItem</code>s …\nGet a flags value with all known bits set.\nThe block offset of this line’s baseline from …\nThe block offset of the parent’s baseline relative to …\nThe offset of the baseline inside this item.\nThe block offset of this items’ baseline relative to the …\nThe BiDi level of this <code>TextRunLineItem</code> to enable …\nThe BiDi level of this <code>AtomicLineItem</code> to enable reordering.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe block offset of the line start in the containing …\nThe block size of this line.\nGiven the metrics for a line, our vertical alignment, and …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe current <code>LineItemLayoutInlineContainerState</code>.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlags which track various features during layout.\nThe fragments and their logical rectangle relative within …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nIf this inline container is not the root inline container, …\nThe current inline advance of the layout in the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe amount of space to add to each justification …\nThe state of the overall <code>super::InlineFormattingContext</code> …\nThe metrics of this line, which should remain constant …\nWhether or not this float Fragment has been placed yet. …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe offset of the parent, relative to the start position …\nIf this inline box establishes a containing block for …\nStart and end inline boxes in tree order, so that it …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSort a mutable slice by the the given indices array in …\nThe set of <code>LineItemLayoutInlineContainerState</code> created …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nhttps://www.w3.org/TR/css-display-3/#css-text-run\nThe bidi Level of this segment.\nWhether or not the linebreaker said that we should allow a …\nWhether or not this character should be able to change the …\nThe index of this font in the parent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe input character iterator.\nThe first character to produce in the next run of the …\nThe range of bytes in the parent …\nThe shaped runs within this segment.\nThe <code>Script</code> of this segment.\nTake the <code>TextRun</code>’s text and turn it into <code>TextRunSegment</code>…\nShape the text of this <code>TextRunSegment</code>, first finding “…\nThe text of this <code>TextRun</code> with a font selected, broken into …\nUpdate this segment if the Font and Script are compatible. …\nhttps://drafts.csswg.org/css-backgrounds/#root-background\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe element whose style the canvas takes background …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains typically exactly one block-level box, which was …\nDOM node for the root element\nWhether or not the root element should be sensitive to …\nThe computed styles to take background properties from.\nThis method attempts to incrementally update the box tree …\nThe baselines of a layout or a …\n…\nThe offset of the last inflow baseline of this layout in …\nhttps://drafts.csswg.org/css2/visudet.html#root-height\nThe contents of a table may force it to become wider than …\nIf it was requested during construction\nWhether or not this layout depends on the containing block …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLay out a normal in flow non-replaced block that …\nLay out a normal in flow non-replaced block that …\nPicks either the first or the last baseline, depending on …\nThis data structure stores fields that are common to all …\nInformation necessary to construct a new BaseFragment.\nAvoid painting the borders, backgrounds, and drop shadow …\nFlags used to track various information about a DOM node …\nWhether or not the node that created this fragment is a …\nWhether or not the node that created this Fragment is a …\nWhether or not this Fragment is a flex item.\nWhether or not this Fragment was created to contain a list …\nWhether or not this Fragment was created to contain a …\nWhether or not the node that created was a <code>&lt;table&gt;</code>, <code>&lt;th&gt;</code> or\nWhether or not the size of this fragment depends on the …\nA data structure used to hold DOM and pseudo-element …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nAn id used to uniquely identify this Fragment in debug …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlags which various information about this fragment used …\nThe flags to use for the new BaseFragment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns true if this fragment is non-anonymous and it is …\nReturns true if this tag is for a pseudo element.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreate a new Tag for a non-pseudo element. This is mainly …\nCreate a new Tag for a pseudo element. This is mainly used …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nA tag which identifies the DOM node and pseudo element of …\nThe tag to use for the new BaseFragment, if it is not an …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDescribes how a <code>BoxFragment</code> paints its background.\nDraw the normal <code>BoxFragment</code> background as well as the …\nDo not draw a background for this Fragment. This is used …\nDraw the background normally, getting information from the …\nGet the baselines for this <code>BoxFragment</code> if they are …\nWhen this <code>BoxFragment</code> is for content that has a baseline, …\nReturns the 4D matrix representing this fragment’s …\nReturns the 4D matrix representing this fragment’s …\nWhen the <code>clear</code> property is not set to <code>none</code>, it may …\nThe content rect of this fragment in the parent fragment’…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the given style contains a transform that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptionally returns the data for building a reference …\nThe resolved box insets if this box is <code>position: sticky</code>. …\nThe scrollable overflow of this box fragment.\nA data structure used to track the containing block when …\nThe containing block for fixed and absolute descendants. …\nThe containing block for absolute descendants. “If the …\nThe containing block for all non-absolute descendants. “…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAbsolute and fixed position fragments are hoisted up so …\nFloating content. A floated fragment is very similar to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtra space to add for each justification opportunity.\nA flag that represents the <em>used</em> value of the …\n…\nReturns the argument unchanged.\nGet the vector of rectangles that surrounds the fragments …\nThe containing block used in the layout of this fragment …\nCalls <code>U::from(self)</code>.\nFragments at the top-level of the tree.\nWhether or not the root element is sensitive to scroll …\nThe scrollable overflow rectangle for the entire tree …\nA reference to a Fragment which is shared between …\n<code>inset: auto</code>-positioned elements do not know their precise …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is the <code>WritingMode</code> of the original parent of the …\nThe resolved alignment values used for aligning this …\nThe “static-position rect” of this absolutely …\nCan contain child fragments with relative coordinates, but …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe scrollable overflow of this anonymous fragment’s …\nIf this fragment was created with a style, the style of …\n…\nRepresents an <code>auto</code> value for the preferred and minimum …\n…\n…\nRepresents a numeric <code>&lt;length-percentage&gt;</code>, but resolved as …\nThe possible values accepted by the sizing properties. …\nhttps://drafts.csswg.org/css-sizing-4/#valdef-width-stretch\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTries to resolve an extrinsic size into a numerical value. …\nResolves any size into a numerical value.\nResolves a non-initial size into a numerical value. …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nBegin a layout debug trace. If this has not been called, …\nEnd the debug layout trace. This will write the layout …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nhttps://drafts.csswg.org/css-lists/#content-property\nhttps://drafts.csswg.org/css-lists/#marker-string\nA data structure which stores the size of a positioning …\nAbsolute and fixed position fragments are hoisted up to …\nSee documentation for …\nThe number of boxes that will be hoisted the the nearest …\nThe number of boxes that will be hoisted the the nearest …\nA reference to a Fragment which is shared between this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven <code>fragment_layout_fn</code>, a closure which lays out a …\nGet the length of this PositioningContext.\nCreate a PositioningContext to use for laying out a …\n…\nThis unifies some of the parts in common in:\nTruncate this PositioningContext to the given …\nIs set whenever we truncated a white space char, used to …\nUsed to make sure we don’t add a <code>\\t</code> before the first …\nUsed to make sure we don’t add a <code>\\n</code> before the first row\nReturns the argument unchanged.\nReturns the argument unchanged.\nhttps://html.spec.whatwg.org/multipage/#get-the-text-steps\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not the element with the given style …\nDetermines whether we truncate leading whitespaces for …\nhttps://drafts.csswg.org/cssom-view/#scrolling-area\nReturn the resolved value of property for a given …\n…\nKeeps track of whether we’re inside a table, since there …\nIs set to true when we’re rendering the children of …\ntransparent black\nThe natural dimensions of a replaced element, including a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\n…\nUsed to refer to a min-content contribution or max-content …\nUsed to refer to a min-content size or max-content size. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClamps the provided amount to be between the min-content …\nResolved <code>aspect-ratio</code> property with respect to a specific …\n…\n…\nPercentages resolved but not <code>auto</code> margins\nIf the element that this aspect ratio belongs to uses …\nGiven one side length, compute the other one.\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ratio itself (inline over block).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPre-computed sums in each axis\nA table cell, with a colspan and a rowspan.\nAn empty spot in the table. This can happen when there is …\nThis slot is spanned by one or more multiple cells earlier …\nA single table slot. It may be an actual cell, or a …\nA row or column of a table.\nWhether or not this Table is anonymous.\nThe <code>BaseFragmentInfo</code> of this cell.\nThe <code>BaseFragmentInfo</code> of this cell.\nThe <code>BaseFragmentInfo</code> of this <code>TableTrackGroup</code>.\nThe captions for this table.\nNumber of columns that the cell is to span. Must be …\nThe column groups for this table.\nThe columns of this table defined by …\nThe contents of this cell, with its own layout.\nThe contents of this cell, with its own layout.\nCreate a <code>TableSlot::Spanned</code> for the target cell at the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the slot at the given coordinates, if it exists in …\nThe <code>BaseFragmentInfo</code> for this table’s grid. This is …\nThe style of this table’s grid. This is an anonymous …\nThe index of the table row or column group parent in the …\nThe type of this <code>TableTrackGroup</code>.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nAn incoming rowspan is a value indicating that a cell in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not this <code>TableTrack</code> was anonymous, for instance …\nGet the node id of this cell’s <code>BaseFragmentInfo</code>. This is …\nPush a new slot into the last row of this table.\nMerge a TableSlot::Spanned(x, y) with this (only for model …\nFind <code>ResolvedSlotAndLocation</code> of all the slots that cover …\nThe rows groups for this table defined by <code>&lt;tbody&gt;</code>, <code>&lt;thead&gt;</code>…\nThe rows of this table defined by <code>&lt;tr&gt;</code> or …\nNumber of rows that the cell is to span. Zero means that …\nThe size of this table.\nThe content of the slots of this table.\nThe style of this table. These are the properties that …\nThe style of this table cell.\nThe style of this table column.\nThe style of this <code>TableTrackGroup</code>.\nThe table that we are building.\nThe range of tracks in this <code>TableTrackGroup</code>.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nA reference to a slot and its coordinates in the table\n…\nIt’s possible to define more table columns via <code>&lt;colgroup&gt;</code>…\nThe <code>TableBuilder</code> for this <code>TableBuilderTraversal</code>. This is …\nWhen not in the process of filling a cell, make sure any …\nThe index of the current row group, if there is one.\nThe value of the <code>TextDecorationLine</code> to use, either for the …\nTurn all rowspan=0 rows into the real value to avoid …\nDo https://drafts.csswg.org/css-tables/#missing-cells-fixup…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhttps://html.spec.whatwg.org/multipage/#forming-a-table\n…\nAn incoming rowspan is a value indicating that a cell in a …\nThe <code>NodeAndStyleInfo</code> of this table row, which we use to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReorder the first <code>&lt;thead&gt;</code> and <code>&lt;tbody&gt;</code> to be the first and …\nThe table that we are building.\nThe <code>TextDecorationLine</code> to use for all children of this row.\nA result of a final or speculative layout of a single cell …\nA calculated collapsed border.\nThe calculated collapsed borders.\nInformation stored during the layout of columns.\nInformation stored during the layout of rows.\nA helper struct that performs the layout of the box tree …\nThe table width minus the total horizontal border spacing …\nAfter doing layout of table rows, calculate final row size …\nInformation about collapsed borders.\nThe min and max inline offsets of each table column\nCompute CAPMIN: https://drafts.csswg.org/css-tables/#capmin\nThis is an implementation of <em>Computing Cell Measures</em> from …\nThis is an implementation of <em>Computing Column Measures</em> from\nCompute the GRIDMIN and GRIDMAX.\nGiven computed row sizes, compute the final block size of …\nCompute the constrainedness of every column in the table.\nAn implementation of the same extra block size …\nThis is an implementation of <em>Distributing excess width to </em>…\nDistribute width to columns, performing step 2.4 of table …\nDo the first layout of a table row, after laying out the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the cell has no in-flow or out-of-flow contents, …\nWhether the cell is considered empty for the purpose of …\nLay out the table (grid and captions) of this <code>TableLayout</code> …\nThis is an implementation of <em>Row layout (first pass)</em> from …\nLay out the grid portion of this <code>TableLayout</code> into …\nThe block size of this laid out cell including its border …\nThe accumulated baseline of each row, relative to the top …\nThe min and max block offsets of each table row.\nThe rect of the full table, not counting for borders, …\nThe rect of the full table, not counting for borders, …\nThe calculated width of the table, including space for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")