searchState.loadedDescShard("codespan_reporting", 0, "Diagnostic reporting support for the codespan crate.\nDiagnostic data structures.\nSource file support for diagnostic reporting.\nTerminal back-end for emitting diagnostics.\nAn unexpected bug.\nRepresents a diagnostic message that can provide …\nAn error.\nA help message.\nA label describing an underlined region of code associated …\nA note.\nLabels that describe the primary cause of a diagnostic.\nLabels that provide additional context for a diagnostic.\nA severity level for diagnostic messages.\nA warning.\nCreate a new diagnostic with a severity of <code>Severity::Bug</code>.\nAn optional code that identifies this diagnostic.\nCreate a new diagnostic with a severity of <code>Severity::Error</code>.\nThe file that we are labelling.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new diagnostic with a severity of <code>Severity::Help</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSource labels that describe the cause of the diagnostic. …\nAn optional message to provide some additional information …\nThe main message associated with this diagnostic.\nCreate a new label.\nCreate a new diagnostic.\nCreate a new diagnostic with a severity of <code>Severity::Note</code>.\nNotes that are associated with the primary cause of the …\nCreate a new label with a style of <code>LabelStyle::Primary</code>.\nThe range in bytes we are going to include in the final …\nCreate a new label with a style of <code>LabelStyle::Secondary</code>.\nThe overall severity of the diagnostic\nThe style of the label.\nWe want bugs to be the maximum severity, errors next, etc…\nCreate a new diagnostic with a severity of …\nSet the error code of the diagnostic.\nAdd some labels to the diagnostic.\nAdd a message to the diagnostic.\nSet the message of the diagnostic.\nAdd some notes to the diagnostic.\nThe file is present and contains the specified line index, …\nAn enum representing an error that happened while looking …\nA unique identifier for files in the file provider. This …\nA required file is not in the file database.\nA minimal interface for accessing source files when …\nThe file is present, but does not contain the specified …\nThe given index is contained in the file, but is not a …\nThere was a error while doing IO.\nThe file is present, but does not contain the specified …\nA user-facing location in a source file.\nThe user-facing name of a file, to be displayed in …\nA file database that contains a single source file.\nA file database that can store multiple source files.\nThe source code of a file.\nAdd a file to the database, returning the handle that can …\nThe column index at the given byte index in the source …\nThe user-facing column number at the given line index and …\nThe user-facing column number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the file corresponding to the given id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe index of the line at the given byte index. If the byte …\nThe user-facing line number at the given line index. It is …\nThe user-facing line number.\nThe byte range of line in the source of the file.\nReturn the starting byte index of the line with the …\nReturn the starting byte index of each line in the source …\nThe starting byte indices in the source code.\nConvenience method for returning line and column number at …\nThe user-facing name of a file.\nReturn the name of the file.\nThe name of the file.\nCreate a new source file.\nCreate a new files database.\nThe source code of a file.\nReturn the source of the file.\nThe source code of the file.\nCharacters to use when rendering the diagnostic.\nA command line argument that configures the coloring of …\nConfigures how a diagnostic is rendered.\nThe display style to use when rendering diagnostics.\nOutput a condensed diagnostic, with a line number, …\nOutput a richly formatted diagnostic, with source code …\nOutput a short diagnostic, with a line number, severity, …\nStyles to use when rendering the diagnostic.\nAllowed values the argument.\nCharacters to use when rendering the diagnostic.\nThe display style to use when rendering diagnostics. …\nEmit a diagnostic using the given writer, context, config, …\nThe minimum number of lines to be shown before the line on …\nReturns the argument unchanged.\nThe style to use when rendering bug headers. Defaults to …\nThe style to use when rendering error headers. Defaults to …\nThe style to use when rendering help headers. Defaults to …\nThe style to use when the main diagnostic message. …\nThe style to use when rendering note headers. Defaults to …\nThe style to use when rendering warning headers. Defaults …\nCalls <code>U::from(self)</code>.\nThe style to use when rendering the line numbers. Defaults …\nThe character to use when marking the bottom of a …\nThe character to use for the bottom-left corner of a …\nThe character to use for the left of a multi-line label. …\nThe character to use for marking the end of a multi-line …\nThe character to use for marking the start of a multi-line …\nThe character to use for marking the end of a multi-line …\nThe character to use for marking the start of a multi-line …\nThe character to use for the top of a multi-line label. …\nThe character to use for the top-left corner of a …\nThe style to use when rendering the note bullets. Defaults …\nThe character to use for the note bullet. Defaults to: <code>&#39;=&#39;</code>.\nThe character to use for the left of a pointer underneath …\nThe style to use when rendering bug labels. Defaults to …\nThe style to use when rendering error labels. Defaults to …\nThe style to use when rendering help labels. Defaults to …\nThe style to use when rendering note labels. Defaults to …\nThe style to use when rendering warning labels. Defaults …\nThe style to use when rendering secondary labels. Defaults …\nThe character to use for marking a single-line primary …\nThe character to use for marking a single-line secondary …\nThe characters to use for the top-left border of the …\nThe style to use when rendering the source code borders. …\nThe character to use for the left border of the source. …\nThe character to use for the left border break of the …\nThe minimum number of lines to be shown after the line on …\nStyles to use when rendering the diagnostic.\nColumn width of tabs. Defaults to: <code>4</code>.\nCharacters to use when rendering the diagnostic.\nConfigures how a diagnostic is rendered.\nThe display style to use when rendering diagnostics.\nOutput a condensed diagnostic, with a line number, …\nOutput a richly formatted diagnostic, with source code …\nOutput a short diagnostic, with a line number, severity, …\nStyles to use when rendering the diagnostic.\nA character set that only uses ASCII characters.\nA character set that uses Unicode box drawing characters.\nCharacters to use when rendering the diagnostic.\nThe display style to use when rendering diagnostics. …\nThe minimum number of lines to be shown before the line on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe style used to mark a header at a given severity.\nThe style to use when rendering bug headers. Defaults to …\nThe style to use when rendering error headers. Defaults to …\nThe style to use when rendering help headers. Defaults to …\nThe style to use when the main diagnostic message. …\nThe style to use when rendering note headers. Defaults to …\nThe style to use when rendering warning headers. Defaults …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe style used to mark a primary or secondary label at a …\nThe style to use when rendering the line numbers. Defaults …\nThe character to use when marking the bottom of a …\nThe character to use for the bottom-left corner of a …\nThe character to use for the left of a multi-line label. …\nThe character to use for marking the end of a multi-line …\nThe character to use for marking the start of a multi-line …\nThe character to use for marking the end of a multi-line …\nThe character to use for marking the start of a multi-line …\nThe character to use for the top of a multi-line label. …\nThe character to use for the top-left corner of a …\nThe style to use when rendering the note bullets. Defaults …\nThe character to use for the note bullet. Defaults to: <code>&#39;=&#39;</code>.\nThe character to use for the left of a pointer underneath …\nThe style to use when rendering bug labels. Defaults to …\nThe style to use when rendering error labels. Defaults to …\nThe style to use when rendering help labels. Defaults to …\nThe style to use when rendering note labels. Defaults to …\nThe style to use when rendering warning labels. Defaults …\nThe style to use when rendering secondary labels. Defaults …\nThe character to use for marking a single-line primary …\nThe character to use for marking a single-line secondary …\nThe characters to use for the top-left border of the …\nThe style to use when rendering the source code borders. …\nThe character to use for the left border of the source. …\nThe character to use for the left border break of the …\nThe minimum number of lines to be shown after the line on …\nStyles to use when rendering the diagnostic.\nColumn width of tabs. Defaults to: <code>4</code>.\nMulti-line label bottom, with an optional message. The …\nLeft vertical labels for multi-line labels.\nThe ‘location focus’ of a source code snippet.\nA multi-line label to render.\nA renderer of display list entries.\nSingle-line label, with an optional message.\nMulti-line label top. The contained value indicates where …\nThe left-hand border of a source line.\nThe broken left-hand border of a source line.\nWrite vertical lines pointing to carets.\nAdds tab-stop aware unicode-width computations to an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn an iterator that yields the labels that require …\nWrites an inner gutter, with the left lines if necessary.\nWrites an empty gutter space, or continues an underline …\nWrites an empty gutter space.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if two ranges overlap\nMulti-line label bottom, with a message.\nThe bottom left of a multi-line label.\nThe left of a multi-line label.\nMulti-line label top.\nThe top-left of a multi-line label.\nFor prioritizing primary labels over secondary labels when …\nThe location.\nThe user-facing name of the file.\nConstruct a renderer from the given writer and config.\nThe outer gutter of a source line.\nThe outer gutter of a source line, with line number.\nEmpty line.\nDiagnostic header, with severity, code, and message.\nA broken source line, for labeling skipped sections of …\nAn empty source line, for providing additional whitespace …\nAdditional notes.\nA line of source code.\nTop left border and locus.\nLocation focus.\nOutput a richly formatted diagnostic, with source code …\nOutput a short diagnostic, with a line number, severity, …\nCount the number of decimal digits in <code>n</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")