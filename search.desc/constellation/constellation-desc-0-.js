searchState.loadedDescShard("constellation", 0, "The <code>Constellation</code> itself. In the servo browser, there is …\nA logger directed at the constellation from the compositor\nThe constellation uses logging to perform crash reporting. …\nState needed to construct a constellation.\nCreating a new pipeline may require creating a new event …\nPipeline ID of the active media session.\nA channel for the constellation to receiver messages from …\nA channel for the background hang monitor to send messages …\nChannels to control all background-hang monitors. TODO: …\nA handle to register components for hang monitoring. None …\nAn IPC channel for the constellation to send messages to …\nA channel to the bluetooth thread.\nA map of origin to a map of channel-name to a list of …\nA map of broadcast routers to their IPC sender.\nThe Id counter for BrowsingContextGroup.\nA user agent holds a a set of browsing context groups.\nThe set of all the browsing contexts in the browser.\nA channel through which messages can be sent to the canvas …\nA channel (the implementation of which is port-specific) …\nA channel through which messages can be sent to the …\nA channel for the constellation to receive messages from …\nThe <code>Constellation</code>, Servo’s Grand Central Station\nA channel to the constellation\nOur content process sandbox profile on Linux. As …\nA channel for the constellation to send messages to the …\nA channel to the developer tools, if applicable.\nDocument states for loaded pipelines (used only when …\nA channel through which messages can be sent to the …\nA channel through which messages can be sent to the …\nIf set with –disable-canvas-aa, disable antialiasing on …\nThis module contains the <code>EventLoop</code> type, which is the …\nEntry point to create and get channels to a GLPlayerThread.\nHave we seen any warnings? Hopefully always empty! The …\nIf True, exits on thread failure instead of displaying …\nA factory for creating layouts. This allows customizing …\nA channel for the constellation to receive messages from …\nAn IPC channel for layout to send messages to the …\nA channel for the constellation to send messages to the …\nA channel to the memory profiler thread.\nA map of router-id to ipc-sender, to route messages to …\nA map of message-port Id to info.\nAn ipc-sender/threaded-receiver pair to facilitate …\nThe listener that encapsulates all state for an …\nA channel for the constellation to receive messages from …\nA channel for network listener to send messages to the …\nPipeline IDs are namespaced in order to avoid name …\nNavigation requests from script awaiting approval from the …\nWhen a navigation is performed, we do not immediately …\nPhantom data that keeps the Rust type system happy.\nThe set of all the pipelines in the browser.  (See the …\nApplication window’s GL Context for Media player\nApplication window’s GL Context for Media player\nBitmask which indicates which combination of mouse buttons …\nChannels for the constellation to send messages to the …\nA channel to the resource thread.\nChannels for the constellation to send messages to the …\nA channel to the resource thread.\nThe random number generator and probability for closing …\nA channel for a pipeline to schedule timer events.\nThe receiver to which the IPC requests from scheduler_chan …\nA channel for the constellation to receive messages from …\nAn IPC channel for script threads to send messages to the …\nA channel to the constellation\nAre we shutting down?\nA map of origin to sender to a Service worker manager.\nAn IPC channel for Service Worker Manager threads to send …\nA channel for the constellation to receive messages from …\nA channel for the constellation to send messages to the …\nA proxy to the <code>SystemFontService</code> which manages the list of …\nA channel for the constellation to send messages to the …\nA channel to the time profiler thread.\nThe logic and data behing scheduling timer events.\nUser agent string to report in network requests.\nUser agent string to report in network requests.\nBits of state used to interact with the webdriver …\nEntry point to create and get channels to a WebGLThread.\nEntry point to create and get channels to a WebGLThread.\nWebrender API.\nA single WebRender document the constellation operates on.\nWebrender document ID.\nWebrender external images\nWebrender related objects required by WebGPU threads\nBookkeeping data for all webviews in the constellation.\nThe XR device registry\nThe XR device registry\nThe size of the top-level window.\nAn iterator over browsing contexts, returning all …\nThe constellation’s view of a browsing context. Each …\nAn iterator over browsing contexts, returning the …\nBecause a browsing context is only constructed once the …\nThe browsing context group id where the top-level of this …\nThe set of all browsing contexts.\nThe set of all browsing contexts.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe browsing context id.\nWhether this browsing context inherits a secure context.\nWhether this browsing context inherits a secure context.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this browsing context is in private browsing mode.\nWhether this browsing context is in private browsing mode.\nIs this a top-level browsing context?\nCreate a new browsing context. Note this just creates the …\nThe parent pipeline that contains this browsing context. …\nThe parent pipeline that contains this browsing context. …\nThe pipeline for the current session history entry.\nAll the pipelines that have been presented or will be …\nThe set of all pipelines.  We use this to find the active …\nThe set of all pipelines.  We use this to find the …\nThe size of the frame.\nThe browsing contexts still to iterate over.\nThe browsing contexts still to iterate over.\nWhether this browsing context should be throttled, using …\nWhether this browsing context should be throttled, using …\nThe top-level browsing context ancestor\nA browsing context group.\nWhile a completion of a transfer was in progress, the port …\nA global has requested the transfer to be completed, it’…\nWhile a completion failed, another global requested to …\nThe <code>Constellation</code> itself. In the servo browser, there is …\nThe entangled port has been removed while the port was …\nWhen we are exiting a pipeline, we can either force …\nState needed to construct a constellation.\nThe port is currently managed by a given global, …\nInfo related to a message-port tracked by the …\nWhen we are running reftests, we save an image to compare …\nThe port is currently in-transfer, and incoming tasks …\nThe state used by MessagePortInfo to represent the various …\nThe number of warnings to include in each crash report.\nData needed for webdriver\nServo supports multiple top-level browsing contexts or …\nWebrender related objects required by WebGPU threads\nPipeline ID of the active media session.\nGet an iterator for the browsing contexts in a subtree.\nA channel for the constellation to receiver messages from …\nA channel for the background hang monitor to send messages …\nChannels to control all background-hang monitors. TODO: …\nA handle to register components for hang monitoring. None …\nAn IPC channel for the constellation to send messages to …\nA channel to the bluetooth thread.\nA map of origin to a map of channel-name to a list of …\nA map of broadcast routers to their IPC sender.\nThe Id counter for BrowsingContextGroup.\nA user agent holds a a set of browsing context groups.\nThe set of all the browsing contexts in the browser.\nA channel through which messages can be sent to the canvas …\nCheck the origin of a message against that of the pipeline …\nA channel (the implementation of which is port-specific) …\nA channel through which messages can be sent to the …\nA channel for the constellation to receive messages from …\nA channel for the constellation to send messages to the …\nA channel to the developer tools, if applicable.\nDocument states for loaded pipelines (used only when …\nA channel through which messages can be sent to the …\nA channel through which messages can be sent to the …\nIf set with –disable-canvas-aa, disable antialiasing on …\nThe id of the entangled port, if any.\nThe set of all event loops in this BrowsingContextGroup. …\nThe currently focused browsing context in this webview for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an iterator for the fully active browsing contexts in …\nGet an iterator for the fully active browsing contexts in …\nGet the current activity of a pipeline.\nEntry point to create and get channels to a GLPlayerThread.\nCalled when the window exits from fullscreen mode\nHandle GamepadEvents from the embedder and forward them to …\nChecks the state of all script and layout pipelines to see …\nNote a new channel-name relevant to a given broadcast …\nAdd a new broadcast router.\nRemove a channel-name for a given broadcast router.\nRemove a broadcast router.\nHandles loading pages, navigation, and granting access to …\nBroadcast a message via routers in various event-loops.\nhttps://w3c.github.io/ServiceWorker/#schedule-job-algorithm\nCalled when the window is resized.\nHave we seen any warnings? Hopefully always empty! The …\nIf True, exits on thread failure instead of displaying …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA factory for creating layouts. This allows customizing …\nA channel for the constellation to receive messages from …\nAn IPC channel for layout to send messages to the …\nA channel for the constellation to send messages to the …\nA channel to the memory profiler thread.\nA map of router-id to ipc-sender, to route messages to …\nA map of message-port Id to info.\nAn ipc-sender/threaded-receiver pair to facilitate …\nA channel for the constellation to receive messages from …\nA channel for network listener to send messages to the …\nCreate a new browsing context and update the internal …\nHelper function for creating a pipeline\nGenerate a new pipeline id namespace.\nPipeline IDs are namespaced in order to avoid name …\nNavigation requests from script awaiting approval from the …\nWhen a navigation is performed, we do not immediately …\nPhantom data that keeps the Rust type system happy.\nThe set of all the pipelines in the browser.  (See the …\nApplication window’s GL Context for Media player\nApplication window’s GL Context for Media player\nBitmask which indicates which combination of mouse buttons …\nChannels for the constellation to send messages to the …\nA channel to the resource thread.\nChannels for the constellation to send messages to the …\nA channel to the resource thread.\nThe random number generator and probability for closing …\nHandle updating the size of a browsing context. This …\nRoute an ipc receiver to an crossbeam receiver, preserving …\nThe main event loop for the constellation.\nSchedule a navigation(via load_url). 1: Ask the embedder …\nA channel for a pipeline to schedule timer events.\nThe receiver to which the IPC requests from scheduler_chan …\nA channel for the constellation to receive messages from …\nAn IPC channel for script threads to send messages to the …\nThe joint session history for this webview.\nSet the current activity of a pipeline.\nAre we shutting down?\nCreate a new constellation thread.\nThe current state of the messageport.\nA map of origin to sender to a Service worker manager.\nAn IPC channel for Service Worker Manager threads to send …\nA channel for the constellation to receive messages from …\nA channel for the constellation to send messages to the …\nA proxy to the <code>SystemFontService</code> which manages the list of …\nA channel for the constellation to send messages to the …\nA channel to the time profiler thread.\nThe logic and data behing scheduling timer events.\nA browsing context group holds a set of top-level browsing …\nUpdate the current activity of a pipeline.\nSend the frame tree for the given webview to the …\nUser agent string to report in network requests.\nUser agent string to report in network requests.\nBits of state used to interact with the webdriver …\nEntry point to create and get channels to a WebGLThread.\nEntry point to create and get channels to a WebGLThread.\nThe set of all WebGPU channels in this …\nWebrender API.\nWebrender API.\nA single WebRender document the constellation operates on.\nWebrender document ID.\nList of Webrender external images\nWebrender external images\nWebrender related objects required by WebGPU threads\nBookkeeping data for all webviews in the constellation.\nThe XR device registry\nThe XR device registry\nWebGPU data that supplied to Webrender for rendering\nThe size of the top-level window.\nhttps://html.spec.whatwg.org/multipage/#event-loop\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new event loop from the channel to its script …\nSend a message to the event loop.\nThe underlying channel to the script thread.\nA logger directed at the constellation from the compositor\nThe constellation uses logging to perform crash reporting. …\nA channel to the constellation\nThe maximum log level the constellation logger is …\nThe maximum log level the constellation logger is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRust uses <code>Record</code> for storing logging, but servo converts …\nCreate a new constellation logger.\nCreate a new constellation logger.\nA channel to the constellation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitial setup data needed to construct a pipeline.\nA <code>Pipeline</code> is the constellation’s view of a <code>Window</code>. Each …\nCreating a new pipeline may require creating a new event …\nAdd a new child browsing context.\nWhether this pipeline is currently running animations. …\nA channel for the background hang monitor to send messages …\nA handle to register components for hang monitoring. None …\nA channel to the bluetooth thread.\nThe ID of the browsing context that contains this Pipeline.\nThe ID of the browsing context that contains this Pipeline.\nThe child browsing contexts of this pipeline (these are …\nHas this pipeline received a notification that it is …\nA channel to the compositor.\nA channel to the compositor.\nA channel to the developer tools, if applicable.\nThe event loop handling this pipeline.\nThe event loop to run in, if applicable.\nA normal exit of the pipeline, which waits for the …\nA forced exit of the shutdown, which does not wait for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe active history state for this pipeline.\nThe history states owned by this pipeline.\nThe ID of the pipeline.\nThe ID of the pipeline to create.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe last compositor <code>Epoch</code> that was laid out in this …\nA fatory for creating layouts to be used by the …\nA channel for the layout to send messages to the …\nThe Load Data used to create this pipeline.\nInformation about the page to load.\nA channel to the memory profiler thread.\nA sender to request pipeline namespace ids.\nCreates a new <code>Pipeline</code>, after the script has been spawned.\nThe ID of the parent pipeline and frame type, if any. If …\nThe ID of the pipeline namespace for this script thread.\nApplication window’s GL Context for Media player\nWhether the browsing context in which pipeline is embedded …\nRemove a child browsing context.\nChannels to the resource-related threads.\nA channel to schedule timer events.\nA channel to the associated constellation.\nNotify this pipeline of its activity.\nSet whether to make pipeline use less resources, by …\nPossibly starts a script thread, in a new process if …\nA channel to the service worker manager thread\nA proxy to the system font service, responsible for …\nA channel to the time profiler thread.\nThe title of this pipeline’s document.\nThe compositor’s view of a pipeline.\nThe ID of the top-level browsing context that contains …\nThe ID of the top-level browsing context that contains …\nThe most recently loaded URL in this pipeline. Note that …\nUser agent string to report in network requests.\nA channel to the WebGL thread.\nThe ID of the document processed by this script thread.\nThe XR device registry\nInformation about the initial window size.\nA trait to unify commands launched as multiprocess with or …\nA command line argument.\nOur content process sandbox profile on Linux. As …\nAn environment variable.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConceptually, this is glue to start an agent-cluster for a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStart the agent-cluster in it’s own process.\nStart the agent-cluster.\nRepresents a diff where the active pipeline of an entry …\nRepresents the joint session history …\nRepresents a pipeline or discarded pipeline in a history …\nRepresents a pipeline that has not been discarded\nRepresents a diff where the active state of a pipeline …\nRepresents a pending change in a session history, that …\nRepresents a the difference between two adjacent session …\nRepresents a pipeline that has been discarded and must be …\nReturns the new pipeline id if that pipeline is still …\nReturns the old pipeline id if that pipeline is still …\nThe browsing context to change.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDiffs used to traverse to future entries. Oldest entries …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHolds data for not-yet constructed browsing contexts that …\nThe pipeline for the document being loaded.\nDiffs used to traverse to past entries. Oldest entries are …\nThe old pipeline that the new pipeline should replace.\nReplaces all occurances of the replaced pipeline with a …\nThe top-level browsing context ancestor.\nThe size of the viewport for the browsing context.\nThe browsing context whose pipeline changed\nThe new history state id.\nThe next pipeline (used when traversing into the future)\nThe new url\nThe old history state id.\nThe previous pipeline (used when traversing into the past)\nThe old url\nThe pipeline whose history state changed.\nDispatch any events whose due time is past, and return a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle an incoming timer request.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the log target for an event, as a static string.\nLog an event from layout at trace level.\nLog an event from compositor at trace level.\nLog an event from script at trace level.\nThe order in which they were focused, latest last.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether the latest webview in focus order is currently …\nOur top-level browsing contexts. In the WebRender scene, …")