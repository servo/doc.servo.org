searchState.loadedDescShard("serde_derive", 0, "This crate provides Serde’s two derive macros.\nContains a variant name\nContains a variant name\nContains a variant name and an intermediate deserializer …\nContains a variant name and an intermediate deserializer …\nContains a variant name and an intermediate deserializer …\nLifetimes borrowed from the deserializer. These will …\nGenerates enum and its <code>Deserialize</code> implementation that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerics including any explicit and inferred bounds for …\nTrue if there is any field with a <code>#[serde(flatten)]</code> …\nAt least one field has a serde(getter) attribute, implying …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType has a repr(packed) attribute.\nName of the type the <code>derive</code> is on.\nPath to the type the impl is for. Either a single <code>Ident</code> …\nSame as <code>this_type</code> but using <code>::&lt;T&gt;</code> for generic parameters …\nType name to use in error messages and <code>&amp;&#39;static str</code> …\nThis function wraps the expression in …\nTokens that can be used inside a block. The surrounding …\nInterpolate a fragment in place of an expression. This …\nTokens that can be used as an expression.\nInterpolate a fragment as the value part of a <code>match</code> …\nInterpolate a fragment as the statements of a block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA Serde ast, parsed from the Syn ast and ready to generate …\nCode to convert the Rust-styled field/variant (e.g. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA source data structure annotated with <code>#[derive(Serialize)]</code>…\nThe fields of a struct or enum.\nA field of a struct.\nOne unnamed field.\nNamed fields.\nMany unnamed fields.\nNo fields.\nA variant of an enum.\nAttributes on the structure, parsed for Serde.\nThe contents of the struct or enum.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the raw Syn ast into a parsed container object, …\nAny generics on the struct or enum.\nThe struct or enum name (without generics).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOriginal input.\n<code>#[serde(tag = &quot;t&quot;, content = &quot;c&quot;)]</code>\nRepresents struct or enum attribute information.\nRepresents the default to use for a field when …\nThe default is given by <code>std::default::Default::default()</code>.\nThe default.\nRepresents field attribute information\nThis enum represents the fields of a struct. All of the …\nWhether this enum represents the fields of a struct or the …\n<code>#[serde(tag = &quot;type&quot;)]</code>\nIt does not.\n<code>#[serde(untagged)]</code>\nField must always be specified because it does not have a …\nThe default is given by this function.\nStyles of representing an enum.\nRepresents variant attribute information\nThis enum represents the variants of an enum. All of the …\nReturn the container name for the container when …\nError message generated when type can’t be deserialized. …\nError message generated when type can’t be deserialized\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtract out the <code>#[serde(...)]</code> attributes from an item.\nExtract out the <code>#[serde(...)]</code> attributes from a struct …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>RenameAllRules</code> with the individual rules of …\nReturn the container name for the container when …\nRename direct children to “camelCase” style.\nRename direct children to “kebab-case” style.\nRename direct children to “lowercase” style.\nDon’t apply a default rename rule.\nRename direct children to “PascalCase” style, as …\nThe different possible ways to change case of fields in a …\nRename direct children to “SCREAMING-KEBAB-CASE” style.\nRename direct children to “SCREAMING_SNAKE_CASE” …\nRename direct children to “snake_case” style, as …\nRename direct children to “UPPERCASE” style.\nApply a renaming rule to a struct field, returning the …\nApply a renaming rule to an enum variant, returning the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>RenameRule</code> if it is not <code>None</code>, <code>rule_b</code> otherwise.\nA type to collect errors together and format them.\nConsume this object, producing a formatted error string if …\nAdd an error to the context object with a tokenenizable …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new context object.\nAdd one of Syn’s parse errors.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerics including any explicit and inferred bounds for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType has a repr(packed) attribute.\nType has a <code>serde(remote = &quot;...&quot;)</code> attribute.\nVariable holding the value being serialized. Either <code>self</code> …\nPath to the type the impl is for. Either a single <code>Ident</code> …\nSame as <code>this_type</code> but using <code>::&lt;T&gt;</code> for generic parameters …\nType name to use in error messages and <code>&amp;&#39;static str</code> …")