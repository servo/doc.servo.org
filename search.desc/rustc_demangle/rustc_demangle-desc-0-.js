searchState.loadedDescShard("rustc_demangle", 0, "Demangle Rust compiler symbol names.\nRepresentation of a demangled symbol name.\nError returned from the <code>try_demangle</code> function below when …\nReturns the underlying string that’s being demangled.\nDe-mangles a Rust symbol into a more readable version\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe same as <code>demangle</code>, except return an <code>Err</code> if the string …\nRepresentation of a demangled symbol name.\nDe-mangles a Rust symbol into a more readable version\nThe number of ::-separated elements in the original name.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresentation of a demangled symbol name.\nSequence of lowercase hexadecimal nibbles (<code>0-9a-f</code>), used …\nSymbol doesn’t match the expected <code>v0</code> grammar.\nParsing the symbol crossed the recursion limit (see …\nASCII part of the identifier.\nCumulative number of lifetimes bound by <code>for&lt;...&gt;</code> binders (…\nDe-mangles a Rust symbol into a more readable version\nEat the given character from the parser, returning <code>false</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOptionally enter a binder (‘G’) for late-bound …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMark the parser as errored (with <code>ParseError::Invalid</code>), …\nSnippet to print when the error is initially encountered.\nThe output formatter to demangle to, or <code>None</code> while …\nCall a parser method (if the parser hasn’t errored yet), …\nThe input parser to demangle from, or <code>Err</code> if any (parse) …\nOutput the given value to <code>self.out</code> (using <code>fmt::Display</code> …\nPrint the target of a backref, using the given closure. …\nPrint the lifetime according to the previously decoded …\nA trait in a trait object may have some “existential …\nOutput the given <code>char</code>s (escaped using <code>char::escape_debug</code>), …\nPrint list elements using the given closure and separator, …\nPunycode insertion codes for Unicode codepoints, if any.\nDecode punycode as insertion positions and characters and …\nSkip printing (i.e. <code>self.out</code> will be <code>None</code>) for the …\nDecode a UTF-8 byte sequence (with each byte using a pair …\nDecode an integer value (with the “most significant …\nAttempt to decode punycode on the stack (allocation-free), …")