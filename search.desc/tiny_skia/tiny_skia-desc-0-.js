searchState.loadedDescShard("tiny_skia", 0, "<code>tiny-skia</code> is a tiny Skia subset ported to Rust.\nRepresents fully opaque Alpha value.\nRepresents fully transparent Alpha value.\nRepresents fully opaque AlphaU8 value.\nRepresents fully transparent AlphaU8 value.\nTransfers only the Alpha channel from <code>Pixmap</code> to <code>Mask</code>.\nNumber of bytes per pixel.\nConnects outside edges.\nBicubic. High quality, but slow.\nBilinear.\nA blending mode.\nNo stroke extension.\nReplaces destination with zero: fully transparent.\nAn RGBA color value, holding four floating point …\nHue and saturation of source with luminosity of …\nDarken destination to reflect source.\nBrighten destination to reflect source.\nA 32-bit RGBA color value.\nDarker of source and destination.\nPreserves destination.\nDestination inside source blended with source.\nDestination trimmed by source.\nDestination trimmed outside source.\nDestination over source.\nSubtract darker from lighter with higher contrast.\nSpecifies that “inside” is computed by an odd number …\nSubtract darker from lighter with lower contrast.\nA path filling rule.\nControls how much filtering to be done when transforming …\nA gradient point.\nMultiply or screen, depending on source.\nHue of source with saturation and luminosity of …\nAn integer rectangle.\nAn integer size.\nAn integer length that is guarantee to be &gt; 0\nLighter of source and destination.\nDraws at the beginning and end of an open path contour.\nSpecifies how corners are drawn when a shape is stroked.\nA linear gradient shader.\nA linear gradient shader.\nTransfers RGB channels as luminance from <code>Pixmap</code> to <code>Mask</code>.\nLuminosity of source with hue and saturation of …\nA mask.\nA mask type.\nExtends to miter limit, then switches to bevel.\nExtends to miter limit, then clips the corner.\nProduct of premultiplied colors; darkens destination.\nMultiply source with destination, darkening image.\nNearest-neighbor. Low quality, but fastest.\nA rectangle defined by left, top, right and bottom edges.\nMultiply or screen, depending on destination.\nReplicate the edge color if the shader draws outside of its\nControls how a shape should be painted.\nA Bezier path.\nA path builder.\nA path segment.\nA path segments iterator.\nA path stroker.\nA pattern shader.\nA pattern shader.\nA container that owns premultiplied RGBA pixels.\nA container that references mutable premultiplied RGBA …\nControls how a pixmap should be blended.\nA container that references premultiplied RGBA pixels.\nSum of colors.\nA point.\nA premultiplied RGBA color value, holding four floating …\nA 32-bit premultiplied RGBA color value.\nA radial gradient shader.\nA radial gradient shader.\nA rectangle defined by left, top, right and bottom edges.\nRepeat the shader’s image horizontally and vertically, …\nRepeat the shader’s image horizontally and vertically.\nAdds circle.\nAdds circle.\nSaturation of source with hue and luminosity of …\nMultiply inverse of pixels, inverting result; brightens …\nA shader specifies the source color(s) for what is being …\nA size.\nLighten or darken, depending on source.\nA solid color shader.\nReplaces destination.\nSource inside destination blended with destination.\nSource trimmed inside destination.\nSource trimmed outside destination.\nSource over destination.\nA shader spreading mode.\nAdds square.\nStroke properties.\nA stroke dashing properties.\nAn affine transformation matrix.\nSpecifies that “inside” is computed by a non-zero sum …\nEach of source and destination trimmed outside the other.\nEnables anti-aliased painting.\nApplies a bounding box transform.\nApplies a bounding box transform.\nPixmap blending mode.\nPaint blending mode.\nReturns rect’s bottom edge.\nReturns the bottom edge.\nReturns the bottom edge.\nReturns the bounds of the path’s points.\nClears the path and returns a <code>PathBuilder</code> that will reuse …\nReset the builder.\nCloses the current contour.\nComputes a resolution scale.\nCalculates path’s tight bounds.\nChecks that the rect is completely includes <code>other</code> Rect.\nReturns the cross product of vector and vec.\nAdds a cubic curve from the last point to <code>x</code>, <code>y</code>.\nReturns the current verb.\nConverts the current path into a dashed one.\nA stroke dashing properties.\nReturns width and height as a tuple.\nReturns the Euclidean distance from origin.\nReturns the dot product of two points.\nExpands current size to specified size.\nFinishes the builder and returns a <code>Path</code>.\nForces the high quality/precision rendering pipeline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>Rect</code> into a bounding box <code>Transform</code>.\nCreates a new <code>Path</code> from a circle.\nCreates a new <code>Point</code> from <code>f32x2</code>.\nCreates a new <code>IntRect</code>.\nCreates new <code>Rect</code>.\nCreates new <code>NonZeroRect</code>.\nCreates a new <code>Path</code> from an oval.\nCreates a Rect from Point array.\nCreates a new <code>Path</code> from <code>Rect</code>.\nCreates a new rotating <code>Transform</code>.\nCreates a new rotating <code>Transform</code> at the specified position.\nCreates a new <code>Transform</code>.\nCreates a new scaling <code>Transform</code>.\nCreates a new skewing <code>Transform</code>.\nCreates a new translating <code>Transform</code>.\nCreates a new <code>IntSize</code> from width and height.\nCreates a new <code>Size</code> from width and height.\nCreates a new <code>Point</code>.\nCreates a new <code>IntRect</code>.\nCreates new <code>Rect</code>.\nCreates new <code>NonZeroRect</code>.\nReturns transform’s scale part.\nChecks that transform contains a scale part.\nChecks that transform contains a skew part.\nChecks that transform contains a translate part.\nReturns rect’s height.\nReturns rect’s height.\nReturns rect’s height.\nReturns height.\nReturns height.\nCreates an identity transform.\nInsets the rectangle.\nInsets the rectangle by the specified offset.\nReturns an intersection of two rectangles.\nReturns an intersection of two rectangles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an inverted transform.\nReturn if the path is empty.\nChecks if the builder has any segments added.\nChecks that transform is finite.\nReturns true if both x and y are measurable values.\nChecks that transform is identity.\nChecks that transform is scale-only.\nChecks that transform contains only scale and translate.\nChecks that transform is skew-only.\nChecks that transform is translate-only.\nChecks that transform is finite and has non-zero scale.\nReturns true if x and y are both zero.\nReturns the last point if any.\nReturns rect’s left edge.\nReturns the left edge.\nReturns the left edge.\nReturns the number of segments in the path.\nReturns the current number of segments in the builder.\nReturns the Euclidean distance from origin.\nA stroke line cap.\nA stroke line join.\nAdds a line from the last point.\nOutsets the rectangle.\nTransforms a points using the current transform.\nTransforms a slice of points using the current transform.\nThe limit at which a sharp corner is drawn beveled.\nAdds beginning of a contour.\nCreates a new stroke dashing object.\nCreates a new builder.\nCreates a new PathStroker.\nReturns the next verb.\nScales (fX, fY) so that length() returns one, while …\nPixmap opacity.\nOutsets the rectangle by the specified offset.\nA raster pipeline implementation.\nReturns an internal vector of points.\nPost-concats the current transform.\nPost-rotates the current transform.\nPost-rotates the current transform by the specified …\nPost-scales the current transform.\nPost-translates the current transform.\nPre-concats the current transform.\nPre-rotates the current transform.\nPre-rotates the current transform by the specified …\nPre-scales the current transform.\nPre-translates the current transform.\nAdds a circle contour.\nAdds an oval contour bounded by the provided rectangle.\nAdds a path.\nAdds a rectangle contour.\nAdds a quad curve from the last point to <code>x</code>, <code>y</code>.\nSpecifies how much filtering to be done when transforming …\nReturns rect’s right edge.\nReturns the right edge.\nReturns the right edge.\nConverts into an <code>IntRect</code> by adding 0.5 and discarding the …\nConverts into an <code>IntRect</code> rounding outwards.\nScales Point in-place by scale.\nScales current size by the specified factor.\nScales current size to the specified size.\nScales current size to specified size.\nScales current size to the specified height.\nScales current size to the specified width.\nReturns an iterator over path’s segments.\nSets the auto closing mode. Off by default.\nScales vector so that distanceToOrigin() returns length, …\nSets vector to (x, y) scaled to length, if possible.\nSets vector to (x, y) scaled so length() returns one, and …\nA paint shader.\nReturns rect’s size.\nReturns rect’s size.\nReturns a stoked path.\nStokes the path.\nConverts a <code>Point</code> into a <code>f32x2</code>.\nConverts into <code>IntRect</code>.\nConverts into <code>IntRect</code> at the provided position.\nConverts into <code>IntSize</code>.\nConverts into <code>NonZeroRect</code>.\nConverts the current size to <code>NonZeroRect</code> at provided …\nConverts into <code>Rect</code>.\nConverts into <code>Rect</code>.\nConverts the current size to <code>Rect</code> at provided position.\nConverts into <code>Size</code>.\nReturns rect’s top edge.\nReturns the top edge.\nReturns the top edge.\nReturns a transformed in-place path.\nTransforms the rect using the provided <code>Transform</code>.\nTransforms the rect using the provided <code>Transform</code>.\nTranslates the rect by the specified offset.\nTranslates the rect to the specified position.\nTranslates the rect to the specified position.\nReturns an internal vector of verbs.\nReturns rect’s width.\nReturns rect’s width.\nReturns rect’s width.\nReturns width.\nReturns width.\nA stroke thickness.\nCreates a new builder with a specified capacity.\nReturns rect’s X position.\nReturns rect’s X position.\nReturns rect’s X position.\nReturns rect’s Y position.\nReturns rect’s Y position.\nReturns rect’s Y position.\nCreates a point at 0x0 position.\nSparse array of run-length-encoded alpha (supersampling …\nNo value.\nSome value of type <code>T</code>.\nInsert into the buffer a run starting at (x-offset_x).\nCut (at offset x in the buffer) a run into two shorter …\nBreak the runs in the buffer at offsets x and x+count, …\nReturns 0-255 given 0-256.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the scanline contains only a single run, …\nReinitialize for a new scanline.\nA blending mode.\nReplaces destination with zero: fully transparent.\nHue and saturation of source with luminosity of …\nDarken destination to reflect source.\nBrighten destination to reflect source.\nDarker of source and destination.\nPreserves destination.\nDestination inside source blended with source.\nDestination trimmed by source.\nDestination trimmed outside source.\nDestination over source.\nSubtract darker from lighter with higher contrast.\nSubtract darker from lighter with lower contrast.\nMultiply or screen, depending on source.\nHue of source with saturation and luminosity of …\nLighter of source and destination.\nLuminosity of source with hue and saturation of …\nProduct of premultiplied colors; darkens destination.\nMultiply source with destination, darkening image.\nMultiply or screen, depending on destination.\nSum of colors.\nSaturation of source with hue and luminosity of …\nMultiply inverse of pixels, inverting result; brightens …\nLighten or darken, depending on source.\nReplaces destination.\nSource inside destination blended with destination.\nSource trimmed inside destination.\nSource trimmed outside destination.\nSource over destination.\nEach of source and destination trimmed outside the other.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBlitter is responsible for actually writing pixels into …\nMask is used to describe alpha bitmaps.\nBlits a horizontal run of antialiased pixels.\nBlits a horizontal run of one or more pixels.\nBlits a pattern of pixels defined by a rectangle-clipped …\nBlits a solid rectangle one or more pixels wide.\nBlits a vertical run of pixels with a constant alpha value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents fully opaque Alpha value.\nRepresents fully transparent Alpha value.\nRepresents fully opaque AlphaU8 value.\nRepresents fully transparent AlphaU8 value.\n8-bit type for an alpha value. 255 is 100% opaque, zero is …\nA black color.\nAn RGBA color value, holding four floating point …\nA 32-bit RGBA color value.\nA premultiplied RGBA color value, holding four floating …\nA 32-bit premultiplied RGBA color value.\nA transparent color.\nA transparent color.\nA white color.\nReturns color’s alpha component.\nReturns color’s alpha component.\nReturns color’s alpha component.\nReturns color’s alpha component.\nShifts color’s opacity.\nReturns color’s blue component.\nReturns color’s blue component.\nReturns color’s blue component.\nReturns color’s blue component.\nReturns a demultiplied color.\nReturns a demultiplied color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new color.\nCreates a new premultiplied color.\nCreates a new color from 4 components.\nCreates a new color from 4 components.\nCreates a new color.\nReturns color’s green component.\nReturns color’s green component.\nReturns color’s green component.\nReturns color’s green component.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck that color is opaque.\nCheck that color is opaque.\nCheck that color is opaque.\nConverts into a premultiplied color.\nConverts into a premultiplied color.\nReturn a*b/255, rounding any fractional bits.\nReturns color’s red component.\nReturns color’s red component.\nReturns color’s red component.\nReturns color’s red component.\nSets the alpha component value.\nSets the blue component value.\nSets the green component value.\nSets the red component value.\nConverts into <code>ColorU8</code>.\nConverts into <code>PremultipliedColorU8</code>.\nWe store 1&lt;&lt;shift in a (signed) byte, so its maximum value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLightweight variant of PathIter that only returns segments …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax curvature in X and Y split cubic into 9 pieces, * …\nModifies pts[] in place so that it is clipped in Y to the …\nModifies pts[] in place so that it is clipped in Y to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 16.16 fixed point.\nA 26.6 fixed point.\nA 24.8 fixed point.\nA screen <code>IntRect</code>.\nReturns rect’s bottom edge.\nChecks that the rect is completely includes <code>other</code> Rect.\nReturns the argument unchanged.\nCreates a new <code>ScreenIntRect</code>.\nCreates a new <code>ScreenIntRect</code>.\nReturns rect’s height.\nCalls <code>U::from(self)</code>.\nReturns rect’s left edge.\nReturns rect’s right edge.\nReturns rect’s size.\nConverts into a <code>IntRect</code>.\nConverts into a <code>Rect</code>.\nConverts the current size into a <code>IntRect</code> at a provided …\nConverts into <code>ScreenIntRect</code>.\nReturns rect’s top edge.\nReturns rect’s width.\nReturns rect’s width.\nReturns rect’s X position.\nReturns rect’s Y position.\nClip the line pts[0]…pts[1] against clip, ignoring …\nIntersect the line segment against the rect. If there is a …\nReturns value between the two limits, where the limits are …\nReturns X coordinate of intersection with horizontal line …\nReturns Y coordinate of intersection with vertical line at …\nTransfers only the Alpha channel from <code>Pixmap</code> to <code>Mask</code>.\nTransfers RGB channels as luminance from <code>Pixmap</code> to <code>Mask</code>.\nA mask.\nA mask type.\nClears the mask.\nReturns the internal data.\nReturns the mutable internal data.\nDraws a filled path onto the mask.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new mask from a <code>PixmapRef</code>.\nCreates a new mask by taking ownership over a mask buffer.\nReturns mask’s height.\nIntersects the provided path with the current clipping …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the mask.\nCreates a new mask by taking ownership over a mask buffer.\nReturns mask’s size.\nReturns mask’s width.\nSplits the target pixmap into a list of tiles.\nSpecifies that “inside” is computed by an odd number …\nA path filling rule.\nControls how a shape should be painted.\nSpecifies that “inside” is computed by a non-zero sum …\nEnables anti-aliased painting.\nPaint blending mode.\nForces the high quality/precision rendering pipeline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that the paint source is a solid color.\nSometimes in the drawing pipeline, we have to perform math …\nSets a paint source to a solid color.\nSets a paint source to a solid color.\nA paint shader.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven 4 points on a cubic bezier, chop it into 1, 2, 3 …\nReturns 0 for 1 quad, and 1 for two quads, either way the …\nReturns 0 for 1 quad, and 1 for two quads, either way the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA high precision raster pipeline implementation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis value stores the actual colors count. <code>factors</code> and …\nA low precision raster pipeline implementation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNumber of bytes per pixel.\nA container that owns premultiplied RGBA pixels.\nA container that references mutable premultiplied RGBA …\nA container that references premultiplied RGBA pixels.\nA <code>PixmapMut</code> subregion.\nApplies a masks.\nApplies a masks.\nReturns a container that references Pixmap’s data.\nReturns a container that references Pixmap’s data.\nReturns a container that references Pixmap’s data.\nCreates <code>SubPixmapMut</code> that contains the whole <code>PixmapMut</code>.\nReturns a copy of the pixmap that intersects the <code>rect</code>.\nReturns a copy of the pixmap that intersects the <code>rect</code>.\nReturns storage size required by pixel array.\nReturns the internal data.\nReturns the internal data.\nReturns the mutable internal data.\nReturns the mutable internal data.\nDraws a <code>Pixmap</code> on top of the current <code>Pixmap</code>.\nDraws a <code>Pixmap</code> on top of the current <code>Pixmap</code>.\nFills the entire pixmap with a specified color.\nFills the entire pixmap with a specified color.\nDraws a filled path onto the pixmap.\nDraws a filled path onto the pixmap.\nDraws a filled rectangle onto the pixmap.\nDraws a filled rectangle onto the pixmap.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>PixmapRef</code> from bytes.\nCreates a new <code>PixmapMut</code> from bytes.\nCreates a new pixmap by taking ownership over an image …\nReturns pixmap’s height.\nReturns pixmap’s height.\nReturns pixmap’s height.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns minimum bytes per row as usize.\nAllocates a new pixmap.\nReturns a pixel color.\nReturns a pixel color.\nReturns a slice of pixels.\nReturns a slice of pixels.\nReturns a mutable slice of pixels.\nReturns a mutable slice of pixels.\nReturns a mutable slice of pixels.\nReturns pixmap’s rect.\nReturns pixmap’s size.\nReturns pixmap’s size.\nReturns pixmap’s size.\nA stroking for paths with subpixel/hairline width.\nStrokes a path.\nStrokes a path.\nReturns a mutable reference to the pixmap region that …\nConsumes the internal data.\nCreates a new <code>Pixmap</code> from the current data.\nCreates a new <code>Pixmap</code> from the current data.\nReturns pixmap’s width.\nReturns pixmap’s width.\nReturns pixmap’s width.\nExtend the points in the direction of the starting or …\nMultiplies value by 0..256, and shift the result down 8 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncontrols how much we super-sample (when we use that scan …\nBlits a row of pixels, with location and width specified …\nCurrent y coordinate, in destination coordinates.\nCurrent y coordinate in supersampled coordinates.\nOnce <code>runs</code> contains a complete supersampled row, flush() …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeftmost x coordinate in any row, in destination …\nLeftmost x coordinate in any row, in supersampled …\nInitial y coordinate (top of bounds).\nWidest row of region to be blitted, in destination …\nA linear gradient shader.\nReplicate the edge color if the shader draws outside of its\nA pattern shader.\nA radial gradient shader.\nRepeat the shader’s image horizontally and vertically, …\nRepeat the shader’s image horizontally and vertically.\nA shader specifies the source color(s) for what is being …\nA solid color shader.\nA shader spreading mode.\nShifts shader’s opacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the shader is guaranteed to produce only opaque …\nIf this returns false, then we draw nothing (do not fall …\nTransforms the shader.\nA gradient point.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new gradient point.\nA linear gradient shader.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new linear gradient shader.\nBicubic. High quality, but slow.\nBilinear.\nControls how much filtering to be done when transforming …\nNearest-neighbor. Low quality, but fastest.\nA pattern shader.\nControls how a pixmap should be blended.\nPixmap blending mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new pattern shader.\nPixmap opacity.\nSpecifies how much filtering to be done when transforming …\nA radial gradient shader.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new radial gradient shader.\nA faster and more forgiving f32 min/max implementation.\nReturns an absolute value.\nA pair of f32 numbers.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a maximum value.\nReturns a maximum of both values.\nReturns a minimum value.\nCreates a new pair.\nCreates a new pair from a single value.\nReturns the first value.\nReturns the second value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")