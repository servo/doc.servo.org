searchState.loadedDescShard("content_security_policy", 0, "Parse and validate Web Content-Security-Policy level 3\nhttps://www.w3.org/TR/CSP/#allow-all-inline\nMany algorithms are allowed to return either “Allowed” …\nhttps://www.w3.org/TR/CSP/#csp-list\nhttps://www.w3.org/TR/CSP/#grammardef-directive-name\nhttps://www.w3.org/TR/CSP/#grammardef-directive-value\nhttps://www.w3.org/TR/CSP/#directives\nhttps://www.w3.org/TR/CSP/#grammardef-hash-source\nhttps://www.w3.org/TR/CSP/#grammardef-host-source\nhttps://www.w3.org/TR/SRI/#integrity-metadata\nThe valid values for type are “script”, “script …\nhttps://www.w3.org/TR/CSP/#match-element-to-source-list\nhttps://www.w3.org/TR/CSP/#grammardef-nonce-source\nA globally unique identifier\nThe origin of an URL\nA single parsed content security policy.\nhttps://www.w3.org/TR/CSP/#policy-disposition\nhttps://www.w3.org/TR/CSP/#policy-source\nrequest to be validated\nresponse to be validated …\nhttps://www.w3.org/TR/CSP/#grammardef-scheme-source\nhttps://www.w3.org/TR/SRI/#the-integrity-attribute This …\nhttps://www.w3.org/TR/CSP/#framework-directive-source-list\nhttps://www.w3.org/TR/SRI/#parse-metadata\nConsists of the URL’s scheme, host and port\nA parsed URL record.\nhttps://www.w3.org/TR/CSP/#does-request-violate-policy\nviolation information\nviolation information\nReturn the serialization of this URL.\n…\nReturn the authority of this URL as an ASCII string.\nReturn whether this URL is a cannot-be-a-base URL, meaning …\n…\nSerialize with Serde using the internal representation of …\nhttps://www.w3.org/TR/CSP/#allow-all-inline\nhttps://www.w3.org/TR/CSP/#can-compile-strings\nhttps://www.w3.org/TR/CSP/#can-compile-wasm-bytes\nhttps://www.w3.org/TR/CSP/#match-element-to-source-list\nhttps://www.w3.org/TR/CSP/#match-nonce-to-source-list\nhttps://www.w3.org/TR/CSP/#match-request-to-source-list\nhttps://www.w3.org/TR/CSP/#does-request-violate-policy\n…\nhttps://www.w3.org/TR/CSP/#match-response-to-source-list\nhttps://www.w3.org/TR/CSP/#match-url-to-source-expression\nhttps://www.w3.org/TR/CSP/#match-url-to-source-list\nIf this URL has a host and it is a domain name (not an IP …\nReturn this URL’s fragment identifier, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nhttps://www.w3.org/TR/CSP/#directive-fallback-list\nhttps://www.w3.org/TR/CSP/#sandbox-init\n…\n…\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nReturn the parsed representation of the host for this URL. …\nhttps://www.w3.org/TR/CSP/#match-hosts\nReturn the string representation of the host (domain or IP …\nhttps://www.w3.org/TR/CSP/#directive-inline-check\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the serialization of this URL.\nhttps://www.w3.org/TR/CSP/#allow-base-for-document\nhttps://www.w3.org/TR/CSP/#can-compile-strings\nhttps://www.w3.org/TR/CSP/#can-compile-strings\n…\nReturn whether the URL is special (has a special scheme)\nReturn whether this origin is a (scheme, host, port) tuple …\nhttps://www.w3.org/TR/CSP/#serialized-directive\nhttps://www.w3.org/TR/CSP/#can-compile-wasm-bytes\nhttps://www.w3.org/TR/CSP/#can-compile-wasm-bytes\nParse a string as an URL, with this URL as the base URL.\nCreates a relative URL if possible, with this URL as the …\nCreates a new opaque origin that is only equal to itself.\nWhen there is no nonce, populate this member with <code>None</code>.\nReturn a default <code>ParseOptions</code> that can fully configure the …\nReturn the origin of this URL (…\nhttps://www.w3.org/TR/CSP/#parse-serialized-policy\nhttps://www.w3.org/TR/CSP/#parse-serialized-policy-list\nParse an absolute URL from a string.\nhttps://www.w3.org/TR/SRI/#parse-metadata\nParse an absolute URL from a string and add params to its …\nReturn the password for this URL, if any, as a …\nReturn the path for this URL, as a percent-encoded ASCII …\nhttps://www.w3.org/TR/CSP/#match-paths\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nhttps://www.w3.org/TR/CSP/#match-ports\nhttps://www.w3.org/TR/CSP/#directive-post-request-check\nhttps://www.w3.org/TR/CSP/#directive-pre-request-check\nReturn this URL’s query string, if any, as a …\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nGiven a request, this algorithm reports violations based …\n…\nhttps://www.w3.org/TR/CSP/#directive-response-check\nReturn the scheme of this URL, lower-cased, as an ASCII …\nhttps://www.w3.org/TR/CSP/#match-schemes\nhttps://www.w3.org/TR/CSP/#script-post-request\nhttps://www.w3.org/TR/CSP/#script-pre-request\nSerialize with Serde using the internal representation of …\nChange this URL’s fragment identifier.\nChange this URL’s host.\nChange this URL’s host to the given IP address.\nChange this URL’s password.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string. If <code>query</code> is <code>None</code>, this …\nChange this URL’s scheme.\nChange this URL’s username.\nhttps://www.w3.org/TR/CSP/#should-block-inline\nhttps://www.w3.org/TR/CSP/#should-directive-execute\nGiven a request, this algorithm returns Blocked or Allowed …\nGiven a response and a request, this algorithm returns …\nResolve a URL’s host and port number to <code>SocketAddr</code>.\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\n…\nReturn the username for this URL (typically the empty …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")