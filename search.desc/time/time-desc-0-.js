searchState.loadedDescShard("time", 0, "Feature flags\nDate in the proleptic Gregorian calendar.\nA span of time with nanosecond precision.\nContains the error value\nA measurement of a monotonically non-decreasing clock. …\nMonths of the year.\nA <code>PrimitiveDateTime</code> with a <code>UtcOffset</code>.\nContains the success value\nCombined date and time.\nAn alias for <code>std::result::Result</code> with a generic error from …\nThe clock time within a given date. Nanosecond precision.\nAn offset from UTC.\nDays of the week.\nConversion between units of time.\nThe <code>Date</code> struct and its associated <code>impl</code>s.\nThe <code>Duration</code> struct and its associated <code>impl</code>s.\nVarious error types returned by methods in the time crate.\nThis is a separate function to reduce the code size of …\nExtension traits.\nDescription of how types should be formatted and parsed.\nFormatting for various types.\nThe <code>Instant</code> struct and its associated <code>impl</code>s.\nMacros for use within the library. They are not publicly …\nMacros to construct statically known values.\nThe <code>Month</code> enum and its associated <code>impl</code>s.\nNumber of nanoseconds within the second. The sign always …\nThe <code>OffsetDateTime</code> struct and its associated <code>impl</code>s.\nParsing for various types.\nThe <code>PrimitiveDateTime</code> struct and its associated <code>impl</code>s.\nNumber of whole seconds.\nDifferential formats for serde.\nFunctions with a common interface that rely on system …\nThe <code>Time</code> struct and its associated <code>impl</code>s.\nThe <code>UtcOffset</code> struct and its associated <code>impl</code>s.\nUtility functions.\nBitpacked field containing both the year and ordinal.\nDays of the week.\nA unit of time representing exactly one day.\nA unit of time representing exactly one hour.\nA unit of time representing exactly one microsecond.\nA unit of time representing exactly one millisecond.\nA unit of time representing exactly one minute.\nA unit of time representing exactly one nanosecond.\nA unit of time representing exactly one second.\nA unit of time representing exactly one week.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtain the number of times <code>Nanosecond</code> can fit into <code>T</code>. If <code>T</code> …\nObtain the number of times <code>Microsecond</code> can fit into <code>T</code>. If <code>T</code>…\nObtain the number of times <code>Millisecond</code> can fit into <code>T</code>. If <code>T</code>…\nObtain the number of times <code>Second</code> can fit into <code>T</code>. If <code>T</code> is …\nObtain the number of times <code>Minute</code> can fit into <code>T</code>. If <code>T</code> is …\nObtain the number of times <code>Hour</code> can fit into <code>T</code>. If <code>T</code> is …\nObtain the number of times <code>Day</code> can fit into <code>T</code>. If <code>T</code> is …\nObtain the number of times <code>Week</code> can fit into <code>T</code>. If <code>T</code> is …\nDate in the proleptic Gregorian calendar.\nThe maximum valid <code>Date</code>.\nThe maximum valid year.\nThe minimum valid <code>Date</code>.\nThe minimum valid year.\nPanics\nPanics\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nCalculates the first occurrence of a weekday that is …\nCalculates the <code>n</code>th occurrence of a weekday that is …\nCalculates the <code>n</code>th occurrence of a weekday that is …\nCalculates the first occurrence of a weekday that is …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nGet the day of the month.\nFormat the <code>Date</code> using the provided format description.\nFormat the <code>Date</code> using the provided format description.\nReturns the argument unchanged.\nAttempt to create a <code>Date</code> from the year, month, and day.\nAttempt to create a <code>Date</code> from the ISO year, week, and …\nCreate a <code>Date</code> from the Julian day.\nCreate a <code>Date</code> from the Julian day.\nAttempt to create a <code>Date</code> from the year and ordinal day …\nCalls <code>U::from(self)</code>.\nGet the ISO week number.\nGet the ISO 8601 year and week number.\nCreate a <code>PrimitiveDateTime</code> using the existing date. The …\nGet the week number where week 1 begins on the first …\nGet the month.\nGet the month and day. This is more efficient than …\nGet the next calendar date.\nCalculates the first occurrence of a weekday that is …\nCalculates the <code>n</code>th occurrence of a weekday that is …\nCalculates the <code>n</code>th occurrence of a weekday that is …\nGet the day of the year.\nParse a <code>Date</code> from the input using the provided format …\nCalculates the first occurrence of a weekday that is …\nGet the previous calendar date.\nReplace the day of the month.\nReplace the month of the year.\nReplace the day of the year.\nReplace the year. The month and day will be unchanged.\nComputes <code>self + duration</code>, saturating value on overflow.\nComputes <code>self - duration</code>, saturating value on overflow.\nPanics\nPanics\nGet the week number where week 1 begins on the first …\nGet the year, month, and day.\nGet the ISO 8601 year, week number, and weekday.\nGet the Julian day for the date.\nGet the year and ordinal day number.\nBitpacked field containing both the year and ordinal.\nGet the weekday.\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nCreate a <code>PrimitiveDateTime</code> using the existing date and the …\nGet the year of the date.\nWhether the sign should be displayed.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe width of the year component, including the sign.\nEquivalent to <code>1.days()</code>.\nA span of time with nanosecond precision.\nEquivalent to <code>1.hours()</code>.\nThe maximum possible duration. Adding any positive …\nEquivalent to <code>1.microseconds()</code>.\nEquivalent to <code>1.milliseconds()</code>.\nThe minimum possible duration. Adding any negative …\nEquivalent to <code>1.minutes()</code>.\nEquivalent to <code>1.nanoseconds()</code>.\nThe type of the <code>nanosecond</code> field of <code>Duration</code>.\nBy explicitly inserting this enum where padding is …\nEquivalent to <code>1.seconds()</code>.\nEquivalent to <code>1.weeks()</code>.\nEquivalent to <code>0.seconds()</code>.\nGet the absolute value of the duration.\nPanics\nPanics\nGet the number of fractional seconds in the duration.\nGet the number of fractional seconds in the duration.\nComputes <code>self + rhs</code>, returning <code>None</code> if an overflow …\nComputes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code> or if the …\nComputes <code>self * rhs</code>, returning <code>None</code> if an overflow …\nComputes <code>-self</code>, returning <code>None</code> if the result would …\nCreates a new <code>Duration</code> from the specified number of seconds\nCreates a new <code>Duration</code> from the specified number of seconds\nComputes <code>self - rhs</code>, returning <code>None</code> if an overflow …\nCreate a new <code>Duration</code> with the given number of days. …\nImplement <code>Mul</code> (reflexively) and <code>Div</code> for <code>Duration</code> for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Duration</code> with the given number of hours. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a duration is negative.\nCheck if a duration is positive.\nCheck if a duration is exactly zero.\nCreate a new <code>Duration</code> with the given number of …\nCreate a new <code>Duration</code> with the given number of …\nCreate a new <code>Duration</code> with the given number of minutes. …\nCreate a new <code>Duration</code> with the given number of nanoseconds.\nNumber of nanoseconds within the second. The sign always …\nCreate a new <code>Duration</code> with the given number of nanoseconds.\nCreate a new <code>Duration</code> with the provided seconds and …\nCreate a new <code>Duration</code> with the provided seconds and …\nCreate a new <code>Duration</code> without checking the validity of the …\nCreate a new <code>Duration</code> without checking the validity of the …\nComputes <code>self + rhs</code>, saturating if an overflow occurred.\nComputes <code>self * rhs</code>, saturating if an overflow occurred.\nCreates a new <code>Duration</code> from the specified number of seconds\nCreates a new <code>Duration</code> from the specified number of seconds\nComputes <code>self - rhs</code>, saturating if an overflow occurred.\nCreate a new <code>Duration</code> with the given number of seconds.\nNumber of whole seconds.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nPanics\nPanics\nGet the number of microseconds past the number of whole …\nGet the number of milliseconds past the number of whole …\nGet the number of nanoseconds past the number of whole …\nRuns a closure, returning the duration of time it took to …\nThis is adapted from the <code>std</code> implementation, which uses …\nConvert the existing <code>Duration</code> to a <code>std::time::Duration</code> and …\nCreate a new <code>Duration</code> with the given number of weeks. …\nGet the number of whole days in the duration.\nGet the number of whole hours in the duration.\nGet the number of whole microseconds in the duration.\nGet the number of whole milliseconds in the duration.\nGet the number of whole minutes in the duration.\nGet the number of nanoseconds in the duration.\nGet the number of whole seconds in the duration.\nGet the number of whole weeks in the duration.\nAn error type indicating that a component provided to a …\nSome component contained an invalid value for the type.\nAn error type indicating that a conversion failed because …\nAn error type indicating that a <code>TryFrom</code> call failed …\nA unified error type for anything returned by a method in …\nSomething was expected, but not found.\nAn error occurred when formatting.\nThe system’s UTC offset could not be determined at the …\nThe <code>Parsed</code> did not include enough information to construct …\nThe type being formatted does not contain sufficient …\nThe component named has a value that cannot be formatted …\nA dynamic component was not valid.\nA component name is not valid.\nThe format description provided was not valid.\nA string literal was not what was expected.\nA modifier is not valid.\nAn error type indicating that a <code>FromStr</code> call failed …\nA component name is missing.\nA required modifier is missing.\nCertain behavior is not supported in the given context.\nAn error that occurred at some stage of parsing.\nAn error that occurred while parsing the input into a …\nA value of <code>std::io::Error</code> was returned internally.\nAn error that occurred when converting a <code>Parsed</code> to another …\nThere was a bracket pair that was opened but not closed.\nThe input should have ended, but there were characters …\nThe input was expected to have ended, but there are …\nComponent range error\nThe minimum and/or maximum value is conditional on the …\nConversion range error\nDifferent variant error\nError formatting a struct\nReturns the argument unchanged.\nIndeterminate offset\nCalls <code>U::from(self)</code>.\nInvalid format description\nInvalid variant error\nMaximum allowed value, inclusive.\nMinimum allowed value, inclusive.\nName of the component.\nError that occurred at some stage of parsing\nError parsing an input into a <code>Parsed</code> struct\nError converting a <code>Parsed</code> struct to another type\nValue that was provided.\nThe context in which the behavior is not supported.\nThe zero-based index of the opening bracket.\nThe zero-based index the component name starts at.\nThe zero-based index the modifier starts at.\nThe zero-based index where the component name should start.\nThe zero-based index of the component.\nThe zero-based index the item was expected to be found at.\nThe zero-based index the error occurred at.\nThe name of the invalid component name.\nThe name of the modifier that is missing.\nThe value of the invalid modifier.\nWhat was expected to be present, but wasn’t.\nThe behavior that is not supported.\nAn error type indicating that a component provided to a …\nThe minimum and/or maximum value is conditional on the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert the error to a deserialization error.\nWhether the value’s permitted range is conditional, i.e. …\nMaximum allowed value, inclusive.\nMinimum allowed value, inclusive.\nObtain the name of the component whose value was out of …\nName of the component.\nValue that was provided.\nAn error type indicating that a conversion failed because …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn error type indicating that a <code>TryFrom</code> call failed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn error occurred when formatting.\nThe type being formatted does not contain sufficient …\nThe component named has a value that cannot be formatted …\nA value of <code>std::io::Error</code> was returned internally.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe system’s UTC offset could not be determined at the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSomething was expected, but not found.\nA component name is not valid.\nThe format description provided was not valid.\nA modifier is not valid.\nA component name is missing.\nA required modifier is missing.\nCertain behavior is not supported in the given context.\nThere was a bracket pair that was opened but not closed.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe context in which the behavior is not supported.\nThe zero-based index of the opening bracket.\nThe zero-based index the component name starts at.\nThe zero-based index the modifier starts at.\nThe zero-based index where the component name should start.\nThe zero-based index of the component.\nThe zero-based index the item was expected to be found at.\nThe zero-based index the error occurred at.\nThe name of the invalid component name.\nThe name of the modifier that is missing.\nThe value of the invalid modifier.\nWhat was expected to be present, but wasn’t.\nThe behavior that is not supported.\nAn error type indicating that a <code>FromStr</code> call failed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn error that occurred at some stage of parsing.\nThe input should have ended, but there were characters …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA dynamic component was not valid.\nA string literal was not what was expected.\nAn error that occurred while parsing the input into a …\nThe input was expected to have ended, but there are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSome component contained an invalid value for the type.\nThe <code>Parsed</code> did not include enough information to construct …\nAn error that occurred when converting a <code>Parsed</code> to another …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn extension trait for <code>std::time::Instant</code> that adds …\nCreate <code>Duration</code>s from numeric literals.\nCreate <code>std::time::Duration</code>s from numeric literals.\nReturns <code>Some(t)</code> where <code>t</code> is the time …\nReturns <code>Some(t)</code> where <code>t</code> is the time …\nCreate a <code>Duration</code> from the number of days.\nCreate a <code>Duration</code> from the number of hours.\nCreate a <code>Duration</code> from the number of microseconds.\nCreate a <code>Duration</code> from the number of milliseconds.\nCreate a <code>Duration</code> from the number of minutes.\nCreate a <code>Duration</code> from the number of nanoseconds.\nCreate a <code>Duration</code> from the number of seconds.\nReturns the amount of time elapsed from another instant to …\nCreate a <code>std::time::Duration</code> from the number of days.\nCreate a <code>std::time::Duration</code> from the number of hours.\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>std::time::Duration</code> from the number of minutes.\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>std::time::Duration</code> from the number of seconds.\nCreate a <code>std::time::Duration</code> from the number of weeks.\nCreate a <code>Duration</code> from the number of weeks.\nA trait that indicates the formatted width of the value …\nA macro to generate implementations of <code>DigitCount</code> for …\nThe number of digits in the stringified value.\nAn extension trait for <code>std::time::Instant</code> that adds …\nPanics\nPanics\nReturns <code>Some(t)</code> where <code>t</code> is the time …\nReturns <code>Some(t)</code> where <code>t</code> is the time …\nSealed trait to prevent downstream implementations.\nReturns the amount of time elapsed from another instant to …\nPanics\nPanics\nA trait that cannot be implemented by downstream users.\nCreate <code>Duration</code>s from numeric literals.\nCreate a <code>Duration</code> from the number of days.\nCreate a <code>Duration</code> from the number of hours.\nCreate a <code>Duration</code> from the number of microseconds.\nCreate a <code>Duration</code> from the number of milliseconds.\nCreate a <code>Duration</code> from the number of minutes.\nCreate a <code>Duration</code> from the number of nanoseconds.\nSealed trait to prevent downstream implementations.\nCreate a <code>Duration</code> from the number of seconds.\nCreate a <code>Duration</code> from the number of weeks.\nA trait that cannot be implemented by downstream users.\nCreate <code>std::time::Duration</code>s from numeric literals.\nSealed trait to prevent downstream implementations.\nCreate a <code>std::time::Duration</code> from the number of days.\nCreate a <code>std::time::Duration</code> from the number of hours.\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>std::time::Duration</code> from the number of minutes.\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>std::time::Duration</code> from the number of seconds.\nCreate a <code>std::time::Duration</code> from the number of weeks.\nA trait that cannot be implemented by downstream users.\nA complete description of how to format and parse a type.\nA component of a larger format description.\nA minimal representation of a single non-literal item.\nA minimal representation of a single non-literal item.\nA minimal representation of a single non-literal item.\nA series of literals or components that collectively form …\nA series of literals or components that collectively form …\nA series of literals or components that collectively form …\nDay of the month.\nThe end of input. Parsing this component will fail if …\nA series of <code>FormatItem</code>s where, when parsing, the first …\nA series of <code>FormatItem</code>s where, when parsing, the first …\nA series of <code>FormatItem</code>s where, when parsing, the first …\nA complete description of how to format and parse a type.\nHour of the day.\nA number of bytes to ignore when parsing. This has no …\nBytes that are formatted as-is.\nBytes that are formatted as-is.\nBytes that are formatted as-is.\nMinute within the hour.\nMonth of the year.\nHour of the UTC offset.\nMinute within the hour of the UTC offset.\nSecond within the minute of the UTC offset.\nA <code>FormatItem</code> that may or may not be present when parsing. …\nA <code>FormatItem</code> that may or may not be present when parsing. …\nA <code>FormatItem</code> that may or may not be present when parsing. …\nOrdinal day of the year.\nA complete description of how to format and parse a type.\nAM/PM part of the time.\nSecond within the minute.\nSubsecond within the second.\nA Unix timestamp.\nWeek within the year.\nDay of the week.\nYear of the date.\nA format item with borrowed data.\nPart of a format description.\nVarious modifiers for components.\nA format item with owned data.\nParser for format descriptions.\nParse a sequence of items from the format description.\nParse a sequence of items from the format description.\nParse a sequence of items from the format description.\nWell-known formats, typically standards.\nA complete description of how to format and parse a type.\nA minimal representation of a single non-literal item.\nA minimal representation of a single non-literal item.\nA series of literals or components that collectively form …\nA series of literals or components that collectively form …\nA series of <code>FormatItem</code>s where, when parsing, the first …\nA series of <code>FormatItem</code>s where, when parsing, the first …\nA complete description of how to format and parse a type.\nBytes that are formatted as-is.\nBytes that are formatted as-is.\nA <code>FormatItem</code> that may or may not be present when parsing. …\nA <code>FormatItem</code> that may or may not be present when parsing. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA component of a larger format description.\nDay of the month.\nThe end of input. Parsing this component will fail if …\nHour of the day.\nA number of bytes to ignore when parsing. This has no …\nMinute within the hour.\nMonth of the year.\nHour of the UTC offset.\nMinute within the hour of the UTC offset.\nSecond within the minute of the UTC offset.\nOrdinal day of the year.\nAM/PM part of the time.\nSecond within the minute.\nSubsecond within the second.\nA Unix timestamp.\nWeek within the year.\nDay of the week.\nYear of the date.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDay of the month.\nExactly eight digits.\nThe end of input.\nExactly five digits.\nExactly four digits.\nThe full value of the year.\nHour of the day.\nIgnore some number of bytes.\nWeek 1 is the week that contains January 4.\nOnly the last two digits of the year.\nThe long form of the month name (e.g. “January”).\nThe long form of the weekday (e.g. “Monday”).\nMicroseconds since the Unix epoch.\nMilliseconds since the Unix epoch.\nMinute within the hour.\nA numerical representation using Monday as the first day …\nWeek 1 begins on the first Monday of the calendar year.\nMonth of the year.\nThe representation of a month.\nNanoseconds since the Unix epoch.\nExactly nine digits.\nThere is no padding. This can result in a width below the …\nThe number of the month (January is 1, December is 12).\nHour of the UTC offset.\nMinute within the hour of the UTC offset.\nSecond within the minute of the UTC offset.\nExactly one digit.\nAny number of digits (up to nine) that is at least one. …\nOrdinal day of the year.\nType of padding to ensure a minimum width.\nAM/PM part of the time.\nSecond within the minute.\nSeconds since the Unix epoch.\nExactly seven digits.\nThe short form of the month name (e.g. “Jan”).\nThe short form of the weekday (e.g. “Mon”).\nExactly six digits.\nA space character (<code> </code>) should be used as padding.\nSubsecond within the second.\nThe number of digits present in a subsecond representation.\nA numerical representation using Sunday as the first day …\nWeek 1 begins on the first Sunday of the calendar year.\nExactly three digits.\nExactly two digits.\nA Unix timestamp.\nThe precision of a Unix timestamp.\nWeek within the year.\nThe representation used for the week number.\nDay of the week.\nThe representation used for the day of the week.\nYear of the date.\nThe representation used for a year value.\nA zero character (<code>0</code>) should be used as padding.\nIs the value case sensitive when parsing?\nIs the value case sensitive when parsing?\nIs the value case sensitive when parsing?\nCreate an instance of <code>Ignore</code> with the provided number of …\nThe number of bytes to ignore.\nCreates a modifier that indicates the value is padded with …\nCreates an instance of this type that indicates the value …\nCreates a modifier that indicates the value is padded with …\nCreates a modifier that indicates the value uses the <code>Long</code> …\nCreates a modifier that indicates that the value is padded …\nCreates a modifier that indicates the value uses the <code>Full</code> …\nCreates a modifier that indicates the value is padded with …\nCreates a modifier that indicates the value is padded with …\nCreates a modifier that indicates the value uses the …\nCreates a modifier that indicates the value is padded with …\nCreates a modifier that indicates the stringified value …\nCreates a modifier that indicates the value only uses a …\nCreates a modifier that indicates the value is padded with …\nCreates a modifier that indicates the value is padded with …\nCreates a modifier that indicates the value represents the …\nCreates a modifier used to represent the end of input.\nHow many digits are present in the component?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate the provided code if and only if <code>pub</code> is present.\nImplement <code>Default</code> for the given type. This also generates …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the hour displayed using a 12 or 24-hour clock?\nIs the period uppercase or lowercase?\nWhether the value is based on the ISO week number or the …\nWhen using a numerical representation, should it be zero …\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe precision of the timestamp.\nWhat form of representation should be used?\nWhat form of representation should be used?\nWhat kind of representation should be used?\nWhat kind of representation should be used?\nWhether the <code>+</code> sign is present when a positive year …\nWhether the <code>+</code> sign is present on positive values.\nWhether the <code>+</code> sign must be present for a non-negative …\nA minimal representation of a single non-literal item.\nA series of literals or components that collectively form …\nA series of <code>FormatItem</code>s where, when parsing, the first …\nBytes that are formatted as-is.\nA <code>FormatItem</code> that may or may not be present when parsing. …\nA complete description of how to format and parse a type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA complete error description.\nThe internal error type.\nA constant that panics if the version is not valid. This …\nA location within a string.\nA start and end point within a string.\nA value with an associated <code>Span</code>.\nHelper trait to attach a <code>Span</code> to a value.\nA value that may be used in the future, but currently is …\nA struct that is used to ensure that the version is valid.\nThe internal error.\nThe message displayed to the user.\nWhere the error originated.\nAST for parsing format descriptions.\nThe zero-indexed byte of the string.\nCreate an error with the provided message at this location.\nCreate an error with the provided message at this span.\nTyped, validated representation of a parsed format …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLexer for parsing format descriptions.\nOffset the location by the provided amount.\nParse a sequence of items from the format description.\nParse a sequence of items from the format description.\nParse a sequence of items from the format description.\nThe error needed for interoperability with the rest of <code>time</code>…\nObtain a <code>Span</code> that starts after provided position to the …\nObtain a <code>Span</code> that ends before the provided position of …\nObtain a <code>Span</code> pointing at the end of the pre-existing span.\nObtain a <code>Span</code> pointing at the start of the pre-existing …\nWhere the value was in the format string.\nAttach a <code>Span</code> to a value.\nCreate a new <code>Span</code> from <code>self</code> to <code>other</code>.\nIndicate that a value is currently unused.\nA helper macro to statically validate the version (when …\nThe value.\nA helper macro to make version restrictions simpler to …\nPart of a type, along with its modifiers.\nA sequence of brackets. The first acts as the escape …\nThe first matching parse of a sequence of items.\nOne part of a complete format description.\nA literal string, formatted and parsed as-is.\nA modifier for a component.\nA format description that is nested within another format …\nAn optional sequence of items.\nWhere the closing bracket was in the format string.\nWhere the colon of the modifier was in the format string.\nWhitespace preceding the modifier.\nWhere the opening bracket was in the format string.\nWhitespace between the closing bracket and the next item.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe items within the nested format description.\nThe key of the modifier.\nParse the provided tokens into an AST.\nParse a component. This assumes that the opening bracket …\nParse the provided tokens into an AST. The const generic …\nParse a nested format description. The location provided …\nThe value of the modifier.\nWhere the closing bracket was in the format string.\nThe first bracket.\nThe “first” keyword.\nWhitespace between the opening bracket and name.\nWhitespace between the opening bracket and “optional”.\nWhitespace between the opening bracket and “first”.\nWhere the opening bracket was in the format string.\nThe “optional” keyword.\nThe second bracket.\nWhitespace between the modifiers and closing bracket.\nWhitespace between the “optional” keyword and the …\nWhitespace between the “first” keyword and the opening …\nWhere the closing bracket was in the format string.\nWhere the closing bracket was in the format string.\nThe modifiers for the component.\nThe name of the component.\nThe items within the optional sequence.\nThe sequences of items to try.\nWhere the opening bracket was in the format string.\nWhere the opening bracket was in the format string.\nPart of a type, along with its modifiers.\nThe first matching parse of a sequence of format …\nA description of how to format and parse one part of a …\nA literal string.\nA sequence of optional items.\nDeclare the <code>Component</code> struct.\nParse a component from the AST, given its name and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an AST item into a format item.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nParse the modifier from its string representation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeclare the various modifiers.\nParse an AST iterator into a sequence of format items.\nParse a modifier value using <code>FromStr</code>. Requires the …\nGet the target type for a given enum.\nGet the target value for a given enum.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nParse the component from the AST, given its modifiers.\nThe span of the full sequence.\nThe span of the full sequence.\nThe items themselves.\nThe sequence of format descriptions.\nAn opening or closing bracket. May or may not be the start …\nWhat type of bracket is present.\nA closing bracket: <code>]</code>\nIndicates whether the component is whitespace or not.\nOne part of a component. This could be its name, a …\nAn iterator over the lexed tokens.\nA literal string, formatted and parsed as-is.\nAn opening bracket: <code>[</code>\nA token emitted by the lexer. There is no semantic meaning …\nAttach <code>Location</code> information to each byte in the iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe internal iterator.\nParse the string into a series of <code>Token</code>s.\nConsume the next token if it is a closing bracket.\nConsume the next token if it is a component item that is …\nConsume the next token if it is an opening bracket.\nConsume the next token if it is whitespace.\nPeek at the next item in the iterator.\nPeek at the next token if it is a closing bracket.\nWhether the bracket is opening or closing.\nWhether the part is whitespace or not.\nWhere the bracket was in the format string.\nThe part itself.\nThe user-provided configuration for the ISO 8601 format.\nWhich format to use for the date.\nWhether the date should be formatted.\nWhether the UTC offset should be formatted.\nWhether the time should be formatted.\nThe format described in ISO 8601.\nThe precision for the UTC offset.\nThe format described in RFC 2822.\nThe format described in RFC 3339.\nThe precision and number of decimal digits to use for the …\nWhether the format contains separators (such as <code>-</code> or <code>:</code>).\nWhether the year is six digits.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe format described in ISO 8601.\nParse a date in the basic or extended format. Reduced …\nParse a UTC offset in the basic or extended format. …\nParse a time in the basic or extended format. Reduced …\nThe format described in RFC 2822.\nThe format described in RFC 3339.\nUse the year-month-day format.\nConfiguration for <code>Iso8601</code>.\nAn <code>Iso8601</code> that handles only the date, but is otherwise …\nAn <code>Iso8601</code> that handles the date and time, but is …\nAn <code>Iso8601</code> that handles the date, time, and UTC offset. …\nAn <code>Iso8601</code> with the default configuration.\nA configuration for the <code>Iso8601</code> format.\nFormat only the date.\nWhich format to use for the date.\nFormat the date and time.\nFormat the date, time, and UTC offset.\nAn encoded <code>Config</code> that can be used as a const parameter to …\nWhich components to format.\nFormat the hour only. Minutes, seconds, and nanoseconds …\nFormat only the offset hour. Requires the offset minute to …\nThe format described in ISO 8601.\nFormat the hour and minute. Seconds and nanoseconds will …\nFormat both the offset hour and minute.\nThe configuration can only be used for parsing. Using this …\nAn <code>Iso8601</code> that handles only the UTC offset, but is …\nFormat only the UTC offset.\nThe precision for the UTC offset.\nUse the week-ordinal format.\nAn <code>Iso8601</code> that can only be used for parsing. Using this …\nA configuration that can only be used for parsing. Using …\nFormat the hour, minute, and second. Nanoseconds will be …\nAn <code>Iso8601</code> that handles only the time, but is otherwise …\nAn <code>Iso8601</code> that handles the time and UTC offset, but is …\nFormat only the time.\nFormat the time and UTC offset.\nThe precision and number of decimal digits present for the …\nUse the year-week-weekday format.\nHackery to work around not being able to use ADTs in const …\nThe format used for the date.\nDecode the configuration. The configuration must have been …\nDefine associated constants for <code>Iso8601</code>.\nEncode the configuration, permitting it to be used as a …\nWhich components, if any, will be formatted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe precision for the UTC offset.\nSet the format used for the date.\nSet whether the format the date, time, and/or UTC offset.\nSet the precision for the UTC offset.\nSet the precision and number of decimal digits present for …\nSet whether the format contains separators (such as <code>-</code> or <code>:</code>…\nSet whether the year is six digits.\nThe precision and number of decimal digits present for the …\nWhether the format contains separators (such as <code>-</code> or <code>:</code>).\nWhether the year is six digits.\nAn encoded <code>Config</code> that can be used as a const parameter to …\nThe format described in RFC 2822.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe format described in RFC 3339.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA type that describes a format.\nFormat the day into the designated output.\nFormat the hour into the designated output.\nFormat the minute into the designated output.\nFormat the month into the designated output.\nFormat the offset hour into the designated output.\nFormat the offset minute into the designated output.\nFormat the offset second into the designated output.\nFormat the ordinal into the designated output.\nFormat the period into the designated output.\nFormat the second into the designated output.\nFormat the subsecond into the designated output.\nFormat the Unix timestamp into the designated output.\nFormat the week number into the designated output.\nFormat the weekday into the designated output.\nFormat the year into the designated output.\nFormat the provided component into the designated output. …\nWrite the floating point number to the output, returning …\nFormat a number with the provided padding and width.\nFormat a number with no padding.\nFormat a number with the provided width and spaces as …\nFormat a number with the provided width and zeros as …\nA trait that can be used to format an item from its …\nHelpers for implementing formatting for ISO 8601.\nWrite all bytes to the output, returning the number of …\nIf <code>pred</code> is true, write all bytes to the output, returning …\nIf <code>pred</code> is true, write <code>true_bytes</code> to the output. …\nA type that describes a format.\nSeal the trait to prevent downstream users from …\nFormat the item using a format description, the intended …\nFormat the item directly to a <code>String</code>.\nFormat the item into the provided output, returning the …\nFormat the date portion of ISO 8601.\nFormat the UTC offset portion of ISO 8601.\nFormat the time portion of ISO 8601.\nA measurement of a monotonically non-decreasing clock. …\nPanics\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns the amount of time elapsed since this instant was …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nObtain the inner <code>std::time::Instant</code>.\nReturns an <code>Instant</code> corresponding to “now”.\nPanics\nPanics\nPanics\nHelper macro for easily implementing <code>OpAssign</code>.\n<code>unreachable!()</code>, but better.\nCascade an out-of-bounds value.\nTry to unwrap an expression, returning if not possible.\nTry to unwrap an expression, returning if not possible.\nDivision of integers, rounding the resulting value towards …\nConstructs a ranged integer, returning a <code>ComponentRange</code> …\nTry to unwrap an expression, panicking if not possible.\nImplement <code>AddAssign</code> for the provided types.\nImplement <code>DivAssign</code> for the provided types.\nImplement <code>MulAssign</code> for the provided types.\nImplement <code>SubAssign</code> for the provided types.\nConstruct a <code>Date</code> with a statically known value.\nConstruct a <code>PrimitiveDateTime</code> or <code>OffsetDateTime</code> with a …\nEquivalent of performing <code>format_description::parse()</code> at …\nConstruct a <code>UtcOffset</code> with a statically known value.\nConstruct a <code>Time</code> with a statically known value.\nMonths of the year.\nReturns the argument unchanged.\nCreate a <code>Month</code> from its numerical value.\nCalls <code>U::from(self)</code>.\nGet the next month.\nGet n-th next month.\nGet n-th previous month.\nGet the previous month.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>PrimitiveDateTime</code> with a <code>UtcOffset</code>.\nMidnight, 1 January, 1970 (UTC).\nThe Julian day of the Unix epoch.\nPanics\nPanics\nPanics\nPanics\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nConvert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …\nGet the <code>Date</code> in the stored offset.\nGet the <code>PrimitiveDateTime</code> in the stored offset.\nGet the day of the date in the stored offset.\nFormat the <code>OffsetDateTime</code> using the provided format …\nFormat the <code>OffsetDateTime</code> using the provided format …\nReturns the argument unchanged.\nCreate an <code>OffsetDateTime</code> from the provided Unix timestamp. …\nConstruct an <code>OffsetDateTime</code> from the provided Unix …\nGet the clock hour in the stored offset.\nCalls <code>U::from(self)</code>.\nA helper method to check if the <code>OffsetDateTime</code> is a valid …\nGet the ISO week number of the date in the stored offset.\nGet the microseconds within the second in the stored …\nGet the milliseconds within the second in the stored …\nGet the minute within the hour in the stored offset.\nGet the week number where week 1 begins on the first …\nGet the month of the date in the stored offset.\nGet the nanoseconds within the second in the stored offset.\nCreate a new <code>OffsetDateTime</code> with the given <code>Date</code>, <code>Time</code>, and …\nCreate a new <code>OffsetDateTime</code> with the given <code>Date</code> and <code>Time</code> …\nAttempt to create a new <code>OffsetDateTime</code> with the current …\nCreate a new <code>OffsetDateTime</code> with the current date and time …\nGet the <code>UtcOffset</code>.\nGet the day of the year of the date in the stored offset.\nParse an <code>OffsetDateTime</code> from the input using the provided …\nReplace the date, which is assumed to be in the stored …\nReplace the date and time, which are assumed to be in the …\nReplace the day of the month.\nReplace the clock hour.\nReplace the microseconds within the second.\nReplace the milliseconds within the second.\nReplace the minutes within the hour.\nReplace the month of the year.\nReplace the nanoseconds within the second.\nReplace the offset. The date and time components remain …\nReplace the day of the year.\nReplace the seconds within the minute.\nReplace the time, which is assumed to be in the stored …\nReplace the year. The month and day will be unchanged.\nComputes <code>self + duration</code>, saturating value on overflow.\nComputes <code>self - duration</code>, saturating value on overflow.\nGet the second within the minute in the stored offset.\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nGet the week number where week 1 begins on the first …\nGet the <code>Time</code> in the stored offset.\nGet the year, month, and day.\nGet the clock hour, minute, and second.\nGet the clock hour, minute, second, and microsecond.\nGet the clock hour, minute, second, and millisecond.\nGet the clock hour, minute, second, and nanosecond.\nGet the ISO 8601 year, week number, and weekday.\nGet the Julian day for the date. The time is not taken …\nConvert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …\nEquivalent to <code>.to_offset(UtcOffset::UTC)</code>, but returning …\nGet the year and ordinal day number.\nGet the Unix timestamp.\nGet the Unix timestamp in nanoseconds.\nGet the weekday of the date in the stored offset.\nGet the year of the date in the stored offset.\nA type that can be parsed.\nAll information parsed.\nAn item that has been parsed. Represented as a …\nImplementations of the low-level parser combinators.\nParsing implementations for all <code>Component</code>s.\nConsume the stored value with the provided function. The …\nDay of the month.\nFilter the value with the provided function. If the …\nMap the value to a new, optional value, preserving the …\nReturns the argument unchanged.\nHour within the 12-hour period (midnight to noon or vice …\nWhether the <code>hour_12</code> field indicates a time that “PM”.\nHour within the day.\nCalls <code>U::from(self)</code>.\nDiscard the potential unit value, returning the remaining …\nDiscard the unit value, returning the remaining input.\nParse parts of an ISO 8601-formatted value.\nWeek of the year, where week one is the Monday-to-Sunday …\nYear of the ISO week date.\nThe last two digits of the ISO week year.\nIndicates whether a leap second is permitted to be parsed. …\nMap the value to a new value, preserving the remaining …\nMinute within the hour.\nWeek of the year, where week one begins on the first …\nMonth of the year.\nWhole hours of the UTC offset.\nIndicates whether the <code>UtcOffset</code> is negative. This …\nMinutes within the hour of the UTC offset.\nSeconds within the minute of the UTC offset.\nDay of the year.\nA trait that can be used to parse an item from an input.\nInformation parsed from an input and format description.\nSecond within the minute.\nExtension traits for things either not implemented or not …\nNanosecond within the second.\nWeek of the year, where week one begins on the first …\nThe Unix timestamp in nanoseconds.\nDay of the week.\nCalendar year.\nThe last two digits of the calendar year.\nConsume exactly one digit.\nConsume exactly one of the provided ASCII characters.\nConsume exactly one of the provided ASCII characters, …\nConsume exactly <code>n</code> digits, returning the numerical value.\nConsume exactly <code>n</code> digits, returning the numerical value.\nConsume the first matching item, returning its associated …\nConsume between <code>n</code> and <code>m</code> instances of the provided parser.\nConsume between <code>n</code> and <code>m</code> digits, returning the numerical …\nConsume between <code>n</code> and <code>m</code> digits, returning the numerical …\nConsume one of or more instances of the provided parser. …\nOptionally consume an input with a given parser.\nCombinators for rules as defined in a standard.\nParse a “+” or “-” sign. Returns the ASCII byte …\nConsume zero or more instances of the provided parser. The …\nRules defined in ISO 8601.\nRules defined in RFC 2234.\nRules defined in RFC 2822.\nThe basic format.\nThe extended format.\nWhat kind of format is being parsed. This is used to …\n¯_(ツ)_/¯\nIf the kind is <code>Unknown</code>, make it <code>Basic</code>. Otherwise, do …\nIf the kind is <code>Unknown</code>, make it <code>Extended</code>. Otherwise, do …\nParse a day of the month.\nParse a day of the week.\nParse a day of the year.\nParse a “decimal sign”, which is either a comma or a …\nParse a floating point number as its integer and optional …\nReturns the argument unchanged.\nParse the hour.\nCalls <code>U::from(self)</code>.\nIs the format known for certain to be extended?\nIs it possible that the format is extended?\nParse the minute.\nParse a month.\nParse a week number.\nParse a possibly expanded year.\nConsume exactly one space or tab.\nConsume the <code>ccontent</code> rule.\nConsume the <code>cfws</code> rule.\nConsume the <code>comment</code> rule.\nConsume the <code>ctext</code> rule.\nConsume the <code>fws</code> rule.\nConsume the <code>no_ws_ctl</code> rule.\nConsume the <code>quoted_pair</code> rule.\nConsume the <code>text</code> rule.\nIndicate whether the hour is “am” or “pm”.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse the “day” component of a <code>Date</code>.\nParse the <code>end</code> component, which represents the end of …\nParse the “hour” component of a <code>Time</code>.\nIgnore the given number of bytes.\nParse the “minute” component of a <code>Time</code>.\nParse the “month” component of a <code>Date</code>.\nParse the “hour” component of a <code>UtcOffset</code>.\nParse the “minute” component of a <code>UtcOffset</code>.\nParse the “second” component of a <code>UtcOffset</code>.\nParse the “ordinal” component of a <code>Date</code>.\nParse the “period” component of a <code>Time</code>. Required if …\nParse the “second” component of a <code>Time</code>.\nParse the “subsecond” component of a <code>Time</code>.\nParse the Unix timestamp component.\nParse the “week number” component of a <code>Date</code>.\nParse the “weekday” component of a <code>Date</code>.\nParse the “year” component of a <code>Date</code>.\nRound wrapper that uses hardware implementation if <code>std</code> is …\nA type that can be parsed.\nSeal the trait to prevent downstream users from …\nParse the item using a format description and an input.\nParse the item into a new <code>Parsed</code> struct.\nParse a <code>Date</code> from the format description.\nParse the item into the provided <code>Parsed</code> struct.\nParse a <code>UtcOffset</code> from the format description.\nParse a <code>OffsetDateTime</code> from the format description.\nParse a <code>PrimitiveDateTime</code> from the format description.\nParse a <code>Time</code> from the format description.\nAll information parsed.\nObtain the <code>day</code> component.\nDay of the month.\nReturns the argument unchanged.\nObtain the <code>hour_12</code> component.\nHour within the 12-hour period (midnight to noon or vice …\nObtain the <code>hour_12_is_pm</code> component.\nWhether the <code>hour_12</code> field indicates a time that “PM”.\nObtain the <code>hour_24</code> component.\nHour within the day.\nCalls <code>U::from(self)</code>.\nObtain the <code>iso_week_number</code> component.\nWeek of the year, where week one is the Monday-to-Sunday …\nObtain the <code>iso_year</code> component.\nYear of the ISO week date.\nObtain the <code>iso_year_last_two</code> component.\nThe last two digits of the ISO week year.\nIndicates whether a leap second is permitted to be parsed. …\nObtain the <code>minute</code> component.\nMinute within the hour.\nObtain the <code>monday_week_number</code> component.\nWeek of the year, where week one begins on the first …\nObtain the <code>month</code> component.\nMonth of the year.\nCreate a new instance of <code>Parsed</code> with no information known.\nObtain the <code>offset_hour</code> component.\nWhole hours of the UTC offset.\nIndicates whether the <code>UtcOffset</code> is negative. This …\nMinutes within the hour of the UTC offset.\nObtain the <code>offset_minute</code> component.\nSeconds within the minute of the UTC offset.\nObtain the <code>offset_second</code> component.\nObtain the <code>ordinal</code> component.\nDay of the year.\nParse a single component, mutating the struct. The …\nParse a single <code>BorrowedFormatItem</code> or <code>OwnedFormatItem</code>, …\nParse a sequence of <code>BorrowedFormatItem</code>s or <code>OwnedFormatItem</code>…\nParse a literal byte sequence. The remaining input is …\nSealed to prevent downstream implementations.\nObtain the <code>second</code> component.\nSecond within the minute.\nSet the <code>set_day</code> component.\nSet the <code>set_hour_12</code> component.\nSet the <code>set_hour_12_is_pm</code> component.\nSet the <code>set_hour_24</code> component.\nSet the <code>set_iso_week_number</code> component.\nSet the <code>set_iso_year</code> component.\nSet the <code>set_iso_year_last_two</code> component.\nSet the <code>set_minute</code> component.\nSet the <code>set_monday_week_number</code> component.\nSet the <code>set_month</code> component.\nSet the <code>set_offset_hour</code> component.\nSet the <code>set_offset_minute_signed</code> component.\nSet the <code>set_offset_second_signed</code> component.\nSet the <code>set_ordinal</code> component.\nSet the <code>set_second</code> component.\nSet the <code>set_subsecond</code> component.\nSet the <code>set_sunday_week_number</code> component.\nSet the <code>set_unix_timestamp_nanos</code> component.\nSet the <code>set_weekday</code> component.\nSet the <code>set_year</code> component.\nSet the <code>set_year_last_two</code> component.\nGenerate setters based on the builders.\nObtain the <code>subsecond</code> component.\nNanosecond within the second.\nObtain the <code>sunday_week_number</code> component.\nWeek of the year, where week one begins on the first …\nObtain the <code>unix_timestamp_nanos</code> component.\nThe Unix timestamp in nanoseconds.\nObtain the <code>weekday</code> component.\nDay of the week.\nSet the <code>day</code> component and return <code>self</code>.\nSet the <code>hour_12</code> component and return <code>self</code>.\nSet the <code>hour_12_is_pm</code> component and return <code>self</code>.\nSet the <code>hour_24</code> component and return <code>self</code>.\nSet the <code>iso_week_number</code> component and return <code>self</code>.\nSet the <code>iso_year</code> component and return <code>self</code>.\nSet the <code>iso_year_last_two</code> component and return <code>self</code>.\nSet the <code>minute</code> component and return <code>self</code>.\nSet the <code>monday_week_number</code> component and return <code>self</code>.\nSet the <code>month</code> component and return <code>self</code>.\nSet the <code>offset_hour</code> component and return <code>self</code>.\nSet the <code>offset_minute</code> component and return <code>self</code>.\nSet the <code>offset_second</code> component and return <code>self</code>.\nSet the <code>ordinal</code> component and return <code>self</code>.\nSet the <code>second</code> component and return <code>self</code>.\nSet the <code>subsecond</code> component and return <code>self</code>.\nSet the <code>sunday_week_number</code> component and return <code>self</code>.\nSet the <code>unix_timestamp_nanos</code> component and return <code>self</code>.\nSet the <code>weekday</code> component and return <code>self</code>.\nSet the <code>year</code> component and return <code>self</code>.\nSet the <code>year_last_two</code> component and return <code>self</code>.\nObtain the <code>year</code> component.\nCalendar year.\nObtain the <code>year_last_two</code> component.\nThe last two digits of the calendar year.\nA trait to allow <code>parse_item</code> to be generic.\nParse a single item, returning the remaining input on …\nMarker trait for all integer types, including <code>NonZero*</code>\nEquivalent of <code>foo.parse()</code> for slices.\nParse the given types from bytes.\nParse the given types from bytes.\nThe largest value that can be represented by …\nThe smallest value that can be represented by …\nCombined date and time.\nPanics\nPanics\nPanics\nPanics\nGet the clock hour, minute, and second.\nGet the clock hour, minute, second, and microsecond.\nGet the clock hour, minute, second, and millisecond.\nGet the clock hour, minute, second, and nanosecond.\nAssuming that the existing <code>PrimitiveDateTime</code> represents a …\nAssuming that the existing <code>PrimitiveDateTime</code> represents a …\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nGet the <code>Date</code> component of the <code>PrimitiveDateTime</code>.\nGet the day of the date.\nFormat the <code>PrimitiveDateTime</code> using the provided format …\nFormat the <code>PrimitiveDateTime</code> using the provided format …\nReturns the argument unchanged.\nGet the clock hour.\nCalls <code>U::from(self)</code>.\nGet the ISO week number.\nGet the microseconds within the second.\nGet the milliseconds within the second.\nGet the minute within the hour.\nGet the week number where week 1 begins on the first …\nGet the month of the date.\nGet the nanoseconds within the second.\nCreate a new <code>PrimitiveDateTime</code> from the provided <code>Date</code> and …\nGet the day of the year.\nParse a <code>PrimitiveDateTime</code> from the input using the …\nReplace the date, preserving the time.\nReplace the day of the month.\nReplace the clock hour.\nReplace the microseconds within the second.\nReplace the milliseconds within the second.\nReplace the minutes within the hour.\nReplace the month of the year.\nReplace the nanoseconds within the second.\nReplace the day of the year.\nReplace the seconds within the minute.\nReplace the time, preserving the date.\nReplace the year. The month and day will be unchanged.\nComputes <code>self + duration</code>, saturating value on overflow.\nComputes <code>self - duration</code>, saturating value on overflow.\nGet the second within the minute.\nPanics\nPanics\nPanics\nPanics\nPanics\nGet the week number where week 1 begins on the first …\nGet the <code>Time</code> component of the <code>PrimitiveDateTime</code>.\nGet the year, month, and day.\nGet the ISO 8601 year, week number, and weekday.\nGet the Julian day for the date. The time is not taken …\nGet the year and ordinal day number.\nGet the weekday.\nGet the year of the date.\nThe format used when serializing and deserializing a …\nThe format used when serializing and deserializing a …\nThe format used when serializing and deserializing a …\nThe format used when serializing and deserializing a …\nThe format used when serializing and deserializing a …\nGenerate a custom serializer and deserializer from a …\nUse the well-known ISO 8601 format when serializing and …\nConsume the next item in a sequence.\nUse the well-known RFC2822 format when serializing and …\nUse the well-known RFC3339 format when serializing and …\nTreat an <code>OffsetDateTime</code> as a Unix timestamp for the …\nSerde visitor for various types.\nThe configuration of ISO 8601 used for serde …\nDeserialize an <code>OffsetDateTime</code> from its ISO 8601 …\nUse the well-known ISO 8601 format when serializing and …\nSerialize an <code>OffsetDateTime</code> using the well-known ISO 8601 …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its ISO 8601 …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> using the well-known …\nDeserialize an <code>OffsetDateTime</code> from its RFC2822 …\nUse the well-known RFC2822 format when serializing and …\nSerialize an <code>OffsetDateTime</code> using the well-known RFC2822 …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its RFC2822 …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> using the well-known …\nDeserialize an <code>OffsetDateTime</code> from its RFC3339 …\nUse the well-known RFC3339 format when serializing and …\nSerialize an <code>OffsetDateTime</code> using the well-known RFC3339 …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its RFC3339 …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> using the well-known …\nDeserialize an <code>OffsetDateTime</code> from its Unix timestamp\nTreat an <code>OffsetDateTime</code> as a Unix timestamp with …\nTreat an <code>OffsetDateTime</code> as a Unix timestamp with …\nTreat an <code>OffsetDateTime</code> as a Unix timestamp with …\nTreat an <code>Option&lt;OffsetDateTime&gt;</code> as a Unix timestamp for …\nSerialize an <code>OffsetDateTime</code> as its Unix timestamp\nDeserialize an <code>OffsetDateTime</code> from its Unix timestamp with …\nTreat an <code>Option&lt;OffsetDateTime&gt;</code> as a Unix timestamp with …\nSerialize an <code>OffsetDateTime</code> as its Unix timestamp with …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its Unix …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> as its Unix timestamp …\nDeserialize an <code>OffsetDateTime</code> from its Unix timestamp with …\nTreat an <code>Option&lt;OffsetDateTime&gt;</code> as a Unix timestamp with …\nSerialize an <code>OffsetDateTime</code> as its Unix timestamp with …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its Unix …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> as its Unix timestamp …\nDeserialize an <code>OffsetDateTime</code> from its Unix timestamp with …\nTreat an <code>Option&lt;OffsetDateTime&gt;</code> as a Unix timestamp with …\nSerialize an <code>OffsetDateTime</code> as its Unix timestamp with …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its Unix …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> as its Unix timestamp …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its Unix …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> as its Unix timestamp\nA serde visitor for various types.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplement a visitor for a well-known format.\nA method to obtain the local offset from UTC.\nGet the system’s UTC offset on Unix.\nAttempt to obtain the system’s UTC offset. If the offset …\nWhether the operating system has a thread-safe …\nObtain the system’s UTC offset.\nConvert the given Unix timestamp to a <code>libc::tm</code>. Returns …\nConvert a <code>libc::tm</code> to a <code>UtcOffset</code>. Returns <code>None</code> on any …\nThe type of the <code>hour</code> field of <code>Time</code>.\nThe largest value that can be represented by <code>Time</code>.\nCreate a <code>Time</code> that is exactly midnight.\nThe smallest value that can be represented by <code>Time</code>.\nThe type of the <code>minute</code> field of <code>Time</code>.\nThe type of the <code>nanosecond</code> field of <code>Time</code>.\nBy explicitly inserting this enum where padding is …\nThe type of the <code>second</code> field of <code>Time</code>.\nThe clock time within a given date. Nanosecond precision.\nAdd the sub-day time of the <code>Duration</code> to the <code>Time</code>. Wraps on …\nAdd the sub-day time of the <code>std::time::Duration</code> to the <code>Time</code>…\nAdd the sub-day time of the <code>Duration</code> to the <code>Time</code>. Wraps on …\nAdd the sub-day time of the <code>std::time::Duration</code> to the <code>Time</code>…\nSubtract the sub-day time of the <code>Duration</code> to the <code>Time</code>. …\nSubtract the sub-day time of the <code>std::time::Duration</code> to …\nGet the clock hour, minute, and second.\nGet the clock hour, minute, second, and microsecond.\nGet the clock hour, minute, second, and millisecond.\nGet the clock hour, minute, second, and nanosecond.\nProvides an u64 based representation <strong>of the correct </strong>…\nFormat the <code>Time</code> using the provided format description.\nFormat the <code>Time</code> using the provided format description.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to create a <code>Time</code> from the hour, minute, and second.\nAttempt to create a <code>Time</code> from the hour, minute, second, …\nAttempt to create a <code>Time</code> from the hour, minute, second, …\nAttempt to create a <code>Time</code> from the hour, minute, second, …\nCreate a <code>Time</code> from the hour, minute, second, and …\nGet the clock hour.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the microseconds within the second.\nGet the milliseconds within the second.\nGet the minute within the hour.\nGet the nanoseconds within the second.\nParse a <code>Time</code> from the input using the provided format …\nReplace the clock hour.\nReplace the microseconds within the second.\nReplace the milliseconds within the second.\nReplace the minutes within the hour.\nReplace the nanoseconds within the second.\nReplace the seconds within the minute.\nGet the second within the minute.\nSubtract the sub-day time of the <code>std::time::Duration</code> from …\nSubtract the sub-day time of the <code>Duration</code> from the <code>Time</code>. …\nSubtract two <code>Time</code>s, returning the <code>Duration</code> between. This …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe value to use when formatting the subsecond. Leading …\nHow many characters wide the formatted subsecond is.\nThe type of the <code>hours</code> field of <code>UtcOffset</code>.\nThe type of the <code>minutes</code> field of <code>UtcOffset</code>.\nThe type of the <code>seconds</code> field of <code>UtcOffset</code>.\nA <code>UtcOffset</code> that is UTC.\nAn offset from UTC.\nThe type capable of storing the range of whole seconds …\nObtain the UTC offset as its hours, minutes, and seconds. …\nAttempt to obtain the system’s current UTC offset. If …\nFormat the <code>UtcOffset</code> using the provided format description.\nFormat the <code>UtcOffset</code> using the provided format description.\nReturns the argument unchanged.\nCreate a <code>UtcOffset</code> representing an offset by the number of …\nCreate a <code>UtcOffset</code> representing an offset by the number of …\nCreate a <code>UtcOffset</code> representing an offset of the hours, …\nCreate a <code>UtcOffset</code> representing an offset by the number of …\nCreate a <code>UtcOffset</code> representing an offset by the number of …\nCalls <code>U::from(self)</code>.\nCheck if the offset is negative, or west of UTC.\nCheck if the offset is positive, or east of UTC.\nCheck if the offset is exactly UTC.\nAttempt to obtain the system’s UTC offset at a known …\nObtain the number of minutes past the hour the offset is …\nParse a <code>UtcOffset</code> from the input using the provided format …\nObtain the number of seconds past the minute the offset is …\nObtain the number of whole hours the offset is from UTC. A …\nObtain the number of whole minutes the offset is from UTC. …\nObtain the number of whole seconds the offset is from UTC. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether to adjust the date, and in which direction. Useful …\nThe next day should be used.\nThe date should be used as-is.\nThe previous day should be used.\nGet the number of calendar days in a given year.\nGet the number of days in the month of a given year.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns if the provided year is a leap year in the …\nUtility functions relating to the local UTC offset.\nGet the number of weeks in the ISO year.\nWhether obtaining the local UTC offset is required to be …\nObtaining the local UTC offset is required to be sound. …\nThe soundness of obtaining the local UTC offset.\nObtaining the local UTC offset is allowed to invoke …\nReturns the argument unchanged.\nObtains the soundness of obtaining the local UTC offset. …\nCalls <code>U::from(self)</code>.\nSet whether obtaining the local UTC offset is allowed to …\nDays of the week.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the next weekday.\nGet n-th next day.\nGet n-th previous day.\nGet the zero-indexed number of days from Monday.\nGet the zero-indexed number of days from Sunday.\nGet the one-indexed number of days from Monday.\nGet the one-indexed number of days from Sunday.\nGet the previous weekday.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")