searchState.loadedDescShard("arrayvec", 0, "<strong>arrayvec</strong> provides the types <code>ArrayVec</code> and <code>ArrayString</code>:  …\nA string with a fixed capacity.\nA vector with a fixed capacity.\nError value indicating insufficient capacity\nA draining iterator for <code>ArrayVec</code>.\nBy-value iterator for <code>ArrayVec</code>.\nCurrent remaining range to remove\nLength of tail\nIndex of tail to preserve\nA string with a fixed capacity.\nReturn a raw mutable pointer to the string’s buffer.\nReturn a mutable string slice of the whole <code>ArrayString</code>.\nReturn a raw pointer to the string’s buffer.\nReturn a string slice of the whole <code>ArrayString</code>.\nReturn the capacity of the <code>ArrayString</code>.\nMake the string empty.\nReturn an empty <code>ArrayString</code>\nReturns the argument unchanged.\nCreate a new <code>ArrayString</code> from a <code>str</code>.\nCreate a new <code>ArrayString</code> from a byte string literal.\nCalls <code>U::from(self)</code>.\nReturns whether the string is empty.\nReturn if the <code>ArrayString</code> is completely filled.\nReturn the length of the string.\nCreate a new empty <code>ArrayString</code>.\nCreate a new empty <code>ArrayString</code> (const fn).\nRemoves the last character from the string and returns it.\nAdds the given char to the end of the string.\nAdds the given string slice to the end of the string.\nReturns the capacity left in the <code>ArrayString</code>.\nRemoves a <code>char</code> from this <code>ArrayString</code> at a byte position …\nSet the strings’s length.\nShortens this <code>ArrayString</code> to the specified length.\nAdds the given char to the end of the string.\nAdds the given string slice to the end of the string.\nCreate a new <code>ArrayString</code> value fully filled with ASCII …\nA vector with a fixed capacity.\nCapacity\nA draining iterator for <code>ArrayVec</code>.\nBy-value iterator for <code>ArrayVec</code>.\nReturn a raw mutable pointer to the vector’s buffer.\nReturn a mutable slice containing all elements of the …\nReturns the remaining items of this iterator as a mutable …\nReturn a raw pointer to the vector’s buffer.\nReturn a slice containing all elements of the vector.\nReturns the remaining items of this iterator as a slice.\nReturn the capacity of the <code>ArrayVec</code>.\nRemove all elements in the vector.\nReturn an empty array\nCreate a draining iterator that removes the specified …\nExtend the <code>ArrayVec</code> with an iterator.\nExtend the arrayvec from the iterable.\nExtend the ArrayVec with clones of elements from the slice;\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>ArrayVec</code> from an iterator.\nGet pointer to where element at <code>index</code> would be\nInsert <code>element</code> at position <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner fixed size array, if it is full to its …\nReturn the inner fixed size array.\nReturns whether the <code>ArrayVec</code> is empty.\nReturn true if the <code>ArrayVec</code> is completely filled to its …\nCurrent remaining range to remove\nReturn the number of elements in the <code>ArrayVec</code>.\nCreate a new empty <code>ArrayVec</code>.\nCreate a new empty <code>ArrayVec</code> (const fn).\nRemove the last element in the vector and return it.\nRemove the element at <code>index</code> and shift down the following …\nPush <code>element</code> to the end of the vector.\nPush <code>element</code> to the end of the vector without checking the …\nRawptr add but uses arithmetic distance for ZST\nReturns the capacity left in the <code>ArrayVec</code>.\nRemove the element at <code>index</code> and shift down the following …\nRetains only the elements specified by the predicate.\nSet the vector’s length without dropping or moving out …\nRemove the element at <code>index</code> and swap the last element into …\nRemove the element at <code>index</code> and swap the last element into …\nLength of tail\nIndex of tail to preserve\nReturns the ArrayVec, replacing the original with a new …\nShortens the vector, keeping the first <code>len</code> elements and …\nCopy all elements from the slice and append to the <code>ArrayVec</code>…\nInsert <code>element</code> at position <code>index</code>.\nPush <code>element</code> to the end of the vector.\nImplements basic arrayvec methods - based on a few …\nReturn a raw mutable pointer to the vector’s buffer.\nReturn a mutable slice containing all elements of the …\nReturn a raw pointer to the vector’s buffer.\nReturn a slice containing all elements of the vector.\nPlaceholder\nEncode a char into buf using UTF-8.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError value indicating insufficient capacity\nExtract the overflowing element\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>CapacityError</code> from <code>element</code>.\nConvert into a <code>CapacityError</code> that does not carry an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")