searchState.loadedDescShard("tokio", 1, "Channel receiver.\nFields only accessed by <code>Rx</code> handle.\nChannel sender.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChannel receiver. This field is only accessed by the …\nNotifies all tasks listening for the receiver being …\nReceive the next value\nReceives up to <code>limit</code> values into <code>buffer</code>\n<code>true</code> if <code>Rx::close</code> is called.\nOnly accessed by <code>Rx</code> handle.\nReceiver waker. Notified when a value is pushed into the …\nReturns <code>true</code> if senders belong to the same channel.\nCoordinates access to channel’s capacity.\nSend a message and notify the receiver.\nTry to receive the next value.\nHandle to the push half of the lock-free list.\nTracks the number of outstanding sender handles.\nTracks the number of outstanding weak sender handles.\nWake the receive half\nThe receive half of the channel was explicitly closed or …\nThe receive half of the channel was explicitly closed or …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the channel because the …\nError returned by the <code>Sender</code>.\nError returned by <code>Sender::send_timeout</code>].\nThe data could not be sent on the channel because the …\nError returned by <code>try_recv</code>.\nThis enumeration is the list of the possible error …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the <code>TrySendError</code>, returning the unsent value.\nConsume the <code>SendTimeoutError</code>, returning the unsent value.\nThe channel is not empty, but the first value is being …\nThe channel is empty and closed.\nThe channel is empty.\nSuccessfully popped a value.\nList queue receive handle\nReturn value of <code>Rx::try_pop</code>.\nList queue transmit handle.\nTail in the <code>Block</code> mpmc list.\nCloses the send half of the list.\nEffectively <code>Drop</code> all the blocks. Should only be called …\nPointer to the next block pending release.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPointer to the block being processed.\nNext slot index to process.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPops the next value off the queue.\nPushes a value into the list.\nPosition to push the next message. This references a block …\nTries advancing the block pointer to the block referenced …\nPops the next value off the queue, detecting whether the …\nNo capacity\nReceive values from the associated <code>UnboundedSender</code>.\nSend values to the associated <code>UnboundedReceiver</code>.\nAn unbounded sender that does not prevent the channel from …\nBlocking receive to call outside of asynchronous contexts.\nVariant of <code>Self::recv_many</code> for blocking contexts.\nThe channel receiver\nCloses the receiving half of a channel, without dropping …\nCompletes when the receiver has dropped.\nConverts the <code>UnboundedSender</code> to a <code>WeakUnboundedSender</code> that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the channel has been closed. This happens when …\nChecks if a channel is closed.\nChecks if a channel is empty.\nReturns the number of messages in the channel.\nPolls to receive the next message on this channel.\nPolls to receive multiple messages on this channel, …\nReceives the next value for this receiver.\nReceives the next values for this receiver and extends …\nReturns <code>true</code> if senders belong to the same channel.\nAttempts to send a message on this <code>UnboundedSender</code> without …\nReturns the number of <code>UnboundedSender</code> handles.\nReturns the number of <code>WeakUnboundedSender</code> handles.\nReturns the number of <code>UnboundedSender</code> handles.\nReturns the number of <code>UnboundedSender</code> handles.\nTries to receive the next value for this receiver.\nCreates an unbounded mpsc channel for communicating …\nTries to convert a <code>WeakUnboundedSender</code> into an …\nReturns the number of <code>WeakUnboundedSender</code> handles.\nReturns the number of <code>WeakUnboundedSender</code> handles.\nA handle to a held <code>Mutex</code> that has had a function applied …\nA helper type used when taking apart a <code>MappedMutexGuard</code> …\nAn asynchronous <code>Mutex</code>-like type.\nA handle to a held <code>Mutex</code>. The guard can be held across any …\nA helper type used when taking apart a <code>MutexGuard</code> without …\nA owned handle to a held <code>Mutex</code> that has had a function …\nA helper type used when taking apart a …\nAn owned handle to a held <code>Mutex</code>.\nA helper type used when taking apart a <code>OwnedMutexGuard</code> …\nError returned from the <code>Mutex::try_lock</code>, <code>RwLock::try_read</code> …\nBlockingly locks this <code>Mutex</code>. When the lock has been …\nBlockingly locks this <code>Mutex</code>. When the lock has been …\nCreates a new lock in an unlocked state ready for use.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the mutex, returning the underlying data.\nLocks this mutex, causing the current task to yield until …\nLocks this mutex, causing the current task to yield until …\nMakes a new <code>MappedMutexGuard</code> for a component of the locked …\nMakes a new <code>OwnedMappedMutexGuard</code> for a component of the …\nMakes a new <code>MappedMutexGuard</code> for a component of the locked …\nMakes a new <code>OwnedMappedMutexGuard</code> for a component of the …\nReturns a reference to the original <code>Mutex</code>.\nReturns a reference to the original <code>Arc&lt;Mutex&gt;</code>.\nCreates a new lock in an unlocked state ready for use.\nAttempts to acquire the lock, and returns <code>TryLockError</code> if …\nAttempts to acquire the lock, and returns <code>TryLockError</code> if …\nAttempts to make a new <code>MappedMutexGuard</code> for a component of …\nAttempts to make a new <code>OwnedMappedMutexGuard</code> for a …\nAttempts to make a new <code>MappedMutexGuard</code> for a component of …\nAttempts to make a new <code>OwnedMappedMutexGuard</code> for a …\nNotification for a <code>Waiter</code>. This struct is equivalent to …\nInitial “idle” state.\nPending notification.\nFuture returned from <code>Notify::notified()</code>.\nNotifies a single task to wake up.\nList used in <code>Notify::notify_waiters</code>. It wraps a guarded …\nOne or more threads are currently waiting to be notified.\nNode type marker.\nNode type marker.\nShould not be <code>Unpin</code>.\nClears the notification. This method is used by a <code>Notified</code> …\nCreate a new <code>Notify</code>, initialized without a permit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPointer to the guard node.\nLinked list head\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Notify</code>, initialized without a permit.\nNotification for this waiter. Uses 2 bits to store if and …\nWait for a notification.\nThe <code>Notify</code> being received on.\nNotifies the last waiting task.\nNotifies the first waiting task.\nNotifies all waiting tasks.\nNumber of calls to <code>notify_waiters</code> at the time of creation.\nIntrusive linked-list pointers.\nRemoves the last element from the guarded list. Modifying …\nThe current state of the receiving process.\nStore-release a notification. This method should be called …\nLinked list tail\nEntry in the waiter <code>LinkedList</code>.\nWaiting task’s waker. Depending on the value of …\nThe cell was already initialized when <code>OnceCell::set</code> was …\nThe cell is currently being initialized.\nA thread-safe cell that can be written to only once.\nErrors that can be returned from <code>OnceCell::set</code>.\nCreates a new empty <code>OnceCell</code> instance.\nCreates a new <code>OnceCell</code> that contains the provided value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value currently stored in the …\nReturns a mutable reference to the value currently stored …\nGets the value currently in the <code>OnceCell</code>, or initialize it …\nGets the value currently in the <code>OnceCell</code>, or initialize it …\nReturns <code>true</code> if the <code>OnceCell</code> currently contains a value, …\nReturns <code>true</code> if the <code>OnceCell</code> currently contains a value, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes the value from the cell, destroying the cell in the …\nWhether <code>SetError</code> is <code>SetError::AlreadyInitializedError</code>.\nWhether <code>SetError</code> is <code>SetError::InitializingError</code>\nCreates a new empty <code>OnceCell</code> instance.\nCreates a new <code>OnceCell</code> that contains the provided value, …\nSets the value of the <code>OnceCell</code> to the given value if the …\nTakes ownership of the current value, leaving the cell …\nIndicates that a waker for the receiving task has been set.\nReceives a value from the associated <code>Sender</code>.\nSends a value to the associated <code>Receiver</code>.\nIndicates that a waker for the sending task has been set.\nIndicates that a value has been stored in the channel’s …\nBlocking receive to call outside of asynchronous contexts.\nCreates a new one-shot channel for sending single values …\nCalled by <code>Receiver</code> to indicate that the value will never …\nPrevents the associated <code>Sender</code> handle from sending a value.\nWaits for the associated <code>Receiver</code> handle to close.\nConsumes the value. This function does not check <code>state</code>.\n<code>Oneshot</code> error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the associated <code>Receiver</code> handle has been …\nChecks whether the <code>oneshot</code> channel has been closed, and if …\nThe task to notify when the value is sent.\nAttempts to send a value on this channel, returning it …\nManages the state of the inner cell.\nAttempts to receive a value.\nThe task to notify when the receiver drops without …\nThe value. This is set by <code>Sender</code> and read by <code>Receiver</code>. The …\nThe send half of the channel was dropped without sending a …\nThe send half of the channel has not yet sent a value.\nError returned by the <code>Future</code> implementation for <code>Receiver</code>.\nError returned by the <code>try_recv</code> function on <code>Receiver</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn asynchronous reader-writer lock.\nBlockingly locks this <code>RwLock</code> with shared read access.\nBlockingly locks this <code>RwLock</code> with exclusive write access.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked …\nReturns the argument unchanged.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nConsumes the lock, returning the underlying data.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nLocks this <code>RwLock</code> with shared read access, causing the …\nLocks this <code>RwLock</code> with shared read access, causing the …\nAttempts to acquire this <code>RwLock</code> with shared read access.\nAttempts to acquire this <code>RwLock</code> with shared read access.\nAttempts to acquire this <code>RwLock</code> with exclusive write …\nAttempts to acquire this <code>RwLock</code> with exclusive write …\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked …\nLocks this <code>RwLock</code> with exclusive write access, causing the …\nLocks this <code>RwLock</code> with exclusive write access, causing the …\nOwned RAII structure used to release the shared read …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes a new <code>OwnedRwLockReadGuard</code> for a component of the …\nReturns a reference to the original <code>Arc&lt;RwLock&gt;</code>.\nAttempts to make a new <code>OwnedRwLockReadGuard</code> for a …\nOwned RAII structure used to release the exclusive write …\nAtomically downgrades a write lock into a read lock …\nMakes a new <code>OwnedRwLockReadGuard</code> for a component of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>OwnedRwLockWriteGuard</code> into an …\nMakes a new <code>OwnedRwLockMappedWriteGuard</code> for a component of …\nReturns a reference to the original <code>Arc&lt;RwLock&gt;</code>.\nAttempts to make a new <code>OwnedRwLockReadGuard</code> for a …\nAttempts to make a new <code>OwnedRwLockMappedWriteGuard</code> for a …\nOwned RAII structure used to release the exclusive write …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes a new <code>OwnedRwLockMappedWriteGuard</code> for a component of …\nReturns a reference to the original <code>Arc&lt;RwLock&gt;</code>.\nAttempts to make a new <code>OwnedRwLockMappedWriteGuard</code> for a …\nRAII structure used to release the shared read access of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes a new <code>RwLockReadGuard</code> for a component of the locked …\nAttempts to make a new <code>RwLockReadGuard</code> for a component of …\nRAII structure used to release the exclusive write access …\nAtomically downgrades a write lock into a read lock …\nMakes a new <code>RwLockReadGuard</code> for a component of the locked …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>RwLockWriteGuard</code> into an …\nMakes a new <code>RwLockMappedWriteGuard</code> for a component of the …\nAttempts to make a new <code>RwLockReadGuard</code> for a component of …\nAttempts to make a new <code>RwLockMappedWriteGuard</code> for a …\nRAII structure used to release the exclusive write access …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes a new <code>RwLockMappedWriteGuard</code> for a component of the …\nAttempts to make a new <code>RwLockMappedWriteGuard</code> for a …\nThe maximum number of permits which a semaphore can hold. …\nAn owned permit from the semaphore.\nCounting semaphore performing asynchronous permit …\nA permit from the semaphore.\nAcquires a permit from the semaphore.\nAcquires <code>n</code> permits from the semaphore.\nAcquires <code>n</code> permits from the semaphore.\nAcquires a permit from the semaphore.\nAdds <code>n</code> new permits to the semaphore.\nReturns the current number of available permits.\nCloses the semaphore.\nCreates a new semaphore with the initial number of permits.\nCreates a new closed semaphore with 0 permits.\nForgets the permit <strong>without</strong> releasing it back to the …\nForgets the permit <strong>without</strong> releasing it back to the …\nDecrease a semaphore’s permits by a maximum of <code>n</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the semaphore is closed\nThe low level semaphore\nMerge two <code>SemaphorePermit</code> instances together, consuming …\nMerge two <code>OwnedSemaphorePermit</code> instances together, …\nCreates a new semaphore with the initial number of permits.\nCreates a new closed semaphore with 0 permits.\nReturns the number of permits held by <code>self</code>.\nReturns the number of permits held by <code>self</code>.\nReturns the <code>Semaphore</code> from which this permit was acquired.\nSplits <code>n</code> permits from <code>self</code> and returns a new …\nSplits <code>n</code> permits from <code>self</code> and returns a new …\nTries to acquire a permit from the semaphore.\nTries to acquire <code>n</code> permits from the semaphore.\nTries to acquire <code>n</code> permits from the semaphore.\nTries to acquire a permit from the semaphore.\nA synchronization primitive for task waking.\nA new waker value is being registered with the <code>AtomicWaker</code> …\nIdle state.\nThe task currently registered with the <code>AtomicWaker</code> cell is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate an <code>AtomicWaker</code>\nRegisters the provided waker to be notified on calls to …\nAttempts to take the <code>Waker</code> value out of the <code>AtomicWaker</code> …\nWakes the task that last called <code>register</code>.\nReceives values from the associated <code>Sender</code>.\nReturns a reference to the inner value.\nSends values to the associated <code>Receiver</code>.\nReturns a reference to the most recently sent value.\nReturns a reference to the most recently sent value\nReturns a reference to the most recently sent value and …\nWaits for a change notification, then marks the newest …\nCreates a new watch channel, returning the “send” and …\nCompletes when all receivers have dropped.\nWatch error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks if this channel contains a message that this …\nIndicates if the borrowed value is considered as <em>changed</em> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the channel has been closed. This happens when …\nMarks the state as changed.\nMarks the state as unchanged.\nCreates the sending-half of the <code>watch</code> channel.\nNotifies waiting receivers that the value changed.\nNotifies any task listening for <code>Receiver</code> dropped events.\nReturns the number of receivers that currently exist.\nTracks the number of <code>Receiver</code> instances.\nTracks the number of <code>Sender</code> instances.\nReturns <code>true</code> if receivers belong to the same channel.\nReturns <code>true</code> if senders belong to the same channel.\nSends a new value via the channel, notifying all receivers.\nModifies the watched value <strong>conditionally</strong> in-place, …\nModifies the watched value <strong>unconditionally</strong> in-place, …\nSends a new value via the channel, notifying all receivers …\nReturns the number of senders that currently exist.\nPointer to the shared state\nThe current version.\nCreates a new <code>Receiver</code> connected to this <code>Sender</code>.\nThe most recent value.\nLast observed version\nWaits for a value that satisfies the provided condition.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis function implements the case where randomness is …\nError produced when receiving a change notification.\nError produced when sending a value fails.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe state stored in an atomic integer.\nSnapshot of the state. The first bit is used as the CLOSED …\nThe version part of the state. The lowest bit is always …\nDecrements the version.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrement the version counter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the closed bit set?\nLoad the current value of the state.\nCreate a new <code>AtomicState</code> that is not closed and which has …\nSet the closed bit in the state.\nExtract the version from the state.\nAn owned permission to abort a spawned task, without …\nAn opaque ID that uniquely identifies a task relative to …\nTask failed to execute to completion.\nAn owned permission to join on a task (await its …\nA collection of tasks spawned on a Tokio runtime.\nContext guard for <code>LocalSet</code>\nA key for task-local data.\nA set of tasks which are executed on the same thread.\nFuture for the <code>unconstrained</code> method.\nThis type should not be Send.\nRuns the provided blocking function on the current thread …\nConsumes a unit of budget and returns the execution back …\nState available from thread-local.\nTask-related futures.\nReturns the <code>Id</code> of the currently running task.\nA collection of tasks spawned on a Tokio runtime.\nRuns <code>!Send</code> futures on the current thread.\nSpawns a new asynchronous task, returning a <code>JoinHandle</code> for …\nRuns the provided closure on a thread where blocking is …\nSpawns a <code>!Send</code> future on the current <code>LocalSet</code> or …\nCurrent scheduler tick.\nReturns the <code>Id</code> of the currently running task, or <code>None</code> if …\nTurn off cooperative scheduling for a future. The future …\nDistinguishes whether the context was entered or being …\nYields execution back to the Tokio runtime.\nRuns the provided blocking function on the current thread …\nRuns the provided closure on a thread where blocking is …\nConsumes a unit of budget and returns the execution back …\nA future that sets a value <code>T</code> of a task local for the …\nA collection of tasks spawned on a Tokio runtime.\nAborts all tasks on this <code>JoinSet</code>.\nRemoves all tasks from this <code>JoinSet</code> without aborting them.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>JoinSet</code> is empty.\nAwaits the completion of all tasks in this <code>JoinSet</code>, …\nWaits until one of the tasks in the set completes and …\nWaits until one of the tasks in the set completes and …\nReturns the number of tasks currently in the <code>JoinSet</code>.\nCreate a new <code>JoinSet</code>.\nPolls for one of the tasks in the set to complete.\nPolls for one of the tasks in the set to complete.\nAborts all tasks and waits for them to finish shutting …\nSpawn the provided task on the <code>JoinSet</code>, returning an …\nSpawn the blocking code on the blocking threadpool and …\nSpawn the blocking code on the blocking threadpool of the …\nSpawn the provided task on the current <code>LocalSet</code> and store …\nSpawn the provided task on the provided <code>LocalSet</code> and store …\nSpawn the provided task on the provided runtime and store …\nTries to join one of the tasks in the set that has …\nTries to join one of the tasks in the set that has …\nState available from the thread-local.\nInitial queue capacity.\nA guard for <code>LocalData::enter()</code>\nContext guard for <code>LocalSet</code>\nA set of tasks which are executed on the same thread.\nTracks the <code>LocalSet</code> state that must only be accessed from …\nMax number of tasks to poll per tick.\nHow often it check the remote queue first.\n<code>LocalSet</code> state shared between threads.\nThis type should not be Send.\nRuns a future to completion on the provided runtime, …\nState available from thread-local.\nShould be called except when we call <code>LocalSet::enter</code>. …\nEnters the context of this <code>LocalSet</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocal run queue sender and receiver.\nSafety\nReturns a new local task set.\nCollection of all active tasks spawned onto this executor.\nReturns true if the <code>LocalSet</code> does not have any spawned …\nThe <code>ThreadId</code> of the thread that owns the <code>LocalSet</code>.\nRemote run queue sender.\nRuns a future to completion on the local set, returning …\nSchedule the provided task on the scheduler.\nState shared between threads.\nSpawns a <code>!Send</code> future on the current <code>LocalSet</code> or …\nSpawns a <code>!Send</code> task onto the local task set.\nTicks the scheduler, returning whether the local future …\nCurrent scheduler tick.\nTrue if a task panicked without being handled and the …\nDistinguishes whether the context was entered or being …\nWake the <code>LocalSet</code> task.\nThis method is like <code>with</code>, but it just calls <code>f</code> without …\nSpawns a new asynchronous task, returning a <code>JoinHandle</code> for …\nAn error returned by <code>LocalKey::try_with</code>.\nA key for task-local data.\nA future that sets a value <code>T</code> of a task local for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a copy of the task-local value if the task-local …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets a value <code>T</code> as the task-local value for the future <code>F</code>.\nSets a value <code>T</code> as the task-local value for the closure <code>F</code>.\nReturns the value stored in the task local by this …\nAccesses the current task-local and runs the provided …\nAccesses the current task-local and runs the provided …\nFuture for the <code>unconstrained</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTurn off cooperative scheduling for a future. The future …\nYields execution back to the Tokio runtime.\nTicks as fast as possible until caught up.\nTick at multiples of <code>period</code> from when <code>tick</code> was called, …\nA measurement of a monotonically nondecreasing clock. …\nInterval returned by <code>interval</code> and <code>interval_at</code>.\nDefines the behavior of an <code>Interval</code> when it misses a tick.\nSkips missed ticks and tick on the next multiple of <code>period</code> …\nFuture returned by <code>sleep</code> and <code>sleep_until</code>.\nFuture returned by <code>timeout</code> and <code>timeout_at</code>.\nSource of time abstraction.\nFuture that completes the next time the <code>Interval</code> yields a …\nTime error types.\nCreates new <code>Interval</code> that yields with interval of <code>period</code>. …\nCreates new <code>Interval</code> that yields with interval of <code>period</code> …\nThe strategy <code>Interval</code> should use when a tick is missed.\nThe duration between values yielded by <code>Interval</code>.\nWaits until <code>duration</code> has elapsed.\nWaits until <code>deadline</code> is reached.\nAllows a future to execute for a maximum amount of time.\nRequires a <code>Future</code> to complete before the specified …\nRequires a <code>Future</code> to complete before the specified instant …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nErrors returned by <code>Timeout</code>.\nErrors encountered by the timer implementation.\nCreates an error representing a timer at capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an error representing a misconfigured timer.\nReturns <code>true</code> if the error was caused by the timer being at …\nReturns <code>true</code> if the error was caused by the timer being …\nReturns <code>true</code> if the error was caused by the timer being …\nCreates an error representing a shutdown timer.\nA measurement of a monotonically nondecreasing clock. …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns the amount of time elapsed from another instant to …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed since this instant was …\nReturns the argument unchanged.\nCreate a <code>tokio::time::Instant</code> from a <code>std::time::Instant</code>.\nCalls <code>U::from(self)</code>.\nConvert the value into a <code>std::time::Instant</code>.\nReturns an instant corresponding to “now”.\nReturns the amount of time elapsed from another instant to …\nTicks as fast as possible until caught up.\nTick at multiples of <code>period</code> from when <code>tick</code> was called, …\nInterval returned by <code>interval</code> and <code>interval_at</code>.\nDefines the behavior of an <code>Interval</code> when it misses a tick.\nSkips missed ticks and tick on the next multiple of <code>period</code> …\nReturns <code>MissedTickBehavior::Burst</code>.\nFuture that completes the next time the <code>Interval</code> yields a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates new <code>Interval</code> that yields with interval of <code>period</code>. …\nCreates new <code>Interval</code> that yields with interval of <code>period</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>MissedTickBehavior</code> strategy currently being …\nThe strategy <code>Interval</code> should use when a tick is missed.\nIf a tick is missed, this method is called to determine …\nReturns the period of the interval.\nThe duration between values yielded by <code>Interval</code>.\nPolls for the next instant in the interval to be reached.\nResets the interval to complete one period after the …\nResets the interval after the specified <code>std::time::Duration</code>…\nResets the interval to a <code>crate::time::Instant</code> deadline.\nResets the interval immediately.\nSets the <code>MissedTickBehavior</code> strategy that should be used.\nCompletes when the next instant in the interval has been …\nFuture returned by <code>sleep</code> and <code>sleep_until</code>.\nReturns the instant at which the future will complete.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>Sleep</code> has elapsed.\nResets the <code>Sleep</code> instance to a new deadline.\nResets the <code>Sleep</code> instance to a new deadline without …\nWaits until <code>duration</code> has elapsed.\nWaits until <code>deadline</code> is reached.\nFuture returned by <code>timeout</code> and <code>timeout_at</code>.\nReturns the argument unchanged.\nGets a mutable reference to the underlying value in this …\nGets a reference to the underlying value in this timeout.\nCalls <code>U::from(self)</code>.\nConsumes this timeout, returning the underlying value.\nRequires a <code>Future</code> to complete before the specified …\nRequires a <code>Future</code> to complete before the specified instant …\nThis module defines an <code>IdleNotifiedSet</code>, which is a …\nAn intrusive double linked list of data.\nSearch for a byte in a byte array using libc.\nUtility for helping miri understand our exposed pointers.\nThis module contains a type that can make <code>Send + !Sync</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValue is packed in the <code>width</code> least-significant bits.\nReturns a <code>usize</code> with the right-most <code>n</code> bits set.\nMax representable value.\nValue is packed in the <code>width</code> more-significant bits.\nUnpacks a value using a mask &amp; shift.\nWidth, in bits, dedicated to storing the value.\nPads and aligns a value to the length of a cache line.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPads and aligns a value to the length of a cache line.\nError string explaining that the Tokio context hasn’t …\nError string explaining that the Tokio context is shutting …\nError string explaining that the Tokio context is not …\nA handle to an entry that is guaranteed to be stored in …\nThis is the main handle to the collection.\nWhich of the two lists in the shared Lists object is this …\nAn entry in the list.\nThe linked lists hold strong references to the <code>ListEntry</code> …\nNode type marker.\nRequired by the <code>linked_list::Pointers</code> field.\nRemove all entries in both lists, applying some function …\nCall a function on every element in this list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLinked list head\nInsert the given value into the <code>idle</code> list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nUsed to remember which list this entry is in.\nCreate a new <code>IdleNotifiedSet</code>.\nPointer to the shared <code>Lists</code> struct.\nThe linked list pointers of the list this entry is in.\nPop an entry from the notified list to poll it. The entry …\nRemove this entry from the list it is in, returning the …\nLinked list tail\nTries to pop an entry from the notified list to poll it. …\nThe value stored in this entry.\nWhenever an element in the <code>notified</code> list is woken, this …\nAccess the value in this entry together with a context for …\nAn intrusive linked list, but instead of keeping pointers …\nHandle to the list entry.\nDefines how a type is tracked within a linked list.\nAn intrusive linked list.\nPrevious / next pointers.\nWe do not want the compiler to put the <code>noalias</code> attribute …\nNode type.\nNode type marker.\nNode type marker.\nThis type is !Unpin due to the heuristic from: …\nConvert the handle to a raw pointer without consuming the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the raw pointer to a handle\nPointer to the guard node.\nLinked list head\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns a linked list into the guarded version by linking …\nReturns whether the linked list does not contain any node\nCreates an empty linked list.\nCreate a new set of empty pointers\nThe next node in the list. null if there is no previous …\nReturn the pointers for a node\nRemoves the last element from a list and returns it, or …\nRemoves the last element from a list and returns it, or …\nRemoves the first element from a list and returns it, or …\nThe previous node in the list. null if there is no …\nAdds an element first in the list.\nRemoves the specified node from the list\nLinked list tail\nMarker for types that are <code>Sync</code> but not <code>Send</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>AtomicU64</code> that is is a no-op on platforms without 64-bit …\n<code>AtomicUsize</code> for use in metrics.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nGet the value inside this cell, initializing it using the …\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFast random number generate.\nA seed for random number generation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes a new, thread-local, fast random number …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a random seed using loom internally.\nInitialize a new fast random number generator using the …\nReplaces the state of the random number generator with the …\nA deterministic generator for seeds (and other generators).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new generator from the provided seed.\nDirectly creates a generator using the next seed.\nReturns the next seed in the sequence.\nInternal state for the seed generator. We keep it in a …\nThis is exactly like <code>Cell&lt;Option&lt;Rc&lt;T&gt;&gt;&gt;</code>, except that it …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety: This method may not be called recursively.\nUsed to get the lock of shard.\nAn intrusive linked list supporting highly concurrent …\nDetermines which linked list an item should be stored in.\nGets the total number of elements added to this list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the linked list does not contain any node.\nGets the count of elements in this list.\nGets the lock of <code>ShardedList</code>, makes us have the write …\nCreates a new and empty sharded linked list with the …\nRemoves the last element from a list specified by <code>shard_id</code> …\nPush a value to this shard.\nRemoves the specified node from the list.\nGets the shard size of this <code>SharedList</code>.\nAttempt to downcast using <code>Any::downcast_ref()</code> to a type …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new unnamed spawn meta with the original size …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TryLock</code>\nAttempt to acquire lock\nSimplified waking interface based on Arcs.\nA <code>Waker</code> that is only valid for a given lifetime.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWake by value.\nWake by reference.\nCreates a reference to a <code>Waker</code> from a reference to …\nA list of wakers to be woken.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")