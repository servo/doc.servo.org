searchState.loadedDescShard("tokio", 0, "A runtime for writing reliable network applications …\nAsynchronous file utilities.\nAsynchronous values.\nTraits, helpers, and type definitions for asynchronous I/O …\nWaits on multiple concurrent branches, returning when <strong>all</strong> …\nThis module abstracts over <code>loom</code> and <code>std::sync</code> depending on …\nMarks async function to be executed by the selected …\nTCP/UDP/Unix bindings for <code>tokio</code>.\nPins a value on the stack.\nThe Tokio runtime.\nWaits on multiple concurrent branches, returning when the …\nDue to the <code>Stream</code> trait’s inclusion in <code>std</code> landing later …\nSynchronization primitives for use in asynchronous …\nAsynchronous green-threads.\nDeclares a new task-local key of type <code>tokio::task::LocalKey</code>…\nMarks async function to be executed by runtime, suitable …\nUtilities for tracking time.\nWaits on multiple concurrent branches, returning when <strong>all</strong> …\nA builder for creating directories in various manners.\nEntries returned by the <code>ReadDir</code> stream.\nA reference to an open file on the filesystem.\nOptions and flags which can be used to configure how a …\nReads the entries in a directory.\nReturns the canonical, absolute form of a path with all …\nCopies the contents of one file to another. This function …\nCreates a new, empty directory at the provided path.\nRecursively creates a directory and all of its parent …\nTypes for working with <code>File</code>.\nCreates a new hard link on the filesystem.\nGiven a path, queries the file system to get information …\nSets the Unix mode for newly created directories.\nReads the entire contents of a file into a bytes vector.\nReturns a stream over the entries within a directory.\nReads a symbolic link, returning the file that the link …\nCreates a future which will open a file for reading and …\nIndicates whether to create parent directories if they are …\nRemoves an existing, empty directory.\nRemoves a directory at this path, after removing all its …\nRemoves a file from the filesystem.\nRenames a file or directory to a new name, replacing the …\nChanges the permissions found on a file or a directory.\nCreates a new symbolic link on the filesystem.\nQueries the file system metadata for a path.\nReturns <code>Ok(true)</code> if the path points at an existing entity.\nCreates a future that will open a file for writing and …\nReturns the canonical, absolute form of a path with all …\nCopies the contents of one file to another. This function …\nCreates a new, empty directory at the provided path.\nRecursively creates a directory and all of its parent …\nA builder for creating directories in various manners.\nCreates the specified directory with the configured …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets the mode to create new directories with.\nSets the Unix mode for newly created directories.\nCreates a new set of options with default mode/security …\nIndicates whether to create directories recursively …\nIndicates whether to create parent directories if they are …\nA reference to an open file on the filesystem.\nOpens a file in write-only mode.\nOpens a file in read-write mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>std::fs::File</code> to a <code>tokio::fs::File</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestructures <code>File</code> into a <code>std::fs::File</code>. This function is …\nErrors from writes/flushes are returned in write/flush …\nQueries metadata about the underlying file.\nAttempts to open a file in read-only mode.\nReturns a new <code>OpenOptions</code> object.\nTruncates or extends the underlying file, updating the …\nSet the maximum buffer size for the underlying <code>AsyncRead</code> / …\nChanges the permissions on the underlying file.\nAttempts to sync all OS-internal metadata to disk.\nThis function is similar to <code>sync_all</code>, except that it may …\nCreates a new <code>File</code> instance that shares the same …\nTries to immediately destructure <code>File</code> into a <code>std::fs::File</code>.\nCreates a new hard link on the filesystem.\nGiven a path, queries the file system to get information …\nOptions and flags which can be used to configure how a …\nSets the option for the append mode.\nReturns a mutable reference to the underlying …\nSets the option for creating a new file.\nSets the option to always create a new file.\nPasses custom flags to the <code>flags</code> argument of <code>open</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets the mode bits that a new file will be created with.\nCreates a blank new set of options ready for configuration.\nOpens a file at <code>path</code> with the options specified by <code>self</code>.\nSets the option for read access.\nSets the option for truncating a previous file.\nSets the option for write access.\nReads the entire contents of a file into a bytes vector.\nEntries returned by the <code>ReadDir</code> stream.\nReads the entries in a directory.\nReturns a reference to the underlying <code>std::fs::DirEntry</code>.\nReturns the bare file name of this directory entry without …\nReturns the file type for the file that this entry points …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the metadata for the file that this entry points …\nReturns the next entry in the directory stream.\nReturns the full path to the file that this entry …\nPolls for the next directory entry in the stream.\nReturns a stream over the entries within a directory.\nReads a symbolic link, returning the file that the link …\nCreates a future which will open a file for reading and …\nRemoves an existing, empty directory.\nRemoves a directory at this path, after removing all its …\nRemoves a file from the filesystem.\nRenames a file or directory to a new name, replacing the …\nChanges the permissions found on a file or a directory.\nCreates a new symbolic link on the filesystem.\nQueries the file system metadata for a path.\nReturns <code>Ok(true)</code> if the path points at an existing entity.\nCreates a future that will open a file for writing and …\nA future represents an asynchronous computation obtained …\nThe type of value produced on completion.\nDefinition of the <code>MaybeDone</code> combinator.\nAttempt to resolve the future to a final value, registering\nThe output of the completed future.\nA not-yet-completed future.\nThe empty variant after the result of a <code>MaybeDone</code> has been …\nA future that may have completed.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWraps a future into a <code>MaybeDone</code>.\nReturns an <code>Option</code> containing a mutable reference to the …\nAttempts to take the output of a <code>MaybeDone</code> without driving …\nReads bytes asynchronously.\nAn extension trait which adds utility methods to …\nReads bytes from a source.\nReads bytes from a source.\nSeek bytes asynchronously.\nAn extension trait that adds utility methods to <code>AsyncSeek</code> …\nWrites bytes asynchronously.\nWrites bytes to a sink.\nThe <code>BufReader</code> struct adds buffering to any reader.\nWraps a type that is <code>AsyncWrite</code> and <code>AsyncRead</code>, and buffers …\nWraps a writer and buffers its output.\nA bidirectional pipe to read and write bytes in memory.\n<code>Empty</code> ignores any data written via <code>AsyncWrite</code>, and will …\nReadiness event interest.\nJoins two values implementing <code>AsyncRead</code> and <code>AsyncWrite</code> …\nReads lines from an <code>AsyncBufRead</code>.\nA wrapper around a byte buffer that is incrementally …\nThe readable half of a value returned from <code>split</code>.\nDescribes the readiness state of an I/O resources.\nAn async reader which yields one byte over and over and …\nA unidirectional pipe to read and write bytes in memory.\nAn async writer which will move data into the void.\nSplitter for the <code>split</code> method.\nStream for the <code>take</code> method.\nThe writable half of a value returned from <code>split</code>.\nThe buffer storing the bytes written, also read from.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nAsynchronously copies the entire contents of a reader into …\nCopies data in both directions between <code>a</code> and <code>b</code>.\nCopies data in both directions between <code>a</code> and <code>b</code> using …\nAsynchronously copies the entire contents of a reader into …\nCreate a new pair of <code>DuplexStream</code>s that act like a pair of …\nCreates a value that is always at EOF for reads, and …\nDetermines if the write side has been closed.\nJoin two values implementing <code>AsyncRead</code> and <code>AsyncWrite</code> into …\nJoin two values implementing <code>AsyncRead</code> and <code>AsyncWrite</code> into …\nThe maximum amount of bytes that can be written before …\nWaits for a seek operation to complete.\nAttempts to return the contents of the internal buffer, …\nAttempts to flush the object, ensuring that any buffered …\nAttempts to read from the <code>AsyncRead</code> into <code>buf</code>.\nInitiates or attempts to shut down this writer, returning …\nAttempt to write bytes from <code>buf</code> into the object.\nIf the <code>read</code> side has been polled and is pending, this is …\nCreates an instance of an async reader that infinitely …\nCreates unidirectional buffer that acts like in memory …\nCreates an instance of an async writer which will …\nSplit a single value implementing <code>AsyncRead + AsyncWrite</code> …\nSplits a single value implementing <code>AsyncRead + AsyncWrite</code> …\nAttempts to seek to an offset, in bytes, in a stream.\nTypes in this module can be mocked out in tests.\nAsynchronous IO structures specific to Unix-like operating …\nIf the <code>write</code> side has filled the <code>max_buf_size</code> and returned …\nReads bytes asynchronously.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nAttempts to return the contents of the internal buffer, …\nAssociates an IO object backed by a Unix file descriptor …\nRepresents an IO-ready event detected on a particular file …\nRepresents an IO-ready event detected on a particular file …\nError returned by <code>try_new</code> or <code>try_with_interest</code>.\nThe error type returned by <code>try_io</code>.\nReads or writes from the file descriptor using a …\nReads or writes from the file descriptor using a …\nIndicates to tokio that the file descriptor is no longer …\nIndicates to tokio that the file descriptor is no longer …\nIndicates to tokio that the file descriptor no longer has …\nIndicates to tokio that the file descriptor no longer has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a shared reference to the backing object of the …\nReturns a shared reference to the backing object of the …\nReturns a mutable reference to the backing object of the …\nReturns a mutable reference to the backing object of this …\nReturns a mutable reference to the inner <code>AsyncFd</code>.\nReturns a shared reference to the backing object of this …\nReturns a shared reference to the inner <code>AsyncFd</code>.\nReturns a shared reference to the inner <code>AsyncFd</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeregisters this file descriptor and returns ownership of …\nReturns the original object passed to <code>try_new</code> or …\nCreates an <code>AsyncFd</code> backed by (and taking ownership of) an …\nPolls for read readiness.\nPolls for read readiness.\nPolls for write readiness.\nPolls for write readiness.\nWaits for the file descriptor to become readable, …\nWaits for the file descriptor to become readable, …\nWaits for any of the requested ready states, returning a …\nGet the <code>Ready</code> value associated with this guard.\nGet the <code>Ready</code> value associated with this guard.\nWaits for any of the requested ready states, returning a …\nThis method should be invoked when you intentionally want …\nThis method should be invoked when you intentionally want …\nPerforms the provided IO operation.\nPerforms the provided IO operation.\nCreates an <code>AsyncFd</code> backed by (and taking ownership of) an …\nCreates an <code>AsyncFd</code> backed by (and taking ownership of) an …\nCreates an <code>AsyncFd</code> backed by (and taking ownership of) an …\nWaits for the file descriptor to become writable, …\nWaits for the file descriptor to become writable, …\nReads bytes from a source.\nAttempts to read from the <code>AsyncRead</code> into <code>buf</code>.\nSeek bytes asynchronously.\nWaits for a seek operation to complete.\nAttempts to seek to an offset, in bytes, in a stream.\nWrites bytes asynchronously.\nDetermines if this writer has an efficient …\nDetermines if this writer has an efficient …\nAttempts to flush the object, ensuring that any buffered …\nInitiates or attempts to shut down this writer, returning …\nAttempt to write bytes from <code>buf</code> into the object.\nLike <code>poll_write</code>, except that it writes from a slice of …\nLike <code>poll_write</code>, except that it writes from a slice of …\n<code>T</code> should not implement <em>both</em> Read and Write.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> if the lower IO layer needs flushing.\nRepeats operations that are interrupted.\nInterest in error events.\nReadiness event interest.\nReturns a <code>Interest</code> set representing priority completion …\nInterest in all readable events.\nInterest in all writable events.\nAdd together two <code>Interest</code> values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the value includes error interest.\nReturns true if the value includes priority interest.\nReturns true if the value includes readable interest.\nReturns true if the value includes writable interest.\nRemove <code>Interest</code> from <code>self</code>.\nJoins two values implementing <code>AsyncRead</code> and <code>AsyncWrite</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSplits this <code>Join</code> back into its <code>AsyncRead</code> and <code>AsyncWrite</code> …\nJoin two values implementing <code>AsyncRead</code> and <code>AsyncWrite</code> into …\nReturns a reference to the inner reader.\nReturns a mutable reference to the inner reader.\nReturns a pinned mutable reference to the inner reader.\nReturns a reference to the inner writer.\nReturns a mutable reference to the inner writer.\nReturns a pinned mutable reference to the inner writer.\nAssociates an I/O resource that implements the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeregisters the inner io from the registration and returns …\nCreates a new <code>PollEvented</code> associated with the default …\nCreates a new <code>PollEvented</code> associated with the default …\nReturns a reference to the registration.\nA wrapper around a byte buffer that is incrementally …\nAdvances the size of the filled region of the buffer.\nAsserts that the first <code>n</code> unfilled bytes of the buffer are …\nReturns the total capacity of the buffer.\nClears the buffer, resetting the filled region to empty.\nReturns a shared reference to the filled portion of the …\nReturns a mutable reference to the filled portion of the …\nReturns the argument unchanged.\nReturns a mutable reference to the unfilled part of the …\nReturns a mutable reference to the first <code>n</code> bytes of the …\nReturns a shared reference to the initialized portion of …\nReturns a mutable reference to the initialized portion of …\nReturns a mutable reference to the entire buffer, without …\nCalls <code>U::from(self)</code>.\nCreates a new <code>ReadBuf</code> from a fully initialized buffer.\nAppends data to the buffer, advancing the written position …\nReturns the number of bytes at the end of the slice that …\nSets the size of the filled region of the buffer.\nReturns a new <code>ReadBuf</code> comprised of the unfilled section up …\nReturns a mutable reference to the unfilled part of the …\nCreates a new <code>ReadBuf</code> from a fully uninitialized buffer.\nReturns a <code>Ready</code> representing readiness for all operations.\nReturns the empty <code>Ready</code> set.\nReturns a <code>Ready</code> representing error readiness.\nReturns a <code>Ready</code> representing priority readiness.\nReturns a <code>Ready</code> representing readable readiness.\nReturns a <code>Ready</code> representing read closed readiness.\nDescribes the readiness state of an I/O resources.\nReturns a <code>Ready</code> representing writable readiness.\nReturns a <code>Ready</code> representing write closed readiness.\nReturns a <code>usize</code> representation of the <code>Ready</code> value.\nReturns true if <code>self</code> is a superset of <code>other</code>.\nReturns the argument unchanged.\nCreates a <code>Ready</code> instance using the given <code>usize</code> …\nCalls <code>U::from(self)</code>.\nReturns true if <code>Ready</code> is the empty set.\nReturns <code>true</code> if the value includes error <code>readiness</code>.\nReturns <code>true</code> if the value includes priority <code>readiness</code>.\nReturns <code>true</code> if the value includes read-closed <code>readiness</code>.\nReturns <code>true</code> if the value includes <code>readable</code>.\nReturns <code>true</code> if the value includes writable <code>readiness</code>.\nReturns <code>true</code> if the value includes write-closed <code>readiness</code>.\nFuture for the <code>seek</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe readable half of a value returned from <code>split</code>.\nThe writable half of a value returned from <code>split</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this <code>ReadHalf</code> and some <code>WriteHalf</code> were split from …\nChecks if this <code>WriteHalf</code> and some <code>ReadHalf</code> were split from …\nSplits a single value implementing <code>AsyncRead + AsyncWrite</code> …\nReunites with a previously split <code>WriteHalf</code>.\nAssociates an IO object backed by a Unix file descriptor …\nRepresents an IO-ready event detected on a particular file …\nRepresents an IO-ready event detected on a particular file …\nError returned by <code>try_new</code> or <code>try_with_interest</code>.\nThe error type returned by <code>try_io</code>.\nIn-process memory IO types.\nAn extension trait which adds utility methods to …\nTells this buffer that <code>amt</code> bytes have been consumed from …\nTells this buffer that <code>amt</code> bytes have been consumed from …\nReturns the contents of the internal buffer, filling it …\nReturns the contents of the internal buffer, filling it …\nReturns a stream over the lines of this reader. This …\nReturns a stream over the lines of this reader. This …\nReads all bytes until a newline (the 0xA byte) is reached, …\nReads all bytes until a newline (the 0xA byte) is reached, …\nReads all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF …\nReads all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF …\nReturns a stream of the contents of this reader split on …\nReturns a stream of the contents of this reader split on …\nReads bytes from a source.\nCreates a new <code>AsyncRead</code> instance that chains this stream …\nCreates a new <code>AsyncRead</code> instance that chains this stream …\nPulls some bytes from this source into the specified …\nPulls some bytes from this source into the specified …\nPulls some bytes from this source into the specified …\nPulls some bytes from this source into the specified …\nReads the exact number of bytes required to fill <code>buf</code>.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads an 32-bit floating point type in big-endian order …\nReads an 32-bit floating point type in big-endian order …\nReads an 32-bit floating point type in little-endian order …\nReads an 32-bit floating point type in little-endian order …\nReads an 64-bit floating point type in big-endian order …\nReads an 64-bit floating point type in big-endian order …\nReads an 64-bit floating point type in little-endian order …\nReads an 64-bit floating point type in little-endian order …\nReads an signed 128-bit integer in big-endian order from …\nReads an signed 128-bit integer in big-endian order from …\nReads an signed 128-bit integer in little-endian order …\nReads an signed 128-bit integer in little-endian order …\nReads a signed 16-bit integer in big-endian order from the …\nReads a signed 16-bit integer in big-endian order from the …\nReads a signed 16-bit integer in little-endian order from …\nReads a signed 16-bit integer in little-endian order from …\nReads a signed 32-bit integer in big-endian order from the …\nReads a signed 32-bit integer in big-endian order from the …\nReads a signed 32-bit integer in little-endian order from …\nReads a signed 32-bit integer in little-endian order from …\nReads an signed 64-bit integer in big-endian order from the\nReads an signed 64-bit integer in big-endian order from the\nReads an signed 64-bit integer in little-endian order from …\nReads an signed 64-bit integer in little-endian order from …\nReads a signed 8 bit integer from the underlying reader.\nReads a signed 8 bit integer from the underlying reader.\nDefines numeric reader\nReads all bytes until EOF in this source, placing them …\nReads all bytes until EOF in this source, placing them …\nReads all bytes until EOF in this source, appending them …\nReads all bytes until EOF in this source, appending them …\nReads an unsigned 128-bit integer in big-endian order from …\nReads an unsigned 128-bit integer in big-endian order from …\nReads an unsigned 128-bit integer in little-endian order …\nReads an unsigned 128-bit integer in little-endian order …\nReads an unsigned 16-bit integer in big-endian order from …\nReads an unsigned 16-bit integer in big-endian order from …\nReads an unsigned 16-bit integer in little-endian order …\nReads an unsigned 16-bit integer in little-endian order …\nReads an unsigned 32-bit integer in big-endian order from …\nReads an unsigned 32-bit integer in big-endian order from …\nReads an unsigned 32-bit integer in little-endian order …\nReads an unsigned 32-bit integer in little-endian order …\nReads an unsigned 64-bit integer in big-endian order from …\nReads an unsigned 64-bit integer in big-endian order from …\nReads an unsigned 64-bit integer in little-endian order …\nReads an unsigned 64-bit integer in little-endian order …\nReads an unsigned 8 bit integer from the underlying reader.\nReads an unsigned 8 bit integer from the underlying reader.\nCreates an adaptor which reads at most <code>limit</code> bytes from it.\nCreates an adaptor which reads at most <code>limit</code> bytes from it.\nAn extension trait that adds utility methods to <code>AsyncSeek</code> …\nCreates a future which will rewind to the beginning of the …\nCreates a future which will rewind to the beginning of the …\nCreates a future which will seek an IO object, and then …\nCreates a future which will seek an IO object, and then …\nCreates a future which will return the current seek …\nCreates a future which will return the current seek …\nWrites bytes to a sink.\nFlushes this output stream, ensuring that all …\nFlushes this output stream, ensuring that all …\nShuts down the output stream, ensuring that the value can …\nShuts down the output stream, ensuring that the value can …\nWrites a buffer into this writer, returning how many bytes …\nWrites a buffer into this writer, returning how many bytes …\nAttempts to write an entire buffer into this writer.\nAttempts to write an entire buffer into this writer.\nAttempts to write an entire buffer into this writer.\nAttempts to write an entire buffer into this writer.\nWrites a buffer into this writer, advancing the buffer’s …\nWrites a buffer into this writer, advancing the buffer’s …\nWrites an 32-bit floating point type in big-endian order …\nWrites an 32-bit floating point type in big-endian order …\nWrites an 32-bit floating point type in little-endian …\nWrites an 32-bit floating point type in little-endian …\nWrites an 64-bit floating point type in big-endian order …\nWrites an 64-bit floating point type in big-endian order …\nWrites an 64-bit floating point type in little-endian …\nWrites an 64-bit floating point type in little-endian …\nWrites an signed 128-bit integer in big-endian order to the\nWrites an signed 128-bit integer in big-endian order to the\nWrites an signed 128-bit integer in little-endian order to …\nWrites an signed 128-bit integer in little-endian order to …\nWrites a signed 16-bit integer in big-endian order to the …\nWrites a signed 16-bit integer in big-endian order to the …\nWrites a signed 16-bit integer in little-endian order to …\nWrites a signed 16-bit integer in little-endian order to …\nWrites a signed 32-bit integer in big-endian order to the …\nWrites a signed 32-bit integer in big-endian order to the …\nWrites a signed 32-bit integer in little-endian order to …\nWrites a signed 32-bit integer in little-endian order to …\nWrites an signed 64-bit integer in big-endian order to the …\nWrites an signed 64-bit integer in big-endian order to the …\nWrites an signed 64-bit integer in little-endian order to …\nWrites an signed 64-bit integer in little-endian order to …\nWrites a signed 8-bit integer to the underlying writer.\nWrites a signed 8-bit integer to the underlying writer.\nDefines numeric writer.\nWrites an unsigned 128-bit integer in big-endian order to …\nWrites an unsigned 128-bit integer in big-endian order to …\nWrites an unsigned 128-bit integer in little-endian order …\nWrites an unsigned 128-bit integer in little-endian order …\nWrites an unsigned 16-bit integer in big-endian order to …\nWrites an unsigned 16-bit integer in big-endian order to …\nWrites an unsigned 16-bit integer in little-endian order …\nWrites an unsigned 16-bit integer in little-endian order …\nWrites an unsigned 32-bit integer in big-endian order to …\nWrites an unsigned 32-bit integer in big-endian order to …\nWrites an unsigned 32-bit integer in little-endian order …\nWrites an unsigned 32-bit integer in little-endian order …\nWrites an unsigned 64-bit integer in big-endian order to …\nWrites an unsigned 64-bit integer in big-endian order to …\nWrites an unsigned 64-bit integer in little-endian order …\nWrites an unsigned 64-bit integer in little-endian order …\nWrites an unsigned 8-bit integer to the underlying writer.\nWrites an unsigned 8-bit integer to the underlying writer.\nLike <code>write</code>, except that it writes from a slice of buffers.\nLike <code>write</code>, except that it writes from a slice of buffers.\nThe <code>BufReader</code> struct adds buffering to any reader.\n<code>start_seek</code> has not been called.\nWaiting for completion of <code>poll_complete</code>.\nWaiting for completion of the first <code>poll_complete</code> in the …\n<code>start_seek</code> has been called, but <code>poll_complete</code> has not yet …\nReturns a reference to the internally buffered data.\nInvalidates all data in the internal buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying reader.\nGets a pinned mutable reference to the underlying reader.\nGets a reference to the underlying reader.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>BufReader</code>, returning the underlying reader.\nCreates a new <code>BufReader</code> with a default buffer capacity. …\nCreates a new <code>BufReader</code> with the specified buffer capacity.\nWraps a type that is <code>AsyncWrite</code> and <code>AsyncRead</code>, and buffers …\nReturns the argument unchanged.\nGets a mutable reference to the underlying I/O object.\nGets a pinned mutable reference to the underlying I/O …\nGets a reference to the underlying I/O object.\nCalls <code>U::from(self)</code>.\nConsumes this <code>BufStream</code>, returning the underlying I/O …\nWraps a type in both <code>BufWriter</code> and <code>BufReader</code>.\nCreates a <code>BufStream</code> with the specified <code>BufReader</code> capacity …\nWraps a writer and buffers its output.\n<code>start_seek</code> has not been called.\nWaiting for completion of <code>poll_complete</code>.\n<code>start_seek</code> has been called, but <code>poll_complete</code> has not yet …\nReturns a reference to the internally buffered data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying writer.\nGets a pinned mutable reference to the underlying writer.\nGets a reference to the underlying writer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>BufWriter</code>, returning the underlying writer.\nCreates a new <code>BufWriter</code> with a default buffer capacity. …\nCreates a new <code>BufWriter</code> with the specified buffer capacity.\nStream for the <code>chain</code> method.\nReturns the argument unchanged.\nGets mutable references to the underlying readers in this …\nGets pinned mutable references to the underlying readers …\nGets references to the underlying readers in this <code>Chain</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Chain</code>, returning the wrapped readers.\nA future that asynchronously copies the entire contents of …\nAsynchronously copies the entire contents of a reader into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCopies data in both directions between <code>a</code> and <code>b</code>.\nCopies data in both directions between <code>a</code> and <code>b</code> using …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA future that asynchronously copies the entire contents of …\nAsynchronously copies the entire contents of a reader into …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>Empty</code> ignores any data written via <code>AsyncWrite</code>, and will …\nCreates a value that is always at EOF for reads, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>fill_buf</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA future used to fully flush an I/O object.\nCreates a future which will entirely flush an I/O object.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads lines from an <code>AsyncBufRead</code>.\nReturns the argument unchanged.\nObtains a mutable reference to the underlying reader.\nObtains a reference to the underlying reader.\nCalls <code>U::from(self)</code>.\nUnwraps this <code>Lines&lt;R&gt;</code>, returning the underlying reader.\nReturns the next line in the stream.\nPolls for the next line in the stream.\nA bidirectional pipe to read and write bytes in memory.\nA unidirectional pipe to read and write bytes in memory.\nThe buffer storing the bytes written, also read from.\nCreate a new pair of <code>DuplexStream</code>s that act like a pair of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if the write side has been closed.\nThe maximum amount of bytes that can be written before …\nCreates unidirectional buffer that acts like in memory …\nIf the <code>read</code> side has been polled and is pending, this is …\nCreates unidirectional buffer that acts like in memory …\nIf the <code>write</code> side has filled the <code>max_buf_size</code> and returned …\nA future which can be used to easily read available number …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to read some bytes directly into the given <code>buf</code> in …\nFuture returned by <code>read_buf</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a future which will read exactly enough bytes to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA future which can be used to easily read exactly enough …\nFuture for the <code>read_line</code> method.\nThis handles the various failure cases and puts the string …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to read from the provided <code>AsyncRead</code>.\nFuture for the <code>read_to_string</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture for the <code>read_until</code> method. The delimiter is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn async reader which yields one byte over and over and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an instance of an async reader that infinitely …\nA future used to shutdown an I/O object.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a future which will shutdown an I/O object.\nAn async writer which will move data into the void.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an instance of an async writer which will …\nSplitter for the <code>split</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the next segment in the stream.\nPolls for the next segment in the stream.\nStream for the <code>take</code> method.\nReturns the argument unchanged.\nGets a mutable reference to the underlying reader.\nGets a pinned mutable reference to the underlying reader.\nGets a reference to the underlying reader.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Take</code>, returning the wrapped reader.\nReturns the remaining number of bytes that can be read …\nSets the number of bytes that can be read before this …\nSomething that looks like a <code>Vec&lt;u8&gt;</code>.\nThis struct wraps a <code>Vec&lt;u8&gt;</code> or <code>&amp;mut Vec&lt;u8&gt;</code>, combining it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA future to write some of the buffer to an <code>AsyncWrite</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to write some bytes from the given <code>buf</code> to the writer …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA future to write some of the buffer to an <code>AsyncWrite</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to write some bytes from the given <code>buf</code> to the writer …\nA future to write some of the buffer to an <code>AsyncWrite</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to write some bytes from the given <code>buf</code> to the writer …\nA future to write a slice of buffers to an <code>AsyncWrite</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplementation of an atomic <code>u64</code> cell. On 64 bit platforms, …\nA <code>Barrier</code> that provides <code>wait_timeout</code>.\n<code>AtomicU16</code> providing an additional <code>unsync_load</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerforms an unsynchronized load.\n<code>AtomicU32</code> providing an additional <code>unsync_load</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerforms an unsynchronized load.\nAn integer type which can be safely shared between threads.\nHas the effects of both <code>Acquire</code> and <code>Release</code> together: For …\nWhen coupled with a load, if the loaded value was written …\nAn integer type which can be safely shared between threads.\nAtomic memory orderings\nNo ordering constraints, only atomic operations.\nWhen coupled with a store, all previous operations become …\nLike <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …\nAlias <code>AtomicU64</code> to <code>StaticAtomicU64</code>\n<code>AtomicUsize</code> providing an additional <code>unsync_load</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerforms an unsynchronized load.\nA barrier enables multiple threads to synchronize the …\nA <code>BarrierWaitResult</code> is returned by <code>Barrier::wait()</code> when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this thread is the “leader thread” for …\nCreates a new barrier that can block a given number of …\nBlocks the current thread until all threads have …\nBlocks the current thread until all threads have …\nEmits a machine instruction to signal the processor that …\nAdapter for <code>std::Mutex</code> that removes the poisoning aspects …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdapter for <code>std::sync::RwLock</code> that removes the poisoning …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nA Condition Variable\nAn RAII implementation of a “scoped lock” of a mutex. …\nRAII structure used to release the shared read access of a …\nA type indicating whether a timed wait on a condition …\n<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nReturns a raw pointer to the object <code>T</code> pointed to by this …\nConverts to <code>Arc&lt;T&gt;</code>.\nConverts to <code>Arc&lt;[T]&gt;</code>.\nMakes a clone of the <code>Arc</code> pointer.\nMakes a clone of the <code>Weak</code> pointer that points to the same …\nComparison for two <code>Arc</code>s.\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCreates a <code>Condvar</code> which is ready to be waited on and …\nCreates an empty CStr inside an Arc\nCreates an empty <code>[T]</code> inside an Arc\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nCreates an empty str inside an Arc\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating memory. …\nAttempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nDrops the <code>Arc</code>.\nDrops the <code>Weak</code> pointer.\nEquality for two <code>Arc</code>s.\nReturns the argument unchanged.\nConverts an atomically reference-counted string slice into …\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nAllocate a reference-counted slice and move <code>v</code>’s items …\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nAllocate a reference-counted <code>str</code> and copy <code>v</code> into it.\nAllocate a reference-counted slice and fill it by cloning <code>v</code>…\nAllocate a reference-counted <code>str</code> and copy <code>v</code> into it.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nMove a boxed object to a new, reference-counted allocation.\nCreate an atomically reference-counted pointer from a …\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference into the given <code>Arc</code>, without …\nGreater-than comparison for two <code>Arc</code>s.\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nConsumes the <code>Arc</code>, returning the wrapped pointer.\nConsumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.\nConsumes the <code>Arc</code>, returning the wrapped pointer and …\nConsumes the <code>Weak&lt;T&gt;</code>, returning the wrapped pointer and …\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nLess-than comparison for two <code>Arc</code>s.\nMakes a mutable reference into the given <code>Arc</code>.\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nInequality for two <code>Arc</code>s.\nCreates a new condition variable which is ready to be …\nConstructs a new <code>Arc&lt;T&gt;</code>.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …\nConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nConstructs a new <code>Weak&lt;T, A&gt;</code>, without allocating any …\nConstructs a new <code>Arc</code> with uninitialized contents.\nConstructs a new <code>Arc</code> with uninitialized contents in the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nWakes up all blocked threads on this condvar.\nWakes up one blocked thread on this condvar.\nPartial comparison for two <code>Arc</code>s.\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nReturns <code>true</code> if the two <code>Weak</code>s point to the same allocation …\nGets the number of strong (<code>Arc</code>) pointers to this …\nGets the number of strong (<code>Arc</code>) pointers pointing to this …\nReturns <code>true</code> if the wait was known to have timed out.\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nConstructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …\nConstructs a new <code>Arc</code> with uninitialized contents, …\nConstructs a new <code>Arc</code> with uninitialized contents, in the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nIf we have the only reference to <code>T</code> then unwrap it. …\nAttempts to upgrade the <code>Weak</code> pointer to an <code>Arc</code>, delaying …\nBlocks the current thread until this condition variable …\nWaits on this condition variable for a notification, …\nWaits on this condition variable for a notification, …\nWaits on this condition variable for a notification, …\nBlocks the current thread until this condition variable …\nGets the number of <code>Weak</code> pointers to this allocation.\nGets an approximation of the number of <code>Weak</code> pointers …\nHas the effects of both <code>Acquire</code> and <code>Release</code> together: For …\nWhen coupled with a load, if the loaded value was written …\nA boolean type which can be safely shared between threads.\nA raw pointer type which can be safely shared between …\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAtomic memory orderings\nNo ordering constraints, only atomic operations.\nWhen coupled with a store, all previous operations become …\nLike <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …\nReturns a mutable pointer to the underlying <code>bool</code>.\nReturns a mutable pointer to the underlying pointer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nCreates an <code>AtomicBool</code> initialized to <code>false</code>.\nCreates a null <code>AtomicPtr&lt;T&gt;</code>.\nAn atomic fence.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nLogical “and” with a boolean value.\nPerforms a bitwise “and” operation on the address of …\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nOffsets the pointer’s address by adding <code>val</code> <em>bytes</em>, …\nOffsets the pointer’s address by subtracting <code>val</code> <em>bytes</em>, …\nMaximum with the current value.\nMaximum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nLogical “nand” with a boolean value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nLogical “not” with a boolean value.\nLogical “or” with a boolean value.\nPerforms a bitwise “or” operation on the address of …\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nOffsets the pointer’s address by adding <code>val</code> (in units of …\nOffsets the pointer’s address by subtracting <code>val</code> (in …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nLogical “xor” with a boolean value.\nPerforms a bitwise “xor” operation on the address of …\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nReturns the argument unchanged.\nConverts a <code>bool</code> into an <code>AtomicBool</code>.\nConverts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>u8</code> into an <code>AtomicU8</code>.\nReturns the argument unchanged.\nConverts an <code>u64</code> into an <code>AtomicU64</code>.\nReturns the argument unchanged.\nGet atomic access to a <code>&amp;mut bool</code>.\nGet atomic access to a pointer.\nGet atomic access to a <code>&amp;mut u8</code>.\nGet atomic access to a <code>&amp;mut u64</code>.\nGet atomic access to a <code>&amp;mut [bool]</code> slice.\nGet atomic access to a slice of pointers.\nGet atomic access to a <code>&amp;mut [u8]</code> slice.\nGet atomic access to a <code>&amp;mut [u64]</code> slice.\nCreates a new <code>AtomicBool</code> from a pointer.\nCreates a new <code>AtomicPtr</code> from a pointer.\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nReturns a mutable reference to the underlying <code>bool</code>.\nReturns a mutable reference to the underlying pointer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nGet non-atomic access to a <code>&amp;mut [AtomicBool]</code> slice.\nGet non-atomic access to a <code>&amp;mut [AtomicPtr]</code> slice.\nGet non-atomic access to a <code>&amp;mut [AtomicU8]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU64]</code> slice\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nLoads a value from the bool.\nLoads a value from the pointer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nCreates a new <code>AtomicBool</code>.\nCreates a new <code>AtomicPtr</code>.\nCreates a new atomic integer.\nCreates a new atomic integer.\nStores a value into the bool.\nStores a value into the pointer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the bool, returning the previous value.\nStores a value into the pointer, returning the previous …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nAn error returned by <code>LocalKey::try_with</code>.\nThread factory, which can be used in order to configure …\nContains the error value\nAn owned permission to join on a thread (block on its …\nA thread local storage key which owns its contents.\nContains the success value\nA specialized <code>Result</code> type for threads.\nA handle to a thread.\nA unique identifier for a running thread.\nThis returns a numeric identifier for the thread …\nGets a handle to the thread that invokes it.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a copy of the contained value.\nGets the thread’s unique identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the associated thread has finished running its …\nWaits for the associated thread to finish.\nNames the thread-to-be. Currently the name is used for …\nGets the thread’s name.\nGenerates the base configuration for spawning a thread, …\nDetermines whether the current thread is unwinding because …\nBlocks unless or until the current thread’s token is …\nBlocks unless or until the current thread’s token is …\nReplaces the contained value, returning the old value.\nReplaces the contained value, returning the old value.\nSets or initializes the contained value.\nSets or initializes the contained value.\nPuts the current thread to sleep for at least the …\nSpawns a new thread, returning a <code>JoinHandle</code> for it.\nSpawns a new thread by taking ownership of the <code>Builder</code>, …\nSpawns a new scoped thread using the settings set through …\nSpawns a new thread without any lifetime restrictions by …\nSets the size of the stack (in bytes) for the new thread.\nTakes the contained value, leaving <code>Default::default()</code> in …\nTakes the contained value, leaving <code>Default::default()</code> in …\nExtracts a handle to the underlying thread.\nAcquires a reference to the value in this TLS key.\nAtomically makes the handle’s token available if it is …\nAcquires a reference to the value in this TLS key.\nAcquires a reference to the contained value.\nAcquires a mutable reference to the contained value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA TCP socket server, listening for connections.\nA TCP socket that has not yet been converted to a <code>TcpStream</code>…\nA TCP stream between a local and a remote socket.\nConverts or resolves without blocking to one or more …\nA UDP socket.\nAn I/O object representing a Unix datagram socket.\nA Unix socket which can accept connections from other Unix …\nA Unix socket that has not yet been converted to a …\nA structure representing a connected Unix socket.\nReads or writes from the socket using a user-provided IO …\nCreates a new <code>UnixDatagram</code> bound to the specified path.\nConnects the socket to the specified address.\nReturns the argument unchanged.\nCreates new <code>UnixDatagram</code> from a …\nCalls <code>U::from(self)</code>.\nTurns a <code>tokio::net::UnixDatagram</code> into a …\nReturns the local address that this socket is bound to.\nPerforms a DNS resolution.\nCreates an unnamed pair of connected sockets.\nReturns the address of this socket’s peer.\nAttempts to receive a single datagram message on the …\nAttempts to receive a single datagram on the specified …\nPolls for read/receive readiness.\nAttempts to send data on the socket to the remote address …\nPolls for write/send readiness.\nAttempts to send data to the specified address.\nWaits for the socket to become readable.\nWaits for any of the requested ready states.\nReceives data from the socket.\nReceives data from the socket from the address to which it …\nReceives from the socket, advances the buffer’s internal …\nReceives data from the socket.\nSends data on the socket to the socket’s peer.\nSends data on the socket to the specified address.\nShuts down the read, write, or both halves of this …\nReturns the value of the <code>SO_ERROR</code> option.\nTCP utility types.\nConsumes stream, returning the Tokio I/O object.\nTries to read or write from the socket using a …\nTries to receive a datagram from the peer without waiting.\nTries to read data from the stream into the provided …\nTries to receive data from the socket without waiting.\nTries to receive data from the socket without waiting.\nTries to send a datagram to the peer without waiting.\nTries to send a datagram to the peer without waiting.\nCreates a new <code>UnixDatagram</code> which is not bound to any …\nUnix specific network types.\nWaits for the socket to become writable.\nConverts or resolves without blocking to one or more …\nThe contents of this trait are intended to remain private …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms a DNS resolution.\nOwned read half of a <code>TcpStream</code>, created by <code>into_split</code>.\nOwned write half of a <code>TcpStream</code>, created by <code>into_split</code>.\nBorrowed read half of a <code>TcpStream</code>, created by <code>split</code>.\nError indicating that two halves were not from the same …\nBorrowed write half of a <code>TcpStream</code>, created by <code>split</code>.\n<code>TcpStream</code> split support.\n<code>TcpStream</code> owned split support.\nA TCP socket server, listening for connections.\nAccepts a new incoming connection from this listener.\nCreates a new <code>TcpListener</code>, which will be bound to the …\nReturns the argument unchanged.\nCreates new <code>TcpListener</code> from a <code>std::net::TcpListener</code>.\nCalls <code>U::from(self)</code>.\nTurns a <code>tokio::net::TcpListener</code> into a …\nReturns the local address that this listener is bound to.\nPolls to accept a new incoming connection to this listener.\nSets the value for the <code>IP_TTL</code> option on this socket.\nConsumes stream, returning the tokio I/O object.\nGets the value of the <code>IP_TTL</code> option for this socket.\nA TCP socket that has not yet been converted to a <code>TcpStream</code>…\nBinds the socket to the given address.\nSets the value for the <code>SO_BINDTODEVICE</code> option on this …\nEstablishes a TCP connection with a peer at the specified …\nGets the value for the <code>SO_BINDTODEVICE</code> option on this …\nReturns the argument unchanged.\nConverts a <code>RawFd</code> to a <code>TcpSocket</code>.\nConverts a <code>std::net::TcpStream</code> into a <code>TcpSocket</code>. The …\nCalls <code>U::from(self)</code>.\nGets the value of the <code>SO_KEEPALIVE</code> option on this socket.\nReads the linger duration for this socket by getting the …\nConverts the socket into a <code>TcpListener</code>.\nGets the local address of this socket.\nCreates a new socket configured for IPv4.\nCreates a new socket configured for IPv6.\nGets the value of the <code>TCP_NODELAY</code> option on this socket.\nReturns the size of the TCP receive buffer for this socket.\nRetrieves the value set for <code>SO_REUSEADDR</code> on this socket.\nAllows the socket to bind to an in-use port. Only …\nReturns the size of the TCP send buffer for this socket.\nSets value for the <code>SO_KEEPALIVE</code> option on this socket.\nSets the linger duration of this socket by setting the …\nSets the value of the <code>TCP_NODELAY</code> option on this socket.\nSets the size of the TCP receive buffer on this socket.\nAllows the socket to bind to an in-use address.\nAllows the socket to bind to an in-use port. Only …\nSets the size of the TCP send buffer on this socket.\nSets the value for the <code>IP_TOS</code> option on this socket.\nReturns the value of the <code>SO_ERROR</code> option.\nGets the value of the <code>IP_TOS</code> option for this socket.\nBorrowed read half of a <code>TcpStream</code>, created by <code>split</code>.\nBorrowed write half of a <code>TcpStream</code>, created by <code>split</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the local address that this stream is bound to.\nReturns the local address that this stream is bound to.\nReceives data on the socket from the remote address to …\nReturns the remote address that this stream is connected …\nReturns the remote address that this stream is connected …\nAttempts to receive data on the socket, without removing …\nWaits for the socket to become readable.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to write a buffer to the stream, returning how many …\nTries to write several buffers to the stream, returning …\nWaits for the socket to become writable.\nOwned read half of a <code>TcpStream</code>, created by <code>into_split</code>.\nOwned write half of a <code>TcpStream</code>, created by <code>into_split</code>.\nError indicating that two halves were not from the same …\nDestroys the write half, but don’t close the write half …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the local address that this stream is bound to.\nReturns the local address that this stream is bound to.\nReceives data on the socket from the remote address to …\nReturns the remote address that this stream is connected …\nReturns the remote address that this stream is connected …\nAttempt to receive data on the socket, without removing …\nWaits for the socket to become readable.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nAttempts to put the two halves of a <code>TcpStream</code> back …\nAttempts to put the two halves of a <code>TcpStream</code> back …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to write a buffer to the stream, returning how many …\nTries to write several buffers to the stream, returning …\nWaits for the socket to become writable.\nA TCP stream between a local and a remote socket.\nReads or writes from the socket using a user-provided IO …\nOpens a TCP connection to a remote host.\nEstablishes a connection to the specified <code>addr</code>.\nReturns the argument unchanged.\nCreates new <code>TcpStream</code> from a <code>std::net::TcpStream</code>.\nCalls <code>U::from(self)</code>.\nSplits a <code>TcpStream</code> into a read half and a write half, …\nTurns a <code>tokio::net::TcpStream</code> into a <code>std::net::TcpStream</code>.\nReads the linger duration for this socket by getting the …\nReturns the local address that this stream is bound to.\nGets the value of the <code>TCP_NODELAY</code> option on this socket.\nReceives data on the socket from the remote address to …\nReturns the remote address that this stream is connected …\nAttempts to receive data on the socket, without removing …\nPolls for read readiness.\nPolls for write readiness.\nWaits for the socket to become readable.\nWaits for any of the requested ready states.\nSets the linger duration of this socket by setting the …\nSets the value of the <code>TCP_NODELAY</code> option on this socket.\nSets the value for the <code>IP_TTL</code> option on this socket.\nShuts down the read, write, or both halves of this …\nSplits a <code>TcpStream</code> into a read half and a write half, …\nReturns the value of the <code>SO_ERROR</code> option.\nConsumes stream, returning the tokio I/O object.\nTries to read or write from the socket using a …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTry to write a buffer to the stream, returning how many …\nTries to write several buffers to the stream, returning …\nGets the value of the <code>IP_TTL</code> option for this socket.\nWaits for the socket to become writable.\nA UDP socket.\nReads or writes from the socket using a user-provided IO …\nThis function will create a new UDP socket and attempt to …\nSets the value for the <code>SO_BINDTODEVICE</code> option on this …\nGets the value of the <code>SO_BROADCAST</code> option for this socket.\nConnects the UDP socket setting the default destination …\nGets the value for the <code>SO_BINDTODEVICE</code> option on this …\nReturns the argument unchanged.\nCreates new <code>UdpSocket</code> from a previously bound …\nCalls <code>U::from(self)</code>.\nTurns a <code>tokio::net::UdpSocket</code> into a <code>std::net::UdpSocket</code>.\nExecutes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.\nReturns the local address that this socket is bound to.\nGets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nGets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nGets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nReceives data from the socket, without removing it from …\nRetrieve the sender of the data at the head of the input …\nReturns the socket address of the remote peer this socket …\nReceives data from the socket, without removing it from …\nRetrieve the sender of the data at the head of the input …\nAttempts to receive a single datagram message on the …\nAttempts to receive a single datagram on the socket.\nPolls for read/receive readiness.\nAttempts to send data on the socket to the remote address …\nPolls for write/send readiness.\nAttempts to send data on the socket to a given address.\nWaits for the socket to become readable.\nWaits for any of the requested ready states.\nReceives a single datagram message on the socket from the …\nReceives a single datagram message on the socket from the …\nReceives a single datagram message on the socket, …\nReceives a single datagram message on the socket. On …\nSends data on the socket to the remote address that the …\nSends data on the socket to the given address. On success, …\nSets the value of the <code>SO_BROADCAST</code> option for this socket.\nSets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nSets the value for the <code>IP_TOS</code> option on this socket.\nSets the value for the <code>IP_TTL</code> option on this socket.\nReturns the value of the <code>SO_ERROR</code> option.\nGets the value of the <code>IP_TOS</code> option for this socket.\nConsumes stream, returning the tokio I/O object.\nTries to read or write from the socket using a …\nTries to receive data on the socket without removing it …\nTry to retrieve the sender of the data at the head of the …\nTries to receive a single datagram message on the socket …\nTries to receive data from the stream into the provided …\nTries to receive a single datagram message on the socket. …\nTries to receive a single datagram message on the socket. …\nTries to send data on the socket to the remote address to …\nTries to send data on the socket to the given address, but …\nGets the value of the <code>IP_TTL</code> option for this socket.\nWaits for the socket to become writable.\nOwned read half of a <code>UnixStream</code>, created by <code>into_split</code>.\nOwned write half of a <code>UnixStream</code>, created by <code>into_split</code>.\nBorrowed read half of a <code>UnixStream</code>, created by <code>split</code>.\nError indicating that two halves were not from the same …\nAn address associated with a Tokio Unix socket.\nCredentials of a process.\nBorrowed write half of a <code>UnixStream</code>, created by <code>split</code>.\nGID (group ID) of the process.\nA type representing user ID.\nPID (process ID) of the process.\nA type representing group ID.\nUnix pipe types.\n<code>UnixStream</code> split support.\n<code>UnixStream</code> owned split support.\nUID (user ID) of the process.\nA type representing process and process group IDs.\nA Unix socket which can accept connections from other Unix …\nAccepts a new incoming connection to this listener.\nCreates a new <code>UnixListener</code> bound to the specified path.\nReturns the argument unchanged.\nCreates new <code>UnixListener</code> from a …\nCalls <code>U::from(self)</code>.\nTurns a <code>tokio::net::UnixListener</code> into a …\nReturns the local socket address of this listener.\nPolls to accept a new incoming connection to this listener.\nReturns the value of the <code>SO_ERROR</code> option.\nConsumes stream, returning the tokio I/O object.\nOptions and flags which can be used to configure how a …\nReading end of a Unix pipe.\nWriting end of a Unix pipe.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Sender</code> from a <code>File</code>.\nCreates a new <code>Receiver</code> from a <code>File</code>.\nCreates a new <code>Sender</code> from a <code>File</code> without checking pipe …\nCreates a new <code>Receiver</code> from a <code>File</code> without checking pipe …\nCreates a new <code>Sender</code> from an <code>OwnedFd</code>.\nCreates a new <code>Receiver</code> from an <code>OwnedFd</code>.\nCreates a new <code>Sender</code> from an <code>OwnedFd</code> without checking pipe …\nCreates a new <code>Receiver</code> from an <code>OwnedFd</code> without checking …\nGets file descriptor’s flags by fcntl.\nChecks for <code>O_RDONLY</code> or <code>O_RDWR</code> access mode.\nChecks for <code>O_WRONLY</code> or <code>O_RDWR</code> access mode.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the pipe into an <code>OwnedFd</code> in blocking mode.\nConverts the pipe into an <code>OwnedFd</code> in blocking mode.\nConverts the pipe into an <code>OwnedFd</code> in nonblocking mode.\nConverts the pipe into an <code>OwnedFd</code> in nonblocking mode.\nChecks if the file descriptor is a pipe or a FIFO.\nCreates a blank new set of options ready for configuration.\nCreates a <code>Receiver</code> from a FIFO file with the options …\nCreates a <code>Sender</code> from a FIFO file with the options …\nCreates a new anonymous Unix pipe.\nPolls for read readiness.\nPolls for write readiness.\nSets the option for read-write access.\nWaits for the pipe to become readable.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nRemoves <code>O_NONBLOCK</code> from fd’s flags.\nSets file descriptor’s flags with <code>O_NONBLOCK</code> by fcntl.\nTries to read data from the pipe into the provided buffer, …\nTries to read data from the pipe into the provided buffer, …\nTries to read data from the pipe into the provided …\nTries to write a buffer to the pipe, returning how many …\nTries to write several buffers to the pipe, returning how …\nSets the option to skip the check for FIFO file type.\nWaits for the pipe to become writable.\nA Unix socket that has not yet been converted to a …\nBinds the socket to the given address.\nEstablishes a Unix connection with a peer at the specified …\nConverts the socket into a <code>UnixDatagram</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts the socket into a <code>UnixListener</code>.\nCreates a new Unix datagram socket.\nCreates a new Unix stream socket.\nAn address associated with a Tokio Unix socket.\nReturns the contents of this address if it is a <code>pathname</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the address is unnamed.\nBorrowed read half of a <code>UnixStream</code>, created by <code>split</code>.\nBorrowed write half of a <code>UnixStream</code>, created by <code>split</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the socket address of the local half of this …\nReturns the socket address of the local half of this …\nReturns the socket address of the remote half of this …\nReturns the socket address of the remote half of this …\nWaits for the socket to become readable.\nWait for any of the requested ready states.\nWaits for any of the requested ready states.\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to write a buffer to the stream, returning how many …\nTries to write several buffers to the stream, returning …\nWaits for the socket to become writable.\nOwned read half of a <code>UnixStream</code>, created by <code>into_split</code>.\nOwned write half of a <code>UnixStream</code>, created by <code>into_split</code>.\nError indicating that two halves were not from the same …\nDestroys the write half, but don’t close the write half …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the socket address of the local half of this …\nReturns the socket address of the local half of this …\nReturns the socket address of the remote half of this …\nReturns the socket address of the remote half of this …\nWaits for the socket to become readable.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nAttempts to put the two halves of a <code>UnixStream</code> back …\nAttempts to put the two halves of a <code>UnixStream</code> back …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to write a buffer to the stream, returning how many …\nTries to write several buffers to the stream, returning …\nWaits for the socket to become writable.\nA structure representing a connected Unix socket.\nReads or writes from the socket using a user-provided IO …\nConnects to the socket named by <code>path</code>.\nReturns the argument unchanged.\nCreates new <code>UnixStream</code> from a …\nCalls <code>U::from(self)</code>.\nSplits a <code>UnixStream</code> into a read half and a write half, …\nTurns a <code>tokio::net::UnixStream</code> into a …\nReturns the socket address of the local half of this …\nCreates an unnamed pair of connected sockets.\nReturns the socket address of the remote half of this …\nReturns effective credentials of the process which called …\nPolls for read readiness.\nPolls for write readiness.\nWaits for the socket to become readable.\nWaits for any of the requested ready states.\nShuts down the read, write, or both halves of this …\nSplits a <code>UnixStream</code> into a read half and a write half, …\nReturns the value of the <code>SO_ERROR</code> option.\nConsumes stream, returning the tokio I/O object.\nTries to read or write from the socket using a …\nTry to read data from the stream into the provided buffer, …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to write a buffer to the stream, returning how many …\nTries to write several buffers to the stream, returning …\nWaits for the socket to become writable.\nCredentials of a process.\nReturns the argument unchanged.\nGets GID (group ID) of the process.\nGID (group ID) of the process.\nCalls <code>U::from(self)</code>.\nGets PID (process ID) of the process.\nPID (process ID) of the process.\nGets UID (user ID) of the process.\nUID (user ID) of the process.\nBoundary value to prevent stack overflow caused by a …\nBuilds Tokio Runtime with custom configuration values.\nAfter thread starts / before thread stops\nThe flavor that executes all tasks on the current thread.\nRuntime context guard.\nHandle to the runtime.\nThe flavor that executes tasks across multiple threads.\nThe Tokio runtime.\nThe flavor of a <code>Runtime</code>.\nHandle to the runtime’s metrics.\nError returned by <code>try_current</code> when no Runtime has been …\nCallback to run after each thread starts.\nTo run after each task is terminated.\nTo run after each thread is unparked.\nTo run before each worker thread is parked.\nTo run before each task is spawned.\nTo run before each worker thread stops\nAbstracts out the APIs necessary to <code>Runtime</code> for …\nBlocking pool handle, used to signal shutdown\nYield points for improved cooperative scheduling.\nWhen true, the multi-threade scheduler LIFO slot should …\nAbstracts out the entire chain of runtime sub-drivers into …\nWhether or not to enable the I/O driver\nWhether or not to enable the time driver\nHow many ticks before yielding to the driver for timer and …\nHow many ticks before pulling a task from the …\nHandle to runtime, also contains driver handles\nCustomizable keep alive timeout for <code>BlockingPool</code>\nRuntime type\nCap on thread usage.\nThis module contains information need to view information …\nConfigures the task poll count histogram\nWhen true, enables task poll count histogram …\nTask scheduler\nSpecify a random number generator seed to provide …\nWhether or not the clock should start paused.\nThe task module.\nName fn used for threads spawned by the runtime.\nStack size used for threads spawned by the runtime.\nTime driver.\nThe number of worker threads, used by Runtime.\nThread pool for blocking operations\nA shutdown channel.\nThere are no worker threads available to take the task and …\nPool is shutting down and the task was not scheduled\nCall after a thread starts.\nCall before a thread stops.\nPool threads wait on this.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrior to shutdown, we clean up <code>JoinHandles</code> by having each …\nState shared between worker threads.\nRuns the provided function on an executor dedicated to …\nRuns the provided function on an executor dedicated to …\nSpawned thread stack size.\nSpawned threads use this name.\nThis is a counter used to iterate <code>worker_threads</code> in a …\nThis holds the <code>JoinHandles</code> for all running threads; on …\n<code>task::Schedule</code> implementation that does nothing (except …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBlocks the current thread until all <code>Sender</code> handles drop.\nConverts a function to a future that completes on poll.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitializes a new blocking task from the given function.\nBuilds Tokio Runtime with custom configuration values.\nCallback to run after each thread starts.\nTo run after each task is terminated.\nTo run after each thread is unparked.\nTo run before each worker thread is parked.\nTo run before each task is spawned.\nTo run before each worker thread stops\nCreates the configured <code>Runtime</code>.\nWhen true, the multi-threade scheduler LIFO slot should …\nEnables both I/O and time drivers.\nEnables the I/O driver.\nWhether or not to enable the I/O driver\nEnables the time driver.\nWhether or not to enable the time driver\nSets the number of scheduler ticks after which the …\nHow many ticks before yielding to the driver for timer and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the number of scheduler ticks after which the …\nHow many ticks before pulling a task from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCustomizable keep alive timeout for <code>BlockingPool</code>\nRuntime type\nSpecifies the limit for additional threads spawned by the …\nCap on thread usage.\nEnables the I/O driver and configures the max number of …\nConfigures the task poll count histogram\nWhen true, enables task poll count histogram …\nReturns a new runtime builder initialized with default …\nReturns a new builder with the current thread scheduler …\nReturns a new builder with the multi thread scheduler …\nExecutes function <code>f</code> just before a thread is parked (goes …\nExecutes function <code>f</code> after each thread is started but …\nExecutes function <code>f</code> before each thread stops.\nExecutes function <code>f</code> just after a thread unparks (starts …\nSpecify a random number generator seed to provide …\nWhether or not the clock should start paused.\nSets a custom timeout for a thread in the blocking pool.\nSets name of threads spawned by the <code>Runtime</code>’s thread …\nName fn used for threads spawned by the runtime.\nSets a function used to generate the name of threads …\nSets the stack size (in bytes) for worker threads.\nStack size used for threads spawned by the runtime.\nSets the number of worker threads the <code>Runtime</code> will use.\nThe number of worker threads, used by Runtime.\nTo run after each task is terminated.\nCallback for a worker unparking itself\nCallback for a worker parking itself\nTo run before each task is spawned.\nThe multi-threaded scheduler includes a per-worker LIFO …\nHow many ticks before yielding to the driver for timer and …\nReturns the argument unchanged.\nHow many ticks before pulling a task from the …\nCalls <code>U::from(self)</code>.\nHow big to make each worker’s local queue\nHow to build poll time histograms\nRandom number generator seed to configure runtimes to act …\nTracks the amount of “work” a task may still do before …\nHandle to the runtime scheduler running on the current …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTracks if the current thread is currently driving a …\nHandle to the scheduler’s internal “context”\nUniquely identifies the current thread\nGuard tracking that a caller has entered a blocking region.\nBlocks the thread on the specified future, returning the …\nBlocks the thread on the specified future for <strong>at most</strong> …\nDisallows blocking in the current runtime context until …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTracks the number of nested calls to <code>try_set_current</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCurrent handle\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets this <code>Handle</code> as the current active <code>Handle</code>.\nGuard tracking that a caller has entered a runtime context.\nCurrently in a runtime context.\nNot in a runtime context <strong>or</strong> a blocking region.\nTracks that the current thread has entered a blocking …\nMarks the current thread as being within the dynamic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if in a runtime context.\nForces the current “entered” state to be cleared while …\nScoped thread-local storage\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInserts a value into the scoped cell for the duration of …\nGets the value out of the scoped cell;\nOpaque type tracking the amount of “work” a task may …\nFuture wrapper to ensure cooperative scheduling.\nRuns the given closure with a cooperative task budget. …\nRun a future with a budget constraint for cooperative …\nDecrements the budget. Returns <code>true</code> if successful. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBudget assigned to a task on each poll.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Poll::Pending</code> if the current task has exceeded its …\nSets the current task’s budget.\nForcibly removes the budgeting constraints early.\nReturns an unconstrained budget. Operations will not be …\nRuns the given closure with an unconstrained task budget. …\nNo value.\nSome value of type <code>T</code>.\nSource of <code>Instant::now()</code>\nReuse the <code>mio::Events</code> value across calls to poll.\nReuse the <code>mio::Events</code> value across calls to poll.\nReuse the <code>mio::Events</code> value across calls to poll.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIO driver handle\nThe system event queue.\nThe system event queue.\nThe system event queue.\nSignal driver handle\nTrue when an event with the signal token is received\nTrue when an event with the signal token is received\nTrue when an event with the signal token is received\nReturns a reference to the time driver handle.\nTime driver handle\nRuntime context guard.\nHandle to the runtime.\nError returned by <code>try_current</code> when no Runtime has been …\nRuns a future to completion on this <code>Handle</code>’s associated …\nReturns a <code>Handle</code> view over the currently running <code>Runtime</code>.\nEnters the runtime context. This allows you to construct …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the call failed because there is currently …\nReturns true if the call failed because the Tokio context …\nReturns a view that lets you get information about how the …\nReturns the flavor of the current <code>Runtime</code>.\nSpawns a future onto the Tokio runtime.\nRuns the provided function on an executor dedicated to …\nReturns a Handle view over the currently running Runtime\nThis file contains mocks of the metrics types used in the …\nI/O driver, backed by Mio.\nA reference to an I/O driver.\nRegisters an I/O resource with the reactor for a given …\nDeregisters an I/O resource from the reactor.\nReuse the <code>mio::Events</code> value across calls to poll.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new event loop, returning any error that …\nThe system event queue.\nTracks all registrations\nRegisters I/O resources.\nTrue when an event with the signal token is received\nState that should be synchronized\nForces a reactor blocked in a call to <code>turn</code> to wakeup, or …\nUsed to wake up the reactor from a call to <code>turn</code>. Not …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAssociates an I/O resource with the reactor instance that …\nDeregisters the I/O resource from the reactor it is …\nReturns the argument unchanged.\nHandle to the associated runtime.\nCalls <code>U::from(self)</code>.\nRegisters the I/O resource with the reactor for the …\nPolls for events on the I/O resource’s <code>direction</code> …\nReference to state stored by the driver.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there are registrations that need to be …\nFuture returned by <code>readiness()</code>.\nStored in the I/O driver resource slab.\nNode type marker.\nShould never be <code>!Unpin</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLinked list head\nThe interest this waiter is waiting on.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of all current waiters.\nPolls for readiness events in a given direction.\nWaker used for <code>AsyncRead</code>.\nAn async version of <code>poll_readiness</code> which uses a linked …\nPacks the resource’s readiness and I/O driver latest …\nSets the readiness on this <code>ScheduledIo</code> by invoking the …\nInvoked when the IO driver is shut down; forces this …\nLinked list tail\nEntry in the waiter <code>LinkedList</code>.\nNotifies all pending waiters that have registered interest …\nThe waker for this task.\nWaker used for <code>AsyncWrite</code>.\nThis file contains mocks of the types in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrement the number of tasks scheduled externally\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandle to the runtime’s metrics.\nReturns the argument unchanged.\nReturns the number of tasks currently scheduled in the …\nCalls <code>U::from(self)</code>.\nReturns the current number of alive tasks in the runtime.\nReturns the number of worker threads used by the runtime.\nBlocks the current thread using a condition variable.\nUnblocks a thread that was blocked by <code>ParkThread</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ParkThread</code> handle for the current thread.\nParks the current thread for at most <code>dur</code>.\nGets a reference to the <code>ParkThread</code> handle for this thread.\nThe flavor that executes all tasks on the current thread.\nExecute all tasks on the current-thread.\nThe flavor that executes tasks across multiple threads.\nExecute tasks across multiple threads.\nThe Tokio runtime.\nThe flavor of a <code>Runtime</code>.\nThe runtime scheduler is either a multi-thread or a …\nRuns a future to completion on the Tokio runtime. This is …\nBlocking pool handle, used to signal shutdown\nEnters the runtime context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a handle to the runtime’s spawner.\nHandle to runtime, also contains driver handles\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a view that lets you get information about how the …\nCreates a new runtime instance with default configuration …\nTask scheduler\nShuts down the runtime, without waiting for any spawned …\nShuts down the runtime, waiting for at most <code>duration</code> for …\nSpawns a future onto the Tokio runtime.\nRuns the provided function on an executor dedicated to …\nReturns true if this is a local runtime and the runtime is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInject queue used to send wakeups to a work-stealing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMulti-threaded runtime\nSpawn a local task\nThread-local context.\nData required for executing the scheduler. The struct is …\nUsed to ensure we always place the <code>Core</code> value back into …\nExecutes tasks on the current thread\nUsed if none is specified. This is a temporary constant …\nHandle to the current thread scheduler\nInitial queue capacity.\nScheduler state shared between threads.\nBlocking pool spawner\nScheduler configuration options\nCore scheduler data is acquired by a thread entering …\nScheduler core, enabling the holder of <code>Context</code> to execute …\nDeferred tasks, usually ones that called <code>task::yield_now()</code>.\nResource driver handles\nRuntime driver\nEnters the scheduler context. This sets the queue and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHow often to check the global queue\nScheduler handle\nRemote run queue\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this is a <code>LocalRuntime</code>, flags the owning thread ID.\nMetrics batch\nNotifier for waking up other threads to steal the driver.\nCollection of all active tasks spawned onto this executor.\nBlocks the current thread until an event is received by …\nChecks the driver for new events without blocking the …\nExecute the closure with the given scheduler core stored …\nKeeps track of various runtime metrics.\nCurrent random number generator seed\nScheduler state shared across threads\nSpawns a future onto the <code>CurrentThread</code> scheduler\nSpawn a task which isn’t safe to send across thread …\nUser-supplied hooks to invoke for things\nScheduler run queue\nGet and increment the current tick\nCurrent tick\nTrue if a task panicked without being handled and the …\nWake by reference\nIndicates whether the blocked on thread was woken.\nThis scheduler only has one worker.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGrowable, MPMC queue used to inject new tasks into the …\nCloses the injection queue, returns <code>true</code> if the queue is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPushes a value into the queue.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCloses the injection queue, returns <code>true</code> if the queue is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNumber of pending tasks in the queue. This helps prevent …\nPop a value from the queue.\nPop <code>n</code> values from the queue\nPushes a value into the queue.\nPushes several values into the queue.\nInserts several tasks that have been linked together into …\nReturns the argument unchanged.\nLinked-list head.\nCalls <code>U::from(self)</code>.\nTrue if the queue is closed.\nLinked-list tail.\nA lock (mutex) yielding generic data.\nWork-stealing based thread pool for executing futures.\nBlocks the current thread waiting for the future to …\nReturns the argument unchanged.\nCoordinates idling workers\nCalls <code>U::from(self)</code>.\nParks the runtime.\nRun-queue structures to support a work-stealing scheduler\nA scheduler is initialized with a fixed number of workers. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHandle to the multi thread scheduler\nBlocking pool spawner\nResource driver handles\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCurrent random number generator seed\nTask spawner\nSignals that a worker has observed the shutdown signal and …\nSpawns a future onto the thread pool\nUser-supplied hooks to invoke for things\nData synchronized by the scheduler mutex\nReturns <code>true</code> if this is the final searching worker\nTrack a sleeping worker\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>worker_id</code> is contained in the sleep set.\nNumber of workers currently searching\nNumber of workers currently unparked\nTotal number of workers.\nSleeping workers\nTracks both the number of searching workers and the number …\nA lightweight transition from searching -&gt; running.\nReturns <code>true</code> if the worker needs to do a final check for …\nUnpark a specific worker. This happens if tasks are …\nIf there are no workers actively searching, returns the …\nShared across multiple Parker handles\n<code>Condvar</code> to block on if the driver is unavailable.\nShared driver. Only one thread at a time can use this\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to coordinate access to the driver / <code>condvar</code>\nParks the current thread for at most <code>dur</code>.\nResource (I/O, time, …) driver\nAvoids entering the park if possible\nProducer handle. May only be used from a single thread.\nConsumer handle. May be used from many threads.\nElements\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns false if there are any entries in the queue\nConcurrently updated by many threads.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of entries in the queue\nCreate a new local run-queue\nJoin the two head values\nPops a task from the local queue.\nPushes a batch of tasks to the back of the queue. All …\nPushes a task to the back of the local queue, if there is …\nMoves a batch of tasks into the inject queue.\nHow many tasks can be pushed into the queue\nSteals half the tasks from self and place them into <code>dst</code>.\nOnly updated by producer thread but read by many threads.\nSplit the head value into the real head and the index a …\nMax value for the global queue interval. This is 2x the …\nPer-worker statistics. This is used for both tuning the …\nIdeally, we wouldn’t go above this, value is plucked …\nThis is the previous default\nHow to weigh each individual poll time, value is plucked …\nThe metrics batch used to report runtime-level …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInstant at which work last resumed (continued after park).\nExponentially-weighted moving average of time spent …\nNumber of tasks polled in the batch of scheduled tasks\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThread-local context\nCore data\nContains the error value\nStarts the workers\nValue picked out of thin-air. Running the LIFO slot a …\nA notified task handle\nContains the success value\nUsed to communicate with a worker from other threads.\nRunning a task may consume the core. If the core is still …\nState shared across all workers\nData synchronized by the scheduler mutex\nA task handle\nA scheduler worker\nOnly held to trigger some code on drop. This is used to …\nScheduler configuration options\nUsed to hand-off a worker’s core to another thread.\nCore data\nTasks to wake after resource drivers are polled. This is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHow often to check the global queue\nReference to scheduler’s handle\nCoordinates idle workers\nSynchronized state for <code>Idle</code>.\nIndex holding this worker’s remote state\nReturns a reference to the scheduler’s injection queue.\nGlobal task queue used for:\nSynchronized state for <code>Inject</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the worker is currently searching for more work. …\nTrue if the scheduler is being shutdown\nTrue if the scheduler is being traced\nWhen <code>true</code>, locally scheduled tasks go to the LIFO slot. …\nWhen a task is scheduled from a worker, it is stored in …\nRuns maintenance work such as checking the pool’s state.\nReturn the next notified task available to this worker.\nCollection of all active tasks spawned onto this executor.\nParks the worker thread while waiting for tasks to execute.\nParker\nSignals all tasks to shut down, and waits for them to …\nFast random number generator.\nPer-worker remote state. All other workers have access to …\nThe worker-local run queue.\nCollects metrics from the runtime.\nShuts down the core.\nCores that have observed the shutdown signal\nPer-worker runtime stats\nSteals tasks from this worker.\nFunction responsible for stealing tasks from another worker\nData synchronized by the scheduler mutex\nIncrement the tick\nUsed to schedule bookkeeping tasks every so often.\nThe number of cores that have observed the trace signal.\nReturns <code>true</code> if the transition happened.\nPrepares the worker state for parking.\nUnparks the associated worker thread\nWorker\nContains the error value\nA non-Send variant of Notified with the invariant that it …\nA task was notified.\nContains the success value\nTask result sent back.\nAn owned handle to the task, tracked by ref count.\nHooks for scheduling tasks which are needed in the task …\nA task that is not owned by any <code>OwnedTasks</code>. Used for …\nCore task module.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module has containers for storing the tasks spawned …\nThis is the constructor for a new task. Three references …\nThe task has completed work and is ready to be released. …\nRuns the task.\nSchedule the task\nPreemptively cancels the task as part of the shutdown …\nPolling the task resulted in a panic. Should the runtime …\nCreates a new task with an associated join handle. This …\nSchedule the task to run in the near future, yielding the …\nAn owned permission to abort a spawned task, without …\nAbort the task associated with the handle.\nReturns a cloned <code>AbortHandle</code> that can be used to remotely …\nReturns the argument unchanged.\nReturns a task ID that uniquely identifies this task …\nCalls <code>U::from(self)</code>.\nChecks if the task associated with this <code>AbortHandle</code> has …\nThe task cell. Contains the components of the task.\nThe core of the task.\nCrate public as this is also needed by the pool.\nEither the future or the output.\nSet and clear the task id in the context when the future …\nCold data is stored after the future. Data is considered …\nEither the future or output, depending on the execution …\nDrops the future.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the id of the task containing this <code>Header</code>.\nGets a pointer to the id of the task containing this <code>Header</code>…\nGets a pointer to the scheduler of the task containing …\nGets a pointer to the <code>Trailer</code> of the task containing this …\nHot task state data\nOptional hooks needed in the harness.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllocates a new task cell, containing the header, trailer, …\nPointers for the linked list in the <code>OwnedTasks</code> that owns …\nThis integer contains the id of the <code>OwnedTasks</code> or …\nPolls the future.\nPointer to next task, used with the injection queue.\nScheduler used to drive this future.\nEither the future or the output.\nTask state.\nStores the task output.\nTakes the task output.\nThe task’s ID, used for populating <code>JoinError</code>s.\nCold data\nTable of function pointers for executing actions on the …\nConsumer task waiting on completion of this task.\nTask failed to execute to completion.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a task ID that identifies the task which errored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the join error, returning the object with which …\nReturns true if the error was caused by the task being …\nReturns true if the error was caused by the task panicking.\nConsumes the join error, returning the object with which …\nTyped raw task handle.\nCancels the task and store the appropriate error in the …\nCompletes the task. This method assumes that the state is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new task that holds its own ref-count.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPolls the inner future. A ref-count is consumed.\nPolls the future. If the future completes, the output is …\nPolls the task and cancel it if necessary. This takes …\nReleases the task from the scheduler. Returns the number …\nForcibly shuts down the task.\nRead the task output into <code>dst</code>.\nAn opaque ID that uniquely identifies a task relative to …\nReturns the argument unchanged.\nReturns the <code>Id</code> of the currently running task.\nCalls <code>U::from(self)</code>.\nReturns the <code>Id</code> of the currently running task, or <code>None</code> if …\nAn owned permission to join on a task (await its …\nAbort the task associated with the handle.\nReturns a new <code>AbortHandle</code> that can be used to remotely …\nReturns the argument unchanged.\nReturns a task ID that uniquely identifies this task …\nCalls <code>U::from(self)</code>.\nChecks if the task associated with this <code>JoinHandle</code> has …\nSet the waker that is notified when the task completes.\nAsserts that the given task is owned by this <code>OwnedTasks</code> …\nAsserts that the given task is owned by this …\nBinds the provided task to this <code>OwnedTasks</code> instance. This …\nThe part of <code>bind</code> that’s the same for every type of …\nBind a task that isn’t safe to transfer across thread …\nShuts down all tasks in the collection. This call also …\nShuts down all tasks in the collection. This call also …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates the size of the sharded list based on the number …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalling <code>get_trailer_offset</code> directly in vtable doesn’t …\nRaw task handle\nDeallocates the memory.\nAn abort handle has been dropped.\nThe join handle has been dropped.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCompute the offset of the <code>Core&lt;T, S&gt;</code> field in <code>Cell&lt;T, S&gt;</code> …\nCompute the offset of the <code>Id</code> field in <code>Cell&lt;T, S&gt;</code> using the …\nGet the queue-next pointer\nCompute the offset of the <code>Trailer</code> field in <code>Cell&lt;T, S&gt;</code> …\nReturns a reference to the task’s header.\nThe number of bytes that the <code>id</code> field is offset from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety: mutual exclusion is required to call this function.\nPolls the future.\nIncrement the task’s reference count.\nRemotely aborts the task.\nSchedules the task for execution on the runtime.\nThe number of bytes that the <code>scheduler</code> field is offset …\nSets the queue-next pointer\nScheduler is being shutdown.\nReturns a reference to the task’s state.\nReturns a reference to the task’s trailer.\nThe number of bytes that the <code>trailer</code> field is offset from …\nSafety: <code>dst</code> must be a <code>*mut Poll&lt;super::Result&lt;T::Output&gt;&gt;</code> …\nReads the task output, if complete.\nTry to set the waker notified when the task is complete. …\nGet the vtable for the requested <code>T</code> and <code>S</code> generics.\nThis call notifies the task. It will not consume any …\nThis call consumes a ref-count and notifies the task. This …\nThe task has been forcibly cancelled.\nThe task is complete.\nContains the error value\nState a task is initialized with.\nThe join handle is still around.\nA join handle waker has been set.\nExtracts the task’s lifecycle value from the state.\nFlag tracking if the task has been pushed into a run queue.\nContains the success value\nBits used by the ref count portion of the state.\nNumber of positions to shift the ref count.\nOne ref count.\nThe task is currently being run.\nAll bits.\nCurrent state value.\nOptimistically tries to swap the state assuming the join …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the task’s future has completed …\nReturns <code>true</code> if the task is in an idle state.\nReturns <code>true</code> if the task has been flagged as notified.\nLoads the current state, establishes <code>Acquire</code> ordering.\nReturns a task’s initial state.\nReturns <code>true</code> if the task should be released.\nReturns <code>true</code> if the task should be released.\nSets the <code>JOIN_WAKER</code> bit.\nTransitions the task from <code>Running</code> -&gt; <code>Complete</code>.\nTransitions the task from <code>Running</code> -&gt; <code>Idle</code>.\nSets the cancelled bit and transitions the state to …\nTransitions the state to <code>NOTIFIED</code>.\nTransitions the state to <code>NOTIFIED</code>.\nAttempts to transition the lifecycle to <code>Running</code>. This sets …\nSets the <code>CANCELLED</code> bit and attempts to transition to …\nTransitions from <code>Complete</code> -&gt; <code>Terminal</code>, decrementing the …\nTries to unset the <code>JOIN_INTEREST</code> flag.\nUnsets the <code>JOIN_WAKER</code> bit.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a <code>WakerRef</code> which avoids having to preemptively …\nRuns on specific task-related events\nTask metadata supplied to user-provided hooks for task …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the opaque ID of the task.\nThe opaque ID of the task.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTime implementation that drives <code>Sleep</code>, <code>Interval</code>, and …\nTimer state shared between <code>Driver</code>, <code>Handle</code>, and <code>Registration</code>…\nWrapper around the sharded timer wheels.\nTimer state structures.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the driver is being shutdown.\nLocks the driver’s sharded wheel structure.\nCreates a new <code>Driver</code> instance that uses <code>park</code> to block the …\nThe earliest time at which we promise to wake up without …\nParker to delegate to.\nSharded Timer wheels.\nNumber of entries in the sharded timer wheels.\nContains the error value\nThe largest safe integer to use for ticks.\nContains the success value\nThis structure holds the current shared state of the timer …\nA timer entry.\nAn <code>TimerHandle</code> is the (non-enforced) “unique” pointer …\nThe shared state structure of a timer. This structure is …\nEnsure the type is !Unpin\nNode type marker.\nGets the cached time-of-expiration value.\nThe expiration time for which this entry is currently …\nCancels and deregisters the timer. This operation is …\nDeadline for the timer. This is used to register on the …\nArc reference to the runtime handle. We can only free the …\nAttempts to adjust the timer to a new timestamp.\nSets the true time-of-expiration only if it is after the …\nFires the timer, setting the result to the provided result.\nAttempts to transition to a terminal state. If the state …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>TimerHandle</code> for this timer.\nLinked list head\nShared inner structure; this is part of an intrusive …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarks this timer as being moved to the pending list, if …\nAttempts to mark this entry as pending. If the expiration …\nReturns true if the state of this timer indicates that the …\nReturns true if the state of this timer indicates that the …\nA link within the doubly-linked list of timers on a …\nIf the timer is completed, returns the result of the …\nWhether the deadline has been registered.\nIf the timer is fired (an Acquire order read on state shows\nSets the cached time-of-expiration value.\nMarks the timer as registered (poll will return None) and …\nSets the true time-of-expiration value, even if it is less …\nForcibly sets the true and cached expiration times to the …\nGets the shard id.\nThe shard id. We should never change it.\nHolds either the scheduled expiration time for this timer, …\nCurrent state. This records whether the timer entry is …\nGets the true time-of-expiration value, and copies it into …\nLinked list tail\nReturns the true time-of-expiration value, with relaxed …\nThe currently-registered waker\nReturns the current expiration time, or None if not …\nHandle to time driver instance.\nRemoves a registered timer from the driver.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether the driver has been shutdown.\nRuns timer related logic, and returns the next wakeup time\nRemoves and re-adds an entry to the driver.\nReturns the time source associated with this handle.\nTrack that the driver is being unparked\nA structure which handles conversion from Instants to <code>u64</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe maximum duration of a <code>Sleep</code>.\nNumber of levels. Each level has 64 slots. By using 6 …\nTiming wheel implementation.\nReturns the number of milliseconds that have elapsed since …\nThe number of milliseconds elapsed since the wheel started.\nReturns the argument unchanged.\nInserts an entry into the timing wheel.\nCalls <code>U::from(self)</code>.\nTimer wheel.\nCreates a new timing wheel.\nReturns the instant at which the next timeout expires.\nReturns the tick at which this timer wheel next needs to …\nUsed for debug assertions\nEntries queued for firing\nAdvances the timer up to the instant represented by <code>now</code>.\nInstant at which to poll.\niteratively find entries that are between the wheel’s …\nRemoves <code>item</code> from the timing wheel.\nObtains the list of entries that need processing for the …\nIndicates when a slot must be processed next.\nLevel multiplier.\nWheel for a single level in the timer. This wheel contains …\nThe instant at which the slot needs to be processed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe level containing the slot.\nFinds the slot that needs to be processed next and returns …\nBit field tracking which slots currently contain entries.\nSlots. We access these via the EntryInner <code>current_list</code> as …\nThe slot index.\nConverts a duration (milliseconds) and a level to a slot …\nError returned from the <code>Semaphore::acquire</code> function.\nThe cell was already initialized when <code>OnceCell::set</code> was …\nA barrier enables multiple tasks to synchronize the …\nA <code>BarrierWaitResult</code> is returned by <code>wait</code> when all tasks in …\nThe semaphore has been closed and cannot issue new permits.\nThe cell is currently being initialized.\nA handle to a held <code>Mutex</code> that has had a function applied …\nAn asynchronous <code>Mutex</code>-like type.\nA handle to a held <code>Mutex</code>. The guard can be held across any …\nThe semaphore has no available permits.\nNotifies a single task to wake up.\nA thread-safe cell that can be written to only once.\nA owned handle to a held <code>Mutex</code> that has had a function …\nAn owned handle to a held <code>Mutex</code>.\nOwned RAII structure used to release the exclusive write …\nOwned RAII structure used to release the shared read …\nOwned RAII structure used to release the exclusive write …\nAn owned permit from the semaphore.\nAn asynchronous reader-writer lock.\nRAII structure used to release the exclusive write access …\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nCounting semaphore performing asynchronous permit …\nA permit from the semaphore.\nErrors that can be returned from <code>OnceCell::set</code>.\nError returned from the <code>Semaphore::try_acquire</code> function.\nError returned from the <code>Mutex::try_lock</code>, <code>RwLock::try_read</code> …\nImplementation Details.\nA multi-producer, multi-consumer broadcast queue. Each …\nNamed future types.\nThe low level semaphore\nA multi-producer, single-consumer queue for sending values …\nA one-shot channel is used for sending a single message …\nThread-safe task notification primitives.\nA multi-producer, multi-consumer channel that only retains …\nA barrier enables multiple tasks to synchronize the …\nA <code>BarrierWaitResult</code> is returned by <code>wait</code> when all tasks in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this task from wait is the “leader task…\nCreates a new barrier that can block a given number of …\nDoes not resolve until all tasks have rendezvoused here.\nError returned from the <code>Semaphore::acquire</code> function.\nThe semaphore has been closed and cannot issue new permits.\nThe maximum number of permits which a semaphore can hold.\nThe semaphore has no available permits.\nAn asynchronous counting semaphore which permits waiting …\nError returned from the <code>Semaphore::try_acquire</code> function.\nAn entry in the wait queue.\nShould not be <code>Unpin</code>.\nRelease <code>rem</code> permits to the semaphore’s wait list, …\nAssign permits to the waiter.\nReturns the current number of available permits.\nCloses the semaphore. This prevents the semaphore from …\nCreates a new semaphore with the initial number of permits.\nCreates a new closed semaphore with 0 permits.\nDecrease a semaphore’s permits by a maximum of <code>n</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the semaphore is closed.\nReturns <code>true</code> if the error was caused by a closed semaphore.\nReturns <code>true</code> if the error was caused by calling <code>try_acquire</code>…\nCreates a new semaphore with the initial number of permits\nCreates a new closed semaphore with 0 permits.\nThe current number of available permits in the semaphore.\nIntrusive linked-list pointers.\nAdds <code>added</code> new permits to the semaphore.\nThe current state of the waiter.\nThe waker to notify the task awaiting permits.\nMax number of receivers. Reserve space to lock.\nReceiving-half of the <code>broadcast</code> channel.\nReceive a value future.\nSending-half of the <code>broadcast</code> channel.\nData shared between senders and receivers.\nSlot in the buffer.\nNext position to write a value.\nAn entry in the wait queue.\nList used in <code>Shared::notify_rx</code>. It wraps a guarded linked …\nShould not be <code>Unpin</code>.\nBlocking receive to call outside of asynchronous contexts.\nslots in the channel.\nCreate a bounded, multi-producer, multi-consumer channel …\nTrue if the channel is closed.\nBroadcast error types\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no queued values.\nReturns true if there aren’t any messages in the channel …\nReturns the number of queued values.\nReturns the number of messages that were sent into the …\nMask a position -&gt; index.\nCreates the sending-half of the <code>broadcast</code> channel.\nCreate a new <code>Receiver</code> which reads starting from the tail.\nCreates the sending-half of the <code>broadcast</code> channel, and …\nNext position to read from\nNumber of outstanding Sender handles.\nIntrusive linked-list pointers.\nRemoves the last element from the guarded list. Modifying …\nNext position to write to.\nUniquely identifies the <code>send</code> stored in the slot.\nA custom <code>project</code> implementation is used in place of …\nTrue if queued.\nReceiver being waited on.\nReturns the number of active receivers.\nReceives the next value for this receiver.\nLocks the next value if there is one.\nRemaining number of receivers that are expected to see …\nRe-subscribes to the channel starting from the current …\nNumber of active receivers.\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nAttempts to send a value to all active <code>Receiver</code> handles, …\nState shared with all receivers and senders.\nCreates a new <code>Receiver</code> handle that will receive values …\nTail of the queue. Includes the rx wait list.\nAttempts to return a pending value on this receiver …\nThe value being broadcast.\nEntry in the waiter <code>LinkedList</code>.\nReceivers waiting for a value.\nTask waiting on the broadcast channel.\nThere are no more active senders implying no further …\nThere are no more active senders implying no further …\nThe channel is currently empty. There are still active …\nThe receiver lagged too far behind. Attempting to receive …\nThe receiver lagged too far behind and has been forcibly …\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nError returned by the <code>send</code> function on a <code>Sender</code>.\nAn error returned from the <code>try_recv</code> function on a <code>Receiver</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFuture returned from <code>Notify::notified()</code>.\nAdds this future to the list of futures that are ready to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>Notify</code> being received on.\nNumber of calls to <code>notify_waiters</code> at the time of creation.\nA custom <code>project</code> implementation is used in place of …\nThe current state of the receiving process.\nEntry in the waiter <code>LinkedList</code>.\nThe number of values a block can contain.\nOwned permit to send one value into the channel.\nPermits to send one value into the channel.\nAn <code>Iterator</code> of <code>Permit</code> that can be used to hold <code>n</code> slots in …\nReceives values from the associated <code>Sender</code>.\nSends values to the associated <code>Receiver</code>.\nReceive values from the associated <code>UnboundedSender</code>.\nSend values to the associated <code>UnboundedReceiver</code>.\nA sender that does not prevent the channel from being …\nAn unbounded sender that does not prevent the channel from …\nThe channel receiver.\nThe channel receiver\nCreates a bounded mpsc channel for communicating between …\nChannel error types.\nA concurrent, lock-free, FIFO list.\nCreates an unbounded mpsc channel for communicating …\nMasks an index to get the block identifier.\nA block in a linked list.\nExtra fields for a <code>Block&lt;T&gt;</code>.\nMask covering all bits used to track slot readiness.\nFlag tracking that a block has gone through the sender’s …\nMasks an index to get the value offset in a block.\nFlag tracking all senders dropped.\nReturns the number of blocks between <code>self</code> and the block at …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGrows the <code>Block</code> linked list by allocating and appending a …\nReturns true if <em>this</em> block has a value in the given slot.\nThe header fields.\nInitialize a <code>Values</code> struct from a pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the block matches the given index.\nReturns <code>true</code> when all slots have their <code>ready</code> bits set.\nReturns <code>true</code> if the specified slot has a value ready to be …\nReturns <code>true</code> if the closed flag has been set.\nLoads the next block\nThe next block in the linked list.\nReturns the <code>observed_tail_position</code> value, if set\nThe observed <code>tail_position</code> value <em>after</em> the block has been …\nReturns the offset into the block referenced by <code>slot_index</code>.\nReads the value at the given offset.\nBitfield tracking slots that are ready to have their …\nResets the block to a blank state. This enables reusing …\nMark a slot as ready\nReturns the index of the first slot in the block …\nThe start index of this block.\nPushes <code>block</code> as the next block in the link.\nSignal to the receiver that the sender half of the list is …\nReleases the block to the rx half for freeing.\nArray containing values pushed into the block. Values are …\nWrites a value to the block at the given offset.\nOwned permit to send one value into the channel.\nPermits to send one value into the channel.\nAn <code>Iterator</code> of <code>Permit</code> that can be used to hold <code>n</code> slots in …\nReceives values from the associated <code>Sender</code>.\nChannel semaphore is a tuple of the semaphore …\nSends values to the associated <code>Receiver</code>.\nA sender that does not prevent the channel from being …\nBlocking receive to call outside of asynchronous contexts.\nVariant of <code>Self::recv_many</code> for blocking contexts.\nBlocking send to call outside of asynchronous contexts.\nReturns the current capacity of the channel.\nReturns the current capacity of the channel.\nThe channel receiver.\nCreates a bounded mpsc channel for communicating between …\nCloses the receiving half of a channel without dropping it.\nCompletes when the receiver has dropped.\nConverts the <code>Sender</code> to a <code>WeakSender</code> that does not count …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the channel has been closed. This happens when …\nChecks if a channel is closed.\nChecks if a channel is empty.\nReturns the number of messages in the channel.\nReturns the maximum buffer capacity of the channel.\nReturns the maximum buffer capacity of the channel.\nPolls to receive the next message on this channel.\nPolls to receive multiple messages on this channel, …\nReceives the next value for this receiver.\nReceives the next values for this receiver and extends …\nReleases the reserved capacity <em>without</em> sending a message, …\nWaits for channel capacity. Once capacity to send one …\nWaits for channel capacity. Once capacity to send <code>n</code> …\nWaits for channel capacity, moving the <code>Sender</code> and …\nReturns <code>true</code> if senders belong to the same channel.\nSends a value, waiting until there is capacity.\nSends a value using the reserved capacity.\nSends a value using the reserved capacity.\nSends a value, waiting until there is capacity, but only …\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>Sender</code> handles.\nTries to receive the next value for this receiver.\nTries to acquire a slot in the channel without waiting for …\nTries to acquire <code>n</code> slots in the channel without waiting …\nTries to acquire a slot in the channel without waiting for …\nAttempts to immediately send a message on this <code>Sender</code>\nTries to convert a <code>WeakSender</code> into a <code>Sender</code>. This will …\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>WeakSender</code> handles.")