searchState.loadedDescShard("ring", 0, "Safe, fast, small crypto using Rust with BoringSSL’s …\nAuthenticated Encryption with Associated Data (AEAD).\nKey Agreement: ECDH, including X25519.\nBit lengths.\nC types.\nConstant-time operations.\nSHA-2 and the legacy SHA-1 digest algorithm.\nError reporting.\nHMAC-based Extract-and-Expand Key Derivation Function.\nHMAC is specified in RFC 2104.\nSerialization and deserialization.\nUnsigned multi-precision integer arithmetic.\nPBKDF2 derivation and verification.\nPKCS#8 is specified in RFC 5958.\nPolyfills for functionality that will (hopefully) be added …\nCryptographic pseudo-random number generation.\nRSA.\nPublic key signatures: signing and verification.\nTesting framework.\nReferences a test input file.\nAES-128 in GCM mode with 128-bit tags and 96 bit nonces.\nAES-256 in GCM mode with 128-bit tags and 96 bit nonces.\nThe additionally authenticated data (AAD) for an opening …\nAn AEAD Algorithm.\nAn AEAD key bound to a nonce sequence.\nChaCha20-Poly1305 as described in RFC 8439.\nImmutable keys for use in situations where <code>OpeningKey</code>/…\nThe maximum length of a tag for the algorithms in this …\nAll the AEADs we support use 96-bit nonces.\nA nonce for a single AEAD opening or sealing operation.\nA sequences of unique nonces.\nAn AEAD key for authenticating and decrypting (“opening…\nAn AEAD key for encrypting and signing (“sealing”), …\nA possibly valid authentication tag.\nAn AEAD key without a designated role or nonce sequence.\nReturns the next nonce in the sequence.\nThe key’s AEAD algorithm.\nThe chacha20-poly1305@openssh.com AEAD-ish construct.\nConstruct an empty <code>Aad</code>.\nReturns the argument unchanged.\nConstruct the <code>Aad</code> from the given bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of the key.\nConstructs a new key from the given <code>UnboundKey</code> and …\nThe length of the nonces.\nAuthenticated Encryption with Associated Data (AEAD).\nQUIC Header Protection.\nAuthenticated Encryption with Associated Data (AEAD).\nThe length of a tag.\nAuthenticated Encryption with Associated Data (AEAD).\nNonce || Counter, all big-endian.\nThe IV for a single block encryption.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n“Less safe” because it defeats attempts to use the …\nAES-128 in GCM mode with 128-bit tags and 96 bit nonces.\nAES-256 in GCM mode with 128-bit tags and 96 bit nonces.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCounter || Nonce, all native endian.\nThe IV for a single block encryption.\nThis is “less safe” because it skips the important …\nAnalogous to <code>slice::copy_within()</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChaCha20-Poly1305 as described in RFC 8439.\nCopies |key| into |ctx_buf|.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of key.\nA key for opening packets.\nThe length in bytes of the <code>packet_length</code> field in a SSH …\nA key for sealing packets.\nThe length in bytes of an authentication tag.\nReturns the decrypted, but unauthenticated, packet length.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>SealingKey</code>.\nConstructs a new <code>OpeningKey</code>.\nOpens (authenticates and decrypts) a packet.\nSeals (encrypts and signs) a packet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccess to <code>inner</code> for the integrated AES-GCM implementations …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImmutable keys for use in situations where <code>OpeningKey</code>/…\nThe key’s AEAD algorithm.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a <code>LessSafeKey</code>.\nLike <code>super::OpeningKey::open_in_place()</code>, except it accepts …\nLike open_in_place, except the authentication tag is …\nLike <code>super::OpeningKey::open_within()</code>, except it accepts an\nLike <code>super::SealingKey::seal_in_place_append_tag()</code>, except …\nLike <code>super::SealingKey::seal_in_place_separate_tag()</code>, …\nAll the AEADs we support use 96-bit nonces.\nA nonce for a single AEAD opening or sealing operation.\nConstructs a <code>Nonce</code> with the given value, assuming that the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a <code>Nonce</code> with the given value, assuming that the …\nAn AEAD key for authenticating and decrypting (“opening…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAuthenticates and decrypts (“opens”) data in place.\nAuthenticates and decrypts (“opens”) data in place, …\nA Poly1305 key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplements the original, non-IETF padding semantics.\nAES-128.\nAES-256.\nA QUIC Header Protection Algorithm.\nChaCha20.\nA key for generating QUIC Header Protection masks.\nQUIC sample for new key masks\nThe key’s algorithm.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of the key.\nCreate a new header protection key.\nGenerate a new QUIC Header Protection mask.\nThe required sample length.\nAn AEAD key for encrypting and signing (“sealing”), …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEncrypts and signs (“seals”) data in place, appending …\nEncrypts and signs (“seals”) data in place.\nAn AEAD key without a designated role or nonce sequence.\nThe key’s AEAD algorithm.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a <code>UnboundKey</code>.\nA key agreement algorithm.\nECDH using the NSA Suite B P-256 (secp256r1) curve.\nECDH using the NSA Suite B P-384 (secp384r1) curve.\nAn ephemeral private key for use (only) with …\nA public key for key agreement.\nAn unparsed, possibly malformed, public key for key …\nX25519 (ECDH using Curve25519) as described in RFC 7748.\nPerforms a key agreement with an ephemeral private key and …\nThe algorithm for the private key.\nThe algorithm for the public key.\nThe algorithm for the public key.\nTODO: doc\nComputes the public key from the private key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new ephemeral private key for the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>UnparsedPublicKey</code>.\nMulti-precision integers.\nElements of ℤ/mℤ for some modulus <em>m</em>.\nCalculates base**exponent (mod m).\nThe number of Montgomery factors that need to be canceled …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDoes a Montgomery reduction on <code>limbs</code> assuming they are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerified a == b**-1 (mod m), i.e. a**-1 == b (mod m).\nAll <code>BoxedLimbs&lt;M&gt;</code> are stored in the same number of limbs.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe modulus <em>m</em> that determines the size of <code>limbx</code>.\nThe x86 implementation of <code>bn_mul_mont</code>, at least, requires …\nThe modulus <em>m</em> for a ring ℤ/mℤ, along with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe encoding of the result of a multiplication.\nThe encoding of the result of a reduction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nr *= a\nr = r**2\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe length of something, in bits.\nThe number of bits this bit length represents, as a <code>usize</code>.\nThe bit length, rounded up to a whole number of bytes.\nReturns the argument unchanged.\nConstructs a <code>BitLength</code> from the given length in bits.\nConstructs a <code>BitLength</code> from the given length in bytes.\nCalls <code>U::from(self)</code>.\nAn <code>int</code> returned from a foreign function containing <strong>1</strong> if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>Ok(())</code> if <code>a == b</code> and <code>Err(error::Unspecified)</code> …\nA witness indicating that CPU features have been detected …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA digest algorithm.\nA context for multi-step (Init-Update-Finish) digest …\nA calculated digest value.\nThe maximum block length (<code>Algorithm::block_len()</code>) of all …\nThe maximum chaining length (<code>Algorithm::chaining_len()</code>) of …\nThe maximum output length (<code>Algorithm::output_len()</code>) of all …\nSHA-1 as specified in FIPS 180-4. Deprecated.\nThe length of the output of SHA-1, in bytes.\nSHA-256 as specified in FIPS 180-4.\nThe length of the output of SHA-256, in bytes.\nSHA-384 as specified in FIPS 180-4.\nThe length of the output of SHA-384, in bytes.\nSHA-512 as specified in FIPS 180-4.\nSHA-512/256 as specified in FIPS 180-4.\nThe length of the output of SHA-512/256, in bytes.\nThe length of a block for SHA-512-based algorithms, in …\nThe length of the length field for SHA-512-based …\nThe length of the output of SHA-512, in bytes.\nThe algorithm that this context is using.\nThe algorithm that was used to calculate the digest value.\nThe context’s algorithm.\nThe internal block length.\nThe size of the chaining value of the digest function, in …\nReturns the digest of <code>data</code> using the given digest …\nFinalizes the digest calculation and returns the digest …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of the length in the padding.\nConstructs a new context.\nThe length of a finalized digest.\nUpdates the digest with all the data in <code>data</code>.\nA SHA-2 input word.\nThe maximum length of a PKCS#8 documents generated by <em>ring</em> …\nElliptic curve operations and schemes using Curve25519.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nElliptic curve operations on P-256 &amp; P-384.\nEdDSA Signatures.\nElliptic curve operations on the birationally equivalent …\nX25519 Key agreement.\nThe length of an Ed25519 public key.\nEdDSA Signatures.\nEdDSA Signatures.\nAn Ed25519 key pair, for signing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an Ed25519 key pair by parsing an unencrypted …\nConstructs an Ed25519 key pair by parsing an unencrypted …\nConstructs an Ed25519 key pair from the private key seed …\nConstructs a Ed25519 key pair from the private key seed …\nGenerates a new key pair and returns the key pair …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the signature of the message <code>msg</code>.\nVerification of Ed25519 signatures.\nParameters for EdDSA signing and verification.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nX25519 (ECDH using Curve25519) as described in RFC 7748.\nThe maximum length, in bytes, of an encoded public key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nECDH key agreement using the P-256 and P-384 curves.\nFunctionality shared by operations on private keys (ECC …\nFunctionality shared by operations on public keys (ECDSA …\nPublic keys are encoding in uncompressed form using the …\nPublic keys are encoding in uncompressed form using the …\nA key agreement algorithm.\nECDH using the NSA Suite B P-256 (secp256r1) curve.\nECDH using the NSA Suite B P-384 (secp384r1) curve.\nA key agreement algorithm.\nECDSA Signatures using the P-256 and P-384 curves.\nECDSA Signatures using the P-256 and P-384 curves.\nECDSA Signatures using the P-256 and P-384 curves.\nCalculate the digest of <code>msg</code> using the digest algorithm …\nSigning of ASN.1 DER-encoded ECDSA signatures using the …\nSigning of fixed-length (PKCS#11 style) ECDSA signatures …\nSigning of ASN.1 DER-encoded ECDSA signatures using the …\nSigning of fixed-length (PKCS#11 style) ECDSA signatures …\nAn ECDSA key pair, used for signing.\nAn ECDSA signing algorithm.\nGenerates an ECDSA nonce in a way that attempts to protect …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an ECDSA key pair by parsing an unencrypted …\nConstructs an ECDSA key pair from the private key and …\nGenerates a new key pair and returns the key pair …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the signature of the <code>message</code> using a random nonce …\nReturns the signature of message digest <code>h</code> using a “random…\nVerification of ASN.1 DER-encoded ECDSA signatures using …\nVerification of fixed-length (PKCS#11 style) ECDSA …\n<em>Not recommended</em>. Verification of ASN.1 DER-encoded ECDSA …\n<em>Not recommended</em>. Verification of ASN.1 DER-encoded ECDSA …\nVerification of ASN.1 DER-encoded ECDSA signatures using …\nVerification of fixed-length (PKCS#11 style) ECDSA …\nAn ECDSA verification algorithm.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is intentionally not public.\nOperations and values needed by all curve operations.\nA field element, i.e. an element of ℤ/qℤ for the curve…\nRepresents the prime order <em>n</em> of the curve’s group.\nOperations on private keys, for ECDH and ECDSA signing.\nOperations and values needed by all operations on public …\nOperations on public scalars needed by ECDSA signature …\nRepresents the (prime) order <em>q</em> of the curve’s prime …\nA scalar. Its value is in [0, n). Zero-valued scalars are …\nThe number of Montgomery factors that need to be canceled …\nThe number of Montgomery factors that need to be canceled …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe modulus <em>m</em> for the ring ℤ/mℤ for which this element …\nThe modulus <em>m</em> for the ring ℤ/mℤ for which this element …\nReturns the modular inverse of <code>a</code> (mod <code>n</code>). Panics if <code>a</code> is …\nElements of ℤ/mℤ for some modulus <em>m</em>. Elements are …\nThe number of Montgomery factors that need to be canceled …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe modulus <em>m</em> for the ring ℤ/mℤ for which this element …\nGenerates a random scalar in the range [1, n).\nParses a public key encoded in uncompressed form. The key …\nAn <code>Encoding</code> of a type <code>T</code> can be converted to/from its byte …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn error parsing or validating a key.\nAn error with absolutely no details.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn HKDF algorithm.\nHKDF using HMAC-SHA-1. Obsolete.\nHKDF using HMAC-SHA-256.\nHKDF using HMAC-SHA-384.\nHKDF using HMAC-SHA-512.\nThe length of the OKM (Output Keying Material) for a …\nAn HKDF OKM (Output Keying Material)\nA HKDF PRK (pseudorandom key).\nA salt for HKDF operations.\nThe algorithm used to derive this salt.\nThe HKDF-Expand operation.\nThe HKDF-Extract operation.\nFills <code>out</code> with the output of the HKDF-Expand operation for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe underlying HMAC algorithm.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length that <code>Prk::expand()</code> should expand its input to.\nThe <code>OkmLength</code> given to <code>Prk::expand()</code>.\nConstructs a new <code>Salt</code> with the given value based on the …\nConstruct a new <code>Prk</code> directly with the given value.\nAn HMAC algorithm.\nA context for multi-step (Init-Update-Finish) HMAC signing.\nHMAC using SHA-1. Obsolete.\nHMAC using SHA-256.\nHMAC using SHA-384.\nHMAC using SHA-512.\nA key to use for HMAC signing.\nAn HMAC tag.\nThe digest algorithm for the key.\nThe digest algorithm this HMAC algorithm is based on.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate an HMAC signing key using the given digest …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct an HMAC signing key using the given digest …\nCalculates the HMAC of <code>data</code> using the key <code>key</code> in one step.\nFinalizes the HMAC calculation and returns the HMAC value. …\nUpdates the HMAC with all the data in <code>data</code>. <code>update</code> may be …\nCalculates the HMAC of <code>data</code> using the signing key <code>key</code>, and …\nConstructs a new HMAC signing context using the given …\nA serialized positive integer.\nSerialization and deserialization.\nA serialized positive integer.\nReturns the value, ordered from significant byte to least …\nReturns the first byte.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProcesses <code>limbs</code> as a sequence of 5-bit windows, folding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of bits in <code>a</code>.\nEquivalent to <code>if (r &gt;= m) { r -= m; }</code>\nParses <code>input</code> into <code>result</code>, padding <code>result</code> with zeros to its …\nParses <code>input</code> into <code>result</code>, verifies that the value is less …\nReturns an iterator of the big-endian encoding of <code>limbs</code>.\nA PBKDF2 algorithm.\nPBKDF2 using HMAC-SHA1.\nPBKDF2 using HMAC-SHA256.\nPBKDF2 using HMAC-SHA384.\nPBKDF2 using HMAC-SHA512.\nFills <code>out</code> with the key derived using PBKDF2 with the given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVerifies that a previously-derived (e.g., using <code>derive</code>) …\nA generated PKCS#8 document.\nA template for constructing PKCS#8 documents.\nShould the wrong public key ASN.1 tagging used by early …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses an unencrypted PKCS#8 private key, verifies that it …\nParses an unencrypted PKCS#8 private key, verifies that it …\nFormats a private key “…\nconst-capable <code>x.try_into().unwrap_or(usize::MAX)</code>\nA specialized version of <code>core::iter::FlatMap</code> for mapping …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs an <code>ArrayFlatMap</code> wrapping the given iterator, …\nRequired for implementing <code>ExactSizeIterator</code>.\nReturns the flattened form of <code>a</code>\nAn iterator that skips all leading zeros.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPolyfill for <code>Option::unwrap()</code> as a const fn; feature …\nA random value constructed from a <code>SecureRandom</code> that hasn’…\nA type that can be returned by <code>ring::rand::generate()</code>.\nA secure random number generator.\nA secure random number generator where the random values …\nExpose the random value.\nFills <code>dest</code> with random bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate the new random value using <code>rng</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>SystemRandom</code>.\nFills <code>dest</code> with random bytes.\nAn RSA key pair, used for signing.\nRSA key pair components.\nAn RSA Public Key.\nRSA public key components.\nParameters for RSA verification.\nThe private exponent.\n<code>p</code>’s public Chinese Remainder Theorem exponent.\n<code>q</code>’s public Chinese Remainder Theorem exponent.\nThe public exponent, encoded in big-endian bytes without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe public modulus, encoded in big-endian bytes without …\nThe first prime factor of <code>d</code>.\nThe public key components.\nThe second prime factor of <code>d</code>.\n<code>q**-1 mod p</code>.\nVerification of RSA signatures.\nAn RSA key pair, used for signing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an RSA private key from its big-endian-encoded …\nParses an RSA private key that is not inside a PKCS#8 …\nParses an unencrypted PKCS#8-encoded RSA private key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>PrivateCrtPrime</code> from the private prime <code>p</code> and …\nReturns base**d (mod n).\nReturns a reference to the public key.\nReturns the length in bytes of the key pair’s public …\nComputes the signature of <code>msg</code> and writes it into <code>signature</code>.\nRSA key pair components.\nThe private exponent.\n<code>p</code>’s public Chinese Remainder Theorem exponent.\n<code>q</code>’s public Chinese Remainder Theorem exponent.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe first prime factor of <code>d</code>.\nThe public key components.\nThe second prime factor of <code>d</code>.\n<code>q**-1 mod p</code>.\nCommon features of both RSA padding encoding and RSA …\nAn RSA signature encoding as described in RFC 3447 Section …\nVerification of an RSA signature encoding as described in …\nPKCS#1 1.5 padding as described in RFC 3447 Section 8.2.\nPKCS#1 1.5 padding using SHA-1 for RSA signatures.\nPKCS#1 1.5 padding using SHA-256 for RSA signatures.\nPKCS#1 1.5 padding using SHA-384 for RSA signatures.\nPKCS#1 1.5 padding using SHA-512 for RSA signatures.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRSA PSS padding as described in RFC 3447 Section 8.1.\nRSA PSS padding using SHA-256 for RSA signatures.\nRSA PSS padding using SHA-384 for RSA signatures.\nRSA PSS padding using SHA-512 for RSA signatures.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe exponent <code>e</code> of an RSA public key.\nThe big-endian encoding of the exponent.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>PublicKey</code> but without any superfluous allocations, …\nAn RSA Public Key.\nThe public exponent.\nCalculates base**e (mod n), filling the first part of …\nCalculates base**e (mod n).\nReturns the big-endian representation of <code>elem</code> that is the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length, in bytes, of the public modulus.\nThe public modulus.\nRSA public key components.\nThe public exponent, encoded in big-endian bytes without …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe public modulus, encoded in big-endian bytes without …\nVerifies that <code>signature</code> is a valid signature of <code>message</code> …\nThe modulus (n) of an RSA public key.\nThe big-endian encoding of the modulus.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe length of the modulus in bits.\nVerification of signatures using RSA keys of 1024-8192 …\nVerification of signatures using RSA keys of 1024-8192 …\nVerification of signatures using RSA keys of 1024-8192 …\nVerification of signatures using RSA keys of 2048-8192 …\nVerification of signatures using RSA keys of 2048-8192 …\nVerification of signatures using RSA keys of 2048-8192 …\nVerification of signatures using RSA keys of 2048-8192 …\nVerification of signatures using RSA keys of 3072-8192 …\nVerification of signatures using RSA keys of 2048-8192 …\nVerification of signatures using RSA keys of 2048-8192 …\nVerification of signatures using RSA keys of 2048-8192 …\nTraits that are designed to only be implemented internally …\nVerification of ASN.1 DER-encoded ECDSA signatures using …\nSigning of ASN.1 DER-encoded ECDSA signatures using the …\nVerification of fixed-length (PKCS#11 style) ECDSA …\nSigning of fixed-length (PKCS#11 style) ECDSA signatures …\n<em>Not recommended</em>. Verification of ASN.1 DER-encoded ECDSA …\n<em>Not recommended</em>. Verification of ASN.1 DER-encoded ECDSA …\nVerification of ASN.1 DER-encoded ECDSA signatures using …\nSigning of ASN.1 DER-encoded ECDSA signatures using the …\nVerification of fixed-length (PKCS#11 style) ECDSA …\nSigning of fixed-length (PKCS#11 style) ECDSA signatures …\nVerification of Ed25519 signatures.\nThe length of an Ed25519 public key.\nAn ECDSA key pair, used for signing.\nAn ECDSA signing algorithm.\nAn ECDSA verification algorithm.\nAn Ed25519 key pair, for signing.\nParameters for EdDSA signing and verification.\nKey pairs for signing messages (private key and public …\nThe longest signature is an ASN.1 P-384 signature where <em>r</em> …\nThe type of the public key.\nVerification of signatures using RSA keys of 1024-8192 …\nVerification of signatures using RSA keys of 1024-8192 …\nVerification of signatures using RSA keys of 1024-8192 …\nVerification of signatures using RSA keys of 2048-8192 …\nVerification of signatures using RSA keys of 2048-8192 …\nVerification of signatures using RSA keys of 2048-8192 …\nVerification of signatures using RSA keys of 2048-8192 …\nVerification of signatures using RSA keys of 3072-8192 …\nPKCS#1 1.5 padding using SHA-256 for RSA signatures.\nPKCS#1 1.5 padding using SHA-384 for RSA signatures.\nPKCS#1 1.5 padding using SHA-512 for RSA signatures.\nVerification of signatures using RSA keys of 2048-8192 …\nVerification of signatures using RSA keys of 2048-8192 …\nVerification of signatures using RSA keys of 2048-8192 …\nRSA PSS padding using SHA-256 for RSA signatures.\nRSA PSS padding using SHA-384 for RSA signatures.\nRSA PSS padding using SHA-512 for RSA signatures.\nAn RSA signature encoding as described in RFC 3447 Section …\nAn RSA key pair, used for signing.\nRSA public key components.\nA public key signature returned from a signing operation.\nAn unparsed, possibly malformed, public key for signature …\nA signature verification algorithm.\nThe public exponent, encoded in big-endian bytes without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe public modulus, encoded in big-endian bytes without …\nConstruct a new <code>UnparsedPublicKey</code>.\nThe public key for the key pair.\nVerify the signature <code>signature</code> of message <code>msg</code> with the …\nParses the public key and verifies <code>signature</code> is a valid …\nA test input file.\nA test case. A test case consists of a set of named …\n<code>compile_time_assert_clone::&lt;T&gt;();</code> fails to compile if <code>T</code> …\n<code>compile_time_assert_copy::&lt;T&gt;();</code> fails to compile if <code>T</code> …\n<code>compile_time_assert_eq::&lt;T&gt;();</code> fails to compile if <code>T</code> doesn…\n<code>compile_time_assert_send::&lt;T&gt;();</code> fails to compile if <code>T</code> …\n<code>compile_time_assert_sync::&lt;T&gt;();</code> fails to compile if <code>T</code> …\nMaps the string “true” to true and the string “false…\nReturns the value of an attribute that is encoded as a …\nMaps the strings “SHA1”, “SHA256”, “SHA384”, …\nLike <code>consume_bytes()</code> except it returns <code>None</code> if the test …\nLike <code>consume_string()</code> except it returns <code>None</code> if the test …\nReturns the raw value of an attribute, without any …\nReturns the value of an attribute that is an integer, in …\nReturns the value of an attribute that is an integer, in …\nThe contents of the file.\nThe name (path) of the file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode an string of hex digits into a sequence of bytes. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses test cases out of the given file, calling <code>f</code> on each …")