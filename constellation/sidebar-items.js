initSidebarItems({"enum":[["UnprivilegedContent",""]],"fn":[["content_process_sandbox_profile","Our content process sandbox profile on Linux. As restrictive as possible."]],"mod":[["browsingcontext",""],["constellation","The `Constellation`, Servo’s Grand Central Station"],["event_loop","This module contains the `EventLoop` type, which is the constellation’s view of a script thread. When an `EventLoop` is dropped, an `ExitScriptThread` message is sent to the script thread, asking it to shut down."],["network_listener","The listener that encapsulates all state for an in-progress document request. Any redirects that are encountered are followed. Whenever a non-redirect response is received, it is forwarded to the appropriate script thread."],["pipeline",""],["sandboxing",""],["serviceworker",""],["session_history",""],["timer_scheduler",""]],"struct":[["Constellation","The `Constellation` itself. In the servo browser, there is one constellation, which maintains all of the browser global data. In embedded applications, there may be more than one constellation, which are independent of each other."],["FromCompositorLogger","A logger directed at the constellation from the compositor"],["FromScriptLogger","The constellation uses logging to perform crash reporting. The constellation receives all `warn!`, `error!` and `panic!` messages, and generates a crash report when it receives a panic. A logger directed at the constellation from content processes"],["InitialConstellationState","State needed to construct a constellation."],["UnprivilegedPipelineContent","Creating a new pipeline may require creating a new event loop. This is the data used to initialize the event loop. TODO: simplify this, and unify it with `InitialPipelineState` if possible."]]});