initSidebarItems({"constant":[["EMPTY",""],["EMPTY_BUCKET",""]],"enum":[["BucketState",""]],"fn":[["calculate_allocation",""],["calculate_offsets",""],["make_hash","We need to remove hashes of 0. That’s reserved for empty buckets. This function wraps up `hash_keyed` to be the only way outside this module to generate a SafeHash."],["round_up_to_next","Rounds up to a multiple of a power of two. Returns the closest multiple of `target_alignment` that is higher or equal to `unrounded`."]],"struct":[["Bucket",""],["Drain","Iterator over the entries in a table, clearing the table."],["EmptyBucket",""],["FullBucket",""],["GapThenFull",""],["IntoIter","Iterator over the entries in a table, consuming the table."],["Iter","Iterator over shared references to entries in a table."],["IterMut","Iterator over mutable references to entries in a table."],["RawBucket",""],["RawBuckets","A raw iterator. The basis for some other iterators in this module. Although this interface is safe, it’s not used outside this module."],["RawTable","The raw hashtable, providing safe-ish access to the unzipped and highly optimized arrays of hashes, and key-value pairs."],["SafeHash","A hash that is not zero, since we use a hash of zero to represent empty buckets."],["TaggedHashUintPtr","Special `Unique<HashUint>` that uses the lower bit of the pointer to expose a boolean tag. Note: when the pointer is initialized to EMPTY `.ptr()` will return null and the tag functions shouldn’t be used."]],"trait":[["Put","`Put` is implemented for types which provide access to a table and cannot be invalidated by filling a bucket. A similar implementation for `Take` is possible."]],"type":[["FullBucketMut",""],["HashUint","Integer type used for stored hash values."]]});