initSidebarItems({"constant":[["_IMPL_DOMOBJECT_FOR_GlobalScope",""]],"enum":[["BlobResult","The result of looking-up the data for a Blob, containing either the in-memory bytes, or the file-id."],["BlobState","State representing whether this global is currently managing blobs."],["BlobTracker","A holder of a weak reference for a DOM blob or file."],["BroadcastChannelState","State representing whether this global is currently managing broadcast channels."],["FileListenerCallback",""],["FileListenerState",""],["FileListenerTarget",""],["MessagePortState","State representing whether this global is currently managing messageports."]],"fn":[["global_scope_from_global","Returns the Rust global scope from a JS global object."],["global_scope_from_global_static","Returns the Rust global scope from a JS global object."],["stream_handle_eof","Callback used to close streams as part of FileListener."],["stream_handle_incoming","Callback used to enqueue file chunks to streams as part of FileListener."],["timestamp_in_ms",""]],"struct":[["AutoCloseWorker",""],["BlobInfo","The info pertaining to a blob managed by this global."],["BroadcastListener","A wrapper for broadcasts coming in over IPC, and the event-loop."],["FileListener","A wrapper for the handling of file data received by the ipc router"],["GlobalScope",""],["ManagedMessagePort","Data representing a message-port managed by this global."],["MessageListener","A wrapper for glue-code between the ipc router and the event-loop."],["TimerListener","A wrapper between timer events coming in over IPC, and the event-loop."]]});