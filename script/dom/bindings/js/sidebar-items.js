initSidebarItems({"struct":[["JS","A traced reference to a DOM object. Must only be used as a field in other DOM objects."],["JSRef","A reference to a DOM object that is guaranteed to be alive. This is freely copyable."],["LayoutJS","An unrooted reference to a DOM object for use in layout. `Layout*Helpers` traits must be implemented on this."],["MutHeap","A holder that provides interior mutability for GC-managed values such as `JSVal` and `JS<T>`."],["MutNullableJS","A mutable `JS<T>` value, with nullability represented by an enclosing Option wrapper. Must be used in place of traditional internal mutability to ensure that the proper GC barriers are enforced."],["Root","A rooted reference to a DOM object."],["RootCollection","An opaque, LIFO rooting mechanism. This tracks roots and ensures that they are destructed in a LIFO order."],["RootCollectionPtr","A pointer to a RootCollection, for use in global variables."],["Temporary","A type that represents a JS-owned value that is rooted for the lifetime of this value. Importantly, it requires explicit rooting in order to interact with the inner value. Can be assigned into JS-owned member fields (i.e. `JS<T>` types) safely via the `JS<T>::assign` method or `OptionalSettable::assign` (for `Option<JS<T>>` fields)."],["Unrooted","An unrooted, JS-owned value. Must not be held across a GC."]],"trait":[["Assignable","Trait that allows extracting a `JS<T>` value from a variety of rooting-related containers, which in general is an unsafe operation since they can outlive the rooted lifetime of the original value."],["Comparable","A trait for comparing smart pointers ignoring the lifetimes"],["HeapGCValue","A trait to be implemented for JS-managed types that can be stored in mutable member fields."],["OptionalOptionalRootedRootable","Root a rootable `Option<Option>` type (used for `Option<Option<JS<T>>>`)"],["OptionalRootable","Root a rootable `Option` type (used for `Option<Temporary<T>>`)"],["OptionalRootedReference","Get an `Option<Option<JSRef<T>>>` out of an `Option<Option<Root<T>>>`"],["OptionalRootedRootable","Root a rootable `Option` type (used for `Option<JS<T>>`)"],["OptionalUnrootable","Return an unrooted type for storing in optional DOM fields"],["ResultRootable","Root a rootable `Result` type (any of `Temporary<T>` or `JS<T>`)"],["RootedReference","Get an `Option<JSRef<T>>` out of an `Option<Root<T>>`"],["TemporaryPushable","Provides a facility to push unrooted values onto lists of rooted values. This is safe under the assumption that said lists are reachable via the GC graph, and therefore the new values are transitively rooted for the lifetime of their new owner."]]});