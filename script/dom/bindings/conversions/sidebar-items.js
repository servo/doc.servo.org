initSidebarItems({"constant":[["DOM_OBJECT_SLOT","The index of the slot wherein a pointer to the reflected DOM object is stored for non-proxy bindings."]],"enum":[["ConversionBehavior","Behavior for converting out-of-range integers."],["ConversionResult","An enum to better support enums through FromJSValConvertible::from_jsval."],["PrototypeCheck",""],["StringificationBehavior","Behavior for stringification of `JSVal`s."]],"fn":[["get_dom_class","Get the `DOMClass` from `obj`, or `Err(())` if `obj` is not a DOM object."],["get_property","Get a property from a JS object, and convert it to a Rust value."],["get_property_jsval","Get a property from a JS object."],["is_array_like","Returns whether `value` is an array-like object (Array, FileList, HTMLCollection, HTMLFormControlsCollection, HTMLOptionsCollection, NodeList)."],["is_dom_proxy","Returns whether `obj` is a DOM object implemented as a proxy."],["jsid_to_string","Convert `id` to a `DOMString`. Returns `None` if `id` is not a string or integer."],["jsstring_to_str","Convert the given `JSString` to a `DOMString`. Fails if the string does not contain valid UTF-16."],["native_from_handlevalue","Get a `*const T` for a DOM object accessible from a `HandleValue`. Caller is responsible for throwing a JS exception if needed in case of error."],["native_from_object","Get a `*const T` for a DOM object accessible from a `JSObject`."],["native_from_object_static","Get a `*const T` for a DOM object accessible from a `JSObject`, where the DOM object is guaranteed not to be a wrapper."],["private_from_object","Get the private pointer of a DOM object from a given reflector."],["private_from_proto_check","Get a `*const libc::c_void` for the given DOM object, unwrapping any wrapper around it first, and checking if the object is of the correct type."],["private_from_proto_check_static","Get a `*const libc::c_void` for the given DOM object, unless it is a DOM wrapper, and checking if the object is of the correct type."],["root_from_handleobject","Get a `DomRoot<T>` for a DOM object accessible from a `HandleObject`."],["root_from_handlevalue","Get a `DomRoot<T>` for a DOM object accessible from a `HandleValue`. Caller is responsible for throwing a JS exception if needed in case of error."],["root_from_object","Get a `DomRoot<T>` for the given DOM object, unwrapping any wrapper around it first, and checking if the object is of the correct type."],["root_from_object_static","Get a `DomRoot<T>` for the given DOM object, unwrapping any wrapper around it first, and checking if the object is of the correct type."],["windowproxy_from_handlevalue","Get a `DomRoot<T>` for a WindowProxy accessible from a `HandleValue`. Caller is responsible for throwing a JS exception if needed in case of error."]],"trait":[["DerivedFrom","A trait to mark an IDL interface as deriving from another one."],["FromJSValConvertible","A trait to convert `JSVal`s to Rust types."],["IDLInterface","A trait to check whether a given `JSObject` implements an IDL interface."],["ToJSValConvertible","A trait to convert Rust types to `JSVal`s."]]});