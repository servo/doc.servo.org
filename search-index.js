var searchIndex = {};
searchIndex['servo'] = {"items":[[0,"","servo",""],[3,"Browser","",""],[11,"new","","",0],[11,"handle_event","","",0],[11,"repaint_synchronously","","",0],[11,"pinch_zoom_level","","",0],[11,"get_title_for_main_frame","","",0],[11,"shutdown","","",0]],"paths":[[3,"Browser"]]};
searchIndex['layout'] = {"items":[[0,"","layout",""],[0,"layout_debug","","Supports writing a trace file created during each layout scope\nthat can be viewed by an external tool to make layout debugging easier."],[3,"Scope","layout::layout_debug",""],[5,"generate_unique_debug_id","","Generate a unique ID. This is used for items such as Fragment\nwhich are often reallocated but represent essentially the\nsame data."],[5,"begin_trace","","Begin a layout debug trace. If this has not been called,\ncreating debug scopes has no effect."],[5,"end_trace","","End the debug layout trace. This will write the layout\ntrace to disk in the current directory. The output\nfile can then be viewed with an external tool."],[11,"new","","",0],[11,"drop","","",0],[0,"animation","layout","CSS transitions and animations."],[5,"start_transitions_if_applicable","layout::animation","Inserts transitions into the queue of running animations as applicable for the given style\ndifference. This is called from the layout worker threads."],[5,"process_new_animations","","Processes any new animations that were discovered after style recalculation."],[5,"recalc_style_for_animation","","Recalculates style for an animation. This does *not* run with the DOM lock held."],[5,"tick_all_animations","","Handles animation updates."],[0,"block","layout","Layout for CSS block-level elements."],[3,"FloatedBlockInfo","layout::block","Information specific to floated blocks."],[12,"containing_inline_size","","The amount of inline size that is available for the float.",1],[12,"float_ceiling","","The float ceiling, relative to `BaseFlow::position::cur_b` (i.e. the top part of the border\nbox).",1],[12,"float_kind","","Left or right?",1],[3,"CandidateBSizeIterator","","Performs block-size calculations potentially multiple times, taking\n(assuming an horizontal writing mode) `height`, `min-height`, and `max-height`\ninto account. After each call to `next()`, the caller must call `.try()` with the\ncurrent calculated value of `height`."],[12,"candidate_value","","",2],[3,"BlockFlow","",""],[12,"base","","Data common to all flows.",3],[12,"fragment","","The associated fragment.",3],[12,"static_b_offset","","Static y offset of an absolute flow from its CB.",3],[12,"float","","Additional floating flow members.",3],[12,"flags","","Various flags.",3],[3,"BlockFlowFlags","",""],[3,"ISizeConstraintInput","","The inputs for the inline-sizes-and-margins constraint equation."],[12,"computed_inline_size","","",4],[12,"inline_start_margin","","",4],[12,"inline_end_margin","","",4],[12,"inline_start","","",4],[12,"inline_end","","",4],[12,"available_inline_size","","",4],[12,"static_i_offset","","",4],[3,"ISizeConstraintSolution","","The solutions for the inline-size-and-margins constraint equation."],[12,"inline_start","","",5],[12,"inline_end","","",5],[12,"inline_size","","",5],[12,"margin_inline_start","","",5],[12,"margin_inline_end","","",5],[3,"AbsoluteNonReplaced","","The different types of Blocks."],[3,"AbsoluteReplaced","",""],[3,"BlockNonReplaced","",""],[3,"BlockReplaced","",""],[3,"FloatNonReplaced","",""],[3,"FloatReplaced","",""],[4,"BlockType","",""],[13,"Replaced","","",6],[13,"NonReplaced","","",6],[13,"AbsoluteReplaced","","",6],[13,"AbsoluteNonReplaced","","",6],[13,"FloatReplaced","","",6],[13,"FloatNonReplaced","","",6],[4,"MarginsMayCollapseFlag","",""],[13,"MarginsMayCollapse","","",7],[13,"MarginsMayNotCollapse","","",7],[5,"propagate_layer_flag_from_child","",""],[17,"IS_ROOT","","If this is set, then this block flow is the root flow."],[8,"ISizeAndMarginsComputer","",""],[11,"compute_inline_size_constraint_inputs","","Compute the inputs for the ISize constraint equation.",8],[11,"set_inline_size_constraint_solutions","","Set the used values for inline-size and margins from the relevant constraint equation.\nThis is called only once.",8],[11,"set_flow_x_coord_if_necessary","","Set the x coordinate of the given flow if it is absolutely positioned.",8],[10,"solve_inline_size_constraints","","Solve the inline-size and margins constraints for this block flow.",8],[11,"initial_computed_inline_size","","",8],[11,"containing_block_inline_size","","",8],[11,"compute_used_inline_size","","Compute the used value of inline-size, taking care of min-inline-size and max-inline-size.",8],[11,"solve_block_inline_size_constraints","","Computes inline-start and inline-end margins and inline-size.",8],[11,"encode","","",1],[11,"clone","","",1],[11,"new","","",1],[11,"new","","Creates a new candidate block-size iterator. `block_container_block-size` is `None` if the block-size\nof the block container has not been determined yet. It will always be `Some` in the case of\nabsolutely-positioned containing blocks.",2],[6,"Item","",""],[11,"next","","",2],[11,"eq","","",7],[11,"ne","","",7],[11,"clone","","",7],[11,"encode","","",3],[11,"hash","","",9],[11,"cmp","","",9],[11,"partial_cmp","","",9],[11,"lt","","",9],[11,"le","","",9],[11,"gt","","",9],[11,"ge","","",9],[11,"clone","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"empty","","Returns an empty set of flags.",9],[11,"all","","Returns the set containing all flags.",9],[11,"bits","","Returns the raw value of the flags currently stored.",9],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",9],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",9],[11,"is_empty","","Returns `true` if no flags are currently stored.",9],[11,"is_all","","Returns `true` if all flags are currently set.",9],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9],[11,"insert","","Inserts the specified flags in-place.",9],[11,"remove","","Removes the specified flags in-place.",9],[11,"toggle","","Toggles the specified flags in-place.",9],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",9],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",9],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",9],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",9],[11,"encode","","",9],[11,"from_node_and_fragment","","",3],[11,"float_from_node_and_fragment","","",3],[11,"block_type","","Return the type of this block.",3],[11,"compute_used_inline_size","","Compute the actual inline size and position for this block.",3],[11,"fragment","","Return this flow's fragment.",3],[11,"static_i_offset","","Return the static x offset from the appropriate Containing Block for this flow.",3],[11,"containing_block_size","","Return the size of the Containing Block for this flow.",3],[11,"get_shrink_to_fit_inline_size","","Return shrink-to-fit inline-size.",3],[11,"assign_block_size_block_base","","Assign block-size for current flow.",3],[11,"place_float","","Add placement information about current float flow for use by the parent.",3],[11,"propagate_and_compute_used_inline_size","","Compute inline size based using the `block_container_inline_size` set by the parent flow.",3],[11,"get_hypothetical_block_start_edge","","Return the block-start outer edge of the hypothetical box for an absolute flow.",3],[11,"propagate_assigned_inline_size_to_children","","Assigns the computed inline-start content edge and inline-size to all the children of this\nblock flow. Also computes whether each child will be impacted by floats.",3],[11,"class","","",3],[11,"as_block","","",3],[11,"as_immutable_block","","",3],[11,"bubble_inline_sizes","","Pass 1 of reflow: computes minimum and preferred inline-sizes.",3],[11,"assign_inline_sizes","","Recursively (top-down) determines the actual inline-size of child contexts and fragments.\nWhen called on this context, the context has had its inline-size set by the parent context.",3],[11,"place_float_if_applicable","","",3],[11,"assign_block_size_for_inorder_child_if_necessary","","",3],[11,"assign_block_size","","",3],[11,"compute_absolute_position","","",3],[11,"mark_as_root","","",3],[11,"is_root","","",3],[11,"positioning","","The 'position' property of this flow.",3],[11,"is_root_of_absolute_flow_tree","","Return true if this is the root of an Absolute flow tree.",3],[11,"generated_containing_block_rect","","Return the dimensions of the containing block generated by this flow for absolutely-\npositioned descendants. For block flows, this is the padding box.",3],[11,"layer_id","","",3],[11,"is_absolute_containing_block","","",3],[11,"update_late_computed_inline_position_if_necessary","","",3],[11,"update_late_computed_block_position_if_necessary","","",3],[11,"build_display_list","","",3],[11,"repair_style","","",3],[11,"compute_overflow","","",3],[11,"iterate_through_fragment_border_boxes","","",3],[11,"mutate_fragments","","",3],[11,"fmt","","",3],[11,"fmt","","",4],[11,"new","","",4],[11,"fmt","","",5],[11,"new","","",5],[11,"solve_inline_size_constraints","","Solve the horizontal constraint equation for absolute non-replaced elements.",10],[11,"containing_block_inline_size","","",10],[11,"set_flow_x_coord_if_necessary","","",10],[11,"solve_inline_size_constraints","","Solve the horizontal constraint equation for absolute replaced elements.",11],[11,"initial_computed_inline_size","","Calculate used value of inline-size just like we do for inline replaced elements.",11],[11,"containing_block_inline_size","","",11],[11,"set_flow_x_coord_if_necessary","","",11],[11,"solve_inline_size_constraints","","Compute inline-start and inline-end margins and inline-size.",12],[11,"solve_inline_size_constraints","","Compute inline-start and inline-end margins and inline-size.",13],[11,"initial_computed_inline_size","","Calculate used value of inline-size just like we do for inline replaced elements.",13],[11,"solve_inline_size_constraints","","CSS Section 10.3.5",14],[11,"solve_inline_size_constraints","","CSS Section 10.3.5",15],[11,"initial_computed_inline_size","","Calculate used value of inline-size just like we do for inline replaced elements.",15],[0,"construct","layout","Creates flows and fragments from a DOM tree via a bottom-up, incremental traversal of the DOM."],[3,"InlineFragmentsConstructionResult","layout::construct","Represents inline fragments and {ib} splits that are bubbling up from an inline."],[12,"splits","","Any {ib} splits that we're bubbling up.",16],[12,"fragments","","Any fragments that succeed the {ib} splits.",16],[12,"abs_descendants","","Any absolute descendants that we're bubbling up.",16],[3,"InlineBlockSplit","","Represents an {ib} split that has not yet found the containing block that it belongs to. This\nis somewhat tricky. An example may be helpful. For this DOM fragment:"],[12,"predecessors","","The inline fragments that precede the flow.",17],[12,"flow","","The flow that caused this {ib} split.",17],[3,"FlowConstructor","","An object that knows how to create flows."],[12,"layout_context","","The layout context.",18],[4,"ConstructionResult","","The results of flow construction for a DOM node."],[13,"None","","This node contributes nothing at all (`display: none`). Alternately, this is what newly\ncreated nodes have their `ConstructionResult` set to.",19],[13,"Flow","","This node contributed a flow at the proper position in the tree.\nNothing more needs to be done for this node. It has bubbled up fixed\nand absolute descendant flows that have a containing block above it.",19],[13,"ConstructionItem","","This node contributed some object or objects that will be needed to construct a proper flow\nlater up the tree, but these objects have not yet found their home.",19],[4,"ConstructionItem","","Represents the output of flow construction for a DOM node that has not yet resulted in a\ncomplete flow. Construction items bubble up the tree until they find a `Flow` to be attached\nto."],[13,"InlineFragments","","Inline fragments and associated {ib} splits that have not yet found flows.",20],[13,"Whitespace","","Potentially ignorable whitespace.",20],[13,"TableColumnFragment","","TableColumn Fragment",20],[5,"strip_ignorable_whitespace_from_start","","Strips ignorable whitespace from the start of a list of fragments."],[5,"strip_ignorable_whitespace_from_end","","Strips ignorable whitespace from the end of a list of fragments."],[8,"FlowConstructionUtils","",""],[10,"add_new_child","","Adds a new flow as a child of this flow. Removes the flow from the given leaf set if\nit's present.",21],[10,"finish","","Finishes a flow. Once a flow is finished, no more child flows or boxes may be added to it.\nThis will normally run the bubble-inline-sizes (minimum and preferred -- i.e. intrinsic --\ninline-size) calculation, unless the global `bubble_inline-sizes_separately` flag is on.",21],[11,"clone","","",19],[11,"swap_out","","",19],[11,"debug_id","","",19],[11,"clone","","",20],[11,"clone","","",16],[11,"clone","","",17],[11,"new","","Creates a new flow constructor.",18],[11,"repair_if_possible","","Attempts to perform incremental repair to account for recent changes to this node. This\ncan fail and return false, indicating that flows will need to be reconstructed.",18],[11,"process","","",18],[0,"context","layout","Data needed by the layout task."],[3,"SharedLayoutContext","layout::context","Layout information shared among all workers. This must be thread-safe."],[12,"image_cache","","The local image cache.",22],[12,"screen_size","","The current screen size.",22],[12,"screen_size_changed","","Screen sized changed?",22],[12,"constellation_chan","","A channel up to the constellation.",22],[12,"layout_chan","","A channel up to the layout task.",22],[12,"font_cache_task","","Interface to the font cache task.",22],[12,"stylist","","The CSS selector stylist.",22],[12,"reflow_root","","The root node at which we're starting the layout.",22],[12,"url","","The URL.",22],[12,"dirty","","The dirty rectangle, used during display list building.",22],[12,"generation","","Starts at zero, and increased by one every time a layout completes.\nThis can be used to easily check for invalid stale data.",22],[12,"new_animations_sender","","A channel on which new animations that have been triggered by style recalculation can be\nsent.",22],[3,"SharedLayoutContextWrapper","",""],[3,"LayoutContext","",""],[12,"shared","","",23],[11,"new","","",23],[11,"font_context","","",23],[11,"applicable_declarations_cache","","",23],[11,"style_sharing_candidate_cache","","",23],[0,"data","layout",""],[3,"PrivateLayoutData","layout::data","Data that layout associates with a node."],[12,"before_style","","The results of CSS styling for this node's `before` pseudo-element, if any.",24],[12,"after_style","","The results of CSS styling for this node's `after` pseudo-element, if any.",24],[12,"restyle_damage","","Description of how to account for recent style changes.",24],[12,"flow_construction_result","","The current results of flow construction for this node. This is either a flow or a\n`ConstructionItem`. See comments in `construct.rs` for more details.",24],[12,"before_flow_construction_result","","",24],[12,"after_flow_construction_result","","",24],[12,"parallel","","Information needed during parallel traversals.",24],[12,"flags","","Various flags.",24],[3,"LayoutDataFlags","",""],[3,"LayoutDataWrapper","",""],[12,"chan","","",25],[12,"shared_data","","",25],[12,"data","","",25],[17,"HAS_NEWLY_CONSTRUCTED_FLOW","","Whether a flow has been newly constructed."],[8,"LayoutDataAccess","","A trait that allows access to the layout data of a DOM node."],[10,"borrow_layout_data_unchecked","","Borrows the layout data without checks.",26],[10,"borrow_layout_data","","Borrows the layout data immutably. Fails on a conflicting borrow.",26],[10,"mutate_layout_data","","Borrows the layout data mutably. Fails on a conflicting borrow.",26],[11,"new","","Creates new layout data.",24],[11,"hash","","",27],[11,"cmp","","",27],[11,"partial_cmp","","",27],[11,"lt","","",27],[11,"le","","",27],[11,"gt","","",27],[11,"ge","","",27],[11,"clone","","",27],[11,"eq","","",27],[11,"ne","","",27],[11,"empty","","Returns an empty set of flags.",27],[11,"all","","Returns the set containing all flags.",27],[11,"bits","","Returns the raw value of the flags currently stored.",27],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",27],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",27],[11,"is_empty","","Returns `true` if no flags are currently stored.",27],[11,"is_all","","Returns `true` if all flags are currently set.",27],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27],[11,"insert","","Inserts the specified flags in-place.",27],[11,"remove","","Removes the specified flags in-place.",27],[11,"toggle","","Toggles the specified flags in-place.",27],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",27],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",27],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",27],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",27],[11,"remove_compositor_layers","","",25],[0,"display_list_builder","layout","Builds display lists from flows and fragments."],[4,"DisplayListBuildingResult","layout::display_list_builder","The results of display list building for a single flow."],[13,"None","","",28],[13,"StackingContext","","",28],[13,"Normal","","",28],[4,"StackingLevel","","\"Steps\" as defined by CSS 2.1 § E.2."],[13,"BackgroundAndBorders","","The border and backgrounds for the root of this stacking context: steps 1 and 2.",29],[13,"BlockBackgroundsAndBorders","","Borders and backgrounds for block-level descendants: step 4.",29],[13,"Content","","All other content.",29],[4,"BackgroundAndBorderLevel","","Which level to place backgrounds and borders in."],[13,"RootOfStackingContext","","",30],[13,"Block","","",30],[13,"Content","","",30],[8,"FragmentDisplayListBuilding","",""],[10,"build_display_list_for_background_if_applicable","","Adds the display items necessary to paint the background of this fragment to the display\nlist if necessary.",31],[10,"compute_background_image_size","","Computes the background size for an image with the given background area according to the\nrules in CSS-BACKGROUNDS § 3.9.",31],[10,"build_display_list_for_background_image","","Adds the display items necessary to paint the background image of this fragment to the\ndisplay list at the appropriate stacking level.",31],[10,"build_display_list_for_background_linear_gradient","","Adds the display items necessary to paint the background linear gradient of this fragment\nto the display list at the appropriate stacking level.",31],[10,"build_display_list_for_borders_if_applicable","","Adds the display items necessary to paint the borders of this fragment to a display list if\nnecessary.",31],[10,"build_display_list_for_outline_if_applicable","","Adds the display items necessary to paint the outline of this fragment to the display list\nif necessary.",31],[10,"build_display_list_for_box_shadow_if_applicable","","Adds the display items necessary to paint the box shadow of this fragment to the display\nlist if necessary.",31],[10,"build_debug_borders_around_text_fragments","","Adds display items necessary to draw debug boxes around a scanned text fragment.",31],[10,"build_debug_borders_around_fragment","","Adds display items necessary to draw debug boxes around this fragment.",31],[10,"build_display_list","","Adds the display items for this fragment to the given display list.",31],[10,"finalize_position_and_size_of_iframe","","Sends the size and position of this iframe fragment to the constellation. This is out of\nline to guide inlining.",31],[10,"clipping_region_for_children","","Returns the appropriate clipping region for descendants of this flow.",31],[10,"calculate_style_specified_clip","","Calculates the clipping rectangle for a fragment, taking the `clip` property into account\nper CSS 2.1 § 11.1.2.",31],[10,"build_display_list_for_text_fragment","","Creates the text display item for one text fragment. This can be called multiple times for\none fragment if there are text shadows.",31],[10,"build_display_list_for_text_decoration","","Creates the display item for a text decoration: underline, overline, or line-through.",31],[10,"build_fragment_type_specific_display_items","","A helper method that `build_display_list` calls to create per-fragment-type display items.",31],[8,"BlockFlowDisplayListBuilding","",""],[10,"build_display_list_for_block_base","","",32],[10,"build_display_list_for_static_block","","",32],[10,"build_display_list_for_absolutely_positioned_block","","",32],[10,"build_display_list_for_floating_block","","",32],[10,"build_display_list_for_block","","",32],[10,"create_stacking_context","","",32],[8,"InlineFlowDisplayListBuilding","",""],[10,"build_display_list_for_inline","","",33],[8,"ListItemFlowDisplayListBuilding","",""],[10,"build_display_list_for_list_item","","",34],[8,"ToGfxColor","","Allows a CSS color to be converted into a graphics color."],[10,"to_gfx_color","","Converts a CSS color to a graphics color.",35],[11,"add_to","","Adds the display list items contained within this display list building result to the given\ndisplay list, preserving stacking order. If this display list building result does not\nconsist of an entire stacking context, it will be emptied.",28],[11,"build_display_list_for_block_base","layout::block","",3],[11,"build_display_list_for_static_block","","",3],[11,"build_display_list_for_absolutely_positioned_block","","",3],[11,"build_display_list_for_floating_block","","",3],[11,"build_display_list_for_block","","",3],[11,"create_stacking_context","","",3],[11,"fmt","layout::display_list_builder","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"from_background_and_border_level","","",29],[11,"to_gfx_color","cssparser::color","",36],[0,"floats","layout",""],[3,"PlacementInfo","layout::floats","All the information necessary to place a float."],[12,"size","","The dimensions of the float.",37],[12,"ceiling","","The minimum block-start of the float, as determined by earlier elements.",37],[12,"max_inline_size","","The maximum inline-end position of the float, generally determined by the containing block.",37],[12,"kind","","The kind of float.",37],[3,"Floats","","Encapsulates information about floats. This is optimized to avoid allocation if there are\nno floats, and to avoid copying when translating the list of floats downward."],[12,"writing_mode","","The writing mode of these floats.",38],[4,"FloatKind","","The kind of float: left or right."],[13,"Left","","",39],[13,"Right","","",39],[4,"ClearType","","The kind of clearance: left, right, or both."],[13,"Left","","",40],[13,"Right","","",40],[13,"Both","","",40],[11,"fmt","","",39],[11,"encode","","",39],[11,"clone","","",39],[11,"from_property","","",39],[11,"fmt","","",37],[11,"clone","","",38],[11,"fmt","","",38],[11,"new","","Creates a new `Floats` object.",38],[11,"translate","","Adjusts the recorded offset of the flow relative to the first float.",38],[11,"last_float_pos","","Returns the position of the last float in flow coordinates.",38],[11,"len","","",38],[11,"available_rect","","Returns a rectangle that encloses the region from block-start to block-start + block-size,\nwith inline-size small enough that it doesn't collide with any floats. max_x is the\ninline-size beyond which floats have no effect. (Generally this is the containing block\ninline-size.)",38],[11,"add_float","","Adds a new float to the list.",38],[11,"place_between_floats","","Given placement information, finds the closest place a fragment can be positioned without\ncolliding with any floats.",38],[11,"clearance","","",38],[0,"flow","layout","Servo's experimental layout system builds a tree of `Flow` and `Fragment` objects and solves\nlayout constraints to obtain positions and display attributes of tree nodes. Positions are\ncomputed in several tree traversals driven by the fundamental data dependencies required by"],[3,"FlowFlags","layout::flow","Flags used in flows."],[3,"Descendants","","The Descendants of a flow."],[12,"static_block_offsets","","Static block-direction offsets of all descendants from the start of this flow box.",41],[3,"DescendantIter","",""],[3,"AbsolutePositionInfo","","Information needed to compute absolute (i.e. viewport-relative) flow positions (not to be\nconfused with absolutely-positioned flows)."],[12,"relative_containing_block_size","","The size of the containing block for relatively-positioned descendants.",42],[12,"relative_containing_block_mode","","The writing mode for `relative_containing_block_size`.",42],[12,"stacking_relative_position_of_absolute_containing_block","","The position of the absolute containing block relative to the nearest ancestor stacking\ncontext. If the absolute containing block establishes the stacking context for this flow,\nand this flow is not itself absolutely-positioned, then this is (0, 0).",42],[12,"layers_needed_for_positioned_flows","","Whether the absolute containing block forces positioned descendants to be layerized.",42],[3,"BaseFlow","","Data common to all flows."],[12,"restyle_damage","","",43],[12,"children","","The children of this flow.",43],[12,"intrinsic_inline_sizes","","Intrinsic inline sizes for this flow.",43],[12,"position","","The upper left corner of the box representing this flow, relative to the box representing\nits parent flow.",43],[12,"overflow","","The amount of overflow of this flow, relative to the containing block. Must include all the\npixels of all the display list items for correct invalidation.",43],[12,"parallel","","Data used during parallel traversals.",43],[12,"floats","","The floats next to this flow.",43],[12,"collapsible_margins","","The collapsible margins for this flow, if any.",43],[12,"stacking_relative_position","","The position of this flow relative to the start of the nearest ancestor stacking context.\nThis is computed during the top-down pass of display list construction.",43],[12,"abs_descendants","","Details about descendants with position 'absolute' or 'fixed' for which we are the\ncontaining block. This is in tree order. This includes any direct children.",43],[12,"block_container_inline_size","","The inline-size of the block container of this flow. Used for computing percentage and\nautomatic values for `width`.",43],[12,"block_container_writing_mode","","The writing mode of the block container of this flow.",43],[12,"block_container_explicit_block_size","","The block-size of the block container of this flow, if it is an explicit size (does not\ndepend on content heights).  Used for computing percentage values for `height`.",43],[12,"absolute_static_i_offset","","Offset wrt the nearest positioned ancestor - aka the Containing Block\nfor any absolutely positioned elements.",43],[12,"fixed_static_i_offset","","Offset wrt the Initial Containing Block.",43],[12,"absolute_cb","","Reference to the Containing Block, if this flow is absolutely positioned.",43],[12,"absolute_position_info","","Information needed to compute absolute (i.e. viewport-relative) flow positions (not to be\nconfused with absolutely-positioned flows).",43],[12,"clip","","The clipping region for this flow and its descendants, in layer coordinates.",43],[12,"display_list_building_result","","The results of display list building for this flow.",43],[12,"writing_mode","","The writing mode for this flow.",43],[12,"thread_id","","For debugging and profiling, the identifier of the thread that laid out this fragment.",43],[12,"flags","","Various flags for flows, tightly packed to save space.",43],[3,"ContainingBlockLink","","A link to a flow's containing block."],[4,"FlowClass","",""],[13,"Block","","",44],[13,"Inline","","",44],[13,"ListItem","","",44],[13,"TableWrapper","","",44],[13,"Table","","",44],[13,"TableColGroup","","",44],[13,"TableRowGroup","","",44],[13,"TableRow","","",44],[13,"TableCaption","","",44],[13,"TableCell","","",44],[4,"ForceNonfloatedFlag","","Whether a base flow should be forced to be nonfloated. This can affect e.g. `TableFlow`, which\nis never floated because the table wrapper flow is the floated one."],[13,"FloatIfNecessary","","The flow should be floated if the node has a `float` property.",45],[13,"ForceNonfloated","","The flow should be forced to be nonfloated.",45],[5,"base","",""],[5,"imm_child_iter","","Iterates over the children of this immutable flow."],[5,"mut_base","",""],[5,"child_iter","","Iterates over the children of this flow."],[6,"AbsDescendants","",""],[6,"DescendantOffsetIter","",""],[17,"HAS_LEFT_FLOATED_DESCENDANTS","","Whether this flow has descendants that float left in the same block formatting\ncontext."],[17,"HAS_RIGHT_FLOATED_DESCENDANTS","","Whether this flow has descendants that float right in the same block formatting\ncontext."],[17,"IMPACTED_BY_LEFT_FLOATS","","Whether this flow is impacted by floats to the left in the same block formatting\ncontext (i.e. its height depends on some prior flows with `float: left`)."],[17,"IMPACTED_BY_RIGHT_FLOATS","","Whether this flow is impacted by floats to the right in the same block\nformatting context (i.e. its height depends on some prior flows with `float:\nright`)."],[17,"LAYERS_NEEDED_FOR_DESCENDANTS","","Whether this flow contains a flow that has its own layer within the same absolute\ncontaining block."],[17,"NEEDS_LAYER","","Whether this flow must have its own layer. Even if this flag is not set, it might\nget its own layer if it's deemed to be likely to overlap flows with their own\nlayer."],[17,"IS_ABSOLUTELY_POSITIONED","","Whether this flow is absolutely positioned. This is checked all over layout, so a\nvirtual call is too expensive."],[17,"CLEARS_LEFT","","Whether this flow clears to the left. This is checked all over layout, so a\nvirtual call is too expensive."],[17,"CLEARS_RIGHT","","Whether this flow clears to the right. This is checked all over layout, so a\nvirtual call is too expensive."],[17,"FLOATS_LEFT","","Whether this flow is left-floated. This is checked all over layout, so a\nvirtual call is too expensive."],[17,"FLOATS_RIGHT","","Whether this flow is right-floated. This is checked all over layout, so a\nvirtual call is too expensive."],[17,"TEXT_ALIGN","","Text alignment. NB: If you update this, update `TEXT_ALIGN_SHIFT` below."],[17,"AFFECTS_COUNTERS","","Whether this flow has a fragment with `counter-reset` or `counter-increment` styles."],[17,"HAS_COUNTER_AFFECTING_CHILDREN","","Whether this flow's descendants have fragments that affect `counter-reset` or `counter-increment` styles."],[8,"Flow","","Virtual methods that make up a float context."],[10,"class","","Returns the class of flow that this is.",46],[11,"as_immutable_block","","If this is a block flow, returns the underlying object, borrowed immutably. Fails\notherwise.",46],[11,"as_block","","If this is a block flow, returns the underlying object. Fails otherwise.",46],[11,"as_immutable_inline","","If this is an inline flow, returns the underlying object, borrowed immutably. Fails\notherwise.",46],[11,"as_inline","","If this is an inline flow, returns the underlying object. Fails otherwise.",46],[11,"as_table_wrapper","","If this is a table wrapper flow, returns the underlying object. Fails otherwise.",46],[11,"as_immutable_table_wrapper","","If this is a table wrapper flow, returns the underlying object, borrowed immutably. Fails\notherwise.",46],[11,"as_table","","If this is a table flow, returns the underlying object. Fails otherwise.",46],[11,"as_immutable_table","","If this is a table flow, returns the underlying object, borrowed immutably. Fails otherwise.",46],[11,"as_table_colgroup","","If this is a table colgroup flow, returns the underlying object. Fails otherwise.",46],[11,"as_table_rowgroup","","If this is a table rowgroup flow, returns the underlying object. Fails otherwise.",46],[11,"as_immutable_table_rowgroup","","If this is a table rowgroup flow, returns the underlying object, borrowed immutably. Fails\notherwise.",46],[11,"as_table_row","","If this is a table row flow, returns the underlying object. Fails otherwise.",46],[11,"as_immutable_table_row","","If this is a table row flow, returns the underlying object, borrowed immutably. Fails\notherwise.",46],[11,"as_table_caption","","If this is a table cell flow, returns the underlying object. Fails otherwise.",46],[11,"as_table_cell","","If this is a table cell flow, returns the underlying object. Fails otherwise.",46],[11,"as_immutable_table_cell","","If this is a table cell flow, returns the underlying object, borrowed immutably. Fails\notherwise.",46],[11,"column_intrinsic_inline_sizes","","If this is a table row, table rowgroup, or table flow, returns column intrinsic\ninline-sizes. Fails otherwise.",46],[11,"column_computed_inline_sizes","","If this is a table row, table rowgroup, or table flow, returns column computed\ninline-sizes. Fails otherwise.",46],[11,"bubble_inline_sizes","","Pass 1 of reflow: computes minimum and preferred inline-sizes.",46],[11,"assign_inline_sizes","","Pass 2 of reflow: computes inline-size.",46],[11,"assign_block_size","","Pass 3a of reflow: computes block-size.",46],[11,"place_float_if_applicable","","If this is a float, places it. The default implementation does nothing.",46],[11,"assign_block_size_for_inorder_child_if_necessary","","Assigns block-sizes in-order; or, if this is a float, places the float. The default\nimplementation simply assigns block-sizes if this flow is impacted by floats. Returns true\nif this child was impacted by floats or false otherwise.",46],[11,"compute_absolute_position","","Phase 4 of reflow: computes absolute positions.",46],[10,"build_display_list","","Phase 5 of reflow: builds display lists.",46],[10,"compute_overflow","","Returns the union of all overflow rects of all of this flow's fragments.",46],[10,"iterate_through_fragment_border_boxes","","Iterates through border boxes of all of this flow's fragments.",46],[10,"mutate_fragments","","Mutably iterates through fragments in this flow.",46],[11,"compute_collapsible_block_start_margin","","",46],[11,"mark_as_root","","Marks this flow as the root flow. The default implementation is a no-op.",46],[11,"is_store_overflow_delayed","","Return true if store overflow is delayed for this flow.",46],[11,"is_root","","",46],[11,"positioning","","The 'position' property of this flow.",46],[11,"is_fixed","","Return true if this flow has position 'fixed'.",46],[11,"is_positioned","","",46],[11,"is_relatively_positioned","","",46],[11,"is_root_of_absolute_flow_tree","","Return true if this is the root of an absolute flow tree.",46],[11,"is_absolute_containing_block","","Returns true if this is an absolute containing block.",46],[10,"update_late_computed_inline_position_if_necessary","","Updates the inline position of a child flow during the assign-height traversal. At present,\nthis is only used for absolutely-positioned inline-blocks.",46],[10,"update_late_computed_block_position_if_necessary","","Updates the block position of a child flow during the assign-height traversal. At present,\nthis is only used for absolutely-positioned inline-blocks.",46],[11,"generated_containing_block_rect","","Return the dimensions of the containing block generated by this flow for absolutely-\npositioned descendants. For block flows, this is the padding box.",46],[11,"layer_id","","Returns a layer ID for the given fragment.",46],[10,"repair_style","","Attempts to perform incremental fixup of this flow by replacing its fragment's style with\nthe new style. This can only succeed if the flow has exactly one fragment.",46],[11,"remove_compositor_layers","","Remove any compositor layers associated with this flow",46],[8,"ImmutableFlowUtils","",""],[10,"is_block_like","","Returns true if this flow is a block or a float flow.",47],[10,"is_table","","Returns true if this flow is a table flow.",47],[10,"is_table_caption","","Returns true if this flow is a table caption flow.",47],[10,"is_proper_table_child","","Returns true if this flow is a proper table child.",47],[10,"is_table_row","","Returns true if this flow is a table row flow.",47],[10,"is_table_cell","","Returns true if this flow is a table cell flow.",47],[10,"is_table_colgroup","","Returns true if this flow is a table colgroup flow.",47],[10,"is_table_rowgroup","","Returns true if this flow is a table rowgroup flow.",47],[10,"is_table_kind","","Returns true if this flow is one of table-related flows.",47],[10,"need_anonymous_flow","","Returns true if anonymous flow is needed between this flow and child flow.",47],[10,"generate_missing_child_flow","","Generates missing child flow of this flow.",47],[10,"is_leaf","","Returns true if this flow has no children.",47],[10,"child_count","","Returns the number of children that this flow possesses.",47],[10,"is_block_container","","Return true if this flow is a Block Container.",47],[10,"is_block_flow","","Returns true if this flow is a block flow.",47],[10,"is_inline_flow","","Returns true if this flow is an inline flow.",47],[10,"dump","","Dumps the flow tree for debugging.",47],[10,"dump_with_level","","Dumps the flow tree for debugging, with a prefix to indicate that we're at the given level.",47],[8,"MutableFlowUtils","",""],[10,"traverse_preorder","","Traverses the tree in preorder.",48],[10,"traverse_postorder","","Traverses the tree in postorder.",48],[10,"store_overflow","","Computes the overflow region for this flow.",48],[10,"collect_static_block_offsets_from_children","","Gathers static block-offsets bubbled up by kids.",48],[8,"MutableOwnedFlowUtils","",""],[10,"set_absolute_descendants","","Set absolute descendants for this flow.",49],[8,"PreorderFlowTraversal","","A top-down traversal."],[10,"process","","The operation to perform. Return true to continue or false to stop.",50],[11,"should_process","","Returns true if this node must be processed in-order. If this returns false,\nwe skip the operation for this node, but continue processing the descendants.\nThis is called *after* parent nodes are visited.",50],[8,"PostorderFlowTraversal","","A bottom-up traversal, with a optional in-order pass."],[10,"process","","The operation to perform. Return true to continue or false to stop.",51],[11,"should_process","","Returns false if this node must be processed in-order. If this returns false, we skip the\noperation for this node, but continue processing the ancestors. This is called *after*\nchild nodes are visited.",51],[8,"InorderFlowTraversal","","An in-order (sequential only) traversal."],[10,"process","","The operation to perform. Returns the level of the tree we're at.",52],[10,"should_process","","Returns true if this node should be processed and false if neither this node nor its\ndescendants should be processed.",52],[11,"fmt","","",44],[11,"eq","","",44],[11,"ne","","",44],[11,"encode","","",44],[11,"hash","","",53],[11,"cmp","","",53],[11,"partial_cmp","","",53],[11,"lt","","",53],[11,"le","","",53],[11,"gt","","",53],[11,"ge","","",53],[11,"clone","","",53],[11,"eq","","",53],[11,"ne","","",53],[11,"empty","","Returns an empty set of flags.",53],[11,"all","","Returns the set containing all flags.",53],[11,"bits","","Returns the raw value of the flags currently stored.",53],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",53],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",53],[11,"is_empty","","Returns `true` if no flags are currently stored.",53],[11,"is_all","","Returns `true` if all flags are currently set.",53],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",53],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",53],[11,"insert","","Inserts the specified flags in-place.",53],[11,"remove","","Removes the specified flags in-place.",53],[11,"toggle","","Toggles the specified flags in-place.",53],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",53],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",53],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",53],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",53],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",53],[11,"propagate_text_alignment_from_parent","","Propagates text alignment flags from an appropriate parent flow per CSS 2.1.",53],[11,"text_align","","",53],[11,"set_text_align","","",53],[11,"set_text_align_override","","",53],[11,"union_floated_descendants_flags","","",53],[11,"impacted_by_floats","","",53],[11,"set","","",53],[11,"float_kind","","",53],[11,"is_float","","",53],[11,"clears_floats","","",53],[11,"clone","","",41],[11,"new","","",41],[11,"len","","",41],[11,"is_empty","","",41],[11,"push","","",41],[11,"push_descendants","","Push the given descendants on to the existing descendants.",41],[11,"iter","","Return an iterator over the descendant flows.",41],[11,"iter_with_offset","","Return an iterator over (descendant, static y offset).",41],[6,"Item","",""],[11,"next","","",54],[11,"encode","","",42],[11,"new","","",42],[11,"fmt","","",43],[11,"encode","","",43],[11,"drop","","",43],[11,"eq","","",45],[11,"ne","","",45],[11,"clone","","",45],[11,"new","","",43],[11,"child_iter","","",43],[11,"strong_ref_count","","",43],[11,"weak_ref_count","","",43],[11,"debug_id","","",43],[11,"validate_display_list_geometry","","Ensures that all display list items generated by this flow are within the flow's overflow\nrect. This should only be used for debugging.",43],[11,"get","","",55],[11,"generated_containing_block_rect","","",55],[0,"flow_list","layout",""],[3,"FlowList","layout::flow_list",""],[3,"FlowListIterator","",""],[3,"MutFlowListIterator","",""],[11,"front","","Provide a reference to the front element, or None if the list is empty",56],[11,"front_mut","","Provide a mutable reference to the front element, or None if the list is empty",56],[11,"back","","Provide a reference to the back element, or None if the list is empty",56],[11,"back_mut","","Provide a mutable reference to the back element, or None if the list is empty",56],[11,"push_front","","Add an element first in the list",56],[11,"pop_front","","Remove the first element and return it, or None if the list is empty",56],[11,"push_back","","Add an element last in the list",56],[11,"new","","Create an empty list",56],[11,"iter","","Provide a forward iterator",56],[11,"iter_mut","","Provide a forward iterator with mutable references",56],[11,"is_empty","","O(1)",56],[11,"len","","O(1)",56],[6,"Item","",""],[11,"next","","",57],[11,"size_hint","","",57],[6,"Item","",""],[11,"next","","",58],[11,"size_hint","","",58],[0,"flow_ref","layout","Reference-counted pointers to flows."],[3,"FlowRef","layout::flow_ref",""],[3,"WeakFlowRef","",""],[11,"new","","",59],[11,"downgrade","","Downgrades the FlowRef to a WeakFlowRef.",59],[6,"Target","",""],[11,"deref","","",59],[11,"deref_mut","","",59],[11,"drop","","",59],[11,"clone","","",59],[11,"upgrade","","Upgrades a WeakFlowRef to a FlowRef.",60],[6,"Target","",""],[11,"deref","","",60],[11,"deref_mut","","",60],[11,"clone","","",60],[11,"drop","","",60],[0,"fragment","layout","The `Fragment` type, which represents the leaves of the layout tree."],[3,"Fragment","layout::fragment","Fragments (`struct Fragment`) are the leaves of the layout tree. They cannot position\nthemselves. In general, fragments do not have a simple correspondence with CSS fragments in the\nspecification:"],[12,"node","","An opaque reference to the DOM node that this `Fragment` originates from.",61],[12,"style","","The CSS style of this fragment.",61],[12,"border_box","","The position of this fragment relative to its owning flow. The size includes padding and\nborder, but not margin.",61],[12,"border_padding","","The sum of border and padding; i.e. the distance from the edge of the border box to the\ncontent edge of the fragment.",61],[12,"margin","","The margin of the content box.",61],[12,"specific","","Info specific to the kind of fragment. Keep this enum small.",61],[12,"inline_context","","Holds the style context information for fragments\nthat are part of an inline formatting context.",61],[12,"restyle_damage","","How damaged this fragment is since last reflow.",61],[12,"debug_id","","A debug ID that is consistent for the life of this fragment (via transform etc).",61],[3,"InlineAbsoluteHypotheticalFragmentInfo","","A hypothetical box (see CSS 2.1 § 10.3.7) for an absolutely-positioned block that was declared\nwith `display: inline;`."],[12,"flow_ref","","",62],[3,"InlineBlockFragmentInfo","","A fragment that represents an inline-block element."],[12,"flow_ref","","",63],[3,"CanvasFragmentInfo","",""],[12,"replaced_image_fragment_info","","",64],[12,"renderer","","",64],[3,"ImageFragmentInfo","","A fragment that represents a replaced content image and its accompanying borders, shadows, etc."],[12,"replaced_image_fragment_info","","The image held within this fragment.",65],[12,"image","","",65],[3,"ReplacedImageFragmentInfo","",""],[12,"for_node","","",66],[12,"computed_inline_size","","",66],[12,"computed_block_size","","",66],[12,"dom_inline_size","","",66],[12,"dom_block_size","","",66],[12,"writing_mode_is_vertical","","",66],[3,"IframeFragmentInfo","","A fragment that represents an inline frame (iframe). This stores the pipeline ID so that the size\nof this iframe can be communicated via the constellation to the iframe's own layout task."],[12,"pipeline_id","","The pipeline ID of this iframe.",67],[12,"subpage_id","","The subpage ID of this iframe.",67],[3,"ScannedTextFragmentInfo","","A scanned text fragment represents a single run of text with a distinct style. A `TextFragment`\nmay be split into two or more fragments across line breaks. Several `TextFragment`s may\ncorrespond to a single DOM text node. Split text fragments are implemented by referring to\nsubsets of a single `TextRun` object."],[12,"run","","The text run that this represents.",68],[12,"range","","The range within the above text run that this represents.",68],[12,"new_line_pos","","The positions of newlines within this scanned text fragment.",68],[12,"original_new_line_pos","","The new_line_pos is eaten during line breaking. If we need to re-merge\nfragments, it will have to be restored.",68],[12,"content_size","","The intrinsic size of the text fragment.",68],[3,"SplitInfo","","Describes how to split a fragment. This is used during line breaking as part of the return\nvalue of `find_split_info_for_inline_size()`."],[12,"range","","",69],[12,"inline_size","","",69],[3,"SplitResult","","Describes how to split a fragment into two. This contains up to two `SplitInfo`s."],[12,"inline_start","","The part of the fragment that goes on the first line.",70],[12,"inline_end","","The part of the fragment that goes on the second line.",70],[12,"text_run","","The text run which is being split.",70],[3,"TruncationResult","","Describes how a fragment should be truncated."],[12,"split","","The part of the fragment remaining after truncation.",71],[12,"text_run","","The text run which is being truncated.",71],[3,"UnscannedTextFragmentInfo","","Data for an unscanned text fragment. Unscanned text fragments are the results of flow\nconstruction that have not yet had their inline-size determined."],[12,"text","","The text inside the fragment.",72],[3,"TableColumnFragmentInfo","","A fragment that represents a table column."],[12,"span","","the number of columns a <col> element should span",73],[3,"QuantitiesIncludedInIntrinsicInlineSizes","",""],[3,"SplitOptions","",""],[4,"SpecificFragmentInfo","","Info specific to the kind of fragment."],[13,"Generic","","",74],[13,"GeneratedContent","","A piece of generated content that cannot be resolved into `ScannedText` until the generated\ncontent resolution phase (e.g. an ordered list item marker).",74],[13,"Iframe","","",74],[13,"Image","","",74],[13,"Canvas","","",74],[13,"InlineAbsoluteHypothetical","","A hypothetical box (see CSS 2.1 § 10.3.7) for an absolutely-positioned block that was\ndeclared with `display: inline;`.",74],[13,"InlineBlock","","",74],[13,"ScannedText","","",74],[13,"Table","","",74],[13,"TableCell","","",74],[13,"TableColumn","","",74],[13,"TableRow","","",74],[13,"TableWrapper","","",74],[13,"UnscannedText","","",74],[4,"GeneratedContentInfo","","Information for generated content."],[13,"ListItem","","",75],[13,"ContentItem","","",75],[4,"CoordinateSystem","","The coordinate system used in `stacking_relative_border_box()`. See the documentation of that\nmethod for details."],[13,"Parent","","The border box returned is relative to the fragment's parent stacking context.",76],[13,"Own","","The border box returned is relative to the fragment's own stacking context, if applicable.",76],[17,"INTRINSIC_INLINE_SIZE_INCLUDES_MARGINS","",""],[17,"INTRINSIC_INLINE_SIZE_INCLUDES_PADDING","",""],[17,"INTRINSIC_INLINE_SIZE_INCLUDES_BORDER","",""],[17,"INTRINSIC_INLINE_SIZE_INCLUDES_SPECIFIED","",""],[17,"STARTS_LINE","","True if this is the first fragment on the line."],[17,"RETRY_AT_CHARACTER_BOUNDARIES","","True if we should attempt to split at character boundaries if this split fails. This is used to implement `overflow-wrap: break-word`."],[8,"FragmentBorderBoxIterator","","A top-down fragment border box iteration handler."],[10,"process","","The operation to perform.",77],[10,"should_process","","Returns true if this fragment must be processed in-order. If this returns false,\nwe skip the operation for this fragment, but continue processing siblings.",77],[11,"clone","","",61],[11,"encode","","",61],[11,"clone","","",74],[11,"get_type","","",74],[11,"clone","","",75],[11,"clone","","",62],[11,"new","","",62],[11,"clone","","",63],[11,"new","","",63],[11,"clone","","",64],[11,"new","","",64],[11,"canvas_inline_size","","Returns the original inline-size of the canvas.",64],[11,"canvas_block_size","","Returns the original block-size of the canvas.",64],[11,"clone","","",65],[11,"new","","Creates a new image fragment from the given URL and local image cache.",65],[11,"image_inline_size","","Returns the original inline-size of the image.",65],[11,"image_block_size","","Returns the original block-size of the image.",65],[11,"tile_image","","Tile an image",65],[11,"clone","","",66],[11,"new","","",66],[11,"computed_inline_size","","Returns the calculated inline-size of the image, accounting for the inline-size attribute.",66],[11,"computed_block_size","","Returns the calculated block-size of the image, accounting for the block-size attribute.",66],[11,"style_length","","",66],[11,"calculate_replaced_inline_size","","",66],[11,"calculate_replaced_block_size","","",66],[11,"clone","","",67],[11,"new","","Creates the information specific to an iframe fragment.",67],[11,"calculate_replaced_inline_size","","",67],[11,"calculate_replaced_block_size","","",67],[11,"clone","","",68],[11,"new","","Creates the information specific to a scanned text fragment from a range and a text run.",68],[11,"clone","","",69],[11,"fmt","","",69],[11,"clone","","",72],[11,"from_text","","Creates a new instance of `UnscannedTextFragmentInfo` from the given text.",72],[11,"clone","","",73],[11,"new","","Create the information specific to an table column fragment.",73],[11,"new","","Constructs a new `Fragment` instance.",61],[11,"new_anonymous_from_specific_info","","Constructs a new `Fragment` instance for an anonymous table object.",61],[11,"from_opaque_node_and_style","","Constructs a new `Fragment` instance from an opaque node.",61],[11,"reset_inline_sizes","","",61],[11,"save_new_line_pos","","Saves the new_line_pos vector into a `SpecificFragmentInfo::ScannedText`. This will fail\nif called on any other type of fragment.",61],[11,"restore_new_line_pos","","",61],[11,"debug_id","","Returns a debug ID of this fragment. This ID should not be considered stable across\nmultiple layouts or fragment manipulations.",61],[11,"transform","","Transforms this fragment into another fragment of the given type, with the given size,\npreserving all the other data.",61],[11,"transform_with_split_info","","Transforms this fragment using the given `SplitInfo`, preserving all the other data.",61],[11,"transform_into_ellipsis","","Transforms this fragment into an ellipsis fragment, preserving all the other data.",61],[11,"restyle_damage","","",61],[11,"add_inline_context_style","","Adds a style to the inline context for this fragment. If the inline\ncontext doesn't exist yet, it will be created.",61],[11,"surrounding_intrinsic_inline_size","","Returns the portion of the intrinsic inline-size that consists of borders, padding, and/or\nmargins.",61],[11,"calculate_line_height","","",61],[11,"border_width","","Returns the sum of the inline-sizes of all the borders of this fragment. Note that this\ncan be expensive to compute, so if possible use the `border_padding` field instead.",61],[11,"compute_inline_direction_margins","","Computes the margins in the inline direction from the containing block inline-size and the\nstyle. After this call, the inline direction of the `margin` field will be correct.",61],[11,"compute_block_direction_margins","","Computes the margins in the block direction from the containing block inline-size and the\nstyle. After this call, the block direction of the `margin` field will be correct.",61],[11,"compute_border_and_padding","","Computes the border and padding in both inline and block directions from the containing\nblock inline-size and the style. After this call, the `border_padding` field will be\ncorrect.",61],[11,"relative_position","","",61],[11,"clear","","Always inline for SCCP.",61],[11,"style","","",61],[11,"text_align","","Returns the text alignment of the computed style of the nearest ancestor-or-self `Element`\nnode.",61],[11,"vertical_align","","",61],[11,"white_space","","",61],[11,"text_decoration","","Returns the text decoration of this fragment, according to the style of the nearest ancestor\nelement.",61],[11,"inline_start_offset","","Returns the inline-start offset from margin edge to content edge.",61],[11,"can_split","","Returns true if this element can be split. This is true for text fragments.",61],[11,"newline_positions","","Returns the newline positions of this fragment, if it's a scanned text fragment.",61],[11,"newline_positions_mut","","Returns the newline positions of this fragment, if it's a scanned text fragment.",61],[11,"is_generated_content","","Returns true if and only if this fragment is a generated content fragment.",61],[11,"is_scanned_text_fragment","","Returns true if and only if this is a scanned text fragment.",61],[11,"compute_intrinsic_inline_sizes","","Computes the intrinsic inline-sizes of this fragment.",61],[11,"content_inline_size","","TODO: What exactly does this function return? Why is it Au(0) for SpecificFragmentInfo::Generic?",61],[11,"content_block_size","","Returns, and computes, the block-size of this fragment.",61],[11,"content_box","","Returns the dimensions of the content box.",61],[11,"find_split_info_by_new_line","","Find the split of a fragment that includes a new-line character.",61],[11,"calculate_split_position","","Attempts to find the split positions of a text fragment so that its inline-size is no more\nthan `max_inline_size`.",61],[11,"truncate_to_inline_size","","Truncates this fragment to the given `max_inline_size`, using a character-based breaking\nstrategy. If no characters could fit, returns `None`.",61],[11,"strip_trailing_whitespace_if_necessary","","Attempts to strip trailing whitespace from this fragment by adjusting the text run range.\nReturns true if any modifications were made.",61],[11,"is_ignorable_whitespace","","Returns true if this fragment is an unscanned text fragment that consists entirely of\nwhitespace that should be stripped.",61],[11,"assign_replaced_inline_size_if_necessary","","Assigns replaced inline-size, padding, and margins for this fragment only if it is replaced\ncontent per CSS 2.1 § 10.3.2.",61],[11,"assign_replaced_block_size_if_necessary","","Assign block-size for this fragment if it is replaced content. The inline-size must have\nbeen assigned first.",61],[11,"inline_metrics","","Calculates block-size above baseline, depth below baseline, and ascent for this fragment\nwhen used in an inline formatting context. See CSS 2.1 § 10.8.1.",61],[11,"is_hypothetical","","Returns true if this fragment is a hypothetical box. See CSS 2.1 § 10.3.7.",61],[11,"can_merge_with_fragment","","Returns true if this fragment can merge with another adjacent fragment or false otherwise.",61],[11,"is_primary_fragment","","Returns true if and only if this is the *primary fragment* for the fragment's style object\n(conceptually, though style sharing makes this not really true, of course). The primary\nfragment is the one that draws backgrounds, borders, etc., and takes borders, padding and\nmargins into account. Every style object has at most one primary fragment.",61],[11,"update_late_computed_inline_position_if_necessary","","",61],[11,"update_late_computed_block_position_if_necessary","","",61],[11,"repair_style","","",61],[11,"stacking_relative_border_box","","Given the stacking-context-relative position of the containing flow, returns the border box\nof this fragment relative to the parent stacking context. This takes `position: relative`\ninto account.",61],[11,"stacking_relative_content_box","","Given the stacking-context-relative border box, returns the stacking-context-relative\ncontent box.",61],[11,"establishes_stacking_context","","Returns true if this fragment establishes a new stacking context and false otherwise.",61],[11,"compute_overflow","","Computes the overflow rect of this fragment relative to the start of the flow.",61],[11,"remove_compositor_layers","","Remove any compositor layers associated with this fragment - it is being\nremoved from the tree or had its display property set to none.\nTODO(gw): This just hides the compositor layer for now. In the future\nit probably makes sense to provide a hint to the compositor whether\nthe layers should be destroyed to free memory.",61],[11,"fmt","","",61],[11,"hash","","",78],[11,"cmp","","",78],[11,"partial_cmp","","",78],[11,"lt","","",78],[11,"le","","",78],[11,"gt","","",78],[11,"ge","","",78],[11,"clone","","",78],[11,"eq","","",78],[11,"ne","","",78],[11,"empty","","Returns an empty set of flags.",78],[11,"all","","Returns the set containing all flags.",78],[11,"bits","","Returns the raw value of the flags currently stored.",78],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",78],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",78],[11,"is_empty","","Returns `true` if no flags are currently stored.",78],[11,"is_all","","Returns `true` if all flags are currently set.",78],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78],[11,"insert","","Inserts the specified flags in-place.",78],[11,"remove","","Removes the specified flags in-place.",78],[11,"toggle","","Toggles the specified flags in-place.",78],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",78],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",78],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",78],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",78],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",78],[11,"hash","","",79],[11,"cmp","","",79],[11,"partial_cmp","","",79],[11,"lt","","",79],[11,"le","","",79],[11,"gt","","",79],[11,"ge","","",79],[11,"clone","","",79],[11,"eq","","",79],[11,"ne","","",79],[11,"empty","","Returns an empty set of flags.",79],[11,"all","","Returns the set containing all flags.",79],[11,"bits","","Returns the raw value of the flags currently stored.",79],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",79],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",79],[11,"is_empty","","Returns `true` if no flags are currently stored.",79],[11,"is_all","","Returns `true` if all flags are currently set.",79],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",79],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",79],[11,"insert","","Inserts the specified flags in-place.",79],[11,"remove","","Removes the specified flags in-place.",79],[11,"toggle","","Toggles the specified flags in-place.",79],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",79],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",79],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",79],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",79],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",79],[11,"fmt","","",76],[11,"eq","","",76],[11,"ne","","",76],[11,"clone","","",76],[0,"generated_content","layout","The generated content assignment phase."],[3,"ResolveGeneratedContent","layout::generated_content","The generated content resolution traversal."],[5,"static_representation","","Returns the static character that represents the value rendered using the given list-style, if\npossible."],[11,"new","","Creates a new generated content resolution traversal.",80],[11,"process","","",80],[11,"should_process","","",80],[0,"layout_task","layout","The layout task. Performs layout on the DOM, builds display lists and sends them to be\npainted."],[3,"LayoutTaskData","layout::layout_task","Mutable data belonging to the LayoutTask."],[12,"root_flow","","The root of the flow tree.",81],[12,"local_image_cache","","The local image cache.",81],[12,"constellation_chan","","The channel on which messages can be sent to the constellation.",81],[12,"screen_size","","The size of the viewport.",81],[12,"stacking_context","","The root stacking context.",81],[12,"stylist","","Performs CSS selector matching and style resolution.",81],[12,"parallel_traversal","","The workers that we use for parallel operation.",81],[12,"dirty","","The dirty rect. Used during display list construction.",81],[12,"generation","","Starts at zero, and increased by one every time a layout completes.\nThis can be used to easily check for invalid stale data.",81],[12,"content_box_response","","A queued response for the union of the content boxes of a node.",81],[12,"content_boxes_response","","A queued response for the content boxes of a node.",81],[12,"running_animations","","The list of currently-running animations.",81],[12,"new_animations_receiver","","Receives newly-discovered animations.",81],[12,"new_animations_sender","","A channel on which new animations that have been triggered by style recalculation can be\nsent.",81],[3,"LayoutTask","","Information needed by the layout task."],[12,"id","","The ID of the pipeline that we belong to.",82],[12,"url","","The URL of the pipeline that we belong to.",82],[12,"port","","The port on which we receive messages from the script task.",82],[12,"pipeline_port","","The port on which we receive messages from the constellation",82],[12,"chan","","The channel on which we or others can send messages to ourselves.",82],[12,"constellation_chan","","The channel on which messages can be sent to the constellation.",82],[12,"script_chan","","The channel on which messages can be sent to the script task.",82],[12,"paint_chan","","The channel on which messages can be sent to the painting task.",82],[12,"time_profiler_chan","","The channel on which messages can be sent to the time profiler.",82],[12,"mem_profiler_chan","","The channel on which messages can be sent to the memory profiler.",82],[12,"reporter_name","","The name used for the task's memory reporter.",82],[12,"resource_task","","The channel on which messages can be sent to the resource task.",82],[12,"image_cache_task","","The channel on which messages can be sent to the image cache.",82],[12,"font_cache_task","","Public interface to the font cache task.",82],[12,"first_reflow","","Is this the first reflow in this LayoutTask?",82],[12,"rw_data","","A mutex to allow for fast, read-only RPC of layout's internal data\nstructures, while still letting the LayoutTask modify them.",82],[11,"create","","Spawns a new layout task.",82],[11,"tick_animation","","",82],[0,"incremental","layout",""],[3,"RestyleDamage","layout::incremental","Individual layout actions that may be necessary after restyling."],[3,"SpecialRestyleDamage","",""],[5,"rebuild_and_reflow","","Returns a bitmask that represents a flow that needs to be rebuilt and reflowed."],[5,"compute_damage","",""],[17,"REPAINT","","Repaint the node itself.\nCurrently unused; need to decide how this propagates."],[17,"BUBBLE_ISIZES","","Recompute intrinsic inline_sizes (minimum and preferred).\nPropagates down the flow tree because the computation is\nbottom-up."],[17,"REFLOW_OUT_OF_FLOW","","Recompute actual inline-sizes and block-sizes, only taking out-of-flow children into account. Propagates up the flow tree because the computation is top-down."],[17,"REFLOW","","Recompute actual inline_sizes and block_sizes.\nPropagates up the flow tree because the computation is\ntop-down."],[17,"RESOLVE_GENERATED_CONTENT","","Re-resolve generated content. Propagates up the flow tree because the computation is inorder."],[17,"RECONSTRUCT_FLOW","","The entire flow needs to be reconstructed."],[17,"REFLOW_ENTIRE_DOCUMENT","","If this flag is set, we need to reflow the entire document. This is more or less a temporary hack to deal with cases that we don't handle incrementally yet."],[8,"LayoutDamageComputation","",""],[10,"compute_layout_damage","","",83],[10,"reflow_entire_document","","",83],[11,"hash","","",84],[11,"cmp","","",84],[11,"partial_cmp","","",84],[11,"lt","","",84],[11,"le","","",84],[11,"gt","","",84],[11,"ge","","",84],[11,"clone","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"empty","","Returns an empty set of flags.",84],[11,"all","","Returns the set containing all flags.",84],[11,"bits","","Returns the raw value of the flags currently stored.",84],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",84],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",84],[11,"is_empty","","Returns `true` if no flags are currently stored.",84],[11,"is_all","","Returns `true` if all flags are currently set.",84],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84],[11,"insert","","Inserts the specified flags in-place.",84],[11,"remove","","Removes the specified flags in-place.",84],[11,"toggle","","Toggles the specified flags in-place.",84],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",84],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",84],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",84],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",84],[11,"hash","","",85],[11,"cmp","","",85],[11,"partial_cmp","","",85],[11,"lt","","",85],[11,"le","","",85],[11,"gt","","",85],[11,"ge","","",85],[11,"clone","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"empty","","Returns an empty set of flags.",85],[11,"all","","Returns the set containing all flags.",85],[11,"bits","","Returns the raw value of the flags currently stored.",85],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",85],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",85],[11,"is_empty","","Returns `true` if no flags are currently stored.",85],[11,"is_all","","Returns `true` if all flags are currently set.",85],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85],[11,"insert","","Inserts the specified flags in-place.",85],[11,"remove","","Removes the specified flags in-place.",85],[11,"toggle","","Toggles the specified flags in-place.",85],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",85],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",85],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",85],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",85],[11,"damage_for_parent","","Supposing a flow has the given `position` property and this damage, returns the damage that\nwe should add to the *parent* of this flow.",84],[11,"damage_for_child","","Supposing the *parent* of a flow with the given `position` property has this damage,\nreturns the damage that we should add to this flow.",84],[11,"fmt","","",84],[0,"inline","layout",""],[3,"Line","layout::inline","`Line`s are represented as offsets into the child list, rather than\nas an object that \"owns\" fragments. Choosing a different set of line\nbreaks requires a new list of offsets, and possibly some splitting and\nmerging of TextFragments."],[12,"range","","A range of line indices that describe line breaks.",86],[12,"bounds","","The bounds are the exact position and extents of the line with respect\nto the parent box.",86],[12,"green_zone","","The green zone is the greatest extent from which a line can extend to\nbefore it collides with a float.",86],[3,"FragmentIndex","","The index of a fragment in a flattened vector of DOM elements."],[3,"InlineReflowFlags","",""],[3,"InlineFragments","","Represents a list of inline fragments, including element ranges."],[12,"fragments","","The fragments themselves.",87],[3,"InlineFlow","","Flows for inline layout."],[12,"base","","Data common to all flows.",88],[12,"fragments","","A vector of all inline fragments. Several fragments may correspond to one node/element.",88],[12,"lines","","A vector of ranges into fragments that represents line positions. These ranges are disjoint\nand are the result of inline layout. This also includes some metadata used for positioning\nlines.",88],[12,"minimum_block_size_above_baseline","","The minimum block-size above the baseline for each line, as specified by the line block-\nsize and font style.",88],[12,"minimum_depth_below_baseline","","The minimum depth below the baseline for each line, as specified by the line block-size and\nfont style.",88],[12,"first_line_indentation","","The amount of indentation to use on the first line. This is determined by our block parent\n(because percentages are relative to the containing block, and we aren't in a position to\ncompute things relative to our parent's containing block).",88],[3,"InlineFragmentContext","",""],[12,"styles","","",89],[3,"InlineMetrics","","Block-size above the baseline, depth below the baseline, and ascent for a fragment. See CSS 2.1\n§ 10.8.1."],[12,"block_size_above_baseline","","",90],[12,"depth_below_baseline","","",90],[12,"ascent","","",90],[17,"NO_WRAP_INLINE_REFLOW_FLAG","","The `white-space: nowrap` property from CSS 2.1 § 16.6 is in effect."],[11,"fmt","","",86],[11,"encode","","",86],[11,"fmt","","",91],[11,"cmp","","",91],[11,"partial_cmp","","",91],[11,"lt","","",91],[11,"le","","",91],[11,"gt","","",91],[11,"ge","","",91],[11,"eq","","",91],[11,"ne","","",91],[11,"clone","","",91],[11,"encode","","",91],[11,"to_usize","","",91],[6,"Index","",""],[11,"new","","",91],[11,"get","","",91],[11,"zero","","",91],[11,"one","","",91],[11,"min_value","","",91],[11,"max_value","","",91],[11,"count_ones","","",91],[11,"leading_zeros","","",91],[11,"trailing_zeros","","",91],[11,"rotate_left","","",91],[11,"rotate_right","","",91],[11,"swap_bytes","","",91],[11,"checked_add","","",91],[11,"checked_sub","","",91],[11,"checked_mul","","",91],[11,"checked_div","","",91],[6,"Output","",""],[11,"add","","",91],[6,"Output","",""],[11,"sub","","",91],[6,"Output","",""],[11,"mul","","",91],[6,"Output","",""],[11,"neg","","",91],[11,"to_i64","","",91],[11,"to_u64","","",91],[11,"from","","",91],[6,"Output","",""],[11,"div","","",91],[6,"Output","",""],[11,"rem","","",91],[6,"Output","",""],[11,"not","","",91],[6,"Output","",""],[11,"bitand","","",91],[6,"Output","",""],[11,"bitor","","",91],[6,"Output","",""],[11,"bitxor","","",91],[6,"Output","",""],[11,"shl","","",91],[6,"Output","",""],[11,"shr","","",91],[11,"wrapping_add","","",91],[11,"wrapping_sub","","",91],[11,"wrapping_mul","","",91],[11,"overflowing_add","","",91],[11,"overflowing_sub","","",91],[11,"overflowing_mul","","",91],[11,"hash","","",92],[11,"cmp","","",92],[11,"partial_cmp","","",92],[11,"lt","","",92],[11,"le","","",92],[11,"gt","","",92],[11,"ge","","",92],[11,"clone","","",92],[11,"eq","","",92],[11,"ne","","",92],[11,"empty","","Returns an empty set of flags.",92],[11,"all","","Returns the set containing all flags.",92],[11,"bits","","Returns the raw value of the flags currently stored.",92],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",92],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",92],[11,"is_empty","","Returns `true` if no flags are currently stored.",92],[11,"is_all","","Returns `true` if all flags are currently set.",92],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",92],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",92],[11,"insert","","Inserts the specified flags in-place.",92],[11,"remove","","Removes the specified flags in-place.",92],[11,"toggle","","Toggles the specified flags in-place.",92],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",92],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",92],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",92],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",92],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",92],[11,"clone","","",87],[11,"encode","","",87],[11,"fmt","","",87],[11,"new","","Creates an empty set of inline fragments.",87],[11,"len","","Returns the number of inline fragments.",87],[11,"is_empty","","Returns true if this list contains no fragments and false if it contains at least one\nfragment.",87],[11,"push","","Pushes a new inline fragment.",87],[11,"push_all","","Merges another set of inline fragments with this one.",87],[11,"get","","A convenience function to return the fragment at a given index.",87],[11,"get_mut","","A convenience function to return a mutable reference to the fragment at a given index.",87],[11,"encode","","",88],[11,"from_fragments","","",88],[11,"compute_minimum_ascent_and_descent","","Computes the minimum ascent and descent for each line. This is done during flow\nconstruction.",88],[11,"class","","",88],[11,"as_immutable_inline","","",88],[11,"as_inline","","",88],[11,"bubble_inline_sizes","","",88],[11,"assign_inline_sizes","","Recursively (top-down) determines the actual inline-size of child contexts and fragments.\nWhen called on this context, the context has had its inline-size set by the parent context.",88],[11,"assign_block_size","","Calculate and set the block-size of this flow. See CSS 2.1 § 10.6.1.",88],[11,"compute_absolute_position","","",88],[11,"update_late_computed_inline_position_if_necessary","","",88],[11,"update_late_computed_block_position_if_necessary","","",88],[11,"build_display_list","","",88],[11,"repair_style","","",88],[11,"compute_overflow","","",88],[11,"iterate_through_fragment_border_boxes","","",88],[11,"mutate_fragments","","",88],[11,"fmt","","",88],[11,"clone","","",89],[11,"new","","",89],[11,"from_font_metrics","","Calculates inline metrics from font metrics and line block-size per CSS 2.1 § 10.8.1.",90],[11,"from_block_height","","Calculates inline metrics from font metrics and line block-size per CSS 2.1 § 10.8.1.",90],[0,"list_item","layout","Layout for elements with a CSS `display` property of `list-item`. These elements consist of a\nblock and an extra inline fragment for the marker."],[3,"ListItemFlow","layout::list_item","A block with the CSS `display` property equal to `list-item`."],[12,"block_flow","","Data common to all block flows.",93],[12,"marker","","The marker, if outside. (Markers that are inside are instead just fragments on the interior\n`InlineFlow`.)",93],[4,"ListStyleTypeContent","","The kind of content that `list-style-type` results in."],[13,"None","","",94],[13,"StaticText","","",94],[13,"GeneratedContent","","",94],[11,"fmt","","",93],[11,"from_node_fragments_and_flotation","","",93],[11,"class","","",93],[11,"as_block","","",93],[11,"bubble_inline_sizes","","",93],[11,"assign_inline_sizes","","",93],[11,"assign_block_size","","",93],[11,"compute_absolute_position","","",93],[11,"place_float_if_applicable","","",93],[11,"update_late_computed_inline_position_if_necessary","","",93],[11,"update_late_computed_block_position_if_necessary","","",93],[11,"build_display_list","","",93],[11,"repair_style","","",93],[11,"compute_overflow","","",93],[11,"generated_containing_block_rect","","",93],[11,"iterate_through_fragment_border_boxes","","",93],[11,"mutate_fragments","","",93],[11,"from_list_style_type","","Returns the content to be used for the given value of the `list-style-type` property.",94],[0,"model","layout","Borders, padding, and margins."],[3,"AdjoiningMargins","layout::model","A collapsible margin. See CSS 2.1 § 8.3.1."],[12,"most_positive","","The value of the greatest positive margin.",95],[12,"most_negative","","The actual value (not the absolute value) of the negative margin with the largest absolute\nvalue. Since this is not the absolute value, this is always zero or negative.",95],[3,"MarginCollapseInfo","",""],[12,"state","","",96],[12,"block_start_margin","","",96],[12,"margin_in","","",96],[3,"IntrinsicISizes","","Intrinsic inline-sizes, which consist of minimum and preferred."],[12,"minimum_inline_size","","The *minimum inline-size* of the content.",97],[12,"preferred_inline_size","","The *preferred inline-size* of the content.",97],[3,"IntrinsicISizesContribution","","The temporary result of the computation of intrinsic inline-sizes."],[12,"content_intrinsic_sizes","","Intrinsic sizes for the content only (not counting borders, padding, or margins).",98],[12,"surrounding_size","","The inline size of borders and padding, as well as margins if appropriate.",98],[4,"CollapsibleMargins","","Represents the block-start and block-end margins of a flow with collapsible margins. See CSS 2.1 § 8.3.1."],[13,"None","","Margins may not collapse with this flow.",99],[13,"Collapse","","Both the block-start and block-end margins (specified here in that order) may collapse, but the\nmargins do not collapse through this flow.",99],[13,"CollapseThrough","","Margins collapse *through* this flow. This means, essentially, that the flow doesn’t\nhave any border, padding, or out-of-flow (floating or positioned) content",99],[4,"MarginCollapseState","",""],[13,"AccumulatingCollapsibleTopMargin","","",100],[13,"AccumulatingMarginIn","","",100],[4,"MaybeAuto","","Useful helper data type when computing values for blocks and positioned elements."],[13,"Auto","","",101],[13,"Specified","","",101],[5,"specified_or_none","",""],[5,"specified","",""],[5,"padding_from_style","",""],[8,"ToGfxMatrix","",""],[10,"to_gfx_matrix","","",102],[11,"new","","",95],[11,"from_margin","","",95],[11,"union","","",95],[11,"collapse","","",95],[11,"new","","",99],[11,"new","","TODO(#2012, pcwalton): Remove this method once `fragment` is not an `Option`.",96],[11,"initialize_block_start_margin","","",96],[11,"finish_and_compute_collapsible_margins","","",96],[11,"current_float_ceiling","","",96],[11,"advance_block_start_margin","","Adds the child's potentially collapsible block-start margin to the current margin state and\nadvances the Y offset by the appropriate amount to handle that margin. Returns the amount\nthat should be added to the Y offset during block layout.",96],[11,"advance_block_end_margin","","Adds the child's potentially collapsible block-end margin to the current margin state and\nadvances the Y offset by the appropriate amount to handle that margin. Returns the amount\nthat should be added to the Y offset during block layout.",96],[11,"encode","","",97],[11,"fmt","","",97],[11,"new","","",97],[11,"new","","Creates and initializes an inline size computation with all sizes set to zero.",98],[11,"finish","","Adds the content intrinsic sizes and the surrounding size together to yield the final\nintrinsic size computation.",98],[11,"union_inline","","Updates the computation so that the minimum is the maximum of the current minimum and the\ngiven minimum and the preferred is the sum of the current preferred and the given\npreferred. This is used when laying out fragments in the inline direction.",98],[11,"union_block","","Updates the computation so that the minimum is the maximum of the current minimum and the\ngiven minimum and the preferred is the maximum of the current preferred and the given\npreferred. This can be useful when laying out fragments in the block direction (but note\nthat it does not take floats into account, so `BlockFlow` does not use it).",98],[11,"fmt","","",101],[11,"eq","","",101],[11,"ne","","",101],[11,"from_style","","",101],[11,"specified_or_default","","",101],[11,"specified_or_zero","","",101],[11,"map","","",101],[11,"to_gfx_matrix","style::properties::longhands::transform::computed_value","",103],[0,"opaque_node","layout",""],[8,"OpaqueNodeMethods","layout::opaque_node",""],[10,"from_layout_node","","Converts a DOM node (layout view) to an `OpaqueNode`.",104],[10,"from_thread_safe_layout_node","","Converts a thread-safe DOM node (layout view) to an `OpaqueNode`.",104],[10,"from_script_node","","Converts a DOM node (script view) to an `OpaqueNode`.",104],[10,"from_jsmanaged","","Converts a DOM node to an `OpaqueNode'.",104],[10,"to_untrusted_node_address","","Converts this node to an `UntrustedNodeAddress`. An `UntrustedNodeAddress` is just the type\nof node that script expects to receive in a hit test.",104],[11,"from_layout_node","gfx::display_list","",105],[11,"from_thread_safe_layout_node","","",105],[11,"from_script_node","","",105],[11,"from_jsmanaged","","",105],[11,"to_untrusted_node_address","","",105],[0,"parallel","layout","Implements parallel traversals over the DOM and flow trees."],[3,"DomParallelInfo","layout::parallel","Information that we need stored in each DOM node."],[12,"children_count","","The number of children that still need work done.",106],[3,"FlowParallelInfo","","Information that we need stored in each flow."],[12,"children_count","","The number of children that still need work done.",107],[12,"parent","","The address of the parent flow.",107],[5,"owned_flow_to_unsafe_flow","",""],[5,"mut_owned_flow_to_unsafe_flow","",""],[5,"borrowed_flow_to_unsafe_flow","",""],[5,"mut_borrowed_flow_to_unsafe_flow","",""],[5,"traverse_dom_preorder","",""],[5,"traverse_flow_tree_preorder","",""],[5,"build_display_list_for_subtree","",""],[6,"UnsafeFlow","","Vtable + pointer representation of a Flow trait object."],[6,"FlowTraversalFunction","",""],[8,"ParallelPreorderDomTraversal","","A parallel top-down DOM traversal."],[10,"run_parallel","","",108],[11,"run_parallel_helper","","",108],[11,"new","","",106],[11,"new","","",107],[0,"sequential","layout","Implements sequential traversals over the DOM and flow trees."],[5,"traverse_dom_preorder","layout::sequential",""],[5,"resolve_generated_content","",""],[5,"traverse_flow_tree_preorder","",""],[5,"build_display_list_for_subtree","",""],[5,"iterate_through_flow_tree_fragment_border_boxes","",""],[0,"table_wrapper","layout","CSS tables."],[3,"TableWrapperFlow","layout::table_wrapper","A table wrapper flow based on a block formatting context."],[12,"block_flow","","",109],[12,"column_intrinsic_inline_sizes","","Intrinsic column inline sizes according to INTRINSIC § 4.1",109],[12,"table_layout","","Table-layout property",109],[4,"TableLayout","",""],[13,"Fixed","","",110],[13,"Auto","","",110],[11,"fmt","","",110],[11,"encode","","",110],[11,"encode","","",109],[11,"from_node_and_fragment","","",109],[11,"float_from_node_and_fragment","","",109],[11,"class","","",109],[11,"as_table_wrapper","","",109],[11,"as_immutable_table_wrapper","","",109],[11,"as_block","","",109],[11,"bubble_inline_sizes","","",109],[11,"assign_inline_sizes","","",109],[11,"assign_block_size","","",109],[11,"compute_absolute_position","","",109],[11,"place_float_if_applicable","","",109],[11,"assign_block_size_for_inorder_child_if_necessary","","",109],[11,"update_late_computed_inline_position_if_necessary","","",109],[11,"update_late_computed_block_position_if_necessary","","",109],[11,"build_display_list","","",109],[11,"repair_style","","",109],[11,"compute_overflow","","",109],[11,"iterate_through_fragment_border_boxes","","",109],[11,"mutate_fragments","","",109],[11,"fmt","","",109],[6,"Output","",""],[0,"table","layout","CSS table formatting contexts."],[3,"TableFlow","layout::table","A table flow corresponded to the table's internal table fragment under a table wrapper flow.\nThe properties `position`, `float`, and `margin-*` are used on the table wrapper fragment,\nnot table fragment per CSS 2.1 § 10.5."],[12,"block_flow","","",111],[12,"column_intrinsic_inline_sizes","","Information about the intrinsic inline-sizes of each column, computed bottom-up during\nintrinsic inline-size bubbling.",111],[12,"column_computed_inline_sizes","","Information about the actual inline-sizes of each column, computed top-down during actual\ninline-size bubbling.",111],[12,"table_layout","","Table-layout property",111],[3,"InternalTable","","Table, TableRowGroup, TableRow, TableCell types.\nTheir inline-sizes are calculated in the same way and do not have margins."],[3,"ColumnIntrinsicInlineSize","","Information about the intrinsic inline sizes of columns within a table."],[12,"preferred","","The preferred intrinsic inline size.",112],[12,"minimum_length","","The largest specified size of this column as a length.",112],[12,"percentage","","The largest specified size of this column as a percentage (`width` property).",112],[12,"constrained","","Whether the column inline size is *constrained* per INTRINSIC § 4.1.",112],[3,"ColumnComputedInlineSize","","The actual inline size for each column."],[12,"size","","The computed size of this inline column.",113],[3,"ChildInlineSizeInfo","","Inline-size information that we need to push down to table children."],[12,"spacing","","The spacing of the table.",114],[12,"column_computed_inline_sizes","","The computed inline sizes for each column.",114],[8,"TableLikeFlow","","Encapsulates functionality shared among all table-like flows: for now, tables and table\nrowgroups."],[10,"assign_block_size_for_table_like_flow","","Lays out the rows of a table.",115],[11,"encode","","",111],[11,"from_node_and_fragment","","",111],[11,"float_from_node_and_fragment","","",111],[11,"class","","",111],[11,"as_table","","",111],[11,"as_immutable_table","","",111],[11,"as_block","","",111],[11,"column_intrinsic_inline_sizes","","",111],[11,"column_computed_inline_sizes","","",111],[11,"bubble_inline_sizes","","The specified column inline-sizes are set from column group and the first row for the fixed\ntable layout calculation.\nThe maximum min/pref inline-sizes of each column are set from the rows for the automatic\ntable layout calculation.",111],[11,"assign_inline_sizes","","Recursively (top-down) determines the actual inline-size of child contexts and fragments.\nWhen called on this context, the context has had its inline-size set by the parent context.",111],[11,"assign_block_size","","",111],[11,"compute_absolute_position","","",111],[11,"generated_containing_block_rect","","",111],[11,"update_late_computed_inline_position_if_necessary","","",111],[11,"update_late_computed_block_position_if_necessary","","",111],[11,"build_display_list","","",111],[11,"repair_style","","",111],[11,"compute_overflow","","",111],[11,"iterate_through_fragment_border_boxes","","",111],[11,"mutate_fragments","","",111],[11,"fmt","","Outputs a debugging string describing this table flow.",111],[11,"compute_used_inline_size","","Compute the used value of inline-size, taking care of min-inline-size and max-inline-size.",116],[11,"solve_inline_size_constraints","","Solve the inline-size and margins constraints for this block flow.",116],[11,"assign_block_size_for_table_like_flow","layout::block","",3],[11,"fmt","layout::table","",112],[11,"encode","","",112],[11,"clone","","",112],[11,"new","","Returns a newly-initialized `ColumnIntrinsicInlineSize` with all fields blank.",112],[11,"minimum","","Returns the true minimum size of this column, given the containing block's inline size.\nBeware that this is generally only correct for fixed table layout. (Compare CSS 2.1 §\n17.5.2.1 with the algorithm in INTRINSIC § 4.)",112],[11,"greatest_percentage","","Returns the higher of the two percentages specified in `self` and `other`.",112],[11,"clone","","",113],[11,"encode","","",113],[11,"propagate_to_child","","Propagates information computed during inline size assignment to a child of a table, and\nlays out that child in the inline direction.",114],[0,"table_caption","layout","CSS table formatting contexts."],[3,"TableCaptionFlow","layout::table_caption","A table formatting context."],[12,"block_flow","","",117],[11,"from_node_and_fragment","","",117],[11,"class","","",117],[11,"as_table_caption","","",117],[11,"as_block","","",117],[11,"bubble_inline_sizes","","",117],[11,"assign_inline_sizes","","",117],[11,"assign_block_size","","",117],[11,"compute_absolute_position","","",117],[11,"update_late_computed_inline_position_if_necessary","","",117],[11,"update_late_computed_block_position_if_necessary","","",117],[11,"build_display_list","","",117],[11,"repair_style","","",117],[11,"compute_overflow","","",117],[11,"generated_containing_block_rect","","",117],[11,"iterate_through_fragment_border_boxes","","",117],[11,"mutate_fragments","","",117],[11,"fmt","","",117],[0,"table_colgroup","layout","CSS table formatting contexts."],[3,"TableColGroupFlow","layout::table_colgroup","A table formatting context."],[12,"base","","Data common to all flows.",118],[12,"fragment","","The associated fragment.",118],[12,"cols","","The table column fragments",118],[12,"inline_sizes","","The specified inline-sizes of table columns. (We use `LengthOrPercentageOrAuto` here in\nlieu of `ColumnInlineSize` because column groups do not establish minimum or preferred\ninline sizes.)",118],[11,"from_node_and_fragments","","",118],[11,"class","","",118],[11,"as_table_colgroup","","",118],[11,"bubble_inline_sizes","","",118],[11,"assign_inline_sizes","","Table column inline-sizes are assigned in the table flow and propagated to table row flows\nand/or rowgroup flows. Therefore, table colgroup flows do not need to assign inline-sizes.",118],[11,"assign_block_size","","Table columns do not have block-size.",118],[11,"update_late_computed_inline_position_if_necessary","","",118],[11,"update_late_computed_block_position_if_necessary","","",118],[11,"build_display_list","","",118],[11,"repair_style","","",118],[11,"compute_overflow","","",118],[11,"iterate_through_fragment_border_boxes","","",118],[11,"mutate_fragments","","",118],[11,"fmt","","",118],[0,"table_rowgroup","layout","CSS table formatting contexts."],[3,"TableRowGroupFlow","layout::table_rowgroup","A table formatting context."],[12,"block_flow","","Fields common to all block flows.",119],[12,"column_intrinsic_inline_sizes","","Information about the intrinsic inline-sizes of each column.",119],[12,"column_computed_inline_sizes","","Information about the actual inline sizes of each column.",119],[12,"spacing","","The spacing for this rowgroup.",119],[11,"encode","","",119],[11,"from_node_and_fragment","","",119],[11,"fragment","","",119],[11,"class","","",119],[11,"as_table_rowgroup","","",119],[11,"as_immutable_table_rowgroup","","",119],[11,"as_block","","",119],[11,"column_intrinsic_inline_sizes","","",119],[11,"column_computed_inline_sizes","","",119],[11,"bubble_inline_sizes","","",119],[11,"assign_inline_sizes","","Recursively (top-down) determines the actual inline-size of child contexts and fragments.\nWhen called on this context, the context has had its inline-size set by the parent context.",119],[11,"assign_block_size","","",119],[11,"compute_absolute_position","","",119],[11,"update_late_computed_inline_position_if_necessary","","",119],[11,"update_late_computed_block_position_if_necessary","","",119],[11,"build_display_list","","",119],[11,"repair_style","","",119],[11,"compute_overflow","","",119],[11,"generated_containing_block_rect","","",119],[11,"iterate_through_fragment_border_boxes","","",119],[11,"mutate_fragments","","",119],[11,"fmt","","",119],[0,"table_row","layout","CSS table formatting contexts."],[3,"TableRowFlow","layout::table_row","A single row of a table."],[12,"block_flow","","",120],[12,"cell_intrinsic_inline_sizes","","Information about the intrinsic inline-sizes of each cell.",120],[12,"column_computed_inline_sizes","","Information about the computed inline-sizes of each column.",120],[12,"spacing","","The spacing for this row, propagated down from the table during the inline-size assignment\nphase.",120],[3,"CellIntrinsicInlineSize","","Information about the column inline size and span for each cell."],[12,"column_size","","Inline sizes that this cell contributes to the column.",121],[12,"column_span","","The column span of this cell.",121],[11,"encode","","",120],[11,"encode","","",121],[11,"from_node_and_fragment","","",120],[11,"fragment","","",120],[11,"class","","",120],[11,"as_table_row","","",120],[11,"as_immutable_table_row","","",120],[11,"as_block","","",120],[11,"column_intrinsic_inline_sizes","","",120],[11,"column_computed_inline_sizes","","",120],[11,"bubble_inline_sizes","","Recursively (bottom-up) determines the context's preferred and minimum inline-sizes. When\ncalled on this context, all child contexts have had their min/pref inline-sizes set. This\nfunction must decide min/pref inline-sizes based on child context inline-sizes and\ndimensions of any fragments it is responsible for flowing.\nMin/pref inline-sizes set by this function are used in automatic table layout calculation.\nThe specified column inline-sizes of children cells are used in fixed table layout\ncalculation.",120],[11,"assign_inline_sizes","","",120],[11,"assign_block_size","","",120],[11,"compute_absolute_position","","",120],[11,"update_late_computed_inline_position_if_necessary","","",120],[11,"update_late_computed_block_position_if_necessary","","",120],[11,"build_display_list","","",120],[11,"repair_style","","",120],[11,"compute_overflow","","",120],[11,"generated_containing_block_rect","","",120],[11,"iterate_through_fragment_border_boxes","","",120],[11,"mutate_fragments","","",120],[11,"fmt","","",120],[0,"table_cell","layout","CSS table formatting contexts."],[3,"TableCellFlow","layout::table_cell","A table formatting context."],[12,"block_flow","","Data common to all block flows.",122],[12,"column_span","","The column span of this cell.",122],[12,"visible","","Whether this cell is visible. If false, the value of `empty-cells` means that we must not\ndisplay this cell.",122],[11,"encode","","",122],[11,"from_node_fragment_and_visibility_flag","","",122],[11,"fragment","","",122],[11,"mut_fragment","","",122],[11,"class","","",122],[11,"as_table_cell","","",122],[11,"as_immutable_table_cell","","",122],[11,"as_block","","",122],[11,"bubble_inline_sizes","","Minimum/preferred inline-sizes set by this function are used in automatic table layout\ncalculation.",122],[11,"assign_inline_sizes","","Recursively (top-down) determines the actual inline-size of child contexts and fragments.\nWhen called on this context, the context has had its inline-size set by the parent table\nrow.",122],[11,"assign_block_size","","",122],[11,"compute_absolute_position","","",122],[11,"update_late_computed_inline_position_if_necessary","","",122],[11,"update_late_computed_block_position_if_necessary","","",122],[11,"build_display_list","","",122],[11,"repair_style","","",122],[11,"compute_overflow","","",122],[11,"generated_containing_block_rect","","",122],[11,"iterate_through_fragment_border_boxes","","",122],[11,"mutate_fragments","","",122],[11,"fmt","","",122],[0,"text","layout","Text layout."],[3,"TextRunScanner","layout::text","A stack-allocated object for scanning an inline flow into `TextRun`-containing `TextFragment`s."],[12,"clump","","",123],[5,"font_metrics_for_style","","Returns the metrics of the font represented by the given `FontStyle`, respectively."],[5,"line_height_from_style","","Returns the line block-size needed by the given computed style and font size."],[11,"new","","",123],[11,"scan_for_runs","","",123],[0,"traversal","layout","Traversals over the DOM and flow trees, running the layout computations."],[3,"RecalcStyleForNode","layout::traversal","The recalc-style-for-node traversal, which styles each node and must run before\nlayout computation. This computes the styles applied to each node."],[12,"layout_context","","",124],[3,"ConstructFlows","","The flow construction traversal, which builds flows for styled nodes."],[12,"layout_context","","",125],[3,"BubbleISizes","","The bubble-inline-sizes traversal, the first part of layout computation. This computes\npreferred and intrinsic inline-sizes and bubbles them up the tree."],[12,"layout_context","","",126],[3,"AssignISizes","","The assign-inline-sizes traversal. In Gecko this corresponds to `Reflow`."],[12,"layout_context","","",127],[3,"AssignBSizesAndStoreOverflow","","The assign-block-sizes-and-store-overflow traversal, the last (and most expensive) part of\nlayout computation. Determines the final block-sizes for all layout objects, computes\npositions, and computes overflow regions. In Gecko this corresponds to `Reflow` and\n`FinishAndStoreOverflow`."],[12,"layout_context","","",128],[3,"ComputeAbsolutePositions","",""],[12,"layout_context","","",129],[3,"BuildDisplayList","",""],[12,"layout_context","","",130],[11,"process","","",124],[11,"process","","",125],[11,"process","","",126],[11,"should_process","","",126],[11,"process","","",127],[11,"should_process","","",127],[11,"process","","",128],[11,"should_process","","",128],[11,"process","","",129],[11,"process","","",130],[0,"wrapper","layout","A safe wrapper for DOM nodes that prevents layout from mutating the DOM, from letting DOM nodes\nescape, and from generally doing anything that it isn't supposed to. This is accomplished via\na simple whitelist of allowed operations, along with some lifetime magic to prevent nodes from\nescaping."],[3,"LayoutNode","layout::wrapper","A wrapper so that layout can access only the methods that it should have access to. Layout must\nonly ever see these and must never see instances of `LayoutJS`."],[12,"chain","","Being chained to a PhantomData prevents `LayoutNode`s from escaping.",131],[3,"LayoutNodeChildrenIterator","",""],[3,"LayoutNodeReverseChildrenIterator","",""],[3,"LayoutTreeIterator","",""],[3,"LayoutElement","","A wrapper around elements that ensures layout can only ever access safe properties."],[3,"ThreadSafeLayoutNode","","A thread-safe version of `LayoutNode`, used during flow construction. This type of layout\nnode does not allow any parents or siblings of nodes to be accessed, to avoid races."],[3,"ThreadSafeLayoutNodeChildrenIterator","",""],[3,"ThreadSafeLayoutElement","","A wrapper around elements that ensures layout can only ever access safe properties and cannot\nrace on elements."],[4,"PseudoElementType","",""],[13,"Normal","","",132],[13,"Before","","",132],[13,"After","","",132],[5,"layout_node_to_unsafe_layout_node","",""],[5,"layout_node_from_unsafe_layout_node","",""],[6,"UnsafeLayoutNode","","Opaque type stored in type-unsafe work queues for parallel layout.\nMust be transmutable to and from LayoutNode/ThreadSafeLayoutNode."],[8,"TLayoutNode","","Allows some convenience methods on generic layout nodes."],[10,"new_with_this_lifetime","","Creates a new layout node with the same lifetime as this layout node.",133],[10,"type_id","","Returns the type ID of this node. Fails if this node is borrowed mutably. Returns `None`\nif this is a pseudo-element; otherwise, returns `Some`.",133],[10,"get_jsmanaged","","Returns the interior of this node as a `LayoutJS`. This is highly unsafe for layout to\ncall and as such is marked `unsafe`.",133],[11,"get","","Returns the interior of this node as a `Node`. This is highly unsafe for layout to call\nand as such is marked `unsafe`.",133],[11,"node_is_element","","",133],[11,"node_is_document","","",133],[11,"image_url","","If this is an image element, returns its URL. If this is not an image element, fails.",133],[11,"get_renderer","","",133],[11,"get_canvas_width","","",133],[11,"get_canvas_height","","",133],[11,"iframe_pipeline_and_subpage_ids","","If this node is an iframe element, returns its pipeline and subpage IDs. If this node is\nnot an iframe element, fails.",133],[10,"text_content","","If this is a text node or generated content, copies out its content. If this is not a text\nnode, fails.",133],[10,"first_child","","Returns the first child of this node.",133],[8,"PostorderNodeMutTraversal","","A bottom-up, parallelizable traversal."],[10,"process","","The operation to perform. Return true to continue or false to stop.",134],[11,"should_prune","","Returns true if this node should be pruned. If this returns true, we skip the operation\nentirely and do not process any descendant nodes. This is called *before* child nodes are\nvisited. The default implementation never prunes any nodes.",134],[8,"PreorderDomTraversal","","A top-down traversal."],[10,"process","","The operation to perform. Return true to continue or false to stop.",135],[8,"PostorderDomTraversal","","A bottom-up traversal, with a optional in-order pass."],[10,"process","","The operation to perform. Return true to continue or false to stop.",136],[11,"clone","","",131],[11,"eq","","",131],[11,"new_with_this_lifetime","","",131],[11,"type_id","","",131],[11,"get_jsmanaged","","",131],[11,"first_child","","",131],[11,"text_content","","",131],[11,"dump","","",131],[11,"flow_debug_id","","",131],[11,"traverse_preorder","","",131],[11,"children","","Returns an iterator over this node's children.",131],[11,"rev_children","","",131],[11,"get_jsmanaged","","",131],[11,"initialize_layout_data","","Resets layout data and styles for the node.",131],[11,"has_children","","",131],[11,"layout_parent_node","","While doing a reflow, the node at the root has no parent, as far as we're\nconcerned. This method returns `None` at the reflow root.",131],[11,"debug_id","","",131],[6,"Element","",""],[11,"parent_node","","",131],[11,"first_child","","",131],[11,"last_child","","",131],[11,"prev_sibling","","",131],[11,"next_sibling","","",131],[11,"as_element","","If this is an element, accesses the element data. Fails if this is not an element node.",131],[11,"is_element","","",131],[11,"is_document","","",131],[11,"match_attr","","",131],[11,"is_html_element_in_html_document","","",131],[11,"has_changed","","",131],[11,"set_changed","","",131],[11,"is_dirty","","",131],[11,"set_dirty","","",131],[11,"has_dirty_siblings","","",131],[11,"set_dirty_siblings","","",131],[11,"has_dirty_descendants","","",131],[11,"set_dirty_descendants","","",131],[6,"Item","",""],[11,"next","","",137],[6,"Item","",""],[11,"next","","",138],[6,"Item","",""],[11,"next","","",139],[11,"style_attribute","","",140],[11,"get_local_name","","",140],[11,"get_namespace","","",140],[11,"get_attr","","",140],[11,"get_attrs","","",140],[11,"get_link","","",140],[11,"get_hover_state","","",140],[11,"get_id","","",140],[11,"get_disabled_state","","",140],[11,"get_enabled_state","","",140],[11,"get_checked_state","","",140],[11,"get_indeterminate_state","","",140],[11,"has_class","","",140],[11,"each_class","","",140],[11,"has_nonzero_border","","",140],[11,"get_length_attribute","","",140],[11,"get_integer_attribute","","",140],[11,"get_unsigned_integer_attribute","","",140],[11,"get_simple_color_attribute","","",140],[11,"clone","","",132],[11,"eq","","",132],[11,"ne","","",132],[11,"is_before","","",132],[11,"is_after","","",132],[11,"clone","","",141],[11,"new_with_this_lifetime","","Creates a new layout node with the same lifetime as this layout node.",141],[11,"type_id","","Returns `None` if this is a pseudo-element.",141],[11,"get_jsmanaged","","",141],[11,"get","","",141],[11,"first_child","","",141],[11,"text_content","","",141],[11,"new","","Creates a new `ThreadSafeLayoutNode` from the given `LayoutNode`.",141],[11,"debug_id","","",141],[11,"flow_debug_id","","",141],[11,"children","","Returns an iterator over this node's children.",141],[11,"as_element","","If this is an element, accesses the element data. Fails if this is not an element node.",141],[11,"get_pseudo_element_type","","",141],[11,"get_normal_display","","",141],[11,"get_before_display","","",141],[11,"get_after_display","","",141],[11,"has_before_pseudo","","",141],[11,"has_after_pseudo","","",141],[11,"borrow_layout_data","","Borrows the layout data immutably. Fails on a conflicting borrow.",141],[11,"mutate_layout_data","","Borrows the layout data mutably. Fails on a conflicting borrow.",141],[11,"traverse_postorder_mut","","Traverses the tree in postorder.",141],[11,"is_ignorable_whitespace","","",141],[11,"get_input_value","","",141],[11,"get_input_size","","",141],[11,"get_unsigned_integer_attribute","","",141],[11,"restyle_damage","","Get the description of how to account for recent style changes.\nThis is a simple bitfield and fine to copy by value.",141],[11,"set_restyle_damage","","Set the restyle damage field.",141],[11,"flags","","Returns the layout data flags for this node.",141],[11,"insert_flags","","Adds the given flags to this node.",141],[11,"remove_flags","","Removes the given flags from this node.",141],[11,"is_content","","Returns true if this node contributes content. This is used in the implementation of\n`empty_cells` per CSS 2.1 § 17.6.1.1.",141],[6,"Item","",""],[11,"next","","",142],[11,"get_attr","","",143],[0,"css","layout",""],[0,"matching","layout::css","High-level interface to CSS selector matching."],[3,"ApplicableDeclarations","layout::css::matching",""],[12,"normal","","",144],[12,"before","","",144],[12,"after","","",144],[12,"normal_shareable","","Whether the `normal` declarations are shareable with other nodes.",144],[3,"ApplicableDeclarationsCacheEntry","",""],[12,"declarations","","",145],[3,"ApplicableDeclarationsCache","",""],[3,"StyleSharingCandidateCache","","An LRU cache of the last few nodes seen, so that we can aggressively try to reuse their styles."],[3,"StyleSharingCandidate","",""],[12,"style","","",146],[12,"parent_style","","",146],[12,"local_name","","",146],[12,"class","","",146],[12,"namespace","","",146],[12,"common_style_affecting_attributes","","",146],[12,"link","","",146],[4,"StyleSharingResult","","The results of attempting to share a style."],[13,"CannotShare","","We didn't find anybody to share the style with. The boolean indicates whether the style\nis shareable at all.",147],[13,"StyleWasShared","","The node's style can be shared. The integer specifies the index in the LRU cache that was\nhit and the damage that was done.",147],[8,"MatchMethods","",""],[10,"insert_into_bloom_filter","","Inserts and removes the matching `Descendant` selectors from a bloom\nfilter. This is used to speed up CSS selector matching to remove\nunnecessary tree climbs for `Descendant` queries.",148],[10,"remove_from_bloom_filter","","After all the children are done css selector matching, this must be\ncalled to reset the bloom filter after an `insert`.",148],[10,"match_node","","",148],[10,"share_style_if_possible","","Attempts to share a style with another node. This method is unsafe because it depends on\nthe `style_sharing_candidate_cache` having only live nodes in it, and we have no way to\nguarantee that at the type system level yet.",148],[10,"cascade_node","","",148],[11,"new","","",144],[11,"clear","","",144],[11,"clone","","",145],[11,"eq","","",145],[11,"hash","","",145],[11,"new","","",149],[11,"evict_all","","",149],[11,"clone","","",146],[11,"eq","","",146],[11,"new","","",150],[11,"iter","","",150],[11,"insert_if_possible","","",150],[11,"touch","","",150],[11,"match_node","layout::wrapper","",131],[11,"share_style_if_possible","","",131],[11,"insert_into_bloom_filter","","",131],[11,"remove_from_bloom_filter","","",131],[11,"cascade_node","","",131],[0,"node_style","layout::css","Style retrieval from DOM elements."],[8,"StyledNode","layout::css::node_style","Node mixin providing `style` method that returns a `NodeStyle`"],[10,"style","","Returns the style results for the given node. If CSS selector matching has not yet been\nperformed, fails.",151],[10,"has_style","","Does this node have a computed style yet?",151],[10,"unstyle","","Removes the style from this node.",151],[11,"style","layout::wrapper","",141],[11,"has_style","","",141],[11,"unstyle","","",141],[14,"layout_debug_scope!","layout",""],[11,"add_new_child","layout::flow_ref","Adds a new flow as a child of this flow. Fails if this flow is marked as a leaf.",59],[11,"finish","","Finishes a flow. Once a flow is finished, no more child flows or fragments may be added to\nit. This will normally run the bubble-inline-sizes (minimum and preferred -- i.e. intrinsic\n-- inline-size) calculation, unless the global `bubble_inline-sizes_separately` flag is on.",59],[11,"borrow_layout_data_unchecked","layout::wrapper","",131],[11,"borrow_layout_data","","",131],[11,"mutate_layout_data","","",131],[11,"build_display_list_for_background_if_applicable","layout::fragment","",61],[11,"compute_background_image_size","","",61],[11,"build_display_list_for_background_image","","",61],[11,"build_display_list_for_background_linear_gradient","","",61],[11,"build_display_list_for_box_shadow_if_applicable","","",61],[11,"build_display_list_for_borders_if_applicable","","",61],[11,"build_display_list_for_outline_if_applicable","","",61],[11,"build_debug_borders_around_text_fragments","","",61],[11,"build_debug_borders_around_fragment","","",61],[11,"calculate_style_specified_clip","","",61],[11,"build_display_list","","",61],[11,"build_fragment_type_specific_display_items","","",61],[11,"finalize_position_and_size_of_iframe","","",61],[11,"clipping_region_for_children","","",61],[11,"build_display_list_for_text_fragment","","",61],[11,"build_display_list_for_text_decoration","","",61],[11,"build_display_list_for_inline","layout::inline","",88],[11,"build_display_list_for_list_item","layout::list_item","",93],[11,"set_absolute_descendants","layout::flow_ref","Set absolute descendants for this flow.",59],[11,"run_parallel","layout::traversal","",124]],"paths":[[3,"Scope"],[3,"FloatedBlockInfo"],[3,"CandidateBSizeIterator"],[3,"BlockFlow"],[3,"ISizeConstraintInput"],[3,"ISizeConstraintSolution"],[4,"BlockType"],[4,"MarginsMayCollapseFlag"],[8,"ISizeAndMarginsComputer"],[3,"BlockFlowFlags"],[3,"AbsoluteNonReplaced"],[3,"AbsoluteReplaced"],[3,"BlockNonReplaced"],[3,"BlockReplaced"],[3,"FloatNonReplaced"],[3,"FloatReplaced"],[3,"InlineFragmentsConstructionResult"],[3,"InlineBlockSplit"],[3,"FlowConstructor"],[4,"ConstructionResult"],[4,"ConstructionItem"],[8,"FlowConstructionUtils"],[3,"SharedLayoutContext"],[3,"LayoutContext"],[3,"PrivateLayoutData"],[3,"LayoutDataWrapper"],[8,"LayoutDataAccess"],[3,"LayoutDataFlags"],[4,"DisplayListBuildingResult"],[4,"StackingLevel"],[4,"BackgroundAndBorderLevel"],[8,"FragmentDisplayListBuilding"],[8,"BlockFlowDisplayListBuilding"],[8,"InlineFlowDisplayListBuilding"],[8,"ListItemFlowDisplayListBuilding"],[8,"ToGfxColor"],[3,"RGBA"],[3,"PlacementInfo"],[3,"Floats"],[4,"FloatKind"],[4,"ClearType"],[3,"Descendants"],[3,"AbsolutePositionInfo"],[3,"BaseFlow"],[4,"FlowClass"],[4,"ForceNonfloatedFlag"],[8,"Flow"],[8,"ImmutableFlowUtils"],[8,"MutableFlowUtils"],[8,"MutableOwnedFlowUtils"],[8,"PreorderFlowTraversal"],[8,"PostorderFlowTraversal"],[8,"InorderFlowTraversal"],[3,"FlowFlags"],[3,"DescendantIter"],[3,"ContainingBlockLink"],[3,"FlowList"],[3,"FlowListIterator"],[3,"MutFlowListIterator"],[3,"FlowRef"],[3,"WeakFlowRef"],[3,"Fragment"],[3,"InlineAbsoluteHypotheticalFragmentInfo"],[3,"InlineBlockFragmentInfo"],[3,"CanvasFragmentInfo"],[3,"ImageFragmentInfo"],[3,"ReplacedImageFragmentInfo"],[3,"IframeFragmentInfo"],[3,"ScannedTextFragmentInfo"],[3,"SplitInfo"],[3,"SplitResult"],[3,"TruncationResult"],[3,"UnscannedTextFragmentInfo"],[3,"TableColumnFragmentInfo"],[4,"SpecificFragmentInfo"],[4,"GeneratedContentInfo"],[4,"CoordinateSystem"],[8,"FragmentBorderBoxIterator"],[3,"QuantitiesIncludedInIntrinsicInlineSizes"],[3,"SplitOptions"],[3,"ResolveGeneratedContent"],[3,"LayoutTaskData"],[3,"LayoutTask"],[8,"LayoutDamageComputation"],[3,"RestyleDamage"],[3,"SpecialRestyleDamage"],[3,"Line"],[3,"InlineFragments"],[3,"InlineFlow"],[3,"InlineFragmentContext"],[3,"InlineMetrics"],[3,"FragmentIndex"],[3,"InlineReflowFlags"],[3,"ListItemFlow"],[4,"ListStyleTypeContent"],[3,"AdjoiningMargins"],[3,"MarginCollapseInfo"],[3,"IntrinsicISizes"],[3,"IntrinsicISizesContribution"],[4,"CollapsibleMargins"],[4,"MarginCollapseState"],[4,"MaybeAuto"],[8,"ToGfxMatrix"],[3,"ComputedMatrix"],[8,"OpaqueNodeMethods"],[3,"OpaqueNode"],[3,"DomParallelInfo"],[3,"FlowParallelInfo"],[8,"ParallelPreorderDomTraversal"],[3,"TableWrapperFlow"],[4,"TableLayout"],[3,"TableFlow"],[3,"ColumnIntrinsicInlineSize"],[3,"ColumnComputedInlineSize"],[3,"ChildInlineSizeInfo"],[8,"TableLikeFlow"],[3,"InternalTable"],[3,"TableCaptionFlow"],[3,"TableColGroupFlow"],[3,"TableRowGroupFlow"],[3,"TableRowFlow"],[3,"CellIntrinsicInlineSize"],[3,"TableCellFlow"],[3,"TextRunScanner"],[3,"RecalcStyleForNode"],[3,"ConstructFlows"],[3,"BubbleISizes"],[3,"AssignISizes"],[3,"AssignBSizesAndStoreOverflow"],[3,"ComputeAbsolutePositions"],[3,"BuildDisplayList"],[3,"LayoutNode"],[4,"PseudoElementType"],[8,"TLayoutNode"],[8,"PostorderNodeMutTraversal"],[8,"PreorderDomTraversal"],[8,"PostorderDomTraversal"],[3,"LayoutNodeChildrenIterator"],[3,"LayoutNodeReverseChildrenIterator"],[3,"LayoutTreeIterator"],[3,"LayoutElement"],[3,"ThreadSafeLayoutNode"],[3,"ThreadSafeLayoutNodeChildrenIterator"],[3,"ThreadSafeLayoutElement"],[3,"ApplicableDeclarations"],[3,"ApplicableDeclarationsCacheEntry"],[3,"StyleSharingCandidate"],[4,"StyleSharingResult"],[8,"MatchMethods"],[3,"ApplicableDeclarationsCache"],[3,"StyleSharingCandidateCache"],[8,"StyledNode"]]};
searchIndex['script'] = {"items":[[0,"","script","The script crate contains all matters DOM."],[0,"cors","","A partial implementation of CORS\nFor now this library is XHR-specific.\nFor stuff involving `<img>`, `<iframe>`, `<form>`, etc please check what\nthe request mode should be and compare with the fetch spec\nThis library will eventually become the core of the Fetch crate\nwith CORSRequest being expanded into FetchRequest (etc)"],[3,"CORSRequest","script::cors",""],[12,"origin","","",0],[12,"destination","","",0],[12,"mode","","",0],[12,"method","","",0],[12,"headers","","",0],[12,"preflight_flag","","CORS preflight flag (http://fetch.spec.whatwg.org/#concept-http-fetch)\nIndicates that a CORS preflight request and/or cache check is to be performed",0],[3,"CORSResponse","",""],[12,"network_error","","",1],[12,"headers","","",1],[3,"CORSCache","","A CORS cache object. Anchor it somewhere to the user agent."],[3,"CORSCacheEntry","",""],[12,"origin","","",2],[12,"url","","",2],[12,"max_age","","",2],[12,"credentials","","",2],[12,"header_or_method","","",2],[4,"RequestMode","","http://fetch.spec.whatwg.org/#concept-request-mode\nThis only covers some of the request modes. The\n`same-origin` and `no CORS` modes are unnecessary for XHR."],[13,"CORS","","",3],[13,"ForcedPreflight","","",3],[4,"HeaderOrMethod","","Union type for CORS cache entries\nEach entry might pertain to a header or method"],[13,"HeaderData","","",4],[13,"MethodData","","",4],[5,"allow_cross_origin_request","","Perform a CORS check on a header list and CORS request\nhttp://fetch.spec.whatwg.org/#cors-check"],[11,"clone","","",0],[11,"clone","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"maybe_new","","Creates a CORS request if necessary. Will return an error when fetching is forbidden",0],[11,"http_fetch","","http://fetch.spec.whatwg.org/#concept-http-fetch\nThis method assumes that the CORS flag is set\nThis does not perform the full HTTP fetch, rather it handles part of the CORS filtering\nif self.mode is ForcedPreflight, then the CORS-with-forced-preflight\nfetch flag is set as well",0],[11,"clone","","",5],[11,"clone","","",4],[11,"clone","","",2],[0,"dom","script","The implementation of the DOM."],[0,"bindings","script::dom","The code to expose the DOM to JavaScript through IDL bindings."],[0,"cell","script::dom::bindings","A shareable mutable container for the DOM."],[3,"DOMRefCell","script::dom::bindings::cell","A mutable field in the DOM."],[11,"borrow_for_layout","","Return a reference to the contents.",6],[11,"borrow_for_gc_trace","","Borrow the contents for the purpose of GC tracing.",6],[11,"borrow_for_script_deallocation","","Borrow the contents for the purpose of script deallocation.\n",6],[11,"is_mutably_borrowed","","Is the cell mutably borrowed?",6],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",6],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",6],[11,"trace","","",6],[11,"new","","Create a new `DOMRefCell` containing `value`.",6],[11,"borrow","","Immutably borrows the wrapped value.",6],[11,"borrow_mut","","Mutably borrows the wrapped value.",6],[0,"global","script::dom::bindings","Abstractions for global scopes."],[4,"GlobalRef","script::dom::bindings::global","A freely-copyable reference to a rooted global object."],[13,"Window","","A reference to a `Window` object.",7],[13,"Worker","","A reference to a `WorkerGlobalScope` object.",7],[4,"GlobalRoot","","A stack-based rooted reference to a global object."],[13,"Window","","A root for a `Window` object.",8],[13,"Worker","","A root for a `WorkerGlobalScope` object.",8],[4,"GlobalField","","A traced reference to a global object, for use in fields of traced Rust\nstructures."],[13,"Window","","A field for a `Window` object.",9],[13,"Worker","","A field for a `WorkerGlobalScope` object.",9],[4,"GlobalUnrooted","","An unrooted reference to a global object."],[13,"Window","","An unrooted reference to a `Window` object.",10],[13,"Worker","","An unrooted reference to a `WorkerGlobalScope` object.",10],[5,"global_object_for_js_object","","Returns the global object of the realm that the given JS object was created in."],[11,"trace","","",9],[11,"get_cx","","Get the `JSContext` for the `JSRuntime` associated with the thread\nthis global object is on.",7],[11,"as_window","","Extract a `Window`, causing task failure if the global object is not\na `Window`.",7],[11,"resource_task","","Get the `ResourceTask` for this global scope.",7],[11,"get_next_worker_id","","Get next worker id.",7],[11,"get_url","","Get the URL for this global scope.",7],[11,"script_chan","","`ScriptChan` used to send messages to the event loop of this global's\nthread.",7],[11,"reflector","","",7],[11,"r","","Obtain a safe reference to the global object that cannot outlive the\nlifetime of this root.",8],[11,"from_rooted","","Create a new `GlobalField` from a rooted reference.",9],[11,"root","","Create a stack-bounded root for this reference.",9],[11,"root","","Create a stack-bounded root for this reference.",10],[0,"js","script::dom::bindings","Smart pointers for the JS-managed DOM objects."],[3,"Unrooted","script::dom::bindings::js","An unrooted, JS-owned value. Must not be held across a GC."],[3,"Temporary","","A type that represents a JS-owned value that is rooted for the lifetime of\nthis value. Importantly, it requires explicit rooting in order to interact\nwith the inner value. Can be assigned into JS-owned member fields (i.e.\n`JS<T>` types) safely via the `JS<T>::assign` method or\n`OptionalSettable::assign` (for `Option<JS<T>>` fields)."],[3,"JS","","A traced reference to a DOM object. Must only be used as a field in other\nDOM objects."],[3,"LayoutJS","","An unrooted reference to a DOM object for use in layout. `Layout*Helpers`\ntraits must be implemented on this."],[3,"MutHeap","","A holder that provides interior mutability for GC-managed values such as\n`JSVal` and `JS<T>`."],[3,"MutNullableJS","","A mutable `JS<T>` value, with nullability represented by an enclosing\nOption wrapper. Must be used in place of traditional internal mutability\nto ensure that the proper GC barriers are enforced."],[3,"RootCollection","","An opaque, LIFO rooting mechanism. This tracks roots and ensures that they\nare destructed in a LIFO order."],[3,"RootCollectionPtr","","A pointer to a RootCollection, for use in global variables."],[3,"Root","","A rooted reference to a DOM object."],[3,"JSRef","","A reference to a DOM object that is guaranteed to be alive. This is freely\ncopyable."],[8,"HeapGCValue","","A trait to be implemented for JS-managed types that can be stored in\nmutable member fields."],[8,"RootedReference","","Get an `Option<JSRef<T>>` out of an `Option<Root<T>>`"],[10,"r","","Obtain a safe optional reference to the wrapped JS owned-value that\ncannot outlive the lifetime of this root.",11],[8,"OptionalRootedReference","","Get an `Option<Option<JSRef<T>>>` out of an `Option<Option<Root<T>>>`"],[10,"r","","Obtain a safe optional optional reference to the wrapped JS owned-value\nthat cannot outlive the lifetime of this root.",12],[8,"Assignable","","Trait that allows extracting a `JS<T>` value from a variety of\nrooting-related containers, which in general is an unsafe operation since\nthey can outlive the rooted lifetime of the original value."],[10,"get_js","","Extract an unrooted `JS<T>`.",13],[8,"OptionalRootable","","Root a rootable `Option` type (used for `Option<Temporary<T>>`)"],[10,"root","","Root the inner value, if it exists.",14],[8,"OptionalUnrootable","","Return an unrooted type for storing in optional DOM fields"],[10,"unrooted","","Returns a `JS<T>` for the inner value, if it exists.",15],[8,"OptionalRootedRootable","","Root a rootable `Option` type (used for `Option<JS<T>>`)"],[10,"root","","Root the inner value, if it exists.",16],[8,"OptionalOptionalRootedRootable","","Root a rootable `Option<Option>` type (used for `Option<Option<JS<T>>>`)"],[10,"root","","Root the inner value, if it exists.",17],[8,"ResultRootable","","Root a rootable `Result` type (any of `Temporary<T>` or `JS<T>`)"],[10,"root","","Root the inner value, if it exists.",18],[8,"TemporaryPushable","","Provides a facility to push unrooted values onto lists of rooted values.\nThis is safe under the assumption that said lists are reachable via the GC\ngraph, and therefore the new values are transitively rooted for the\nlifetime of their new owner."],[10,"push_unrooted","","Push a new value onto this container.",19],[10,"insert_unrooted","","Insert a new value into this container.",19],[8,"Comparable","","A trait for comparing smart pointers ignoring the lifetimes"],[10,"equals","","Returns whether the other value points to the same object.",20],[11,"from_raw","","Create a new JS-owned value wrapped from a raw Rust pointer.",21],[11,"from_js","","Create a new unrooted value from a `JS<T>`.",21],[11,"from_temporary","","Create a new unrooted value from a `Temporary<T>`.",21],[11,"reflector","","Get the `Reflector` for this pointer.",21],[11,"unsafe_get","","Returns an unsafe pointer to the interior of this object.",21],[11,"root","","Create a stack-bounded root for this value.",21],[11,"clone","","",22],[11,"eq","","",22],[11,"new","","Create a new `Temporary` value from a JS-owned value.",22],[11,"from_unrooted","","Create a new `Temporary` value from an unrooted value.",22],[11,"from_rooted","","Create a new `Temporary` value from a rooted value.",22],[11,"root","","Create a stack-bounded root for this value.",22],[11,"transmute","","Returns `self` as a `Temporary` of another type. For use by\n`InheritTypes` only.",22],[11,"to_layout","","Returns `LayoutJS<T>` containing the same pointer.",23],[11,"get_jsobject","","Get the reflector.",24],[11,"eq","","",23],[11,"eq","","",24],[11,"clone","","",23],[11,"clone","","",24],[11,"from_trusted_node_address","","Create a new JS-owned value wrapped from an address known to be a\n`Node` pointer.",24],[11,"root","","Root this JS-owned value to prevent its collection as garbage.",23],[11,"from_rooted","","Create a `JS<T>` from any JS-managed pointer.",23],[11,"reflector","","",23],[11,"trace","","",25],[11,"new","","Create a new `MutHeap`.",25],[11,"set","","Set this `MutHeap` to the given value, calling write barriers as\nappropriate.",25],[11,"get","","Set the value in this `MutHeap`, calling read barriers as appropriate.",25],[11,"trace","","",26],[11,"new","","Create a new `MutNullableJS`",26],[11,"default","","",26],[11,"assign","","Store an unrooted value in this field. This is safe under the\nassumption that `MutNullableJS<T>` values are only used as fields in\nDOM types that are reachable in the GC graph, so this unrooted value\nbecomes transitively rooted for the lifetime of its new owner.",26],[11,"clear","","Set the inner value to null, without making API users jump through\nuseless type-ascription hoops.",26],[11,"get","","Retrieve a copy of the current optional inner value.",26],[11,"get_inner_as_layout","","Retrieve a copy of the inner optional `JS<T>` as `LayoutJS<T>`.\nFor use by layout, which can't use safe types like Temporary.",26],[11,"or_init","","Retrieve a copy of the current inner value. If it is `None`, it is\ninitialized with the result of `cb` first.",26],[11,"assign","","Store an unrooted value in this field. This is safe under the\nassumption that JS<T> values are only used as fields in DOM types that\nare reachable in the GC graph, so this unrooted value becomes\ntransitively rooted for the lifetime of its new owner.",23],[11,"unsafe_get","","Returns an unsafe pointer to the interior of this JS object. This is\nthe only method that be safely accessed from layout. (The fact that\nthis is unsafe is what necessitates the layout wrappers.)",24],[11,"transmute_copy","","Return `self` as a `JS` of another type.",23],[11,"transmute_copy","","Return `self` as a `LayoutJS` of another type.",24],[11,"r","core::option","",27],[11,"r","","",27],[11,"get_js","script::dom::bindings::js","",23],[11,"get_js","","",28],[11,"get_js","","",22],[11,"root","core::option","",27],[11,"unrooted","","",27],[11,"root","","",27],[11,"root","","",27],[11,"root","","",27],[11,"root","","",27],[11,"root","core::result","",29],[11,"root","","",29],[11,"push_unrooted","collections::vec","",30],[11,"insert_unrooted","","",30],[11,"new","script::dom::bindings::js","Create an empty collection of roots",31],[11,"r","","Obtain a safe reference to the wrapped JS owned-value that cannot\noutlive the lifetime of this root.",32],[11,"get_unsound_ref_forever","","Obtain an unsafe reference to the wrapped JS owned-value that can\noutlive the lifetime of this root.",32],[11,"drop","","",32],[6,"Target","",""],[11,"deref","","",28],[11,"clone","","",28],[11,"eq","","",28],[11,"transmute","","Return `self` as a `JSRef` of another type.",28],[11,"transmute_borrowed","","Return `self` as a borrowed reference to a `JSRef` of another type.",28],[11,"unrooted","","Return an unrooted `JS<T>` for the inner pointer.",28],[11,"extended_deref","","Returns the inner pointer directly.",28],[11,"reflector","","",28],[11,"equals","","",28],[11,"equals","core::option","",27],[0,"refcounted","script::dom::bindings","A generic, safe mechanism by which DOM objects can be pinned and transferred\nbetween tasks (or intra-task for asynchronous events). Akin to Gecko's\nnsMainThreadPtrHandle, this uses thread-safe reference counting and ensures\nthat the actual SpiderMonkey GC integration occurs on the script task via\nmessage passing. Ownership of a `Trusted<T>` object means the DOM object of\ntype T to which it points remains alive. Any other behaviour is undefined.\nTo guarantee the lifetime of a DOM object when performing asynchronous operations,\nobtain a `Trusted<T>` from that object and pass it along with each operation.\nA usable pointer to the original DOM object can be obtained on the script task\nfrom a `Trusted<T>` via the `to_temporary` method."],[3,"TrustedReference","script::dom::bindings::refcounted","A pointer to a Rust DOM object that needs to be destroyed."],[3,"Trusted","","A safe wrapper around a raw pointer to a DOM object that can be\nshared among tasks for use in asynchronous operations. The underlying\nDOM object is guaranteed to live at least as long as the last outstanding\n`Trusted<T>` instance."],[3,"LiveDOMReferences","","The set of live, pinned DOM objects that are currently prevented\nfrom being garbage collected due to outstanding references."],[7,"LIVE_REFERENCES","",""],[11,"new","","Create a new `Trusted<T>` instance from an existing DOM pointer. The DOM object will\nbe prevented from being GCed for the duration of the resulting `Trusted<T>` object's\nlifetime.",33],[11,"to_temporary","","Obtain a usable DOM pointer from a pinned `Trusted<T>` value. Fails if used on\na different thread than the original value from which this `Trusted<T>` was\nobtained.",33],[11,"clone","","",33],[11,"drop","","",33],[11,"initialize","","Set up the task-local data required for storing the outstanding DOM references.",34],[11,"cleanup","","Unpin the given DOM object if its refcount is 0.",34],[0,"utils","script::dom::bindings","Various utilities to glue JavaScript and the DOM implementation together."],[3,"WindowProxyHandler","script::dom::bindings::utils","Proxy handler for a WindowProxy."],[3,"GlobalStaticData","","Static data associated with a global object."],[12,"windowproxy_handler","","The WindowProxy proxy handler for this global.",35],[3,"ConstantSpec","","Representation of an IDL constant."],[12,"name","","name of the constant.",36],[12,"value","","value of the constant.",36],[3,"NativePropertyHooks","","Helper structure for cross-origin wrappers for DOM binding objects."],[12,"native_properties","","The property arrays for this interface.",37],[12,"proto_hooks","","The NativePropertyHooks instance for the parent interface, if any.",37],[3,"DOMClass","","The struct that holds inheritance information for DOM object reflectors."],[12,"interface_chain","","A list of interfaces that this object implements, in order of decreasing\nderivedness.",38],[12,"native_hooks","","The NativePropertyHooks for the interface associated with this class.",38],[3,"DOMJSClass","","The JSClass used for DOM object reflectors."],[12,"base","","The actual JSClass.",39],[12,"dom_class","","Associated data for DOM object reflectors.",39],[3,"NativeProperties","","Contains references to lists of methods, attributes, and constants for a\ngiven interface."],[12,"methods","","Instance methods for the interface.",40],[12,"attrs","","Instance attributes for the interface.",40],[12,"consts","","Constants for the interface.",40],[12,"static_methods","","Static methods for the interface.",40],[12,"static_attrs","","Static attributes for the interface.",40],[3,"Reflector","","A struct to store a reference to the reflector of a DOM object."],[4,"ConstantVal","","Representation of an IDL constant value."],[13,"IntVal","","`long` constant.",41],[13,"UintVal","","`unsigned long` constant.",41],[13,"DoubleVal","","`double` constant.",41],[13,"BoolVal","","`boolean` constant.",41],[13,"NullVal","","`null` constant.",41],[4,"XMLName","","Results of `xml_name_type`."],[13,"QName","","",42],[13,"Name","","",42],[13,"InvalidXMLName","","",42],[5,"get_proto_or_iface_array","","Returns the ProtoOrIfaceArray for the given global object.\nFails if `global` is not a DOM global object."],[5,"do_create_interface_objects","","Creates the *interface prototype object* and the *interface object* (if\nneeded).\nFails on JSAPI failure."],[5,"throwing_constructor","","A throwing constructor, for those interfaces that have neither\n`NoInterfaceObject` nor `Constructor`."],[5,"initialize_global","","Construct and cache the ProtoOrIfaceArray for the given global.\nFails if the argument is not a DOM global."],[5,"reflect_dom_object","","Create the reflector for a new DOM object and yield ownership to the\nreflector."],[5,"get_property_on_prototype","","Gets the property `id` on  `proxy`'s prototype. If it exists, `*found` is\nset to true and `*vp` to the value, otherwise `*found` is set to false."],[5,"get_array_index_from_id","","Get an array index from the given `jsid`. Returns `None` if the given\n`jsid` is not an integer."],[5,"find_enum_string_index","","Find the index of a string given by `v` in `values`.\nReturns `Err(())` on JSAPI failure (there is a pending exception), and\n`Ok(None)` if there was no matching string."],[5,"is_platform_object","","Returns wether `obj` is a platform object\nhttp://heycam.github.io/webidl/#dfn-platform-object"],[5,"get_dictionary_property","","Get the property with name `property` from `object`.\nReturns `Err(())` on JSAPI failure (there is a pending exception), and\n`Ok(None)` if there was no property with the given name."],[5,"has_property_on_prototype","","Returns whether `proxy` has a property `id` on its prototype."],[5,"create_dom_global","","Create a DOM global object with the given class."],[5,"finalize_global","","Drop the resources held by reserved slots of a global object"],[5,"wrap_for_same_compartment","","Callback to outerize windows when wrapping."],[5,"pre_wrap","","Callback to outerize windows before wrapping."],[5,"outerize_global","","Callback to outerize windows."],[5,"delete_property_by_id","","Deletes the property `id` from `object`."],[5,"xml_name_type","","Check if an element name is valid. See http://www.w3.org/TR/xml/#NT-Name\nfor details."],[6,"NonNullJSNative","","A JSNative that cannot be null."],[17,"DOM_PROTOTYPE_SLOT","","The index of the slot that contains a reference to the ProtoOrIfaceArray."],[17,"JSCLASS_DOM_GLOBAL","","The flag set on the `JSClass`es for DOM global objects."],[8,"Reflectable","","A trait to provide access to the `Reflector` for a DOM object."],[10,"reflector","","Returns the receiver's reflector.",43],[11,"trace","","",35],[11,"new","","Creates a new GlobalStaticData.",35],[11,"clone","","",41],[11,"clone","","",36],[11,"get_value","","Returns a `JSVal` that represents the value of this `ConstantSpec`.",36],[11,"eq","","",44],[11,"ne","","",44],[11,"get_jsobject","","Get the reflector.",44],[11,"set_jsobject","","Initialize the reflector. (May be called only once.)",44],[11,"rootable","","Return a pointer to the memory location at which the JS reflector\nobject is stored. Used by Temporary values to root the reflector, as\nrequired by the JSAPI rooting APIs.",44],[11,"new","","Create an uninitialized `Reflector`.",44],[11,"eq","","",42],[11,"ne","","",42],[0,"callback","script::dom::bindings","Base classes to work with IDL callbacks."],[3,"CallbackFunction","script::dom::bindings::callback","A common base class for representing IDL callback function types."],[3,"CallbackInterface","","A common base class for representing IDL callback interface types."],[3,"CallSetup","","A class that performs whatever setup we need to safely make a call while\nthis class is on the stack. After `new` returns, the call is safe to make."],[4,"ExceptionHandling","","The exception handling used for a call."],[13,"Report","","Report any exception and don't throw it to the caller code.",45],[13,"Rethrow","","Throw any exception to the caller code.",45],[5,"wrap_call_this_object","","Wraps the reflector for `p` into the compartment of `cx`."],[8,"CallbackContainer","","A trait to be implemented by concrete IDL callback function and\ncallback interface types."],[10,"new","","Create a new CallbackContainer object for the given `JSObject`.",46],[10,"callback","","Returns the underlying `JSObject`.",46],[11,"eq","","",45],[11,"ne","","",45],[11,"trace","","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"clone","","",47],[11,"new","","Create a new `CallbackFunction` for this object.",47],[11,"trace","","",48],[11,"eq","","",48],[11,"ne","","",48],[11,"clone","","",48],[11,"callback","","Returns the underlying `JSObject`.",48],[11,"callback","","Returns the underlying `JSObject`.",47],[11,"new","","Create a new CallbackInterface object for the given `JSObject`.",48],[11,"get_callable_property","","Returns the property with the given `name`, if it is a callable object,\nor `Err(())` otherwise. If it returns `Err(())`, a JSAPI exception is\npending.",48],[11,"new","","Performs the setup needed to make a call.",49],[11,"get_context","","Returns the `JSContext` used for the call.",49],[11,"drop","","",49],[0,"error","script::dom::bindings","Utilities to throw exceptions from Rust bindings."],[4,"Error","script::dom::bindings::error","DOM exceptions that can be thrown by a native DOM method."],[13,"IndexSize","","IndexSizeError DOMException",50],[13,"NotFound","","NotFoundError DOMException",50],[13,"HierarchyRequest","","HierarchyRequestError DOMException",50],[13,"InvalidCharacter","","InvalidCharacterError DOMException",50],[13,"NotSupported","","NotSupportedError DOMException",50],[13,"InvalidState","","InvalidStateError DOMException",50],[13,"Syntax","","SyntaxError DOMException",50],[13,"NamespaceError","","NamespaceError DOMException",50],[13,"InvalidAccess","","InvalidAccessError DOMException",50],[13,"Security","","SecurityError DOMException",50],[13,"Network","","NetworkError DOMException",50],[13,"Abort","","AbortError DOMException",50],[13,"Timeout","","TimeoutError DOMException",50],[13,"DataClone","","DataCloneError DOMException",50],[13,"NoModificationAllowedError","","NoModificationAllowedError DOMException",50],[13,"TypeError","","TypeError JavaScript Error",50],[13,"JSFailed","","A JavaScript exception is already pending.",50],[5,"throw_dom_exception","","Set a pending DOM exception for the given `result` on `cx`."],[5,"report_pending_exception","","Report a pending exception, thereby clearing it."],[5,"throw_not_in_union","","Throw an exception to signal that a `JSVal` can not be converted to any of\nthe types in an IDL union type."],[5,"throw_type_error","","Throw a `TypeError` with the given message."],[6,"Fallible","","The return type for IDL operations that can throw DOM exceptions."],[6,"ErrorResult","","The return type for IDL operations that can throw DOM exceptions and\nreturn `()`."],[11,"clone","","",50],[11,"fmt","","",50],[0,"conversions","script::dom::bindings","Conversions of Rust values to and from `JSVal`."],[4,"StringificationBehavior","script::dom::bindings::conversions","Behavior for stringification of `JSVal`s."],[13,"Default","","Convert `null` to the string `\"null\"`.",51],[13,"Empty","","Convert `null` to the empty string.",51],[5,"jsstring_to_str","","Convert the given `JSString` to a `DOMString`. Fails if the string does not\ncontain valid UTF-16."],[5,"jsid_to_str","","Convert the given `jsid` to a `DOMString`. Fails if the `jsid` is not a\nstring, or if the string does not contain valid UTF-16."],[5,"is_dom_class","","Returns whether the given `clasp` is one for a DOM object."],[5,"is_dom_proxy","","Returns whether `obj` is a DOM object implemented as a proxy."],[5,"dom_object_slot","","Returns the index of the slot wherein a pointer to the reflected DOM object\nis stored."],[5,"native_from_reflector","","Get the DOM object from the given reflector."],[5,"native_from_reflector_jsmanaged","","Get an `Unrooted<T>` for the given DOM object, unwrapping any wrapper\naround it first, and checking if the object is of the correct type."],[17,"DOM_OBJECT_SLOT","","The index of the slot wherein a pointer to the reflected DOM object is\nstored for non-proxy bindings."],[8,"IDLInterface","","A trait to retrieve the constants necessary to check if a `JSObject`\nimplements a given interface."],[10,"get_prototype_id","","Returns the prototype ID.",52],[10,"get_prototype_depth","","Returns the prototype depth, i.e., the number of interfaces this\ninterface inherits from.",52],[8,"ToJSValConvertible","","A trait to convert Rust types to `JSVal`s."],[10,"to_jsval","","Convert `self` to a `JSVal`. JSAPI failure causes a task failure.",53],[8,"FromJSValConvertible","","A trait to convert `JSVal`s to Rust types."],[16,"Config","script::dom::bindings::conversions::FromJSValConvertible","Optional configurable behaviour switch; use () for no configuration."],[10,"from_jsval","script::dom::bindings::conversions","Convert `val` to type `Self`.\nOptional configuration of type `T` can be passed as the `option`\nargument.\nIf it returns `Err(())`, a JSAPI exception is pending.",54],[11,"to_jsval","js::jsval","",55],[6,"Config","script::dom::bindings::conversions",""],[6,"Config","",""],[6,"Config","",""],[6,"Config","",""],[6,"Config","",""],[6,"Config","",""],[6,"Config","",""],[6,"Config","",""],[6,"Config","",""],[6,"Config","",""],[6,"Config","",""],[6,"Config","",""],[6,"Config","",""],[11,"to_jsval","","",56],[11,"eq","","",51],[11,"ne","","",51],[11,"default","","",51],[6,"Config","",""],[11,"from_jsval","","",56],[6,"Config","",""],[6,"Config","",""],[11,"to_jsval","script::dom::bindings::utils","",44],[6,"Config","script::dom::bindings::conversions",""],[11,"from_jsval","script::dom::bindings::js","",21],[11,"to_jsval","","",32],[11,"to_jsval","","",28],[11,"to_jsval","","",21],[11,"to_jsval","core::option","",27],[6,"Config","script::dom::bindings::conversions",""],[11,"from_jsval","core::option","",27],[0,"proxyhandler","script::dom::bindings","Utilities for the implementation of JSAPI proxy handlers."],[5,"get_property_descriptor","script::dom::bindings::proxyhandler","Invoke the [[GetOwnProperty]] trap (`getOwnPropertyDescriptor`) on `proxy`,\nwith argument `id` and return the result, if it is not `undefined`.\nOtherwise, walk along the prototype chain to find a property with that\nname."],[5,"define_property","","Defines an expando on the given `proxy`."],[5,"delete","","Deletes an expando off the given `proxy`."],[5,"object_to_string","","Returns the stringification of an object with class `name`."],[5,"get_expando_object","","Get the expando object, or null if there is none."],[5,"ensure_expando_object","","Get the expando object, or create it if it doesn't exist yet.\nFails on JSAPI failure."],[5,"fill_property_descriptor","","Set the property descriptor's object to `obj` and set it to enumerable,\nand writable if `readonly` is true."],[5,"get_own_property_names","","No-op required hook."],[5,"enumerate","","No-op required hook."],[0,"num","script::dom::bindings","The `Finite<T>` struct."],[3,"Finite","script::dom::bindings::num","Encapsulates the IDL restricted float type."],[11,"trace","","",57],[11,"eq","","",57],[11,"ne","","",57],[11,"clone","","",57],[11,"new","","Create a new `Finite<T: Float>` safely.",57],[11,"wrap","","Create a new `Finite<T: Float>`.",57],[6,"Target","",""],[11,"deref","","",57],[0,"str","script::dom::bindings","The `ByteString` struct."],[3,"ByteString","script::dom::bindings::str","Encapsulates the IDL `ByteString` type."],[3,"USVString","","A string that is constructed from a UCS-2 buffer by replacing invalid code\npoints with the replacement character."],[11,"trace","","",58],[11,"eq","","",58],[11,"ne","","",58],[11,"clone","","",58],[11,"new","","Creates a new `ByteString`.",58],[11,"as_str","","Returns `self` as a string, if it encodes valid UTF-8, and `None`\notherwise.",58],[11,"as_slice","","Returns the underlying vector as a slice.",58],[11,"len","","Returns the length.",58],[11,"eq_ignore_case","","Compare `self` to `other`, matching A–Z and a–z as equal.",58],[11,"to_lower","","Returns `self` with A–Z replaced by a–z.",58],[11,"is_token","","Returns whether `self` is a `token`, as defined by\n[RFC 2616](http://tools.ietf.org/html/rfc2616#page-17).",58],[11,"is_field_value","","Returns whether `self` is a `field-value`, as defined by\n[RFC 2616](http://tools.ietf.org/html/rfc2616#page-32).",58],[11,"hash","","",58],[6,"Err","",""],[11,"from_str","","",58],[0,"structuredclone","script::dom::bindings","This module implements structured cloning, as defined by [HTML]\n(https://html.spec.whatwg.org/multipage/#safe-passing-of-structured-data)."],[3,"StructuredCloneData","script::dom::bindings::structuredclone","A buffer for a structured clone."],[11,"write","","Writes a structured clone. Returns a `DataClone` error if that fails.",59],[11,"read","","Reads a structured clone.",59],[0,"trace","script::dom::bindings","Utilities for tracing JS-managed values."],[3,"RootedCollectionSet","script::dom::bindings::trace","Holds a set of vectors that need to be rooted"],[3,"RootedVec","","A vector of items that are rooted for the lifetime\nof this struct"],[5,"trace_jsval","","Trace a `JSVal`."],[5,"trace_reflector","","Trace the `JSObject` held by `reflector`."],[5,"trace_object","","Trace a `JSObject`."],[5,"trace_collections","","SM Callback that traces the rooted collections"],[7,"ROOTED_COLLECTIONS","",""],[8,"JSTraceable","","A trait to allow tracing (only) DOM objects."],[10,"trace","","Trace `self`.",60],[11,"trace","script::dom::bindings::js","",23],[11,"trace","script::dom::bindings::trace","",61],[11,"trace","script::dom::bindings::utils","",44],[11,"trace","core::cell","",62],[11,"trace","alloc::rc","",63],[11,"trace","alloc::boxed","",64],[11,"trace","core::cell","",65],[11,"trace","js::jsval","",55],[11,"trace","collections::vec","",30],[11,"trace","selectors::smallvec","",66],[11,"trace","core::option","",27],[11,"trace","std::collections::hash::map","",67],[11,"trace","collections::string","",68],[11,"trace","url","",69],[11,"trace","std::sync::mpsc","",70],[11,"trace","","",71],[11,"trace","geom::rect","",72],[11,"trace","net::image_cache_task","",73],[11,"trace","script_traits","",74],[11,"trace","string_cache::atom","",75],[11,"trace","string_cache::namespace","",76],[11,"trace","std::old_io::timer","",77],[11,"trace","script::dom::bindings::refcounted","",33],[11,"trace","style::properties","",78],[11,"trace","msg::constellation_msg","",79],[11,"trace","","",80],[11,"trace","","",81],[11,"trace","","",82],[11,"trace","html5ever::tree_builder::interface","",83],[11,"trace","js::rust","",84],[11,"trace","script::dom::bindings::trace","",85],[11,"trace","hyper::header","",86],[11,"trace","hyper::method","",87],[11,"trace","msg::constellation_msg","",88],[11,"trace","script::dom::bindings::utils","",89],[11,"trace","script_traits","",90],[11,"trace","util::str","",91],[11,"trace","cssparser::color","",92],[11,"trace","geom::matrix2d","",93],[11,"trace","net::storage_task","",94],[11,"trace","canvas::canvas_paint_task","",95],[11,"trace","","",96],[11,"trace","","",97],[11,"trace","alloc::boxed","",64],[11,"trace","","",64],[11,"trace","","",64],[11,"trace","script::dom::bindings::trace","",98],[11,"new","","Create a vector of items of type T that is rooted for\nthe lifetime of this struct",98],[11,"drop","","",98],[6,"Target","",""],[11,"deref","","",98],[11,"deref_mut","","",98],[0,"codegen","script::dom::bindings","Generated JS-Rust bindings."],[0,"Bindings","script::dom::bindings::codegen",""],[0,"AttrBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::AttrBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"AttrMethods","",""],[10,"GetNamespaceURI","","",99],[10,"GetPrefix","","",99],[10,"LocalName","","",99],[10,"Name","","",99],[10,"Value","","",99],[10,"SetValue","","",99],[10,"TextContent","","",99],[10,"SetTextContent","","",99],[10,"NodeValue","","",99],[10,"SetNodeValue","","",99],[10,"GetOwnerElement","","",99],[10,"Specified","","",99],[0,"BlobBinding","script::dom::bindings::codegen::Bindings",""],[3,"BlobPropertyBag","script::dom::bindings::codegen::Bindings::BlobBinding",""],[12,"type_","","",100],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"BlobMethods","",""],[10,"Size","","",101],[10,"Type","","",101],[10,"Slice","","",101],[11,"empty","","",100],[11,"new","","",100],[0,"CSSStyleDeclarationBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::CSSStyleDeclarationBinding",""],[5,"DefineDOMInterface","",""],[5,"DefineProxyHandler","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"CSSStyleDeclarationMethods","",""],[10,"Length","","",102],[10,"Item","","",102],[10,"GetPropertyValue","","",102],[10,"GetPropertyPriority","","",102],[10,"SetProperty","","",102],[10,"SetPropertyValue","","",102],[10,"SetPropertyPriority","","",102],[10,"RemoveProperty","","",102],[10,"CssFloat","","",102],[10,"SetCssFloat","","",102],[10,"Background","","",102],[10,"SetBackground","","",102],[10,"BackgroundColor","","",102],[10,"SetBackgroundColor","","",102],[10,"BackgroundPosition","","",102],[10,"SetBackgroundPosition","","",102],[10,"BackgroundRepeat","","",102],[10,"SetBackgroundRepeat","","",102],[10,"BackgroundImage","","",102],[10,"SetBackgroundImage","","",102],[10,"BackgroundAttachment","","",102],[10,"SetBackgroundAttachment","","",102],[10,"BackgroundSize","","",102],[10,"SetBackgroundSize","","",102],[10,"Border","","",102],[10,"SetBorder","","",102],[10,"BorderCollapse","","",102],[10,"SetBorderCollapse","","",102],[10,"BorderColor","","",102],[10,"SetBorderColor","","",102],[10,"BorderRadius","","",102],[10,"SetBorderRadius","","",102],[10,"BorderSpacing","","",102],[10,"SetBorderSpacing","","",102],[10,"BorderStyle","","",102],[10,"SetBorderStyle","","",102],[10,"BorderWidth","","",102],[10,"SetBorderWidth","","",102],[10,"BorderBottom","","",102],[10,"SetBorderBottom","","",102],[10,"BorderBottomColor","","",102],[10,"SetBorderBottomColor","","",102],[10,"BorderBottomLeftRadius","","",102],[10,"SetBorderBottomLeftRadius","","",102],[10,"BorderBottomRightRadius","","",102],[10,"SetBorderBottomRightRadius","","",102],[10,"BorderBottomStyle","","",102],[10,"SetBorderBottomStyle","","",102],[10,"BorderBottomWidth","","",102],[10,"SetBorderBottomWidth","","",102],[10,"BorderLeft","","",102],[10,"SetBorderLeft","","",102],[10,"BorderLeftColor","","",102],[10,"SetBorderLeftColor","","",102],[10,"BorderLeftStyle","","",102],[10,"SetBorderLeftStyle","","",102],[10,"BorderLeftWidth","","",102],[10,"SetBorderLeftWidth","","",102],[10,"BorderRight","","",102],[10,"SetBorderRight","","",102],[10,"BorderRightColor","","",102],[10,"SetBorderRightColor","","",102],[10,"BorderRightStyle","","",102],[10,"SetBorderRightStyle","","",102],[10,"BorderRightWidth","","",102],[10,"SetBorderRightWidth","","",102],[10,"BorderTop","","",102],[10,"SetBorderTop","","",102],[10,"BorderTopColor","","",102],[10,"SetBorderTopColor","","",102],[10,"BorderTopLeftRadius","","",102],[10,"SetBorderTopLeftRadius","","",102],[10,"BorderTopRightRadius","","",102],[10,"SetBorderTopRightRadius","","",102],[10,"BorderTopStyle","","",102],[10,"SetBorderTopStyle","","",102],[10,"BorderTopWidth","","",102],[10,"SetBorderTopWidth","","",102],[10,"Content","","",102],[10,"SetContent","","",102],[10,"Color","","",102],[10,"SetColor","","",102],[10,"Display","","",102],[10,"SetDisplay","","",102],[10,"Opacity","","",102],[10,"SetOpacity","","",102],[10,"Visibility","","",102],[10,"SetVisibility","","",102],[10,"Cursor","","",102],[10,"SetCursor","","",102],[10,"BoxSizing","","",102],[10,"SetBoxSizing","","",102],[10,"BoxShadow","","",102],[10,"SetBoxShadow","","",102],[10,"TextShadow","","",102],[10,"SetTextShadow","","",102],[10,"Clear","","",102],[10,"SetClear","","",102],[10,"Clip","","",102],[10,"SetClip","","",102],[10,"Transform","","",102],[10,"SetTransform","","",102],[10,"TransformOrigin","","",102],[10,"SetTransformOrigin","","",102],[10,"Direction","","",102],[10,"SetDirection","","",102],[10,"Filter","","",102],[10,"SetFilter","","",102],[10,"LineHeight","","",102],[10,"SetLineHeight","","",102],[10,"MixBlendMode","","",102],[10,"SetMixBlendMode","","",102],[10,"VerticalAlign","","",102],[10,"SetVerticalAlign","","",102],[10,"ListStyle","","",102],[10,"SetListStyle","","",102],[10,"ListStylePosition","","",102],[10,"SetListStylePosition","","",102],[10,"ListStyleType","","",102],[10,"SetListStyleType","","",102],[10,"ListStyleImage","","",102],[10,"SetListStyleImage","","",102],[10,"Quotes","","",102],[10,"SetQuotes","","",102],[10,"CounterIncrement","","",102],[10,"SetCounterIncrement","","",102],[10,"CounterReset","","",102],[10,"SetCounterReset","","",102],[10,"Overflow","","",102],[10,"SetOverflow","","",102],[10,"OverflowX","","",102],[10,"SetOverflowX","","",102],[10,"OverflowY","","",102],[10,"SetOverflowY","","",102],[10,"OverflowWrap","","",102],[10,"SetOverflowWrap","","",102],[10,"TableLayout","","",102],[10,"SetTableLayout","","",102],[10,"EmptyCells","","",102],[10,"SetEmptyCells","","",102],[10,"CaptionSide","","",102],[10,"SetCaptionSide","","",102],[10,"WhiteSpace","","",102],[10,"SetWhiteSpace","","",102],[10,"WritingMode","","",102],[10,"SetWritingMode","","",102],[10,"LetterSpacing","","",102],[10,"SetLetterSpacing","","",102],[10,"WordBreak","","",102],[10,"SetWordBreak","","",102],[10,"WordSpacing","","",102],[10,"SetWordSpacing","","",102],[10,"WordWrap","","",102],[10,"SetWordWrap","","",102],[10,"TextOverflow","","",102],[10,"SetTextOverflow","","",102],[10,"TextAlign","","",102],[10,"SetTextAlign","","",102],[10,"TextDecoration","","",102],[10,"SetTextDecoration","","",102],[10,"TextIndent","","",102],[10,"SetTextIndent","","",102],[10,"TextJustify","","",102],[10,"SetTextJustify","","",102],[10,"TextOrientation","","",102],[10,"SetTextOrientation","","",102],[10,"TextRendering","","",102],[10,"SetTextRendering","","",102],[10,"TextTransform","","",102],[10,"SetTextTransform","","",102],[10,"Font","","",102],[10,"SetFont","","",102],[10,"FontFamily","","",102],[10,"SetFontFamily","","",102],[10,"FontSize","","",102],[10,"SetFontSize","","",102],[10,"FontStretch","","",102],[10,"SetFontStretch","","",102],[10,"FontStyle","","",102],[10,"SetFontStyle","","",102],[10,"FontVariant","","",102],[10,"SetFontVariant","","",102],[10,"FontWeight","","",102],[10,"SetFontWeight","","",102],[10,"Margin","","",102],[10,"SetMargin","","",102],[10,"MarginBottom","","",102],[10,"SetMarginBottom","","",102],[10,"MarginLeft","","",102],[10,"SetMarginLeft","","",102],[10,"MarginRight","","",102],[10,"SetMarginRight","","",102],[10,"MarginTop","","",102],[10,"SetMarginTop","","",102],[10,"Padding","","",102],[10,"SetPadding","","",102],[10,"PaddingBottom","","",102],[10,"SetPaddingBottom","","",102],[10,"PaddingLeft","","",102],[10,"SetPaddingLeft","","",102],[10,"PaddingRight","","",102],[10,"SetPaddingRight","","",102],[10,"PaddingTop","","",102],[10,"SetPaddingTop","","",102],[10,"Outline","","",102],[10,"SetOutline","","",102],[10,"OutlineColor","","",102],[10,"SetOutlineColor","","",102],[10,"OutlineStyle","","",102],[10,"SetOutlineStyle","","",102],[10,"OutlineWidth","","",102],[10,"SetOutlineWidth","","",102],[10,"OutlineOffset","","",102],[10,"SetOutlineOffset","","",102],[10,"Position","","",102],[10,"SetPosition","","",102],[10,"PointerEvents","","",102],[10,"SetPointerEvents","","",102],[10,"Top","","",102],[10,"SetTop","","",102],[10,"Right","","",102],[10,"SetRight","","",102],[10,"Left","","",102],[10,"SetLeft","","",102],[10,"Bottom","","",102],[10,"SetBottom","","",102],[10,"Height","","",102],[10,"SetHeight","","",102],[10,"MinHeight","","",102],[10,"SetMinHeight","","",102],[10,"MaxHeight","","",102],[10,"SetMaxHeight","","",102],[10,"Width","","",102],[10,"SetWidth","","",102],[10,"MinWidth","","",102],[10,"SetMinWidth","","",102],[10,"MaxWidth","","",102],[10,"SetMaxWidth","","",102],[10,"ZIndex","","",102],[10,"SetZIndex","","",102],[10,"ImageRendering","","",102],[10,"SetImageRendering","","",102],[10,"Transition","","",102],[10,"SetTransition","","",102],[10,"TransitionDuration","","",102],[10,"SetTransitionDuration","","",102],[10,"TransitionTimingFunction","","",102],[10,"SetTransitionTimingFunction","","",102],[10,"TransitionProperty","","",102],[10,"SetTransitionProperty","","",102],[10,"TransitionDelay","","",102],[10,"SetTransitionDelay","","",102],[10,"IndexedGetter","","",102],[0,"CanvasGradientBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::CanvasGradientBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"CanvasGradientMethods","",""],[10,"AddColorStop","","",103],[0,"CanvasPatternBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::CanvasPatternBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"CanvasRenderingContext2DBinding","script::dom::bindings::codegen::Bindings",""],[4,"CanvasWindingRule","script::dom::bindings::codegen::Bindings::CanvasRenderingContext2DBinding",""],[13,"Nonzero","","",104],[13,"Evenodd","","",104],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[0,"CanvasWindingRuleValues","",""],[17,"strings","script::dom::bindings::codegen::Bindings::CanvasRenderingContext2DBinding::CanvasWindingRuleValues",""],[11,"to_jsval","script::dom::bindings::codegen::Bindings::CanvasRenderingContext2DBinding","",104],[7,"sNativePropertyHooks","",""],[8,"CanvasRenderingContext2DMethods","",""],[10,"Canvas","","",105],[10,"Scale","","",105],[10,"Translate","","",105],[10,"Transform","","",105],[10,"SetTransform","","",105],[10,"ImageSmoothingEnabled","","",105],[10,"SetImageSmoothingEnabled","","",105],[10,"StrokeStyle","","",105],[10,"SetStrokeStyle","","",105],[10,"FillStyle","","",105],[10,"SetFillStyle","","",105],[10,"CreateLinearGradient","","",105],[10,"CreateRadialGradient","","",105],[10,"ClearRect","","",105],[10,"FillRect","","",105],[10,"StrokeRect","","",105],[10,"BeginPath","","",105],[10,"Fill","","",105],[10,"Stroke","","",105],[10,"DrawImage","","",105],[10,"DrawImage_","","",105],[10,"DrawImage__","","",105],[10,"CreateImageData","","",105],[10,"CreateImageData_","","",105],[10,"GetImageData","","",105],[10,"PutImageData","","",105],[10,"PutImageData_","","",105],[10,"ClosePath","","",105],[10,"MoveTo","","",105],[10,"LineTo","","",105],[10,"QuadraticCurveTo","","",105],[10,"BezierCurveTo","","",105],[10,"Arc","","",105],[11,"trace","","",104],[11,"eq","","",104],[11,"ne","","",104],[0,"CharacterDataBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::CharacterDataBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"CharacterDataMethods","",""],[10,"Data","","",106],[10,"SetData","","",106],[10,"Length","","",106],[10,"SubstringData","","",106],[10,"AppendData","","",106],[10,"InsertData","","",106],[10,"DeleteData","","",106],[10,"ReplaceData","","",106],[10,"Remove","","",106],[0,"CommentBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::CommentBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"ConsoleBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::ConsoleBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"ConsoleMethods","",""],[10,"Log","","",107],[10,"Debug","","",107],[10,"Info","","",107],[10,"Warn","","",107],[10,"Error","","",107],[10,"Assert","","",107],[0,"CustomEventBinding","script::dom::bindings::codegen::Bindings",""],[3,"CustomEventInit","script::dom::bindings::codegen::Bindings::CustomEventBinding",""],[12,"parent","","",108],[12,"detail","","",108],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"CustomEventMethods","",""],[10,"Detail","","",109],[10,"InitCustomEvent","","",109],[11,"empty","","",108],[11,"new","","",108],[0,"DOMExceptionBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::DOMExceptionBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[0,"DOMExceptionConstants","",""],[17,"INDEX_SIZE_ERR","script::dom::bindings::codegen::Bindings::DOMExceptionBinding::DOMExceptionConstants",""],[17,"DOMSTRING_SIZE_ERR","",""],[17,"HIERARCHY_REQUEST_ERR","",""],[17,"WRONG_DOCUMENT_ERR","",""],[17,"INVALID_CHARACTER_ERR","",""],[17,"NO_DATA_ALLOWED_ERR","",""],[17,"NO_MODIFICATION_ALLOWED_ERR","",""],[17,"NOT_FOUND_ERR","",""],[17,"NOT_SUPPORTED_ERR","",""],[17,"INUSE_ATTRIBUTE_ERR","",""],[17,"INVALID_STATE_ERR","",""],[17,"SYNTAX_ERR","",""],[17,"INVALID_MODIFICATION_ERR","",""],[17,"NAMESPACE_ERR","",""],[17,"INVALID_ACCESS_ERR","",""],[17,"VALIDATION_ERR","",""],[17,"TYPE_MISMATCH_ERR","",""],[17,"SECURITY_ERR","",""],[17,"NETWORK_ERR","",""],[17,"ABORT_ERR","",""],[17,"URL_MISMATCH_ERR","",""],[17,"QUOTA_EXCEEDED_ERR","",""],[17,"TIMEOUT_ERR","",""],[17,"INVALID_NODE_TYPE_ERR","",""],[17,"DATA_CLONE_ERR","",""],[7,"sNativePropertyHooks","script::dom::bindings::codegen::Bindings::DOMExceptionBinding",""],[8,"DOMExceptionMethods","",""],[10,"Code","","",110],[10,"Name","","",110],[10,"Message","","",110],[0,"DOMImplementationBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::DOMImplementationBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"DOMImplementationMethods","",""],[10,"HasFeature","","",111],[10,"CreateDocumentType","","",111],[10,"CreateDocument","","",111],[10,"CreateHTMLDocument","","",111],[0,"DOMParserBinding","script::dom::bindings::codegen::Bindings",""],[4,"SupportedType","script::dom::bindings::codegen::Bindings::DOMParserBinding",""],[13,"Text_html","","",112],[13,"Text_xml","","",112],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[0,"SupportedTypeValues","",""],[17,"strings","script::dom::bindings::codegen::Bindings::DOMParserBinding::SupportedTypeValues",""],[11,"to_jsval","script::dom::bindings::codegen::Bindings::DOMParserBinding","",112],[7,"sNativePropertyHooks","",""],[8,"DOMParserMethods","",""],[10,"ParseFromString","","",113],[11,"trace","","",112],[11,"eq","","",112],[11,"ne","","",112],[0,"DOMRectBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::DOMRectBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"DOMRectMethods","",""],[10,"Top","","",114],[10,"Right","","",114],[10,"Bottom","","",114],[10,"Left","","",114],[10,"Width","","",114],[10,"Height","","",114],[0,"DOMRectListBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::DOMRectListBinding",""],[5,"DefineProxyHandler","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"DOMRectListMethods","",""],[10,"Length","","",115],[10,"Item","","",115],[10,"IndexedGetter","","",115],[0,"DOMStringMapBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::DOMStringMapBinding",""],[5,"DefineDOMInterface","",""],[5,"DefineProxyHandler","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"DOMStringMapMethods","",""],[10,"NamedCreator","","",116],[10,"NamedDeleter","","",116],[10,"NamedSetter","","",116],[10,"NamedGetter","","",116],[0,"DOMTokenListBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::DOMTokenListBinding",""],[5,"DefineDOMInterface","",""],[5,"DefineProxyHandler","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"DOMTokenListMethods","",""],[10,"Length","","",117],[10,"Item","","",117],[10,"Contains","","",117],[10,"Add","","",117],[10,"Remove","","",117],[10,"Toggle","","",117],[10,"IndexedGetter","","",117],[0,"DedicatedWorkerGlobalScopeBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::DedicatedWorkerGlobalScopeBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"DedicatedWorkerGlobalScopeMethods","",""],[10,"PostMessage","","",118],[10,"GetOnmessage","","",118],[10,"SetOnmessage","","",118],[0,"DocumentBinding","script::dom::bindings::codegen::Bindings",""],[4,"DocumentReadyState","script::dom::bindings::codegen::Bindings::DocumentBinding",""],[13,"Loading","","",119],[13,"Interactive","","",119],[13,"Complete","","",119],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[0,"DocumentReadyStateValues","",""],[17,"strings","script::dom::bindings::codegen::Bindings::DocumentBinding::DocumentReadyStateValues",""],[11,"to_jsval","script::dom::bindings::codegen::Bindings::DocumentBinding","",119],[7,"sNativePropertyHooks","",""],[8,"DocumentMethods","",""],[10,"Implementation","","",120],[10,"URL","","",120],[10,"GetActiveElement","","",120],[10,"DocumentURI","","",120],[10,"CompatMode","","",120],[10,"CharacterSet","","",120],[10,"InputEncoding","","",120],[10,"ContentType","","",120],[10,"GetDoctype","","",120],[10,"GetDocumentElement","","",120],[10,"GetElementsByTagName","","",120],[10,"GetElementsByTagNameNS","","",120],[10,"GetElementsByClassName","","",120],[10,"GetElementById","","",120],[10,"CreateElement","","",120],[10,"CreateElementNS","","",120],[10,"CreateDocumentFragment","","",120],[10,"CreateTextNode","","",120],[10,"CreateComment","","",120],[10,"CreateProcessingInstruction","","",120],[10,"CreateAttribute","","",120],[10,"ImportNode","","",120],[10,"AdoptNode","","",120],[10,"CreateEvent","","",120],[10,"CreateRange","","",120],[10,"CreateTreeWalker","","",120],[10,"ReadyState","","",120],[10,"LastModified","","",120],[10,"Location","","",120],[10,"GetCookie","","",120],[10,"SetCookie","","",120],[10,"Title","","",120],[10,"SetTitle","","",120],[10,"GetBody","","",120],[10,"SetBody","","",120],[10,"GetHead","","",120],[10,"Images","","",120],[10,"Embeds","","",120],[10,"Plugins","","",120],[10,"Links","","",120],[10,"Forms","","",120],[10,"Scripts","","",120],[10,"Anchors","","",120],[10,"Applets","","",120],[10,"GetElementsByName","","",120],[10,"GetCurrentScript","","",120],[10,"GetOnreadystatechange","","",120],[10,"SetOnreadystatechange","","",120],[10,"DefaultView","","",120],[10,"GetOnclick","","",120],[10,"SetOnclick","","",120],[10,"GetOnload","","",120],[10,"SetOnload","","",120],[10,"GetOninput","","",120],[10,"SetOninput","","",120],[10,"GetOnchange","","",120],[10,"SetOnchange","","",120],[10,"GetOnsubmit","","",120],[10,"SetOnsubmit","","",120],[10,"Children","","",120],[10,"QuerySelector","","",120],[10,"QuerySelectorAll","","",120],[11,"trace","","",119],[11,"eq","","",119],[11,"ne","","",119],[0,"DocumentFragmentBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::DocumentFragmentBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"DocumentFragmentMethods","",""],[10,"Children","","",121],[10,"QuerySelector","","",121],[10,"QuerySelectorAll","","",121],[0,"DocumentTypeBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::DocumentTypeBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"DocumentTypeMethods","",""],[10,"Name","","",122],[10,"PublicId","","",122],[10,"SystemId","","",122],[10,"Remove","","",122],[0,"ElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::ElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"ElementMethods","",""],[10,"GetPrefix","","",123],[10,"LocalName","","",123],[10,"GetNamespaceURI","","",123],[10,"TagName","","",123],[10,"Id","","",123],[10,"SetId","","",123],[10,"ClassName","","",123],[10,"SetClassName","","",123],[10,"ClassList","","",123],[10,"Attributes","","",123],[10,"GetAttribute","","",123],[10,"GetAttributeNS","","",123],[10,"SetAttribute","","",123],[10,"SetAttributeNS","","",123],[10,"RemoveAttribute","","",123],[10,"RemoveAttributeNS","","",123],[10,"HasAttribute","","",123],[10,"HasAttributeNS","","",123],[10,"Closest","","",123],[10,"Matches","","",123],[10,"GetElementsByTagName","","",123],[10,"GetElementsByTagNameNS","","",123],[10,"GetElementsByClassName","","",123],[10,"GetClientRects","","",123],[10,"GetBoundingClientRect","","",123],[10,"GetInnerHTML","","",123],[10,"SetInnerHTML","","",123],[10,"GetOuterHTML","","",123],[10,"Remove","","",123],[10,"Children","","",123],[10,"QuerySelector","","",123],[10,"QuerySelectorAll","","",123],[0,"ErrorEventBinding","script::dom::bindings::codegen::Bindings",""],[3,"ErrorEventInit","script::dom::bindings::codegen::Bindings::ErrorEventBinding",""],[12,"parent","","",124],[12,"colno","","",124],[12,"error","","",124],[12,"filename","","",124],[12,"lineno","","",124],[12,"message","","",124],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"ErrorEventMethods","",""],[10,"Message","","",125],[10,"Filename","","",125],[10,"Lineno","","",125],[10,"Colno","","",125],[10,"Error","","",125],[11,"empty","","",124],[11,"new","","",124],[0,"EventBinding","script::dom::bindings::codegen::Bindings",""],[3,"EventInit","script::dom::bindings::codegen::Bindings::EventBinding",""],[12,"bubbles","","",126],[12,"cancelable","","",126],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[0,"EventConstants","",""],[17,"NONE","script::dom::bindings::codegen::Bindings::EventBinding::EventConstants",""],[17,"CAPTURING_PHASE","",""],[17,"AT_TARGET","",""],[17,"BUBBLING_PHASE","",""],[7,"sNativePropertyHooks","script::dom::bindings::codegen::Bindings::EventBinding",""],[8,"EventMethods","",""],[10,"Type","","",127],[10,"GetTarget","","",127],[10,"GetCurrentTarget","","",127],[10,"EventPhase","","",127],[10,"StopPropagation","","",127],[10,"StopImmediatePropagation","","",127],[10,"Bubbles","","",127],[10,"Cancelable","","",127],[10,"PreventDefault","","",127],[10,"DefaultPrevented","","",127],[10,"IsTrusted","","",127],[10,"TimeStamp","","",127],[10,"InitEvent","","",127],[11,"empty","","",126],[11,"new","","",126],[0,"EventHandlerBinding","script::dom::bindings::codegen::Bindings",""],[3,"EventHandlerNonNull","script::dom::bindings::codegen::Bindings::EventHandlerBinding",""],[12,"parent","","",128],[3,"OnErrorEventHandlerNonNull","",""],[12,"parent","","",129],[11,"trace","","",128],[11,"clone","","",128],[11,"eq","","",128],[11,"ne","","",128],[11,"new","","",128],[11,"Call_","","",128],[11,"Call__","","",128],[11,"new","","",128],[11,"callback","","",128],[11,"to_jsval","","",128],[11,"trace","","",129],[11,"clone","","",129],[11,"eq","","",129],[11,"ne","","",129],[11,"new","","",129],[11,"Call_","","",129],[11,"Call__","","",129],[11,"new","","",129],[11,"callback","","",129],[11,"to_jsval","","",129],[0,"EventListenerBinding","script::dom::bindings::codegen::Bindings",""],[3,"EventListener","script::dom::bindings::codegen::Bindings::EventListenerBinding",""],[12,"parent","","",130],[11,"trace","","",130],[11,"clone","","",130],[11,"eq","","",130],[11,"ne","","",130],[11,"new","","",130],[11,"HandleEvent_","","",130],[11,"HandleEvent__","","",130],[11,"new","","",130],[11,"callback","","",130],[11,"to_jsval","","",130],[0,"EventTargetBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::EventTargetBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"EventTargetMethods","",""],[10,"AddEventListener","","",131],[10,"RemoveEventListener","","",131],[10,"DispatchEvent","","",131],[0,"FileBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::FileBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"FileMethods","",""],[10,"Name","","",132],[0,"FormDataBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::FormDataBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"FormDataMethods","",""],[10,"Append","","",133],[10,"Append_","","",133],[10,"Delete","","",133],[10,"Get","","",133],[10,"Has","","",133],[10,"Set","","",133],[10,"Set_","","",133],[0,"FunctionBinding","script::dom::bindings::codegen::Bindings",""],[3,"Function","script::dom::bindings::codegen::Bindings::FunctionBinding",""],[12,"parent","","",134],[11,"trace","","",134],[11,"clone","","",134],[11,"eq","","",134],[11,"ne","","",134],[11,"new","","",134],[11,"Call_","","",134],[11,"Call__","","",134],[11,"new","","",134],[11,"callback","","",134],[11,"to_jsval","","",134],[0,"HTMLAnchorElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLAnchorElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLAnchorElementMethods","",""],[10,"RelList","","",135],[10,"Text","","",135],[10,"SetText","","",135],[0,"HTMLAppletElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLAppletElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLAreaElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLAreaElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLAreaElementMethods","",""],[10,"RelList","","",136],[0,"HTMLAudioElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLAudioElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLBRElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLBRElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLBaseElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLBaseElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLBodyElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLBodyElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLBodyElementMethods","",""],[10,"GetOnunload","","",137],[10,"SetOnunload","","",137],[0,"HTMLButtonElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLButtonElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLButtonElementMethods","",""],[10,"Disabled","","",138],[10,"SetDisabled","","",138],[10,"FormAction","","",138],[10,"SetFormAction","","",138],[10,"FormEnctype","","",138],[10,"SetFormEnctype","","",138],[10,"FormMethod","","",138],[10,"SetFormMethod","","",138],[10,"FormTarget","","",138],[10,"SetFormTarget","","",138],[10,"Type","","",138],[10,"SetType","","",138],[10,"Validity","","",138],[0,"HTMLCanvasElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLCanvasElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLCanvasElementMethods","",""],[10,"Width","","",139],[10,"SetWidth","","",139],[10,"Height","","",139],[10,"SetHeight","","",139],[10,"GetContext","","",139],[0,"HTMLCollectionBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLCollectionBinding",""],[5,"DefineDOMInterface","",""],[5,"DefineProxyHandler","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLCollectionMethods","",""],[10,"Length","","",140],[10,"Item","","",140],[10,"NamedItem","","",140],[10,"IndexedGetter","","",140],[10,"NamedGetter","","",140],[0,"HTMLDListElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLDListElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLDataElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLDataElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLDataListElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLDataListElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLDataListElementMethods","",""],[10,"Options","","",141],[0,"HTMLDirectoryElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLDirectoryElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLDivElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLDivElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLElementMethods","",""],[10,"Title","","",142],[10,"SetTitle","","",142],[10,"Lang","","",142],[10,"SetLang","","",142],[10,"Dataset","","",142],[10,"Hidden","","",142],[10,"SetHidden","","",142],[10,"Click","","",142],[10,"Style","","",142],[10,"GetOnclick","","",142],[10,"SetOnclick","","",142],[10,"GetOnload","","",142],[10,"SetOnload","","",142],[10,"GetOninput","","",142],[10,"SetOninput","","",142],[10,"GetOnchange","","",142],[10,"SetOnchange","","",142],[10,"GetOnsubmit","","",142],[10,"SetOnsubmit","","",142],[0,"HTMLEmbedElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLEmbedElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLFieldSetElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLFieldSetElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLFieldSetElementMethods","",""],[10,"Disabled","","",143],[10,"SetDisabled","","",143],[10,"Elements","","",143],[10,"Validity","","",143],[0,"HTMLFontElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLFontElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLFormElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLFormElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLFormElementMethods","",""],[10,"AcceptCharset","","",144],[10,"SetAcceptCharset","","",144],[10,"Action","","",144],[10,"SetAction","","",144],[10,"Autocomplete","","",144],[10,"SetAutocomplete","","",144],[10,"Enctype","","",144],[10,"SetEnctype","","",144],[10,"Encoding","","",144],[10,"SetEncoding","","",144],[10,"Method","","",144],[10,"SetMethod","","",144],[10,"Name","","",144],[10,"SetName","","",144],[10,"NoValidate","","",144],[10,"SetNoValidate","","",144],[10,"Target","","",144],[10,"SetTarget","","",144],[10,"Submit","","",144],[10,"Reset","","",144],[0,"HTMLFrameElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLFrameElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLFrameSetElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLFrameSetElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLHRElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLHRElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLHeadElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLHeadElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLHeadingElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLHeadingElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLHtmlElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLHtmlElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLIFrameElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLIFrameElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLIFrameElementMethods","",""],[10,"Src","","",145],[10,"SetSrc","","",145],[10,"Sandbox","","",145],[10,"SetSandbox","","",145],[10,"GetContentDocument","","",145],[10,"GetContentWindow","","",145],[10,"Mozbrowser","","",145],[10,"SetMozbrowser","","",145],[10,"GoBack","","",145],[10,"GoForward","","",145],[10,"Reload","","",145],[10,"Stop","","",145],[0,"HTMLImageElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLImageElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLImageElementMethods","",""],[10,"Alt","","",146],[10,"SetAlt","","",146],[10,"Src","","",146],[10,"SetSrc","","",146],[10,"UseMap","","",146],[10,"SetUseMap","","",146],[10,"IsMap","","",146],[10,"SetIsMap","","",146],[10,"Width","","",146],[10,"SetWidth","","",146],[10,"Height","","",146],[10,"SetHeight","","",146],[10,"Name","","",146],[10,"SetName","","",146],[10,"Align","","",146],[10,"SetAlign","","",146],[10,"Hspace","","",146],[10,"SetHspace","","",146],[10,"Vspace","","",146],[10,"SetVspace","","",146],[10,"LongDesc","","",146],[10,"SetLongDesc","","",146],[10,"Border","","",146],[10,"SetBorder","","",146],[0,"HTMLInputElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLInputElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLInputElementMethods","",""],[10,"DefaultChecked","","",147],[10,"SetDefaultChecked","","",147],[10,"Checked","","",147],[10,"SetChecked","","",147],[10,"Disabled","","",147],[10,"SetDisabled","","",147],[10,"FormAction","","",147],[10,"SetFormAction","","",147],[10,"FormEnctype","","",147],[10,"SetFormEnctype","","",147],[10,"FormMethod","","",147],[10,"SetFormMethod","","",147],[10,"FormTarget","","",147],[10,"SetFormTarget","","",147],[10,"Indeterminate","","",147],[10,"SetIndeterminate","","",147],[10,"Name","","",147],[10,"SetName","","",147],[10,"ReadOnly","","",147],[10,"SetReadOnly","","",147],[10,"Size","","",147],[10,"SetSize","","",147],[10,"Type","","",147],[10,"SetType","","",147],[10,"DefaultValue","","",147],[10,"SetDefaultValue","","",147],[10,"Value","","",147],[10,"SetValue","","",147],[0,"HTMLLIElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLLIElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLLabelElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLLabelElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLLegendElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLLegendElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLLinkElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLLinkElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLLinkElementMethods","",""],[10,"Href","","",148],[10,"SetHref","","",148],[10,"Rel","","",148],[10,"SetRel","","",148],[10,"RelList","","",148],[10,"Media","","",148],[10,"SetMedia","","",148],[10,"Hreflang","","",148],[10,"SetHreflang","","",148],[10,"Type","","",148],[10,"SetType","","",148],[0,"HTMLMapElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLMapElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLMediaElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLMediaElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLMetaElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLMetaElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLMeterElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLMeterElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLModElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLModElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLOListElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLOListElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLObjectElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLObjectElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLObjectElementMethods","",""],[10,"Type","","",149],[10,"SetType","","",149],[10,"Validity","","",149],[0,"HTMLOptGroupElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLOptGroupElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLOptGroupElementMethods","",""],[10,"Disabled","","",150],[10,"SetDisabled","","",150],[0,"HTMLOptionElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLOptionElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLOptionElementMethods","",""],[10,"Disabled","","",151],[10,"SetDisabled","","",151],[10,"Label","","",151],[10,"SetLabel","","",151],[10,"Value","","",151],[10,"SetValue","","",151],[10,"Text","","",151],[10,"SetText","","",151],[0,"HTMLOutputElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLOutputElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLOutputElementMethods","",""],[10,"Validity","","",152],[0,"HTMLParagraphElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLParagraphElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLParamElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLParamElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLPreElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLPreElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLProgressElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLProgressElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLQuoteElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLQuoteElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLScriptElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLScriptElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLScriptElementMethods","",""],[10,"Src","","",153],[10,"SetSrc","","",153],[10,"Text","","",153],[10,"SetText","","",153],[0,"HTMLSelectElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLSelectElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLSelectElementMethods","",""],[10,"Disabled","","",154],[10,"SetDisabled","","",154],[10,"Type","","",154],[10,"Add","","",154],[10,"Validity","","",154],[0,"HTMLSourceElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLSourceElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLSpanElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLSpanElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLStyleElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLStyleElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLTableCaptionElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLTableCaptionElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLTableCellElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLTableCellElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLTableColElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLTableColElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLTableDataCellElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLTableDataCellElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLTableElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLTableElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLTableElementMethods","",""],[10,"GetCaption","","",155],[10,"SetCaption","","",155],[0,"HTMLTableHeaderCellElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLTableHeaderCellElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLTableRowElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLTableRowElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLTableSectionElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLTableSectionElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLTemplateElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLTemplateElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLTextAreaElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLTextAreaElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLTextAreaElementMethods","",""],[10,"Cols","","",156],[10,"SetCols","","",156],[10,"Disabled","","",156],[10,"SetDisabled","","",156],[10,"Name","","",156],[10,"SetName","","",156],[10,"Placeholder","","",156],[10,"SetPlaceholder","","",156],[10,"ReadOnly","","",156],[10,"SetReadOnly","","",156],[10,"Required","","",156],[10,"SetRequired","","",156],[10,"Rows","","",156],[10,"SetRows","","",156],[10,"Wrap","","",156],[10,"SetWrap","","",156],[10,"Type","","",156],[10,"DefaultValue","","",156],[10,"SetDefaultValue","","",156],[10,"Value","","",156],[10,"SetValue","","",156],[0,"HTMLTimeElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLTimeElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLTitleElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLTitleElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"HTMLTitleElementMethods","",""],[10,"Text","","",157],[10,"SetText","","",157],[0,"HTMLTrackElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLTrackElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLUListElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLUListElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLUnknownElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLUnknownElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"HTMLVideoElementBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::HTMLVideoElementBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"ImageDataBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::ImageDataBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"ImageDataMethods","",""],[10,"Width","","",158],[10,"Height","","",158],[10,"Data","","",158],[0,"KeyboardEventBinding","script::dom::bindings::codegen::Bindings",""],[3,"KeyboardEventInit","script::dom::bindings::codegen::Bindings::KeyboardEventBinding",""],[12,"parent","","",159],[12,"code","","",159],[12,"isComposing","","",159],[12,"key","","",159],[12,"location","","",159],[12,"repeat","","",159],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[0,"KeyboardEventConstants","",""],[17,"DOM_KEY_LOCATION_STANDARD","script::dom::bindings::codegen::Bindings::KeyboardEventBinding::KeyboardEventConstants",""],[17,"DOM_KEY_LOCATION_LEFT","",""],[17,"DOM_KEY_LOCATION_RIGHT","",""],[17,"DOM_KEY_LOCATION_NUMPAD","",""],[7,"sNativePropertyHooks","script::dom::bindings::codegen::Bindings::KeyboardEventBinding",""],[8,"KeyboardEventMethods","",""],[10,"Key","","",160],[10,"Code","","",160],[10,"Location","","",160],[10,"CtrlKey","","",160],[10,"ShiftKey","","",160],[10,"AltKey","","",160],[10,"MetaKey","","",160],[10,"Repeat","","",160],[10,"IsComposing","","",160],[10,"GetModifierState","","",160],[10,"InitKeyboardEvent","","",160],[10,"CharCode","","",160],[10,"KeyCode","","",160],[10,"Which","","",160],[11,"empty","","",159],[11,"new","","",159],[0,"LocationBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::LocationBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"LocationMethods","",""],[10,"Assign","","",161],[10,"Href","","",161],[10,"Search","","",161],[10,"Hash","","",161],[10,"Stringify","","",161],[0,"MessageEventBinding","script::dom::bindings::codegen::Bindings",""],[3,"MessageEventInit","script::dom::bindings::codegen::Bindings::MessageEventBinding",""],[12,"parent","","",162],[12,"data","","",162],[12,"lastEventId","","",162],[12,"origin","","",162],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"MessageEventMethods","",""],[10,"Data","","",163],[10,"Origin","","",163],[10,"LastEventId","","",163],[11,"empty","","",162],[11,"new","","",162],[0,"MouseEventBinding","script::dom::bindings::codegen::Bindings",""],[3,"MouseEventInit","script::dom::bindings::codegen::Bindings::MouseEventBinding",""],[12,"parent","","",164],[12,"button","","",164],[12,"clientX","","",164],[12,"clientY","","",164],[12,"relatedTarget","","",164],[12,"screenX","","",164],[12,"screenY","","",164],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"MouseEventMethods","",""],[10,"ScreenX","","",165],[10,"ScreenY","","",165],[10,"ClientX","","",165],[10,"ClientY","","",165],[10,"CtrlKey","","",165],[10,"ShiftKey","","",165],[10,"AltKey","","",165],[10,"MetaKey","","",165],[10,"Button","","",165],[10,"GetRelatedTarget","","",165],[10,"InitMouseEvent","","",165],[11,"empty","","",164],[11,"new","","",164],[0,"NamedNodeMapBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::NamedNodeMapBinding",""],[5,"DefineDOMInterface","",""],[5,"DefineProxyHandler","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"NamedNodeMapMethods","",""],[10,"Length","","",166],[10,"Item","","",166],[10,"IndexedGetter","","",166],[0,"NavigatorBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::NavigatorBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"NavigatorMethods","",""],[10,"AppCodeName","","",167],[10,"AppName","","",167],[10,"AppVersion","","",167],[10,"Platform","","",167],[10,"Product","","",167],[10,"TaintEnabled","","",167],[10,"UserAgent","","",167],[0,"NodeBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::NodeBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[0,"NodeConstants","",""],[17,"ELEMENT_NODE","script::dom::bindings::codegen::Bindings::NodeBinding::NodeConstants",""],[17,"ATTRIBUTE_NODE","",""],[17,"TEXT_NODE","",""],[17,"CDATA_SECTION_NODE","",""],[17,"ENTITY_REFERENCE_NODE","",""],[17,"ENTITY_NODE","",""],[17,"PROCESSING_INSTRUCTION_NODE","",""],[17,"COMMENT_NODE","",""],[17,"DOCUMENT_NODE","",""],[17,"DOCUMENT_TYPE_NODE","",""],[17,"DOCUMENT_FRAGMENT_NODE","",""],[17,"NOTATION_NODE","",""],[17,"DOCUMENT_POSITION_DISCONNECTED","",""],[17,"DOCUMENT_POSITION_PRECEDING","",""],[17,"DOCUMENT_POSITION_FOLLOWING","",""],[17,"DOCUMENT_POSITION_CONTAINS","",""],[17,"DOCUMENT_POSITION_CONTAINED_BY","",""],[17,"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","",""],[7,"sNativePropertyHooks","script::dom::bindings::codegen::Bindings::NodeBinding",""],[8,"NodeMethods","",""],[10,"NodeType","","",168],[10,"NodeName","","",168],[10,"GetBaseURI","","",168],[10,"GetOwnerDocument","","",168],[10,"GetParentNode","","",168],[10,"GetParentElement","","",168],[10,"HasChildNodes","","",168],[10,"ChildNodes","","",168],[10,"GetFirstChild","","",168],[10,"GetLastChild","","",168],[10,"GetPreviousSibling","","",168],[10,"GetNextSibling","","",168],[10,"GetNodeValue","","",168],[10,"SetNodeValue","","",168],[10,"GetTextContent","","",168],[10,"SetTextContent","","",168],[10,"Normalize","","",168],[10,"CloneNode","","",168],[10,"IsEqualNode","","",168],[10,"CompareDocumentPosition","","",168],[10,"Contains","","",168],[10,"LookupPrefix","","",168],[10,"LookupNamespaceURI","","",168],[10,"IsDefaultNamespace","","",168],[10,"InsertBefore","","",168],[10,"AppendChild","","",168],[10,"ReplaceChild","","",168],[10,"RemoveChild","","",168],[0,"NodeFilterBinding","script::dom::bindings::codegen::Bindings",""],[3,"NodeFilter","script::dom::bindings::codegen::Bindings::NodeFilterBinding",""],[12,"parent","","",169],[11,"trace","","",169],[11,"clone","","",169],[11,"eq","","",169],[11,"ne","","",169],[11,"new","","",169],[11,"AcceptNode_","","",169],[11,"AcceptNode__","","",169],[11,"new","","",169],[11,"callback","","",169],[11,"to_jsval","","",169],[0,"NodeIteratorBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::NodeIteratorBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"NodeListBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::NodeListBinding",""],[5,"DefineDOMInterface","",""],[5,"DefineProxyHandler","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"NodeListMethods","",""],[10,"Length","","",170],[10,"Item","","",170],[10,"IndexedGetter","","",170],[0,"PerformanceBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::PerformanceBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"PerformanceMethods","",""],[10,"Timing","","",171],[10,"Now","","",171],[0,"PerformanceTimingBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::PerformanceTimingBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"PerformanceTimingMethods","",""],[10,"NavigationStart","","",172],[0,"ProcessingInstructionBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::ProcessingInstructionBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"ProcessingInstructionMethods","",""],[10,"Target","","",173],[0,"ProgressEventBinding","script::dom::bindings::codegen::Bindings",""],[3,"ProgressEventInit","script::dom::bindings::codegen::Bindings::ProgressEventBinding",""],[12,"parent","","",174],[12,"lengthComputable","","",174],[12,"loaded","","",174],[12,"total","","",174],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"ProgressEventMethods","",""],[10,"LengthComputable","","",175],[10,"Loaded","","",175],[10,"Total","","",175],[11,"empty","","",174],[11,"new","","",174],[0,"RangeBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::RangeBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"RangeMethods","",""],[10,"Detach","","",176],[0,"ScreenBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::ScreenBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"ScreenMethods","",""],[10,"ColorDepth","","",177],[10,"PixelDepth","","",177],[0,"ServoHTMLParserBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::ServoHTMLParserBinding",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"SharedMouseAndKeyboardEventInitBinding","script::dom::bindings::codegen::Bindings",""],[3,"SharedKeyboardAndMouseEventInit","script::dom::bindings::codegen::Bindings::SharedMouseAndKeyboardEventInitBinding",""],[12,"parent","","",178],[12,"altKey","","",178],[12,"ctrlKey","","",178],[12,"keyModifierStateAltGraph","","",178],[12,"keyModifierStateCapsLock","","",178],[12,"keyModifierStateFn","","",178],[12,"keyModifierStateFnLock","","",178],[12,"keyModifierStateHyper","","",178],[12,"keyModifierStateNumLock","","",178],[12,"keyModifierStateOS","","",178],[12,"keyModifierStateScrollLock","","",178],[12,"keyModifierStateSuper","","",178],[12,"keyModifierStateSymbol","","",178],[12,"keyModifierStateSymbolLock","","",178],[12,"metaKey","","",178],[12,"shiftKey","","",178],[11,"empty","","",178],[11,"new","","",178],[0,"StorageBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::StorageBinding",""],[5,"DefineDOMInterface","",""],[5,"DefineProxyHandler","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"StorageMethods","",""],[10,"Length","","",179],[10,"Key","","",179],[10,"GetItem","","",179],[10,"SetItem","","",179],[10,"RemoveItem","","",179],[10,"Clear","","",179],[10,"NamedCreator","","",179],[10,"NamedDeleter","","",179],[10,"NamedSetter","","",179],[10,"NamedGetter","","",179],[0,"StorageEventBinding","script::dom::bindings::codegen::Bindings",""],[3,"StorageEventInit","script::dom::bindings::codegen::Bindings::StorageEventBinding",""],[12,"parent","","",180],[12,"key","","",180],[12,"newValue","","",180],[12,"oldValue","","",180],[12,"storageArea","","",180],[12,"url","","",180],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"StorageEventMethods","",""],[10,"GetKey","","",181],[10,"GetOldValue","","",181],[10,"GetNewValue","","",181],[10,"Url","","",181],[10,"GetStorageArea","","",181],[11,"empty","","",180],[11,"new","","",180],[0,"TestBindingBinding","script::dom::bindings::codegen::Bindings",""],[3,"TestDictionary","script::dom::bindings::codegen::Bindings::TestBindingBinding",""],[12,"anyValue","","",182],[12,"booleanValue","","",182],[12,"byteValue","","",182],[12,"doubleValue","","",182],[12,"enumValue","","",182],[12,"floatValue","","",182],[12,"interfaceValue","","",182],[12,"longLongValue","","",182],[12,"longValue","","",182],[12,"octetValue","","",182],[12,"shortValue","","",182],[12,"stringValue","","",182],[12,"unrestrictedDoubleValue","","",182],[12,"unrestrictedFloatValue","","",182],[12,"unsignedLongLongValue","","",182],[12,"unsignedLongValue","","",182],[12,"unsignedShortValue","","",182],[12,"usvstringValue","","",182],[3,"TestDictionaryDefaults","",""],[12,"anyValue","","",183],[12,"booleanValue","","",183],[12,"byteValue","","",183],[12,"enumValue","","",183],[12,"longLongValue","","",183],[12,"longValue","","",183],[12,"nullableBooleanValue","","",183],[12,"nullableByteValue","","",183],[12,"nullableLongLongValue","","",183],[12,"nullableLongValue","","",183],[12,"nullableOctetValue","","",183],[12,"nullableShortValue","","",183],[12,"nullableStringValue","","",183],[12,"nullableUnsignedLongLongValue","","",183],[12,"nullableUnsignedLongValue","","",183],[12,"nullableUnsignedShortValue","","",183],[12,"nullableUsvstringValue","","",183],[12,"octetValue","","",183],[12,"shortValue","","",183],[12,"stringValue","","",183],[12,"unsignedLongLongValue","","",183],[12,"unsignedLongValue","","",183],[12,"unsignedShortValue","","",183],[12,"usvstringValue","","",183],[4,"TestEnum","",""],[13,"_empty","","",184],[13,"Foo","","",184],[13,"Bar","","",184],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[0,"TestEnumValues","",""],[17,"strings","script::dom::bindings::codegen::Bindings::TestBindingBinding::TestEnumValues",""],[11,"to_jsval","script::dom::bindings::codegen::Bindings::TestBindingBinding","",184],[7,"sNativePropertyHooks","",""],[8,"TestBindingMethods","",""],[10,"BooleanAttribute","","",185],[10,"SetBooleanAttribute","","",185],[10,"ByteAttribute","","",185],[10,"SetByteAttribute","","",185],[10,"OctetAttribute","","",185],[10,"SetOctetAttribute","","",185],[10,"ShortAttribute","","",185],[10,"SetShortAttribute","","",185],[10,"UnsignedShortAttribute","","",185],[10,"SetUnsignedShortAttribute","","",185],[10,"LongAttribute","","",185],[10,"SetLongAttribute","","",185],[10,"UnsignedLongAttribute","","",185],[10,"SetUnsignedLongAttribute","","",185],[10,"LongLongAttribute","","",185],[10,"SetLongLongAttribute","","",185],[10,"UnsignedLongLongAttribute","","",185],[10,"SetUnsignedLongLongAttribute","","",185],[10,"UnrestrictedFloatAttribute","","",185],[10,"SetUnrestrictedFloatAttribute","","",185],[10,"FloatAttribute","","",185],[10,"SetFloatAttribute","","",185],[10,"UnrestrictedDoubleAttribute","","",185],[10,"SetUnrestrictedDoubleAttribute","","",185],[10,"DoubleAttribute","","",185],[10,"SetDoubleAttribute","","",185],[10,"StringAttribute","","",185],[10,"SetStringAttribute","","",185],[10,"UsvstringAttribute","","",185],[10,"SetUsvstringAttribute","","",185],[10,"ByteStringAttribute","","",185],[10,"SetByteStringAttribute","","",185],[10,"EnumAttribute","","",185],[10,"SetEnumAttribute","","",185],[10,"InterfaceAttribute","","",185],[10,"SetInterfaceAttribute","","",185],[10,"UnionAttribute","","",185],[10,"SetUnionAttribute","","",185],[10,"Union2Attribute","","",185],[10,"SetUnion2Attribute","","",185],[10,"ArrayAttribute","","",185],[10,"AnyAttribute","","",185],[10,"SetAnyAttribute","","",185],[10,"GetBooleanAttributeNullable","","",185],[10,"SetBooleanAttributeNullable","","",185],[10,"GetByteAttributeNullable","","",185],[10,"SetByteAttributeNullable","","",185],[10,"GetOctetAttributeNullable","","",185],[10,"SetOctetAttributeNullable","","",185],[10,"GetShortAttributeNullable","","",185],[10,"SetShortAttributeNullable","","",185],[10,"GetUnsignedShortAttributeNullable","","",185],[10,"SetUnsignedShortAttributeNullable","","",185],[10,"GetLongAttributeNullable","","",185],[10,"SetLongAttributeNullable","","",185],[10,"GetUnsignedLongAttributeNullable","","",185],[10,"SetUnsignedLongAttributeNullable","","",185],[10,"GetLongLongAttributeNullable","","",185],[10,"SetLongLongAttributeNullable","","",185],[10,"GetUnsignedLongLongAttributeNullable","","",185],[10,"SetUnsignedLongLongAttributeNullable","","",185],[10,"GetUnrestrictedFloatAttributeNullable","","",185],[10,"SetUnrestrictedFloatAttributeNullable","","",185],[10,"GetFloatAttributeNullable","","",185],[10,"SetFloatAttributeNullable","","",185],[10,"GetUnrestrictedDoubleAttributeNullable","","",185],[10,"SetUnrestrictedDoubleAttributeNullable","","",185],[10,"GetDoubleAttributeNullable","","",185],[10,"SetDoubleAttributeNullable","","",185],[10,"GetStringAttributeNullable","","",185],[10,"SetStringAttributeNullable","","",185],[10,"GetUsvstringAttributeNullable","","",185],[10,"SetUsvstringAttributeNullable","","",185],[10,"GetByteStringAttributeNullable","","",185],[10,"SetByteStringAttributeNullable","","",185],[10,"GetEnumAttributeNullable","","",185],[10,"GetInterfaceAttributeNullable","","",185],[10,"SetInterfaceAttributeNullable","","",185],[10,"GetUnionAttributeNullable","","",185],[10,"SetUnionAttributeNullable","","",185],[10,"GetUnion2AttributeNullable","","",185],[10,"SetUnion2AttributeNullable","","",185],[10,"BinaryRenamedAttribute","","",185],[10,"SetBinaryRenamedAttribute","","",185],[10,"BinaryRenamedMethod","","",185],[10,"ReceiveVoid","","",185],[10,"ReceiveBoolean","","",185],[10,"ReceiveByte","","",185],[10,"ReceiveOctet","","",185],[10,"ReceiveShort","","",185],[10,"ReceiveUnsignedShort","","",185],[10,"ReceiveLong","","",185],[10,"ReceiveUnsignedLong","","",185],[10,"ReceiveLongLong","","",185],[10,"ReceiveUnsignedLongLong","","",185],[10,"ReceiveUnrestrictedFloat","","",185],[10,"ReceiveFloat","","",185],[10,"ReceiveUnrestrictedDouble","","",185],[10,"ReceiveDouble","","",185],[10,"ReceiveString","","",185],[10,"ReceiveUsvstring","","",185],[10,"ReceiveByteString","","",185],[10,"ReceiveEnum","","",185],[10,"ReceiveInterface","","",185],[10,"ReceiveAny","","",185],[10,"ReceiveUnion","","",185],[10,"ReceiveUnion2","","",185],[10,"ReceiveNullableByte","","",185],[10,"ReceiveNullableBoolean","","",185],[10,"ReceiveNullableOctet","","",185],[10,"ReceiveNullableShort","","",185],[10,"ReceiveNullableUnsignedShort","","",185],[10,"ReceiveNullableLong","","",185],[10,"ReceiveNullableUnsignedLong","","",185],[10,"ReceiveNullableLongLong","","",185],[10,"ReceiveNullableUnsignedLongLong","","",185],[10,"ReceiveNullableUnrestrictedFloat","","",185],[10,"ReceiveNullableFloat","","",185],[10,"ReceiveNullableUnrestrictedDouble","","",185],[10,"ReceiveNullableDouble","","",185],[10,"ReceiveNullableString","","",185],[10,"ReceiveNullableUsvstring","","",185],[10,"ReceiveNullableByteString","","",185],[10,"ReceiveNullableEnum","","",185],[10,"ReceiveNullableInterface","","",185],[10,"ReceiveNullableUnion","","",185],[10,"ReceiveNullableUnion2","","",185],[10,"PassBoolean","","",185],[10,"PassByte","","",185],[10,"PassOctet","","",185],[10,"PassShort","","",185],[10,"PassUnsignedShort","","",185],[10,"PassLong","","",185],[10,"PassUnsignedLong","","",185],[10,"PassLongLong","","",185],[10,"PassUnsignedLongLong","","",185],[10,"PassUnrestrictedFloat","","",185],[10,"PassFloat","","",185],[10,"PassUnrestrictedDouble","","",185],[10,"PassDouble","","",185],[10,"PassString","","",185],[10,"PassUsvstring","","",185],[10,"PassByteString","","",185],[10,"PassEnum","","",185],[10,"PassInterface","","",185],[10,"PassUnion","","",185],[10,"PassUnion2","","",185],[10,"PassUnion3","","",185],[10,"PassAny","","",185],[10,"PassCallbackFunction","","",185],[10,"PassCallbackInterface","","",185],[10,"PassNullableBoolean","","",185],[10,"PassNullableByte","","",185],[10,"PassNullableOctet","","",185],[10,"PassNullableShort","","",185],[10,"PassNullableUnsignedShort","","",185],[10,"PassNullableLong","","",185],[10,"PassNullableUnsignedLong","","",185],[10,"PassNullableLongLong","","",185],[10,"PassNullableUnsignedLongLong","","",185],[10,"PassNullableUnrestrictedFloat","","",185],[10,"PassNullableFloat","","",185],[10,"PassNullableUnrestrictedDouble","","",185],[10,"PassNullableDouble","","",185],[10,"PassNullableString","","",185],[10,"PassNullableUsvstring","","",185],[10,"PassNullableByteString","","",185],[10,"PassNullableInterface","","",185],[10,"PassNullableUnion","","",185],[10,"PassNullableUnion2","","",185],[10,"PassNullableCallbackFunction","","",185],[10,"PassNullableCallbackInterface","","",185],[10,"PassOptionalBoolean","","",185],[10,"PassOptionalByte","","",185],[10,"PassOptionalOctet","","",185],[10,"PassOptionalShort","","",185],[10,"PassOptionalUnsignedShort","","",185],[10,"PassOptionalLong","","",185],[10,"PassOptionalUnsignedLong","","",185],[10,"PassOptionalLongLong","","",185],[10,"PassOptionalUnsignedLongLong","","",185],[10,"PassOptionalUnrestrictedFloat","","",185],[10,"PassOptionalFloat","","",185],[10,"PassOptionalUnrestrictedDouble","","",185],[10,"PassOptionalDouble","","",185],[10,"PassOptionalString","","",185],[10,"PassOptionalUsvstring","","",185],[10,"PassOptionalByteString","","",185],[10,"PassOptionalEnum","","",185],[10,"PassOptionalInterface","","",185],[10,"PassOptionalUnion","","",185],[10,"PassOptionalUnion2","","",185],[10,"PassOptionalAny","","",185],[10,"PassOptionalCallbackFunction","","",185],[10,"PassOptionalCallbackInterface","","",185],[10,"PassOptionalNullableBoolean","","",185],[10,"PassOptionalNullableByte","","",185],[10,"PassOptionalNullableOctet","","",185],[10,"PassOptionalNullableShort","","",185],[10,"PassOptionalNullableUnsignedShort","","",185],[10,"PassOptionalNullableLong","","",185],[10,"PassOptionalNullableUnsignedLong","","",185],[10,"PassOptionalNullableLongLong","","",185],[10,"PassOptionalNullableUnsignedLongLong","","",185],[10,"PassOptionalNullableUnrestrictedFloat","","",185],[10,"PassOptionalNullableFloat","","",185],[10,"PassOptionalNullableUnrestrictedDouble","","",185],[10,"PassOptionalNullableDouble","","",185],[10,"PassOptionalNullableString","","",185],[10,"PassOptionalNullableUsvstring","","",185],[10,"PassOptionalNullableByteString","","",185],[10,"PassOptionalNullableInterface","","",185],[10,"PassOptionalNullableUnion","","",185],[10,"PassOptionalNullableUnion2","","",185],[10,"PassOptionalNullableCallbackFunction","","",185],[10,"PassOptionalNullableCallbackInterface","","",185],[10,"PassOptionalBooleanWithDefault","","",185],[10,"PassOptionalByteWithDefault","","",185],[10,"PassOptionalOctetWithDefault","","",185],[10,"PassOptionalShortWithDefault","","",185],[10,"PassOptionalUnsignedShortWithDefault","","",185],[10,"PassOptionalLongWithDefault","","",185],[10,"PassOptionalUnsignedLongWithDefault","","",185],[10,"PassOptionalLongLongWithDefault","","",185],[10,"PassOptionalUnsignedLongLongWithDefault","","",185],[10,"PassOptionalStringWithDefault","","",185],[10,"PassOptionalUsvstringWithDefault","","",185],[10,"PassOptionalEnumWithDefault","","",185],[10,"PassOptionalNullableBooleanWithDefault","","",185],[10,"PassOptionalNullableByteWithDefault","","",185],[10,"PassOptionalNullableOctetWithDefault","","",185],[10,"PassOptionalNullableShortWithDefault","","",185],[10,"PassOptionalNullableUnsignedShortWithDefault","","",185],[10,"PassOptionalNullableLongWithDefault","","",185],[10,"PassOptionalNullableUnsignedLongWithDefault","","",185],[10,"PassOptionalNullableLongLongWithDefault","","",185],[10,"PassOptionalNullableUnsignedLongLongWithDefault","","",185],[10,"PassOptionalNullableStringWithDefault","","",185],[10,"PassOptionalNullableUsvstringWithDefault","","",185],[10,"PassOptionalNullableByteStringWithDefault","","",185],[10,"PassOptionalNullableInterfaceWithDefault","","",185],[10,"PassOptionalNullableUnionWithDefault","","",185],[10,"PassOptionalNullableUnion2WithDefault","","",185],[10,"PassOptionalNullableCallbackInterfaceWithDefault","","",185],[10,"PassOptionalAnyWithDefault","","",185],[10,"PassOptionalNullableBooleanWithNonNullDefault","","",185],[10,"PassOptionalNullableByteWithNonNullDefault","","",185],[10,"PassOptionalNullableOctetWithNonNullDefault","","",185],[10,"PassOptionalNullableShortWithNonNullDefault","","",185],[10,"PassOptionalNullableUnsignedShortWithNonNullDefault","","",185],[10,"PassOptionalNullableLongWithNonNullDefault","","",185],[10,"PassOptionalNullableUnsignedLongWithNonNullDefault","","",185],[10,"PassOptionalNullableLongLongWithNonNullDefault","","",185],[10,"PassOptionalNullableUnsignedLongLongWithNonNullDefault","","",185],[10,"PassOptionalNullableStringWithNonNullDefault","","",185],[10,"PassOptionalNullableUsvstringWithNonNullDefault","","",185],[10,"PassVariadicBoolean","","",185],[10,"PassVariadicByte","","",185],[10,"PassVariadicOctet","","",185],[10,"PassVariadicShort","","",185],[10,"PassVariadicUnsignedShort","","",185],[10,"PassVariadicLong","","",185],[10,"PassVariadicUnsignedLong","","",185],[10,"PassVariadicLongLong","","",185],[10,"PassVariadicUnsignedLongLong","","",185],[10,"PassVariadicUnrestrictedFloat","","",185],[10,"PassVariadicFloat","","",185],[10,"PassVariadicUnrestrictedDouble","","",185],[10,"PassVariadicDouble","","",185],[10,"PassVariadicString","","",185],[10,"PassVariadicUsvstring","","",185],[10,"PassVariadicByteString","","",185],[10,"PassVariadicEnum","","",185],[10,"PassVariadicUnion","","",185],[10,"PassVariadicUnion2","","",185],[10,"PassVariadicUnion3","","",185],[10,"PassVariadicAny","","",185],[11,"trace","","",184],[11,"eq","","",184],[11,"ne","","",184],[11,"empty","","",182],[11,"new","","",182],[11,"empty","","",183],[11,"new","","",183],[0,"TextBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::TextBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"TextEncoderBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::TextEncoderBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"TextEncoderMethods","",""],[10,"Encoding","","",186],[10,"Encode","","",186],[0,"TreeWalkerBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::TreeWalkerBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"TreeWalkerMethods","",""],[10,"Root","","",187],[10,"WhatToShow","","",187],[10,"GetFilter","","",187],[10,"CurrentNode","","",187],[10,"SetCurrentNode","","",187],[10,"ParentNode","","",187],[10,"FirstChild","","",187],[10,"LastChild","","",187],[10,"PreviousSibling","","",187],[10,"NextSibling","","",187],[10,"PreviousNode","","",187],[10,"NextNode","","",187],[0,"UIEventBinding","script::dom::bindings::codegen::Bindings",""],[3,"UIEventInit","script::dom::bindings::codegen::Bindings::UIEventBinding",""],[12,"parent","","",188],[12,"detail","","",188],[12,"view","","",188],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"UIEventMethods","",""],[10,"GetView","","",189],[10,"Detail","","",189],[10,"InitUIEvent","","",189],[11,"empty","","",188],[11,"new","","",188],[0,"URLSearchParamsBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::URLSearchParamsBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"URLSearchParamsMethods","",""],[10,"Append","","",190],[10,"Delete","","",190],[10,"Get","","",190],[10,"Has","","",190],[10,"Set","","",190],[0,"ValidityStateBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::ValidityStateBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"WebSocketBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::WebSocketBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[0,"WebSocketConstants","",""],[17,"CONNECTING","script::dom::bindings::codegen::Bindings::WebSocketBinding::WebSocketConstants",""],[17,"OPEN","",""],[17,"CLOSING","",""],[17,"CLOSED","",""],[7,"sNativePropertyHooks","script::dom::bindings::codegen::Bindings::WebSocketBinding",""],[8,"WebSocketMethods","",""],[10,"Url","","",191],[0,"WindowBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::WindowBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"WindowMethods","",""],[10,"Window","","",192],[10,"Self_","","",192],[10,"Document","","",192],[10,"Location","","",192],[10,"Close","","",192],[10,"Frames","","",192],[10,"Parent","","",192],[10,"GetFrameElement","","",192],[10,"Navigator","","",192],[10,"Alert","","",192],[10,"Performance","","",192],[10,"Screen","","",192],[10,"Console","","",192],[10,"Debug","","",192],[10,"Gc","","",192],[10,"GetOnclick","","",192],[10,"SetOnclick","","",192],[10,"GetOnload","","",192],[10,"SetOnload","","",192],[10,"GetOninput","","",192],[10,"SetOninput","","",192],[10,"GetOnchange","","",192],[10,"SetOnchange","","",192],[10,"GetOnsubmit","","",192],[10,"SetOnsubmit","","",192],[10,"GetOnerror","","",192],[10,"SetOnerror","","",192],[10,"Btoa","","",192],[10,"Atob","","",192],[10,"GetOnunload","","",192],[10,"SetOnunload","","",192],[10,"LocalStorage","","",192],[10,"SessionStorage","","",192],[10,"SetTimeout","","",192],[10,"SetTimeout_","","",192],[10,"ClearTimeout","","",192],[10,"SetInterval","","",192],[10,"SetInterval_","","",192],[10,"ClearInterval","","",192],[0,"WorkerBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::WorkerBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"WorkerMethods","",""],[10,"PostMessage","","",193],[10,"GetOnmessage","","",193],[10,"SetOnmessage","","",193],[0,"WorkerGlobalScopeBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::WorkerGlobalScopeBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"WorkerGlobalScopeMethods","",""],[10,"Self_","","",194],[10,"Location","","",194],[10,"ImportScripts","","",194],[10,"Navigator","","",194],[10,"Console","","",194],[10,"Btoa","","",194],[10,"Atob","","",194],[10,"SetTimeout","","",194],[10,"SetTimeout_","","",194],[10,"ClearTimeout","","",194],[10,"SetInterval","","",194],[10,"SetInterval_","","",194],[10,"ClearInterval","","",194],[0,"WorkerLocationBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::WorkerLocationBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"WorkerLocationMethods","",""],[10,"Href","","",195],[10,"Search","","",195],[10,"Hash","","",195],[0,"WorkerNavigatorBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::WorkerNavigatorBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"WorkerNavigatorMethods","",""],[10,"AppCodeName","","",196],[10,"AppName","","",196],[10,"AppVersion","","",196],[10,"Platform","","",196],[10,"Product","","",196],[10,"TaintEnabled","","",196],[10,"UserAgent","","",196],[0,"XMLHttpRequestBinding","script::dom::bindings::codegen::Bindings",""],[4,"XMLHttpRequestResponseType","script::dom::bindings::codegen::Bindings::XMLHttpRequestBinding",""],[13,"_empty","","",197],[13,"Arraybuffer","","",197],[13,"Blob","","",197],[13,"Document","","",197],[13,"Json","","",197],[13,"Text","","",197],[5,"GetProtoObject","",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[0,"XMLHttpRequestResponseTypeValues","",""],[17,"strings","script::dom::bindings::codegen::Bindings::XMLHttpRequestBinding::XMLHttpRequestResponseTypeValues",""],[11,"to_jsval","script::dom::bindings::codegen::Bindings::XMLHttpRequestBinding","",197],[0,"XMLHttpRequestConstants","",""],[17,"UNSENT","script::dom::bindings::codegen::Bindings::XMLHttpRequestBinding::XMLHttpRequestConstants",""],[17,"OPENED","",""],[17,"HEADERS_RECEIVED","",""],[17,"LOADING","",""],[17,"DONE","",""],[7,"sNativePropertyHooks","script::dom::bindings::codegen::Bindings::XMLHttpRequestBinding",""],[8,"XMLHttpRequestMethods","",""],[10,"GetOnreadystatechange","","",198],[10,"SetOnreadystatechange","","",198],[10,"ReadyState","","",198],[10,"Open","","",198],[10,"Open_","","",198],[10,"SetRequestHeader","","",198],[10,"Timeout","","",198],[10,"SetTimeout","","",198],[10,"WithCredentials","","",198],[10,"SetWithCredentials","","",198],[10,"Upload","","",198],[10,"Send","","",198],[10,"Abort","","",198],[10,"ResponseURL","","",198],[10,"Status","","",198],[10,"StatusText","","",198],[10,"GetResponseHeader","","",198],[10,"GetAllResponseHeaders","","",198],[10,"ResponseType","","",198],[10,"SetResponseType","","",198],[10,"Response","","",198],[10,"GetResponseText","","",198],[10,"GetResponseXML","","",198],[11,"trace","","",197],[11,"eq","","",197],[11,"ne","","",197],[0,"XMLHttpRequestEventTargetBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::XMLHttpRequestEventTargetBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[8,"XMLHttpRequestEventTargetMethods","",""],[10,"GetOnloadstart","","",199],[10,"SetOnloadstart","","",199],[10,"GetOnprogress","","",199],[10,"SetOnprogress","","",199],[10,"GetOnabort","","",199],[10,"SetOnabort","","",199],[10,"GetOnerror","","",199],[10,"SetOnerror","","",199],[10,"GetOnload","","",199],[10,"SetOnload","","",199],[10,"GetOntimeout","","",199],[10,"SetOntimeout","","",199],[10,"GetOnloadend","","",199],[10,"SetOnloadend","","",199],[0,"XMLHttpRequestUploadBinding","script::dom::bindings::codegen::Bindings",""],[5,"GetProtoObject","script::dom::bindings::codegen::Bindings::XMLHttpRequestUploadBinding",""],[5,"DefineDOMInterface","",""],[5,"Wrap","",""],[7,"sNativePropertyHooks","",""],[0,"InterfaceTypes","script::dom::bindings::codegen",""],[0,"InheritTypes","",""],[3,"AttrCast","script::dom::bindings::codegen::InheritTypes",""],[3,"BlobCast","",""],[3,"CSSStyleDeclarationCast","",""],[3,"CanvasGradientCast","",""],[3,"CanvasPatternCast","",""],[3,"CanvasRenderingContext2DCast","",""],[3,"CharacterDataCast","",""],[3,"CommentCast","",""],[3,"ConsoleCast","",""],[3,"CustomEventCast","",""],[3,"DOMExceptionCast","",""],[3,"DOMImplementationCast","",""],[3,"DOMParserCast","",""],[3,"DOMRectCast","",""],[3,"DOMRectListCast","",""],[3,"DOMStringMapCast","",""],[3,"DOMTokenListCast","",""],[3,"DedicatedWorkerGlobalScopeCast","",""],[3,"DocumentCast","",""],[3,"DocumentFragmentCast","",""],[3,"DocumentTypeCast","",""],[3,"ElementCast","",""],[3,"ErrorEventCast","",""],[3,"EventCast","",""],[3,"EventTargetCast","",""],[3,"FileCast","",""],[3,"FormDataCast","",""],[3,"HTMLAnchorElementCast","",""],[3,"HTMLAppletElementCast","",""],[3,"HTMLAreaElementCast","",""],[3,"HTMLAudioElementCast","",""],[3,"HTMLBRElementCast","",""],[3,"HTMLBaseElementCast","",""],[3,"HTMLBodyElementCast","",""],[3,"HTMLButtonElementCast","",""],[3,"HTMLCanvasElementCast","",""],[3,"HTMLCollectionCast","",""],[3,"HTMLDListElementCast","",""],[3,"HTMLDataElementCast","",""],[3,"HTMLDataListElementCast","",""],[3,"HTMLDirectoryElementCast","",""],[3,"HTMLDivElementCast","",""],[3,"HTMLElementCast","",""],[3,"HTMLEmbedElementCast","",""],[3,"HTMLFieldSetElementCast","",""],[3,"HTMLFontElementCast","",""],[3,"HTMLFormElementCast","",""],[3,"HTMLFrameElementCast","",""],[3,"HTMLFrameSetElementCast","",""],[3,"HTMLHRElementCast","",""],[3,"HTMLHeadElementCast","",""],[3,"HTMLHeadingElementCast","",""],[3,"HTMLHtmlElementCast","",""],[3,"HTMLIFrameElementCast","",""],[3,"HTMLImageElementCast","",""],[3,"HTMLInputElementCast","",""],[3,"HTMLLIElementCast","",""],[3,"HTMLLabelElementCast","",""],[3,"HTMLLegendElementCast","",""],[3,"HTMLLinkElementCast","",""],[3,"HTMLMapElementCast","",""],[3,"HTMLMediaElementCast","",""],[3,"HTMLMetaElementCast","",""],[3,"HTMLMeterElementCast","",""],[3,"HTMLModElementCast","",""],[3,"HTMLOListElementCast","",""],[3,"HTMLObjectElementCast","",""],[3,"HTMLOptGroupElementCast","",""],[3,"HTMLOptionElementCast","",""],[3,"HTMLOutputElementCast","",""],[3,"HTMLParagraphElementCast","",""],[3,"HTMLParamElementCast","",""],[3,"HTMLPreElementCast","",""],[3,"HTMLProgressElementCast","",""],[3,"HTMLQuoteElementCast","",""],[3,"HTMLScriptElementCast","",""],[3,"HTMLSelectElementCast","",""],[3,"HTMLSourceElementCast","",""],[3,"HTMLSpanElementCast","",""],[3,"HTMLStyleElementCast","",""],[3,"HTMLTableCaptionElementCast","",""],[3,"HTMLTableCellElementCast","",""],[3,"HTMLTableColElementCast","",""],[3,"HTMLTableDataCellElementCast","",""],[3,"HTMLTableElementCast","",""],[3,"HTMLTableHeaderCellElementCast","",""],[3,"HTMLTableRowElementCast","",""],[3,"HTMLTableSectionElementCast","",""],[3,"HTMLTemplateElementCast","",""],[3,"HTMLTextAreaElementCast","",""],[3,"HTMLTimeElementCast","",""],[3,"HTMLTitleElementCast","",""],[3,"HTMLTrackElementCast","",""],[3,"HTMLUListElementCast","",""],[3,"HTMLUnknownElementCast","",""],[3,"HTMLVideoElementCast","",""],[3,"ImageDataCast","",""],[3,"KeyboardEventCast","",""],[3,"LocationCast","",""],[3,"MessageEventCast","",""],[3,"MouseEventCast","",""],[3,"NamedNodeMapCast","",""],[3,"NavigatorCast","",""],[3,"NodeCast","",""],[3,"NodeIteratorCast","",""],[3,"NodeListCast","",""],[3,"PerformanceCast","",""],[3,"PerformanceTimingCast","",""],[3,"ProcessingInstructionCast","",""],[3,"ProgressEventCast","",""],[3,"RangeCast","",""],[3,"ScreenCast","",""],[3,"ServoHTMLParserCast","",""],[3,"StorageCast","",""],[3,"StorageEventCast","",""],[3,"TestBindingCast","",""],[3,"TextCast","",""],[3,"TextEncoderCast","",""],[3,"TreeWalkerCast","",""],[3,"UIEventCast","",""],[3,"URLSearchParamsCast","",""],[3,"ValidityStateCast","",""],[3,"WebSocketCast","",""],[3,"WindowCast","",""],[3,"WorkerCast","",""],[3,"WorkerGlobalScopeCast","",""],[3,"WorkerLocationCast","",""],[3,"WorkerNavigatorCast","",""],[3,"XMLHttpRequestCast","",""],[3,"XMLHttpRequestEventTargetCast","",""],[3,"XMLHttpRequestUploadCast","",""],[8,"AttrBase","",""],[8,"AttrDerived","",""],[10,"is_attr","","",200],[8,"BlobBase","",""],[8,"BlobDerived","",""],[10,"is_blob","","",201],[8,"CSSStyleDeclarationBase","",""],[8,"CSSStyleDeclarationDerived","",""],[10,"is_cssstyledeclaration","","",202],[8,"CanvasGradientBase","",""],[8,"CanvasGradientDerived","",""],[10,"is_canvasgradient","","",203],[8,"CanvasPatternBase","",""],[8,"CanvasPatternDerived","",""],[10,"is_canvaspattern","","",204],[8,"CanvasRenderingContext2DBase","",""],[8,"CanvasRenderingContext2DDerived","",""],[10,"is_canvasrenderingcontext2d","","",205],[8,"CharacterDataBase","",""],[8,"CharacterDataDerived","",""],[10,"is_characterdata","","",206],[8,"CommentBase","",""],[8,"CommentDerived","",""],[10,"is_comment","","",207],[8,"ConsoleBase","",""],[8,"ConsoleDerived","",""],[10,"is_console","","",208],[8,"CustomEventBase","",""],[8,"CustomEventDerived","",""],[10,"is_customevent","","",209],[8,"DOMExceptionBase","",""],[8,"DOMExceptionDerived","",""],[10,"is_domexception","","",210],[8,"DOMImplementationBase","",""],[8,"DOMImplementationDerived","",""],[10,"is_domimplementation","","",211],[8,"DOMParserBase","",""],[8,"DOMParserDerived","",""],[10,"is_domparser","","",212],[8,"DOMRectBase","",""],[8,"DOMRectDerived","",""],[10,"is_domrect","","",213],[8,"DOMRectListBase","",""],[8,"DOMRectListDerived","",""],[10,"is_domrectlist","","",214],[8,"DOMStringMapBase","",""],[8,"DOMStringMapDerived","",""],[10,"is_domstringmap","","",215],[8,"DOMTokenListBase","",""],[8,"DOMTokenListDerived","",""],[10,"is_domtokenlist","","",216],[8,"DedicatedWorkerGlobalScopeBase","",""],[8,"DedicatedWorkerGlobalScopeDerived","",""],[10,"is_dedicatedworkerglobalscope","","",217],[8,"DocumentBase","",""],[8,"DocumentDerived","",""],[10,"is_document","","",218],[8,"DocumentFragmentBase","",""],[8,"DocumentFragmentDerived","",""],[10,"is_documentfragment","","",219],[8,"DocumentTypeBase","",""],[8,"DocumentTypeDerived","",""],[10,"is_documenttype","","",220],[8,"ElementBase","",""],[8,"ElementDerived","",""],[10,"is_element","","",221],[8,"ErrorEventBase","",""],[8,"ErrorEventDerived","",""],[10,"is_errorevent","","",222],[8,"EventBase","",""],[8,"EventDerived","",""],[10,"is_event","","",223],[8,"EventTargetBase","",""],[8,"EventTargetDerived","",""],[10,"is_eventtarget","","",224],[8,"FileBase","",""],[8,"FileDerived","",""],[10,"is_file","","",225],[8,"FormDataBase","",""],[8,"FormDataDerived","",""],[10,"is_formdata","","",226],[8,"HTMLAnchorElementBase","",""],[8,"HTMLAnchorElementDerived","",""],[10,"is_htmlanchorelement","","",227],[8,"HTMLAppletElementBase","",""],[8,"HTMLAppletElementDerived","",""],[10,"is_htmlappletelement","","",228],[8,"HTMLAreaElementBase","",""],[8,"HTMLAreaElementDerived","",""],[10,"is_htmlareaelement","","",229],[8,"HTMLAudioElementBase","",""],[8,"HTMLAudioElementDerived","",""],[10,"is_htmlaudioelement","","",230],[8,"HTMLBRElementBase","",""],[8,"HTMLBRElementDerived","",""],[10,"is_htmlbrelement","","",231],[8,"HTMLBaseElementBase","",""],[8,"HTMLBaseElementDerived","",""],[10,"is_htmlbaseelement","","",232],[8,"HTMLBodyElementBase","",""],[8,"HTMLBodyElementDerived","",""],[10,"is_htmlbodyelement","","",233],[8,"HTMLButtonElementBase","",""],[8,"HTMLButtonElementDerived","",""],[10,"is_htmlbuttonelement","","",234],[8,"HTMLCanvasElementBase","",""],[8,"HTMLCanvasElementDerived","",""],[10,"is_htmlcanvaselement","","",235],[8,"HTMLCollectionBase","",""],[8,"HTMLCollectionDerived","",""],[10,"is_htmlcollection","","",236],[8,"HTMLDListElementBase","",""],[8,"HTMLDListElementDerived","",""],[10,"is_htmldlistelement","","",237],[8,"HTMLDataElementBase","",""],[8,"HTMLDataElementDerived","",""],[10,"is_htmldataelement","","",238],[8,"HTMLDataListElementBase","",""],[8,"HTMLDataListElementDerived","",""],[10,"is_htmldatalistelement","","",239],[8,"HTMLDirectoryElementBase","",""],[8,"HTMLDirectoryElementDerived","",""],[10,"is_htmldirectoryelement","","",240],[8,"HTMLDivElementBase","",""],[8,"HTMLDivElementDerived","",""],[10,"is_htmldivelement","","",241],[8,"HTMLElementBase","",""],[8,"HTMLElementDerived","",""],[10,"is_htmlelement","","",242],[8,"HTMLEmbedElementBase","",""],[8,"HTMLEmbedElementDerived","",""],[10,"is_htmlembedelement","","",243],[8,"HTMLFieldSetElementBase","",""],[8,"HTMLFieldSetElementDerived","",""],[10,"is_htmlfieldsetelement","","",244],[8,"HTMLFontElementBase","",""],[8,"HTMLFontElementDerived","",""],[10,"is_htmlfontelement","","",245],[8,"HTMLFormElementBase","",""],[8,"HTMLFormElementDerived","",""],[10,"is_htmlformelement","","",246],[8,"HTMLFrameElementBase","",""],[8,"HTMLFrameElementDerived","",""],[10,"is_htmlframeelement","","",247],[8,"HTMLFrameSetElementBase","",""],[8,"HTMLFrameSetElementDerived","",""],[10,"is_htmlframesetelement","","",248],[8,"HTMLHRElementBase","",""],[8,"HTMLHRElementDerived","",""],[10,"is_htmlhrelement","","",249],[8,"HTMLHeadElementBase","",""],[8,"HTMLHeadElementDerived","",""],[10,"is_htmlheadelement","","",250],[8,"HTMLHeadingElementBase","",""],[8,"HTMLHeadingElementDerived","",""],[10,"is_htmlheadingelement","","",251],[8,"HTMLHtmlElementBase","",""],[8,"HTMLHtmlElementDerived","",""],[10,"is_htmlhtmlelement","","",252],[8,"HTMLIFrameElementBase","",""],[8,"HTMLIFrameElementDerived","",""],[10,"is_htmliframeelement","","",253],[8,"HTMLImageElementBase","",""],[8,"HTMLImageElementDerived","",""],[10,"is_htmlimageelement","","",254],[8,"HTMLInputElementBase","",""],[8,"HTMLInputElementDerived","",""],[10,"is_htmlinputelement","","",255],[8,"HTMLLIElementBase","",""],[8,"HTMLLIElementDerived","",""],[10,"is_htmllielement","","",256],[8,"HTMLLabelElementBase","",""],[8,"HTMLLabelElementDerived","",""],[10,"is_htmllabelelement","","",257],[8,"HTMLLegendElementBase","",""],[8,"HTMLLegendElementDerived","",""],[10,"is_htmllegendelement","","",258],[8,"HTMLLinkElementBase","",""],[8,"HTMLLinkElementDerived","",""],[10,"is_htmllinkelement","","",259],[8,"HTMLMapElementBase","",""],[8,"HTMLMapElementDerived","",""],[10,"is_htmlmapelement","","",260],[8,"HTMLMediaElementBase","",""],[8,"HTMLMediaElementDerived","",""],[10,"is_htmlmediaelement","","",261],[8,"HTMLMetaElementBase","",""],[8,"HTMLMetaElementDerived","",""],[10,"is_htmlmetaelement","","",262],[8,"HTMLMeterElementBase","",""],[8,"HTMLMeterElementDerived","",""],[10,"is_htmlmeterelement","","",263],[8,"HTMLModElementBase","",""],[8,"HTMLModElementDerived","",""],[10,"is_htmlmodelement","","",264],[8,"HTMLOListElementBase","",""],[8,"HTMLOListElementDerived","",""],[10,"is_htmlolistelement","","",265],[8,"HTMLObjectElementBase","",""],[8,"HTMLObjectElementDerived","",""],[10,"is_htmlobjectelement","","",266],[8,"HTMLOptGroupElementBase","",""],[8,"HTMLOptGroupElementDerived","",""],[10,"is_htmloptgroupelement","","",267],[8,"HTMLOptionElementBase","",""],[8,"HTMLOptionElementDerived","",""],[10,"is_htmloptionelement","","",268],[8,"HTMLOutputElementBase","",""],[8,"HTMLOutputElementDerived","",""],[10,"is_htmloutputelement","","",269],[8,"HTMLParagraphElementBase","",""],[8,"HTMLParagraphElementDerived","",""],[10,"is_htmlparagraphelement","","",270],[8,"HTMLParamElementBase","",""],[8,"HTMLParamElementDerived","",""],[10,"is_htmlparamelement","","",271],[8,"HTMLPreElementBase","",""],[8,"HTMLPreElementDerived","",""],[10,"is_htmlpreelement","","",272],[8,"HTMLProgressElementBase","",""],[8,"HTMLProgressElementDerived","",""],[10,"is_htmlprogresselement","","",273],[8,"HTMLQuoteElementBase","",""],[8,"HTMLQuoteElementDerived","",""],[10,"is_htmlquoteelement","","",274],[8,"HTMLScriptElementBase","",""],[8,"HTMLScriptElementDerived","",""],[10,"is_htmlscriptelement","","",275],[8,"HTMLSelectElementBase","",""],[8,"HTMLSelectElementDerived","",""],[10,"is_htmlselectelement","","",276],[8,"HTMLSourceElementBase","",""],[8,"HTMLSourceElementDerived","",""],[10,"is_htmlsourceelement","","",277],[8,"HTMLSpanElementBase","",""],[8,"HTMLSpanElementDerived","",""],[10,"is_htmlspanelement","","",278],[8,"HTMLStyleElementBase","",""],[8,"HTMLStyleElementDerived","",""],[10,"is_htmlstyleelement","","",279],[8,"HTMLTableCaptionElementBase","",""],[8,"HTMLTableCaptionElementDerived","",""],[10,"is_htmltablecaptionelement","","",280],[8,"HTMLTableCellElementBase","",""],[8,"HTMLTableCellElementDerived","",""],[10,"is_htmltablecellelement","","",281],[8,"HTMLTableColElementBase","",""],[8,"HTMLTableColElementDerived","",""],[10,"is_htmltablecolelement","","",282],[8,"HTMLTableDataCellElementBase","",""],[8,"HTMLTableDataCellElementDerived","",""],[10,"is_htmltabledatacellelement","","",283],[8,"HTMLTableElementBase","",""],[8,"HTMLTableElementDerived","",""],[10,"is_htmltableelement","","",284],[8,"HTMLTableHeaderCellElementBase","",""],[8,"HTMLTableHeaderCellElementDerived","",""],[10,"is_htmltableheadercellelement","","",285],[8,"HTMLTableRowElementBase","",""],[8,"HTMLTableRowElementDerived","",""],[10,"is_htmltablerowelement","","",286],[8,"HTMLTableSectionElementBase","",""],[8,"HTMLTableSectionElementDerived","",""],[10,"is_htmltablesectionelement","","",287],[8,"HTMLTemplateElementBase","",""],[8,"HTMLTemplateElementDerived","",""],[10,"is_htmltemplateelement","","",288],[8,"HTMLTextAreaElementBase","",""],[8,"HTMLTextAreaElementDerived","",""],[10,"is_htmltextareaelement","","",289],[8,"HTMLTimeElementBase","",""],[8,"HTMLTimeElementDerived","",""],[10,"is_htmltimeelement","","",290],[8,"HTMLTitleElementBase","",""],[8,"HTMLTitleElementDerived","",""],[10,"is_htmltitleelement","","",291],[8,"HTMLTrackElementBase","",""],[8,"HTMLTrackElementDerived","",""],[10,"is_htmltrackelement","","",292],[8,"HTMLUListElementBase","",""],[8,"HTMLUListElementDerived","",""],[10,"is_htmlulistelement","","",293],[8,"HTMLUnknownElementBase","",""],[8,"HTMLUnknownElementDerived","",""],[10,"is_htmlunknownelement","","",294],[8,"HTMLVideoElementBase","",""],[8,"HTMLVideoElementDerived","",""],[10,"is_htmlvideoelement","","",295],[8,"ImageDataBase","",""],[8,"ImageDataDerived","",""],[10,"is_imagedata","","",296],[8,"KeyboardEventBase","",""],[8,"KeyboardEventDerived","",""],[10,"is_keyboardevent","","",297],[8,"LocationBase","",""],[8,"LocationDerived","",""],[10,"is_location","","",298],[8,"MessageEventBase","",""],[8,"MessageEventDerived","",""],[10,"is_messageevent","","",299],[8,"MouseEventBase","",""],[8,"MouseEventDerived","",""],[10,"is_mouseevent","","",300],[8,"NamedNodeMapBase","",""],[8,"NamedNodeMapDerived","",""],[10,"is_namednodemap","","",301],[8,"NavigatorBase","",""],[8,"NavigatorDerived","",""],[10,"is_navigator","","",302],[8,"NodeBase","",""],[8,"NodeDerived","",""],[10,"is_node","","",303],[8,"NodeIteratorBase","",""],[8,"NodeIteratorDerived","",""],[10,"is_nodeiterator","","",304],[8,"NodeListBase","",""],[8,"NodeListDerived","",""],[10,"is_nodelist","","",305],[8,"PerformanceBase","",""],[8,"PerformanceDerived","",""],[10,"is_performance","","",306],[8,"PerformanceTimingBase","",""],[8,"PerformanceTimingDerived","",""],[10,"is_performancetiming","","",307],[8,"ProcessingInstructionBase","",""],[8,"ProcessingInstructionDerived","",""],[10,"is_processinginstruction","","",308],[8,"ProgressEventBase","",""],[8,"ProgressEventDerived","",""],[10,"is_progressevent","","",309],[8,"RangeBase","",""],[8,"RangeDerived","",""],[10,"is_range","","",310],[8,"ScreenBase","",""],[8,"ScreenDerived","",""],[10,"is_screen","","",311],[8,"ServoHTMLParserBase","",""],[8,"ServoHTMLParserDerived","",""],[10,"is_servohtmlparser","","",312],[8,"StorageBase","",""],[8,"StorageDerived","",""],[10,"is_storage","","",313],[8,"StorageEventBase","",""],[8,"StorageEventDerived","",""],[10,"is_storageevent","","",314],[8,"TestBindingBase","",""],[8,"TestBindingDerived","",""],[10,"is_testbinding","","",315],[8,"TextBase","",""],[8,"TextDerived","",""],[10,"is_text","","",316],[8,"TextEncoderBase","",""],[8,"TextEncoderDerived","",""],[10,"is_textencoder","","",317],[8,"TreeWalkerBase","",""],[8,"TreeWalkerDerived","",""],[10,"is_treewalker","","",318],[8,"UIEventBase","",""],[8,"UIEventDerived","",""],[10,"is_uievent","","",319],[8,"URLSearchParamsBase","",""],[8,"URLSearchParamsDerived","",""],[10,"is_urlsearchparams","","",320],[8,"ValidityStateBase","",""],[8,"ValidityStateDerived","",""],[10,"is_validitystate","","",321],[8,"WebSocketBase","",""],[8,"WebSocketDerived","",""],[10,"is_websocket","","",322],[8,"WindowBase","",""],[8,"WindowDerived","",""],[10,"is_window","","",323],[8,"WorkerBase","",""],[8,"WorkerDerived","",""],[10,"is_worker","","",324],[8,"WorkerGlobalScopeBase","",""],[8,"WorkerGlobalScopeDerived","",""],[10,"is_workerglobalscope","","",325],[8,"WorkerLocationBase","",""],[8,"WorkerLocationDerived","",""],[10,"is_workerlocation","","",326],[8,"WorkerNavigatorBase","",""],[8,"WorkerNavigatorDerived","",""],[10,"is_workernavigator","","",327],[8,"XMLHttpRequestBase","",""],[8,"XMLHttpRequestDerived","",""],[10,"is_xmlhttprequest","","",328],[8,"XMLHttpRequestEventTargetBase","",""],[8,"XMLHttpRequestEventTargetDerived","",""],[10,"is_xmlhttprequesteventtarget","","",329],[8,"XMLHttpRequestUploadBase","",""],[8,"XMLHttpRequestUploadDerived","",""],[10,"is_xmlhttprequestupload","","",330],[11,"to_ref","","",331],[11,"to_borrowed_ref","","",331],[11,"to_layout_js","","",331],[11,"from_ref","","",331],[11,"from_borrowed_ref","","",331],[11,"from_temporary","","",331],[11,"from_actual","","",331],[11,"to_ref","","",332],[11,"to_borrowed_ref","","",332],[11,"to_layout_js","","",332],[11,"from_ref","","",332],[11,"from_borrowed_ref","","",332],[11,"from_temporary","","",332],[11,"from_actual","","",332],[11,"to_ref","","",333],[11,"to_borrowed_ref","","",333],[11,"to_layout_js","","",333],[11,"from_ref","","",333],[11,"from_borrowed_ref","","",333],[11,"from_temporary","","",333],[11,"from_actual","","",333],[11,"to_ref","","",334],[11,"to_borrowed_ref","","",334],[11,"to_layout_js","","",334],[11,"from_ref","","",334],[11,"from_borrowed_ref","","",334],[11,"from_temporary","","",334],[11,"from_actual","","",334],[11,"to_ref","","",335],[11,"to_borrowed_ref","","",335],[11,"to_layout_js","","",335],[11,"from_ref","","",335],[11,"from_borrowed_ref","","",335],[11,"from_temporary","","",335],[11,"from_actual","","",335],[11,"to_ref","","",336],[11,"to_borrowed_ref","","",336],[11,"to_layout_js","","",336],[11,"from_ref","","",336],[11,"from_borrowed_ref","","",336],[11,"from_temporary","","",336],[11,"from_actual","","",336],[11,"to_ref","","",337],[11,"to_borrowed_ref","","",337],[11,"to_layout_js","","",337],[11,"from_ref","","",337],[11,"from_borrowed_ref","","",337],[11,"from_temporary","","",337],[11,"from_actual","","",337],[11,"to_ref","","",338],[11,"to_borrowed_ref","","",338],[11,"to_layout_js","","",338],[11,"from_ref","","",338],[11,"from_borrowed_ref","","",338],[11,"from_temporary","","",338],[11,"from_actual","","",338],[11,"to_ref","","",339],[11,"to_borrowed_ref","","",339],[11,"to_layout_js","","",339],[11,"from_ref","","",339],[11,"from_borrowed_ref","","",339],[11,"from_temporary","","",339],[11,"from_actual","","",339],[11,"to_ref","","",340],[11,"to_borrowed_ref","","",340],[11,"to_layout_js","","",340],[11,"from_ref","","",340],[11,"from_borrowed_ref","","",340],[11,"from_temporary","","",340],[11,"from_actual","","",340],[11,"to_ref","","",341],[11,"to_borrowed_ref","","",341],[11,"to_layout_js","","",341],[11,"from_ref","","",341],[11,"from_borrowed_ref","","",341],[11,"from_temporary","","",341],[11,"from_actual","","",341],[11,"to_ref","","",342],[11,"to_borrowed_ref","","",342],[11,"to_layout_js","","",342],[11,"from_ref","","",342],[11,"from_borrowed_ref","","",342],[11,"from_temporary","","",342],[11,"from_actual","","",342],[11,"to_ref","","",343],[11,"to_borrowed_ref","","",343],[11,"to_layout_js","","",343],[11,"from_ref","","",343],[11,"from_borrowed_ref","","",343],[11,"from_temporary","","",343],[11,"from_actual","","",343],[11,"to_ref","","",344],[11,"to_borrowed_ref","","",344],[11,"to_layout_js","","",344],[11,"from_ref","","",344],[11,"from_borrowed_ref","","",344],[11,"from_temporary","","",344],[11,"from_actual","","",344],[11,"to_ref","","",345],[11,"to_borrowed_ref","","",345],[11,"to_layout_js","","",345],[11,"from_ref","","",345],[11,"from_borrowed_ref","","",345],[11,"from_temporary","","",345],[11,"from_actual","","",345],[11,"to_ref","","",346],[11,"to_borrowed_ref","","",346],[11,"to_layout_js","","",346],[11,"from_ref","","",346],[11,"from_borrowed_ref","","",346],[11,"from_temporary","","",346],[11,"from_actual","","",346],[11,"to_ref","","",347],[11,"to_borrowed_ref","","",347],[11,"to_layout_js","","",347],[11,"from_ref","","",347],[11,"from_borrowed_ref","","",347],[11,"from_temporary","","",347],[11,"from_actual","","",347],[11,"to_ref","","",348],[11,"to_borrowed_ref","","",348],[11,"to_layout_js","","",348],[11,"from_ref","","",348],[11,"from_borrowed_ref","","",348],[11,"from_temporary","","",348],[11,"from_actual","","",348],[11,"to_ref","","",349],[11,"to_borrowed_ref","","",349],[11,"to_layout_js","","",349],[11,"from_ref","","",349],[11,"from_borrowed_ref","","",349],[11,"from_temporary","","",349],[11,"from_actual","","",349],[11,"to_ref","","",350],[11,"to_borrowed_ref","","",350],[11,"to_layout_js","","",350],[11,"from_ref","","",350],[11,"from_borrowed_ref","","",350],[11,"from_temporary","","",350],[11,"from_actual","","",350],[11,"to_ref","","",351],[11,"to_borrowed_ref","","",351],[11,"to_layout_js","","",351],[11,"from_ref","","",351],[11,"from_borrowed_ref","","",351],[11,"from_temporary","","",351],[11,"from_actual","","",351],[11,"to_ref","","",352],[11,"to_borrowed_ref","","",352],[11,"to_layout_js","","",352],[11,"from_ref","","",352],[11,"from_borrowed_ref","","",352],[11,"from_temporary","","",352],[11,"from_actual","","",352],[11,"to_ref","","",353],[11,"to_borrowed_ref","","",353],[11,"to_layout_js","","",353],[11,"from_ref","","",353],[11,"from_borrowed_ref","","",353],[11,"from_temporary","","",353],[11,"from_actual","","",353],[11,"to_ref","","",354],[11,"to_borrowed_ref","","",354],[11,"to_layout_js","","",354],[11,"from_ref","","",354],[11,"from_borrowed_ref","","",354],[11,"from_temporary","","",354],[11,"from_actual","","",354],[11,"to_ref","","",355],[11,"to_borrowed_ref","","",355],[11,"to_layout_js","","",355],[11,"from_ref","","",355],[11,"from_borrowed_ref","","",355],[11,"from_temporary","","",355],[11,"from_actual","","",355],[11,"to_ref","","",356],[11,"to_borrowed_ref","","",356],[11,"to_layout_js","","",356],[11,"from_ref","","",356],[11,"from_borrowed_ref","","",356],[11,"from_temporary","","",356],[11,"from_actual","","",356],[11,"to_ref","","",357],[11,"to_borrowed_ref","","",357],[11,"to_layout_js","","",357],[11,"from_ref","","",357],[11,"from_borrowed_ref","","",357],[11,"from_temporary","","",357],[11,"from_actual","","",357],[11,"to_ref","","",358],[11,"to_borrowed_ref","","",358],[11,"to_layout_js","","",358],[11,"from_ref","","",358],[11,"from_borrowed_ref","","",358],[11,"from_temporary","","",358],[11,"from_actual","","",358],[11,"to_ref","","",359],[11,"to_borrowed_ref","","",359],[11,"to_layout_js","","",359],[11,"from_ref","","",359],[11,"from_borrowed_ref","","",359],[11,"from_temporary","","",359],[11,"from_actual","","",359],[11,"to_ref","","",360],[11,"to_borrowed_ref","","",360],[11,"to_layout_js","","",360],[11,"from_ref","","",360],[11,"from_borrowed_ref","","",360],[11,"from_temporary","","",360],[11,"from_actual","","",360],[11,"to_ref","","",361],[11,"to_borrowed_ref","","",361],[11,"to_layout_js","","",361],[11,"from_ref","","",361],[11,"from_borrowed_ref","","",361],[11,"from_temporary","","",361],[11,"from_actual","","",361],[11,"to_ref","","",362],[11,"to_borrowed_ref","","",362],[11,"to_layout_js","","",362],[11,"from_ref","","",362],[11,"from_borrowed_ref","","",362],[11,"from_temporary","","",362],[11,"from_actual","","",362],[11,"to_ref","","",363],[11,"to_borrowed_ref","","",363],[11,"to_layout_js","","",363],[11,"from_ref","","",363],[11,"from_borrowed_ref","","",363],[11,"from_temporary","","",363],[11,"from_actual","","",363],[11,"to_ref","","",364],[11,"to_borrowed_ref","","",364],[11,"to_layout_js","","",364],[11,"from_ref","","",364],[11,"from_borrowed_ref","","",364],[11,"from_temporary","","",364],[11,"from_actual","","",364],[11,"to_ref","","",365],[11,"to_borrowed_ref","","",365],[11,"to_layout_js","","",365],[11,"from_ref","","",365],[11,"from_borrowed_ref","","",365],[11,"from_temporary","","",365],[11,"from_actual","","",365],[11,"to_ref","","",366],[11,"to_borrowed_ref","","",366],[11,"to_layout_js","","",366],[11,"from_ref","","",366],[11,"from_borrowed_ref","","",366],[11,"from_temporary","","",366],[11,"from_actual","","",366],[11,"to_ref","","",367],[11,"to_borrowed_ref","","",367],[11,"to_layout_js","","",367],[11,"from_ref","","",367],[11,"from_borrowed_ref","","",367],[11,"from_temporary","","",367],[11,"from_actual","","",367],[11,"to_ref","","",368],[11,"to_borrowed_ref","","",368],[11,"to_layout_js","","",368],[11,"from_ref","","",368],[11,"from_borrowed_ref","","",368],[11,"from_temporary","","",368],[11,"from_actual","","",368],[11,"to_ref","","",369],[11,"to_borrowed_ref","","",369],[11,"to_layout_js","","",369],[11,"from_ref","","",369],[11,"from_borrowed_ref","","",369],[11,"from_temporary","","",369],[11,"from_actual","","",369],[11,"to_ref","","",370],[11,"to_borrowed_ref","","",370],[11,"to_layout_js","","",370],[11,"from_ref","","",370],[11,"from_borrowed_ref","","",370],[11,"from_temporary","","",370],[11,"from_actual","","",370],[11,"to_ref","","",371],[11,"to_borrowed_ref","","",371],[11,"to_layout_js","","",371],[11,"from_ref","","",371],[11,"from_borrowed_ref","","",371],[11,"from_temporary","","",371],[11,"from_actual","","",371],[11,"to_ref","","",372],[11,"to_borrowed_ref","","",372],[11,"to_layout_js","","",372],[11,"from_ref","","",372],[11,"from_borrowed_ref","","",372],[11,"from_temporary","","",372],[11,"from_actual","","",372],[11,"to_ref","","",373],[11,"to_borrowed_ref","","",373],[11,"to_layout_js","","",373],[11,"from_ref","","",373],[11,"from_borrowed_ref","","",373],[11,"from_temporary","","",373],[11,"from_actual","","",373],[11,"to_ref","","",374],[11,"to_borrowed_ref","","",374],[11,"to_layout_js","","",374],[11,"from_ref","","",374],[11,"from_borrowed_ref","","",374],[11,"from_temporary","","",374],[11,"from_actual","","",374],[11,"to_ref","","",375],[11,"to_borrowed_ref","","",375],[11,"to_layout_js","","",375],[11,"from_ref","","",375],[11,"from_borrowed_ref","","",375],[11,"from_temporary","","",375],[11,"from_actual","","",375],[11,"to_ref","","",376],[11,"to_borrowed_ref","","",376],[11,"to_layout_js","","",376],[11,"from_ref","","",376],[11,"from_borrowed_ref","","",376],[11,"from_temporary","","",376],[11,"from_actual","","",376],[11,"to_ref","","",377],[11,"to_borrowed_ref","","",377],[11,"to_layout_js","","",377],[11,"from_ref","","",377],[11,"from_borrowed_ref","","",377],[11,"from_temporary","","",377],[11,"from_actual","","",377],[11,"to_ref","","",378],[11,"to_borrowed_ref","","",378],[11,"to_layout_js","","",378],[11,"from_ref","","",378],[11,"from_borrowed_ref","","",378],[11,"from_temporary","","",378],[11,"from_actual","","",378],[11,"to_ref","","",379],[11,"to_borrowed_ref","","",379],[11,"to_layout_js","","",379],[11,"from_ref","","",379],[11,"from_borrowed_ref","","",379],[11,"from_temporary","","",379],[11,"from_actual","","",379],[11,"to_ref","","",380],[11,"to_borrowed_ref","","",380],[11,"to_layout_js","","",380],[11,"from_ref","","",380],[11,"from_borrowed_ref","","",380],[11,"from_temporary","","",380],[11,"from_actual","","",380],[11,"to_ref","","",381],[11,"to_borrowed_ref","","",381],[11,"to_layout_js","","",381],[11,"from_ref","","",381],[11,"from_borrowed_ref","","",381],[11,"from_temporary","","",381],[11,"from_actual","","",381],[11,"to_ref","","",382],[11,"to_borrowed_ref","","",382],[11,"to_layout_js","","",382],[11,"from_ref","","",382],[11,"from_borrowed_ref","","",382],[11,"from_temporary","","",382],[11,"from_actual","","",382],[11,"to_ref","","",383],[11,"to_borrowed_ref","","",383],[11,"to_layout_js","","",383],[11,"from_ref","","",383],[11,"from_borrowed_ref","","",383],[11,"from_temporary","","",383],[11,"from_actual","","",383],[11,"to_ref","","",384],[11,"to_borrowed_ref","","",384],[11,"to_layout_js","","",384],[11,"from_ref","","",384],[11,"from_borrowed_ref","","",384],[11,"from_temporary","","",384],[11,"from_actual","","",384],[11,"to_ref","","",385],[11,"to_borrowed_ref","","",385],[11,"to_layout_js","","",385],[11,"from_ref","","",385],[11,"from_borrowed_ref","","",385],[11,"from_temporary","","",385],[11,"from_actual","","",385],[11,"to_ref","","",386],[11,"to_borrowed_ref","","",386],[11,"to_layout_js","","",386],[11,"from_ref","","",386],[11,"from_borrowed_ref","","",386],[11,"from_temporary","","",386],[11,"from_actual","","",386],[11,"to_ref","","",387],[11,"to_borrowed_ref","","",387],[11,"to_layout_js","","",387],[11,"from_ref","","",387],[11,"from_borrowed_ref","","",387],[11,"from_temporary","","",387],[11,"from_actual","","",387],[11,"to_ref","","",388],[11,"to_borrowed_ref","","",388],[11,"to_layout_js","","",388],[11,"from_ref","","",388],[11,"from_borrowed_ref","","",388],[11,"from_temporary","","",388],[11,"from_actual","","",388],[11,"to_ref","","",389],[11,"to_borrowed_ref","","",389],[11,"to_layout_js","","",389],[11,"from_ref","","",389],[11,"from_borrowed_ref","","",389],[11,"from_temporary","","",389],[11,"from_actual","","",389],[11,"to_ref","","",390],[11,"to_borrowed_ref","","",390],[11,"to_layout_js","","",390],[11,"from_ref","","",390],[11,"from_borrowed_ref","","",390],[11,"from_temporary","","",390],[11,"from_actual","","",390],[11,"to_ref","","",391],[11,"to_borrowed_ref","","",391],[11,"to_layout_js","","",391],[11,"from_ref","","",391],[11,"from_borrowed_ref","","",391],[11,"from_temporary","","",391],[11,"from_actual","","",391],[11,"to_ref","","",392],[11,"to_borrowed_ref","","",392],[11,"to_layout_js","","",392],[11,"from_ref","","",392],[11,"from_borrowed_ref","","",392],[11,"from_temporary","","",392],[11,"from_actual","","",392],[11,"to_ref","","",393],[11,"to_borrowed_ref","","",393],[11,"to_layout_js","","",393],[11,"from_ref","","",393],[11,"from_borrowed_ref","","",393],[11,"from_temporary","","",393],[11,"from_actual","","",393],[11,"to_ref","","",394],[11,"to_borrowed_ref","","",394],[11,"to_layout_js","","",394],[11,"from_ref","","",394],[11,"from_borrowed_ref","","",394],[11,"from_temporary","","",394],[11,"from_actual","","",394],[11,"to_ref","","",395],[11,"to_borrowed_ref","","",395],[11,"to_layout_js","","",395],[11,"from_ref","","",395],[11,"from_borrowed_ref","","",395],[11,"from_temporary","","",395],[11,"from_actual","","",395],[11,"to_ref","","",396],[11,"to_borrowed_ref","","",396],[11,"to_layout_js","","",396],[11,"from_ref","","",396],[11,"from_borrowed_ref","","",396],[11,"from_temporary","","",396],[11,"from_actual","","",396],[11,"to_ref","","",397],[11,"to_borrowed_ref","","",397],[11,"to_layout_js","","",397],[11,"from_ref","","",397],[11,"from_borrowed_ref","","",397],[11,"from_temporary","","",397],[11,"from_actual","","",397],[11,"to_ref","","",398],[11,"to_borrowed_ref","","",398],[11,"to_layout_js","","",398],[11,"from_ref","","",398],[11,"from_borrowed_ref","","",398],[11,"from_temporary","","",398],[11,"from_actual","","",398],[11,"to_ref","","",399],[11,"to_borrowed_ref","","",399],[11,"to_layout_js","","",399],[11,"from_ref","","",399],[11,"from_borrowed_ref","","",399],[11,"from_temporary","","",399],[11,"from_actual","","",399],[11,"to_ref","","",400],[11,"to_borrowed_ref","","",400],[11,"to_layout_js","","",400],[11,"from_ref","","",400],[11,"from_borrowed_ref","","",400],[11,"from_temporary","","",400],[11,"from_actual","","",400],[11,"to_ref","","",401],[11,"to_borrowed_ref","","",401],[11,"to_layout_js","","",401],[11,"from_ref","","",401],[11,"from_borrowed_ref","","",401],[11,"from_temporary","","",401],[11,"from_actual","","",401],[11,"to_ref","","",402],[11,"to_borrowed_ref","","",402],[11,"to_layout_js","","",402],[11,"from_ref","","",402],[11,"from_borrowed_ref","","",402],[11,"from_temporary","","",402],[11,"from_actual","","",402],[11,"to_ref","","",403],[11,"to_borrowed_ref","","",403],[11,"to_layout_js","","",403],[11,"from_ref","","",403],[11,"from_borrowed_ref","","",403],[11,"from_temporary","","",403],[11,"from_actual","","",403],[11,"to_ref","","",404],[11,"to_borrowed_ref","","",404],[11,"to_layout_js","","",404],[11,"from_ref","","",404],[11,"from_borrowed_ref","","",404],[11,"from_temporary","","",404],[11,"from_actual","","",404],[11,"to_ref","","",405],[11,"to_borrowed_ref","","",405],[11,"to_layout_js","","",405],[11,"from_ref","","",405],[11,"from_borrowed_ref","","",405],[11,"from_temporary","","",405],[11,"from_actual","","",405],[11,"to_ref","","",406],[11,"to_borrowed_ref","","",406],[11,"to_layout_js","","",406],[11,"from_ref","","",406],[11,"from_borrowed_ref","","",406],[11,"from_temporary","","",406],[11,"from_actual","","",406],[11,"to_ref","","",407],[11,"to_borrowed_ref","","",407],[11,"to_layout_js","","",407],[11,"from_ref","","",407],[11,"from_borrowed_ref","","",407],[11,"from_temporary","","",407],[11,"from_actual","","",407],[11,"to_ref","","",408],[11,"to_borrowed_ref","","",408],[11,"to_layout_js","","",408],[11,"from_ref","","",408],[11,"from_borrowed_ref","","",408],[11,"from_temporary","","",408],[11,"from_actual","","",408],[11,"to_ref","","",409],[11,"to_borrowed_ref","","",409],[11,"to_layout_js","","",409],[11,"from_ref","","",409],[11,"from_borrowed_ref","","",409],[11,"from_temporary","","",409],[11,"from_actual","","",409],[11,"to_ref","","",410],[11,"to_borrowed_ref","","",410],[11,"to_layout_js","","",410],[11,"from_ref","","",410],[11,"from_borrowed_ref","","",410],[11,"from_temporary","","",410],[11,"from_actual","","",410],[11,"to_ref","","",411],[11,"to_borrowed_ref","","",411],[11,"to_layout_js","","",411],[11,"from_ref","","",411],[11,"from_borrowed_ref","","",411],[11,"from_temporary","","",411],[11,"from_actual","","",411],[11,"to_ref","","",412],[11,"to_borrowed_ref","","",412],[11,"to_layout_js","","",412],[11,"from_ref","","",412],[11,"from_borrowed_ref","","",412],[11,"from_temporary","","",412],[11,"from_actual","","",412],[11,"to_ref","","",413],[11,"to_borrowed_ref","","",413],[11,"to_layout_js","","",413],[11,"from_ref","","",413],[11,"from_borrowed_ref","","",413],[11,"from_temporary","","",413],[11,"from_actual","","",413],[11,"to_ref","","",414],[11,"to_borrowed_ref","","",414],[11,"to_layout_js","","",414],[11,"from_ref","","",414],[11,"from_borrowed_ref","","",414],[11,"from_temporary","","",414],[11,"from_actual","","",414],[11,"to_ref","","",415],[11,"to_borrowed_ref","","",415],[11,"to_layout_js","","",415],[11,"from_ref","","",415],[11,"from_borrowed_ref","","",415],[11,"from_temporary","","",415],[11,"from_actual","","",415],[11,"to_ref","","",416],[11,"to_borrowed_ref","","",416],[11,"to_layout_js","","",416],[11,"from_ref","","",416],[11,"from_borrowed_ref","","",416],[11,"from_temporary","","",416],[11,"from_actual","","",416],[11,"to_ref","","",417],[11,"to_borrowed_ref","","",417],[11,"to_layout_js","","",417],[11,"from_ref","","",417],[11,"from_borrowed_ref","","",417],[11,"from_temporary","","",417],[11,"from_actual","","",417],[11,"to_ref","","",418],[11,"to_borrowed_ref","","",418],[11,"to_layout_js","","",418],[11,"from_ref","","",418],[11,"from_borrowed_ref","","",418],[11,"from_temporary","","",418],[11,"from_actual","","",418],[11,"to_ref","","",419],[11,"to_borrowed_ref","","",419],[11,"to_layout_js","","",419],[11,"from_ref","","",419],[11,"from_borrowed_ref","","",419],[11,"from_temporary","","",419],[11,"from_actual","","",419],[11,"to_ref","","",420],[11,"to_borrowed_ref","","",420],[11,"to_layout_js","","",420],[11,"from_ref","","",420],[11,"from_borrowed_ref","","",420],[11,"from_temporary","","",420],[11,"from_actual","","",420],[11,"to_ref","","",421],[11,"to_borrowed_ref","","",421],[11,"to_layout_js","","",421],[11,"from_ref","","",421],[11,"from_borrowed_ref","","",421],[11,"from_temporary","","",421],[11,"from_actual","","",421],[11,"to_ref","","",422],[11,"to_borrowed_ref","","",422],[11,"to_layout_js","","",422],[11,"from_ref","","",422],[11,"from_borrowed_ref","","",422],[11,"from_temporary","","",422],[11,"from_actual","","",422],[11,"to_ref","","",423],[11,"to_borrowed_ref","","",423],[11,"to_layout_js","","",423],[11,"from_ref","","",423],[11,"from_borrowed_ref","","",423],[11,"from_temporary","","",423],[11,"from_actual","","",423],[11,"to_ref","","",424],[11,"to_borrowed_ref","","",424],[11,"to_layout_js","","",424],[11,"from_ref","","",424],[11,"from_borrowed_ref","","",424],[11,"from_temporary","","",424],[11,"from_actual","","",424],[11,"to_ref","","",425],[11,"to_borrowed_ref","","",425],[11,"to_layout_js","","",425],[11,"from_ref","","",425],[11,"from_borrowed_ref","","",425],[11,"from_temporary","","",425],[11,"from_actual","","",425],[11,"to_ref","","",426],[11,"to_borrowed_ref","","",426],[11,"to_layout_js","","",426],[11,"from_ref","","",426],[11,"from_borrowed_ref","","",426],[11,"from_temporary","","",426],[11,"from_actual","","",426],[11,"to_ref","","",427],[11,"to_borrowed_ref","","",427],[11,"to_layout_js","","",427],[11,"from_ref","","",427],[11,"from_borrowed_ref","","",427],[11,"from_temporary","","",427],[11,"from_actual","","",427],[11,"to_ref","","",428],[11,"to_borrowed_ref","","",428],[11,"to_layout_js","","",428],[11,"from_ref","","",428],[11,"from_borrowed_ref","","",428],[11,"from_temporary","","",428],[11,"from_actual","","",428],[11,"to_ref","","",429],[11,"to_borrowed_ref","","",429],[11,"to_layout_js","","",429],[11,"from_ref","","",429],[11,"from_borrowed_ref","","",429],[11,"from_temporary","","",429],[11,"from_actual","","",429],[11,"to_ref","","",430],[11,"to_borrowed_ref","","",430],[11,"to_layout_js","","",430],[11,"from_ref","","",430],[11,"from_borrowed_ref","","",430],[11,"from_temporary","","",430],[11,"from_actual","","",430],[11,"to_ref","","",431],[11,"to_borrowed_ref","","",431],[11,"to_layout_js","","",431],[11,"from_ref","","",431],[11,"from_borrowed_ref","","",431],[11,"from_temporary","","",431],[11,"from_actual","","",431],[11,"to_ref","","",432],[11,"to_borrowed_ref","","",432],[11,"to_layout_js","","",432],[11,"from_ref","","",432],[11,"from_borrowed_ref","","",432],[11,"from_temporary","","",432],[11,"from_actual","","",432],[11,"to_ref","","",433],[11,"to_borrowed_ref","","",433],[11,"to_layout_js","","",433],[11,"from_ref","","",433],[11,"from_borrowed_ref","","",433],[11,"from_temporary","","",433],[11,"from_actual","","",433],[11,"to_ref","","",434],[11,"to_borrowed_ref","","",434],[11,"to_layout_js","","",434],[11,"from_ref","","",434],[11,"from_borrowed_ref","","",434],[11,"from_temporary","","",434],[11,"from_actual","","",434],[11,"to_ref","","",435],[11,"to_borrowed_ref","","",435],[11,"to_layout_js","","",435],[11,"from_ref","","",435],[11,"from_borrowed_ref","","",435],[11,"from_temporary","","",435],[11,"from_actual","","",435],[11,"to_ref","","",436],[11,"to_borrowed_ref","","",436],[11,"to_layout_js","","",436],[11,"from_ref","","",436],[11,"from_borrowed_ref","","",436],[11,"from_temporary","","",436],[11,"from_actual","","",436],[11,"to_ref","","",437],[11,"to_borrowed_ref","","",437],[11,"to_layout_js","","",437],[11,"from_ref","","",437],[11,"from_borrowed_ref","","",437],[11,"from_temporary","","",437],[11,"from_actual","","",437],[11,"to_ref","","",438],[11,"to_borrowed_ref","","",438],[11,"to_layout_js","","",438],[11,"from_ref","","",438],[11,"from_borrowed_ref","","",438],[11,"from_temporary","","",438],[11,"from_actual","","",438],[11,"to_ref","","",439],[11,"to_borrowed_ref","","",439],[11,"to_layout_js","","",439],[11,"from_ref","","",439],[11,"from_borrowed_ref","","",439],[11,"from_temporary","","",439],[11,"from_actual","","",439],[11,"to_ref","","",440],[11,"to_borrowed_ref","","",440],[11,"to_layout_js","","",440],[11,"from_ref","","",440],[11,"from_borrowed_ref","","",440],[11,"from_temporary","","",440],[11,"from_actual","","",440],[11,"to_ref","","",441],[11,"to_borrowed_ref","","",441],[11,"to_layout_js","","",441],[11,"from_ref","","",441],[11,"from_borrowed_ref","","",441],[11,"from_temporary","","",441],[11,"from_actual","","",441],[11,"to_ref","","",442],[11,"to_borrowed_ref","","",442],[11,"to_layout_js","","",442],[11,"from_ref","","",442],[11,"from_borrowed_ref","","",442],[11,"from_temporary","","",442],[11,"from_actual","","",442],[11,"to_ref","","",443],[11,"to_borrowed_ref","","",443],[11,"to_layout_js","","",443],[11,"from_ref","","",443],[11,"from_borrowed_ref","","",443],[11,"from_temporary","","",443],[11,"from_actual","","",443],[11,"to_ref","","",444],[11,"to_borrowed_ref","","",444],[11,"to_layout_js","","",444],[11,"from_ref","","",444],[11,"from_borrowed_ref","","",444],[11,"from_temporary","","",444],[11,"from_actual","","",444],[11,"to_ref","","",445],[11,"to_borrowed_ref","","",445],[11,"to_layout_js","","",445],[11,"from_ref","","",445],[11,"from_borrowed_ref","","",445],[11,"from_temporary","","",445],[11,"from_actual","","",445],[11,"to_ref","","",446],[11,"to_borrowed_ref","","",446],[11,"to_layout_js","","",446],[11,"from_ref","","",446],[11,"from_borrowed_ref","","",446],[11,"from_temporary","","",446],[11,"from_actual","","",446],[11,"to_ref","","",447],[11,"to_borrowed_ref","","",447],[11,"to_layout_js","","",447],[11,"from_ref","","",447],[11,"from_borrowed_ref","","",447],[11,"from_temporary","","",447],[11,"from_actual","","",447],[11,"to_ref","","",448],[11,"to_borrowed_ref","","",448],[11,"to_layout_js","","",448],[11,"from_ref","","",448],[11,"from_borrowed_ref","","",448],[11,"from_temporary","","",448],[11,"from_actual","","",448],[11,"to_ref","","",449],[11,"to_borrowed_ref","","",449],[11,"to_layout_js","","",449],[11,"from_ref","","",449],[11,"from_borrowed_ref","","",449],[11,"from_temporary","","",449],[11,"from_actual","","",449],[11,"to_ref","","",450],[11,"to_borrowed_ref","","",450],[11,"to_layout_js","","",450],[11,"from_ref","","",450],[11,"from_borrowed_ref","","",450],[11,"from_temporary","","",450],[11,"from_actual","","",450],[11,"to_ref","","",451],[11,"to_borrowed_ref","","",451],[11,"to_layout_js","","",451],[11,"from_ref","","",451],[11,"from_borrowed_ref","","",451],[11,"from_temporary","","",451],[11,"from_actual","","",451],[11,"to_ref","","",452],[11,"to_borrowed_ref","","",452],[11,"to_layout_js","","",452],[11,"from_ref","","",452],[11,"from_borrowed_ref","","",452],[11,"from_temporary","","",452],[11,"from_actual","","",452],[11,"to_ref","","",453],[11,"to_borrowed_ref","","",453],[11,"to_layout_js","","",453],[11,"from_ref","","",453],[11,"from_borrowed_ref","","",453],[11,"from_temporary","","",453],[11,"from_actual","","",453],[11,"to_ref","","",454],[11,"to_borrowed_ref","","",454],[11,"to_layout_js","","",454],[11,"from_ref","","",454],[11,"from_borrowed_ref","","",454],[11,"from_temporary","","",454],[11,"from_actual","","",454],[11,"to_ref","","",455],[11,"to_borrowed_ref","","",455],[11,"to_layout_js","","",455],[11,"from_ref","","",455],[11,"from_borrowed_ref","","",455],[11,"from_temporary","","",455],[11,"from_actual","","",455],[11,"to_ref","","",456],[11,"to_borrowed_ref","","",456],[11,"to_layout_js","","",456],[11,"from_ref","","",456],[11,"from_borrowed_ref","","",456],[11,"from_temporary","","",456],[11,"from_actual","","",456],[11,"to_ref","","",457],[11,"to_borrowed_ref","","",457],[11,"to_layout_js","","",457],[11,"from_ref","","",457],[11,"from_borrowed_ref","","",457],[11,"from_temporary","","",457],[11,"from_actual","","",457],[11,"to_ref","","",458],[11,"to_borrowed_ref","","",458],[11,"to_layout_js","","",458],[11,"from_ref","","",458],[11,"from_borrowed_ref","","",458],[11,"from_temporary","","",458],[11,"from_actual","","",458],[11,"to_ref","","",459],[11,"to_borrowed_ref","","",459],[11,"to_layout_js","","",459],[11,"from_ref","","",459],[11,"from_borrowed_ref","","",459],[11,"from_temporary","","",459],[11,"from_actual","","",459],[11,"to_ref","","",460],[11,"to_borrowed_ref","","",460],[11,"to_layout_js","","",460],[11,"from_ref","","",460],[11,"from_borrowed_ref","","",460],[11,"from_temporary","","",460],[11,"from_actual","","",460],[11,"to_ref","","",461],[11,"to_borrowed_ref","","",461],[11,"to_layout_js","","",461],[11,"from_ref","","",461],[11,"from_borrowed_ref","","",461],[11,"from_temporary","","",461],[11,"from_actual","","",461],[0,"PrototypeList","script::dom::bindings::codegen",""],[4,"ID","script::dom::bindings::codegen::PrototypeList",""],[13,"Attr","","",462],[13,"Blob","","",462],[13,"CSSStyleDeclaration","","",462],[13,"CanvasGradient","","",462],[13,"CanvasPattern","","",462],[13,"CanvasRenderingContext2D","","",462],[13,"CharacterData","","",462],[13,"Comment","","",462],[13,"Console","","",462],[13,"CustomEvent","","",462],[13,"DOMException","","",462],[13,"DOMImplementation","","",462],[13,"DOMParser","","",462],[13,"DOMRect","","",462],[13,"DOMRectList","","",462],[13,"DOMStringMap","","",462],[13,"DOMTokenList","","",462],[13,"DedicatedWorkerGlobalScope","","",462],[13,"Document","","",462],[13,"DocumentFragment","","",462],[13,"DocumentType","","",462],[13,"Element","","",462],[13,"ErrorEvent","","",462],[13,"Event","","",462],[13,"EventTarget","","",462],[13,"File","","",462],[13,"FormData","","",462],[13,"HTMLAnchorElement","","",462],[13,"HTMLAppletElement","","",462],[13,"HTMLAreaElement","","",462],[13,"HTMLAudioElement","","",462],[13,"HTMLBRElement","","",462],[13,"HTMLBaseElement","","",462],[13,"HTMLBodyElement","","",462],[13,"HTMLButtonElement","","",462],[13,"HTMLCanvasElement","","",462],[13,"HTMLCollection","","",462],[13,"HTMLDListElement","","",462],[13,"HTMLDataElement","","",462],[13,"HTMLDataListElement","","",462],[13,"HTMLDirectoryElement","","",462],[13,"HTMLDivElement","","",462],[13,"HTMLElement","","",462],[13,"HTMLEmbedElement","","",462],[13,"HTMLFieldSetElement","","",462],[13,"HTMLFontElement","","",462],[13,"HTMLFormElement","","",462],[13,"HTMLFrameElement","","",462],[13,"HTMLFrameSetElement","","",462],[13,"HTMLHRElement","","",462],[13,"HTMLHeadElement","","",462],[13,"HTMLHeadingElement","","",462],[13,"HTMLHtmlElement","","",462],[13,"HTMLIFrameElement","","",462],[13,"HTMLImageElement","","",462],[13,"HTMLInputElement","","",462],[13,"HTMLLIElement","","",462],[13,"HTMLLabelElement","","",462],[13,"HTMLLegendElement","","",462],[13,"HTMLLinkElement","","",462],[13,"HTMLMapElement","","",462],[13,"HTMLMediaElement","","",462],[13,"HTMLMetaElement","","",462],[13,"HTMLMeterElement","","",462],[13,"HTMLModElement","","",462],[13,"HTMLOListElement","","",462],[13,"HTMLObjectElement","","",462],[13,"HTMLOptGroupElement","","",462],[13,"HTMLOptionElement","","",462],[13,"HTMLOutputElement","","",462],[13,"HTMLParagraphElement","","",462],[13,"HTMLParamElement","","",462],[13,"HTMLPreElement","","",462],[13,"HTMLProgressElement","","",462],[13,"HTMLQuoteElement","","",462],[13,"HTMLScriptElement","","",462],[13,"HTMLSelectElement","","",462],[13,"HTMLSourceElement","","",462],[13,"HTMLSpanElement","","",462],[13,"HTMLStyleElement","","",462],[13,"HTMLTableCaptionElement","","",462],[13,"HTMLTableCellElement","","",462],[13,"HTMLTableColElement","","",462],[13,"HTMLTableDataCellElement","","",462],[13,"HTMLTableElement","","",462],[13,"HTMLTableHeaderCellElement","","",462],[13,"HTMLTableRowElement","","",462],[13,"HTMLTableSectionElement","","",462],[13,"HTMLTemplateElement","","",462],[13,"HTMLTextAreaElement","","",462],[13,"HTMLTimeElement","","",462],[13,"HTMLTitleElement","","",462],[13,"HTMLTrackElement","","",462],[13,"HTMLUListElement","","",462],[13,"HTMLUnknownElement","","",462],[13,"HTMLVideoElement","","",462],[13,"ImageData","","",462],[13,"KeyboardEvent","","",462],[13,"Location","","",462],[13,"MessageEvent","","",462],[13,"MouseEvent","","",462],[13,"NamedNodeMap","","",462],[13,"Navigator","","",462],[13,"Node","","",462],[13,"NodeIterator","","",462],[13,"NodeList","","",462],[13,"Performance","","",462],[13,"PerformanceTiming","","",462],[13,"ProcessingInstruction","","",462],[13,"ProgressEvent","","",462],[13,"Range","","",462],[13,"Screen","","",462],[13,"ServoHTMLParser","","",462],[13,"Storage","","",462],[13,"StorageEvent","","",462],[13,"TestBinding","","",462],[13,"Text","","",462],[13,"TextEncoder","","",462],[13,"TreeWalker","","",462],[13,"UIEvent","","",462],[13,"URLSearchParams","","",462],[13,"ValidityState","","",462],[13,"WebSocket","","",462],[13,"Window","","",462],[13,"Worker","","",462],[13,"WorkerGlobalScope","","",462],[13,"WorkerLocation","","",462],[13,"WorkerNavigator","","",462],[13,"XMLHttpRequest","","",462],[13,"XMLHttpRequestEventTarget","","",462],[13,"XMLHttpRequestUpload","","",462],[13,"Count","","",462],[4,"Proxies","",""],[13,"CSSStyleDeclaration","","",463],[13,"DOMRectList","","",463],[13,"DOMStringMap","","",463],[13,"DOMTokenList","","",463],[13,"HTMLCollection","","",463],[13,"NamedNodeMap","","",463],[13,"NodeList","","",463],[13,"Storage","","",463],[13,"Count","","",463],[17,"MAX_PROTO_CHAIN_LENGTH","",""],[11,"eq","","",462],[11,"ne","","",462],[11,"eq","","",463],[11,"ne","","",463],[0,"RegisterBindings","script::dom::bindings::codegen",""],[5,"Register","script::dom::bindings::codegen::RegisterBindings",""],[5,"RegisterProxyHandlers","",""],[7,"proxy_handlers","",""],[0,"UnionTypes","script::dom::bindings::codegen",""],[4,"BlobOrString","script::dom::bindings::codegen::UnionTypes",""],[13,"eBlob","","",464],[13,"eString","","",464],[4,"EventOrString","",""],[13,"eEvent","","",465],[13,"eString","","",465],[4,"FileOrString","",""],[13,"eFile","","",466],[13,"eString","","",466],[4,"HTMLCanvasElementOrCanvasRenderingContext2D","",""],[13,"eHTMLCanvasElement","","",467],[13,"eCanvasRenderingContext2D","","",467],[4,"HTMLElementOrLong","",""],[13,"eHTMLElement","","",468],[13,"eLong","","",468],[4,"HTMLOptionElementOrHTMLOptGroupElement","",""],[13,"eHTMLOptionElement","","",469],[13,"eHTMLOptGroupElement","","",469],[4,"StringOrCanvasGradientOrCanvasPattern","",""],[13,"eString","","",470],[13,"eCanvasGradient","","",470],[13,"eCanvasPattern","","",470],[4,"StringOrURLSearchParams","",""],[13,"eString","","",471],[13,"eURLSearchParams","","",471],[11,"to_jsval","","",464],[6,"Config","",""],[11,"from_jsval","","",464],[11,"to_jsval","","",465],[6,"Config","",""],[11,"from_jsval","","",465],[11,"to_jsval","","",466],[6,"Config","",""],[11,"from_jsval","","",466],[11,"to_jsval","","",467],[6,"Config","",""],[11,"from_jsval","","",467],[11,"to_jsval","","",468],[6,"Config","",""],[11,"from_jsval","","",468],[11,"to_jsval","","",469],[6,"Config","",""],[11,"from_jsval","","",469],[11,"to_jsval","","",470],[6,"Config","",""],[11,"from_jsval","","",470],[11,"to_jsval","","",471],[6,"Config","",""],[11,"from_jsval","","",471],[0,"types","script::dom",""],[0,"activation","",""],[8,"Activatable","script::dom::activation","Trait for elements with defined activation behavior"],[10,"as_element","","",472],[10,"is_instance_activatable","","",472],[10,"pre_click_activation","","",472],[10,"canceled_activation","","",472],[10,"activation_behavior","","",472],[10,"implicit_submission","","",472],[11,"synthetic_click_activation","","",472],[0,"attr","script::dom",""],[3,"Attr","script::dom::attr",""],[4,"AttrSettingType","",""],[13,"FirstSetAttr","","",473],[13,"ReplacedAttr","","",473],[4,"AttrValue","",""],[13,"String","","",474],[13,"TokenList","","",474],[13,"UInt","","",474],[13,"Atom","","",474],[8,"AttrHelpers","",""],[10,"set_value","","",475],[10,"value","","",475],[10,"local_name","","",475],[10,"summarize","","",475],[8,"AttrHelpersForLayout","",""],[10,"value_ref_forever","","",476],[10,"value_atom_forever","","",476],[10,"value_tokens_forever","","",476],[10,"local_name_atom_forever","","",476],[11,"trace","","",474],[11,"clone","","",474],[11,"eq","","",474],[11,"ne","","",474],[11,"from_serialized_tokenlist","","",474],[11,"from_atomic_tokens","","",474],[11,"from_u32","","",474],[11,"from_atomic","","",474],[11,"tokens","","",474],[11,"as_slice","","",474],[11,"trace","","",477],[11,"reflector","","",477],[11,"new","","",477],[11,"name","","",477],[11,"namespace","","",477],[11,"prefix","","",477],[11,"LocalName","script::dom::bindings::js","",28],[11,"Value","","",28],[11,"SetValue","","",28],[11,"TextContent","","",28],[11,"SetTextContent","","",28],[11,"NodeValue","","",28],[11,"SetNodeValue","","",28],[11,"Name","","",28],[11,"GetNamespaceURI","","",28],[11,"GetPrefix","","",28],[11,"GetOwnerElement","","",28],[11,"Specified","","",28],[11,"set_value","","",28],[11,"value","","",28],[11,"local_name","","",28],[11,"summarize","","",28],[11,"value_ref_forever","script::dom::attr","",477],[11,"value_atom_forever","","",477],[11,"value_tokens_forever","","",477],[11,"local_name_atom_forever","","",477],[0,"blob","script::dom",""],[3,"Blob","script::dom::blob",""],[4,"BlobTypeId","",""],[13,"Blob","","",478],[13,"File","","",478],[11,"trace","","",478],[11,"trace","","",479],[11,"reflector","","",479],[11,"new_inherited","","",479],[11,"new","","",479],[11,"Constructor","","",479],[11,"Constructor_","","",479],[11,"Size","script::dom::bindings::js","",28],[11,"Type","","",28],[11,"Slice","","",28],[11,"is_file","script::dom::blob","",479],[0,"browsercontext","script::dom",""],[3,"BrowserContext","script::dom::browsercontext",""],[3,"SessionHistoryEntry","",""],[5,"new_window_proxy_handler","",""],[11,"trace","","",480],[11,"new","","",480],[11,"active_document","","",480],[11,"active_window","","",480],[11,"frame_element","","",480],[11,"window_proxy","","",480],[11,"trace","","",481],[0,"canvasgradient","script::dom",""],[3,"CanvasGradient","script::dom::canvasgradient",""],[4,"CanvasGradientStyle","",""],[13,"Linear","","",482],[13,"Radial","","",482],[8,"ToFillOrStrokeStyle","",""],[10,"to_fill_or_stroke_style","","",483],[11,"trace","","",484],[11,"reflector","","",484],[11,"trace","","",482],[11,"new","","",484],[11,"AddColorStop","script::dom::bindings::js","",28],[11,"to_fill_or_stroke_style","","",28],[0,"canvaspattern","script::dom",""],[3,"CanvasPattern","script::dom::canvaspattern",""],[11,"trace","","",485],[11,"reflector","","",485],[0,"canvasrenderingcontext2d","script::dom",""],[3,"CanvasRenderingContext2D","script::dom::canvasrenderingcontext2d",""],[5,"parse_color","",""],[8,"CanvasRenderingContext2DHelpers","",""],[10,"get_renderer","","",486],[8,"LayoutCanvasRenderingContext2DHelpers","",""],[10,"get_renderer","","",487],[11,"trace","","",488],[11,"reflector","","",488],[11,"new","","",488],[11,"recreate","","",488],[11,"get_renderer","","",488],[11,"get_renderer","script::dom::bindings::js","",24],[11,"Canvas","","",28],[11,"Scale","","",28],[11,"Translate","","",28],[11,"Transform","","",28],[11,"SetTransform","","",28],[11,"FillRect","","",28],[11,"ClearRect","","",28],[11,"StrokeRect","","",28],[11,"BeginPath","","",28],[11,"ClosePath","","",28],[11,"Fill","","",28],[11,"Stroke","","",28],[11,"DrawImage","","",28],[11,"DrawImage_","","",28],[11,"DrawImage__","","",28],[11,"MoveTo","","",28],[11,"LineTo","","",28],[11,"QuadraticCurveTo","","",28],[11,"BezierCurveTo","","",28],[11,"Arc","","",28],[11,"ImageSmoothingEnabled","","",28],[11,"SetImageSmoothingEnabled","","",28],[11,"StrokeStyle","","",28],[11,"SetStrokeStyle","","",28],[11,"FillStyle","","",28],[11,"SetFillStyle","","",28],[11,"CreateImageData","","",28],[11,"CreateImageData_","","",28],[11,"GetImageData","","",28],[11,"PutImageData","","",28],[11,"PutImageData_","","",28],[11,"CreateLinearGradient","","",28],[11,"CreateRadialGradient","","",28],[11,"drop","script::dom::canvasrenderingcontext2d","",488],[0,"characterdata","script::dom","DOM bindings for `CharacterData`."],[3,"CharacterData","script::dom::characterdata",""],[11,"trace","","",489],[11,"reflector","","",489],[11,"new_inherited","","",489],[11,"node","","",489],[11,"data","","",489],[11,"set_data","","",489],[11,"data_for_layout","","",489],[11,"Data","script::dom::bindings::js","",28],[11,"SetData","","",28],[11,"Length","","",28],[11,"SubstringData","","",28],[11,"AppendData","","",28],[11,"InsertData","","",28],[11,"DeleteData","","",28],[11,"ReplaceData","","",28],[11,"Remove","","",28],[0,"cssstyledeclaration","script::dom",""],[3,"CSSStyleDeclaration","script::dom::cssstyledeclaration",""],[4,"CSSModificationAccess","",""],[13,"ReadWrite","","",490],[13,"Readonly","","",490],[11,"trace","","",491],[11,"reflector","","",491],[11,"eq","","",490],[11,"ne","","",490],[11,"new_inherited","","",491],[11,"new","","",491],[11,"Length","script::dom::bindings::js","",28],[11,"Item","","",28],[11,"GetPropertyValue","","",28],[11,"GetPropertyPriority","","",28],[11,"SetProperty","","",28],[11,"SetPropertyPriority","","",28],[11,"SetPropertyValue","","",28],[11,"RemoveProperty","","",28],[11,"CssFloat","","",28],[11,"SetCssFloat","","",28],[11,"IndexedGetter","","",28],[11,"Background","","",28],[11,"SetBackground","","",28],[11,"Margin","","",28],[11,"SetMargin","","",28],[11,"Padding","","",28],[11,"SetPadding","","",28],[11,"BorderColor","","",28],[11,"SetBorderColor","","",28],[11,"BorderStyle","","",28],[11,"SetBorderStyle","","",28],[11,"BorderWidth","","",28],[11,"SetBorderWidth","","",28],[11,"BorderTop","","",28],[11,"SetBorderTop","","",28],[11,"BorderRight","","",28],[11,"SetBorderRight","","",28],[11,"BorderBottom","","",28],[11,"SetBorderBottom","","",28],[11,"BorderLeft","","",28],[11,"SetBorderLeft","","",28],[11,"Border","","",28],[11,"SetBorder","","",28],[11,"BorderRadius","","",28],[11,"SetBorderRadius","","",28],[11,"Outline","","",28],[11,"SetOutline","","",28],[11,"Font","","",28],[11,"SetFont","","",28],[11,"WordWrap","","",28],[11,"SetWordWrap","","",28],[11,"ListStyle","","",28],[11,"SetListStyle","","",28],[11,"Overflow","","",28],[11,"SetOverflow","","",28],[11,"Transition","","",28],[11,"SetTransition","","",28],[11,"MarginTop","","",28],[11,"SetMarginTop","","",28],[11,"MarginRight","","",28],[11,"SetMarginRight","","",28],[11,"MarginBottom","","",28],[11,"SetMarginBottom","","",28],[11,"MarginLeft","","",28],[11,"SetMarginLeft","","",28],[11,"PaddingTop","","",28],[11,"SetPaddingTop","","",28],[11,"PaddingRight","","",28],[11,"SetPaddingRight","","",28],[11,"PaddingBottom","","",28],[11,"SetPaddingBottom","","",28],[11,"PaddingLeft","","",28],[11,"SetPaddingLeft","","",28],[11,"BorderTopColor","","",28],[11,"SetBorderTopColor","","",28],[11,"BorderRightColor","","",28],[11,"SetBorderRightColor","","",28],[11,"BorderBottomColor","","",28],[11,"SetBorderBottomColor","","",28],[11,"BorderLeftColor","","",28],[11,"SetBorderLeftColor","","",28],[11,"BorderTopStyle","","",28],[11,"SetBorderTopStyle","","",28],[11,"BorderRightStyle","","",28],[11,"SetBorderRightStyle","","",28],[11,"BorderBottomStyle","","",28],[11,"SetBorderBottomStyle","","",28],[11,"BorderLeftStyle","","",28],[11,"SetBorderLeftStyle","","",28],[11,"BorderTopWidth","","",28],[11,"SetBorderTopWidth","","",28],[11,"BorderRightWidth","","",28],[11,"SetBorderRightWidth","","",28],[11,"BorderBottomWidth","","",28],[11,"SetBorderBottomWidth","","",28],[11,"BorderLeftWidth","","",28],[11,"SetBorderLeftWidth","","",28],[11,"BorderTopLeftRadius","","",28],[11,"SetBorderTopLeftRadius","","",28],[11,"BorderTopRightRadius","","",28],[11,"SetBorderTopRightRadius","","",28],[11,"BorderBottomRightRadius","","",28],[11,"SetBorderBottomRightRadius","","",28],[11,"BorderBottomLeftRadius","","",28],[11,"SetBorderBottomLeftRadius","","",28],[11,"OutlineColor","","",28],[11,"SetOutlineColor","","",28],[11,"OutlineStyle","","",28],[11,"SetOutlineStyle","","",28],[11,"OutlineWidth","","",28],[11,"SetOutlineWidth","","",28],[11,"OutlineOffset","","",28],[11,"SetOutlineOffset","","",28],[11,"Top","","",28],[11,"SetTop","","",28],[11,"Right","","",28],[11,"SetRight","","",28],[11,"Bottom","","",28],[11,"SetBottom","","",28],[11,"Left","","",28],[11,"SetLeft","","",28],[11,"Display","","",28],[11,"SetDisplay","","",28],[11,"Position","","",28],[11,"SetPosition","","",28],[11,"Clear","","",28],[11,"SetClear","","",28],[11,"ZIndex","","",28],[11,"SetZIndex","","",28],[11,"Direction","","",28],[11,"SetDirection","","",28],[11,"Width","","",28],[11,"SetWidth","","",28],[11,"Height","","",28],[11,"SetHeight","","",28],[11,"MinWidth","","",28],[11,"SetMinWidth","","",28],[11,"MaxWidth","","",28],[11,"SetMaxWidth","","",28],[11,"MinHeight","","",28],[11,"SetMinHeight","","",28],[11,"MaxHeight","","",28],[11,"SetMaxHeight","","",28],[11,"LineHeight","","",28],[11,"SetLineHeight","","",28],[11,"VerticalAlign","","",28],[11,"SetVerticalAlign","","",28],[11,"OverflowX","","",28],[11,"SetOverflowX","","",28],[11,"OverflowY","","",28],[11,"SetOverflowY","","",28],[11,"Visibility","","",28],[11,"SetVisibility","","",28],[11,"Content","","",28],[11,"SetContent","","",28],[11,"ListStylePosition","","",28],[11,"SetListStylePosition","","",28],[11,"ListStyleType","","",28],[11,"SetListStyleType","","",28],[11,"ListStyleImage","","",28],[11,"SetListStyleImage","","",28],[11,"Quotes","","",28],[11,"SetQuotes","","",28],[11,"CounterIncrement","","",28],[11,"SetCounterIncrement","","",28],[11,"CounterReset","","",28],[11,"SetCounterReset","","",28],[11,"BackgroundColor","","",28],[11,"SetBackgroundColor","","",28],[11,"BackgroundImage","","",28],[11,"SetBackgroundImage","","",28],[11,"BackgroundPosition","","",28],[11,"SetBackgroundPosition","","",28],[11,"BackgroundRepeat","","",28],[11,"SetBackgroundRepeat","","",28],[11,"BackgroundAttachment","","",28],[11,"SetBackgroundAttachment","","",28],[11,"BackgroundSize","","",28],[11,"SetBackgroundSize","","",28],[11,"Color","","",28],[11,"SetColor","","",28],[11,"FontFamily","","",28],[11,"SetFontFamily","","",28],[11,"FontStyle","","",28],[11,"SetFontStyle","","",28],[11,"FontVariant","","",28],[11,"SetFontVariant","","",28],[11,"FontWeight","","",28],[11,"SetFontWeight","","",28],[11,"FontSize","","",28],[11,"SetFontSize","","",28],[11,"FontStretch","","",28],[11,"SetFontStretch","","",28],[11,"TextAlign","","",28],[11,"SetTextAlign","","",28],[11,"LetterSpacing","","",28],[11,"SetLetterSpacing","","",28],[11,"WordSpacing","","",28],[11,"SetWordSpacing","","",28],[11,"TextIndent","","",28],[11,"SetTextIndent","","",28],[11,"OverflowWrap","","",28],[11,"SetOverflowWrap","","",28],[11,"WordBreak","","",28],[11,"SetWordBreak","","",28],[11,"TextOverflow","","",28],[11,"SetTextOverflow","","",28],[11,"TextJustify","","",28],[11,"SetTextJustify","","",28],[11,"TextDecoration","","",28],[11,"SetTextDecoration","","",28],[11,"WhiteSpace","","",28],[11,"SetWhiteSpace","","",28],[11,"TextTransform","","",28],[11,"SetTextTransform","","",28],[11,"TextRendering","","",28],[11,"SetTextRendering","","",28],[11,"TableLayout","","",28],[11,"SetTableLayout","","",28],[11,"EmptyCells","","",28],[11,"SetEmptyCells","","",28],[11,"CaptionSide","","",28],[11,"SetCaptionSide","","",28],[11,"BorderCollapse","","",28],[11,"SetBorderCollapse","","",28],[11,"BorderSpacing","","",28],[11,"SetBorderSpacing","","",28],[11,"WritingMode","","",28],[11,"SetWritingMode","","",28],[11,"TextOrientation","","",28],[11,"SetTextOrientation","","",28],[11,"BoxSizing","","",28],[11,"SetBoxSizing","","",28],[11,"Cursor","","",28],[11,"SetCursor","","",28],[11,"PointerEvents","","",28],[11,"SetPointerEvents","","",28],[11,"Opacity","","",28],[11,"SetOpacity","","",28],[11,"BoxShadow","","",28],[11,"SetBoxShadow","","",28],[11,"Clip","","",28],[11,"SetClip","","",28],[11,"TextShadow","","",28],[11,"SetTextShadow","","",28],[11,"Filter","","",28],[11,"SetFilter","","",28],[11,"Transform","","",28],[11,"SetTransform","","",28],[11,"TransformOrigin","","",28],[11,"SetTransformOrigin","","",28],[11,"MixBlendMode","","",28],[11,"SetMixBlendMode","","",28],[11,"ImageRendering","","",28],[11,"SetImageRendering","","",28],[11,"TransitionDuration","","",28],[11,"SetTransitionDuration","","",28],[11,"TransitionTimingFunction","","",28],[11,"SetTransitionTimingFunction","","",28],[11,"TransitionProperty","","",28],[11,"SetTransitionProperty","","",28],[11,"TransitionDelay","","",28],[11,"SetTransitionDelay","","",28],[0,"domrect","script::dom",""],[3,"DOMRect","script::dom::domrect",""],[11,"trace","","",492],[11,"reflector","","",492],[11,"new","","",492],[11,"Top","script::dom::bindings::js","",28],[11,"Bottom","","",28],[11,"Left","","",28],[11,"Right","","",28],[11,"Width","","",28],[11,"Height","","",28],[0,"domrectlist","script::dom",""],[3,"DOMRectList","script::dom::domrectlist",""],[11,"trace","","",493],[11,"reflector","","",493],[11,"new","","",493],[11,"Length","script::dom::bindings::js","",28],[11,"Item","","",28],[11,"IndexedGetter","","",28],[0,"domstringmap","script::dom",""],[3,"DOMStringMap","script::dom::domstringmap",""],[11,"trace","","",494],[11,"reflector","","",494],[11,"new","","",494],[11,"NamedCreator","script::dom::bindings::js","",28],[11,"NamedDeleter","","",28],[11,"NamedSetter","","",28],[11,"NamedGetter","","",28],[0,"comment","script::dom",""],[3,"Comment","script::dom::comment","An HTML comment."],[11,"trace","","",495],[11,"reflector","","",495],[11,"new","","",495],[11,"Constructor","","",495],[11,"characterdata","","",495],[0,"console","script::dom",""],[3,"Console","script::dom::console",""],[11,"trace","","",496],[11,"reflector","","",496],[11,"new","","",496],[11,"Log","script::dom::bindings::js","",28],[11,"Debug","","",28],[11,"Info","","",28],[11,"Warn","","",28],[11,"Error","","",28],[11,"Assert","","",28],[0,"customevent","script::dom",""],[3,"CustomEvent","script::dom::customevent",""],[11,"trace","","",497],[11,"reflector","","",497],[11,"new_uninitialized","","",497],[11,"new","","",497],[11,"Constructor","","",497],[11,"Detail","script::dom::bindings::js","",28],[11,"InitCustomEvent","","",28],[0,"dedicatedworkerglobalscope","script::dom",""],[3,"SendableWorkerScriptChan","script::dom::dedicatedworkerglobalscope","A ScriptChan that can be cloned freely and will silently send a TrustedWorkerAddress with\nevery message. While this SendableWorkerScriptChan is alive, the associated Worker object\nwill remain alive."],[3,"DedicatedWorkerGlobalScope","",""],[8,"DedicatedWorkerGlobalScopeHelpers","",""],[10,"script_chan","","",498],[11,"trace","","",499],[11,"clone","","",499],[11,"send","","",499],[11,"clone","","",499],[11,"trace","","",500],[11,"reflector","","",500],[11,"new","","",500],[11,"run_worker_scope","","",500],[11,"script_chan","script::dom::bindings::js","",28],[11,"PostMessage","","",28],[11,"GetOnmessage","","",28],[11,"SetOnmessage","","",28],[0,"document","script::dom",""],[3,"Document","script::dom::document",""],[3,"DocumentProgressHandler","",""],[4,"IsHTMLDocument","",""],[13,"HTMLDocument","","",501],[13,"NonHTMLDocument","","",501],[4,"DocumentSource","",""],[13,"FromParser","","",502],[13,"NotFromParser","","",502],[4,"DocumentProgressTask","",""],[13,"DOMContentLoaded","","",503],[13,"Load","","",503],[8,"DocumentHelpers","",""],[10,"window","","",504],[10,"encoding_name","","",504],[10,"is_html_document","","",504],[10,"is_fully_active","","",504],[10,"url","","",504],[10,"quirks_mode","","",504],[10,"set_quirks_mode","","",504],[10,"set_encoding_name","","",504],[10,"content_changed","","",504],[10,"content_and_heritage_changed","","",504],[10,"unregister_named_element","","",504],[10,"register_named_element","","",504],[10,"load_anchor_href","","",504],[10,"find_fragment_node","","",504],[10,"hit_test","","",504],[10,"get_nodes_under_mouse","","",504],[10,"set_ready_state","","",504],[10,"get_focused_element","","",504],[10,"is_scripting_enabled","","",504],[10,"begin_focus_transaction","","",504],[10,"request_focus","","",504],[10,"commit_focus_transaction","","",504],[10,"title_changed","","",504],[10,"send_title_to_compositor","","",504],[10,"dirty_all_nodes","","",504],[10,"handle_click_event","","",504],[10,"dispatch_key_event","","",504],[10,"handle_mouse_move_event","","Return need force reflow or not",504],[10,"set_current_script","","",504],[10,"trigger_mozbrowser_event","","",504],[8,"LayoutDocumentHelpers","",""],[10,"is_html_document_for_layout","","",505],[11,"trace","","",501],[11,"eq","","",501],[11,"ne","","",501],[11,"trace","","",506],[11,"reflector","","",506],[11,"window","script::dom::bindings::js","",28],[11,"encoding_name","","",28],[11,"is_html_document","","",28],[11,"is_fully_active","","",28],[11,"url","","",28],[11,"quirks_mode","","",28],[11,"set_quirks_mode","","",28],[11,"set_encoding_name","","",28],[11,"content_changed","","",28],[11,"content_and_heritage_changed","","",28],[11,"unregister_named_element","","Remove any existing association between the provided id and any elements in this document.",28],[11,"register_named_element","","Associate an element present in this document with the provided id.",28],[11,"load_anchor_href","","",28],[11,"find_fragment_node","","Attempt to find a named element in this page's document.\nhttps://html.spec.whatwg.org/multipage/#the-indicated-part-of-the-document",28],[11,"hit_test","","",28],[11,"get_nodes_under_mouse","","",28],[11,"set_ready_state","","",28],[11,"is_scripting_enabled","","Return whether scripting is enabled or not",28],[11,"get_focused_element","","Return the element that currently has focus.",28],[11,"begin_focus_transaction","","Initiate a new round of checking for elements requesting focus. The last element to call\n`request_focus` before `commit_focus_transaction` is called will receive focus.",28],[11,"request_focus","","Request that the given element receive focus once the current transaction is complete.",28],[11,"commit_focus_transaction","","Reassign the focus context to the element that last requested focus during this\ntransaction, or none if no elements requested it.",28],[11,"title_changed","","Handles any updates when the document's title has changed.",28],[11,"send_title_to_compositor","","Sends this document's title to the compositor.",28],[11,"dirty_all_nodes","","",28],[11,"handle_click_event","","",28],[11,"handle_mouse_move_event","","Return need force reflow or not",28],[11,"dispatch_key_event","","The entry point for all key processing for web content",28],[11,"set_current_script","","",28],[11,"trigger_mozbrowser_event","","",28],[11,"eq","script::dom::document","",502],[11,"ne","","",502],[11,"is_html_document_for_layout","script::dom::bindings::js","",24],[11,"Constructor","script::dom::document","",506],[11,"new","","",506],[11,"Implementation","script::dom::bindings::js","",28],[11,"URL","","",28],[11,"GetActiveElement","","",28],[11,"DocumentURI","","",28],[11,"CompatMode","","",28],[11,"CharacterSet","","",28],[11,"InputEncoding","","",28],[11,"ContentType","","",28],[11,"GetDoctype","","",28],[11,"GetDocumentElement","","",28],[11,"GetElementsByTagName","","",28],[11,"GetElementsByTagNameNS","","",28],[11,"GetElementsByClassName","","",28],[11,"GetElementById","","",28],[11,"CreateElement","","",28],[11,"CreateElementNS","","",28],[11,"CreateAttribute","","",28],[11,"CreateDocumentFragment","","",28],[11,"CreateTextNode","","",28],[11,"CreateComment","","",28],[11,"CreateProcessingInstruction","","",28],[11,"ImportNode","","",28],[11,"AdoptNode","","",28],[11,"CreateEvent","","",28],[11,"LastModified","","",28],[11,"CreateRange","","",28],[11,"CreateTreeWalker","","",28],[11,"Title","","",28],[11,"SetTitle","","",28],[11,"GetHead","","",28],[11,"GetCurrentScript","","",28],[11,"GetBody","","",28],[11,"SetBody","","",28],[11,"GetElementsByName","","",28],[11,"Images","","",28],[11,"Embeds","","",28],[11,"Plugins","","",28],[11,"Links","","",28],[11,"Forms","","",28],[11,"Scripts","","",28],[11,"Anchors","","",28],[11,"Applets","","",28],[11,"Location","","",28],[11,"Children","","",28],[11,"QuerySelector","","",28],[11,"QuerySelectorAll","","",28],[11,"ReadyState","","",28],[11,"DefaultView","","",28],[11,"GetCookie","","",28],[11,"SetCookie","","",28],[11,"GetOnload","","",28],[11,"SetOnload","","",28],[11,"GetOnclick","","",28],[11,"SetOnclick","","",28],[11,"GetOninput","","",28],[11,"SetOninput","","",28],[11,"GetOnchange","","",28],[11,"SetOnchange","","",28],[11,"GetOnsubmit","","",28],[11,"SetOnsubmit","","",28],[11,"GetOnreadystatechange","","",28],[11,"SetOnreadystatechange","","",28],[11,"new","script::dom::document","",507],[11,"handler","","",507],[0,"documentfragment","script::dom",""],[3,"DocumentFragment","script::dom::documentfragment",""],[11,"trace","","",508],[11,"reflector","","",508],[11,"new","","",508],[11,"Constructor","","",508],[11,"Children","script::dom::bindings::js","",28],[11,"QuerySelector","","",28],[11,"QuerySelectorAll","","",28],[0,"documenttype","script::dom",""],[3,"DocumentType","script::dom::documenttype","The `DOCTYPE` tag."],[11,"trace","","",509],[11,"reflector","","",509],[11,"new","","",509],[11,"name","","",509],[11,"public_id","","",509],[11,"system_id","","",509],[11,"Name","script::dom::bindings::js","",28],[11,"PublicId","","",28],[11,"SystemId","","",28],[11,"Remove","","",28],[0,"domexception","script::dom",""],[3,"DOMException","script::dom::domexception",""],[4,"DOMErrorName","",""],[13,"IndexSizeError","","",510],[13,"HierarchyRequestError","","",510],[13,"WrongDocumentError","","",510],[13,"InvalidCharacterError","","",510],[13,"NoModificationAllowedError","","",510],[13,"NotFoundError","","",510],[13,"NotSupportedError","","",510],[13,"InvalidStateError","","",510],[13,"SyntaxError","","",510],[13,"InvalidModificationError","","",510],[13,"NamespaceError","","",510],[13,"InvalidAccessError","","",510],[13,"SecurityError","","",510],[13,"NetworkError","","",510],[13,"AbortError","","",510],[13,"URLMismatchError","","",510],[13,"QuotaExceededError","","",510],[13,"TimeoutError","","",510],[13,"InvalidNodeTypeError","","",510],[13,"DataCloneError","","",510],[13,"EncodingError","","",510],[11,"trace","","",510],[11,"fmt","","",510],[11,"trace","","",511],[11,"reflector","","",511],[11,"new","","",511],[11,"Code","script::dom::bindings::js","",28],[11,"Name","","",28],[11,"Message","","",28],[0,"domimplementation","script::dom",""],[3,"DOMImplementation","script::dom::domimplementation",""],[11,"trace","","",512],[11,"reflector","","",512],[11,"new","","",512],[11,"CreateDocumentType","script::dom::bindings::js","",28],[11,"CreateDocument","","",28],[11,"CreateHTMLDocument","","",28],[11,"HasFeature","","",28],[0,"domparser","script::dom",""],[3,"DOMParser","script::dom::domparser",""],[11,"trace","","",513],[11,"reflector","","",513],[11,"new","","",513],[11,"Constructor","","",513],[11,"ParseFromString","script::dom::bindings::js","",28],[0,"domtokenlist","script::dom",""],[3,"DOMTokenList","script::dom::domtokenlist",""],[11,"trace","","",514],[11,"reflector","","",514],[11,"new_inherited","","",514],[11,"new","","",514],[11,"Length","script::dom::bindings::js","",28],[11,"Item","","",28],[11,"IndexedGetter","","",28],[11,"Contains","","",28],[11,"Add","","",28],[11,"Remove","","",28],[11,"Toggle","","",28],[0,"element","script::dom","Element nodes."],[3,"Element","script::dom::element",""],[4,"ElementTypeId","",""],[13,"HTMLElement","","",515],[13,"Element","","",515],[4,"ElementCreator","",""],[13,"ParserCreated","","",516],[13,"ScriptCreated","","",516],[4,"StylePriority","",""],[13,"Important","","",517],[13,"Normal","","",517],[5,"get_attribute_parts","",""],[8,"RawLayoutElementHelpers","",""],[10,"get_attr_val_for_layout","","",518],[10,"get_attr_vals_for_layout","","",518],[10,"get_attr_atom_for_layout","","",518],[10,"has_class_for_layout","","",518],[10,"get_classes_for_layout","","",518],[10,"get_length_attribute_for_layout","","",518],[10,"get_integer_attribute_for_layout","","",518],[10,"get_checked_state_for_layout","","",518],[10,"get_indeterminate_state_for_layout","","",518],[10,"get_unsigned_integer_attribute_for_layout","","",518],[10,"get_simple_color_attribute_for_layout","","",518],[10,"local_name","","",518],[10,"namespace","","",518],[10,"style_attribute","","",518],[8,"LayoutElementHelpers","",""],[10,"html_element_in_html_document_for_layout","","",519],[10,"has_attr_for_layout","","",519],[8,"ElementHelpers","",""],[10,"html_element_in_html_document","","",520],[10,"local_name","","",520],[10,"parsed_name","","",520],[10,"namespace","","",520],[10,"prefix","","",520],[10,"attrs","","",520],[10,"attrs_mut","","",520],[10,"style_attribute","","",520],[10,"summarize","","",520],[10,"is_void","","",520],[10,"remove_inline_style_property","","",520],[10,"update_inline_style","","",520],[10,"get_inline_style_declaration","","",520],[10,"get_important_inline_style_declaration","","",520],[10,"serialize","","",520],[10,"get_root_element","","",520],[8,"AttributeHandlers","",""],[10,"get_attribute","","Returns the attribute with given namespace and case-sensitive local\nname, if any.",521],[10,"get_attributes","","",521],[10,"set_attribute_from_parser","","",521],[10,"set_attribute","","",521],[10,"set_custom_attribute","","",521],[10,"do_set_attribute","","",521],[10,"parse_attribute","","",521],[10,"remove_attribute","","",521],[10,"has_class","","",521],[10,"set_atomic_attribute","","",521],[10,"has_attribute","","",521],[10,"set_bool_attribute","","",521],[10,"get_url_attribute","","",521],[10,"set_url_attribute","","",521],[10,"get_string_attribute","","",521],[10,"set_string_attribute","","",521],[10,"get_tokenlist_attribute","","",521],[10,"set_tokenlist_attribute","","",521],[10,"set_atomic_tokenlist_attribute","","",521],[10,"get_uint_attribute","","",521],[10,"set_uint_attribute","","",521],[8,"ActivationElementHelpers","",""],[10,"as_maybe_activatable","","",522],[10,"click_in_progress","","",522],[10,"set_click_in_progress","","",522],[10,"nearest_activable_element","","",522],[10,"authentic_click_activation","","",522],[11,"trace","","",523],[11,"reflector","","",523],[11,"trace","","",515],[11,"fmt","","",515],[11,"eq","","",515],[11,"ne","","",515],[11,"eq","","",516],[11,"ne","","",516],[11,"create","","",523],[11,"new_inherited","","",523],[11,"new","","",523],[11,"get_attr_val_for_layout","","",523],[11,"get_attr_vals_for_layout","","",523],[11,"get_attr_atom_for_layout","","",523],[11,"has_class_for_layout","","",523],[11,"get_classes_for_layout","","",523],[11,"get_length_attribute_for_layout","","",523],[11,"get_integer_attribute_for_layout","","",523],[11,"get_checked_state_for_layout","","",523],[11,"get_indeterminate_state_for_layout","","",523],[11,"get_unsigned_integer_attribute_for_layout","","",523],[11,"get_simple_color_attribute_for_layout","","",523],[11,"local_name","","",523],[11,"namespace","","",523],[11,"style_attribute","","",523],[11,"html_element_in_html_document_for_layout","script::dom::bindings::js","",24],[11,"has_attr_for_layout","","",24],[11,"eq","script::dom::element","",517],[11,"ne","","",517],[11,"html_element_in_html_document","script::dom::bindings::js","",28],[11,"local_name","","",28],[11,"parsed_name","","",28],[11,"namespace","","",28],[11,"prefix","","",28],[11,"attrs","","",28],[11,"attrs_mut","","",28],[11,"style_attribute","","",28],[11,"summarize","","",28],[11,"is_void","","",28],[11,"remove_inline_style_property","","",28],[11,"update_inline_style","","",28],[11,"get_inline_style_declaration","","",28],[11,"get_important_inline_style_declaration","","",28],[11,"serialize","","",28],[11,"get_root_element","","",28],[11,"get_attribute","","",28],[11,"get_attributes","","",28],[11,"set_attribute_from_parser","","",28],[11,"set_attribute","","",28],[11,"set_custom_attribute","","",28],[11,"do_set_attribute","","",28],[11,"parse_attribute","","",28],[11,"remove_attribute","","",28],[11,"has_class","","",28],[11,"set_atomic_attribute","","",28],[11,"has_attribute","","",28],[11,"set_bool_attribute","","",28],[11,"get_url_attribute","","",28],[11,"set_url_attribute","","",28],[11,"get_string_attribute","","",28],[11,"set_string_attribute","","",28],[11,"get_tokenlist_attribute","","",28],[11,"set_tokenlist_attribute","","",28],[11,"set_atomic_tokenlist_attribute","","",28],[11,"get_uint_attribute","","",28],[11,"set_uint_attribute","","",28],[11,"GetNamespaceURI","","",28],[11,"LocalName","","",28],[11,"GetPrefix","","",28],[11,"TagName","","",28],[11,"Id","","",28],[11,"SetId","","",28],[11,"ClassName","","",28],[11,"SetClassName","","",28],[11,"ClassList","","",28],[11,"Attributes","","",28],[11,"GetAttribute","","",28],[11,"GetAttributeNS","","",28],[11,"SetAttribute","","",28],[11,"SetAttributeNS","","",28],[11,"RemoveAttribute","","",28],[11,"RemoveAttributeNS","","",28],[11,"HasAttribute","","",28],[11,"HasAttributeNS","","",28],[11,"GetElementsByTagName","","",28],[11,"GetElementsByTagNameNS","","",28],[11,"GetElementsByClassName","","",28],[11,"GetClientRects","","",28],[11,"GetBoundingClientRect","","",28],[11,"GetInnerHTML","","",28],[11,"SetInnerHTML","","",28],[11,"GetOuterHTML","","",28],[11,"Children","","",28],[11,"QuerySelector","","",28],[11,"QuerySelectorAll","","",28],[11,"Remove","","",28],[11,"Matches","","",28],[11,"Closest","","",28],[11,"super_type","","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[11,"parse_plain_attribute","","",28],[11,"bind_to_tree","","",28],[11,"unbind_from_tree","","",28],[11,"get_attr","","",28],[11,"get_attrs","","",28],[11,"get_link","","",28],[11,"get_local_name","","",28],[11,"get_namespace","","",28],[11,"get_hover_state","","",28],[11,"get_id","","",28],[11,"get_disabled_state","","",28],[11,"get_enabled_state","","",28],[11,"get_checked_state","","",28],[11,"get_indeterminate_state","","",28],[11,"has_class","","",28],[11,"each_class","","",28],[11,"has_nonzero_border","","",28],[11,"as_maybe_activatable","","",28],[11,"click_in_progress","","",28],[11,"set_click_in_progress","","",28],[11,"nearest_activable_element","","",28],[11,"authentic_click_activation","","Please call this method *only* for real click events",28],[0,"errorevent","script::dom",""],[3,"ErrorEvent","script::dom::errorevent",""],[11,"trace","","",524],[11,"reflector","","",524],[11,"new_uninitialized","","",524],[11,"new","","",524],[11,"Constructor","","",524],[11,"Lineno","script::dom::bindings::js","",28],[11,"Colno","","",28],[11,"Message","","",28],[11,"Filename","","",28],[11,"Error","","",28],[0,"event","script::dom",""],[3,"Event","script::dom::event",""],[4,"EventPhase","",""],[13,"None","","",525],[13,"Capturing","","",525],[13,"AtTarget","","",525],[13,"Bubbling","","",525],[4,"EventTypeId","",""],[13,"CustomEvent","","",526],[13,"HTMLEvent","","",526],[13,"KeyboardEvent","","",526],[13,"MessageEvent","","",526],[13,"MouseEvent","","",526],[13,"ProgressEvent","","",526],[13,"StorageEvent","","",526],[13,"UIEvent","","",526],[13,"ErrorEvent","","",526],[4,"EventBubbles","",""],[13,"Bubbles","","",527],[13,"DoesNotBubble","","",527],[4,"EventCancelable","",""],[13,"Cancelable","","",528],[13,"NotCancelable","","",528],[8,"EventHelpers","",""],[10,"set_trusted","","",529],[10,"fire","","",529],[11,"trace","","",525],[11,"trace","","",526],[11,"eq","","",526],[11,"ne","","",526],[11,"eq","","",527],[11,"ne","","",527],[11,"eq","","",528],[11,"ne","","",528],[11,"trace","","",530],[11,"reflector","","",530],[11,"new_inherited","","",530],[11,"new_uninitialized","","",530],[11,"new","","",530],[11,"Constructor","","",530],[11,"type_id","","",530],[11,"clear_current_target","","",530],[11,"set_current_target","","",530],[11,"set_target","","",530],[11,"set_phase","","",530],[11,"stop_propagation","","",530],[11,"stop_immediate","","",530],[11,"bubbles","","",530],[11,"dispatching","","",530],[11,"set_dispatching","","",530],[11,"initialized","","",530],[11,"EventPhase","script::dom::bindings::js","",28],[11,"Type","","",28],[11,"GetTarget","","",28],[11,"GetCurrentTarget","","",28],[11,"DefaultPrevented","","",28],[11,"PreventDefault","","",28],[11,"StopPropagation","","",28],[11,"StopImmediatePropagation","","",28],[11,"Bubbles","","",28],[11,"Cancelable","","",28],[11,"TimeStamp","","",28],[11,"InitEvent","","",28],[11,"IsTrusted","","",28],[11,"set_trusted","","",28],[11,"fire","","",28],[0,"eventdispatcher","script::dom",""],[5,"dispatch_event","script::dom::eventdispatcher",""],[0,"eventtarget","script::dom",""],[3,"EventListenerEntry","script::dom::eventtarget",""],[3,"EventTarget","",""],[4,"ListenerPhase","",""],[13,"Capturing","","",531],[13,"Bubbling","","",531],[4,"EventTargetTypeId","",""],[13,"Node","","",532],[13,"WebSocket","","",532],[13,"Window","","",532],[13,"Worker","","",532],[13,"WorkerGlobalScope","","",532],[13,"XMLHttpRequestEventTarget","","",532],[4,"EventListenerType","",""],[13,"Additive","","",533],[13,"Inline","","",533],[8,"EventTargetHelpers","",""],[10,"dispatch_event_with_target","","",534],[10,"dispatch_event","","",534],[10,"set_inline_event_listener","","",534],[10,"get_inline_event_listener","","",534],[10,"set_event_handler_uncompiled","","",534],[10,"set_event_handler_common","","",534],[10,"get_event_handler_common","","",534],[10,"has_handlers","","",534],[11,"trace","","",531],[11,"eq","","",531],[11,"ne","","",531],[11,"trace","","",532],[11,"eq","","",532],[11,"ne","","",532],[11,"trace","","",533],[11,"eq","","",533],[11,"ne","","",533],[11,"trace","","",535],[11,"eq","","",535],[11,"ne","","",535],[11,"trace","","",536],[11,"reflector","","",536],[11,"new_inherited","","",536],[11,"get_listeners","","",536],[11,"get_listeners_for","","",536],[11,"type_id","","",536],[11,"dispatch_event_with_target","script::dom::bindings::js","",28],[11,"dispatch_event","","",28],[11,"set_inline_event_listener","","",28],[11,"get_inline_event_listener","","",28],[11,"set_event_handler_uncompiled","","",28],[11,"set_event_handler_common","","",28],[11,"get_event_handler_common","","",28],[11,"has_handlers","","",28],[11,"AddEventListener","","",28],[11,"RemoveEventListener","","",28],[11,"DispatchEvent","","",28],[11,"super_type","","",28],[0,"file","script::dom",""],[3,"File","script::dom::file",""],[11,"trace","","",537],[11,"reflector","","",537],[11,"new","","",537],[11,"name","","",537],[11,"Name","script::dom::bindings::js","",28],[0,"formdata","script::dom",""],[3,"FormData","script::dom::formdata",""],[4,"FormDatum","",""],[13,"StringData","","",538],[13,"FileData","","",538],[11,"trace","","",538],[11,"clone","","",538],[11,"trace","","",539],[11,"reflector","","",539],[11,"new","","",539],[11,"Constructor","","",539],[11,"Append","script::dom::bindings::js","",28],[11,"Append_","","",28],[11,"Delete","","",28],[11,"Get","","",28],[11,"Has","","",28],[11,"Set","","",28],[11,"Set_","","",28],[0,"htmlanchorelement","script::dom",""],[3,"HTMLAnchorElement","script::dom::htmlanchorelement",""],[11,"trace","","",540],[11,"reflector","","",540],[11,"is_htmlanchorelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlanchorelement","",540],[11,"super_type","script::dom::bindings::js","",28],[11,"handle_event","","",28],[11,"parse_plain_attribute","","",28],[11,"Text","","",28],[11,"SetText","","",28],[11,"RelList","","",28],[11,"as_element","","",28],[11,"is_instance_activatable","","",28],[11,"pre_click_activation","","",28],[11,"canceled_activation","","",28],[11,"activation_behavior","","",28],[11,"implicit_submission","","",28],[0,"htmlappletelement","script::dom",""],[3,"HTMLAppletElement","script::dom::htmlappletelement",""],[11,"trace","","",541],[11,"reflector","","",541],[11,"is_htmlappletelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlappletelement","",541],[0,"htmlareaelement","script::dom",""],[3,"HTMLAreaElement","script::dom::htmlareaelement",""],[11,"trace","","",542],[11,"reflector","","",542],[11,"is_htmlareaelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlareaelement","",542],[11,"super_type","script::dom::bindings::js","",28],[11,"parse_plain_attribute","","",28],[11,"RelList","","",28],[0,"htmlaudioelement","script::dom",""],[3,"HTMLAudioElement","script::dom::htmlaudioelement",""],[11,"trace","","",543],[11,"reflector","","",543],[11,"is_htmlaudioelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlaudioelement","",543],[0,"htmlbaseelement","script::dom",""],[3,"HTMLBaseElement","script::dom::htmlbaseelement",""],[11,"trace","","",544],[11,"reflector","","",544],[11,"is_htmlbaseelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlbaseelement","",544],[0,"htmlbodyelement","script::dom",""],[3,"HTMLBodyElement","script::dom::htmlbodyelement",""],[8,"HTMLBodyElementHelpers","",""],[10,"get_background_color","","",545],[11,"trace","","",546],[11,"reflector","","",546],[11,"is_htmlbodyelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlbodyelement","",546],[11,"GetOnunload","script::dom::bindings::js","",28],[11,"SetOnunload","","",28],[11,"get_background_color","script::dom::htmlbodyelement","",546],[11,"super_type","script::dom::bindings::js","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[0,"htmlbrelement","script::dom",""],[3,"HTMLBRElement","script::dom::htmlbrelement",""],[11,"trace","","",547],[11,"reflector","","",547],[11,"is_htmlbrelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlbrelement","",547],[0,"htmlbuttonelement","script::dom",""],[3,"HTMLButtonElement","script::dom::htmlbuttonelement",""],[11,"trace","","",548],[11,"reflector","","",548],[11,"is_htmlbuttonelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlbuttonelement","",548],[11,"Validity","script::dom::bindings::js","",28],[11,"Disabled","","",28],[11,"SetDisabled","","",28],[11,"Type","","",28],[11,"SetType","","",28],[11,"FormAction","","",28],[11,"SetFormAction","","",28],[11,"FormEnctype","","",28],[11,"SetFormEnctype","","",28],[11,"FormMethod","","",28],[11,"SetFormMethod","","",28],[11,"FormTarget","","",28],[11,"SetFormTarget","","",28],[11,"super_type","","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[11,"bind_to_tree","","",28],[11,"unbind_from_tree","","",28],[11,"to_element","","",28],[11,"as_element","","",28],[11,"is_instance_activatable","","",28],[11,"pre_click_activation","","",28],[11,"canceled_activation","","",28],[11,"activation_behavior","","",28],[11,"implicit_submission","","",28],[0,"htmlcanvaselement","script::dom",""],[3,"HTMLCanvasElement","script::dom::htmlcanvaselement",""],[8,"LayoutHTMLCanvasElementHelpers","",""],[10,"get_renderer","","",549],[10,"get_canvas_width","","",549],[10,"get_canvas_height","","",549],[8,"HTMLCanvasElementHelpers","",""],[10,"get_size","","",550],[10,"get_2d_context","","",550],[10,"is_valid","","",550],[11,"trace","","",551],[11,"reflector","","",551],[11,"is_htmlcanvaselement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlcanvaselement","",551],[11,"get_renderer","script::dom::bindings::js","",24],[11,"get_canvas_width","","",24],[11,"get_canvas_height","","",24],[11,"get_size","","",28],[11,"get_2d_context","","",28],[11,"is_valid","","",28],[11,"Width","","",28],[11,"SetWidth","","",28],[11,"Height","","",28],[11,"SetHeight","","",28],[11,"GetContext","","",28],[11,"super_type","","",28],[11,"before_remove_attr","","",28],[11,"after_set_attr","","",28],[0,"htmlcollection","script::dom",""],[3,"HTMLCollection","script::dom::htmlcollection",""],[4,"CollectionTypeId","",""],[13,"Static","","",552],[13,"Live","","",552],[8,"CollectionFilter","",""],[10,"filter","","",553],[11,"trace","","",552],[11,"trace","","",554],[11,"reflector","","",554],[11,"new","","",554],[11,"create","","",554],[11,"by_tag_name","","",554],[11,"by_tag_name_ns","","",554],[11,"by_class_name","","",554],[11,"children","","",554],[11,"Length","script::dom::bindings::js","",28],[11,"Item","","",28],[11,"NamedItem","","",28],[11,"IndexedGetter","","",28],[11,"NamedGetter","","",28],[0,"htmldataelement","script::dom",""],[3,"HTMLDataElement","script::dom::htmldataelement",""],[11,"trace","","",555],[11,"reflector","","",555],[11,"is_htmldataelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmldataelement","",555],[0,"htmldatalistelement","script::dom",""],[3,"HTMLDataListElement","script::dom::htmldatalistelement",""],[11,"trace","","",556],[11,"reflector","","",556],[11,"is_htmldatalistelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmldatalistelement","",556],[11,"Options","script::dom::bindings::js","",28],[0,"htmldirectoryelement","script::dom",""],[3,"HTMLDirectoryElement","script::dom::htmldirectoryelement",""],[11,"trace","","",557],[11,"reflector","","",557],[11,"is_htmldirectoryelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmldirectoryelement","",557],[0,"htmldivelement","script::dom",""],[3,"HTMLDivElement","script::dom::htmldivelement",""],[11,"trace","","",558],[11,"reflector","","",558],[11,"is_htmldivelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmldivelement","",558],[0,"htmldlistelement","script::dom",""],[3,"HTMLDListElement","script::dom::htmldlistelement",""],[11,"trace","","",559],[11,"reflector","","",559],[11,"is_htmldlistelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmldlistelement","",559],[0,"htmlelement","script::dom",""],[3,"HTMLElement","script::dom::htmlelement",""],[4,"HTMLElementTypeId","",""],[13,"HTMLElement","","",560],[13,"HTMLAnchorElement","","",560],[13,"HTMLAppletElement","","",560],[13,"HTMLAreaElement","","",560],[13,"HTMLBaseElement","","",560],[13,"HTMLBRElement","","",560],[13,"HTMLBodyElement","","",560],[13,"HTMLButtonElement","","",560],[13,"HTMLCanvasElement","","",560],[13,"HTMLDataElement","","",560],[13,"HTMLDataListElement","","",560],[13,"HTMLDirectoryElement","","",560],[13,"HTMLDListElement","","",560],[13,"HTMLDivElement","","",560],[13,"HTMLEmbedElement","","",560],[13,"HTMLFieldSetElement","","",560],[13,"HTMLFontElement","","",560],[13,"HTMLFormElement","","",560],[13,"HTMLFrameElement","","",560],[13,"HTMLFrameSetElement","","",560],[13,"HTMLHRElement","","",560],[13,"HTMLHeadElement","","",560],[13,"HTMLHeadingElement","","",560],[13,"HTMLHtmlElement","","",560],[13,"HTMLIFrameElement","","",560],[13,"HTMLImageElement","","",560],[13,"HTMLInputElement","","",560],[13,"HTMLLabelElement","","",560],[13,"HTMLLegendElement","","",560],[13,"HTMLLinkElement","","",560],[13,"HTMLLIElement","","",560],[13,"HTMLMapElement","","",560],[13,"HTMLMediaElement","","",560],[13,"HTMLMetaElement","","",560],[13,"HTMLMeterElement","","",560],[13,"HTMLModElement","","",560],[13,"HTMLObjectElement","","",560],[13,"HTMLOListElement","","",560],[13,"HTMLOptGroupElement","","",560],[13,"HTMLOptionElement","","",560],[13,"HTMLOutputElement","","",560],[13,"HTMLParagraphElement","","",560],[13,"HTMLParamElement","","",560],[13,"HTMLPreElement","","",560],[13,"HTMLProgressElement","","",560],[13,"HTMLQuoteElement","","",560],[13,"HTMLScriptElement","","",560],[13,"HTMLSelectElement","","",560],[13,"HTMLSourceElement","","",560],[13,"HTMLSpanElement","","",560],[13,"HTMLStyleElement","","",560],[13,"HTMLTableElement","","",560],[13,"HTMLTableCaptionElement","","",560],[13,"HTMLTableCellElement","","",560],[13,"HTMLTableColElement","","",560],[13,"HTMLTableRowElement","","",560],[13,"HTMLTableSectionElement","","",560],[13,"HTMLTemplateElement","","",560],[13,"HTMLTextAreaElement","","",560],[13,"HTMLTimeElement","","",560],[13,"HTMLTitleElement","","",560],[13,"HTMLTrackElement","","",560],[13,"HTMLUListElement","","",560],[13,"HTMLUnknownElement","","",560],[8,"HTMLElementCustomAttributeHelpers","",""],[10,"set_custom_attr","","",561],[10,"get_custom_attr","","",561],[10,"delete_custom_attr","","",561],[11,"trace","","",562],[11,"reflector","","",562],[11,"is_htmlelement","script::dom::eventtarget","",536],[11,"new_inherited","script::dom::htmlelement","",562],[11,"new","","",562],[11,"Style","script::dom::bindings::js","",28],[11,"Title","","",28],[11,"SetTitle","","",28],[11,"Lang","","",28],[11,"SetLang","","",28],[11,"Hidden","","",28],[11,"SetHidden","","",28],[11,"GetOnclick","","",28],[11,"SetOnclick","","",28],[11,"GetOninput","","",28],[11,"SetOninput","","",28],[11,"GetOnchange","","",28],[11,"SetOnchange","","",28],[11,"GetOnsubmit","","",28],[11,"SetOnsubmit","","",28],[11,"Dataset","","",28],[11,"GetOnload","","",28],[11,"SetOnload","","",28],[11,"Click","","",28],[11,"set_custom_attr","","",28],[11,"get_custom_attr","","",28],[11,"delete_custom_attr","","",28],[11,"super_type","","",28],[11,"after_set_attr","","",28],[11,"trace","script::dom::htmlelement","",560],[11,"fmt","","",560],[11,"eq","","",560],[11,"ne","","",560],[0,"htmlembedelement","script::dom",""],[3,"HTMLEmbedElement","script::dom::htmlembedelement",""],[11,"trace","","",563],[11,"reflector","","",563],[11,"is_htmlembedelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlembedelement","",563],[0,"htmlfieldsetelement","script::dom",""],[3,"HTMLFieldSetElement","script::dom::htmlfieldsetelement",""],[11,"trace","","",564],[11,"reflector","","",564],[11,"is_htmlfieldsetelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlfieldsetelement","",564],[11,"Elements","script::dom::bindings::js","",28],[11,"Validity","","",28],[11,"Disabled","","",28],[11,"SetDisabled","","",28],[11,"super_type","","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[0,"htmlfontelement","script::dom",""],[3,"HTMLFontElement","script::dom::htmlfontelement",""],[11,"trace","","",565],[11,"reflector","","",565],[11,"is_htmlfontelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlfontelement","",565],[0,"htmlformelement","script::dom",""],[3,"HTMLFormElement","script::dom::htmlformelement",""],[3,"FormDatum","",""],[12,"ty","","",566],[12,"name","","",566],[12,"value","","",566],[4,"SubmittedFrom","",""],[13,"FromFormSubmitMethod","","",567],[13,"NotFromFormSubmitMethod","","",567],[4,"ResetFrom","",""],[13,"FromFormResetMethod","","",568],[13,"NotFromFormResetMethod","","",568],[4,"FormEncType","",""],[13,"TextPlainEncoded","","",569],[13,"UrlEncoded","","",569],[13,"FormDataEncoded","","",569],[4,"FormMethod","",""],[13,"FormGet","","",570],[13,"FormPost","","",570],[13,"FormDialog","","",570],[4,"FormSubmitter","",""],[13,"FormElement","","",571],[13,"InputElement","","",571],[13,"ButtonElement","","",571],[8,"HTMLFormElementHelpers","",""],[10,"submit","","",572],[10,"get_form_dataset","","",572],[10,"reset","","",572],[8,"FormControl","",""],[11,"form_owner","","",573],[11,"get_form_attribute","","",573],[10,"to_element","","",573],[11,"trace","","",574],[11,"reflector","","",574],[11,"is_htmlformelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlformelement","",574],[11,"AcceptCharset","script::dom::bindings::js","",28],[11,"SetAcceptCharset","","",28],[11,"Action","","",28],[11,"SetAction","","",28],[11,"Autocomplete","","",28],[11,"SetAutocomplete","","",28],[11,"Enctype","","",28],[11,"SetEnctype","","",28],[11,"Encoding","","",28],[11,"SetEncoding","","",28],[11,"Method","","",28],[11,"SetMethod","","",28],[11,"Name","","",28],[11,"SetName","","",28],[11,"NoValidate","","",28],[11,"SetNoValidate","","",28],[11,"Target","","",28],[11,"SetTarget","","",28],[11,"Submit","","",28],[11,"Reset","","",28],[11,"submit","","",28],[11,"get_form_dataset","","",28],[11,"reset","","",28],[0,"htmlframeelement","script::dom",""],[3,"HTMLFrameElement","script::dom::htmlframeelement",""],[11,"trace","","",575],[11,"reflector","","",575],[11,"is_htmlframeelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlframeelement","",575],[0,"htmlframesetelement","script::dom",""],[3,"HTMLFrameSetElement","script::dom::htmlframesetelement",""],[11,"trace","","",576],[11,"reflector","","",576],[11,"is_htmlframesetelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlframesetelement","",576],[0,"htmlheadelement","script::dom",""],[3,"HTMLHeadElement","script::dom::htmlheadelement",""],[11,"trace","","",577],[11,"reflector","","",577],[11,"is_htmlheadelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlheadelement","",577],[11,"super_type","script::dom::bindings::js","",28],[11,"bind_to_tree","","",28],[0,"htmlheadingelement","script::dom",""],[3,"HTMLHeadingElement","script::dom::htmlheadingelement",""],[4,"HeadingLevel","",""],[13,"Heading1","","",578],[13,"Heading2","","",578],[13,"Heading3","","",578],[13,"Heading4","","",578],[13,"Heading5","","",578],[13,"Heading6","","",578],[11,"trace","","",578],[11,"trace","","",579],[11,"reflector","","",579],[11,"is_htmlheadingelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlheadingelement","",579],[0,"htmlhrelement","script::dom",""],[3,"HTMLHRElement","script::dom::htmlhrelement",""],[11,"trace","","",580],[11,"reflector","","",580],[11,"is_htmlhrelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlhrelement","",580],[0,"htmlhtmlelement","script::dom",""],[3,"HTMLHtmlElement","script::dom::htmlhtmlelement",""],[11,"trace","","",581],[11,"reflector","","",581],[11,"is_htmlhtmlelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlhtmlelement","",581],[0,"htmliframeelement","script::dom",""],[3,"HTMLIFrameElement","script::dom::htmliframeelement",""],[8,"HTMLIFrameElementHelpers","",""],[10,"is_sandboxed","","",582],[10,"get_url","","",582],[10,"process_the_iframe_attributes","","http://www.whatwg.org/html/#process-the-iframe-attributes",582],[10,"generate_new_subpage_id","","",582],[10,"navigate_child_browsing_context","","",582],[10,"dispatch_mozbrowser_event","","",582],[10,"update_subpage_id","","",582],[11,"trace","","",583],[11,"reflector","","",583],[11,"is_htmliframeelement","script::dom::eventtarget","",536],[11,"is_sandboxed","script::dom::bindings::js","",28],[11,"get_url","","",28],[11,"generate_new_subpage_id","","",28],[11,"navigate_child_browsing_context","","",28],[11,"process_the_iframe_attributes","","",28],[11,"dispatch_mozbrowser_event","","",28],[11,"update_subpage_id","","",28],[11,"new","script::dom::htmliframeelement","",583],[11,"containing_page_pipeline_id","","",583],[11,"subpage_id","","",583],[11,"Src","script::dom::bindings::js","",28],[11,"SetSrc","","",28],[11,"Sandbox","","",28],[11,"SetSandbox","","",28],[11,"GetContentWindow","","",28],[11,"GetContentDocument","","",28],[11,"Mozbrowser","","",28],[11,"SetMozbrowser","","",28],[11,"GoBack","","",28],[11,"GoForward","","",28],[11,"Reload","","",28],[11,"Stop","","",28],[11,"super_type","","",28],[11,"after_set_attr","","",28],[11,"parse_plain_attribute","","",28],[11,"before_remove_attr","","",28],[11,"bind_to_tree","","",28],[0,"htmlimageelement","script::dom",""],[3,"HTMLImageElement","script::dom::htmlimageelement",""],[8,"LayoutHTMLImageElementHelpers","",""],[10,"image","","",584],[11,"trace","","",585],[11,"reflector","","",585],[11,"is_htmlimageelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlimageelement","",585],[11,"image","script::dom::bindings::js","",24],[11,"Alt","","",28],[11,"SetAlt","","",28],[11,"Src","","",28],[11,"SetSrc","","",28],[11,"UseMap","","",28],[11,"SetUseMap","","",28],[11,"IsMap","","",28],[11,"SetIsMap","","",28],[11,"Width","","",28],[11,"SetWidth","","",28],[11,"Height","","",28],[11,"SetHeight","","",28],[11,"Name","","",28],[11,"SetName","","",28],[11,"Align","","",28],[11,"SetAlign","","",28],[11,"Hspace","","",28],[11,"SetHspace","","",28],[11,"Vspace","","",28],[11,"SetVspace","","",28],[11,"LongDesc","","",28],[11,"SetLongDesc","","",28],[11,"Border","","",28],[11,"SetBorder","","",28],[11,"super_type","","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[11,"parse_plain_attribute","","",28],[0,"htmlinputelement","script::dom",""],[3,"HTMLInputElement","script::dom::htmlinputelement",""],[8,"LayoutHTMLInputElementHelpers","",""],[10,"get_value_for_layout","","",586],[10,"get_size_for_layout","","",586],[8,"RawLayoutHTMLInputElementHelpers","",""],[10,"get_checked_state_for_layout","","",587],[10,"get_indeterminate_state_for_layout","","",587],[10,"get_size_for_layout","","",587],[8,"HTMLInputElementHelpers","",""],[10,"force_relayout","","",588],[10,"radio_group_updated","","",588],[10,"get_radio_group_name","","",588],[10,"update_checked_state","","",588],[10,"get_size","","",588],[10,"get_indeterminate_state","","",588],[10,"mutable","","",588],[10,"reset","","",588],[11,"trace","","",589],[11,"reflector","","",589],[11,"is_htmlinputelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlinputelement","",589],[11,"get_value_for_layout","script::dom::bindings::js","",24],[11,"get_size_for_layout","","",24],[11,"get_checked_state_for_layout","script::dom::htmlinputelement","",589],[11,"get_indeterminate_state_for_layout","","",589],[11,"get_size_for_layout","","",589],[11,"Disabled","script::dom::bindings::js","",28],[11,"SetDisabled","","",28],[11,"DefaultChecked","","",28],[11,"SetDefaultChecked","","",28],[11,"Checked","","",28],[11,"SetChecked","","",28],[11,"ReadOnly","","",28],[11,"SetReadOnly","","",28],[11,"Size","","",28],[11,"SetSize","","",28],[11,"Type","","",28],[11,"SetType","","",28],[11,"Value","","",28],[11,"SetValue","","",28],[11,"DefaultValue","","",28],[11,"SetDefaultValue","","",28],[11,"Name","","",28],[11,"SetName","","",28],[11,"FormAction","","",28],[11,"SetFormAction","","",28],[11,"FormEnctype","","",28],[11,"SetFormEnctype","","",28],[11,"FormMethod","","",28],[11,"SetFormMethod","","",28],[11,"FormTarget","","",28],[11,"SetFormTarget","","",28],[11,"Indeterminate","","",28],[11,"SetIndeterminate","","",28],[11,"force_relayout","","",28],[11,"radio_group_updated","","",28],[11,"get_radio_group_name","","",28],[11,"update_checked_state","","",28],[11,"get_size","","",28],[11,"get_indeterminate_state","","",28],[11,"mutable","","",28],[11,"reset","","",28],[11,"super_type","","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[11,"parse_plain_attribute","","",28],[11,"bind_to_tree","","",28],[11,"unbind_from_tree","","",28],[11,"handle_event","","",28],[11,"to_element","","",28],[11,"as_element","","",28],[11,"is_instance_activatable","","",28],[11,"pre_click_activation","","",28],[11,"canceled_activation","","",28],[11,"activation_behavior","","",28],[11,"implicit_submission","","",28],[0,"htmllabelelement","script::dom",""],[3,"HTMLLabelElement","script::dom::htmllabelelement",""],[11,"trace","","",590],[11,"reflector","","",590],[11,"is_htmllabelelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmllabelelement","",590],[0,"htmllegendelement","script::dom",""],[3,"HTMLLegendElement","script::dom::htmllegendelement",""],[11,"trace","","",591],[11,"reflector","","",591],[11,"is_htmllegendelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmllegendelement","",591],[0,"htmllielement","script::dom",""],[3,"HTMLLIElement","script::dom::htmllielement",""],[11,"trace","","",592],[11,"reflector","","",592],[11,"is_htmllielement","script::dom::eventtarget","",536],[11,"new","script::dom::htmllielement","",592],[0,"htmllinkelement","script::dom",""],[3,"HTMLLinkElement","script::dom::htmllinkelement",""],[11,"trace","","",593],[11,"reflector","","",593],[11,"is_htmllinkelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmllinkelement","",593],[11,"super_type","script::dom::bindings::js","",28],[11,"after_set_attr","","",28],[11,"parse_plain_attribute","","",28],[11,"bind_to_tree","","",28],[11,"Href","","",28],[11,"SetHref","","",28],[11,"Rel","","",28],[11,"SetRel","","",28],[11,"Media","","",28],[11,"SetMedia","","",28],[11,"Hreflang","","",28],[11,"SetHreflang","","",28],[11,"Type","","",28],[11,"SetType","","",28],[11,"RelList","","",28],[0,"htmlmapelement","script::dom",""],[3,"HTMLMapElement","script::dom::htmlmapelement",""],[11,"trace","","",594],[11,"reflector","","",594],[11,"is_htmlmapelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlmapelement","",594],[0,"htmlmediaelement","script::dom",""],[3,"HTMLMediaElement","script::dom::htmlmediaelement",""],[4,"HTMLMediaElementTypeId","",""],[13,"HTMLAudioElement","","",595],[13,"HTMLVideoElement","","",595],[11,"trace","","",596],[11,"reflector","","",596],[11,"is_htmlmediaelement","script::dom::eventtarget","",536],[11,"new_inherited","script::dom::htmlmediaelement","",596],[11,"htmlelement","","",596],[11,"trace","","",595],[11,"fmt","","",595],[11,"eq","","",595],[11,"ne","","",595],[0,"htmlmetaelement","script::dom",""],[3,"HTMLMetaElement","script::dom::htmlmetaelement",""],[11,"trace","","",597],[11,"reflector","","",597],[11,"is_htmlmetaelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlmetaelement","",597],[0,"htmlmeterelement","script::dom",""],[3,"HTMLMeterElement","script::dom::htmlmeterelement",""],[11,"trace","","",598],[11,"reflector","","",598],[11,"is_htmlmeterelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlmeterelement","",598],[0,"htmlmodelement","script::dom",""],[3,"HTMLModElement","script::dom::htmlmodelement",""],[11,"trace","","",599],[11,"reflector","","",599],[11,"is_htmlmodelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlmodelement","",599],[0,"htmlobjectelement","script::dom",""],[3,"HTMLObjectElement","script::dom::htmlobjectelement",""],[5,"is_image_data","",""],[11,"trace","","",600],[11,"reflector","","",600],[11,"is_htmlobjectelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlobjectelement","",600],[11,"Validity","script::dom::bindings::js","",28],[11,"Type","","",28],[11,"SetType","","",28],[11,"super_type","","",28],[11,"after_set_attr","","",28],[0,"htmlolistelement","script::dom",""],[3,"HTMLOListElement","script::dom::htmlolistelement",""],[11,"trace","","",601],[11,"reflector","","",601],[11,"is_htmlolistelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlolistelement","",601],[0,"htmloptgroupelement","script::dom",""],[3,"HTMLOptGroupElement","script::dom::htmloptgroupelement",""],[11,"trace","","",602],[11,"reflector","","",602],[11,"is_htmloptgroupelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmloptgroupelement","",602],[11,"Disabled","script::dom::bindings::js","",28],[11,"SetDisabled","","",28],[11,"super_type","","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[0,"htmloptionelement","script::dom",""],[3,"HTMLOptionElement","script::dom::htmloptionelement",""],[11,"trace","","",603],[11,"reflector","","",603],[11,"is_htmloptionelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmloptionelement","",603],[11,"Disabled","script::dom::bindings::js","",28],[11,"SetDisabled","","",28],[11,"Text","","",28],[11,"SetText","","",28],[11,"Value","","",28],[11,"SetValue","","",28],[11,"Label","","",28],[11,"SetLabel","","",28],[11,"super_type","","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[11,"bind_to_tree","","",28],[11,"unbind_from_tree","","",28],[0,"htmloutputelement","script::dom",""],[3,"HTMLOutputElement","script::dom::htmloutputelement",""],[11,"trace","","",604],[11,"reflector","","",604],[11,"is_htmloutputelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmloutputelement","",604],[11,"Validity","script::dom::bindings::js","",28],[0,"htmlparagraphelement","script::dom",""],[3,"HTMLParagraphElement","script::dom::htmlparagraphelement",""],[11,"trace","","",605],[11,"reflector","","",605],[11,"is_htmlparagraphelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlparagraphelement","",605],[0,"htmlparamelement","script::dom",""],[3,"HTMLParamElement","script::dom::htmlparamelement",""],[11,"trace","","",606],[11,"reflector","","",606],[11,"is_htmlparamelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlparamelement","",606],[0,"htmlpreelement","script::dom",""],[3,"HTMLPreElement","script::dom::htmlpreelement",""],[11,"trace","","",607],[11,"reflector","","",607],[11,"is_htmlpreelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlpreelement","",607],[0,"htmlprogresselement","script::dom",""],[3,"HTMLProgressElement","script::dom::htmlprogresselement",""],[11,"trace","","",608],[11,"reflector","","",608],[11,"is_htmlprogresselement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlprogresselement","",608],[0,"htmlquoteelement","script::dom",""],[3,"HTMLQuoteElement","script::dom::htmlquoteelement",""],[11,"trace","","",609],[11,"reflector","","",609],[11,"is_htmlquoteelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlquoteelement","",609],[0,"htmlscriptelement","script::dom",""],[3,"HTMLScriptElement","script::dom::htmlscriptelement",""],[4,"ScriptOrigin","",""],[13,"Internal","","",610],[13,"External","","",610],[8,"HTMLScriptElementHelpers","",""],[10,"prepare","","Prepare a script (<http://www.whatwg.org/html/#prepare-a-script>)",611],[10,"execute","","[Execute a script block]\n(https://html.spec.whatwg.org/multipage/#execute-the-script-block)",611],[10,"is_javascript","","Prepare a script, steps 6 and 7.",611],[10,"mark_already_started","","Set the \"already started\" flag (<https://whatwg.org/html/#already-started>)",611],[10,"queue_error_event","","",611],[10,"dispatch_before_script_execute_event","","Dispatch beforescriptexecute event.",611],[10,"dispatch_after_script_execute_event","","Dispatch afterscriptexecute event.",611],[10,"dispatch_load_event","","Dispatch load event.",611],[10,"dispatch_error_event","","Dispatch error event.",611],[11,"trace","","",612],[11,"reflector","","",612],[11,"is_htmlscriptelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlscriptelement","",612],[11,"prepare","script::dom::bindings::js","",28],[11,"execute","","",28],[11,"queue_error_event","","",28],[11,"dispatch_before_script_execute_event","","",28],[11,"dispatch_after_script_execute_event","","",28],[11,"dispatch_load_event","","",28],[11,"dispatch_error_event","","",28],[11,"is_javascript","","",28],[11,"mark_already_started","","",28],[11,"super_type","","",28],[11,"after_set_attr","","",28],[11,"child_inserted","","",28],[11,"bind_to_tree","","",28],[11,"cloning_steps","","",28],[11,"Src","","",28],[11,"SetSrc","","",28],[11,"Text","","",28],[11,"SetText","","",28],[0,"htmlselectelement","script::dom",""],[3,"HTMLSelectElement","script::dom::htmlselectelement",""],[11,"trace","","",613],[11,"reflector","","",613],[11,"is_htmlselectelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlselectelement","",613],[11,"Validity","script::dom::bindings::js","",28],[11,"Add","","",28],[11,"Disabled","","",28],[11,"SetDisabled","","",28],[11,"Type","","",28],[11,"super_type","","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[11,"bind_to_tree","","",28],[11,"unbind_from_tree","","",28],[0,"htmlspanelement","script::dom",""],[3,"HTMLSpanElement","script::dom::htmlspanelement",""],[11,"trace","","",614],[11,"reflector","","",614],[11,"is_htmlspanelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlspanelement","",614],[0,"htmlsourceelement","script::dom",""],[3,"HTMLSourceElement","script::dom::htmlsourceelement",""],[11,"trace","","",615],[11,"reflector","","",615],[11,"is_htmlsourceelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlsourceelement","",615],[0,"htmlstyleelement","script::dom",""],[3,"HTMLStyleElement","script::dom::htmlstyleelement",""],[8,"StyleElementHelpers","",""],[10,"parse_own_css","","",616],[11,"trace","","",617],[11,"reflector","","",617],[11,"is_htmlstyleelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlstyleelement","",617],[11,"parse_own_css","script::dom::bindings::js","",28],[11,"super_type","","",28],[11,"child_inserted","","",28],[11,"bind_to_tree","","",28],[0,"htmltableelement","script::dom",""],[3,"HTMLTableElement","script::dom::htmltableelement",""],[8,"HTMLTableElementHelpers","",""],[10,"get_background_color","","",618],[10,"get_border","","",618],[10,"get_cellspacing","","",618],[10,"get_width","","",618],[11,"trace","","",619],[11,"reflector","","",619],[11,"is_htmltableelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmltableelement","",619],[11,"GetCaption","script::dom::bindings::js","",28],[11,"SetCaption","","",28],[11,"get_background_color","script::dom::htmltableelement","",619],[11,"get_border","","",619],[11,"get_cellspacing","","",619],[11,"get_width","","",619],[11,"super_type","script::dom::bindings::js","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[0,"htmltablecaptionelement","script::dom",""],[3,"HTMLTableCaptionElement","script::dom::htmltablecaptionelement",""],[11,"trace","","",620],[11,"reflector","","",620],[11,"is_htmltablecaptionelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmltablecaptionelement","",620],[0,"htmltablecellelement","script::dom",""],[3,"HTMLTableCellElement","script::dom::htmltablecellelement",""],[4,"HTMLTableCellElementTypeId","",""],[13,"HTMLTableDataCellElement","","",621],[13,"HTMLTableHeaderCellElement","","",621],[8,"HTMLTableCellElementHelpers","",""],[10,"get_background_color","","",622],[10,"get_colspan","","",622],[10,"get_width","","",622],[11,"trace","","",621],[11,"fmt","","",621],[11,"eq","","",621],[11,"ne","","",621],[11,"trace","","",623],[11,"reflector","","",623],[11,"is_htmltablecellelement","script::dom::eventtarget","",536],[11,"new_inherited","script::dom::htmltablecellelement","",623],[11,"htmlelement","","",623],[11,"get_background_color","","",623],[11,"get_colspan","","",623],[11,"get_width","","",623],[11,"super_type","script::dom::bindings::js","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[0,"htmltabledatacellelement","script::dom",""],[3,"HTMLTableDataCellElement","script::dom::htmltabledatacellelement",""],[11,"trace","","",624],[11,"reflector","","",624],[11,"is_htmltabledatacellelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmltabledatacellelement","",624],[0,"htmltableheadercellelement","script::dom",""],[3,"HTMLTableHeaderCellElement","script::dom::htmltableheadercellelement",""],[11,"trace","","",625],[11,"reflector","","",625],[11,"is_htmltableheadercellelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmltableheadercellelement","",625],[0,"htmltablecolelement","script::dom",""],[3,"HTMLTableColElement","script::dom::htmltablecolelement",""],[11,"trace","","",626],[11,"reflector","","",626],[11,"is_htmltablecolelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmltablecolelement","",626],[0,"htmltablerowelement","script::dom",""],[3,"HTMLTableRowElement","script::dom::htmltablerowelement",""],[8,"HTMLTableRowElementHelpers","",""],[10,"get_background_color","","",627],[11,"trace","","",628],[11,"reflector","","",628],[11,"is_htmltablerowelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmltablerowelement","",628],[11,"get_background_color","","",628],[11,"super_type","script::dom::bindings::js","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[0,"htmltablesectionelement","script::dom",""],[3,"HTMLTableSectionElement","script::dom::htmltablesectionelement",""],[8,"HTMLTableSectionElementHelpers","",""],[10,"get_background_color","","",629],[11,"trace","","",630],[11,"reflector","","",630],[11,"is_htmltablesectionelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmltablesectionelement","",630],[11,"get_background_color","","",630],[11,"super_type","script::dom::bindings::js","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[0,"htmltemplateelement","script::dom",""],[3,"HTMLTemplateElement","script::dom::htmltemplateelement",""],[11,"trace","","",631],[11,"reflector","","",631],[11,"is_htmltemplateelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmltemplateelement","",631],[0,"htmltextareaelement","script::dom",""],[3,"HTMLTextAreaElement","script::dom::htmltextareaelement",""],[3,"ChangeEventRunnable","",""],[8,"LayoutHTMLTextAreaElementHelpers","",""],[10,"get_value_for_layout","","",632],[8,"RawLayoutHTMLTextAreaElementHelpers","",""],[10,"get_cols_for_layout","","",633],[10,"get_rows_for_layout","","",633],[8,"HTMLTextAreaElementHelpers","",""],[10,"mutable","","",634],[10,"reset","","",634],[11,"trace","","",635],[11,"reflector","","",635],[11,"is_htmltextareaelement","script::dom::eventtarget","",536],[11,"get_value_for_layout","script::dom::bindings::js","",24],[11,"get_cols_for_layout","script::dom::htmltextareaelement","",635],[11,"get_rows_for_layout","","",635],[11,"new","","",635],[11,"Cols","script::dom::bindings::js","",28],[11,"SetCols","","",28],[11,"Disabled","","",28],[11,"SetDisabled","","",28],[11,"Name","","",28],[11,"SetName","","",28],[11,"Placeholder","","",28],[11,"SetPlaceholder","","",28],[11,"ReadOnly","","",28],[11,"SetReadOnly","","",28],[11,"Required","","",28],[11,"SetRequired","","",28],[11,"Rows","","",28],[11,"SetRows","","",28],[11,"Wrap","","",28],[11,"SetWrap","","",28],[11,"Type","","",28],[11,"DefaultValue","","",28],[11,"SetDefaultValue","","",28],[11,"Value","","",28],[11,"SetValue","","",28],[11,"mutable","","",28],[11,"reset","","",28],[11,"super_type","","",28],[11,"after_set_attr","","",28],[11,"before_remove_attr","","",28],[11,"bind_to_tree","","",28],[11,"parse_plain_attribute","","",28],[11,"unbind_from_tree","","",28],[11,"child_inserted","","",28],[11,"handle_event","","",28],[11,"to_element","","",28],[11,"handler","script::dom::htmltextareaelement","",636],[0,"htmltimeelement","script::dom",""],[3,"HTMLTimeElement","script::dom::htmltimeelement",""],[11,"trace","","",637],[11,"reflector","","",637],[11,"is_htmltimeelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmltimeelement","",637],[0,"htmltitleelement","script::dom",""],[3,"HTMLTitleElement","script::dom::htmltitleelement",""],[11,"trace","","",638],[11,"reflector","","",638],[11,"is_htmltitleelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmltitleelement","",638],[11,"Text","script::dom::bindings::js","",28],[11,"SetText","","",28],[11,"super_type","","",28],[11,"child_inserted","","",28],[11,"bind_to_tree","","",28],[0,"htmltrackelement","script::dom",""],[3,"HTMLTrackElement","script::dom::htmltrackelement",""],[11,"trace","","",639],[11,"reflector","","",639],[11,"is_htmltrackelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmltrackelement","",639],[0,"htmlulistelement","script::dom",""],[3,"HTMLUListElement","script::dom::htmlulistelement",""],[11,"trace","","",640],[11,"reflector","","",640],[11,"is_htmlulistelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlulistelement","",640],[0,"htmlvideoelement","script::dom",""],[3,"HTMLVideoElement","script::dom::htmlvideoelement",""],[11,"trace","","",641],[11,"reflector","","",641],[11,"is_htmlvideoelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlvideoelement","",641],[0,"htmlunknownelement","script::dom",""],[3,"HTMLUnknownElement","script::dom::htmlunknownelement",""],[11,"trace","","",642],[11,"reflector","","",642],[11,"is_htmlunknownelement","script::dom::eventtarget","",536],[11,"new","script::dom::htmlunknownelement","",642],[0,"imagedata","script::dom",""],[3,"ImageData","script::dom::imagedata",""],[8,"ImageDataHelpers","",""],[10,"get_data_array","","",643],[10,"get_size","","",643],[11,"trace","","",644],[11,"reflector","","",644],[11,"new","","",644],[11,"get_data_array","script::dom::bindings::js","",28],[11,"get_size","","",28],[11,"Width","","",28],[11,"Height","","",28],[11,"Data","","",28],[0,"keyboardevent","script::dom",""],[3,"KeyboardEvent","script::dom::keyboardevent",""],[3,"KeyEventProperties","",""],[12,"key","","",645],[12,"code","","",645],[12,"location","","",645],[12,"char_code","","",645],[12,"key_code","","",645],[11,"trace","","",646],[11,"reflector","","",646],[11,"is_keyboardevent","script::dom::event","",530],[11,"new_uninitialized","script::dom::keyboardevent","",646],[11,"new","","",646],[11,"Constructor","","",646],[11,"key_properties","","",646],[11,"is_printable","","",645],[11,"InitKeyboardEvent","script::dom::bindings::js","",28],[11,"Key","","",28],[11,"Code","","",28],[11,"Location","","",28],[11,"CtrlKey","","",28],[11,"ShiftKey","","",28],[11,"AltKey","","",28],[11,"MetaKey","","",28],[11,"Repeat","","",28],[11,"IsComposing","","",28],[11,"GetModifierState","","",28],[11,"CharCode","","",28],[11,"KeyCode","","",28],[11,"Which","","",28],[0,"location","script::dom",""],[3,"Location","script::dom::location",""],[11,"trace","","",647],[11,"reflector","","",647],[11,"new","","",647],[11,"Assign","script::dom::bindings::js","",28],[11,"Href","","",28],[11,"Stringify","","",28],[11,"Search","","",28],[11,"Hash","","",28],[0,"messageevent","script::dom",""],[3,"MessageEvent","script::dom::messageevent",""],[11,"trace","","",648],[11,"reflector","","",648],[11,"is_messageevent","script::dom::event","",530],[11,"new_uninitialized","script::dom::messageevent","",648],[11,"new_initialized","","",648],[11,"new","","",648],[11,"Constructor","","",648],[11,"dispatch_jsval","","",648],[11,"Data","script::dom::bindings::js","",28],[11,"Origin","","",28],[11,"LastEventId","","",28],[0,"mouseevent","script::dom",""],[3,"MouseEvent","script::dom::mouseevent",""],[11,"trace","","",649],[11,"reflector","","",649],[11,"is_mouseevent","script::dom::event","",530],[11,"new_uninitialized","script::dom::mouseevent","",649],[11,"new","","",649],[11,"Constructor","","",649],[11,"ScreenX","script::dom::bindings::js","",28],[11,"ScreenY","","",28],[11,"ClientX","","",28],[11,"ClientY","","",28],[11,"CtrlKey","","",28],[11,"ShiftKey","","",28],[11,"AltKey","","",28],[11,"MetaKey","","",28],[11,"Button","","",28],[11,"GetRelatedTarget","","",28],[11,"InitMouseEvent","","",28],[0,"namednodemap","script::dom",""],[3,"NamedNodeMap","script::dom::namednodemap",""],[11,"trace","","",650],[11,"reflector","","",650],[11,"new","","",650],[11,"Length","script::dom::bindings::js","",28],[11,"Item","","",28],[11,"IndexedGetter","","",28],[0,"navigator","script::dom",""],[3,"Navigator","script::dom::navigator",""],[11,"trace","","",651],[11,"reflector","","",651],[11,"new","","",651],[11,"Product","script::dom::bindings::js","",28],[11,"TaintEnabled","","",28],[11,"AppName","","",28],[11,"AppCodeName","","",28],[11,"Platform","","",28],[11,"UserAgent","","",28],[11,"AppVersion","","",28],[0,"navigatorinfo","script::dom",""],[5,"Product","script::dom::navigatorinfo",""],[5,"TaintEnabled","",""],[5,"AppName","",""],[5,"AppCodeName","",""],[5,"Platform","",""],[5,"UserAgent","",""],[5,"AppVersion","",""],[0,"node","script::dom","The core DOM types. Defines the basic DOM hierarchy as well as all the HTML elements."],[3,"Node","script::dom::node","An HTML node."],[3,"NodeFlags","","Flags for node items."],[3,"SharedLayoutData","","Layout data that is shared between the script and layout tasks."],[12,"style","","The results of CSS styling for this node.",652],[3,"LayoutData","","Encapsulates the abstract layout data."],[3,"LayoutDataRef","",""],[12,"data_cell","","",653],[3,"QuerySelectorIterator","",""],[3,"NodeChildrenIterator","",""],[3,"ReverseChildrenIterator","",""],[3,"AncestorIterator","",""],[3,"TreeIterator","",""],[3,"TrustedNodeAddress","","The address of a node known to be valid. These are sent from script to layout,\nand are also used in the HTML parser interface."],[4,"NodeTypeId","","The different types of nodes."],[13,"DocumentType","","",654],[13,"DocumentFragment","","",654],[13,"Comment","","",654],[13,"Document","","",654],[13,"Element","","",654],[13,"Text","","",654],[13,"ProcessingInstruction","","",654],[4,"CloneChildrenFlag","","Specifies whether children must be recursively cloned or not."],[13,"CloneChildren","","",655],[13,"DoNotCloneChildren","","",655],[4,"NodeDamage","","A summary of the changes that happened to a node."],[13,"NodeStyleDamaged","","The node's `style` attribute changed.",656],[13,"OtherNodeDamage","","Other parts of a node changed; attributes, text content, etc.",656],[5,"from_untrusted_node_address","","If the given untrusted node address represents a valid DOM node in the given runtime,\nreturns it."],[5,"document_from_node","",""],[5,"window_from_node","",""],[6,"ChildElementIterator","",""],[17,"IS_IN_DOC","","Specifies whether this node is in a document."],[17,"IN_HOVER_STATE","","Specifies whether this node is in hover state."],[17,"IN_DISABLED_STATE","","Specifies whether this node is in disabled state."],[17,"IN_ENABLED_STATE","","Specifies whether this node is in enabled state."],[17,"HAS_CHANGED","","Specifies whether this node _must_ be reflowed regardless of style differences."],[17,"IS_DIRTY","","Specifies whether this node needs style recalc on next reflow."],[17,"HAS_DIRTY_SIBLINGS","","Specifies whether this node has siblings (inclusive of itself) which changed since the last reflow."],[17,"HAS_DIRTY_DESCENDANTS","","Specifies whether this node has descendants (inclusive of itself) which have changed since the last reflow."],[17,"CLICK_IN_PROGRESS","","Specifies whether or not there is an authentic click in progress on this element."],[8,"NodeHelpers","",""],[10,"ancestors","","",657],[10,"inclusive_ancestors","","",657],[10,"children","","",657],[10,"rev_children","","",657],[10,"child_elements","","",657],[10,"following_siblings","","",657],[10,"is_in_doc","","",657],[10,"is_inclusive_ancestor_of","","",657],[10,"is_parent_of","","",657],[10,"type_id","","",657],[10,"parent_node","","",657],[10,"first_child","","",657],[10,"last_child","","",657],[10,"prev_sibling","","",657],[10,"next_sibling","","",657],[10,"owner_doc","","",657],[10,"set_owner_doc","","",657],[10,"is_in_html_doc","","",657],[10,"is_element","","",657],[10,"is_document","","",657],[10,"is_doctype","","",657],[10,"is_text","","",657],[10,"is_anchor_element","","",657],[10,"get_flag","","",657],[10,"set_flag","","",657],[10,"get_hover_state","","",657],[10,"set_hover_state","","",657],[10,"get_disabled_state","","",657],[10,"set_disabled_state","","",657],[10,"get_enabled_state","","",657],[10,"set_enabled_state","","",657],[10,"get_has_changed","","",657],[10,"set_has_changed","","",657],[10,"get_is_dirty","","",657],[10,"set_is_dirty","","",657],[10,"get_has_dirty_siblings","","",657],[10,"set_has_dirty_siblings","","",657],[10,"get_has_dirty_descendants","","",657],[10,"set_has_dirty_descendants","","",657],[10,"dirty","","Marks the given node as `IS_DIRTY`, its siblings as `HAS_DIRTY_SIBLINGS` (to deal with\nsibling selectors), its ancestors as `HAS_DIRTY_DESCENDANTS`, and its descendants as\n`IS_DIRTY`. If anything more than the node's style was damaged, this method also sets the\n`HAS_CHANGED` flag.",657],[10,"force_dirty_ancestors","","Similar to `dirty`, but will always walk the ancestors to mark them dirty,\ntoo. This is useful when a node is reparented. The node will frequently\nalready be marked as `changed` to skip double-dirties, but the ancestors\nstill need to be marked as `HAS_DIRTY_DESCENDANTS`.",657],[10,"dirty_impl","","",657],[10,"dump","","",657],[10,"dump_indent","","",657],[10,"debug_str","","",657],[10,"traverse_preorder","","",657],[10,"inclusively_following_siblings","","",657],[10,"to_trusted_node_address","","",657],[10,"get_bounding_content_box","","",657],[10,"get_content_boxes","","",657],[10,"query_selector","","",657],[10,"query_selector_iter","","",657],[10,"query_selector_all","","",657],[10,"remove_self","","",657],[10,"get_unique_id","","",657],[10,"summarize","","",657],[10,"teardown","","",657],[8,"LayoutNodeHelpers","",""],[10,"type_id_for_layout","","",658],[10,"parent_node_ref","","",658],[10,"first_child_ref","","",658],[10,"last_child_ref","","",658],[10,"prev_sibling_ref","","",658],[10,"next_sibling_ref","","",658],[10,"owner_doc_for_layout","","",658],[10,"is_element_for_layout","","",658],[10,"get_flag","","",658],[10,"set_flag","","",658],[8,"RawLayoutNodeHelpers","",""],[10,"get_hover_state_for_layout","","",659],[10,"get_disabled_state_for_layout","","",659],[10,"get_enabled_state_for_layout","","",659],[10,"type_id_for_layout","","",659],[8,"DisabledStateHelpers","",""],[10,"check_ancestors_disabled_state_for_form_control","","",660],[10,"check_parent_disabled_state_for_option","","",660],[10,"check_disabled_attribute","","",660],[11,"trace","","",661],[11,"reflector","","",661],[11,"is_node","script::dom::eventtarget","",536],[11,"trace","script::dom::node","",662],[11,"hash","","",662],[11,"cmp","","",662],[11,"partial_cmp","","",662],[11,"lt","","",662],[11,"le","","",662],[11,"gt","","",662],[11,"ge","","",662],[11,"clone","","",662],[11,"eq","","",662],[11,"ne","","",662],[11,"empty","","Returns an empty set of flags.",662],[11,"all","","Returns the set containing all flags.",662],[11,"bits","","Returns the raw value of the flags currently stored.",662],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",662],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",662],[11,"is_empty","","Returns `true` if no flags are currently stored.",662],[11,"is_all","","Returns `true` if all flags are currently set.",662],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",662],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",662],[11,"insert","","Inserts the specified flags in-place.",662],[11,"remove","","Removes the specified flags in-place.",662],[11,"toggle","","Toggles the specified flags in-place.",662],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",662],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",662],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",662],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",662],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",662],[11,"new","","",662],[11,"drop","","",661],[11,"trace","","",653],[11,"new","","",653],[11,"dispose","","Sends layout data, if any, back to the layout task to be destroyed.",653],[11,"borrow_unchecked","","Borrows the layout data immutably, *asserting that there are no mutators*. Bad things will\nhappen if you try to mutate the layout data while this is held. This is the only thread-\nsafe layout data accessor.",653],[11,"borrow","","Borrows the layout data immutably. This function is *not* thread-safe.",653],[11,"borrow_mut","","Borrows the layout data mutably. This function is *not* thread-safe.",653],[11,"trace","","",654],[11,"fmt","","",654],[11,"eq","","",654],[11,"ne","","",654],[6,"Item","",""],[11,"next","","",663],[11,"teardown","script::dom::bindings::js","",28],[11,"dump","","Dumps the subtree rooted at this node, for debugging.",28],[11,"dump_indent","","Dumps the node tree, for debugging, with indentation.",28],[11,"debug_str","","Returns a string that describes this node.",28],[11,"is_in_doc","","",28],[11,"type_id","","Returns the type ID of this node. Fails if this node is borrowed mutably.",28],[11,"parent_node","","",28],[11,"first_child","","",28],[11,"last_child","","",28],[11,"prev_sibling","","Returns the previous sibling of this node. Fails if this node is borrowed mutably.",28],[11,"next_sibling","","Returns the next sibling of this node. Fails if this node is borrowed mutably.",28],[11,"is_element","","",28],[11,"is_document","","",28],[11,"is_anchor_element","","",28],[11,"is_doctype","","",28],[11,"is_text","","",28],[11,"get_flag","","",28],[11,"set_flag","","",28],[11,"get_hover_state","","",28],[11,"set_hover_state","","",28],[11,"get_disabled_state","","",28],[11,"set_disabled_state","","",28],[11,"get_enabled_state","","",28],[11,"set_enabled_state","","",28],[11,"get_has_changed","","",28],[11,"set_has_changed","","",28],[11,"get_is_dirty","","",28],[11,"set_is_dirty","","",28],[11,"get_has_dirty_siblings","","",28],[11,"set_has_dirty_siblings","","",28],[11,"get_has_dirty_descendants","","",28],[11,"set_has_dirty_descendants","","",28],[11,"force_dirty_ancestors","","",28],[11,"dirty","","",28],[11,"dirty_impl","","",28],[11,"traverse_preorder","","Iterates over this node and all its descendants, in preorder.",28],[11,"inclusively_following_siblings","","",28],[11,"is_inclusive_ancestor_of","","",28],[11,"following_siblings","","",28],[11,"is_parent_of","","",28],[11,"to_trusted_node_address","","",28],[11,"get_bounding_content_box","","",28],[11,"get_content_boxes","","",28],[11,"query_selector","","",28],[11,"query_selector_iter","","Get an iterator over all nodes which match a set of selectors\nBe careful not to do anything which may manipulate the DOM tree whilst iterating, otherwise\nthe iterator may be invalidated",28],[11,"query_selector_all","","",28],[11,"ancestors","","",28],[11,"inclusive_ancestors","","",28],[11,"owner_doc","","",28],[11,"set_owner_doc","","",28],[11,"is_in_html_doc","","",28],[11,"children","","",28],[11,"rev_children","","",28],[11,"child_elements","","",28],[11,"remove_self","","",28],[11,"get_unique_id","","",28],[11,"summarize","","",28],[11,"type_id_for_layout","","",24],[11,"is_element_for_layout","","",24],[11,"parent_node_ref","","",24],[11,"first_child_ref","","",24],[11,"last_child_ref","","",24],[11,"prev_sibling_ref","","",24],[11,"next_sibling_ref","","",24],[11,"owner_doc_for_layout","","",24],[11,"get_flag","","",24],[11,"set_flag","","",24],[11,"get_hover_state_for_layout","script::dom::node","",661],[11,"get_disabled_state_for_layout","","",661],[11,"get_enabled_state_for_layout","","",661],[11,"type_id_for_layout","","",661],[6,"Item","",""],[11,"next","","",664],[6,"Item","",""],[11,"next","","",665],[6,"Item","",""],[11,"next","","",666],[6,"Item","",""],[11,"next","","",667],[11,"eq","","",655],[11,"ne","","",655],[11,"reflect_node","","",661],[11,"new_inherited","","",661],[11,"new_without_doc","","",661],[11,"layout_data","","",661],[11,"layout_data_mut","","",661],[11,"layout_data_unchecked","","",661],[11,"adopt","","",661],[11,"clone","","",661],[11,"collect_text_contents","","",661],[11,"NodeType","script::dom::bindings::js","",28],[11,"NodeName","","",28],[11,"GetBaseURI","","",28],[11,"GetOwnerDocument","","",28],[11,"GetParentNode","","",28],[11,"GetParentElement","","",28],[11,"HasChildNodes","","",28],[11,"ChildNodes","","",28],[11,"GetFirstChild","","",28],[11,"GetLastChild","","",28],[11,"GetPreviousSibling","","",28],[11,"GetNextSibling","","",28],[11,"GetNodeValue","","",28],[11,"SetNodeValue","","",28],[11,"GetTextContent","","",28],[11,"SetTextContent","","",28],[11,"InsertBefore","","",28],[11,"AppendChild","","",28],[11,"ReplaceChild","","",28],[11,"RemoveChild","","",28],[11,"Normalize","","",28],[11,"CloneNode","","",28],[11,"IsEqualNode","","",28],[11,"CompareDocumentPosition","","",28],[11,"Contains","","",28],[11,"LookupPrefix","","",28],[11,"LookupNamespaceURI","","",28],[11,"IsDefaultNamespace","","",28],[11,"eq","script::dom::node","",668],[11,"ne","","",668],[11,"clone","","",668],[11,"super_type","script::dom::bindings::js","",28],[6,"Element","script::dom::node",""],[11,"parent_node","script::dom::bindings::js","",28],[11,"first_child","","",28],[11,"last_child","","",28],[11,"prev_sibling","","",28],[11,"next_sibling","","",28],[11,"is_document","","",28],[11,"is_element","","",28],[11,"as_element","","",28],[11,"match_attr","","",28],[11,"is_html_element_in_html_document","","",28],[11,"has_changed","","",28],[11,"set_changed","","",28],[11,"is_dirty","","",28],[11,"set_dirty","","",28],[11,"has_dirty_siblings","","",28],[11,"set_dirty_siblings","","",28],[11,"has_dirty_descendants","","",28],[11,"set_dirty_descendants","","",28],[11,"check_ancestors_disabled_state_for_form_control","","",28],[11,"check_parent_disabled_state_for_option","","",28],[11,"check_disabled_attribute","","",28],[11,"eq","script::dom::node","",656],[11,"ne","","",656],[11,"clone","","",656],[0,"nodeiterator","script::dom",""],[3,"NodeIterator","script::dom::nodeiterator",""],[11,"trace","","",669],[11,"reflector","","",669],[11,"new","","",669],[0,"nodelist","script::dom",""],[3,"NodeList","script::dom::nodelist",""],[4,"NodeListType","",""],[13,"Simple","","",670],[13,"Children","","",670],[11,"trace","","",670],[11,"trace","","",671],[11,"reflector","","",671],[11,"new","","",671],[11,"new_simple_list","","",671],[11,"new_child_list","","",671],[11,"Length","script::dom::bindings::js","",28],[11,"Item","","",28],[11,"IndexedGetter","","",28],[0,"processinginstruction","script::dom",""],[3,"ProcessingInstruction","script::dom::processinginstruction","An HTML processing instruction node."],[11,"trace","","",672],[11,"reflector","","",672],[11,"is_processinginstruction","script::dom::eventtarget","",536],[11,"new","script::dom::processinginstruction","",672],[11,"characterdata","","",672],[11,"target","","",672],[11,"Target","script::dom::bindings::js","",28],[0,"performance","script::dom",""],[3,"Performance","script::dom::performance",""],[6,"DOMHighResTimeStamp","",""],[11,"trace","","",673],[11,"reflector","","",673],[11,"new","","",673],[11,"Timing","script::dom::bindings::js","",28],[11,"Now","","",28],[0,"performancetiming","script::dom",""],[3,"PerformanceTiming","script::dom::performancetiming",""],[8,"PerformanceTimingHelpers","",""],[10,"NavigationStartPrecise","","",674],[11,"trace","","",675],[11,"reflector","","",675],[11,"new","","",675],[11,"NavigationStart","script::dom::bindings::js","",28],[11,"NavigationStartPrecise","","",28],[0,"progressevent","script::dom",""],[3,"ProgressEvent","script::dom::progressevent",""],[11,"trace","","",676],[11,"reflector","","",676],[11,"is_progressevent","script::dom::event","",530],[11,"new","script::dom::progressevent","",676],[11,"Constructor","","",676],[11,"LengthComputable","script::dom::bindings::js","",28],[11,"Loaded","","",28],[11,"Total","","",28],[0,"range","script::dom",""],[3,"Range","script::dom::range",""],[11,"trace","","",677],[11,"reflector","","",677],[11,"new","","",677],[11,"Constructor","","",677],[11,"Detach","script::dom::bindings::js","http://dom.spec.whatwg.org/#dom-range-detach",28],[0,"screen","script::dom",""],[3,"Screen","script::dom::screen",""],[11,"trace","","",678],[11,"reflector","","",678],[11,"new","","",678],[11,"ColorDepth","script::dom::bindings::js","",28],[11,"PixelDepth","","",28],[0,"servohtmlparser","script::dom","The bulk of the HTML parser integration is in `script::parse::html`.\nThis module is mostly about its interaction with DOM memory management."],[3,"Sink","script::dom::servohtmlparser",""],[12,"base_url","","",679],[12,"document","","",679],[3,"FragmentContext","","FragmentContext is used only to pass this group of related values\ninto functions."],[12,"context_elem","","",680],[12,"form_elem","","",680],[3,"ServoHTMLParser","",""],[6,"Tokenizer","",""],[11,"trace","","",679],[11,"parse_chunk","","",681],[11,"finish","","",681],[11,"new","","",681],[11,"new_for_fragment","","",681],[11,"tokenizer","","",681],[11,"reflector","","",681],[11,"trace","","",681],[0,"storage","script::dom",""],[3,"Storage","script::dom::storage",""],[3,"StorageEventRunnable","",""],[11,"trace","","",682],[11,"reflector","","",682],[11,"new","","",682],[11,"Length","script::dom::bindings::js","",28],[11,"Key","","",28],[11,"GetItem","","",28],[11,"NamedGetter","","",28],[11,"SetItem","","",28],[11,"NamedSetter","","",28],[11,"NamedCreator","","",28],[11,"RemoveItem","","",28],[11,"NamedDeleter","","",28],[11,"Clear","","",28],[11,"handler","script::dom::storage","",683],[0,"storageevent","script::dom",""],[3,"StorageEvent","script::dom::storageevent",""],[11,"trace","","",684],[11,"reflector","","",684],[11,"new_inherited","","",684],[11,"new","","",684],[11,"Constructor","","",684],[11,"GetKey","script::dom::bindings::js","",28],[11,"GetOldValue","","",28],[11,"GetNewValue","","",28],[11,"Url","","",28],[11,"GetStorageArea","","",28],[0,"text","script::dom",""],[3,"Text","script::dom::text","An HTML text node."],[11,"trace","","",685],[11,"reflector","","",685],[11,"is_text","script::dom::eventtarget","",536],[11,"new","script::dom::text","",685],[11,"Constructor","","",685],[11,"characterdata","","",685],[0,"textencoder","script::dom",""],[3,"TextEncoder","script::dom::textencoder",""],[11,"trace","","",686],[11,"reflector","","",686],[11,"new","","",686],[11,"Constructor","","",686],[11,"Encoding","script::dom::bindings::js","",28],[11,"Encode","","",28],[0,"treewalker","script::dom",""],[3,"TreeWalker","script::dom::treewalker",""],[4,"Filter","",""],[13,"None","","",687],[13,"Native","","",687],[13,"JS","","",687],[0,"NodeFilterConstants","",""],[17,"FILTER_ACCEPT","script::dom::treewalker::NodeFilterConstants",""],[17,"FILTER_REJECT","",""],[17,"FILTER_SKIP","",""],[17,"SHOW_ALL","",""],[17,"SHOW_ELEMENT","",""],[17,"SHOW_ATTRIBUTE","",""],[17,"SHOW_TEXT","",""],[17,"SHOW_CDATA_SECTION","",""],[17,"SHOW_ENTITY_REFERENCE","",""],[17,"SHOW_ENTITY","",""],[17,"SHOW_PROCESSING_INSTRUCTION","",""],[17,"SHOW_COMMENT","",""],[17,"SHOW_DOCUMENT","",""],[17,"SHOW_DOCUMENT_TYPE","",""],[17,"SHOW_DOCUMENT_FRAGMENT","",""],[17,"SHOW_NOTATION","",""],[8,"TreeWalkerHelpers","script::dom::treewalker",""],[10,"parent_node","","",688],[10,"first_child","","",688],[10,"last_child","","",688],[10,"next_sibling","","",688],[10,"prev_sibling","","",688],[10,"next_node","","",688],[10,"prev_node","","",688],[11,"trace","","",689],[11,"reflector","","",689],[11,"new_with_filter","","",689],[11,"new","","",689],[11,"Root","script::dom::bindings::js","",28],[11,"WhatToShow","","",28],[11,"GetFilter","","",28],[11,"CurrentNode","","",28],[11,"SetCurrentNode","","",28],[11,"ParentNode","","",28],[11,"FirstChild","","",28],[11,"LastChild","","",28],[11,"PreviousSibling","","",28],[11,"NextSibling","","",28],[11,"PreviousNode","","",28],[11,"NextNode","","",28],[11,"parent_node","","",28],[11,"first_child","","",28],[11,"last_child","","",28],[11,"next_sibling","","",28],[11,"prev_sibling","","",28],[11,"prev_node","","",28],[11,"next_node","","",28],[6,"Item","script::dom::treewalker",""],[11,"next","script::dom::bindings::js","",28],[11,"trace","script::dom::treewalker","",687],[0,"uievent","script::dom",""],[3,"UIEvent","script::dom::uievent",""],[11,"trace","","",690],[11,"reflector","","",690],[11,"is_uievent","script::dom::event","",530],[11,"new_inherited","script::dom::uievent","",690],[11,"new_uninitialized","","",690],[11,"new","","",690],[11,"Constructor","","",690],[11,"GetView","script::dom::bindings::js","",28],[11,"Detail","","",28],[11,"InitUIEvent","","",28],[0,"urlhelper","script::dom",""],[3,"UrlHelper","script::dom::urlhelper",""],[11,"Href","","",691],[11,"Search","","",691],[11,"Hash","","",691],[11,"SameOrigin","","https://html.spec.whatwg.org/multipage/browsers.html#same-origin",691],[0,"urlsearchparams","script::dom",""],[3,"URLSearchParams","script::dom::urlsearchparams",""],[8,"URLSearchParamsHelpers","",""],[10,"serialize","","",692],[10,"update_steps","","",692],[11,"trace","","",693],[11,"reflector","","",693],[11,"new","","",693],[11,"Constructor","","",693],[11,"Append","script::dom::bindings::js","",28],[11,"Delete","","",28],[11,"Get","","",28],[11,"Has","","",28],[11,"Set","","",28],[11,"serialize","script::dom::urlsearchparams","",693],[11,"update_steps","","",693],[0,"validitystate","script::dom",""],[3,"ValidityState","script::dom::validitystate",""],[11,"trace","","",694],[11,"reflector","","",694],[11,"new","","",694],[0,"virtualmethods","script::dom",""],[5,"vtable_for","script::dom::virtualmethods","Obtain a VirtualMethods instance for a given Node-derived object. Any\nmethod call on the trait object will invoke the corresponding method on the\nconcrete type, propagating up the parent hierarchy unless otherwise\ninterrupted."],[8,"VirtualMethods","","Trait to allow DOM nodes to opt-in to overriding (or adding to) common\nbehaviours. Replicates the effect of C++ virtual methods."],[10,"super_type","","Returns self as the superclass of the implementation for this trait,\nif any.",695],[11,"after_set_attr","","Called when changing or adding attributes, after the attribute's value\nhas been updated.",695],[11,"before_remove_attr","","Called when changing or removing attributes, before any modification\nhas taken place.",695],[11,"parse_plain_attribute","","Returns the right AttrValue variant for the attribute with name `name`\non this element.",695],[11,"bind_to_tree","","Called when a Node is appended to a tree, where 'tree_in_doc' indicates\nwhether the tree is part of a Document.",695],[11,"unbind_from_tree","","Called when a Node is removed from a tree, where 'tree_in_doc'\nindicates whether the tree is part of a Document.",695],[11,"child_inserted","","Called on the parent when a node is added to its child list.",695],[11,"handle_event","","Called during event dispatch after the bubbling phase completes.",695],[11,"cloning_steps","","https://dom.spec.whatwg.org/#concept-node-clone (step 5)",695],[0,"websocket","script::dom",""],[3,"WebSocket","script::dom::websocket",""],[11,"trace","","",696],[11,"reflector","","",696],[11,"new_inherited","","",696],[11,"new","","",696],[11,"Constructor","","",696],[11,"Url","script::dom::bindings::js","",28],[0,"window","script::dom",""],[3,"Window","script::dom::window",""],[4,"ReflowReason","","Extra information concerning the reason for reflowing."],[13,"CachedPageNeededReflow","","",697],[13,"FirstLoad","","",697],[13,"KeyEvent","","",697],[13,"MouseEvent","","",697],[13,"Query","","",697],[13,"ReceivedReflowEvent","","",697],[13,"Timer","","",697],[13,"Viewport","","",697],[13,"WindowResize","","",697],[13,"DOMContentLoaded","","",697],[13,"DocumentLoaded","","",697],[5,"base64_btoa","",""],[5,"base64_atob","",""],[8,"WindowHelpers","",""],[10,"clear_js_context","","",698],[10,"init_browser_context","","",698],[10,"load_url","","",698],[10,"handle_fire_timer","","",698],[10,"reflow","","",698],[10,"join_layout","","",698],[10,"layout","","",698],[10,"content_box_query","","",698],[10,"content_boxes_query","","",698],[10,"handle_reflow_complete_msg","","",698],[10,"handle_resize_inactive_msg","","",698],[10,"set_fragment_name","","",698],[10,"steal_fragment_name","","",698],[10,"set_window_size","","",698],[10,"window_size","","",698],[10,"get_url","","",698],[10,"resource_task","","",698],[10,"devtools_chan","","",698],[10,"layout_chan","","",698],[10,"constellation_chan","","",698],[10,"windowproxy_handler","","",698],[10,"get_next_subpage_id","","",698],[10,"layout_is_idle","","",698],[10,"set_resize_event","","",698],[10,"steal_resize_event","","",698],[10,"set_page_clip_rect_with_new_viewport","","",698],[10,"set_devtools_wants_updates","","",698],[10,"IndexedGetter","","",698],[10,"thaw","","",698],[10,"freeze","","",698],[8,"ScriptHelpers","",""],[10,"evaluate_js_on_global_with_result","","",699],[10,"evaluate_script_on_global_with_result","","",699],[11,"trace","","",700],[11,"reflector","","",700],[11,"clear_js_context_for_script_deallocation","","",700],[11,"get_cx","","",700],[11,"script_chan","","",700],[11,"get_next_worker_id","","",700],[11,"pipeline","","",700],[11,"subpage","","",700],[11,"parent_info","","",700],[11,"control_chan","","",700],[11,"image_cache_task","","",700],[11,"compositor","","",700],[11,"browser_context","","",700],[11,"page","","",700],[11,"storage_task","","",700],[11,"Alert","script::dom::bindings::js","",28],[11,"Close","","",28],[11,"Document","","",28],[11,"Location","","",28],[11,"SessionStorage","","",28],[11,"LocalStorage","","",28],[11,"Console","","",28],[11,"GetFrameElement","","",28],[11,"Navigator","","",28],[11,"SetTimeout","","",28],[11,"SetTimeout_","","",28],[11,"ClearTimeout","","",28],[11,"SetInterval","","",28],[11,"SetInterval_","","",28],[11,"ClearInterval","","",28],[11,"Window","","",28],[11,"Self_","","",28],[11,"Frames","","",28],[11,"Parent","","",28],[11,"Performance","","",28],[11,"GetOnload","","",28],[11,"SetOnload","","",28],[11,"GetOnclick","","",28],[11,"SetOnclick","","",28],[11,"GetOninput","","",28],[11,"SetOninput","","",28],[11,"GetOnchange","","",28],[11,"SetOnchange","","",28],[11,"GetOnsubmit","","",28],[11,"SetOnsubmit","","",28],[11,"GetOnunload","","",28],[11,"SetOnunload","","",28],[11,"GetOnerror","","",28],[11,"SetOnerror","","",28],[11,"Screen","","",28],[11,"Debug","","",28],[11,"Gc","","",28],[11,"Btoa","","",28],[11,"Atob","","",28],[11,"evaluate_js_on_global_with_result","","",28],[11,"evaluate_script_on_global_with_result","","",28],[11,"clear_js_context","","",28],[11,"reflow","","Reflows the page if it's possible to do so and the page is dirty. This method will wait\nfor the layout thread to complete (but see the `TODO` below). If there is no window size\nyet, the page is presumed invisible and no reflow is performed.",28],[11,"join_layout","","Sends a ping to layout and waits for the response. The response will arrive when the\nlayout task has finished any pending request messages.",28],[11,"layout","","",28],[11,"content_box_query","","",28],[11,"content_boxes_query","","",28],[11,"handle_reflow_complete_msg","","",28],[11,"handle_resize_inactive_msg","","",28],[11,"init_browser_context","","",28],[11,"load_url","","Commence a new URL load which will either replace this window or scroll to a fragment.",28],[11,"handle_fire_timer","","",28],[11,"set_fragment_name","","",28],[11,"steal_fragment_name","","",28],[11,"set_window_size","","",28],[11,"window_size","","",28],[11,"get_url","","",28],[11,"resource_task","","",28],[11,"devtools_chan","","",28],[11,"layout_chan","","",28],[11,"constellation_chan","","",28],[11,"windowproxy_handler","","",28],[11,"get_next_subpage_id","","",28],[11,"layout_is_idle","","",28],[11,"set_resize_event","","",28],[11,"steal_resize_event","","",28],[11,"set_page_clip_rect_with_new_viewport","","",28],[11,"set_devtools_wants_updates","","",28],[11,"IndexedGetter","","",28],[11,"thaw","","",28],[11,"freeze","","",28],[11,"new","script::dom::window","",700],[0,"worker","script::dom",""],[3,"Worker","script::dom::worker",""],[3,"WorkerMessageHandler","",""],[3,"WorkerEventHandler","",""],[3,"WorkerErrorHandler","",""],[6,"TrustedWorkerAddress","",""],[11,"trace","","",701],[11,"reflector","","",701],[11,"new","","",701],[11,"Constructor","","",701],[11,"handle_message","","",701],[11,"dispatch_simple_error","","",701],[11,"handle_error_message","","",701],[11,"PostMessage","script::dom::bindings::js","",28],[11,"GetOnmessage","","",28],[11,"SetOnmessage","","",28],[11,"new","script::dom::worker","",702],[11,"handler","","",702],[11,"new","","",703],[11,"handler","","",703],[11,"new","","",704],[11,"handler","","",704],[0,"workerglobalscope","script::dom",""],[3,"WorkerGlobalScope","script::dom::workerglobalscope",""],[4,"WorkerGlobalScopeTypeId","",""],[13,"DedicatedGlobalScope","","",705],[8,"WorkerGlobalScopeHelpers","",""],[10,"handle_fire_timer","","",706],[10,"script_chan","","",706],[10,"get_cx","","",706],[11,"trace","","",705],[11,"eq","","",705],[11,"ne","","",705],[11,"trace","","",707],[11,"reflector","","",707],[11,"new_inherited","","",707],[11,"eventtarget","","",707],[11,"get_cx","","",707],[11,"resource_task","","",707],[11,"get_url","","",707],[11,"get_next_worker_id","","",707],[11,"Self_","script::dom::bindings::js","",28],[11,"Location","","",28],[11,"ImportScripts","","",28],[11,"Navigator","","",28],[11,"Console","","",28],[11,"Btoa","","",28],[11,"Atob","","",28],[11,"SetTimeout","","",28],[11,"SetTimeout_","","",28],[11,"ClearTimeout","","",28],[11,"SetInterval","","",28],[11,"SetInterval_","","",28],[11,"ClearInterval","","",28],[11,"script_chan","","",28],[11,"handle_fire_timer","","",28],[11,"get_cx","","",28],[0,"workerlocation","script::dom",""],[3,"WorkerLocation","script::dom::workerlocation",""],[11,"trace","","",708],[11,"reflector","","",708],[11,"new","","",708],[11,"Href","script::dom::bindings::js","",28],[11,"Search","","",28],[11,"Hash","","",28],[0,"workernavigator","script::dom",""],[3,"WorkerNavigator","script::dom::workernavigator",""],[11,"trace","","",709],[11,"reflector","","",709],[11,"new","","",709],[11,"Product","script::dom::bindings::js","",28],[11,"TaintEnabled","","",28],[11,"AppName","","",28],[11,"AppCodeName","","",28],[11,"Platform","","",28],[11,"UserAgent","","",28],[11,"AppVersion","","",28],[0,"xmlhttprequest","script::dom",""],[3,"GenerationId","script::dom::xmlhttprequest",""],[3,"XMLHttpRequest","",""],[4,"XHRProgress","",""],[13,"HeadersReceived","","Notify that headers have been received",710],[13,"Loading","","Partial progress (after receiving headers), containing portion of the response",710],[13,"Done","","Loading is done",710],[13,"Errored","","There was an error (only Abort, Timeout or Network is used)",710],[6,"SendParam","",""],[6,"TrustedXHRAddress","",""],[11,"trace","","",711],[11,"clone","","",711],[11,"eq","","",711],[11,"ne","","",711],[11,"clone","","",710],[11,"trace","","",712],[11,"reflector","","",712],[11,"new","","",712],[11,"Constructor","","",712],[11,"handle_progress","","",712],[11,"GetOnreadystatechange","script::dom::bindings::js","",28],[11,"SetOnreadystatechange","","",28],[11,"ReadyState","","",28],[11,"Open","","",28],[11,"Open_","","",28],[11,"SetRequestHeader","","",28],[11,"Timeout","","",28],[11,"SetTimeout","","",28],[11,"WithCredentials","","",28],[11,"SetWithCredentials","","",28],[11,"Upload","","",28],[11,"Send","","",28],[11,"Abort","","",28],[11,"ResponseURL","","",28],[11,"Status","","",28],[11,"StatusText","","",28],[11,"GetResponseHeader","","",28],[11,"GetAllResponseHeaders","","",28],[11,"ResponseType","","",28],[11,"SetResponseType","","",28],[11,"Response","","",28],[11,"GetResponseText","","",28],[11,"GetResponseXML","","",28],[11,"is_xmlhttprequest","script::dom::eventtarget","",536],[0,"xmlhttprequesteventtarget","script::dom",""],[3,"XMLHttpRequestEventTarget","script::dom::xmlhttprequesteventtarget",""],[4,"XMLHttpRequestEventTargetTypeId","",""],[13,"XMLHttpRequest","","",713],[13,"XMLHttpRequestUpload","","",713],[11,"trace","","",713],[11,"eq","","",713],[11,"ne","","",713],[11,"trace","","",714],[11,"reflector","","",714],[11,"new_inherited","","",714],[11,"eventtarget","","",714],[11,"is_xmlhttprequesteventtarget","script::dom::eventtarget","",536],[11,"GetOnloadstart","script::dom::bindings::js","",28],[11,"SetOnloadstart","","",28],[11,"GetOnprogress","","",28],[11,"SetOnprogress","","",28],[11,"GetOnabort","","",28],[11,"SetOnabort","","",28],[11,"GetOnerror","","",28],[11,"SetOnerror","","",28],[11,"GetOnload","","",28],[11,"SetOnload","","",28],[11,"GetOntimeout","","",28],[11,"SetOntimeout","","",28],[11,"GetOnloadend","","",28],[11,"SetOnloadend","","",28],[0,"xmlhttprequestupload","script::dom",""],[3,"XMLHttpRequestUpload","script::dom::xmlhttprequestupload",""],[11,"trace","","",715],[11,"reflector","","",715],[11,"new","","",715],[11,"is_xmlhttprequestupload","script::dom::eventtarget","",536],[0,"testbinding","script::dom",""],[3,"TestBinding","script::dom::testbinding",""],[11,"trace","","",716],[11,"reflector","","",716],[11,"BooleanAttribute","script::dom::bindings::js","",28],[11,"SetBooleanAttribute","","",28],[11,"ByteAttribute","","",28],[11,"SetByteAttribute","","",28],[11,"OctetAttribute","","",28],[11,"SetOctetAttribute","","",28],[11,"ShortAttribute","","",28],[11,"SetShortAttribute","","",28],[11,"UnsignedShortAttribute","","",28],[11,"SetUnsignedShortAttribute","","",28],[11,"LongAttribute","","",28],[11,"SetLongAttribute","","",28],[11,"UnsignedLongAttribute","","",28],[11,"SetUnsignedLongAttribute","","",28],[11,"LongLongAttribute","","",28],[11,"SetLongLongAttribute","","",28],[11,"UnsignedLongLongAttribute","","",28],[11,"SetUnsignedLongLongAttribute","","",28],[11,"UnrestrictedFloatAttribute","","",28],[11,"SetUnrestrictedFloatAttribute","","",28],[11,"FloatAttribute","","",28],[11,"SetFloatAttribute","","",28],[11,"UnrestrictedDoubleAttribute","","",28],[11,"SetUnrestrictedDoubleAttribute","","",28],[11,"DoubleAttribute","","",28],[11,"SetDoubleAttribute","","",28],[11,"StringAttribute","","",28],[11,"SetStringAttribute","","",28],[11,"UsvstringAttribute","","",28],[11,"SetUsvstringAttribute","","",28],[11,"ByteStringAttribute","","",28],[11,"SetByteStringAttribute","","",28],[11,"EnumAttribute","","",28],[11,"SetEnumAttribute","","",28],[11,"InterfaceAttribute","","",28],[11,"SetInterfaceAttribute","","",28],[11,"UnionAttribute","","",28],[11,"SetUnionAttribute","","",28],[11,"Union2Attribute","","",28],[11,"SetUnion2Attribute","","",28],[11,"ArrayAttribute","","",28],[11,"AnyAttribute","","",28],[11,"SetAnyAttribute","","",28],[11,"GetBooleanAttributeNullable","","",28],[11,"SetBooleanAttributeNullable","","",28],[11,"GetByteAttributeNullable","","",28],[11,"SetByteAttributeNullable","","",28],[11,"GetOctetAttributeNullable","","",28],[11,"SetOctetAttributeNullable","","",28],[11,"GetShortAttributeNullable","","",28],[11,"SetShortAttributeNullable","","",28],[11,"GetUnsignedShortAttributeNullable","","",28],[11,"SetUnsignedShortAttributeNullable","","",28],[11,"GetLongAttributeNullable","","",28],[11,"SetLongAttributeNullable","","",28],[11,"GetUnsignedLongAttributeNullable","","",28],[11,"SetUnsignedLongAttributeNullable","","",28],[11,"GetLongLongAttributeNullable","","",28],[11,"SetLongLongAttributeNullable","","",28],[11,"GetUnsignedLongLongAttributeNullable","","",28],[11,"SetUnsignedLongLongAttributeNullable","","",28],[11,"GetUnrestrictedFloatAttributeNullable","","",28],[11,"SetUnrestrictedFloatAttributeNullable","","",28],[11,"GetFloatAttributeNullable","","",28],[11,"SetFloatAttributeNullable","","",28],[11,"GetUnrestrictedDoubleAttributeNullable","","",28],[11,"SetUnrestrictedDoubleAttributeNullable","","",28],[11,"GetDoubleAttributeNullable","","",28],[11,"SetDoubleAttributeNullable","","",28],[11,"GetByteStringAttributeNullable","","",28],[11,"SetByteStringAttributeNullable","","",28],[11,"GetStringAttributeNullable","","",28],[11,"SetStringAttributeNullable","","",28],[11,"GetUsvstringAttributeNullable","","",28],[11,"SetUsvstringAttributeNullable","","",28],[11,"SetBinaryRenamedAttribute","","",28],[11,"BinaryRenamedAttribute","","",28],[11,"GetEnumAttributeNullable","","",28],[11,"GetInterfaceAttributeNullable","","",28],[11,"SetInterfaceAttributeNullable","","",28],[11,"GetUnionAttributeNullable","","",28],[11,"SetUnionAttributeNullable","","",28],[11,"GetUnion2AttributeNullable","","",28],[11,"SetUnion2AttributeNullable","","",28],[11,"BinaryRenamedMethod","","",28],[11,"ReceiveVoid","","",28],[11,"ReceiveBoolean","","",28],[11,"ReceiveByte","","",28],[11,"ReceiveOctet","","",28],[11,"ReceiveShort","","",28],[11,"ReceiveUnsignedShort","","",28],[11,"ReceiveLong","","",28],[11,"ReceiveUnsignedLong","","",28],[11,"ReceiveLongLong","","",28],[11,"ReceiveUnsignedLongLong","","",28],[11,"ReceiveUnrestrictedFloat","","",28],[11,"ReceiveFloat","","",28],[11,"ReceiveUnrestrictedDouble","","",28],[11,"ReceiveDouble","","",28],[11,"ReceiveString","","",28],[11,"ReceiveUsvstring","","",28],[11,"ReceiveByteString","","",28],[11,"ReceiveEnum","","",28],[11,"ReceiveInterface","","",28],[11,"ReceiveAny","","",28],[11,"ReceiveUnion","","",28],[11,"ReceiveUnion2","","",28],[11,"ReceiveNullableBoolean","","",28],[11,"ReceiveNullableByte","","",28],[11,"ReceiveNullableOctet","","",28],[11,"ReceiveNullableShort","","",28],[11,"ReceiveNullableUnsignedShort","","",28],[11,"ReceiveNullableLong","","",28],[11,"ReceiveNullableUnsignedLong","","",28],[11,"ReceiveNullableLongLong","","",28],[11,"ReceiveNullableUnsignedLongLong","","",28],[11,"ReceiveNullableUnrestrictedFloat","","",28],[11,"ReceiveNullableFloat","","",28],[11,"ReceiveNullableUnrestrictedDouble","","",28],[11,"ReceiveNullableDouble","","",28],[11,"ReceiveNullableString","","",28],[11,"ReceiveNullableUsvstring","","",28],[11,"ReceiveNullableByteString","","",28],[11,"ReceiveNullableEnum","","",28],[11,"ReceiveNullableInterface","","",28],[11,"ReceiveNullableUnion","","",28],[11,"ReceiveNullableUnion2","","",28],[11,"PassBoolean","","",28],[11,"PassByte","","",28],[11,"PassOctet","","",28],[11,"PassShort","","",28],[11,"PassUnsignedShort","","",28],[11,"PassLong","","",28],[11,"PassUnsignedLong","","",28],[11,"PassLongLong","","",28],[11,"PassUnsignedLongLong","","",28],[11,"PassUnrestrictedFloat","","",28],[11,"PassFloat","","",28],[11,"PassUnrestrictedDouble","","",28],[11,"PassDouble","","",28],[11,"PassString","","",28],[11,"PassUsvstring","","",28],[11,"PassByteString","","",28],[11,"PassEnum","","",28],[11,"PassInterface","","",28],[11,"PassUnion","","",28],[11,"PassUnion2","","",28],[11,"PassUnion3","","",28],[11,"PassAny","","",28],[11,"PassCallbackFunction","","",28],[11,"PassCallbackInterface","","",28],[11,"PassNullableBoolean","","",28],[11,"PassNullableByte","","",28],[11,"PassNullableOctet","","",28],[11,"PassNullableShort","","",28],[11,"PassNullableUnsignedShort","","",28],[11,"PassNullableLong","","",28],[11,"PassNullableUnsignedLong","","",28],[11,"PassNullableLongLong","","",28],[11,"PassNullableUnsignedLongLong","","",28],[11,"PassNullableUnrestrictedFloat","","",28],[11,"PassNullableFloat","","",28],[11,"PassNullableUnrestrictedDouble","","",28],[11,"PassNullableDouble","","",28],[11,"PassNullableString","","",28],[11,"PassNullableUsvstring","","",28],[11,"PassNullableByteString","","",28],[11,"PassNullableInterface","","",28],[11,"PassNullableUnion","","",28],[11,"PassNullableUnion2","","",28],[11,"PassNullableCallbackFunction","","",28],[11,"PassNullableCallbackInterface","","",28],[11,"PassOptionalBoolean","","",28],[11,"PassOptionalByte","","",28],[11,"PassOptionalOctet","","",28],[11,"PassOptionalShort","","",28],[11,"PassOptionalUnsignedShort","","",28],[11,"PassOptionalLong","","",28],[11,"PassOptionalUnsignedLong","","",28],[11,"PassOptionalLongLong","","",28],[11,"PassOptionalUnsignedLongLong","","",28],[11,"PassOptionalUnrestrictedFloat","","",28],[11,"PassOptionalFloat","","",28],[11,"PassOptionalUnrestrictedDouble","","",28],[11,"PassOptionalDouble","","",28],[11,"PassOptionalString","","",28],[11,"PassOptionalUsvstring","","",28],[11,"PassOptionalByteString","","",28],[11,"PassOptionalEnum","","",28],[11,"PassOptionalInterface","","",28],[11,"PassOptionalUnion","","",28],[11,"PassOptionalUnion2","","",28],[11,"PassOptionalAny","","",28],[11,"PassOptionalCallbackFunction","","",28],[11,"PassOptionalCallbackInterface","","",28],[11,"PassOptionalNullableBoolean","","",28],[11,"PassOptionalNullableByte","","",28],[11,"PassOptionalNullableOctet","","",28],[11,"PassOptionalNullableShort","","",28],[11,"PassOptionalNullableUnsignedShort","","",28],[11,"PassOptionalNullableLong","","",28],[11,"PassOptionalNullableUnsignedLong","","",28],[11,"PassOptionalNullableLongLong","","",28],[11,"PassOptionalNullableUnsignedLongLong","","",28],[11,"PassOptionalNullableUnrestrictedFloat","","",28],[11,"PassOptionalNullableFloat","","",28],[11,"PassOptionalNullableUnrestrictedDouble","","",28],[11,"PassOptionalNullableDouble","","",28],[11,"PassOptionalNullableString","","",28],[11,"PassOptionalNullableUsvstring","","",28],[11,"PassOptionalNullableByteString","","",28],[11,"PassOptionalNullableInterface","","",28],[11,"PassOptionalNullableUnion","","",28],[11,"PassOptionalNullableUnion2","","",28],[11,"PassOptionalNullableCallbackFunction","","",28],[11,"PassOptionalNullableCallbackInterface","","",28],[11,"PassOptionalBooleanWithDefault","","",28],[11,"PassOptionalByteWithDefault","","",28],[11,"PassOptionalOctetWithDefault","","",28],[11,"PassOptionalShortWithDefault","","",28],[11,"PassOptionalUnsignedShortWithDefault","","",28],[11,"PassOptionalLongWithDefault","","",28],[11,"PassOptionalUnsignedLongWithDefault","","",28],[11,"PassOptionalLongLongWithDefault","","",28],[11,"PassOptionalUnsignedLongLongWithDefault","","",28],[11,"PassOptionalStringWithDefault","","",28],[11,"PassOptionalUsvstringWithDefault","","",28],[11,"PassOptionalEnumWithDefault","","",28],[11,"PassOptionalNullableBooleanWithDefault","","",28],[11,"PassOptionalNullableByteWithDefault","","",28],[11,"PassOptionalNullableOctetWithDefault","","",28],[11,"PassOptionalNullableShortWithDefault","","",28],[11,"PassOptionalNullableUnsignedShortWithDefault","","",28],[11,"PassOptionalNullableLongWithDefault","","",28],[11,"PassOptionalNullableUnsignedLongWithDefault","","",28],[11,"PassOptionalNullableLongLongWithDefault","","",28],[11,"PassOptionalNullableUnsignedLongLongWithDefault","","",28],[11,"PassOptionalNullableStringWithDefault","","",28],[11,"PassOptionalNullableUsvstringWithDefault","","",28],[11,"PassOptionalNullableByteStringWithDefault","","",28],[11,"PassOptionalNullableInterfaceWithDefault","","",28],[11,"PassOptionalNullableUnionWithDefault","","",28],[11,"PassOptionalNullableUnion2WithDefault","","",28],[11,"PassOptionalNullableCallbackInterfaceWithDefault","","",28],[11,"PassOptionalAnyWithDefault","","",28],[11,"PassOptionalNullableBooleanWithNonNullDefault","","",28],[11,"PassOptionalNullableByteWithNonNullDefault","","",28],[11,"PassOptionalNullableOctetWithNonNullDefault","","",28],[11,"PassOptionalNullableShortWithNonNullDefault","","",28],[11,"PassOptionalNullableUnsignedShortWithNonNullDefault","","",28],[11,"PassOptionalNullableLongWithNonNullDefault","","",28],[11,"PassOptionalNullableUnsignedLongWithNonNullDefault","","",28],[11,"PassOptionalNullableLongLongWithNonNullDefault","","",28],[11,"PassOptionalNullableUnsignedLongLongWithNonNullDefault","","",28],[11,"PassOptionalNullableStringWithNonNullDefault","","",28],[11,"PassOptionalNullableUsvstringWithNonNullDefault","","",28],[11,"PassVariadicBoolean","","",28],[11,"PassVariadicByte","","",28],[11,"PassVariadicOctet","","",28],[11,"PassVariadicShort","","",28],[11,"PassVariadicUnsignedShort","","",28],[11,"PassVariadicLong","","",28],[11,"PassVariadicUnsignedLong","","",28],[11,"PassVariadicLongLong","","",28],[11,"PassVariadicUnsignedLongLong","","",28],[11,"PassVariadicUnrestrictedFloat","","",28],[11,"PassVariadicFloat","","",28],[11,"PassVariadicUnrestrictedDouble","","",28],[11,"PassVariadicDouble","","",28],[11,"PassVariadicString","","",28],[11,"PassVariadicUsvstring","","",28],[11,"PassVariadicByteString","","",28],[11,"PassVariadicEnum","","",28],[11,"PassVariadicUnion","","",28],[11,"PassVariadicUnion2","","",28],[11,"PassVariadicUnion3","","",28],[11,"PassVariadicAny","","",28],[11,"BooleanAttributeStatic","script::dom::testbinding","",716],[11,"SetBooleanAttributeStatic","","",716],[11,"ReceiveVoidStatic","","",716],[0,"parse","script",""],[0,"html","script::parse",""],[4,"HTMLInput","script::parse::html",""],[13,"InputString","","",717],[13,"InputUrl","","",717],[5,"parse_html","",""],[6,"Handle","",""],[11,"get_document","script::dom::servohtmlparser","",679],[11,"same_node","","",679],[11,"elem_name","","",679],[11,"create_element","","",679],[11,"create_comment","","",679],[11,"append_before_sibling","","",679],[11,"parse_error","","",679],[11,"set_quirks_mode","","",679],[11,"append","","",679],[11,"append_doctype_to_document","","",679],[11,"add_attrs_if_missing","","",679],[11,"remove_from_parent","","",679],[11,"mark_script_already_started","","",679],[11,"complete_script","","",679],[11,"reparent_children","","",679],[11,"serialize","script::dom::bindings::js","",28],[8,"Parser","script::parse",""],[10,"parse_chunk","","",718],[10,"finish","","",718],[0,"layout_interface","script","The high-level interface from script to layout. Using this abstract\ninterface helps reduce coupling between these two components, and enables\nthe DOM to be placed in a separate crate from layout."],[3,"ContentBoxResponse","script::layout_interface",""],[3,"ContentBoxesResponse","",""],[3,"HitTestResponse","",""],[3,"MouseOverResponse","",""],[3,"Reflow","","Information needed for a reflow."],[12,"goal","","The goal of reflow: either to render to the screen or to flush layout info for script.",719],[12,"url","","The URL of the page.",719],[12,"iframe","","Is the current reflow of an iframe, as opposed to a root window?",719],[12,"page_clip_rect","","A clipping rectangle for the page, an enlarged rectangle containing the viewport.",719],[3,"ScriptReflow","","Information needed for a script-initiated reflow."],[12,"reflow_info","","General reflow data.",720],[12,"document_root","","The document node.",720],[12,"script_chan","","The channel through which messages can be sent back to the script task.",720],[12,"window_size","","The current window size.",720],[12,"script_join_chan","","The channel that we send a notification to.",720],[12,"id","","Unique identifier",720],[12,"query_type","","The type of query if any to perform during this reflow.",720],[3,"LayoutChan","","Encapsulates a channel to the layout task."],[3,"Animation","","State relating to an animation."],[12,"node","","An opaque reference to the DOM node participating in the animation.",721],[12,"property_animation","","A description of the property animation that is occurring.",721],[12,"start_time","","The start time of the animation, as returned by `time::precise_time_s()`.",721],[12,"end_time","","The end time of the animation, as returned by `time::precise_time_s()`.",721],[4,"Msg","","Asynchronous messages that script can send to layout."],[13,"AddStylesheet","","Adds the given stylesheet to the document.",722],[13,"LoadStylesheet","","Adds the given stylesheet to the document.",722],[13,"SetQuirksMode","","Puts a document into quirks mode, causing the quirks mode stylesheet to be loaded.",722],[13,"Reflow","","Requests a reflow.",722],[13,"GetRPC","","Get an RPC interface.",722],[13,"TickAnimations","","Requests that the layout task render the next frame of all animations.",722],[13,"ReapLayoutData","","Destroys layout data associated with a DOM node.",722],[13,"CollectReports","","Requests that the layout task measure its memory usage. The resulting reports are sent back\nvia the supplied channel.",722],[13,"PrepareToExit","","Requests that the layout task enter a quiescent state in which no more messages are\naccepted except `ExitMsg`. A response message will be sent on the supplied channel when\nthis happens.",722],[13,"ExitNow","","Requests that the layout task immediately shut down. There must be no more nodes left after\nthis, or layout will crash.",722],[4,"ReflowGoal","","Why we're doing reflow."],[13,"ForDisplay","","We're reflowing in order to send a display list to the screen.",723],[13,"ForScriptQuery","","We're reflowing in order to satisfy a script query. No display list will be created.",723],[4,"ReflowQueryType","","Any query to perform with this reflow."],[13,"NoQuery","","",724],[13,"ContentBoxQuery","","",724],[13,"ContentBoxesQuery","","",724],[6,"OpaqueNode","","Type of an opaque node."],[8,"LayoutRPC","","Synchronous messages that script can send to layout."],[10,"content_box","","Requests the dimensions of the content box, as in the `getBoundingClientRect()` call.",725],[10,"content_boxes","","Requests the dimensions of all the content boxes, as in the `getClientRects()` call.",725],[10,"hit_test","","Requests the node containing the point of interest",725],[10,"mouse_over","","",725],[8,"ScriptLayoutChan","","A trait to manage opaque references to script<->layout channels without needing\nto expose the message type to crates that don't need to know about them."],[10,"new","","",726],[10,"sender","","",726],[10,"receiver","","",726],[11,"fmt","","",723],[11,"eq","","",723],[11,"ne","","",723],[11,"clone","","",727],[11,"new","","",727],[11,"collect_reports","","",727],[11,"new","script_traits","",728],[11,"sender","","",728],[11,"receiver","","",728],[11,"clone","script::layout_interface","",721],[11,"duration","","Returns the duration of this animation in seconds.",721],[0,"page","script",""],[3,"Page","script::page","Encapsulates a handle to a frame in a frame tree."],[12,"children","","",729],[3,"PageIterator","",""],[3,"Frame","","Information for one frame in the browsing context."],[12,"document","","The document for this frame.",730],[12,"window","","The window object for this frame.",730],[8,"IterablePage","",""],[10,"iter","","",731],[10,"find","","",731],[11,"trace","","",729],[11,"iter","alloc::rc","",63],[11,"find","","",63],[11,"new","script::page","",729],[11,"window","","",729],[11,"window_for_script_dealloation","","",729],[11,"document","","",729],[11,"remove","","",729],[6,"Item","",""],[11,"next","","",732],[11,"set_reflow_status","","",729],[11,"set_frame","","",729],[11,"trace","","",730],[0,"script_task","script","The script task is the task that owns the DOM in memory, runs JavaScript, and spawns parsing\nand layout tasks. It's in charge of processing events for all same-origin pages in a frame\ntree, and manages the entire lifetime of pages in the frame tree from initial request to\nteardown."],[3,"NonWorkerScriptChan","script::script_task","Encapsulates internal communication within the script task."],[3,"StackRootTLS","",""],[3,"ScriptTask","","Information for an entire page. Pages are top-level browsing contexts and can contain multiple\nframes."],[4,"TimerSource","",""],[13,"FromWindow","","",733],[13,"FromWorker","","",733],[4,"ScriptMsg","","Messages used to control script event loops, such as ScriptTask and\nDedicatedWorkerGlobalScope."],[13,"TriggerFragment","","Acts on a fragment URL load on the specified pipeline (only dispatched\nto ScriptTask).",734],[13,"Navigate","","Begins a content-initiated load on the specified pipeline (only\ndispatched to ScriptTask).",734],[13,"FireTimer","","Fires a JavaScript timeout\nTimerSource must be FromWindow when dispatched to ScriptTask and\nmust be FromWorker when dispatched to a DedicatedGlobalWorkerScope",734],[13,"ExitWindow","","Notifies the script that a window associated with a particular pipeline\nshould be closed (only dispatched to ScriptTask).",734],[13,"DOMMessage","","Message sent through Worker.postMessage (only dispatched to\nDedicatedWorkerGlobalScope).",734],[13,"RunnableMsg","","Generic message that encapsulates event handling.",734],[13,"MainThreadRunnableMsg","","Generic message for running tasks in the ScriptTask",734],[13,"RefcountCleanup","","A DOM object's last pinned reference was removed (dispatched to all tasks).",734],[13,"PageFetchComplete","","The final network response for a page has arrived.",734],[5,"get_page","",""],[7,"STACK_ROOTS","",""],[8,"Runnable","",""],[10,"handler","","",735],[8,"MainThreadRunnable","",""],[10,"handler","","",736],[8,"ScriptChan","","A cloneable interface for communicating with an event loop."],[10,"send","","Send a message to the associated event loop.",737],[10,"clone","","Clone this handle.",737],[11,"trace","","",738],[11,"send","","",738],[11,"clone","","",738],[11,"new","","Creates a new script chan.",738],[11,"new","","",739],[11,"drop","","",739],[11,"trace","","",740],[11,"create_layout_channel","","",740],[11,"clone_layout_channel","","",740],[11,"create","","",740],[11,"new","","Creates a new script task.",740],[11,"new_rt_and_cx","","",740],[11,"root_page","","",740],[11,"get_cx","","",740],[11,"start","","Starts the script task. After calling this method, the script task will loop receiving\nmessages on its port.",740],[11,"drop","","",740],[0,"textinput","script","Common handling of keyboard input and state management for text input controls"],[3,"TextInput","script::textinput","Encapsulated state for handling keyboard input in a single or multiline text input control."],[4,"KeyReaction","","Resulting action to be taken by the owner of a text input that is handling an event."],[13,"TriggerDefaultAction","","",741],[13,"DispatchInput","","",741],[13,"Nothing","","",741],[4,"Lines","","Control whether this control should allow multiple lines."],[13,"Single","","",742],[13,"Multiple","","",742],[11,"trace","","",743],[11,"eq","","",742],[11,"ne","","",742],[11,"new","","Instantiate a new text input control",743],[11,"handle_keydown","","Process a given `KeyboardEvent` and return an action for the caller to execute.",743],[11,"get_content","","Get the current contents of the text input. Multiple lines are joined by \\n.",743],[11,"set_content","","Set the current contents of the text input. If this is control supports multiple lines,\nany \\n encountered will be stripped and force a new logical line.",743],[14,"make_getter!","script",""],[14,"make_bool_getter!","",""],[14,"make_uint_getter!","",""],[14,"make_url_getter!","",""],[14,"make_url_or_base_getter!","",""],[14,"make_enumerated_getter!","",""],[14,"make_setter!","",""],[14,"make_bool_setter!","",""],[14,"make_uint_setter!","",""],[11,"to_jsval","script::dom::bindings::num","",57],[11,"from_jsval","","",57],[11,"to_jsval","","",57],[11,"from_jsval","","",57],[11,"to_jsval","script::dom::bindings::str","",744],[11,"from_jsval","","",744],[11,"to_jsval","","",58],[11,"from_jsval","","",58],[11,"trace","script::layout_interface","",727],[11,"get_prototype_id","script::dom::attr","",477],[11,"get_prototype_depth","","",477],[11,"get_prototype_id","script::dom::blob","",479],[11,"get_prototype_depth","","",479],[11,"get_prototype_id","script::dom::cssstyledeclaration","",491],[11,"get_prototype_depth","","",491],[11,"get_prototype_id","script::dom::canvasgradient","",484],[11,"get_prototype_depth","","",484],[11,"get_prototype_id","script::dom::canvaspattern","",485],[11,"get_prototype_depth","","",485],[11,"get_prototype_id","script::dom::canvasrenderingcontext2d","",488],[11,"get_prototype_depth","","",488],[11,"get_prototype_id","script::dom::characterdata","",489],[11,"get_prototype_depth","","",489],[11,"get_prototype_id","script::dom::comment","",495],[11,"get_prototype_depth","","",495],[11,"get_prototype_id","script::dom::console","",496],[11,"get_prototype_depth","","",496],[11,"get_prototype_id","script::dom::customevent","",497],[11,"get_prototype_depth","","",497],[11,"get_prototype_id","script::dom::domexception","",511],[11,"get_prototype_depth","","",511],[11,"get_prototype_id","script::dom::domimplementation","",512],[11,"get_prototype_depth","","",512],[11,"get_prototype_id","script::dom::domparser","",513],[11,"get_prototype_depth","","",513],[11,"get_prototype_id","script::dom::domrect","",492],[11,"get_prototype_depth","","",492],[11,"get_prototype_id","script::dom::domrectlist","",493],[11,"get_prototype_depth","","",493],[11,"get_prototype_id","script::dom::domstringmap","",494],[11,"get_prototype_depth","","",494],[11,"get_prototype_id","script::dom::domtokenlist","",514],[11,"get_prototype_depth","","",514],[11,"get_prototype_id","script::dom::dedicatedworkerglobalscope","",500],[11,"get_prototype_depth","","",500],[11,"get_prototype_id","script::dom::document","",506],[11,"get_prototype_depth","","",506],[11,"get_prototype_id","script::dom::documentfragment","",508],[11,"get_prototype_depth","","",508],[11,"get_prototype_id","script::dom::documenttype","",509],[11,"get_prototype_depth","","",509],[11,"get_prototype_id","script::dom::element","",523],[11,"get_prototype_depth","","",523],[11,"get_prototype_id","script::dom::errorevent","",524],[11,"get_prototype_depth","","",524],[11,"get_prototype_id","script::dom::event","",530],[11,"get_prototype_depth","","",530],[11,"get_prototype_id","script::dom::eventtarget","",536],[11,"get_prototype_depth","","",536],[11,"get_prototype_id","script::dom::file","",537],[11,"get_prototype_depth","","",537],[11,"get_prototype_id","script::dom::formdata","",539],[11,"get_prototype_depth","","",539],[11,"get_prototype_id","script::dom::htmlanchorelement","",540],[11,"get_prototype_depth","","",540],[11,"get_prototype_id","script::dom::htmlappletelement","",541],[11,"get_prototype_depth","","",541],[11,"get_prototype_id","script::dom::htmlareaelement","",542],[11,"get_prototype_depth","","",542],[11,"get_prototype_id","script::dom::htmlaudioelement","",543],[11,"get_prototype_depth","","",543],[11,"get_prototype_id","script::dom::htmlbrelement","",547],[11,"get_prototype_depth","","",547],[11,"get_prototype_id","script::dom::htmlbaseelement","",544],[11,"get_prototype_depth","","",544],[11,"get_prototype_id","script::dom::htmlbodyelement","",546],[11,"get_prototype_depth","","",546],[11,"get_prototype_id","script::dom::htmlbuttonelement","",548],[11,"get_prototype_depth","","",548],[11,"get_prototype_id","script::dom::htmlcanvaselement","",551],[11,"get_prototype_depth","","",551],[11,"get_prototype_id","script::dom::htmlcollection","",554],[11,"get_prototype_depth","","",554],[11,"get_prototype_id","script::dom::htmldlistelement","",559],[11,"get_prototype_depth","","",559],[11,"get_prototype_id","script::dom::htmldataelement","",555],[11,"get_prototype_depth","","",555],[11,"get_prototype_id","script::dom::htmldatalistelement","",556],[11,"get_prototype_depth","","",556],[11,"get_prototype_id","script::dom::htmldirectoryelement","",557],[11,"get_prototype_depth","","",557],[11,"get_prototype_id","script::dom::htmldivelement","",558],[11,"get_prototype_depth","","",558],[11,"get_prototype_id","script::dom::htmlelement","",562],[11,"get_prototype_depth","","",562],[11,"get_prototype_id","script::dom::htmlembedelement","",563],[11,"get_prototype_depth","","",563],[11,"get_prototype_id","script::dom::htmlfieldsetelement","",564],[11,"get_prototype_depth","","",564],[11,"get_prototype_id","script::dom::htmlfontelement","",565],[11,"get_prototype_depth","","",565],[11,"get_prototype_id","script::dom::htmlformelement","",574],[11,"get_prototype_depth","","",574],[11,"get_prototype_id","script::dom::htmlframeelement","",575],[11,"get_prototype_depth","","",575],[11,"get_prototype_id","script::dom::htmlframesetelement","",576],[11,"get_prototype_depth","","",576],[11,"get_prototype_id","script::dom::htmlhrelement","",580],[11,"get_prototype_depth","","",580],[11,"get_prototype_id","script::dom::htmlheadelement","",577],[11,"get_prototype_depth","","",577],[11,"get_prototype_id","script::dom::htmlheadingelement","",579],[11,"get_prototype_depth","","",579],[11,"get_prototype_id","script::dom::htmlhtmlelement","",581],[11,"get_prototype_depth","","",581],[11,"get_prototype_id","script::dom::htmliframeelement","",583],[11,"get_prototype_depth","","",583],[11,"get_prototype_id","script::dom::htmlimageelement","",585],[11,"get_prototype_depth","","",585],[11,"get_prototype_id","script::dom::htmlinputelement","",589],[11,"get_prototype_depth","","",589],[11,"get_prototype_id","script::dom::htmllielement","",592],[11,"get_prototype_depth","","",592],[11,"get_prototype_id","script::dom::htmllabelelement","",590],[11,"get_prototype_depth","","",590],[11,"get_prototype_id","script::dom::htmllegendelement","",591],[11,"get_prototype_depth","","",591],[11,"get_prototype_id","script::dom::htmllinkelement","",593],[11,"get_prototype_depth","","",593],[11,"get_prototype_id","script::dom::htmlmapelement","",594],[11,"get_prototype_depth","","",594],[11,"get_prototype_id","script::dom::htmlmediaelement","",596],[11,"get_prototype_depth","","",596],[11,"get_prototype_id","script::dom::htmlmetaelement","",597],[11,"get_prototype_depth","","",597],[11,"get_prototype_id","script::dom::htmlmeterelement","",598],[11,"get_prototype_depth","","",598],[11,"get_prototype_id","script::dom::htmlmodelement","",599],[11,"get_prototype_depth","","",599],[11,"get_prototype_id","script::dom::htmlolistelement","",601],[11,"get_prototype_depth","","",601],[11,"get_prototype_id","script::dom::htmlobjectelement","",600],[11,"get_prototype_depth","","",600],[11,"get_prototype_id","script::dom::htmloptgroupelement","",602],[11,"get_prototype_depth","","",602],[11,"get_prototype_id","script::dom::htmloptionelement","",603],[11,"get_prototype_depth","","",603],[11,"get_prototype_id","script::dom::htmloutputelement","",604],[11,"get_prototype_depth","","",604],[11,"get_prototype_id","script::dom::htmlparagraphelement","",605],[11,"get_prototype_depth","","",605],[11,"get_prototype_id","script::dom::htmlparamelement","",606],[11,"get_prototype_depth","","",606],[11,"get_prototype_id","script::dom::htmlpreelement","",607],[11,"get_prototype_depth","","",607],[11,"get_prototype_id","script::dom::htmlprogresselement","",608],[11,"get_prototype_depth","","",608],[11,"get_prototype_id","script::dom::htmlquoteelement","",609],[11,"get_prototype_depth","","",609],[11,"get_prototype_id","script::dom::htmlscriptelement","",612],[11,"get_prototype_depth","","",612],[11,"get_prototype_id","script::dom::htmlselectelement","",613],[11,"get_prototype_depth","","",613],[11,"get_prototype_id","script::dom::htmlsourceelement","",615],[11,"get_prototype_depth","","",615],[11,"get_prototype_id","script::dom::htmlspanelement","",614],[11,"get_prototype_depth","","",614],[11,"get_prototype_id","script::dom::htmlstyleelement","",617],[11,"get_prototype_depth","","",617],[11,"get_prototype_id","script::dom::htmltablecaptionelement","",620],[11,"get_prototype_depth","","",620],[11,"get_prototype_id","script::dom::htmltablecellelement","",623],[11,"get_prototype_depth","","",623],[11,"get_prototype_id","script::dom::htmltablecolelement","",626],[11,"get_prototype_depth","","",626],[11,"get_prototype_id","script::dom::htmltabledatacellelement","",624],[11,"get_prototype_depth","","",624],[11,"get_prototype_id","script::dom::htmltableelement","",619],[11,"get_prototype_depth","","",619],[11,"get_prototype_id","script::dom::htmltableheadercellelement","",625],[11,"get_prototype_depth","","",625],[11,"get_prototype_id","script::dom::htmltablerowelement","",628],[11,"get_prototype_depth","","",628],[11,"get_prototype_id","script::dom::htmltablesectionelement","",630],[11,"get_prototype_depth","","",630],[11,"get_prototype_id","script::dom::htmltemplateelement","",631],[11,"get_prototype_depth","","",631],[11,"get_prototype_id","script::dom::htmltextareaelement","",635],[11,"get_prototype_depth","","",635],[11,"get_prototype_id","script::dom::htmltimeelement","",637],[11,"get_prototype_depth","","",637],[11,"get_prototype_id","script::dom::htmltitleelement","",638],[11,"get_prototype_depth","","",638],[11,"get_prototype_id","script::dom::htmltrackelement","",639],[11,"get_prototype_depth","","",639],[11,"get_prototype_id","script::dom::htmlulistelement","",640],[11,"get_prototype_depth","","",640],[11,"get_prototype_id","script::dom::htmlunknownelement","",642],[11,"get_prototype_depth","","",642],[11,"get_prototype_id","script::dom::htmlvideoelement","",641],[11,"get_prototype_depth","","",641],[11,"get_prototype_id","script::dom::imagedata","",644],[11,"get_prototype_depth","","",644],[11,"get_prototype_id","script::dom::keyboardevent","",646],[11,"get_prototype_depth","","",646],[11,"get_prototype_id","script::dom::location","",647],[11,"get_prototype_depth","","",647],[11,"get_prototype_id","script::dom::messageevent","",648],[11,"get_prototype_depth","","",648],[11,"get_prototype_id","script::dom::mouseevent","",649],[11,"get_prototype_depth","","",649],[11,"get_prototype_id","script::dom::namednodemap","",650],[11,"get_prototype_depth","","",650],[11,"get_prototype_id","script::dom::navigator","",651],[11,"get_prototype_depth","","",651],[11,"get_prototype_id","script::dom::node","",661],[11,"get_prototype_depth","","",661],[11,"get_prototype_id","script::dom::nodeiterator","",669],[11,"get_prototype_depth","","",669],[11,"get_prototype_id","script::dom::nodelist","",671],[11,"get_prototype_depth","","",671],[11,"get_prototype_id","script::dom::performance","",673],[11,"get_prototype_depth","","",673],[11,"get_prototype_id","script::dom::performancetiming","",675],[11,"get_prototype_depth","","",675],[11,"get_prototype_id","script::dom::processinginstruction","",672],[11,"get_prototype_depth","","",672],[11,"get_prototype_id","script::dom::progressevent","",676],[11,"get_prototype_depth","","",676],[11,"get_prototype_id","script::dom::range","",677],[11,"get_prototype_depth","","",677],[11,"get_prototype_id","script::dom::screen","",678],[11,"get_prototype_depth","","",678],[11,"get_prototype_id","script::dom::servohtmlparser","",681],[11,"get_prototype_depth","","",681],[11,"get_prototype_id","script::dom::storage","",682],[11,"get_prototype_depth","","",682],[11,"get_prototype_id","script::dom::storageevent","",684],[11,"get_prototype_depth","","",684],[11,"get_prototype_id","script::dom::testbinding","",716],[11,"get_prototype_depth","","",716],[11,"get_prototype_id","script::dom::text","",685],[11,"get_prototype_depth","","",685],[11,"get_prototype_id","script::dom::textencoder","",686],[11,"get_prototype_depth","","",686],[11,"get_prototype_id","script::dom::treewalker","",689],[11,"get_prototype_depth","","",689],[11,"get_prototype_id","script::dom::uievent","",690],[11,"get_prototype_depth","","",690],[11,"get_prototype_id","script::dom::urlsearchparams","",693],[11,"get_prototype_depth","","",693],[11,"get_prototype_id","script::dom::validitystate","",694],[11,"get_prototype_depth","","",694],[11,"get_prototype_id","script::dom::websocket","",696],[11,"get_prototype_depth","","",696],[11,"get_prototype_id","script::dom::window","",700],[11,"get_prototype_depth","","",700],[11,"get_prototype_id","script::dom::worker","",701],[11,"get_prototype_depth","","",701],[11,"get_prototype_id","script::dom::workerglobalscope","",707],[11,"get_prototype_depth","","",707],[11,"get_prototype_id","script::dom::workerlocation","",708],[11,"get_prototype_depth","","",708],[11,"get_prototype_id","script::dom::workernavigator","",709],[11,"get_prototype_depth","","",709],[11,"get_prototype_id","script::dom::xmlhttprequest","",712],[11,"get_prototype_depth","","",712],[11,"get_prototype_id","script::dom::xmlhttprequesteventtarget","",714],[11,"get_prototype_depth","","",714],[11,"get_prototype_id","script::dom::xmlhttprequestupload","",715],[11,"get_prototype_depth","","",715],[11,"is_characterdata","script::dom::node","",661],[11,"is_comment","","",661],[11,"is_comment","script::dom::characterdata","",489],[11,"is_dedicatedworkerglobalscope","script::dom::workerglobalscope","",707],[11,"is_document","script::dom::node","",661],[11,"is_documentfragment","","",661],[11,"is_documenttype","","",661],[11,"is_element","","",661],[11,"is_htmlanchorelement","","",661],[11,"is_htmlanchorelement","script::dom::element","",523],[11,"is_htmlanchorelement","script::dom::htmlelement","",562],[11,"is_htmlappletelement","script::dom::node","",661],[11,"is_htmlappletelement","script::dom::element","",523],[11,"is_htmlappletelement","script::dom::htmlelement","",562],[11,"is_htmlareaelement","script::dom::node","",661],[11,"is_htmlareaelement","script::dom::element","",523],[11,"is_htmlareaelement","script::dom::htmlelement","",562],[11,"is_htmlaudioelement","script::dom::node","",661],[11,"is_htmlaudioelement","script::dom::element","",523],[11,"is_htmlaudioelement","script::dom::htmlelement","",562],[11,"is_htmlaudioelement","script::dom::htmlmediaelement","",596],[11,"is_htmlbrelement","script::dom::node","",661],[11,"is_htmlbrelement","script::dom::element","",523],[11,"is_htmlbrelement","script::dom::htmlelement","",562],[11,"is_htmlbaseelement","script::dom::node","",661],[11,"is_htmlbaseelement","script::dom::element","",523],[11,"is_htmlbaseelement","script::dom::htmlelement","",562],[11,"is_htmlbodyelement","script::dom::node","",661],[11,"is_htmlbodyelement","script::dom::element","",523],[11,"is_htmlbodyelement","script::dom::htmlelement","",562],[11,"is_htmlbuttonelement","script::dom::node","",661],[11,"is_htmlbuttonelement","script::dom::element","",523],[11,"is_htmlbuttonelement","script::dom::htmlelement","",562],[11,"is_htmlcanvaselement","script::dom::node","",661],[11,"is_htmlcanvaselement","script::dom::element","",523],[11,"is_htmlcanvaselement","script::dom::htmlelement","",562],[11,"is_htmldlistelement","script::dom::node","",661],[11,"is_htmldlistelement","script::dom::element","",523],[11,"is_htmldlistelement","script::dom::htmlelement","",562],[11,"is_htmldataelement","script::dom::node","",661],[11,"is_htmldataelement","script::dom::element","",523],[11,"is_htmldataelement","script::dom::htmlelement","",562],[11,"is_htmldatalistelement","script::dom::node","",661],[11,"is_htmldatalistelement","script::dom::element","",523],[11,"is_htmldatalistelement","script::dom::htmlelement","",562],[11,"is_htmldirectoryelement","script::dom::node","",661],[11,"is_htmldirectoryelement","script::dom::element","",523],[11,"is_htmldirectoryelement","script::dom::htmlelement","",562],[11,"is_htmldivelement","script::dom::node","",661],[11,"is_htmldivelement","script::dom::element","",523],[11,"is_htmldivelement","script::dom::htmlelement","",562],[11,"is_htmlelement","script::dom::node","",661],[11,"is_htmlelement","script::dom::element","",523],[11,"is_htmlembedelement","script::dom::node","",661],[11,"is_htmlembedelement","script::dom::element","",523],[11,"is_htmlembedelement","script::dom::htmlelement","",562],[11,"is_htmlfieldsetelement","script::dom::node","",661],[11,"is_htmlfieldsetelement","script::dom::element","",523],[11,"is_htmlfieldsetelement","script::dom::htmlelement","",562],[11,"is_htmlfontelement","script::dom::node","",661],[11,"is_htmlfontelement","script::dom::element","",523],[11,"is_htmlfontelement","script::dom::htmlelement","",562],[11,"is_htmlformelement","script::dom::node","",661],[11,"is_htmlformelement","script::dom::element","",523],[11,"is_htmlformelement","script::dom::htmlelement","",562],[11,"is_htmlframeelement","script::dom::node","",661],[11,"is_htmlframeelement","script::dom::element","",523],[11,"is_htmlframeelement","script::dom::htmlelement","",562],[11,"is_htmlframesetelement","script::dom::node","",661],[11,"is_htmlframesetelement","script::dom::element","",523],[11,"is_htmlframesetelement","script::dom::htmlelement","",562],[11,"is_htmlhrelement","script::dom::node","",661],[11,"is_htmlhrelement","script::dom::element","",523],[11,"is_htmlhrelement","script::dom::htmlelement","",562],[11,"is_htmlheadelement","script::dom::node","",661],[11,"is_htmlheadelement","script::dom::element","",523],[11,"is_htmlheadelement","script::dom::htmlelement","",562],[11,"is_htmlheadingelement","script::dom::node","",661],[11,"is_htmlheadingelement","script::dom::element","",523],[11,"is_htmlheadingelement","script::dom::htmlelement","",562],[11,"is_htmlhtmlelement","script::dom::node","",661],[11,"is_htmlhtmlelement","script::dom::element","",523],[11,"is_htmlhtmlelement","script::dom::htmlelement","",562],[11,"is_htmliframeelement","script::dom::node","",661],[11,"is_htmliframeelement","script::dom::element","",523],[11,"is_htmliframeelement","script::dom::htmlelement","",562],[11,"is_htmlimageelement","script::dom::node","",661],[11,"is_htmlimageelement","script::dom::element","",523],[11,"is_htmlimageelement","script::dom::htmlelement","",562],[11,"is_htmlinputelement","script::dom::node","",661],[11,"is_htmlinputelement","script::dom::element","",523],[11,"is_htmlinputelement","script::dom::htmlelement","",562],[11,"is_htmllielement","script::dom::node","",661],[11,"is_htmllielement","script::dom::element","",523],[11,"is_htmllielement","script::dom::htmlelement","",562],[11,"is_htmllabelelement","script::dom::node","",661],[11,"is_htmllabelelement","script::dom::element","",523],[11,"is_htmllabelelement","script::dom::htmlelement","",562],[11,"is_htmllegendelement","script::dom::node","",661],[11,"is_htmllegendelement","script::dom::element","",523],[11,"is_htmllegendelement","script::dom::htmlelement","",562],[11,"is_htmllinkelement","script::dom::node","",661],[11,"is_htmllinkelement","script::dom::element","",523],[11,"is_htmllinkelement","script::dom::htmlelement","",562],[11,"is_htmlmapelement","script::dom::node","",661],[11,"is_htmlmapelement","script::dom::element","",523],[11,"is_htmlmapelement","script::dom::htmlelement","",562],[11,"is_htmlmediaelement","script::dom::node","",661],[11,"is_htmlmediaelement","script::dom::element","",523],[11,"is_htmlmediaelement","script::dom::htmlelement","",562],[11,"is_htmlmetaelement","script::dom::node","",661],[11,"is_htmlmetaelement","script::dom::element","",523],[11,"is_htmlmetaelement","script::dom::htmlelement","",562],[11,"is_htmlmeterelement","script::dom::node","",661],[11,"is_htmlmeterelement","script::dom::element","",523],[11,"is_htmlmeterelement","script::dom::htmlelement","",562],[11,"is_htmlmodelement","script::dom::node","",661],[11,"is_htmlmodelement","script::dom::element","",523],[11,"is_htmlmodelement","script::dom::htmlelement","",562],[11,"is_htmlolistelement","script::dom::node","",661],[11,"is_htmlolistelement","script::dom::element","",523],[11,"is_htmlolistelement","script::dom::htmlelement","",562],[11,"is_htmlobjectelement","script::dom::node","",661],[11,"is_htmlobjectelement","script::dom::element","",523],[11,"is_htmlobjectelement","script::dom::htmlelement","",562],[11,"is_htmloptgroupelement","script::dom::node","",661],[11,"is_htmloptgroupelement","script::dom::element","",523],[11,"is_htmloptgroupelement","script::dom::htmlelement","",562],[11,"is_htmloptionelement","script::dom::node","",661],[11,"is_htmloptionelement","script::dom::element","",523],[11,"is_htmloptionelement","script::dom::htmlelement","",562],[11,"is_htmloutputelement","script::dom::node","",661],[11,"is_htmloutputelement","script::dom::element","",523],[11,"is_htmloutputelement","script::dom::htmlelement","",562],[11,"is_htmlparagraphelement","script::dom::node","",661],[11,"is_htmlparagraphelement","script::dom::element","",523],[11,"is_htmlparagraphelement","script::dom::htmlelement","",562],[11,"is_htmlparamelement","script::dom::node","",661],[11,"is_htmlparamelement","script::dom::element","",523],[11,"is_htmlparamelement","script::dom::htmlelement","",562],[11,"is_htmlpreelement","script::dom::node","",661],[11,"is_htmlpreelement","script::dom::element","",523],[11,"is_htmlpreelement","script::dom::htmlelement","",562],[11,"is_htmlprogresselement","script::dom::node","",661],[11,"is_htmlprogresselement","script::dom::element","",523],[11,"is_htmlprogresselement","script::dom::htmlelement","",562],[11,"is_htmlquoteelement","script::dom::node","",661],[11,"is_htmlquoteelement","script::dom::element","",523],[11,"is_htmlquoteelement","script::dom::htmlelement","",562],[11,"is_htmlscriptelement","script::dom::node","",661],[11,"is_htmlscriptelement","script::dom::element","",523],[11,"is_htmlscriptelement","script::dom::htmlelement","",562],[11,"is_htmlselectelement","script::dom::node","",661],[11,"is_htmlselectelement","script::dom::element","",523],[11,"is_htmlselectelement","script::dom::htmlelement","",562],[11,"is_htmlsourceelement","script::dom::node","",661],[11,"is_htmlsourceelement","script::dom::element","",523],[11,"is_htmlsourceelement","script::dom::htmlelement","",562],[11,"is_htmlspanelement","script::dom::node","",661],[11,"is_htmlspanelement","script::dom::element","",523],[11,"is_htmlspanelement","script::dom::htmlelement","",562],[11,"is_htmlstyleelement","script::dom::node","",661],[11,"is_htmlstyleelement","script::dom::element","",523],[11,"is_htmlstyleelement","script::dom::htmlelement","",562],[11,"is_htmltablecaptionelement","script::dom::node","",661],[11,"is_htmltablecaptionelement","script::dom::element","",523],[11,"is_htmltablecaptionelement","script::dom::htmlelement","",562],[11,"is_htmltablecellelement","script::dom::node","",661],[11,"is_htmltablecellelement","script::dom::element","",523],[11,"is_htmltablecellelement","script::dom::htmlelement","",562],[11,"is_htmltablecolelement","script::dom::node","",661],[11,"is_htmltablecolelement","script::dom::element","",523],[11,"is_htmltablecolelement","script::dom::htmlelement","",562],[11,"is_htmltabledatacellelement","script::dom::node","",661],[11,"is_htmltabledatacellelement","script::dom::element","",523],[11,"is_htmltabledatacellelement","script::dom::htmlelement","",562],[11,"is_htmltabledatacellelement","script::dom::htmltablecellelement","",623],[11,"is_htmltableelement","script::dom::node","",661],[11,"is_htmltableelement","script::dom::element","",523],[11,"is_htmltableelement","script::dom::htmlelement","",562],[11,"is_htmltableheadercellelement","script::dom::node","",661],[11,"is_htmltableheadercellelement","script::dom::element","",523],[11,"is_htmltableheadercellelement","script::dom::htmlelement","",562],[11,"is_htmltableheadercellelement","script::dom::htmltablecellelement","",623],[11,"is_htmltablerowelement","script::dom::node","",661],[11,"is_htmltablerowelement","script::dom::element","",523],[11,"is_htmltablerowelement","script::dom::htmlelement","",562],[11,"is_htmltablesectionelement","script::dom::node","",661],[11,"is_htmltablesectionelement","script::dom::element","",523],[11,"is_htmltablesectionelement","script::dom::htmlelement","",562],[11,"is_htmltemplateelement","script::dom::node","",661],[11,"is_htmltemplateelement","script::dom::element","",523],[11,"is_htmltemplateelement","script::dom::htmlelement","",562],[11,"is_htmltextareaelement","script::dom::node","",661],[11,"is_htmltextareaelement","script::dom::element","",523],[11,"is_htmltextareaelement","script::dom::htmlelement","",562],[11,"is_htmltimeelement","script::dom::node","",661],[11,"is_htmltimeelement","script::dom::element","",523],[11,"is_htmltimeelement","script::dom::htmlelement","",562],[11,"is_htmltitleelement","script::dom::node","",661],[11,"is_htmltitleelement","script::dom::element","",523],[11,"is_htmltitleelement","script::dom::htmlelement","",562],[11,"is_htmltrackelement","script::dom::node","",661],[11,"is_htmltrackelement","script::dom::element","",523],[11,"is_htmltrackelement","script::dom::htmlelement","",562],[11,"is_htmlulistelement","script::dom::node","",661],[11,"is_htmlulistelement","script::dom::element","",523],[11,"is_htmlulistelement","script::dom::htmlelement","",562],[11,"is_htmlunknownelement","script::dom::node","",661],[11,"is_htmlunknownelement","script::dom::element","",523],[11,"is_htmlunknownelement","script::dom::htmlelement","",562],[11,"is_htmlvideoelement","script::dom::node","",661],[11,"is_htmlvideoelement","script::dom::element","",523],[11,"is_htmlvideoelement","script::dom::htmlelement","",562],[11,"is_htmlvideoelement","script::dom::htmlmediaelement","",596],[11,"is_keyboardevent","script::dom::uievent","",690],[11,"is_mouseevent","","",690],[11,"is_processinginstruction","script::dom::node","",661],[11,"is_processinginstruction","script::dom::characterdata","",489],[11,"is_text","script::dom::node","",661],[11,"is_text","script::dom::characterdata","",489],[11,"is_xmlhttprequest","script::dom::xmlhttprequesteventtarget","",714],[11,"is_xmlhttprequestupload","","",714],[11,"is_characterdata","script::dom::eventtarget","",536],[11,"is_comment","","",536],[11,"is_customevent","script::dom::event","",530],[11,"is_dedicatedworkerglobalscope","script::dom::eventtarget","",536],[11,"is_document","","",536],[11,"is_documentfragment","","",536],[11,"is_documenttype","","",536],[11,"is_element","","",536],[11,"is_errorevent","script::dom::event","",530]],"paths":[[3,"CORSRequest"],[3,"CORSResponse"],[3,"CORSCacheEntry"],[4,"RequestMode"],[4,"HeaderOrMethod"],[3,"CORSCache"],[3,"DOMRefCell"],[4,"GlobalRef"],[4,"GlobalRoot"],[4,"GlobalField"],[4,"GlobalUnrooted"],[8,"RootedReference"],[8,"OptionalRootedReference"],[8,"Assignable"],[8,"OptionalRootable"],[8,"OptionalUnrootable"],[8,"OptionalRootedRootable"],[8,"OptionalOptionalRootedRootable"],[8,"ResultRootable"],[8,"TemporaryPushable"],[8,"Comparable"],[3,"Unrooted"],[3,"Temporary"],[3,"JS"],[3,"LayoutJS"],[3,"MutHeap"],[3,"MutNullableJS"],[4,"Option"],[3,"JSRef"],[4,"Result"],[3,"Vec"],[3,"RootCollection"],[3,"Root"],[3,"Trusted"],[3,"LiveDOMReferences"],[3,"GlobalStaticData"],[3,"ConstantSpec"],[3,"NativePropertyHooks"],[3,"DOMClass"],[3,"DOMJSClass"],[3,"NativeProperties"],[4,"ConstantVal"],[4,"XMLName"],[8,"Reflectable"],[3,"Reflector"],[4,"ExceptionHandling"],[8,"CallbackContainer"],[3,"CallbackFunction"],[3,"CallbackInterface"],[3,"CallSetup"],[4,"Error"],[4,"StringificationBehavior"],[8,"IDLInterface"],[8,"ToJSValConvertible"],[8,"FromJSValConvertible"],[3,"JSVal"],[6,"DOMString"],[3,"Finite"],[3,"ByteString"],[3,"StructuredCloneData"],[8,"JSTraceable"],[6,"EncodingRef"],[3,"RefCell"],[3,"Rc"],[3,"Box"],[3,"Cell"],[3,"SmallVec1"],[3,"HashMap"],[3,"String"],[3,"Url"],[3,"Sender"],[3,"Receiver"],[3,"Rect"],[3,"ImageCacheTask"],[3,"ScriptControlChan"],[3,"Atom"],[3,"Namespace"],[3,"Timer"],[3,"PropertyDeclarationBlock"],[3,"SubpageId"],[3,"WindowSizeData"],[3,"PipelineId"],[3,"WorkerId"],[4,"QuirksMode"],[3,"Cx"],[6,"rt"],[3,"Headers"],[4,"Method"],[3,"ConstellationChan"],[3,"WindowProxyHandler"],[3,"UntrustedNodeAddress"],[4,"LengthOrPercentageOrAuto"],[3,"RGBA"],[3,"Matrix2D"],[4,"StorageType"],[3,"CanvasGradientStop"],[3,"LinearGradientStyle"],[3,"RadialGradientStyle"],[3,"RootedVec"],[8,"AttrMethods"],[3,"BlobPropertyBag"],[8,"BlobMethods"],[8,"CSSStyleDeclarationMethods"],[8,"CanvasGradientMethods"],[4,"CanvasWindingRule"],[8,"CanvasRenderingContext2DMethods"],[8,"CharacterDataMethods"],[8,"ConsoleMethods"],[3,"CustomEventInit"],[8,"CustomEventMethods"],[8,"DOMExceptionMethods"],[8,"DOMImplementationMethods"],[4,"SupportedType"],[8,"DOMParserMethods"],[8,"DOMRectMethods"],[8,"DOMRectListMethods"],[8,"DOMStringMapMethods"],[8,"DOMTokenListMethods"],[8,"DedicatedWorkerGlobalScopeMethods"],[4,"DocumentReadyState"],[8,"DocumentMethods"],[8,"DocumentFragmentMethods"],[8,"DocumentTypeMethods"],[8,"ElementMethods"],[3,"ErrorEventInit"],[8,"ErrorEventMethods"],[3,"EventInit"],[8,"EventMethods"],[3,"EventHandlerNonNull"],[3,"OnErrorEventHandlerNonNull"],[3,"EventListener"],[8,"EventTargetMethods"],[8,"FileMethods"],[8,"FormDataMethods"],[3,"Function"],[8,"HTMLAnchorElementMethods"],[8,"HTMLAreaElementMethods"],[8,"HTMLBodyElementMethods"],[8,"HTMLButtonElementMethods"],[8,"HTMLCanvasElementMethods"],[8,"HTMLCollectionMethods"],[8,"HTMLDataListElementMethods"],[8,"HTMLElementMethods"],[8,"HTMLFieldSetElementMethods"],[8,"HTMLFormElementMethods"],[8,"HTMLIFrameElementMethods"],[8,"HTMLImageElementMethods"],[8,"HTMLInputElementMethods"],[8,"HTMLLinkElementMethods"],[8,"HTMLObjectElementMethods"],[8,"HTMLOptGroupElementMethods"],[8,"HTMLOptionElementMethods"],[8,"HTMLOutputElementMethods"],[8,"HTMLScriptElementMethods"],[8,"HTMLSelectElementMethods"],[8,"HTMLTableElementMethods"],[8,"HTMLTextAreaElementMethods"],[8,"HTMLTitleElementMethods"],[8,"ImageDataMethods"],[3,"KeyboardEventInit"],[8,"KeyboardEventMethods"],[8,"LocationMethods"],[3,"MessageEventInit"],[8,"MessageEventMethods"],[3,"MouseEventInit"],[8,"MouseEventMethods"],[8,"NamedNodeMapMethods"],[8,"NavigatorMethods"],[8,"NodeMethods"],[3,"NodeFilter"],[8,"NodeListMethods"],[8,"PerformanceMethods"],[8,"PerformanceTimingMethods"],[8,"ProcessingInstructionMethods"],[3,"ProgressEventInit"],[8,"ProgressEventMethods"],[8,"RangeMethods"],[8,"ScreenMethods"],[3,"SharedKeyboardAndMouseEventInit"],[8,"StorageMethods"],[3,"StorageEventInit"],[8,"StorageEventMethods"],[3,"TestDictionary"],[3,"TestDictionaryDefaults"],[4,"TestEnum"],[8,"TestBindingMethods"],[8,"TextEncoderMethods"],[8,"TreeWalkerMethods"],[3,"UIEventInit"],[8,"UIEventMethods"],[8,"URLSearchParamsMethods"],[8,"WebSocketMethods"],[8,"WindowMethods"],[8,"WorkerMethods"],[8,"WorkerGlobalScopeMethods"],[8,"WorkerLocationMethods"],[8,"WorkerNavigatorMethods"],[4,"XMLHttpRequestResponseType"],[8,"XMLHttpRequestMethods"],[8,"XMLHttpRequestEventTargetMethods"],[8,"AttrDerived"],[8,"BlobDerived"],[8,"CSSStyleDeclarationDerived"],[8,"CanvasGradientDerived"],[8,"CanvasPatternDerived"],[8,"CanvasRenderingContext2DDerived"],[8,"CharacterDataDerived"],[8,"CommentDerived"],[8,"ConsoleDerived"],[8,"CustomEventDerived"],[8,"DOMExceptionDerived"],[8,"DOMImplementationDerived"],[8,"DOMParserDerived"],[8,"DOMRectDerived"],[8,"DOMRectListDerived"],[8,"DOMStringMapDerived"],[8,"DOMTokenListDerived"],[8,"DedicatedWorkerGlobalScopeDerived"],[8,"DocumentDerived"],[8,"DocumentFragmentDerived"],[8,"DocumentTypeDerived"],[8,"ElementDerived"],[8,"ErrorEventDerived"],[8,"EventDerived"],[8,"EventTargetDerived"],[8,"FileDerived"],[8,"FormDataDerived"],[8,"HTMLAnchorElementDerived"],[8,"HTMLAppletElementDerived"],[8,"HTMLAreaElementDerived"],[8,"HTMLAudioElementDerived"],[8,"HTMLBRElementDerived"],[8,"HTMLBaseElementDerived"],[8,"HTMLBodyElementDerived"],[8,"HTMLButtonElementDerived"],[8,"HTMLCanvasElementDerived"],[8,"HTMLCollectionDerived"],[8,"HTMLDListElementDerived"],[8,"HTMLDataElementDerived"],[8,"HTMLDataListElementDerived"],[8,"HTMLDirectoryElementDerived"],[8,"HTMLDivElementDerived"],[8,"HTMLElementDerived"],[8,"HTMLEmbedElementDerived"],[8,"HTMLFieldSetElementDerived"],[8,"HTMLFontElementDerived"],[8,"HTMLFormElementDerived"],[8,"HTMLFrameElementDerived"],[8,"HTMLFrameSetElementDerived"],[8,"HTMLHRElementDerived"],[8,"HTMLHeadElementDerived"],[8,"HTMLHeadingElementDerived"],[8,"HTMLHtmlElementDerived"],[8,"HTMLIFrameElementDerived"],[8,"HTMLImageElementDerived"],[8,"HTMLInputElementDerived"],[8,"HTMLLIElementDerived"],[8,"HTMLLabelElementDerived"],[8,"HTMLLegendElementDerived"],[8,"HTMLLinkElementDerived"],[8,"HTMLMapElementDerived"],[8,"HTMLMediaElementDerived"],[8,"HTMLMetaElementDerived"],[8,"HTMLMeterElementDerived"],[8,"HTMLModElementDerived"],[8,"HTMLOListElementDerived"],[8,"HTMLObjectElementDerived"],[8,"HTMLOptGroupElementDerived"],[8,"HTMLOptionElementDerived"],[8,"HTMLOutputElementDerived"],[8,"HTMLParagraphElementDerived"],[8,"HTMLParamElementDerived"],[8,"HTMLPreElementDerived"],[8,"HTMLProgressElementDerived"],[8,"HTMLQuoteElementDerived"],[8,"HTMLScriptElementDerived"],[8,"HTMLSelectElementDerived"],[8,"HTMLSourceElementDerived"],[8,"HTMLSpanElementDerived"],[8,"HTMLStyleElementDerived"],[8,"HTMLTableCaptionElementDerived"],[8,"HTMLTableCellElementDerived"],[8,"HTMLTableColElementDerived"],[8,"HTMLTableDataCellElementDerived"],[8,"HTMLTableElementDerived"],[8,"HTMLTableHeaderCellElementDerived"],[8,"HTMLTableRowElementDerived"],[8,"HTMLTableSectionElementDerived"],[8,"HTMLTemplateElementDerived"],[8,"HTMLTextAreaElementDerived"],[8,"HTMLTimeElementDerived"],[8,"HTMLTitleElementDerived"],[8,"HTMLTrackElementDerived"],[8,"HTMLUListElementDerived"],[8,"HTMLUnknownElementDerived"],[8,"HTMLVideoElementDerived"],[8,"ImageDataDerived"],[8,"KeyboardEventDerived"],[8,"LocationDerived"],[8,"MessageEventDerived"],[8,"MouseEventDerived"],[8,"NamedNodeMapDerived"],[8,"NavigatorDerived"],[8,"NodeDerived"],[8,"NodeIteratorDerived"],[8,"NodeListDerived"],[8,"PerformanceDerived"],[8,"PerformanceTimingDerived"],[8,"ProcessingInstructionDerived"],[8,"ProgressEventDerived"],[8,"RangeDerived"],[8,"ScreenDerived"],[8,"ServoHTMLParserDerived"],[8,"StorageDerived"],[8,"StorageEventDerived"],[8,"TestBindingDerived"],[8,"TextDerived"],[8,"TextEncoderDerived"],[8,"TreeWalkerDerived"],[8,"UIEventDerived"],[8,"URLSearchParamsDerived"],[8,"ValidityStateDerived"],[8,"WebSocketDerived"],[8,"WindowDerived"],[8,"WorkerDerived"],[8,"WorkerGlobalScopeDerived"],[8,"WorkerLocationDerived"],[8,"WorkerNavigatorDerived"],[8,"XMLHttpRequestDerived"],[8,"XMLHttpRequestEventTargetDerived"],[8,"XMLHttpRequestUploadDerived"],[3,"AttrCast"],[3,"BlobCast"],[3,"CSSStyleDeclarationCast"],[3,"CanvasGradientCast"],[3,"CanvasPatternCast"],[3,"CanvasRenderingContext2DCast"],[3,"CharacterDataCast"],[3,"CommentCast"],[3,"ConsoleCast"],[3,"CustomEventCast"],[3,"DOMExceptionCast"],[3,"DOMImplementationCast"],[3,"DOMParserCast"],[3,"DOMRectCast"],[3,"DOMRectListCast"],[3,"DOMStringMapCast"],[3,"DOMTokenListCast"],[3,"DedicatedWorkerGlobalScopeCast"],[3,"DocumentCast"],[3,"DocumentFragmentCast"],[3,"DocumentTypeCast"],[3,"ElementCast"],[3,"ErrorEventCast"],[3,"EventCast"],[3,"EventTargetCast"],[3,"FileCast"],[3,"FormDataCast"],[3,"HTMLAnchorElementCast"],[3,"HTMLAppletElementCast"],[3,"HTMLAreaElementCast"],[3,"HTMLAudioElementCast"],[3,"HTMLBRElementCast"],[3,"HTMLBaseElementCast"],[3,"HTMLBodyElementCast"],[3,"HTMLButtonElementCast"],[3,"HTMLCanvasElementCast"],[3,"HTMLCollectionCast"],[3,"HTMLDListElementCast"],[3,"HTMLDataElementCast"],[3,"HTMLDataListElementCast"],[3,"HTMLDirectoryElementCast"],[3,"HTMLDivElementCast"],[3,"HTMLElementCast"],[3,"HTMLEmbedElementCast"],[3,"HTMLFieldSetElementCast"],[3,"HTMLFontElementCast"],[3,"HTMLFormElementCast"],[3,"HTMLFrameElementCast"],[3,"HTMLFrameSetElementCast"],[3,"HTMLHRElementCast"],[3,"HTMLHeadElementCast"],[3,"HTMLHeadingElementCast"],[3,"HTMLHtmlElementCast"],[3,"HTMLIFrameElementCast"],[3,"HTMLImageElementCast"],[3,"HTMLInputElementCast"],[3,"HTMLLIElementCast"],[3,"HTMLLabelElementCast"],[3,"HTMLLegendElementCast"],[3,"HTMLLinkElementCast"],[3,"HTMLMapElementCast"],[3,"HTMLMediaElementCast"],[3,"HTMLMetaElementCast"],[3,"HTMLMeterElementCast"],[3,"HTMLModElementCast"],[3,"HTMLOListElementCast"],[3,"HTMLObjectElementCast"],[3,"HTMLOptGroupElementCast"],[3,"HTMLOptionElementCast"],[3,"HTMLOutputElementCast"],[3,"HTMLParagraphElementCast"],[3,"HTMLParamElementCast"],[3,"HTMLPreElementCast"],[3,"HTMLProgressElementCast"],[3,"HTMLQuoteElementCast"],[3,"HTMLScriptElementCast"],[3,"HTMLSelectElementCast"],[3,"HTMLSourceElementCast"],[3,"HTMLSpanElementCast"],[3,"HTMLStyleElementCast"],[3,"HTMLTableCaptionElementCast"],[3,"HTMLTableCellElementCast"],[3,"HTMLTableColElementCast"],[3,"HTMLTableDataCellElementCast"],[3,"HTMLTableElementCast"],[3,"HTMLTableHeaderCellElementCast"],[3,"HTMLTableRowElementCast"],[3,"HTMLTableSectionElementCast"],[3,"HTMLTemplateElementCast"],[3,"HTMLTextAreaElementCast"],[3,"HTMLTimeElementCast"],[3,"HTMLTitleElementCast"],[3,"HTMLTrackElementCast"],[3,"HTMLUListElementCast"],[3,"HTMLUnknownElementCast"],[3,"HTMLVideoElementCast"],[3,"ImageDataCast"],[3,"KeyboardEventCast"],[3,"LocationCast"],[3,"MessageEventCast"],[3,"MouseEventCast"],[3,"NamedNodeMapCast"],[3,"NavigatorCast"],[3,"NodeCast"],[3,"NodeIteratorCast"],[3,"NodeListCast"],[3,"PerformanceCast"],[3,"PerformanceTimingCast"],[3,"ProcessingInstructionCast"],[3,"ProgressEventCast"],[3,"RangeCast"],[3,"ScreenCast"],[3,"ServoHTMLParserCast"],[3,"StorageCast"],[3,"StorageEventCast"],[3,"TestBindingCast"],[3,"TextCast"],[3,"TextEncoderCast"],[3,"TreeWalkerCast"],[3,"UIEventCast"],[3,"URLSearchParamsCast"],[3,"ValidityStateCast"],[3,"WebSocketCast"],[3,"WindowCast"],[3,"WorkerCast"],[3,"WorkerGlobalScopeCast"],[3,"WorkerLocationCast"],[3,"WorkerNavigatorCast"],[3,"XMLHttpRequestCast"],[3,"XMLHttpRequestEventTargetCast"],[3,"XMLHttpRequestUploadCast"],[4,"ID"],[4,"Proxies"],[4,"BlobOrString"],[4,"EventOrString"],[4,"FileOrString"],[4,"HTMLCanvasElementOrCanvasRenderingContext2D"],[4,"HTMLElementOrLong"],[4,"HTMLOptionElementOrHTMLOptGroupElement"],[4,"StringOrCanvasGradientOrCanvasPattern"],[4,"StringOrURLSearchParams"],[8,"Activatable"],[4,"AttrSettingType"],[4,"AttrValue"],[8,"AttrHelpers"],[8,"AttrHelpersForLayout"],[3,"Attr"],[4,"BlobTypeId"],[3,"Blob"],[3,"BrowserContext"],[3,"SessionHistoryEntry"],[4,"CanvasGradientStyle"],[8,"ToFillOrStrokeStyle"],[3,"CanvasGradient"],[3,"CanvasPattern"],[8,"CanvasRenderingContext2DHelpers"],[8,"LayoutCanvasRenderingContext2DHelpers"],[3,"CanvasRenderingContext2D"],[3,"CharacterData"],[4,"CSSModificationAccess"],[3,"CSSStyleDeclaration"],[3,"DOMRect"],[3,"DOMRectList"],[3,"DOMStringMap"],[3,"Comment"],[3,"Console"],[3,"CustomEvent"],[8,"DedicatedWorkerGlobalScopeHelpers"],[3,"SendableWorkerScriptChan"],[3,"DedicatedWorkerGlobalScope"],[4,"IsHTMLDocument"],[4,"DocumentSource"],[4,"DocumentProgressTask"],[8,"DocumentHelpers"],[8,"LayoutDocumentHelpers"],[3,"Document"],[3,"DocumentProgressHandler"],[3,"DocumentFragment"],[3,"DocumentType"],[4,"DOMErrorName"],[3,"DOMException"],[3,"DOMImplementation"],[3,"DOMParser"],[3,"DOMTokenList"],[4,"ElementTypeId"],[4,"ElementCreator"],[4,"StylePriority"],[8,"RawLayoutElementHelpers"],[8,"LayoutElementHelpers"],[8,"ElementHelpers"],[8,"AttributeHandlers"],[8,"ActivationElementHelpers"],[3,"Element"],[3,"ErrorEvent"],[4,"EventPhase"],[4,"EventTypeId"],[4,"EventBubbles"],[4,"EventCancelable"],[8,"EventHelpers"],[3,"Event"],[4,"ListenerPhase"],[4,"EventTargetTypeId"],[4,"EventListenerType"],[8,"EventTargetHelpers"],[3,"EventListenerEntry"],[3,"EventTarget"],[3,"File"],[4,"FormDatum"],[3,"FormData"],[3,"HTMLAnchorElement"],[3,"HTMLAppletElement"],[3,"HTMLAreaElement"],[3,"HTMLAudioElement"],[3,"HTMLBaseElement"],[8,"HTMLBodyElementHelpers"],[3,"HTMLBodyElement"],[3,"HTMLBRElement"],[3,"HTMLButtonElement"],[8,"LayoutHTMLCanvasElementHelpers"],[8,"HTMLCanvasElementHelpers"],[3,"HTMLCanvasElement"],[4,"CollectionTypeId"],[8,"CollectionFilter"],[3,"HTMLCollection"],[3,"HTMLDataElement"],[3,"HTMLDataListElement"],[3,"HTMLDirectoryElement"],[3,"HTMLDivElement"],[3,"HTMLDListElement"],[4,"HTMLElementTypeId"],[8,"HTMLElementCustomAttributeHelpers"],[3,"HTMLElement"],[3,"HTMLEmbedElement"],[3,"HTMLFieldSetElement"],[3,"HTMLFontElement"],[3,"FormDatum"],[4,"SubmittedFrom"],[4,"ResetFrom"],[4,"FormEncType"],[4,"FormMethod"],[4,"FormSubmitter"],[8,"HTMLFormElementHelpers"],[8,"FormControl"],[3,"HTMLFormElement"],[3,"HTMLFrameElement"],[3,"HTMLFrameSetElement"],[3,"HTMLHeadElement"],[4,"HeadingLevel"],[3,"HTMLHeadingElement"],[3,"HTMLHRElement"],[3,"HTMLHtmlElement"],[8,"HTMLIFrameElementHelpers"],[3,"HTMLIFrameElement"],[8,"LayoutHTMLImageElementHelpers"],[3,"HTMLImageElement"],[8,"LayoutHTMLInputElementHelpers"],[8,"RawLayoutHTMLInputElementHelpers"],[8,"HTMLInputElementHelpers"],[3,"HTMLInputElement"],[3,"HTMLLabelElement"],[3,"HTMLLegendElement"],[3,"HTMLLIElement"],[3,"HTMLLinkElement"],[3,"HTMLMapElement"],[4,"HTMLMediaElementTypeId"],[3,"HTMLMediaElement"],[3,"HTMLMetaElement"],[3,"HTMLMeterElement"],[3,"HTMLModElement"],[3,"HTMLObjectElement"],[3,"HTMLOListElement"],[3,"HTMLOptGroupElement"],[3,"HTMLOptionElement"],[3,"HTMLOutputElement"],[3,"HTMLParagraphElement"],[3,"HTMLParamElement"],[3,"HTMLPreElement"],[3,"HTMLProgressElement"],[3,"HTMLQuoteElement"],[4,"ScriptOrigin"],[8,"HTMLScriptElementHelpers"],[3,"HTMLScriptElement"],[3,"HTMLSelectElement"],[3,"HTMLSpanElement"],[3,"HTMLSourceElement"],[8,"StyleElementHelpers"],[3,"HTMLStyleElement"],[8,"HTMLTableElementHelpers"],[3,"HTMLTableElement"],[3,"HTMLTableCaptionElement"],[4,"HTMLTableCellElementTypeId"],[8,"HTMLTableCellElementHelpers"],[3,"HTMLTableCellElement"],[3,"HTMLTableDataCellElement"],[3,"HTMLTableHeaderCellElement"],[3,"HTMLTableColElement"],[8,"HTMLTableRowElementHelpers"],[3,"HTMLTableRowElement"],[8,"HTMLTableSectionElementHelpers"],[3,"HTMLTableSectionElement"],[3,"HTMLTemplateElement"],[8,"LayoutHTMLTextAreaElementHelpers"],[8,"RawLayoutHTMLTextAreaElementHelpers"],[8,"HTMLTextAreaElementHelpers"],[3,"HTMLTextAreaElement"],[3,"ChangeEventRunnable"],[3,"HTMLTimeElement"],[3,"HTMLTitleElement"],[3,"HTMLTrackElement"],[3,"HTMLUListElement"],[3,"HTMLVideoElement"],[3,"HTMLUnknownElement"],[8,"ImageDataHelpers"],[3,"ImageData"],[3,"KeyEventProperties"],[3,"KeyboardEvent"],[3,"Location"],[3,"MessageEvent"],[3,"MouseEvent"],[3,"NamedNodeMap"],[3,"Navigator"],[3,"SharedLayoutData"],[3,"LayoutDataRef"],[4,"NodeTypeId"],[4,"CloneChildrenFlag"],[4,"NodeDamage"],[8,"NodeHelpers"],[8,"LayoutNodeHelpers"],[8,"RawLayoutNodeHelpers"],[8,"DisabledStateHelpers"],[3,"Node"],[3,"NodeFlags"],[3,"QuerySelectorIterator"],[3,"NodeChildrenIterator"],[3,"ReverseChildrenIterator"],[3,"AncestorIterator"],[3,"TreeIterator"],[3,"TrustedNodeAddress"],[3,"NodeIterator"],[4,"NodeListType"],[3,"NodeList"],[3,"ProcessingInstruction"],[3,"Performance"],[8,"PerformanceTimingHelpers"],[3,"PerformanceTiming"],[3,"ProgressEvent"],[3,"Range"],[3,"Screen"],[3,"Sink"],[3,"FragmentContext"],[3,"ServoHTMLParser"],[3,"Storage"],[3,"StorageEventRunnable"],[3,"StorageEvent"],[3,"Text"],[3,"TextEncoder"],[4,"Filter"],[8,"TreeWalkerHelpers"],[3,"TreeWalker"],[3,"UIEvent"],[3,"UrlHelper"],[8,"URLSearchParamsHelpers"],[3,"URLSearchParams"],[3,"ValidityState"],[8,"VirtualMethods"],[3,"WebSocket"],[4,"ReflowReason"],[8,"WindowHelpers"],[8,"ScriptHelpers"],[3,"Window"],[3,"Worker"],[3,"WorkerMessageHandler"],[3,"WorkerEventHandler"],[3,"WorkerErrorHandler"],[4,"WorkerGlobalScopeTypeId"],[8,"WorkerGlobalScopeHelpers"],[3,"WorkerGlobalScope"],[3,"WorkerLocation"],[3,"WorkerNavigator"],[4,"XHRProgress"],[3,"GenerationId"],[3,"XMLHttpRequest"],[4,"XMLHttpRequestEventTargetTypeId"],[3,"XMLHttpRequestEventTarget"],[3,"XMLHttpRequestUpload"],[3,"TestBinding"],[4,"HTMLInput"],[8,"Parser"],[3,"Reflow"],[3,"ScriptReflow"],[3,"Animation"],[4,"Msg"],[4,"ReflowGoal"],[4,"ReflowQueryType"],[8,"LayoutRPC"],[8,"ScriptLayoutChan"],[3,"LayoutChan"],[3,"OpaqueScriptLayoutChannel"],[3,"Page"],[3,"Frame"],[8,"IterablePage"],[3,"PageIterator"],[4,"TimerSource"],[4,"ScriptMsg"],[8,"Runnable"],[8,"MainThreadRunnable"],[8,"ScriptChan"],[3,"NonWorkerScriptChan"],[3,"StackRootTLS"],[3,"ScriptTask"],[4,"KeyReaction"],[4,"Lines"],[3,"TextInput"],[3,"USVString"]]};
searchIndex['glutin_app'] = {"items":[[0,"","glutin_app","A simple application that uses glutin to open a window for Servo to display in."],[5,"create_window","",""],[0,"window","","A windowing implementation using glutin."],[3,"KeyModifiers","glutin_app::window",""],[3,"Window","","The type of a window."],[5,"glBindVertexArrayOES","",""],[5,"glDeleteVertexArraysOES","",""],[5,"glGenVertexArraysOES","",""],[5,"glRenderbufferStorageMultisampleIMG","",""],[5,"glFramebufferTexture2DMultisampleIMG","",""],[5,"glDiscardFramebufferEXT","",""],[17,"LEFT_CONTROL","",""],[17,"RIGHT_CONTROL","",""],[17,"LEFT_SHIFT","",""],[17,"RIGHT_SHIFT","",""],[17,"LEFT_ALT","",""],[17,"RIGHT_ALT","",""],[11,"hash","","",0],[11,"cmp","","",0],[11,"partial_cmp","","",0],[11,"lt","","",0],[11,"le","","",0],[11,"gt","","",0],[11,"ge","","",0],[11,"clone","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"fmt","","",0],[11,"empty","","Returns an empty set of flags.",0],[11,"all","","Returns the set containing all flags.",0],[11,"bits","","Returns the raw value of the flags currently stored.",0],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",0],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",0],[11,"is_empty","","Returns `true` if no flags are currently stored.",0],[11,"is_all","","Returns `true` if all flags are currently set.",0],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0],[11,"insert","","Inserts the specified flags in-place.",0],[11,"remove","","Removes the specified flags in-place.",0],[11,"toggle","","Toggles the specified flags in-place.",0],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",0],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",0],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",0],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",0],[11,"new","","",1],[11,"wait_events","","",1],[11,"set_nested_event_loop_listener","","",1],[11,"remove_nested_event_loop_listener","","",1],[11,"framebuffer_size","","",1],[11,"size","","",1],[11,"present","","",1],[11,"create_compositor_channel","","",1],[11,"set_ready_state","","Sets the ready state.",1],[11,"set_paint_state","","Sets the paint state.",1],[11,"hidpi_factor","","",1],[11,"set_page_title","","",1],[11,"set_page_url","","",1],[11,"load_end","","",1],[11,"set_cursor","","Has no effect on Android.",1],[11,"prepare_for_composite","","",1],[11,"native_metadata","","",1],[11,"handle_key","","Helper function to handle keyboard events.",1],[8,"NestedEventLoopListener","glutin_app",""],[10,"handle_event_from_nested_event_loop","","",2]],"paths":[[3,"KeyModifiers"],[3,"Window"],[8,"NestedEventLoopListener"]]};
searchIndex['compositing'] = {"items":[[0,"","compositing",""],[0,"compositor_task","","Communication with the compositor task."],[3,"LayerProperties","compositing::compositor_task","Information about each layer that the compositor keeps."],[12,"pipeline_id","","",0],[12,"epoch","","",0],[12,"id","","",0],[12,"rect","","",0],[12,"background_color","","",0],[12,"scroll_policy","","",0],[3,"CompositorTask","",""],[4,"Msg","","Messages from the painting task and the constellation task to the compositor task."],[13,"Exit","","Requests that the compositor shut down.",1],[13,"ShutdownComplete","","Informs the compositor that the constellation has completed shutdown.\nRequired because the constellation can have pending calls to make\n(e.g. SetFrameTree) at the time that we send it an ExitMsg.",1],[13,"GetGraphicsMetadata","","Requests the compositor's graphics metadata. Graphics metadata is what the painter needs\nto create surfaces that the compositor can see. On Linux this is the X display; on Mac this\nis the pixel format.",1],[13,"CreateOrUpdateBaseLayer","","Tells the compositor to create the root layer for a pipeline if necessary (i.e. if no layer\nwith that ID exists).",1],[13,"CreateOrUpdateDescendantLayer","","Tells the compositor to create a descendant layer for a pipeline if necessary (i.e. if no\nlayer with that ID exists).",1],[13,"SetLayerRect","","Alerts the compositor that the specified layer's rect has changed.",1],[13,"ScrollFragmentPoint","","Scroll a page in a window",1],[13,"AssignPaintedBuffers","","Requests that the compositor assign the painted buffers to the given layers.",1],[13,"ChangeReadyState","","Alerts the compositor to the current status of page loading.",1],[13,"ChangePaintState","","Alerts the compositor to the current status of painting.",1],[13,"ChangePageTitle","","Alerts the compositor that the current page has changed its title.",1],[13,"ChangePageUrl","","Alerts the compositor that the current page has changed its URL.",1],[13,"ChangeRunningAnimationsState","","Alerts the compositor that the given pipeline has changed whether it is running animations.",1],[13,"PaintMsgDiscarded","","Alerts the compositor that a `PaintMsg` has been discarded.",1],[13,"SetFrameTree","","Replaces the current frame tree, typically called during main frame navigation.",1],[13,"LoadComplete","","The load of a page has completed.",1],[13,"ScrollTimeout","","Indicates that the scrolling timeout with the given starting timestamp has happened and a\ncomposite should happen. (See the `scrolling` module.)",1],[13,"KeyEvent","","Sends an unconsumed key event back to the compositor.",1],[13,"SetCursor","","Changes the cursor.",1],[13,"PaintTaskExited","","Informs the compositor that the paint task for the given pipeline has exited.",1],[8,"CompositorProxy","","Sends messages to the compositor. This is a trait supplied by the port because the method used\nto communicate with the compositor may have to kick OS event loops awake, communicate cross-\nprocess, and so forth."],[10,"send","","Sends a message to the compositor.",2],[10,"clone_compositor_proxy","","Clones the compositor proxy.",2],[8,"CompositorReceiver","","The port that the compositor receives messages on. As above, this is a trait supplied by the\nServo port."],[10,"try_recv_compositor_msg","","Receives the next message inbound for the compositor. This must not block.",3],[10,"recv_compositor_msg","","Synchronously waits for, and returns, the next message inbound for the compositor.",3],[8,"CompositorEventListener","",""],[10,"handle_event","","",4],[10,"repaint_synchronously","","",4],[10,"shutdown","","",4],[10,"pinch_zoom_level","","",4],[10,"get_title_for_main_frame","","Requests that the compositor send the title for the main frame as soon as possible.",4],[11,"try_recv_compositor_msg","std::sync::mpsc","",5],[11,"recv_compositor_msg","","",5],[11,"set_ready_state","alloc::boxed","",6],[11,"scroll_fragment_point","","",6],[11,"close","","",6],[11,"dup","","",6],[11,"set_title","","",6],[11,"send_key_event","","",6],[11,"get_graphics_metadata","","",6],[11,"assign_painted_buffers","","",6],[11,"initialize_layers_for_pipeline","","",6],[11,"paint_msg_discarded","","",6],[11,"set_paint_state","","",6],[11,"fmt","compositing::compositor_task","",1],[11,"create_graphics_context","","Creates a graphics context. Platform-specific.",7],[11,"create","","",7],[11,"update_layer_except_bounds","layers::layers","",8],[11,"update_layer","","",8],[11,"add_buffers","","",8],[11,"clear","","",8],[11,"clear_all_tiles","","Destroys tiles for this layer and all descendent layers, sending the buffers back to the\npainter to be destroyed or reused.",8],[11,"forget_all_tiles","","Destroys all tiles of all layers, including children, *without* sending them back to the\npainter. You must call this only when the paint task is destined to be going down;\notherwise, you will leak tiles.",8],[11,"handle_scroll_event","","",8],[11,"clamp_scroll_offset_and_scroll_layer","","",8],[11,"send_mouse_event","","",8],[11,"send_mouse_move_event","","",8],[11,"scroll_layer_and_all_child_layers","","",8],[11,"wants_scroll_events","","",8],[11,"get_pipeline_id","","",8],[0,"pipeline","compositing",""],[3,"Pipeline","compositing::pipeline","A uniquely-identifiable pipeline of script task, layout task, and paint task."],[12,"id","","",9],[12,"parent_info","","",9],[12,"script_chan","","",9],[12,"layout_chan","","A channel to layout, for performing reflows and shutdown.",9],[12,"paint_chan","","",9],[12,"layout_shutdown_port","","",9],[12,"paint_shutdown_port","","",9],[12,"url","","URL corresponding to the most recently-loaded page.",9],[12,"title","","The title of the most recently-loaded page.",9],[12,"rect","","",9],[12,"running_animations","","Whether this pipeline is currently running animations. Pipelines that are running\nanimations cause composites to be continually scheduled.",9],[12,"children","","",9],[3,"CompositionPipeline","","The subset of the pipeline that is needed for layer composition."],[12,"id","","",10],[12,"script_chan","","",10],[12,"paint_chan","","",10],[11,"clone","","",10],[11,"create","","Starts a paint task, layout task, and possibly a script task.\nReturns the channels wrapped in a struct.\nIf script_pipeline is not None, then subpage_id must also be not None.",9],[11,"new","","",9],[11,"grant_paint_permission","","",9],[11,"revoke_paint_permission","","",9],[11,"exit","","",9],[11,"freeze","","",9],[11,"thaw","","",9],[11,"force_exit","","",9],[11,"to_sendable","","",9],[11,"add_child","","",9],[11,"trigger_mozbrowser_event","","",9],[0,"constellation","compositing",""],[3,"Constellation","compositing::constellation","Maintains the pipelines and navigation context and grants permission to composite."],[12,"chan","","A channel through which messages can be sent to this object.",11],[12,"request_port","","Receives messages.",11],[12,"compositor_proxy","","A channel (the implementation of which is port-specific) through which messages can be sent\nto the compositor.",11],[12,"resource_task","","A channel through which messages can be sent to the resource task.",11],[12,"image_cache_task","","A channel through which messages can be sent to the image cache task.",11],[12,"time_profiler_chan","","A channel through which messages can be sent to the time profiler.",11],[12,"mem_profiler_chan","","A channel through which messages can be sent to the memory profiler.",11],[12,"window_size","","",11],[3,"Frame","","Stores the navigation context for a single frame in the frame tree."],[3,"SendableFrameTree","",""],[12,"pipeline","","",12],[12,"rect","","",12],[12,"children","","",12],[11,"start","","",11],[0,"windowing","compositing","Abstract windowing methods. The concrete implementations of these can be found in `platform/`."],[4,"MouseWindowEvent","compositing::windowing",""],[13,"Click","","",13],[13,"MouseDown","","",13],[13,"MouseUp","","",13],[4,"WindowNavigateMsg","",""],[13,"Forward","","",14],[13,"Back","","",14],[4,"WindowEvent","","Events that the windowing system sends to Servo."],[13,"Idle","","Sent when no message has arrived, but the event loop was kicked for some reason (perhaps\nby another Servo subsystem).",15],[13,"Refresh","","Sent when part of the window is marked dirty and needs to be redrawn. Before sending this\nmessage, the window must make the same GL context as in `PrepareRenderingEvent` current.",15],[13,"InitializeCompositing","","Sent to initialize the GL context. The windowing system must have a valid, current GL\ncontext when this message is sent.",15],[13,"Resize","","Sent when the window is resized.",15],[13,"LoadUrl","","Sent when a new URL is to be loaded.",15],[13,"MouseWindowEventClass","","Sent when a mouse hit test is to be performed.",15],[13,"MouseWindowMoveEventClass","","Sent when a mouse move.",15],[13,"Scroll","","Sent when the user scrolls. The first point is the delta and the second point is the\norigin.",15],[13,"Zoom","","Sent when the user zooms.",15],[13,"PinchZoom","","Simulated \"pinch zoom\" gesture for non-touch platforms (e.g. ctrl-scrollwheel).",15],[13,"Navigation","","Sent when the user uses chrome navigation (i.e. backspace or shift-backspace).",15],[13,"Quit","","Sent when the user quits the application",15],[13,"KeyEvent","","Sent when a key input state changes",15],[8,"WindowMethods","",""],[10,"framebuffer_size","","Returns the size of the window in hardware pixels.",16],[10,"size","","Returns the size of the window in density-independent \"px\" units.",16],[10,"present","","Presents the window to the screen (perhaps by page flipping).",16],[10,"set_ready_state","","Sets the ready state of the current page.",16],[10,"set_paint_state","","Sets the paint state of the current page.",16],[10,"set_page_title","","Sets the page title for the current page.",16],[10,"set_page_url","","Sets the load data for the current page.",16],[10,"load_end","","Called when the browser is done loading a frame.",16],[10,"hidpi_factor","","Returns the hidpi factor of the monitor.",16],[10,"native_metadata","","Gets the OS native graphics information for this window.",16],[10,"create_compositor_channel","","Creates a channel to the compositor. The dummy parameter is needed because we don't have\nUFCS in Rust yet.",16],[10,"prepare_for_composite","","Requests that the window system prepare a composite. Typically this will involve making\nsome type of platform-specific graphics context current. Returns true if the composite may\nproceed and false if it should not.",16],[10,"set_cursor","","Sets the cursor to be used in the window.",16],[10,"handle_key","","Process a key event.",16],[11,"clone","","",13],[11,"clone","","",14],[11,"clone","","",15],[11,"fmt","","",15]],"paths":[[3,"LayerProperties"],[4,"Msg"],[8,"CompositorProxy"],[8,"CompositorReceiver"],[8,"CompositorEventListener"],[3,"Receiver"],[3,"Box"],[3,"CompositorTask"],[3,"Layer"],[3,"Pipeline"],[3,"CompositionPipeline"],[3,"Constellation"],[3,"SendableFrameTree"],[4,"MouseWindowEvent"],[4,"WindowNavigateMsg"],[4,"WindowEvent"],[8,"WindowMethods"]]};
searchIndex['canvas'] = {"items":[[0,"","canvas",""],[0,"canvas_paint_task","",""],[3,"CanvasPaintTask","canvas::canvas_paint_task",""],[3,"CanvasGradientStop","",""],[12,"offset","","",0],[12,"color","","",0],[3,"LinearGradientStyle","",""],[12,"x0","","",1],[12,"y0","","",1],[12,"x1","","",1],[12,"y1","","",1],[12,"stops","","",1],[3,"RadialGradientStyle","",""],[12,"x0","","",2],[12,"y0","","",2],[12,"r0","","",2],[12,"x1","","",2],[12,"y1","","",2],[12,"r1","","",2],[12,"stops","","",2],[4,"CanvasMsg","",""],[13,"FillRect","","",3],[13,"ClearRect","","",3],[13,"StrokeRect","","",3],[13,"BeginPath","","",3],[13,"ClosePath","","",3],[13,"Fill","","",3],[13,"Stroke","","",3],[13,"DrawImage","","",3],[13,"DrawImageSelf","","",3],[13,"MoveTo","","",3],[13,"LineTo","","",3],[13,"QuadraticCurveTo","","",3],[13,"BezierCurveTo","","",3],[13,"Arc","","",3],[13,"SetFillStyle","","",3],[13,"SetStrokeStyle","","",3],[13,"SetTransform","","",3],[13,"Recreate","","",3],[13,"SendPixelContents","","",3],[13,"GetImageData","","",3],[13,"PutImageData","","",3],[13,"Close","","",3],[4,"FillOrStrokeStyle","",""],[13,"Color","","",4],[13,"LinearGradient","","",4],[13,"RadialGradient","","",4],[8,"ToAzFloat","",""],[10,"to_azfloat","","",5],[11,"clone","","",3],[11,"start","","",6],[11,"clone","","",0],[11,"clone","","",1],[11,"new","","",1],[11,"clone","","",2],[11,"new","","",2],[11,"clone","","",4],[11,"to_azfloat","geom::rect","",7]],"paths":[[3,"CanvasGradientStop"],[3,"LinearGradientStyle"],[3,"RadialGradientStyle"],[4,"CanvasMsg"],[4,"FillOrStrokeStyle"],[8,"ToAzFloat"],[3,"CanvasPaintTask"],[3,"Rect"]]};
searchIndex['layout_traits'] = {"items":[[0,"","layout_traits",""],[3,"LayoutControlChan","","A channel wrapper for constellation messages"],[4,"LayoutControlMsg","","Messages sent to the layout task from the constellation"],[13,"ExitNowMsg","","",0],[13,"TickAnimationsMsg","","",0],[8,"LayoutTaskFactory","",""],[10,"create","","",1]],"paths":[[4,"LayoutControlMsg"],[8,"LayoutTaskFactory"]]};
searchIndex['gfx'] = {"items":[[0,"","gfx",""],[3,"PaintContext","",""],[12,"draw_target","","",0],[12,"font_context","","",0],[12,"page_rect","","The rectangle that this context encompasses in page coordinates.",0],[12,"screen_rect","","The rectangle that this context encompasses in screen coordinates (pixels).",0],[12,"clip_rect","","The clipping rect for the stacking context as a whole.",0],[12,"transient_clip","","The current transient clipping region, if any. A \"transient clipping region\" is the\nclipping region used by the last display item. We cache the last value so that we avoid\npushing and popping clipping regions unnecessarily.",0],[11,"get_draw_target","","",0],[11,"draw_solid_color","","",0],[11,"draw_border","","",0],[11,"draw_line","","",0],[11,"draw_push_clip","","",0],[11,"draw_pop_clip","","",0],[11,"draw_image","","",0],[11,"clear","","",0],[11,"draw_text","","Draws the given text display item into the current context.",0],[11,"draw_linear_gradient","","Draws a linear gradient in the given boundaries from the given start point to the given end\npoint with the given stops.",0],[11,"get_or_create_temporary_draw_target","","",0],[11,"draw_temporary_draw_target_if_necessary","","If we created a temporary draw target, then draw it to the main draw target. This is called\nafter doing all the painting, and the temporary draw target must not be used afterward.",0],[11,"draw_box_shadow","","Draws a box shadow with the given boundaries, color, offset, blur radius, and spread\nradius. `box_bounds` represents the boundaries of the box.",0],[11,"push_clip_if_applicable","","",0],[11,"pop_clip_if_applicable","","",0],[11,"remove_transient_clip_if_applicable","","",0],[11,"push_transient_clip","","Sets a new transient clipping region. Automatically calls\n`remove_transient_clip_if_applicable()` first.",0],[11,"to_azure_point","geom::point","",1],[11,"to_subpx_azure_point","","",1],[11,"to_azure_rect","geom::rect","",2],[11,"to_subpx_azure_rect","","",2],[11,"to_azure_size","gfx::paint_context","",3],[0,"color","gfx",""],[5,"new","gfx::color",""],[5,"rgb","",""],[5,"rgba","",""],[5,"black","",""],[5,"transparent_black","",""],[5,"white","",""],[0,"display_list","gfx","Servo heavily uses display lists, which are retained-mode lists of painting commands to\nperform. Using a list instead of painting elements in immediate mode allows transforms, hit\ntesting, and invalidation to be performed using the same primitives as painting. It also allows\nServo to aggressively cull invisible and out-of-bounds painting elements, to reduce overdraw.\nFinally, display lists allow tiles to be farmed out onto multiple CPUs and painted in parallel\n(although this benefit does not apply to GPU-based painting)."],[11,"as_azure_rect","geom::rect","",2],[11,"as_azure_int_size","geom::size","",4],[11,"as_azure_point","geom::point","",1],[11,"drop","azure::azure_hl","",5],[11,"new","","",5],[11,"eq","","",6],[11,"ne","","",6],[11,"clone","","",6],[11,"eq","","",7],[11,"ne","","",7],[11,"clone","","",7],[11,"new","","",8],[11,"new","","",9],[11,"set_composition_op","","",9],[11,"set_antialias_mode","","",9],[11,"new","","",10],[11,"as_azure_filter","","",11],[11,"new","","",12],[11,"eq","","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"as_azure_backend_type","","",13],[11,"drop","","",14],[11,"eq","","",14],[11,"new","","",14],[11,"new_with_data","","",14],[11,"new_with_fbo","","",14],[11,"clone","","",14],[11,"make_current","","",14],[11,"steal_draw_target_backing","","Consumes this draw target and returns the underlying draw target backing.",14],[11,"get_size","","",14],[11,"get_format","","",14],[11,"get_transform","","",14],[11,"flush","","",14],[11,"clear_rect","","",14],[11,"fill","","",14],[11,"fill_rect","","",14],[11,"stroke","","",14],[11,"stroke_line","","",14],[11,"stroke_rect","","",14],[11,"draw_surface","","",14],[11,"draw_filter","","",14],[11,"draw_surface_with_shadow","","",14],[11,"snapshot","","",14],[11,"create_source_surface_from_data","","",14],[11,"create_similar_draw_target","","",14],[11,"create_shadow_draw_target","","",14],[11,"create_gradient_stops","","",14],[11,"set_transform","","",14],[11,"fill_glyphs","","",14],[11,"create_path_builder","","",14],[11,"create_filter","","",14],[11,"push_clip","","",14],[11,"push_clip_rect","","",14],[11,"pop_clip","","",14],[11,"drop","","",15],[11,"clone","","",15],[11,"make_current","","",15],[11,"flush","","",15],[11,"drop","","",16],[11,"new","","",16],[11,"drop","","",17],[11,"new","","",17],[11,"clone","","",18],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"get_data_surface","","",16],[11,"get_azure_source_surface","","",16],[11,"drop","","",20],[11,"with_data","","",20],[11,"stride","","",20],[11,"get_size","","",20],[11,"get_azure_source_surface","","",20],[11,"drop","","",21],[11,"move_to","","",22],[11,"line_to","","",22],[11,"arc","","Adds an arc to the current figure.",22],[11,"quadratic_curve_to","","Adds a quadratic Bézier curve to the current figure.",22],[11,"bezier_curve_to","","Adds a cubic Bézier curve to the current figure.",22],[11,"close","","Closes the current path.",22],[11,"finish","","",22],[11,"drop","","",22],[11,"drop","","",23],[11,"new","","",23],[11,"drop","","",24],[11,"new","","",24],[11,"to_pattern_ref","","",25],[11,"drop","","",26],[11,"set_input","","",26],[11,"set_attribute","","",26],[11,"azure_index","","",27],[11,"azure_index","","",28],[11,"azure_index","","",29],[11,"azure_index","","",30],[11,"azure_index","","",31],[11,"azure_index","","",32],[11,"set","","",33],[11,"set","","",34],[11,"set","","",35],[11,"set","","",36],[11,"set","","",37],[11,"as_azure_filter_type","","",38],[11,"set","","",16],[11,"set","","",26],[11,"fmt","","",39],[11,"clone","","",39],[11,"eq","","",39],[11,"ne","","",39],[11,"as_azure_matrix_5x4","","",39],[11,"drop","azure::scaled_font","",40],[11,"get_ref","","",40],[11,"new","","",40],[11,"clone","azure::azure","",41],[11,"eq","","",41],[11,"clone","","",42],[11,"eq","","",42],[11,"ne","","",42],[3,"GradientStop","gfx::display_list",""],[12,"offset","","",18],[12,"color","","",18],[3,"OpaqueNode","","An opaque handle to a node. The only safe operation that can be performed on this node is to\ncompare it to another opaque handle or to another node."],[3,"DisplayList","","Display items that make up a stacking context. \"Steps\" here refer to the steps in CSS 2.1\nAppendix E."],[12,"background_and_borders","","The border and backgrounds for the root of this stacking context: steps 1 and 2.",43],[12,"block_backgrounds_and_borders","","Borders and backgrounds for block-level descendants: step 4.",43],[12,"floats","","Floats: step 5. These are treated as pseudo-stacking contexts.",43],[12,"content","","All other content.",43],[12,"outlines","","Outlines: step 10.",43],[12,"children","","Child stacking contexts.",43],[3,"StackingContext","","Represents one CSS stacking context, which may or may not have a hardware layer."],[12,"display_list","","The display items that make up this stacking context.",44],[12,"layer","","The layer for this stacking context, if there is one.",44],[12,"bounds","","The position and size of this stacking context.",44],[12,"overflow","","The overflow rect for this stacking context in its coordinate system.",44],[12,"z_index","","The `z-index` for this stacking context.",44],[12,"filters","","CSS filters to be applied to this stacking context (including opacity).",44],[12,"blend_mode","","The blend mode with which this stacking context blends with its backdrop.",44],[12,"transform","","A transform to be applied to this stacking context.",44],[3,"BaseDisplayItem","","Information common to all display items."],[12,"bounds","","The boundaries of the display item, in layer coordinates.",45],[12,"metadata","","Metadata attached to this display item.",45],[12,"clip","","The region to clip to.",45],[3,"ClippingRegion","","A clipping region for a display item. Currently, this can describe rectangles, rounded\nrectangles (for `border-radius`), or arbitrary intersections of the two. Arbitrary transforms\nare not supported because those are handled by the higher-level `StackingContext` abstraction."],[12,"main","","The main rectangular region. This does not include any corners.",46],[12,"complex","","Any complex regions.",46],[3,"ComplexClippingRegion","","A complex clipping region. These don't as easily admit arbitrary intersection operations, so\nthey're stored in a list over to the side. Currently a complex clipping region is just a\nrounded rectangle, but the CSS WGs will probably make us throw more stuff in here eventually."],[12,"rect","","The boundaries of the rectangle.",47],[12,"radii","","Border radii of this rectangle.",47],[3,"DisplayItemMetadata","","Metadata attached to each display item. This is useful for performing auxiliary tasks with\nthe display list involving hit testing: finding the originating DOM node and determining the\ncursor to use when the element is hovered over."],[12,"node","","The DOM node from which this display item originated.",48],[12,"pointing","","The value of the `cursor` property when the mouse hovers over this display item. If `None`,\nthis display item is ineligible for pointer events (`pointer-events: none`).",48],[3,"SolidColorDisplayItem","","Paints a solid color."],[12,"base","","Fields common to all display items.",49],[12,"color","","The color.",49],[3,"TextDisplayItem","","Paints text."],[12,"base","","Fields common to all display items.",50],[12,"text_run","","The text run.",50],[12,"range","","The range of text within the text run.",50],[12,"text_color","","The color of the text.",50],[12,"baseline_origin","","The position of the start of the baseline of this text.",50],[12,"orientation","","The orientation of the text: upright or sideways left/right.",50],[12,"blur_radius","","The blur radius for this text. If zero, this text is not blurred.",50],[3,"ImageDisplayItem","","Paints an image."],[12,"base","","",51],[12,"image","","",51],[12,"stretch_size","","The dimensions to which the image display item should be stretched. If this is smaller than\nthe bounds of this display item, then the image will be repeated in the appropriate\ndirection to tile the entire bounds.",51],[12,"image_rendering","","The algorithm we should use to stretch the image. See `image_rendering` in CSS-IMAGES-3 §\n5.3.",51],[3,"GradientDisplayItem","","Paints a gradient."],[12,"base","","Fields common to all display items.",52],[12,"start_point","","The start point of the gradient (computed during display list construction).",52],[12,"end_point","","The end point of the gradient (computed during display list construction).",52],[12,"stops","","A list of color stops.",52],[3,"BorderDisplayItem","","Paints a border."],[12,"base","","Fields common to all display items.",53],[12,"border_widths","","Border widths.",53],[12,"color","","Border colors.",53],[12,"style","","Border styles.",53],[12,"radius","","Border radii.",53],[3,"BorderRadii","","Information about the border radii."],[12,"top_left","","",54],[12,"top_right","","",54],[12,"bottom_right","","",54],[12,"bottom_left","","",54],[3,"LineDisplayItem","","Paints a line segment."],[12,"base","","",55],[12,"color","","The line segment color.",55],[12,"style","","The line segment style.",55],[3,"BoxShadowDisplayItem","","Paints a box shadow per CSS-BACKGROUNDS."],[12,"base","","Fields common to all display items.",56],[12,"box_bounds","","The dimensions of the box that we're placing a shadow around.",56],[12,"offset","","The offset of this shadow from the box.",56],[12,"color","","The color of this shadow.",56],[12,"blur_radius","","The blur radius for this shadow.",56],[12,"spread_radius","","The spread radius of this shadow.",56],[12,"clip_mode","","How we should clip the result.",56],[4,"DisplayItem","","One drawing command in the list."],[13,"SolidColorClass","","",57],[13,"TextClass","","",57],[13,"ImageClass","","",57],[13,"BorderClass","","",57],[13,"GradientClass","","",57],[13,"LineClass","","",57],[13,"BoxShadowClass","","",57],[4,"TextOrientation","",""],[13,"Upright","","",58],[13,"SidewaysLeft","","",58],[13,"SidewaysRight","","",58],[4,"BoxShadowClipMode","","How a box shadow should be clipped."],[13,"None","","No special clipping should occur. This is used for (shadowed) text decorations.",59],[13,"Outset","","The area inside `box_bounds` should be clipped out. Corresponds to the normal CSS\n`box-shadow`.",59],[13,"Inset","","The area outside `box_bounds` should be clipped out. Corresponds to the `inset` flag on CSS\n`box-shadow`.",59],[4,"DisplayItemIterator","",""],[13,"Empty","","",60],[13,"Parent","","",60],[5,"find_stacking_context_with_layer_id","","Returns the stacking context in the given tree of stacking contexts with a specific layer ID."],[0,"optimizer","","Transforms a display list to produce a visually-equivalent, but cheaper-to-paint, one."],[3,"DisplayListOptimizer","gfx::display_list::optimizer","Transforms a display list to produce a visually-equivalent, but cheaper-to-paint, one."],[11,"new","","Creates a new display list optimizer object. `visible_rect` specifies the visible rect in\npage coordinates.",61],[11,"optimize","","Optimizes the given display list, returning an equivalent, but cheaper-to-paint, one.",61],[7,"BLUR_INFLATION_FACTOR","gfx::display_list","The factor that we multiply the blur radius by in order to inflate the boundaries of display\nitems that involve a blur. This ensures that the display item boundaries include all the ink."],[11,"eq","","",62],[11,"ne","","",62],[11,"clone","","",62],[11,"id","","Returns the address of this node, for debugging purposes.",62],[11,"new","","Creates a new, empty display list.",43],[11,"append_from","","Appends all display items from `other` into `self`, preserving stacking order and emptying\n`other` in the process.",43],[11,"form_float_pseudo_stacking_context","","Merges all display items from all non-float stacking levels to the `float` stacking level.",43],[11,"all_display_items","","Returns a list of all items in this display list concatenated together. This is extremely\ninefficient and should only be used for debugging.",43],[11,"print_items","","",43],[11,"heap_size_of_children","","",43],[11,"new","","Creates a new stacking context.",44],[11,"optimize_and_draw_into_context","","Draws the stacking context in the proper order according to the steps in CSS 2.1 § E.2.",44],[11,"hit_test","","Places all nodes containing the point of interest into `result`, topmost first. Respects\nthe `pointer-events` CSS property If `topmost_only` is true, stops after placing one node\ninto the list. `result` must be empty upon entry to this function.",44],[11,"heap_size_of_children","","",44],[11,"clone","","",57],[11,"clone","","",45],[11,"new","","",45],[11,"heap_size_of_children","","",45],[11,"fmt","","",46],[11,"eq","","",46],[11,"ne","","",46],[11,"clone","","",46],[11,"fmt","","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"clone","","",47],[11,"empty","","Returns an empty clipping region that, if set, will result in no pixels being visible.",46],[11,"max","","Returns an all-encompassing clipping region that clips no pixels out.",46],[11,"from_rect","","Returns a clipping region that represents the given rectangle.",46],[11,"intersect_rect","","Returns the intersection of this clipping region and the given rectangle.",46],[11,"might_be_nonempty","","Returns true if this clipping region might be nonempty. This can return false positives,\nbut never false negatives.",46],[11,"might_intersect_point","","Returns true if this clipping region might contain the given point and false otherwise.\nThis is a quick, not a precise, test; it can yield false positives.",46],[11,"might_intersect_rect","","Returns true if this clipping region might intersect the given rectangle and false\notherwise. This is a quick, not a precise, test; it can yield false positives.",46],[11,"bounding_rect","","Returns a bounding rect that surrounds this entire clipping region.",46],[11,"intersect_with_rounded_rect","","Intersects this clipping region with the given rounded rectangle.",46],[11,"translate","","Translates this clipping region by the given vector.",46],[11,"heap_size_of_children","","",46],[11,"heap_size_of_children","","",47],[11,"clone","","",48],[11,"new","","Creates a new set of display metadata for a display item constributed by a DOM node.\n`default_cursor` specifies the cursor to use if `cursor` is `auto`. Typically, this will\nbe `PointerCursor`, but for text display items it may be `TextCursor` or\n`VerticalTextCursor`.",48],[11,"heap_size_of_children","","",48],[11,"clone","","",49],[11,"heap_size_of_children","","",49],[11,"clone","","",50],[11,"heap_size_of_children","","",50],[11,"eq","","",58],[11,"ne","","",58],[11,"clone","","",58],[11,"clone","","",51],[11,"heap_size_of_children","","",51],[11,"clone","","",52],[11,"heap_size_of_children","","",52],[11,"clone","","",53],[11,"heap_size_of_children","","",53],[11,"fmt","","",54],[11,"eq","","",54],[11,"ne","","",54],[11,"default","","",54],[11,"clone","","",54],[11,"is_square","","Returns true if all the radii are zero.",54],[11,"all_same","","Returns a set of border radii that all have the given value.",54],[11,"clone","","",55],[11,"heap_size_of_children","","",55],[11,"clone","","",56],[11,"heap_size_of_children","","",56],[11,"eq","","",59],[11,"ne","","",59],[11,"fmt","","",59],[11,"clone","","",59],[6,"Item","",""],[11,"next","","",60],[11,"base","","",57],[11,"mut_base","","",57],[11,"bounds","","",57],[11,"debug_with_level","","",57],[11,"fmt","","",57],[11,"heap_size_of_children","","",57],[0,"paint_task","gfx","The task that handles all painting."],[3,"PaintLayer","gfx::paint_task","Information about a hardware graphics layer that layout sends to the painting task."],[12,"id","","A per-pipeline ID describing this layer that should be stable across reflows.",63],[12,"background_color","","The color of the background in this layer. Used for unpainted content.",63],[12,"scroll_policy","","The scrolling policy of this layer.",63],[3,"PaintRequest","",""],[12,"buffer_requests","","",64],[12,"scale","","",64],[12,"layer_id","","",64],[12,"epoch","","",64],[3,"PaintChan","",""],[3,"PaintTask","",""],[4,"Msg","",""],[13,"PaintInit","","",65],[13,"Paint","","",65],[13,"UnusedBuffer","","",65],[13,"PaintPermissionGranted","","",65],[13,"PaintPermissionRevoked","","",65],[13,"Exit","","",65],[7,"THREAD_TINT_COLORS","",""],[11,"clone","","",63],[11,"new","","Creates a new `PaintLayer`.",63],[11,"clone","","",66],[11,"new","","",66],[11,"send","","",66],[11,"send_opt","","",66],[11,"create","","",67],[0,"font","gfx",""],[3,"FontMetrics","gfx::font",""],[12,"underline_size","","",68],[12,"underline_offset","","",68],[12,"strikeout_size","","",68],[12,"strikeout_offset","","",68],[12,"leading","","",68],[12,"x_height","","",68],[12,"em_size","","",68],[12,"ascent","","",68],[12,"descent","","",68],[12,"max_advance","","",68],[12,"average_advance","","",68],[12,"line_gap","","",68],[3,"Font","",""],[12,"handle","","",69],[12,"metrics","","",69],[12,"variant","","",69],[12,"descriptor","","",69],[12,"requested_pt_size","","",69],[12,"actual_pt_size","","",69],[12,"shaper","","",69],[12,"shape_cache","","",69],[12,"glyph_advance_cache","","",69],[3,"ShapingFlags","",""],[3,"ShapingOptions","","Various options that control text shaping."],[12,"letter_spacing","","Spacing to add between each letter. Corresponds to the CSS 2.1 `letter-spacing` property.\nNB: You will probably want to set the `IGNORE_LIGATURES_SHAPING_FLAG` if this is non-null.",70],[12,"word_spacing","","Spacing to add between each word. Corresponds to the CSS 2.1 `word-spacing` property.",70],[12,"flags","","Various flags.",70],[3,"ShapeCacheEntry","","An entry in the shape cache."],[3,"FontGroup","",""],[12,"fonts","","",71],[3,"RunMetrics","",""],[12,"advance_width","","",72],[12,"ascent","","",72],[12,"descent","","",72],[12,"bounding_box","","",72],[6,"FractionalPixel","",""],[6,"FontTableTag","",""],[6,"SpecifiedFontStyle","",""],[6,"UsedFontStyle","",""],[17,"IS_WHITESPACE_SHAPING_FLAG","","Set if the text is entirely whitespace."],[17,"IGNORE_LIGATURES_SHAPING_FLAG","","Set if we are to ignore ligatures."],[17,"DISABLE_KERNING_SHAPING_FLAG","","Set if we are to disable kerning."],[8,"FontHandleMethods","",""],[10,"new_from_template","","",73],[10,"get_template","","",73],[10,"family_name","","",73],[10,"face_name","","",73],[10,"is_italic","","",73],[10,"boldness","","",73],[10,"stretchiness","","",73],[10,"glyph_index","","",73],[10,"glyph_h_advance","","",73],[10,"glyph_h_kerning","","",73],[10,"get_metrics","","",73],[10,"get_table_for_tag","","",73],[8,"FontTableTagConversions","",""],[10,"tag_to_str","","",74],[8,"FontTableMethods","",""],[10,"with_buffer","","",75],[11,"tag_to_str","","",76],[11,"fmt","","",68],[11,"clone","","",68],[11,"hash","","",77],[11,"cmp","","",77],[11,"partial_cmp","","",77],[11,"lt","","",77],[11,"le","","",77],[11,"gt","","",77],[11,"ge","","",77],[11,"clone","","",77],[11,"eq","","",77],[11,"ne","","",77],[11,"empty","","Returns an empty set of flags.",77],[11,"all","","Returns the set containing all flags.",77],[11,"bits","","Returns the raw value of the flags currently stored.",77],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",77],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",77],[11,"is_empty","","Returns `true` if no flags are currently stored.",77],[11,"is_all","","Returns `true` if all flags are currently set.",77],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",77],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",77],[11,"insert","","Inserts the specified flags in-place.",77],[11,"remove","","Removes the specified flags in-place.",77],[11,"toggle","","Toggles the specified flags in-place.",77],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",77],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",77],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",77],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",77],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",77],[11,"hash","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"clone","","",70],[11,"hash","","",78],[11,"eq","","",78],[11,"ne","","",78],[11,"clone","","",78],[11,"shape_text","","",69],[11,"get_table_for_tag","","",69],[11,"glyph_index","","",69],[11,"glyph_h_kerning","","",69],[11,"glyph_h_advance","","",69],[11,"new","","",71],[11,"create_textrun","","",71],[11,"new","","",72],[0,"font_context","gfx",""],[3,"FontContext","gfx::font_context","The FontContext represents the per-thread/task state necessary for\nworking with fonts. It is the public API used by the layout and\npaint code. It talks directly to the font cache task where\nrequired."],[11,"new","","",79],[11,"get_layout_font_group_for_style","","Create a group of fonts for use in layout calculations. May return\na cached font if this font instance has already been used by\nthis context.",79],[11,"get_paint_font_from_template","","Create a paint font for use with azure. May return a cached\nreference if already used by this font context.",79],[11,"font_cache_task","","Returns a reference to the font cache task.",79],[0,"font_cache_task","gfx",""],[3,"FontCacheTask","gfx::font_cache_task","The public interface to the font cache task, used exclusively by\nthe per-thread/task FontContext structures."],[4,"Command","","Commands that the FontContext sends to the font cache task."],[13,"GetFontTemplate","","",80],[13,"GetLastResortFontTemplate","","",80],[13,"AddWebFont","","",80],[13,"Exit","","",80],[4,"Reply","","Reply messages sent from the font cache task to the FontContext caller."],[13,"GetFontTemplateReply","","",81],[11,"clone","","",82],[11,"new","","",82],[11,"get_font_template","","",82],[11,"get_last_resort_font_template","","",82],[11,"add_web_font","","",82],[11,"exit","","",82],[0,"font_template","gfx",""],[3,"FontTemplateDescriptor","gfx::font_template","Describes how to select a font from a given family.\nThis is very basic at the moment and needs to be\nexpanded or refactored when we support more of the\nfont styling parameters."],[12,"weight","","",83],[12,"stretch","","",83],[12,"italic","","",83],[3,"FontTemplate","","This describes all the information needed to create\nfont instance handles. It contains a unique\nFontTemplateData structure that is platform specific."],[11,"clone","","",83],[11,"new","","",83],[11,"eq","","",83],[11,"new","","",84],[11,"identifier","","",84],[11,"get_if_matches","","Get the data for creating a font if it matches a given descriptor.",84],[11,"get","","Get the data for creating a font.",84],[11,"get_data","","Get the font template data. If any strong references still\nexist, it will return a clone, otherwise it will load the\nfont data and store a weak reference to it internally.",84],[0,"platform","gfx",""],[0,"freetype","gfx::platform",""],[0,"font","gfx::platform::freetype",""],[3,"FontTable","gfx::platform::freetype::font",""],[3,"FontHandle","",""],[12,"font_data","","",85],[12,"face","","",85],[12,"handle","","",85],[11,"with_buffer","","",86],[11,"drop","","",85],[11,"new_from_template","","",85],[11,"get_template","","",85],[11,"family_name","","",85],[11,"face_name","","",85],[11,"is_italic","","",85],[11,"boldness","","",85],[11,"stretchiness","","",85],[11,"glyph_index","","",85],[11,"glyph_h_kerning","","",85],[11,"glyph_h_advance","","",85],[11,"get_metrics","","",85],[11,"get_table_for_tag","","",85],[0,"font_context","gfx::platform::freetype",""],[3,"FreeTypeLibraryHandle","gfx::platform::freetype::font_context",""],[12,"ctx","","",87],[3,"FontContextHandle","",""],[12,"ctx","","",88],[11,"clone","","",87],[11,"clone","","",88],[11,"drop","","",87],[11,"new","","",88],[0,"font_list","gfx::platform::freetype",""],[5,"get_available_families","gfx::platform::freetype::font_list",""],[5,"get_variations_for_family","",""],[5,"get_system_default_family","",""],[5,"get_last_resort_font_families","",""],[0,"font_template","gfx::platform::freetype",""],[3,"FontTemplateData","gfx::platform::freetype::font_template","Platform specific font representation for Linux.\nThe identifier is an absolute path, and the bytes\nfield is the loaded data that can be passed to\nfreetype and azure directly."],[12,"bytes","","",89],[12,"identifier","","",89],[11,"new","","",89],[0,"text","gfx",""],[0,"glyph","gfx::text",""],[3,"GlyphData","gfx::text::glyph",""],[3,"GlyphStore","","Stores the glyph data belonging to a text run."],[3,"CharIndex","","An index that refers to a character in a text run. This could point to the middle of a glyph."],[3,"GlyphIterator","","An iterator over the glyphs in a character range in a `GlyphStore`."],[4,"BreakType","",""],[13,"None","","",90],[13,"Normal","","",90],[13,"Hyphen","","",90],[4,"GlyphInfo","",""],[13,"Simple","","",91],[13,"Detail","","",91],[6,"GlyphId","","The id of a particular glyph within a font"],[11,"eq","","",90],[11,"ne","","",90],[11,"new","","Creates a new entry for one glyph.",92],[11,"id","","",91],[11,"advance","","",91],[11,"offset","","",91],[11,"clone","","",93],[11,"fmt","","",94],[11,"cmp","","",94],[11,"partial_cmp","","",94],[11,"lt","","",94],[11,"le","","",94],[11,"gt","","",94],[11,"ge","","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[11,"encode","","",94],[11,"to_usize","","",94],[6,"Index","",""],[11,"new","","",94],[11,"get","","",94],[11,"zero","","",94],[11,"one","","",94],[11,"min_value","","",94],[11,"max_value","","",94],[11,"count_ones","","",94],[11,"leading_zeros","","",94],[11,"trailing_zeros","","",94],[11,"rotate_left","","",94],[11,"rotate_right","","",94],[11,"swap_bytes","","",94],[11,"checked_add","","",94],[11,"checked_sub","","",94],[11,"checked_mul","","",94],[11,"checked_div","","",94],[6,"Output","",""],[11,"add","","",94],[6,"Output","",""],[11,"sub","","",94],[6,"Output","",""],[11,"mul","","",94],[6,"Output","",""],[11,"neg","","",94],[11,"to_i64","","",94],[11,"to_u64","","",94],[11,"from","","",94],[6,"Output","",""],[11,"div","","",94],[6,"Output","",""],[11,"rem","","",94],[6,"Output","",""],[11,"not","","",94],[6,"Output","",""],[11,"bitand","","",94],[6,"Output","",""],[11,"bitor","","",94],[6,"Output","",""],[11,"bitxor","","",94],[6,"Output","",""],[11,"shl","","",94],[6,"Output","",""],[11,"shr","","",94],[11,"wrapping_add","","",94],[11,"wrapping_sub","","",94],[11,"wrapping_mul","","",94],[11,"overflowing_add","","",94],[11,"overflowing_sub","","",94],[11,"overflowing_mul","","",94],[11,"new","","",93],[11,"char_len","","",93],[11,"is_whitespace","","",93],[11,"finalize_changes","","",93],[11,"add_glyph_for_char_index","","Adds a single glyph. If `character` is present, this represents a single character;\notherwise, this glyph represents multiple characters.",93],[11,"add_glyphs_for_char_index","","",93],[11,"add_nonglyph_for_char_index","","",93],[11,"iter_glyphs_for_char_index","","",93],[11,"iter_glyphs_for_char_range","","",93],[11,"advance_for_char_range","","",93],[11,"char_is_space","","",93],[11,"char_is_tab","","",93],[11,"char_is_newline","","",93],[11,"is_ligature_start","","",93],[11,"is_cluster_start","","",93],[11,"can_break_before","","",93],[11,"set_char_is_space","","",93],[11,"set_char_is_tab","","",93],[11,"set_char_is_newline","","",93],[11,"set_can_break_before","","",93],[11,"space_count_in_range","","",93],[11,"distribute_extra_space_in_range","","",93],[6,"Item","",""],[11,"next","","",95],[0,"shaping","gfx::text","Shaper encapsulates a specific shaper, such as Harfbuzz,\nUniscribe, Pango, or Coretext."],[0,"harfbuzz","gfx::text::shaping",""],[3,"ShapedGlyphData","gfx::text::shaping::harfbuzz",""],[3,"ShapedGlyphEntry","",""],[3,"Shaper","",""],[11,"new","","",96],[11,"len","","",96],[11,"get_entry_for_glyph","","Returns shaped glyph data for one glyph, and updates the y-position of the pen.",96],[11,"drop","","",97],[11,"new","","",97],[11,"set_options","","",97],[11,"shape_text","","Calculate the layout metrics associated with the given text when painted in a specific\nfont.",97],[8,"ShaperMethods","gfx::text::shaping",""],[10,"shape_text","","",98],[0,"text_run","gfx::text",""],[3,"TextRun","gfx::text::text_run","A single \"paragraph\" of text in one font size and style."],[12,"text","","",99],[12,"font_template","","",99],[12,"actual_pt_size","","",99],[12,"font_metrics","","",99],[12,"glyphs","","The glyph runs that make up this text run.",99],[3,"GlyphRun","","A single series of glyphs within a text run."],[12,"glyph_store","","The glyphs.",100],[12,"range","","The range of characters in the containing run.",100],[3,"NaturalWordSliceIterator","",""],[3,"TextRunSlice","","A \"slice\" of a text run is a series of contiguous glyphs that all belong to the same glyph\nstore. Line breaking strategies yield these."],[12,"glyphs","","The glyph store that the glyphs in this slice belong to.",101],[12,"offset","","The character index that this slice begins at, relative to the start of the *text run*.",101],[12,"range","","The range that these glyphs encompass, relative to the start of the *glyph store*.",101],[3,"CharacterSliceIterator","",""],[3,"LineIterator","",""],[11,"clone","","",99],[11,"clone","","",100],[11,"text_run_range","","Returns the range that these glyphs encompass, relative to the start of the *text run*.",101],[6,"Item","",""],[11,"next","","",102],[6,"Item","",""],[11,"next","","",103],[6,"Item","",""],[11,"next","","",104],[11,"new","","",99],[11,"break_and_shape","","",99],[11,"char_len","","",99],[11,"glyphs","","",99],[11,"range_is_trimmable_whitespace","","",99],[11,"ascent","","",99],[11,"descent","","",99],[11,"advance_for_range","","",99],[11,"metrics_for_range","","",99],[11,"metrics_for_slice","","",99],[11,"min_width_for_range","","",99],[11,"first_glyph_run_containing","","Returns the first glyph run containing the given character index.",99],[11,"natural_word_slices_in_range","","Returns an iterator that will iterate over all slices of glyphs that represent natural\nwords in the given range.",99],[11,"character_slices_in_range","","Returns an iterator that will iterate over all slices of glyphs that represent individual\ncharacters in the given range.",99],[11,"iter_natural_lines_for_range","","",99],[0,"util","gfx::text",""],[4,"CompressionMode","gfx::text::util",""],[13,"CompressNone","","",105],[13,"CompressWhitespace","","",105],[13,"CompressWhitespaceNewline","","",105],[13,"DiscardNewline","","",105],[5,"transform_text","",""],[5,"float_to_fixed","",""],[5,"fixed_to_float","",""],[5,"fixed_to_rounded_int","",""],[11,"eq","","",105],[11,"ne","","",105]],"paths":[[3,"PaintContext"],[3,"Point2D"],[3,"Rect"],[6,"AzIntSize"],[3,"Size2D"],[3,"ColorPattern"],[4,"JoinStyle"],[4,"CapStyle"],[3,"StrokeOptions"],[3,"DrawOptions"],[4,"SurfaceFormat"],[4,"Filter"],[3,"DrawSurfaceOptions"],[4,"BackendType"],[3,"DrawTarget"],[4,"DrawTargetBacking"],[3,"SourceSurface"],[3,"GradientStops"],[3,"GradientStop"],[4,"ExtendMode"],[3,"DataSourceSurface"],[3,"Path"],[3,"PathBuilder"],[3,"LinearGradientPattern"],[3,"RadialGradientPattern"],[4,"Pattern"],[3,"FilterNode"],[3,"ColorMatrixInput"],[3,"CompositeInput"],[3,"FloodFilterInput"],[3,"GaussianBlurInput"],[3,"LinearTransferInput"],[3,"TableTransferInput"],[4,"ColorMatrixAttribute"],[4,"FloodAttribute"],[4,"GaussianBlurAttribute"],[4,"LinearTransferAttribute"],[4,"TableTransferAttribute"],[4,"FilterType"],[3,"Matrix5x4"],[3,"ScaledFont"],[3,"struct__AzColor"],[3,"struct__AzMatrix5x4"],[3,"DisplayList"],[3,"StackingContext"],[3,"BaseDisplayItem"],[3,"ClippingRegion"],[3,"ComplexClippingRegion"],[3,"DisplayItemMetadata"],[3,"SolidColorDisplayItem"],[3,"TextDisplayItem"],[3,"ImageDisplayItem"],[3,"GradientDisplayItem"],[3,"BorderDisplayItem"],[3,"BorderRadii"],[3,"LineDisplayItem"],[3,"BoxShadowDisplayItem"],[4,"DisplayItem"],[4,"TextOrientation"],[4,"BoxShadowClipMode"],[4,"DisplayItemIterator"],[3,"DisplayListOptimizer"],[3,"OpaqueNode"],[3,"PaintLayer"],[3,"PaintRequest"],[4,"Msg"],[3,"PaintChan"],[3,"PaintTask"],[3,"FontMetrics"],[3,"Font"],[3,"ShapingOptions"],[3,"FontGroup"],[3,"RunMetrics"],[8,"FontHandleMethods"],[8,"FontTableTagConversions"],[8,"FontTableMethods"],[6,"FontTableTag"],[3,"ShapingFlags"],[3,"ShapeCacheEntry"],[3,"FontContext"],[4,"Command"],[4,"Reply"],[3,"FontCacheTask"],[3,"FontTemplateDescriptor"],[3,"FontTemplate"],[3,"FontHandle"],[3,"FontTable"],[3,"FreeTypeLibraryHandle"],[3,"FontContextHandle"],[3,"FontTemplateData"],[4,"BreakType"],[4,"GlyphInfo"],[3,"GlyphData"],[3,"GlyphStore"],[3,"CharIndex"],[3,"GlyphIterator"],[3,"ShapedGlyphData"],[3,"Shaper"],[8,"ShaperMethods"],[3,"TextRun"],[3,"GlyphRun"],[3,"TextRunSlice"],[3,"NaturalWordSliceIterator"],[3,"CharacterSliceIterator"],[3,"LineIterator"],[4,"CompressionMode"]]};
searchIndex['devtools'] = {"items":[[0,"","devtools","An actor-based remote devtools server implementation. Only tested with\nnightly Firefox versions at time of writing. Largely based on\nreverse-engineering of Firefox chrome devtool logs and reading of\n[code](http://mxr.mozilla.org/mozilla-central/source/toolkit/devtools/server/)."],[5,"start_server","","Spin up a devtools server that listens for connections on the specified port."],[11,"write_json_packet","std::net::tcp","",0],[11,"read_json_packet","","",0]],"paths":[[3,"TcpStream"]]};
searchIndex['script_traits'] = {"items":[[0,"","script_traits",""],[3,"UntrustedNodeAddress","","The address of a node. Layout sends these back. They must be validated via\n`from_untrusted_node_address` before they can be used, because we do not trust layout."],[3,"NewLayoutInfo","",""],[12,"containing_pipeline_id","","",0],[12,"new_pipeline_id","","",0],[12,"subpage_id","","",0],[12,"layout_chan","","",0],[12,"load_data","","",0],[3,"OpaqueScriptLayoutChannel","","An opaque wrapper around script<->layout channels to avoid leaking message types into\ncrates that don't need to know about them."],[3,"ScriptControlChan","","Encapsulates external communication with the script task."],[4,"ConstellationControlMsg","","Messages sent from the constellation to the script task"],[13,"AttachLayout","","Gives a channel and ID to a layout task, as well as the ID of that layout's parent",1],[13,"Resize","","Window resized.  Sends a DOM event eventually, but first we combine events.",1],[13,"ResizeInactive","","Notifies script that window has been resized but to not take immediate action.",1],[13,"ExitPipeline","","Notifies the script that a pipeline should be closed.",1],[13,"SendEvent","","Sends a DOM event.",1],[13,"ReflowComplete","","Notifies script that reflow is finished.",1],[13,"Viewport","","Notifies script of the viewport.",1],[13,"GetTitle","","Requests that the script task immediately send the constellation the title of a pipeline.",1],[13,"Freeze","","Notifies script task to suspend all its timers",1],[13,"Thaw","","Notifies script task to resume all its timers",1],[13,"Navigate","","Notifies script task that a url should be loaded in this iframe.",1],[13,"MozBrowserEventMsg","","Requests the script task forward a mozbrowser event to an iframe it owns",1],[13,"UpdateSubpageId","","Updates the current subpage id of a given iframe",1],[4,"CompositorEvent","","Events from the compositor that the script task needs to know about"],[13,"ResizeEvent","","",2],[13,"ReflowEvent","","",2],[13,"ClickEvent","","",2],[13,"MouseDownEvent","","",2],[13,"MouseUpEvent","","",2],[13,"MouseMoveEvent","","",2],[13,"KeyEvent","","",2],[8,"ScriptTaskFactory","",""],[10,"create","","",3],[10,"create_layout_channel","","",3],[10,"clone_layout_channel","","",3],[11,"clone","","",4],[11,"clone","","",5]],"paths":[[3,"NewLayoutInfo"],[4,"ConstellationControlMsg"],[4,"CompositorEvent"],[8,"ScriptTaskFactory"],[3,"UntrustedNodeAddress"],[3,"ScriptControlChan"]]};
searchIndex['devtools_traits'] = {"items":[[0,"","devtools_traits","This module contains shared types and messages for use by devtools/script.\nThe traits are here instead of in script so that the devtools crate can be\nmodified independently of the rest of Servo."],[3,"DevtoolsPageInfo","",""],[12,"title","","",0],[12,"url","","",0],[3,"AttrInfo","",""],[12,"namespace","","",1],[12,"name","","",1],[12,"value","","",1],[3,"NodeInfo","",""],[12,"uniqueId","","",2],[12,"baseURI","","",2],[12,"parent","","",2],[12,"nodeType","","",2],[12,"namespaceURI","","",2],[12,"nodeName","","",2],[12,"numChildren","","",2],[12,"name","","",2],[12,"publicId","","",2],[12,"systemId","","",2],[12,"attrs","","",2],[12,"isDocumentElement","","",2],[12,"shortValue","","",2],[12,"incompleteValue","","",2],[3,"Modification","",""],[12,"attributeName","","",3],[12,"newValue","","",3],[4,"DevtoolsControlMsg","","Messages to the instruct the devtools server to update its known actors/state\naccording to changes in the browser."],[13,"AddClient","","",4],[13,"NewGlobal","","",4],[13,"SendConsoleMessage","","",4],[13,"ServerExitMsg","","",4],[4,"EvaluateJSReply","","Serialized JS return values\nTODO: generalize this beyond the EvaluateJS message?"],[13,"VoidValue","","",5],[13,"NullValue","","",5],[13,"BooleanValue","","",5],[13,"NumberValue","","",5],[13,"StringValue","","",5],[13,"ActorValue","","",5],[4,"DevtoolScriptControlMsg","","Messages to process in a particular script task, as instructed by a devtools client."],[13,"EvaluateJS","","",6],[13,"GetRootNode","","",6],[13,"GetDocumentElement","","",6],[13,"GetChildren","","",6],[13,"GetLayout","","",6],[13,"ModifyAttribute","","",6],[13,"WantsLiveNotifications","","",6],[4,"ScriptDevtoolControlMsg","","Messages to instruct devtools server to update its state relating to a particular\ntab."],[13,"ReportConsoleMsg","","Report a new JS error message",7],[4,"ConsoleMessage","",""],[13,"LogMessage","","",8],[6,"DevtoolsControlChan","",""],[6,"DevtoolsControlPort","",""],[11,"encode","","",3],[11,"decode","","",3],[11,"clone","","",8]],"paths":[[3,"DevtoolsPageInfo"],[3,"AttrInfo"],[3,"NodeInfo"],[3,"Modification"],[4,"DevtoolsControlMsg"],[4,"EvaluateJSReply"],[4,"DevtoolScriptControlMsg"],[4,"ScriptDevtoolControlMsg"],[4,"ConsoleMessage"]]};
searchIndex['msg'] = {"items":[[0,"","msg",""],[0,"compositor_msg","",""],[3,"Epoch","msg::compositor_msg","A newtype struct for denoting the age of messages; prevents race conditions."],[3,"LayerId","",""],[3,"LayerMetadata","","All layer-specific information that the painting task sends to the compositor other than the\nbuffer contents of the layer itself."],[12,"id","","An opaque ID. This is usually the address of the flow and index of the box within it.",0],[12,"position","","The position and size of the layer in pixels.",0],[12,"background_color","","The background color of the layer.",0],[12,"scroll_policy","","The scrolling policy of this layer.",0],[4,"PaintState","","The status of the painter."],[13,"Idle","","",1],[13,"Painting","","",1],[4,"ReadyState","",""],[13,"Blank","","Informs the compositor that nothing has been done yet. Used for setting status",2],[13,"Loading","","Informs the compositor that a page is loading. Used for setting status",2],[13,"PerformingLayout","","Informs the compositor that a page is performing layout. Used for setting status",2],[13,"FinishedLoading","","Informs the compositor that a page is finished loading. Used for setting status",2],[4,"ScrollPolicy","","The scrolling policy of a layer."],[13,"Scrollable","","These layers scroll when the parent receives a scrolling message.",3],[13,"FixedPosition","","These layers do not scroll when the parent receives a scrolling message.",3],[8,"PaintListener","","The interface used by the painter to acquire draw targets for each paint frame and\nsubmit them to be drawn to the display."],[10,"get_graphics_metadata","","",4],[10,"initialize_layers_for_pipeline","","Informs the compositor of the layers for the given pipeline. The compositor responds by\ncreating and/or destroying paint layers as necessary.",4],[10,"assign_painted_buffers","","Sends new buffers for the given layers to the compositor.",4],[10,"paint_msg_discarded","","",4],[10,"set_paint_state","","",4],[8,"ScriptListener","","The interface used by the script task to tell the compositor to update its ready state,\nwhich is used in displaying the appropriate message in the window's title."],[10,"set_ready_state","","",5],[10,"scroll_fragment_point","","",5],[10,"set_title","","Informs the compositor that the title of the page with the given pipeline ID has changed.",5],[10,"close","","",5],[10,"dup","","",5],[10,"send_key_event","","",5],[11,"clone","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"fmt","","",2],[11,"clone","","",2],[11,"partial_cmp","","",2],[11,"lt","","",2],[11,"le","","",2],[11,"gt","","",2],[11,"ge","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"cmp","","",2],[11,"fmt","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"next","","",6],[11,"eq","","",7],[11,"ne","","",7],[11,"clone","","",7],[11,"fmt","","",7],[11,"null","","FIXME(#2011, pcwalton): This is unfortunate. Maybe remove this in the future.",7],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",3],[0,"constellation_msg","msg","The high-level interface from script to constellation. Using this abstract interface helps\nreduce coupling between these two components."],[3,"ConstellationChan","msg::constellation_msg",""],[3,"Failure","",""],[12,"pipeline_id","","",8],[12,"parent_info","","",8],[3,"WindowSizeData","",""],[12,"initial_viewport","","The size of the initial layout viewport, before parsing an\nhttp://www.w3.org/TR/css-device-adapt/#initial-viewport",9],[12,"visible_viewport","","The \"viewing area\" in page px. See `PagePx` documentation for details.",9],[12,"device_pixel_ratio","","The resolution of the window in dppx, not including any \"pinch zoom\" factor.",9],[3,"KeyModifiers","",""],[3,"LoadData","","Similar to net::resource_task::LoadData\ncan be passed to LoadUrl to load a page with GET/POST\nparameters or headers"],[12,"url","","",10],[12,"method","","",10],[12,"headers","","",10],[12,"data","","",10],[3,"FrameId","",""],[3,"WorkerId","",""],[3,"PipelineId","",""],[3,"SubpageId","",""],[4,"IFrameSandboxState","",""],[13,"IFrameSandboxed","","",11],[13,"IFrameUnsandboxed","","",11],[4,"KeyState","",""],[13,"Pressed","","",12],[13,"Released","","",12],[13,"Repeated","","",12],[4,"Key","",""],[13,"Space","","",13],[13,"Apostrophe","","",13],[13,"Comma","","",13],[13,"Minus","","",13],[13,"Period","","",13],[13,"Slash","","",13],[13,"Num0","","",13],[13,"Num1","","",13],[13,"Num2","","",13],[13,"Num3","","",13],[13,"Num4","","",13],[13,"Num5","","",13],[13,"Num6","","",13],[13,"Num7","","",13],[13,"Num8","","",13],[13,"Num9","","",13],[13,"Semicolon","","",13],[13,"Equal","","",13],[13,"A","","",13],[13,"B","","",13],[13,"C","","",13],[13,"D","","",13],[13,"E","","",13],[13,"F","","",13],[13,"G","","",13],[13,"H","","",13],[13,"I","","",13],[13,"J","","",13],[13,"K","","",13],[13,"L","","",13],[13,"M","","",13],[13,"N","","",13],[13,"O","","",13],[13,"P","","",13],[13,"Q","","",13],[13,"R","","",13],[13,"S","","",13],[13,"T","","",13],[13,"U","","",13],[13,"V","","",13],[13,"W","","",13],[13,"X","","",13],[13,"Y","","",13],[13,"Z","","",13],[13,"LeftBracket","","",13],[13,"Backslash","","",13],[13,"RightBracket","","",13],[13,"GraveAccent","","",13],[13,"World1","","",13],[13,"World2","","",13],[13,"Escape","","",13],[13,"Enter","","",13],[13,"Tab","","",13],[13,"Backspace","","",13],[13,"Insert","","",13],[13,"Delete","","",13],[13,"Right","","",13],[13,"Left","","",13],[13,"Down","","",13],[13,"Up","","",13],[13,"PageUp","","",13],[13,"PageDown","","",13],[13,"Home","","",13],[13,"End","","",13],[13,"CapsLock","","",13],[13,"ScrollLock","","",13],[13,"NumLock","","",13],[13,"PrintScreen","","",13],[13,"Pause","","",13],[13,"F1","","",13],[13,"F2","","",13],[13,"F3","","",13],[13,"F4","","",13],[13,"F5","","",13],[13,"F6","","",13],[13,"F7","","",13],[13,"F8","","",13],[13,"F9","","",13],[13,"F10","","",13],[13,"F11","","",13],[13,"F12","","",13],[13,"F13","","",13],[13,"F14","","",13],[13,"F15","","",13],[13,"F16","","",13],[13,"F17","","",13],[13,"F18","","",13],[13,"F19","","",13],[13,"F20","","",13],[13,"F21","","",13],[13,"F22","","",13],[13,"F23","","",13],[13,"F24","","",13],[13,"F25","","",13],[13,"Kp0","","",13],[13,"Kp1","","",13],[13,"Kp2","","",13],[13,"Kp3","","",13],[13,"Kp4","","",13],[13,"Kp5","","",13],[13,"Kp6","","",13],[13,"Kp7","","",13],[13,"Kp8","","",13],[13,"Kp9","","",13],[13,"KpDecimal","","",13],[13,"KpDivide","","",13],[13,"KpMultiply","","",13],[13,"KpSubtract","","",13],[13,"KpAdd","","",13],[13,"KpEnter","","",13],[13,"KpEqual","","",13],[13,"LeftShift","","",13],[13,"LeftControl","","",13],[13,"LeftAlt","","",13],[13,"LeftSuper","","",13],[13,"RightShift","","",13],[13,"RightControl","","",13],[13,"RightAlt","","",13],[13,"RightSuper","","",13],[13,"Menu","","",13],[4,"Msg","","Messages from the compositor and script to the constellation."],[13,"Exit","","",14],[13,"Failure","","",14],[13,"InitLoadUrl","","",14],[13,"LoadComplete","","",14],[13,"FrameRect","","",14],[13,"LoadUrl","","",14],[13,"ScriptLoadedURLInIFrame","","",14],[13,"Navigate","","",14],[13,"PainterReady","","",14],[13,"ResizedWindow","","",14],[13,"KeyEvent","","",14],[13,"GetPipelineTitle","","Requests that the constellation inform the compositor of the title of the pipeline\nimmediately.",14],[13,"SetCursor","","Requests that the constellation inform the compositor of the a cursor change.",14],[13,"MozBrowserEventMsg","","Dispatch a mozbrowser event to a given iframe. Only available in experimental mode.",14],[13,"ChangeRunningAnimationsState","","Indicates whether this pipeline is currently running animations.",14],[13,"TickAnimation","","Requests that the constellation instruct layout to begin a new tick of the animation.",14],[4,"MozBrowserEvent","",""],[13,"AsyncScroll","","Sent when the scroll position within a browser <iframe> changes.",15],[13,"Close","","Sent when window.close() is called within a browser <iframe>.",15],[13,"ContextMenu","","Sent when a browser <iframe> tries to open a context menu. This allows  handling <menuitem> element available within the browser <iframe>'s content.",15],[13,"Error","","Sent when an error occurred while trying to load content within a browser <iframe>.",15],[13,"IconChange","","Sent when the favicon of a browser <iframe> changes.",15],[13,"LoadEnd","","Sent when the browser <iframe> has finished loading all its assets.",15],[13,"LoadStart","","Sent when the browser <iframe> starts to load a new page.",15],[13,"LocationChange","","Sent when a browser <iframe>'s location changes.",15],[13,"OpenWindow","","Sent when window.open() is called within a browser <iframe>.",15],[13,"SecurityChange","","Sent when the SSL state changes within a browser <iframe>.",15],[13,"ShowModalPrompt","","Sent when alert(), confirm(), or prompt() is called within a browser <iframe>.",15],[13,"TitleChange","","Sent when the document.title changes within a browser <iframe>.",15],[13,"UsernameAndPasswordRequired","","Sent when an HTTP authentification is requested.",15],[13,"OpenSearch","","Sent when a link to a search engine is found.",15],[4,"NavigationDirection","",""],[13,"Forward","","",16],[13,"Back","","",16],[4,"PipelineExitType","",""],[13,"PipelineOnly","","",17],[13,"Complete","","",17],[17,"SHIFT","",""],[17,"CONTROL","",""],[17,"ALT","",""],[17,"SUPER","",""],[11,"clone","","",18],[11,"new","","",18],[11,"fmt","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"clone","","",8],[11,"clone","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"clone","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"fmt","","",13],[11,"hash","","",19],[11,"cmp","","",19],[11,"partial_cmp","","",19],[11,"lt","","",19],[11,"le","","",19],[11,"gt","","",19],[11,"ge","","",19],[11,"clone","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"empty","","Returns an empty set of flags.",19],[11,"all","","Returns the set containing all flags.",19],[11,"bits","","Returns the raw value of the flags currently stored.",19],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",19],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",19],[11,"is_empty","","Returns `true` if no flags are currently stored.",19],[11,"is_all","","Returns `true` if all flags are currently set.",19],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",19],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",19],[11,"insert","","Inserts the specified flags in-place.",19],[11,"remove","","Removes the specified flags in-place.",19],[11,"toggle","","Toggles the specified flags in-place.",19],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",19],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",19],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",19],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",19],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",19],[11,"name","","",15],[11,"detail","","",15],[11,"clone","","",10],[11,"new","","",10],[11,"fmt","","",16],[11,"hash","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",20],[11,"hash","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"fmt","","",21],[11,"hash","","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"clone","","",21],[11,"fmt","","",22],[11,"hash","","",22],[11,"eq","","",22],[11,"ne","","",22],[11,"clone","","",22],[11,"fmt","","",23],[11,"hash","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"clone","","",23]],"paths":[[3,"LayerMetadata"],[4,"PaintState"],[4,"ReadyState"],[4,"ScrollPolicy"],[8,"PaintListener"],[8,"ScriptListener"],[3,"Epoch"],[3,"LayerId"],[3,"Failure"],[3,"WindowSizeData"],[3,"LoadData"],[4,"IFrameSandboxState"],[4,"KeyState"],[4,"Key"],[4,"Msg"],[4,"MozBrowserEvent"],[4,"NavigationDirection"],[4,"PipelineExitType"],[3,"ConstellationChan"],[3,"KeyModifiers"],[3,"FrameId"],[3,"WorkerId"],[3,"PipelineId"],[3,"SubpageId"]]};
searchIndex['style'] = {"items":[[0,"","style",""],[0,"stylesheets","",""],[3,"Stylesheet","style::stylesheets",""],[12,"origin","","",0],[3,"MediaRule","",""],[12,"media_queries","","",1],[12,"rules","","",1],[3,"StyleRule","",""],[12,"selectors","","",2],[12,"declarations","","",2],[4,"Origin","",""],[13,"UserAgent","","",3],[13,"Author","","",3],[13,"User","","",3],[4,"CSSRule","",""],[13,"Charset","","",4],[13,"Namespace","","",4],[13,"Style","","",4],[13,"Media","","",4],[13,"FontFace","","",4],[5,"iter_style_rules","",""],[5,"iter_stylesheet_media_rules","",""],[5,"iter_stylesheet_style_rules","",""],[5,"iter_font_face_rules","",""],[11,"fmt","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"eq","","",0],[11,"ne","","",0],[11,"fmt","","",0],[11,"eq","","",4],[11,"ne","","",4],[11,"fmt","","",4],[11,"eq","","",1],[11,"ne","","",1],[11,"fmt","","",1],[11,"eq","","",2],[11,"ne","","",2],[11,"fmt","","",2],[11,"from_bytes_iter","","",0],[11,"from_bytes","","",0],[11,"from_str","","",0],[0,"parser","style",""],[3,"ParserContext","style::parser",""],[12,"base_url","","",5],[12,"selector_context","","",5],[5,"log_css_error","","Defaults to a no-op.\nSet a `RUST_LOG=style::errors` environment variable\nto log CSS parse errors to stderr."],[11,"new","","",5],[11,"parse_url","","",5],[0,"selector_matching","style",""],[3,"Stylist","style::selector_matching",""],[12,"device","","",6],[6,"DeclarationBlock","",""],[11,"new","","",6],[11,"update","","",6],[11,"set_device","","",6],[11,"add_quirks_mode_stylesheet","","",6],[11,"add_stylesheet","","",6],[11,"push_applicable_declarations","","Returns the applicable CSS declarations for the given element. This corresponds to\n`ElementRuleCollector` in WebKit.",6],[0,"values","style",""],[11,"new","cssparser::rules_and_declarations","Create a new `DeclarationListParser` for the given `input` and `parser`.",7],[6,"Item","style::values",""],[11,"next","cssparser::rules_and_declarations","",7],[11,"new_for_stylesheet","","Create a new `RuleListParser` for the given `input` at the top-level of a stylesheet\nand the given `parser`.",8],[11,"new_for_nested_rule","","Same is `new_for_stylesheet`, but should be used for rule lists inside a block\nsuch as the body of an `@media` rule.",8],[6,"Item","style::values",""],[11,"next","cssparser::rules_and_declarations","",8],[11,"clone","cssparser::tokenizer","",9],[11,"fmt","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"clone","","",10],[11,"fmt","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"clone","","",11],[11,"fmt","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"clone","","",12],[11,"new","","",12],[11,"next","","",12],[11,"position","","",12],[11,"reset","","",12],[11,"slice_from","","",12],[11,"slice","","",12],[11,"current_source_location","","",12],[11,"source_location","","",12],[11,"next_byte","","",12],[11,"advance","","",12],[11,"clone","","",13],[11,"fmt","","",13],[11,"cmp","","",13],[11,"partial_cmp","","",13],[11,"lt","","",13],[11,"le","","",13],[11,"gt","","",13],[11,"ge","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"clone","","",14],[11,"fmt","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"clone","cssparser::parser","",15],[11,"fmt","","",15],[11,"eq","","",15],[11,"ne","","",15],[6,"Target","style::values",""],[11,"deref","cssparser::parser","",16],[11,"deref_mut","","",16],[11,"clone","","",16],[11,"clone","","",17],[11,"fmt","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"fmt","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[6,"Output","style::values",""],[11,"bitor","cssparser::parser","",19],[11,"new","","Create a new parser",17],[11,"is_exhausted","","Check whether the input is exhausted. That is, if `.next()` would return a token.",17],[11,"expect_exhausted","","Check whether the input is exhausted. That is, if `.next()` would return a token.\nReturn a `Result` so that the `try!` macro can be used: `try!(input.expect_exhausted())`",17],[11,"position","","Return the current internal state of the parser (including position within the input).",17],[11,"reset","","Restore the internal state of the parser (including position within the input)\nto what was previously saved by the `Parser::position` method.",17],[11,"try","","Execute the given closure, passing it the parser.\nIf the result (returned unchanged) is `Err`,\nthe internal state of the parser  (including position within the input)\nis restored to what it was before the call.",17],[11,"slice","","Return a slice of the CSS input",17],[11,"slice_from","","Return a slice of the CSS input, from the given position to the current one.",17],[11,"current_source_location","","Return the line and column number within the input for the current position.",17],[11,"source_location","","Return the line and column number within the input for the given position.",17],[11,"next","","Return the next token in the input that is neither whitespace or a comment,\nand advance the position accordingly.",17],[11,"next_including_whitespace","","Same as `Parser::next`, but does not skip whitespace tokens.",17],[11,"next_including_whitespace_and_comments","","Same as `Parser::next`, but does not skip whitespace or comment tokens.",17],[11,"parse_entirely","","Have the given closure parse something, then check the the input is exhausted.\nThe result is overridden to `Err(())` if some input remains.",17],[11,"parse_comma_separated","","Parse a list of comma-separated values, all with the same syntax.",17],[11,"parse_nested_block","","Parse the content of a block or function.",17],[11,"parse_until_before","","Limit parsing to until a given delimiter. (E.g. a semicolon for a property value.)",17],[11,"parse_until_after","","Like `parse_until_before`, but also consume the delimiter token.",17],[11,"expect_ident","","Parse a <ident-token> and return the unescaped value.",17],[11,"expect_ident_matching","","Parse a <ident-token> whose unescaped value is an ASCII-insensitive match for the given value.",17],[11,"expect_string","","Parse a <string-token> and return the unescaped value.",17],[11,"expect_ident_or_string","","Parse either a <ident-token> or a <string-token>, and return the unescaped value.",17],[11,"expect_url","","Parse a <url-token> and return the unescaped value.",17],[11,"expect_url_or_string","","Parse either a <url-token> or a <string-token>, and return the unescaped value.",17],[11,"expect_number","","Parse a <number-token> and return the integer value.",17],[11,"expect_integer","","Parse a <number-token> that does not have a fractional part, and return the integer value.",17],[11,"expect_percentage","","Parse a <percentage-token> and return the value.\n`0%` and `100%` map to `0.0` and `1.0` (not `100.0`), respectively.",17],[11,"expect_colon","","Parse a `:` <colon-token>.",17],[11,"expect_semicolon","","Parse a `;` <semicolon-token>.",17],[11,"expect_comma","","Parse a `,` <comma-token>.",17],[11,"expect_delim","","Parse a <delim-token> with the given value.",17],[11,"expect_curly_bracket_block","","Parse a `{ /* ... */ }` curly brackets block.",17],[11,"expect_square_bracket_block","","Parse a `[ /* ... */ ]` square brackets block.",17],[11,"expect_parenthesis_block","","Parse a `( /* ... */ )` parenthesis block.",17],[11,"expect_function","","Parse a <function> token and return its name.",17],[11,"expect_function_matching","","Parse a <function> token whose name is an ASCII-insensitive match for the given value.",17],[11,"eq","cssparser::color","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"to_css","","",20],[11,"eq","","",21],[11,"ne","","",21],[11,"clone","","",21],[11,"to_css","","",21],[11,"fmt","","",20],[11,"fmt","","",21],[11,"parse","","Parse a <color> value, per CSS Color Module Level 3.",21],[11,"to_css","cssparser::tokenizer","",9],[11,"new","cssparser::serializer","Wrap a text writer to create a `CssStringWriter`.",22],[11,"write_str","","",22],[11,"write_char","","",22],[3,"RGBA","style::values","A color with red, green, blue, and alpha components."],[12,"red","","The red channel. Nominally in 0.0 ... 1.0.",20],[12,"green","","The green channel. Nominally in 0.0 ... 1.0.",20],[12,"blue","","The blue channel. Nominally in 0.0 ... 1.0.",20],[12,"alpha","","The alpha (opacity) channel. Clamped to 0.0 ... 1.0.",20],[0,"specified","",""],[3,"CSSColor","style::values::specified",""],[12,"parsed","","",23],[12,"authored","","",23],[3,"CSSRGBA","",""],[12,"parsed","","",24],[12,"authored","","",24],[3,"CharacterWidth","",""],[3,"LengthAndPercentage","","The sum of a series of lengths and a percentage. This is used in `calc()` and other things\nthat effectively work like it (e.g. transforms)."],[12,"lengths","","The length components.",25],[12,"percentage","","The percentage component.",25],[3,"Angle","",""],[3,"LinearGradient","","Specified values for a CSS linear gradient."],[12,"angle_or_corner","","The angle or corner of the gradient.",26],[12,"stops","","The color stops.",26],[3,"ColorStop","","Specified values for one color stop in a linear gradient."],[12,"color","","The color of this stop.",27],[12,"position","","The position of this stop. If not specified, this stop is placed halfway between the\npoint that precedes it and the point that follows it.",27],[3,"Time","","A time in seconds according to CSS-VALUES § 6.2."],[4,"FontRelativeLength","",""],[13,"Em","","",28],[13,"Ex","","",28],[13,"Rem","","",28],[4,"ViewportPercentageLength","",""],[13,"Vw","","",29],[13,"Vh","","",29],[13,"Vmin","","",29],[13,"Vmax","","",29],[4,"Length","",""],[13,"Absolute","","",30],[13,"FontRelative","","",30],[13,"ViewportPercentage","","",30],[13,"ServoCharacterWidth","","HTML5 \"character width\", as defined in HTML5 § 14.5.4.",30],[4,"LengthOrPercentage","",""],[13,"Length","","",31],[13,"Percentage","","",31],[4,"LengthOrPercentageOrAuto","",""],[13,"Length","","",32],[13,"Percentage","","",32],[13,"Auto","","",32],[4,"LengthOrPercentageOrNone","",""],[13,"Length","","",33],[13,"Percentage","","",33],[13,"None","","",33],[4,"PositionComponent","",""],[13,"Length","","",34],[13,"Percentage","","",34],[13,"Center","","",34],[13,"Left","","",34],[13,"Right","","",34],[13,"Top","","",34],[13,"Bottom","","",34],[4,"Image","","Specified values for an image according to CSS-IMAGES."],[13,"Url","","",35],[13,"LinearGradient","","",35],[4,"AngleOrCorner","","Specified values for an angle or a corner in a linear gradient."],[13,"Angle","","",36],[13,"Corner","","",36],[4,"HorizontalDirection","",""],[13,"Left","","",37],[13,"Right","","",37],[4,"VerticalDirection","",""],[13,"Top","","",38],[13,"Bottom","","",38],[4,"BorderStyle","",""],[13,"none","","",39],[13,"solid","","",39],[13,"double","","",39],[13,"dotted","","",39],[13,"dashed","","",39],[13,"hidden","","",39],[13,"groove","","",39],[13,"ridge","","",39],[13,"inset","","",39],[13,"outset","","",39],[5,"parse_border_width","",""],[11,"eq","","",23],[11,"ne","","",23],[11,"clone","","",23],[11,"parse","","",23],[11,"fmt","","",23],[11,"to_css","","",23],[11,"eq","","",24],[11,"ne","","",24],[11,"clone","","",24],[11,"fmt","","",24],[11,"to_css","","",24],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"fmt","","",28],[11,"to_css","","",28],[11,"to_computed_value","","",28],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"fmt","","",29],[11,"to_css","","",29],[11,"to_computed_value","","",29],[11,"eq","","",40],[11,"ne","","",40],[11,"clone","","",40],[11,"to_computed_value","","",40],[11,"eq","","",30],[11,"ne","","",30],[11,"clone","","",30],[11,"fmt","","",30],[11,"to_css","","",30],[6,"Output","",""],[11,"mul","","",30],[6,"Output","",""],[11,"mul","","",28],[6,"Output","",""],[11,"mul","","",29],[11,"parse","","",30],[11,"parse_non_negative","","",30],[11,"parse_dimension","","",30],[11,"from_px","","",30],[11,"eq","","",31],[11,"ne","","",31],[11,"clone","","",31],[11,"fmt","","",31],[11,"to_css","","",31],[11,"parse","","",31],[11,"parse_non_negative","","",31],[11,"eq","","",32],[11,"ne","","",32],[11,"clone","","",32],[11,"fmt","","",32],[11,"to_css","","",32],[11,"parse","","",32],[11,"parse_non_negative","","",32],[11,"eq","","",33],[11,"ne","","",33],[11,"clone","","",33],[11,"fmt","","",33],[11,"to_css","","",33],[11,"parse","","",33],[11,"parse_non_negative","","",33],[11,"eq","","",25],[11,"ne","","",25],[11,"fmt","","",25],[11,"clone","","",25],[11,"zero","","",25],[11,"from_length_or_percentage","","",25],[11,"parse","","",25],[11,"from_length","","",25],[11,"from_percentage","","",25],[6,"Output","",""],[11,"add","","",25],[6,"Output","",""],[11,"mul","","",25],[11,"eq","","",34],[11,"ne","","",34],[11,"clone","","",34],[11,"parse","","",34],[11,"to_length_or_percentage","","",34],[11,"partial_cmp","","",41],[11,"lt","","",41],[11,"le","","",41],[11,"gt","","",41],[11,"ge","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"fmt","","",41],[11,"to_css","","",41],[11,"radians","","",41],[11,"parse","","Parses an angle according to CSS-VALUES § 6.1.",41],[11,"eq","","",35],[11,"ne","","",35],[11,"clone","","",35],[11,"fmt","","",35],[11,"to_css","","",35],[11,"parse","","",35],[11,"eq","","",26],[11,"ne","","",26],[11,"clone","","",26],[11,"fmt","","",26],[11,"to_css","","",26],[11,"eq","","",36],[11,"ne","","",36],[11,"clone","","",36],[11,"fmt","","",36],[11,"to_css","","",36],[11,"eq","","",27],[11,"ne","","",27],[11,"clone","","",27],[11,"fmt","","",27],[11,"to_css","","",27],[11,"from_i64","","",37],[11,"from_u64","","",37],[11,"eq","","",37],[11,"ne","","",37],[11,"clone","","",37],[11,"parse","","",37],[11,"fmt","","",37],[11,"to_css","","",37],[11,"from_i64","","",38],[11,"from_u64","","",38],[11,"eq","","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"parse","","",38],[11,"fmt","","",38],[11,"to_css","","",38],[11,"parse_function","","Parses a linear gradient from the given arguments.",26],[11,"from_i64","","",39],[11,"from_u64","","",39],[11,"eq","","",39],[11,"ne","","",39],[11,"clone","","",39],[11,"parse","","",39],[11,"fmt","","",39],[11,"to_css","","",39],[11,"partial_cmp","","",42],[11,"lt","","",42],[11,"le","","",42],[11,"gt","","",42],[11,"ge","","",42],[11,"eq","","",42],[11,"ne","","",42],[11,"fmt","","",42],[11,"clone","","",42],[11,"seconds","","Returns the time in fractional seconds.",42],[11,"parse","","",42],[6,"ComputedValue","",""],[11,"to_computed_value","","",42],[11,"to_css","","",42],[0,"computed","style::values",""],[4,"CSSColor","style::values::computed","A <color> value."],[13,"CurrentColor","","The 'currentColor' keyword",21],[13,"RGBA","","Everything else gets converted to RGBA during parsing",21],[3,"Context","",""],[12,"inherited_font_weight","","",43],[12,"inherited_font_size","","",43],[12,"inherited_text_decorations_in_effect","","",43],[12,"inherited_height","","",43],[12,"color","","",43],[12,"text_decoration","","",43],[12,"font_size","","",43],[12,"root_font_size","","",43],[12,"display","","",43],[12,"overflow_x","","",43],[12,"overflow_y","","",43],[12,"positioned","","",43],[12,"floated","","",43],[12,"border_top_present","","",43],[12,"border_right_present","","",43],[12,"border_bottom_present","","",43],[12,"border_left_present","","",43],[12,"is_root_element","","",43],[12,"viewport_size","","",43],[3,"LengthAndPercentage","","The sum of a series of lengths and a percentage. This is used in `calc()` and other things\nthat effectively work like it (e.g. transforms)."],[12,"length","","The length component.",44],[12,"percentage","","The percentage component.",44],[3,"LinearGradient","","Computed values for a CSS linear gradient."],[12,"angle_or_corner","","The angle or corner of the gradient.",45],[12,"stops","","The color stops.",45],[3,"ColorStop","","Computed values for one color stop in a linear gradient."],[12,"color","","The color of this stop.",46],[12,"position","","The position of this stop. If not specified, this stop is placed halfway between the\npoint that precedes it and the point that follows it per CSS-IMAGES § 3.4.",46],[4,"LengthOrPercentage","",""],[13,"Length","","",47],[13,"Percentage","","",47],[4,"LengthOrPercentageOrAuto","",""],[13,"Length","","",48],[13,"Percentage","","",48],[13,"Auto","","",48],[4,"LengthOrPercentageOrNone","",""],[13,"Length","","",49],[13,"Percentage","","",49],[13,"None","","",49],[4,"Image","","Computed values for an image according to CSS-IMAGES."],[13,"Url","","",50],[13,"LinearGradient","","",50],[6,"Length","",""],[8,"ToComputedValue","",""],[16,"ComputedValue","style::values::computed::ToComputedValue",""],[10,"to_computed_value","style::values::computed","",51],[8,"ComputedValueAsSpecified","",""],[6,"ComputedValue","",""],[6,"ComputedValue","",""],[11,"to_computed_value","style::values::specified","",23],[6,"ComputedValue","style::values::computed",""],[11,"to_computed_value","style::values::specified","",30],[11,"clone","style::values::computed","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"fmt","","",47],[6,"ComputedValue","",""],[11,"to_computed_value","style::values::specified","",31],[11,"clone","style::values::computed","",48],[11,"eq","","",48],[11,"ne","","",48],[11,"fmt","","",48],[6,"ComputedValue","",""],[11,"to_computed_value","style::values::specified","",32],[11,"clone","style::values::computed","",49],[11,"eq","","",49],[11,"ne","","",49],[11,"fmt","","",49],[6,"ComputedValue","",""],[11,"to_computed_value","style::values::specified","",33],[11,"eq","style::values::computed","",44],[11,"ne","","",44],[11,"fmt","","",44],[11,"clone","","",44],[11,"zero","","",44],[6,"ComputedValue","",""],[11,"to_computed_value","style::values::specified","",25],[6,"Output","style::values::computed",""],[11,"add","","",44],[6,"Output","",""],[11,"mul","","",44],[6,"ComputedValue","",""],[11,"to_computed_value","style::values::specified","",35],[11,"eq","style::values::computed","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"fmt","","",50],[11,"eq","","",45],[11,"ne","","",45],[11,"clone","","",45],[11,"fmt","","",45],[11,"eq","","",46],[11,"ne","","",46],[11,"clone","","",46],[11,"fmt","","",46],[6,"ComputedValue","",""],[11,"to_computed_value","style::values::specified","",26],[6,"CSSFloat","style::values",""],[0,"properties","style",""],[3,"PropertyDeclarationBlock","style::properties","Declarations are stored in reverse order.\nOverridden declarations are skipped."],[12,"important","","",52],[12,"normal","","",52],[3,"ComputedValues","",""],[12,"writing_mode","","",53],[12,"root_font_size","","",53],[4,"CSSWideKeyword","",""],[13,"InitialKeyword","","",54],[13,"InheritKeyword","","",54],[13,"UnsetKeyword","","",54],[4,"DeclaredValue","",""],[13,"SpecifiedValue","","",55],[13,"Initial","","",55],[13,"Inherit","","",55],[4,"PropertyDeclaration","",""],[13,"MarginTop","","",56],[13,"MarginRight","","",56],[13,"MarginBottom","","",56],[13,"MarginLeft","","",56],[13,"PaddingTop","","",56],[13,"PaddingRight","","",56],[13,"PaddingBottom","","",56],[13,"PaddingLeft","","",56],[13,"BorderTopColor","","",56],[13,"BorderRightColor","","",56],[13,"BorderBottomColor","","",56],[13,"BorderLeftColor","","",56],[13,"BorderTopStyle","","",56],[13,"BorderRightStyle","","",56],[13,"BorderBottomStyle","","",56],[13,"BorderLeftStyle","","",56],[13,"BorderTopWidth","","",56],[13,"BorderRightWidth","","",56],[13,"BorderBottomWidth","","",56],[13,"BorderLeftWidth","","",56],[13,"BorderTopLeftRadius","","",56],[13,"BorderTopRightRadius","","",56],[13,"BorderBottomRightRadius","","",56],[13,"BorderBottomLeftRadius","","",56],[13,"OutlineColor","","",56],[13,"OutlineStyle","","",56],[13,"OutlineWidth","","",56],[13,"OutlineOffset","","",56],[13,"Top","","",56],[13,"Right","","",56],[13,"Bottom","","",56],[13,"Left","","",56],[13,"Display","","",56],[13,"Position","","",56],[13,"Float","","",56],[13,"Clear","","",56],[13,"ServoDisplayForHypotheticalBox","","",56],[13,"ZIndex","","",56],[13,"Direction","","",56],[13,"Width","","",56],[13,"Height","","",56],[13,"MinWidth","","",56],[13,"MaxWidth","","",56],[13,"MinHeight","","",56],[13,"MaxHeight","","",56],[13,"LineHeight","","",56],[13,"VerticalAlign","","",56],[13,"OverflowX","","",56],[13,"OverflowY","","",56],[13,"Visibility","","",56],[13,"Content","","",56],[13,"ListStylePosition","","",56],[13,"ListStyleType","","",56],[13,"ListStyleImage","","",56],[13,"Quotes","","",56],[13,"CounterIncrement","","",56],[13,"CounterReset","","",56],[13,"BackgroundColor","","",56],[13,"BackgroundImage","","",56],[13,"BackgroundPosition","","",56],[13,"BackgroundRepeat","","",56],[13,"BackgroundAttachment","","",56],[13,"BackgroundSize","","",56],[13,"Color","","",56],[13,"FontFamily","","",56],[13,"FontStyle","","",56],[13,"FontVariant","","",56],[13,"FontWeight","","",56],[13,"FontSize","","",56],[13,"FontStretch","","",56],[13,"TextAlign","","",56],[13,"LetterSpacing","","",56],[13,"WordSpacing","","",56],[13,"TextIndent","","",56],[13,"OverflowWrap","","",56],[13,"WordBreak","","",56],[13,"TextOverflow","","",56],[13,"TextJustify","","",56],[13,"TextDecoration","","",56],[13,"ServoTextDecorationsInEffect","","",56],[13,"WhiteSpace","","",56],[13,"TextTransform","","",56],[13,"TextRendering","","",56],[13,"TableLayout","","",56],[13,"EmptyCells","","",56],[13,"CaptionSide","","",56],[13,"BorderCollapse","","",56],[13,"BorderSpacing","","",56],[13,"WritingMode","","",56],[13,"TextOrientation","","",56],[13,"BoxSizing","","",56],[13,"Cursor","","",56],[13,"PointerEvents","","",56],[13,"Opacity","","",56],[13,"BoxShadow","","",56],[13,"Clip","","",56],[13,"TextShadow","","",56],[13,"Filter","","",56],[13,"Transform","","",56],[13,"TransformOrigin","","",56],[13,"MixBlendMode","","",56],[13,"ImageRendering","","",56],[13,"TransitionDuration","","",56],[13,"TransitionTimingFunction","","",56],[13,"TransitionProperty","","",56],[13,"TransitionDelay","","",56],[4,"PropertyDeclarationParseResult","",""],[13,"UnknownProperty","","",57],[13,"ExperimentalProperty","","",57],[13,"InvalidValue","","",57],[13,"ValidOrIgnoredDeclaration","","",57],[5,"parse_style_attribute","",""],[5,"parse_property_declaration_list","",""],[5,"cascade","","Performs the CSS cascade, computing new styles for an element from its parent style and\noptionally a cached related style. The arguments are:"],[5,"cascade_anonymous","","Equivalent to `cascade()` with an empty `applicable_declarations`\nPerforms the CSS cascade for an anonymous box."],[5,"make_inline","","Sets `display` to `inline` and `position` to `static`."],[5,"make_border","","Sets `border_left_width` to the passed in values.\nIf `border_left_width` == 0 also sets `border_left_style` = none."],[5,"is_supported_property","",""],[5,"longhands_from_shorthand","",""],[0,"longhands","",""],[0,"margin_top","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::margin_top",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"margin_right","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::margin_right",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"margin_bottom","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::margin_bottom",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"margin_left","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::margin_left",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"padding_top","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::padding_top",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"padding_right","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::padding_right",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"padding_bottom","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::padding_bottom",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"padding_left","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::padding_left",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"border_top_color","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::border_top_color",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::border_top_color::computed_value","A <color> value."],[13,"CurrentColor","","The 'currentColor' keyword",21],[13,"RGBA","","Everything else gets converted to RGBA during parsing",21],[6,"SpecifiedValue","style::properties::longhands::border_top_color",""],[0,"border_right_color","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::border_right_color",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::border_right_color::computed_value","A <color> value."],[13,"CurrentColor","","The 'currentColor' keyword",21],[13,"RGBA","","Everything else gets converted to RGBA during parsing",21],[6,"SpecifiedValue","style::properties::longhands::border_right_color",""],[0,"border_bottom_color","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::border_bottom_color",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::border_bottom_color::computed_value","A <color> value."],[13,"CurrentColor","","The 'currentColor' keyword",21],[13,"RGBA","","Everything else gets converted to RGBA during parsing",21],[6,"SpecifiedValue","style::properties::longhands::border_bottom_color",""],[0,"border_left_color","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::border_left_color",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::border_left_color::computed_value","A <color> value."],[13,"CurrentColor","","The 'currentColor' keyword",21],[13,"RGBA","","Everything else gets converted to RGBA during parsing",21],[6,"SpecifiedValue","style::properties::longhands::border_left_color",""],[0,"border_top_style","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::border_top_style",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"border_right_style","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::border_right_style",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"border_bottom_style","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::border_bottom_style",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"border_left_style","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::border_left_style",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"border_top_width","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::border_top_width",""],[5,"parse","",""],[5,"get_initial_value","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::border_top_width::computed_value",""],[11,"to_css","style::properties::longhands::border_top_width","",58],[11,"eq","","",58],[11,"ne","","",58],[11,"clone","","",58],[6,"ComputedValue","",""],[11,"to_computed_value","","",58],[0,"border_right_width","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::border_right_width",""],[5,"parse","",""],[5,"get_initial_value","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::border_right_width::computed_value",""],[11,"to_css","style::properties::longhands::border_right_width","",59],[11,"eq","","",59],[11,"ne","","",59],[11,"clone","","",59],[6,"ComputedValue","",""],[11,"to_computed_value","","",59],[0,"border_bottom_width","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::border_bottom_width",""],[5,"parse","",""],[5,"get_initial_value","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::border_bottom_width::computed_value",""],[11,"to_css","style::properties::longhands::border_bottom_width","",60],[11,"eq","","",60],[11,"ne","","",60],[11,"clone","","",60],[6,"ComputedValue","",""],[11,"to_computed_value","","",60],[0,"border_left_width","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::border_left_width",""],[5,"parse","",""],[5,"get_initial_value","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::border_left_width::computed_value",""],[11,"to_css","style::properties::longhands::border_left_width","",61],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[6,"ComputedValue","",""],[11,"to_computed_value","","",61],[0,"border_top_left_radius","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::border_top_left_radius",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"border_top_right_radius","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::border_top_right_radius",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"border_bottom_right_radius","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::border_bottom_right_radius",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"border_bottom_left_radius","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::border_bottom_left_radius",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"outline_color","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::outline_color",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::outline_color::computed_value","A <color> value."],[13,"CurrentColor","","The 'currentColor' keyword",21],[13,"RGBA","","Everything else gets converted to RGBA during parsing",21],[6,"SpecifiedValue","style::properties::longhands::outline_color",""],[0,"outline_style","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::outline_style",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[0,"outline_width","style::properties::longhands",""],[5,"parse","style::properties::longhands::outline_width",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[11,"new","util::geometry","FIXME(pcwalton): Workaround for lack of cross crate inlining of newtype structs!",62],[11,"scale_by","","",62],[11,"from_px","","",62],[11,"from_page_px","","",62],[11,"to_nearest_px","","",62],[11,"to_frac32_px","","",62],[11,"to_subpx","","",62],[11,"to_snapped","","",62],[11,"from_frac32_px","","",62],[11,"from_pt","","",62],[11,"from_frac_px","","",62],[11,"min","","",62],[11,"max","","",62],[11,"new","util::bezier","",63],[11,"solve","","",63],[11,"new","util::cache","",64],[11,"insert","","",64],[11,"find","","",64],[11,"find_or_create","","",64],[11,"evict_all","","",64],[11,"new","","",65],[11,"touch","","",65],[11,"iter","","",65],[11,"insert","","",65],[11,"find","","",65],[11,"find_or_create","","",65],[11,"evict_all","","",65],[11,"new","","",66],[11,"insert","","",66],[11,"find","","",66],[11,"find_or_create","","",66],[11,"evict_all","","",66],[11,"fmt","util::cursor","",67],[11,"from_i64","","",67],[11,"from_u64","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"clone","","",67],[11,"from_css_keyword","","",67],[11,"to_css","","",67],[11,"fmt","util::deque","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"new","","Allocates a new buffer pool which in turn can be used to allocate new\ndeques.",69],[11,"deque","","Allocates a new work-stealing deque which will send/receiving memory to\nand from this buffer pool.",69],[11,"clone","","",69],[11,"push","","Pushes data onto the front of this work queue.",70],[11,"pop","","Pops data off the front of the work queue, returning `None` on an empty\nqueue.",70],[11,"pool","","Gets access to the buffer pool that this worker is attached to. This can\nbe used to create more deques which share the same buffer pool as this\ndeque.",70],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",71],[11,"pool","","Gets access to the buffer pool that this stealer is attached to. This\ncan be used to create more deques which share the same buffer pool as\nthis deque.",71],[11,"clone","","",71],[11,"drop","","",72],[11,"drop","","",73],[11,"default","util::fnv","",74],[11,"finish","","",74],[11,"write","","",74],[11,"fmt","util::geometry","",75],[11,"fmt","","",76],[11,"encode","","",76],[11,"fmt","","",77],[11,"encode","","",77],[11,"cmp","","",62],[11,"partial_cmp","","",62],[11,"lt","","",62],[11,"le","","",62],[11,"gt","","",62],[11,"ge","","",62],[11,"eq","","",62],[11,"ne","","",62],[11,"hash","","",62],[11,"clone","","",62],[11,"default","","",62],[11,"zero","","",62],[11,"encode","","",62],[11,"fmt","","",62],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"add","util::geometry","",62],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"sub","util::geometry","",62],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"mul","util::geometry","",62],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"div","util::geometry","",62],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"rem","util::geometry","",62],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"neg","util::geometry","",62],[11,"from","","",62],[11,"to_i64","","",62],[11,"to_u64","","",62],[11,"to_f32","","",62],[11,"to_f64","","",62],[11,"hash","util::logical_geometry","",78],[11,"cmp","","",78],[11,"partial_cmp","","",78],[11,"lt","","",78],[11,"le","","",78],[11,"gt","","",78],[11,"ge","","",78],[11,"clone","","",78],[11,"eq","","",78],[11,"ne","","",78],[11,"encode","","",78],[11,"empty","","Returns an empty set of flags.",78],[11,"all","","Returns the set containing all flags.",78],[11,"bits","","Returns the raw value of the flags currently stored.",78],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",78],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",78],[11,"is_empty","","Returns `true` if no flags are currently stored.",78],[11,"is_all","","Returns `true` if all flags are currently set.",78],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78],[11,"insert","","Inserts the specified flags in-place.",78],[11,"remove","","Removes the specified flags in-place.",78],[11,"toggle","","Toggles the specified flags in-place.",78],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"bitor","util::logical_geometry","Returns the union of the two sets of flags.",78],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"bitxor","util::logical_geometry","Returns the left flags, but with all the right flags toggled.",78],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"bitand","util::logical_geometry","Returns the intersection between the two sets of flags.",78],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"sub","util::logical_geometry","Returns the set difference of the two sets of flags.",78],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"not","util::logical_geometry","Returns the complement of this set of flags.",78],[11,"is_vertical","","",78],[11,"is_vertical_lr","","Assuming .is_vertical(), does the block direction go left to right?",78],[11,"is_inline_tb","","Assuming .is_vertical(), does the inline direction go top to bottom?",78],[11,"is_bidi_ltr","","",78],[11,"is_sideways_left","","",78],[11,"fmt","","",78],[11,"clone","","",79],[11,"eq","","",79],[11,"ne","","",79],[11,"encode","","",79],[11,"fmt","","",79],[11,"clone","","",80],[11,"eq","","",80],[11,"ne","","",80],[11,"encode","","",80],[11,"fmt","","",80],[11,"zero","","",80],[11,"new","","",80],[11,"from_physical","","",80],[11,"width","","",80],[11,"set_width","","",80],[11,"height","","",80],[11,"set_height","","",80],[11,"to_physical","","",80],[11,"convert","","",80],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"add","util::logical_geometry","",80],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"sub","util::logical_geometry","",80],[11,"clone","","",81],[11,"encode","","",81],[11,"eq","","",81],[11,"ne","","",81],[11,"fmt","","",81],[11,"zero","","",81],[11,"new","","",81],[11,"from_physical","","",81],[11,"x","","",81],[11,"set_x","","",81],[11,"y","","",81],[11,"set_y","","",81],[11,"to_physical","","",81],[11,"convert","","",81],[11,"add_point","","This doesn’t really makes sense,\nbut happens when dealing with multiple origins.",81],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"add","util::logical_geometry","",81],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"sub","util::logical_geometry","",81],[11,"clone","","",82],[11,"eq","","",82],[11,"ne","","",82],[11,"encode","","",82],[11,"fmt","","",82],[11,"zero","","",82],[11,"new","","",82],[11,"new_all_same","","",82],[11,"from_physical","","",82],[11,"top","","",82],[11,"set_top","","",82],[11,"right","","",82],[11,"set_right","","",82],[11,"bottom","","",82],[11,"set_bottom","","",82],[11,"left","","",82],[11,"set_left","","",82],[11,"to_physical","","",82],[11,"convert","","",82],[11,"is_zero","","",82],[11,"inline_start_end","","",82],[11,"block_start_end","","",82],[11,"top_bottom","","",82],[11,"left_right","","",82],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"add","util::logical_geometry","",82],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"sub","util::logical_geometry","",82],[11,"clone","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"encode","","",83],[11,"fmt","","",83],[11,"zero","","",83],[11,"new","","",83],[11,"from_point_size","","",83],[11,"from_physical","","",83],[11,"inline_end","","",83],[11,"block_end","","",83],[11,"to_physical","","",83],[11,"convert","","",83],[11,"translate","","",83],[11,"union","","",83],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"add","util::logical_geometry","",83],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"sub","util::logical_geometry","",83],[11,"heap_size_of_children","alloc::boxed","",84],[11,"heap_size_of_children","collections::string","",85],[11,"heap_size_of_children","core::option","",86],[11,"heap_size_of_children","alloc::arc","",87],[11,"heap_size_of_children","collections::vec","",88],[11,"heap_size_of_children","collections::linked_list","",89],[11,"heap_size_of_children","util::mem","",90],[11,"heap_size_of_children","","",91],[11,"drop","","",91],[11,"clone","util::opts","",92],[11,"new","util::persistent_list","",93],[11,"len","","",93],[11,"front","","",93],[11,"prepend_elem","","",93],[11,"iter","","",93],[11,"clone","","",93],[6,"Item","style::properties::longhands::outline_width::computed_value",""],[11,"next","util::persistent_list","",94],[6,"Index","style::properties::longhands::outline_width::computed_value",""],[11,"encode","util::range","",95],[11,"clone","","",95],[11,"fmt","","",95],[6,"Item","style::properties::longhands::outline_width::computed_value",""],[11,"next","util::range","",96],[11,"size_hint","","",96],[11,"new","","Create a new range from beginning and length offsets. This could be\ndenoted as `[begin, begin + length)`.",95],[11,"empty","","",95],[11,"begin","","The index offset to the beginning of the range.",95],[11,"length","","The index offset from the beginning to the end of the range.",95],[11,"end","","The index offset to the end of the range.",95],[11,"contains","","`true` if the index is between the beginning and the end of the range.",95],[11,"is_empty","","`true` if the offset from the beginning to the end of the range is zero.",95],[11,"shift_by","","Shift the entire range by the supplied index delta.",95],[11,"extend_by","","Extend the end of the range by the supplied index delta.",95],[11,"extend_to","","Move the end of the range to the target index.",95],[11,"adjust_by","","Adjust the beginning offset and the length by the supplied deltas.",95],[11,"reset","","Set the begin and length values.",95],[11,"intersect","","",95],[11,"each_index","","Returns an iterater that increments over `[begin, end)`.",95],[11,"is_valid_for_string","","",95],[11,"fmt","util::str","",97],[11,"hash","","",97],[11,"eq","","",97],[11,"ne","","",97],[11,"clone","","",97],[11,"new","","",97],[11,"as_slice","","",97],[11,"new","util::taskpool","",98],[11,"execute","","",98],[11,"hash","util::task_state","",99],[11,"cmp","","",99],[11,"partial_cmp","","",99],[11,"lt","","",99],[11,"le","","",99],[11,"gt","","",99],[11,"ge","","",99],[11,"clone","","",99],[11,"eq","","",99],[11,"ne","","",99],[11,"fmt","","",99],[11,"empty","","Returns an empty set of flags.",99],[11,"all","","Returns the set containing all flags.",99],[11,"bits","","Returns the raw value of the flags currently stored.",99],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",99],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",99],[11,"is_empty","","Returns `true` if no flags are currently stored.",99],[11,"is_all","","Returns `true` if all flags are currently set.",99],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",99],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",99],[11,"insert","","Inserts the specified flags in-place.",99],[11,"remove","","Removes the specified flags in-place.",99],[11,"toggle","","Toggles the specified flags in-place.",99],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"bitor","util::task_state","Returns the union of the two sets of flags.",99],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"bitxor","util::task_state","Returns the left flags, but with all the right flags toggled.",99],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"bitand","util::task_state","Returns the intersection between the two sets of flags.",99],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"sub","util::task_state","Returns the set difference of the two sets of flags.",99],[6,"Output","style::properties::longhands::outline_width::computed_value",""],[11,"not","util::task_state","Returns the complement of this set of flags.",99],[11,"is_script","","",99],[11,"is_layout","","",99],[11,"is_paint","","",99],[11,"compare","util::vec","",100],[11,"push","util::workqueue","Enqueues a block into the work queue.",101],[11,"user_data","","Retrieves the queue user data.",101],[11,"worker_index","","Retrieves the index of the worker.",101],[11,"new","","Creates a new work queue and spawns all the threads associated with\nit.",102],[11,"push","","Enqueues a block into the work queue.",102],[11,"run","","Synchronously runs all the enqueued tasks and waits for them to complete.",102],[11,"shutdown","","",102],[11,"vec_len","collections::vec","",88],[11,"vec_push","","",88],[11,"vec_slice_mut","","",88],[6,"Item","style::properties::longhands::outline_width::computed_value",""],[11,"next","selectors::smallvec","",103],[11,"next_back","","",103],[6,"Item","style::properties::longhands::outline_width::computed_value",""],[11,"next","selectors::smallvec","",104],[6,"Item","style::properties::longhands::outline_width::computed_value",""],[11,"next","selectors::smallvec","",105],[11,"drop","","",105],[11,"set_len","","",106],[11,"set_cap","","",106],[11,"data","","",106],[11,"mut_data","","",106],[11,"ptr","","",106],[11,"mut_ptr","","",106],[11,"set_ptr","","",106],[11,"inline_size","","",106],[11,"len","","",106],[11,"is_empty","","",106],[11,"cap","","",106],[11,"vec_len","","",106],[11,"vec_push","","",106],[11,"vec_slice_mut","","",106],[11,"from_iter","","",106],[11,"extend","","",106],[11,"fmt","","",106],[11,"new","","",106],[11,"set_len","","",107],[11,"set_cap","","",107],[11,"data","","",107],[11,"mut_data","","",107],[11,"ptr","","",107],[11,"mut_ptr","","",107],[11,"set_ptr","","",107],[11,"inline_size","","",107],[11,"len","","",107],[11,"is_empty","","",107],[11,"cap","","",107],[11,"vec_len","","",107],[11,"vec_push","","",107],[11,"vec_slice_mut","","",107],[11,"from_iter","","",107],[11,"extend","","",107],[11,"fmt","","",107],[11,"new","","",107],[11,"set_len","","",108],[11,"set_cap","","",108],[11,"data","","",108],[11,"mut_data","","",108],[11,"ptr","","",108],[11,"mut_ptr","","",108],[11,"set_ptr","","",108],[11,"inline_size","","",108],[11,"len","","",108],[11,"is_empty","","",108],[11,"cap","","",108],[11,"vec_len","","",108],[11,"vec_push","","",108],[11,"vec_slice_mut","","",108],[11,"from_iter","","",108],[11,"extend","","",108],[11,"fmt","","",108],[11,"new","","",108],[11,"set_len","","",109],[11,"set_cap","","",109],[11,"data","","",109],[11,"mut_data","","",109],[11,"ptr","","",109],[11,"mut_ptr","","",109],[11,"set_ptr","","",109],[11,"inline_size","","",109],[11,"len","","",109],[11,"is_empty","","",109],[11,"cap","","",109],[11,"vec_len","","",109],[11,"vec_push","","",109],[11,"vec_slice_mut","","",109],[11,"from_iter","","",109],[11,"extend","","",109],[11,"fmt","","",109],[11,"new","","",109],[11,"set_len","","",110],[11,"set_cap","","",110],[11,"data","","",110],[11,"mut_data","","",110],[11,"ptr","","",110],[11,"mut_ptr","","",110],[11,"set_ptr","","",110],[11,"inline_size","","",110],[11,"len","","",110],[11,"is_empty","","",110],[11,"cap","","",110],[11,"vec_len","","",110],[11,"vec_push","","",110],[11,"vec_slice_mut","","",110],[11,"from_iter","","",110],[11,"extend","","",110],[11,"fmt","","",110],[11,"new","","",110],[11,"set_len","","",111],[11,"set_cap","","",111],[11,"data","","",111],[11,"mut_data","","",111],[11,"ptr","","",111],[11,"mut_ptr","","",111],[11,"set_ptr","","",111],[11,"inline_size","","",111],[11,"len","","",111],[11,"is_empty","","",111],[11,"cap","","",111],[11,"vec_len","","",111],[11,"vec_push","","",111],[11,"vec_slice_mut","","",111],[11,"from_iter","","",111],[11,"extend","","",111],[11,"fmt","","",111],[11,"new","","",111],[11,"set_len","","",112],[11,"set_cap","","",112],[11,"data","","",112],[11,"mut_data","","",112],[11,"ptr","","",112],[11,"mut_ptr","","",112],[11,"set_ptr","","",112],[11,"inline_size","","",112],[11,"len","","",112],[11,"is_empty","","",112],[11,"cap","","",112],[11,"vec_len","","",112],[11,"vec_push","","",112],[11,"vec_slice_mut","","",112],[11,"from_iter","","",112],[11,"extend","","",112],[11,"fmt","","",112],[11,"new","","",112],[11,"drop","","",106],[11,"drop","","",107],[11,"drop","","",108],[11,"drop","","",109],[11,"drop","","",110],[11,"drop","","",111],[11,"drop","","",112],[11,"clone","","",106],[11,"clone","","",107],[11,"clone","","",108],[11,"clone","","",109],[11,"clone","","",110],[11,"clone","","",111],[11,"clone","","",112],[3,"T","style::properties::longhands::outline_width::computed_value",""],[6,"SpecifiedValue","style::properties::longhands::outline_width",""],[0,"outline_offset","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::outline_offset",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"top","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::top",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"right","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::right",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"bottom","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::bottom",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"left","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::left",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"display","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::display",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::display::computed_value",""],[13,"inline","","",113],[13,"block","","",113],[13,"inline_block","","",113],[13,"table","","",113],[13,"inline_table","","",113],[13,"table_row_group","","",113],[13,"table_header_group","","",113],[13,"table_footer_group","","",113],[13,"table_row","","",113],[13,"table_column_group","","",113],[13,"table_column","","",113],[13,"table_cell","","",113],[13,"table_caption","","",113],[13,"list_item","","",113],[13,"none","","",113],[11,"from_i64","","",113],[11,"from_u64","","",113],[11,"eq","","",113],[11,"ne","","",113],[11,"clone","","",113],[11,"parse","","",113],[11,"fmt","","",113],[11,"to_css","","",113],[6,"ComputedValue","style::properties::longhands::display",""],[11,"to_computed_value","style::properties::longhands::display::computed_value","",113],[0,"position","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::position",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::position::computed_value",""],[13,"static_","","",114],[13,"absolute","","",114],[13,"relative","","",114],[13,"fixed","","",114],[11,"from_i64","","",114],[11,"from_u64","","",114],[11,"eq","","",114],[11,"ne","","",114],[11,"clone","","",114],[11,"parse","","",114],[11,"fmt","","",114],[11,"to_css","","",114],[0,"float","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::float",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::float::computed_value",""],[13,"none","","",115],[13,"left","","",115],[13,"right","","",115],[11,"from_i64","","",115],[11,"from_u64","","",115],[11,"eq","","",115],[11,"ne","","",115],[11,"clone","","",115],[11,"parse","","",115],[11,"fmt","","",115],[11,"to_css","","",115],[0,"clear","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::clear",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::clear::computed_value",""],[13,"none","","",116],[13,"left","","",116],[13,"right","","",116],[13,"both","","",116],[11,"from_i64","","",116],[11,"from_u64","","",116],[11,"eq","","",116],[11,"ne","","",116],[11,"clone","","",116],[11,"parse","","",116],[11,"fmt","","",116],[11,"to_css","","",116],[0,"_servo_display_for_hypothetical_box","style::properties::longhands",""],[5,"derive_from_display","style::properties::longhands::_servo_display_for_hypothetical_box",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::_servo_display_for_hypothetical_box::computed_value",""],[0,"z_index","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::z_index",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::z_index::computed_value",""],[11,"clone","","",117],[11,"eq","","",117],[11,"ne","","",117],[11,"to_css","","",117],[11,"number_or_zero","","",117],[6,"SpecifiedValue","style::properties::longhands::z_index",""],[0,"direction","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::direction",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::direction::computed_value",""],[13,"ltr","","",118],[13,"rtl","","",118],[11,"from_i64","","",118],[11,"from_u64","","",118],[11,"eq","","",118],[11,"ne","","",118],[11,"clone","","",118],[11,"parse","","",118],[11,"fmt","","",118],[11,"to_css","","",118],[0,"width","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::width",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"height","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::height",""],[5,"get_initial_value","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[11,"to_css","","",119],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[6,"ComputedValue","",""],[11,"to_computed_value","","",119],[0,"min_width","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::min_width",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"max_width","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::max_width",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"min_height","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::min_height",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"max_height","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::max_height",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"line_height","style::properties::longhands",""],[4,"SpecifiedValue","style::properties::longhands::line_height",""],[13,"Normal","","",120],[13,"Length","","",120],[13,"Number","","",120],[13,"Percentage","","",120],[5,"parse","","normal | <number> | <length> | <percentage>"],[5,"get_initial_value","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::line_height::computed_value",""],[13,"Normal","","",121],[13,"Length","","",121],[13,"Number","","",121],[11,"clone","","",121],[11,"eq","","",121],[11,"ne","","",121],[11,"fmt","","",121],[11,"eq","style::properties::longhands::line_height","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"to_css","","",120],[6,"ComputedValue","",""],[11,"to_computed_value","","",120],[0,"vertical_align","style::properties::longhands",""],[4,"SpecifiedValue","style::properties::longhands::vertical_align",""],[13,"baseline","","",122],[13,"sub","","",122],[13,"super_","","",122],[13,"top","","",122],[13,"text_top","","",122],[13,"middle","","",122],[13,"bottom","","",122],[13,"text_bottom","","",122],[13,"LengthOrPercentage","","",122],[5,"parse","","baseline | sub | super | top | text-top | middle | bottom | text-bottom\n| <percentage> | <length>"],[5,"get_initial_value","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::vertical_align::computed_value",""],[13,"baseline","","",123],[13,"sub","","",123],[13,"super_","","",123],[13,"top","","",123],[13,"text_top","","",123],[13,"middle","","",123],[13,"bottom","","",123],[13,"text_bottom","","",123],[13,"Length","","",123],[13,"Percentage","","",123],[11,"clone","","",123],[11,"eq","","",123],[11,"ne","","",123],[11,"fmt","","",123],[11,"eq","style::properties::longhands::vertical_align","",122],[11,"ne","","",122],[11,"clone","","",122],[11,"to_css","","",122],[6,"ComputedValue","",""],[11,"to_computed_value","","",122],[0,"overflow_x","style::properties::longhands",""],[5,"compute_with_other_overflow_direction","style::properties::longhands::overflow_x",""],[5,"get_initial_value","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::overflow_x::computed_value",""],[13,"visible","","",124],[13,"hidden","","",124],[13,"scroll","","",124],[13,"auto","","",124],[11,"from_i64","","",124],[11,"from_u64","","",124],[11,"eq","","",124],[11,"ne","","",124],[11,"clone","","",124],[11,"parse","","",124],[11,"fmt","","",124],[11,"to_css","","",124],[6,"ComputedValue","style::properties::longhands::overflow_x",""],[11,"to_computed_value","style::properties::longhands::overflow_x::computed_value","",124],[0,"overflow_y","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::overflow_y",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"T","style::properties::longhands::overflow_y::computed_value",""],[11,"eq","","",125],[11,"ne","","",125],[11,"clone","","",125],[11,"to_css","","",125],[6,"ComputedValue","style::properties::longhands::overflow_y",""],[11,"to_computed_value","style::properties::longhands::overflow_y::computed_value","",125],[0,"visibility","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::visibility",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::visibility::computed_value",""],[13,"visible","","",126],[13,"hidden","","",126],[11,"from_i64","","",126],[11,"from_u64","","",126],[11,"eq","","",126],[11,"ne","","",126],[11,"clone","","",126],[11,"parse","","",126],[11,"fmt","","",126],[11,"to_css","","",126],[0,"content","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::content",""],[5,"counter_name_is_illegal","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"ContentItem","style::properties::longhands::content::computed_value",""],[13,"String","","Literal string content.",127],[13,"Counter","","`counter(name, style)`.",127],[13,"Counters","","`counters(name, separator, style)`.",127],[13,"OpenQuote","","`open-quote`.",127],[13,"CloseQuote","","`close-quote`.",127],[13,"NoOpenQuote","","`no-open-quote`.",127],[13,"NoCloseQuote","","`no-close-quote`.",127],[4,"T","",""],[13,"normal","","",128],[13,"none","","",128],[13,"Content","","",128],[11,"clone","","",127],[11,"eq","","",127],[11,"ne","","",127],[11,"to_css","","",127],[11,"clone","","",128],[11,"eq","","",128],[11,"ne","","",128],[11,"to_css","","",128],[0,"list_style_position","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::list_style_position",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::list_style_position::computed_value",""],[13,"outside","","",129],[13,"inside","","",129],[11,"from_i64","","",129],[11,"from_u64","","",129],[11,"eq","","",129],[11,"ne","","",129],[11,"clone","","",129],[11,"parse","","",129],[11,"fmt","","",129],[11,"to_css","","",129],[0,"list_style_type","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::list_style_type",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::list_style_type::computed_value",""],[13,"disc","","",130],[13,"none","","",130],[13,"circle","","",130],[13,"square","","",130],[13,"decimal","","",130],[13,"arabic_indic","","",130],[13,"bengali","","",130],[13,"cambodian","","",130],[13,"cjk_decimal","","",130],[13,"devanagari","","",130],[13,"gujarati","","",130],[13,"gurmukhi","","",130],[13,"kannada","","",130],[13,"khmer","","",130],[13,"lao","","",130],[13,"malayalam","","",130],[13,"mongolian","","",130],[13,"myanmar","","",130],[13,"oriya","","",130],[13,"persian","","",130],[13,"telugu","","",130],[13,"thai","","",130],[13,"tibetan","","",130],[13,"lower_alpha","","",130],[13,"upper_alpha","","",130],[13,"cjk_earthly_branch","","",130],[13,"cjk_heavenly_stem","","",130],[13,"lower_greek","","",130],[13,"hiragana","","",130],[13,"hiragana_iroha","","",130],[13,"katakana","","",130],[13,"katakana_iroha","","",130],[13,"disclosure_open","","",130],[13,"disclosure_closed","","",130],[11,"from_i64","","",130],[11,"from_u64","","",130],[11,"eq","","",130],[11,"ne","","",130],[11,"clone","","",130],[11,"parse","","",130],[11,"fmt","","",130],[11,"to_css","","",130],[0,"list_style_image","style::properties::longhands",""],[4,"SpecifiedValue","style::properties::longhands::list_style_image",""],[13,"None","","",131],[13,"Url","","",131],[5,"parse","",""],[5,"get_initial_value","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::list_style_image::computed_value",""],[11,"eq","style::properties::longhands::list_style_image","",131],[11,"ne","","",131],[11,"clone","","",131],[11,"to_css","","",131],[6,"ComputedValue","",""],[11,"to_computed_value","","",131],[0,"quotes","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::quotes",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"T","style::properties::longhands::quotes::computed_value",""],[11,"eq","","",132],[11,"ne","","",132],[11,"clone","","",132],[11,"to_css","","",132],[0,"counter_increment","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::counter_increment",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"T","style::properties::longhands::counter_increment::computed_value",""],[11,"eq","","",133],[11,"ne","","",133],[11,"clone","","",133],[11,"to_css","","",133],[0,"counter_reset","style::properties::longhands",""],[5,"parse_specified","style::properties::longhands::counter_reset",""],[5,"parse_declared","",""],[0,"background_color","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::background_color",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::background_color::computed_value","A <color> value."],[13,"CurrentColor","","The 'currentColor' keyword",21],[13,"RGBA","","Everything else gets converted to RGBA during parsing",21],[6,"SpecifiedValue","style::properties::longhands::background_color",""],[0,"background_image","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::background_image",""],[5,"get_initial_value","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::background_image::computed_value",""],[11,"eq","style::properties::longhands::background_image","",134],[11,"ne","","",134],[11,"clone","","",134],[11,"to_css","","",134],[6,"ComputedValue","",""],[11,"to_computed_value","","",134],[0,"background_position","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::background_position",""],[12,"horizontal","","",135],[12,"vertical","","",135],[5,"get_initial_value","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"T","style::properties::longhands::background_position::computed_value",""],[12,"horizontal","","",136],[12,"vertical","","",136],[11,"clone","","",136],[11,"eq","","",136],[11,"ne","","",136],[11,"eq","style::properties::longhands::background_position","",135],[11,"ne","","",135],[11,"clone","","",135],[11,"to_css","","",135],[6,"ComputedValue","",""],[11,"to_computed_value","","",135],[0,"background_repeat","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::background_repeat",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::background_repeat::computed_value",""],[13,"repeat","","",137],[13,"repeat_x","","",137],[13,"repeat_y","","",137],[13,"no_repeat","","",137],[11,"from_i64","","",137],[11,"from_u64","","",137],[11,"eq","","",137],[11,"ne","","",137],[11,"clone","","",137],[11,"parse","","",137],[11,"fmt","","",137],[11,"to_css","","",137],[0,"background_attachment","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::background_attachment",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::background_attachment::computed_value",""],[13,"scroll","","",138],[13,"fixed","","",138],[11,"from_i64","","",138],[11,"from_u64","","",138],[11,"eq","","",138],[11,"ne","","",138],[11,"clone","","",138],[11,"parse","","",138],[11,"fmt","","",138],[11,"to_css","","",138],[0,"background_size","style::properties::longhands",""],[3,"SpecifiedExplicitSize","style::properties::longhands::background_size",""],[12,"width","","",139],[12,"height","","",139],[4,"SpecifiedValue","",""],[13,"Explicit","","",140],[13,"Cover","","",140],[13,"Contain","","",140],[5,"get_initial_value","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"ExplicitSize","style::properties::longhands::background_size::computed_value",""],[12,"width","","",141],[12,"height","","",141],[4,"T","",""],[13,"Explicit","","",142],[13,"Cover","","",142],[13,"Contain","","",142],[11,"fmt","","",141],[11,"clone","","",141],[11,"eq","","",141],[11,"ne","","",141],[11,"fmt","","",142],[11,"clone","","",142],[11,"eq","","",142],[11,"ne","","",142],[11,"fmt","style::properties::longhands::background_size","",139],[11,"eq","","",139],[11,"ne","","",139],[11,"clone","","",139],[11,"to_css","","",139],[11,"fmt","","",140],[11,"eq","","",140],[11,"ne","","",140],[11,"clone","","",140],[11,"to_css","","",140],[6,"ComputedValue","",""],[11,"to_computed_value","","",140],[0,"color","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::color",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::color::computed_value",""],[6,"SpecifiedValue","style::properties::longhands::color",""],[6,"ComputedValue","",""],[11,"to_computed_value","","",143],[0,"font_family","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::font_family",""],[5,"parse","","<family-name>#\n<family-name> = <string> | [ <ident>+ ]\nTODO: <generic-family>"],[5,"parse_one_family","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"FontFamily","style::properties::longhands::font_family::computed_value",""],[13,"FamilyName","","",144],[6,"T","",""],[11,"clone","","",144],[11,"eq","","",144],[11,"ne","","",144],[11,"name","","",144],[11,"to_css","","",144],[11,"to_css","collections::vec","",88],[6,"SpecifiedValue","style::properties::longhands::font_family",""],[0,"font_style","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::font_style",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::font_style::computed_value",""],[13,"normal","","",145],[13,"italic","","",145],[13,"oblique","","",145],[11,"from_i64","","",145],[11,"from_u64","","",145],[11,"eq","","",145],[11,"ne","","",145],[11,"clone","","",145],[11,"parse","","",145],[11,"fmt","","",145],[11,"to_css","","",145],[0,"font_variant","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::font_variant",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::font_variant::computed_value",""],[13,"normal","","",146],[13,"small_caps","","",146],[11,"from_i64","","",146],[11,"from_u64","","",146],[11,"eq","","",146],[11,"ne","","",146],[11,"clone","","",146],[11,"parse","","",146],[11,"fmt","","",146],[11,"to_css","","",146],[0,"font_weight","style::properties::longhands",""],[4,"SpecifiedValue","style::properties::longhands::font_weight",""],[13,"Bolder","","",147],[13,"Lighter","","",147],[13,"Weight100","","",147],[13,"Weight200","","",147],[13,"Weight300","","",147],[13,"Weight400","","",147],[13,"Weight500","","",147],[13,"Weight600","","",147],[13,"Weight700","","",147],[13,"Weight800","","",147],[13,"Weight900","","",147],[5,"parse","","normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900"],[5,"get_initial_value","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::font_weight::computed_value",""],[13,"Weight100","","",148],[13,"Weight200","","",148],[13,"Weight300","","",148],[13,"Weight400","","",148],[13,"Weight500","","",148],[13,"Weight600","","",148],[13,"Weight700","","",148],[13,"Weight800","","",148],[13,"Weight900","","",148],[11,"clone","","",148],[11,"eq","","",148],[11,"ne","","",148],[11,"fmt","","",148],[11,"is_bold","","",148],[11,"eq","style::properties::longhands::font_weight","",147],[11,"ne","","",147],[11,"clone","","",147],[11,"to_css","","",147],[6,"ComputedValue","",""],[11,"to_computed_value","","",147],[0,"font_size","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::font_size",""],[5,"get_initial_value","",""],[5,"parse","","<length> | <percentage> | <absolute-size> | <relative-size>"],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::font_size::computed_value",""],[11,"to_css","style::properties::longhands::font_size","",149],[11,"eq","","",149],[11,"ne","","",149],[11,"clone","","",149],[6,"ComputedValue","",""],[11,"to_computed_value","","",149],[0,"font_stretch","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::font_stretch",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::font_stretch::computed_value",""],[13,"normal","","",150],[13,"ultra_condensed","","",150],[13,"extra_condensed","","",150],[13,"condensed","","",150],[13,"semi_condensed","","",150],[13,"semi_expanded","","",150],[13,"expanded","","",150],[13,"extra_expanded","","",150],[13,"ultra_expanded","","",150],[11,"from_i64","","",150],[11,"from_u64","","",150],[11,"eq","","",150],[11,"ne","","",150],[11,"clone","","",150],[11,"parse","","",150],[11,"fmt","","",150],[11,"to_css","","",150],[0,"text_align","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::text_align",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::text_align::computed_value",""],[13,"left","","",151],[13,"right","","",151],[13,"center","","",151],[13,"justify","","",151],[11,"from_i64","","",151],[11,"from_u64","","",151],[11,"eq","","",151],[11,"ne","","",151],[11,"clone","","",151],[11,"parse","","",151],[11,"fmt","","",151],[11,"to_css","","",151],[0,"letter_spacing","style::properties::longhands",""],[4,"SpecifiedValue","style::properties::longhands::letter_spacing",""],[13,"Normal","","",152],[13,"Specified","","",152],[5,"get_initial_value","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::letter_spacing::computed_value",""],[11,"eq","style::properties::longhands::letter_spacing","",152],[11,"ne","","",152],[11,"clone","","",152],[11,"to_css","","",152],[6,"ComputedValue","",""],[11,"to_computed_value","","",152],[0,"word_spacing","style::properties::longhands",""],[4,"SpecifiedValue","style::properties::longhands::word_spacing",""],[13,"Normal","","",153],[13,"Specified","","",153],[5,"get_initial_value","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::word_spacing::computed_value",""],[11,"eq","style::properties::longhands::word_spacing","",153],[11,"ne","","",153],[11,"clone","","",153],[11,"to_css","","",153],[6,"ComputedValue","",""],[11,"to_computed_value","","",153],[0,"text_indent","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::text_indent",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"SpecifiedValue","",""],[0,"overflow_wrap","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::overflow_wrap",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::overflow_wrap::computed_value",""],[13,"normal","","",154],[13,"break_word","","",154],[11,"from_i64","","",154],[11,"from_u64","","",154],[11,"eq","","",154],[11,"ne","","",154],[11,"clone","","",154],[11,"parse","","",154],[11,"fmt","","",154],[11,"to_css","","",154],[0,"word_break","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::word_break",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::word_break::computed_value",""],[13,"normal","","",155],[13,"break_all","","",155],[11,"from_i64","","",155],[11,"from_u64","","",155],[11,"eq","","",155],[11,"ne","","",155],[11,"clone","","",155],[11,"parse","","",155],[11,"fmt","","",155],[11,"to_css","","",155],[0,"text_overflow","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::text_overflow",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::text_overflow::computed_value",""],[13,"clip","","",156],[13,"ellipsis","","",156],[11,"from_i64","","",156],[11,"from_u64","","",156],[11,"eq","","",156],[11,"ne","","",156],[11,"clone","","",156],[11,"parse","","",156],[11,"fmt","","",156],[11,"to_css","","",156],[0,"text_justify","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::text_justify",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::text_justify::computed_value",""],[13,"auto","","",157],[13,"none","","",157],[13,"inter_word","","",157],[11,"from_i64","","",157],[11,"from_u64","","",157],[11,"eq","","",157],[11,"ne","","",157],[11,"clone","","",157],[11,"parse","","",157],[11,"fmt","","",157],[11,"to_css","","",157],[0,"text_decoration","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::text_decoration",""],[12,"underline","","",158],[12,"overline","","",158],[12,"line_through","","",158],[5,"get_initial_value","",""],[5,"parse","","none | [ underline || overline || line-through || blink ]"],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::text_decoration::computed_value",""],[17,"none","",""],[11,"fmt","style::properties::longhands::text_decoration","",158],[11,"clone","","",158],[11,"eq","","",158],[11,"ne","","",158],[11,"to_css","","",158],[0,"_servo_text_decorations_in_effect","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::_servo_text_decorations_in_effect",""],[12,"underline","","",159],[12,"overline","","",159],[12,"line_through","","",159],[5,"get_initial_value","",""],[5,"derive_from_text_decoration","",""],[5,"derive_from_display","",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::_servo_text_decorations_in_effect::computed_value",""],[11,"fmt","style::properties::longhands::_servo_text_decorations_in_effect","",159],[11,"eq","","",159],[11,"ne","","",159],[11,"clone","","",159],[0,"white_space","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::white_space",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::white_space::computed_value",""],[13,"normal","","",160],[13,"pre","","",160],[13,"nowrap","","",160],[11,"from_i64","","",160],[11,"from_u64","","",160],[11,"eq","","",160],[11,"ne","","",160],[11,"clone","","",160],[11,"parse","","",160],[11,"fmt","","",160],[11,"to_css","","",160],[0,"text_transform","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::text_transform",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::text_transform::computed_value",""],[13,"none","","",161],[13,"capitalize","","",161],[13,"uppercase","","",161],[13,"lowercase","","",161],[11,"from_i64","","",161],[11,"from_u64","","",161],[11,"eq","","",161],[11,"ne","","",161],[11,"clone","","",161],[11,"parse","","",161],[11,"fmt","","",161],[11,"to_css","","",161],[0,"text_rendering","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::text_rendering",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::text_rendering::computed_value",""],[13,"auto","","",162],[13,"optimizespeed","","",162],[13,"optimizelegibility","","",162],[13,"geometricprecision","","",162],[11,"from_i64","","",162],[11,"from_u64","","",162],[11,"eq","","",162],[11,"ne","","",162],[11,"clone","","",162],[11,"parse","","",162],[11,"fmt","","",162],[11,"to_css","","",162],[0,"table_layout","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::table_layout",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::table_layout::computed_value",""],[13,"auto","","",163],[13,"fixed","","",163],[11,"from_i64","","",163],[11,"from_u64","","",163],[11,"eq","","",163],[11,"ne","","",163],[11,"clone","","",163],[11,"parse","","",163],[11,"fmt","","",163],[11,"to_css","","",163],[0,"empty_cells","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::empty_cells",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::empty_cells::computed_value",""],[13,"show","","",164],[13,"hide","","",164],[11,"from_i64","","",164],[11,"from_u64","","",164],[11,"eq","","",164],[11,"ne","","",164],[11,"clone","","",164],[11,"parse","","",164],[11,"fmt","","",164],[11,"to_css","","",164],[0,"caption_side","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::caption_side",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::caption_side::computed_value",""],[13,"top","","",165],[13,"bottom","","",165],[11,"from_i64","","",165],[11,"from_u64","","",165],[11,"eq","","",165],[11,"ne","","",165],[11,"clone","","",165],[11,"parse","","",165],[11,"fmt","","",165],[11,"to_css","","",165],[0,"border_collapse","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::border_collapse",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::border_collapse::computed_value",""],[13,"separate","","",166],[13,"collapse","","",166],[11,"from_i64","","",166],[11,"from_u64","","",166],[11,"eq","","",166],[11,"ne","","",166],[11,"clone","","",166],[11,"parse","","",166],[11,"fmt","","",166],[11,"to_css","","",166],[0,"border_spacing","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::border_spacing",""],[12,"horizontal","","",167],[12,"vertical","","",167],[5,"get_initial_value","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"T","style::properties::longhands::border_spacing::computed_value",""],[12,"horizontal","","",168],[12,"vertical","","",168],[11,"encode","","",168],[11,"eq","","",168],[11,"ne","","",168],[11,"fmt","","",168],[11,"clone","","",168],[11,"eq","style::properties::longhands::border_spacing","",167],[11,"ne","","",167],[11,"fmt","","",167],[11,"clone","","",167],[11,"to_css","","",167],[6,"ComputedValue","",""],[11,"to_computed_value","","",167],[0,"writing_mode","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::writing_mode",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::writing_mode::computed_value",""],[13,"horizontal_tb","","",169],[13,"vertical_rl","","",169],[13,"vertical_lr","","",169],[11,"from_i64","","",169],[11,"from_u64","","",169],[11,"eq","","",169],[11,"ne","","",169],[11,"clone","","",169],[11,"parse","","",169],[11,"fmt","","",169],[11,"to_css","","",169],[0,"text_orientation","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::text_orientation",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::text_orientation::computed_value",""],[13,"sideways","","",170],[13,"sideways_left","","",170],[13,"sideways_right","","",170],[11,"from_i64","","",170],[11,"from_u64","","",170],[11,"eq","","",170],[11,"ne","","",170],[11,"clone","","",170],[11,"parse","","",170],[11,"fmt","","",170],[11,"to_css","","",170],[0,"box_sizing","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::box_sizing",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::box_sizing::computed_value",""],[13,"content_box","","",171],[13,"border_box","","",171],[11,"from_i64","","",171],[11,"from_u64","","",171],[11,"eq","","",171],[11,"ne","","",171],[11,"clone","","",171],[11,"parse","","",171],[11,"fmt","","",171],[11,"to_css","","",171],[0,"cursor","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::cursor",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::cursor::computed_value",""],[13,"AutoCursor","","",172],[13,"SpecifiedCursor","","",172],[11,"fmt","","",172],[11,"eq","","",172],[11,"ne","","",172],[11,"clone","","",172],[11,"to_css","","",172],[0,"pointer_events","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::pointer_events",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::pointer_events::computed_value",""],[13,"auto","","",173],[13,"none","","",173],[11,"from_i64","","",173],[11,"from_u64","","",173],[11,"eq","","",173],[11,"ne","","",173],[11,"clone","","",173],[11,"parse","","",173],[11,"fmt","","",173],[11,"to_css","","",173],[0,"opacity","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::opacity",""],[5,"get_initial_value","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[6,"T","style::properties::longhands::opacity::computed_value",""],[11,"to_css","style::properties::longhands::opacity","",174],[11,"eq","","",174],[11,"ne","","",174],[11,"clone","","",174],[6,"ComputedValue","",""],[11,"to_computed_value","","",174],[0,"box_shadow","style::properties::longhands",""],[3,"SpecifiedBoxShadow","style::properties::longhands::box_shadow",""],[12,"offset_x","","",175],[12,"offset_y","","",175],[12,"blur_radius","","",175],[12,"spread_radius","","",175],[12,"color","","",175],[12,"inset","","",175],[5,"get_initial_value","",""],[5,"parse","",""],[5,"compute_one_box_shadow","",""],[5,"parse_one_box_shadow","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"BoxShadow","style::properties::longhands::box_shadow::computed_value",""],[12,"offset_x","","",176],[12,"offset_y","","",176],[12,"blur_radius","","",176],[12,"spread_radius","","",176],[12,"color","","",176],[12,"inset","","",176],[6,"T","",""],[11,"eq","","",176],[11,"ne","","",176],[11,"clone","","",176],[11,"fmt","","",176],[6,"SpecifiedValue","style::properties::longhands::box_shadow",""],[11,"eq","","",175],[11,"ne","","",175],[11,"clone","","",175],[11,"to_css","collections::vec","",88],[11,"to_css","style::properties::longhands::box_shadow","",175],[6,"ComputedValue","",""],[11,"to_computed_value","","",177],[0,"clip","style::properties::longhands",""],[3,"SpecifiedClipRect","style::properties::longhands::clip",""],[12,"top","","",178],[12,"right","","",178],[12,"bottom","","",178],[12,"left","","",178],[5,"get_initial_value","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"ClipRect","style::properties::longhands::clip::computed_value",""],[12,"top","","",179],[12,"right","","",179],[12,"bottom","","",179],[12,"left","","",179],[6,"T","",""],[11,"fmt","","",179],[11,"eq","","",179],[11,"ne","","",179],[11,"clone","","",179],[6,"SpecifiedValue","style::properties::longhands::clip",""],[11,"eq","","",178],[11,"ne","","",178],[11,"fmt","","",178],[11,"clone","","",178],[11,"to_css","","",178],[11,"to_css","core::option","",86],[6,"ComputedValue","style::properties::longhands::clip",""],[11,"to_computed_value","","",180],[0,"text_shadow","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::text_shadow",""],[3,"SpecifiedTextShadow","",""],[12,"offset_x","","",181],[12,"offset_y","","",181],[12,"blur_radius","","",181],[12,"color","","",181],[5,"get_initial_value","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"T","style::properties::longhands::text_shadow::computed_value",""],[3,"TextShadow","",""],[12,"offset_x","","",182],[12,"offset_y","","",182],[12,"blur_radius","","",182],[12,"color","","",182],[11,"fmt","","",183],[11,"eq","","",183],[11,"ne","","",183],[11,"clone","","",183],[11,"fmt","","",182],[11,"eq","","",182],[11,"ne","","",182],[11,"clone","","",182],[11,"eq","style::properties::longhands::text_shadow","",184],[11,"ne","","",184],[11,"clone","","",184],[11,"eq","","",181],[11,"ne","","",181],[11,"clone","","",181],[11,"fmt","","",181],[11,"to_css","","",184],[11,"to_css","","",181],[6,"ComputedValue","",""],[11,"to_computed_value","","",184],[0,"filter","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::filter",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"T","style::properties::longhands::filter::computed_value",""],[12,"filters","","",185],[4,"Filter","",""],[13,"Brightness","","",186],[13,"Contrast","","",186],[13,"Grayscale","","",186],[13,"HueRotate","","",186],[13,"Invert","","",186],[13,"Opacity","","",186],[13,"Saturate","","",186],[13,"Sepia","","",186],[11,"fmt","","",186],[11,"eq","","",186],[11,"ne","","",186],[11,"clone","","",186],[11,"to_css","","",186],[11,"fmt","","",185],[11,"eq","","",185],[11,"ne","","",185],[11,"clone","","",185],[11,"to_css","","",185],[11,"new","","Creates a new filter pipeline.",185],[11,"push","","Adds a new filter to the filter pipeline.",185],[11,"is_empty","","Returns true if this filter pipeline is empty and false otherwise.",185],[11,"opacity","","Returns the resulting opacity of this filter pipeline.",185],[0,"transform","style::properties::longhands",""],[3,"SpecifiedMatrix","style::properties::longhands::transform",""],[3,"SpecifiedValue","",""],[5,"get_initial_value","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"ComputedMatrix","style::properties::longhands::transform::computed_value",""],[12,"m11","","",187],[12,"m12","","",187],[12,"m21","","",187],[12,"m22","","",187],[12,"m31","","",187],[12,"m32","","",187],[6,"T","",""],[11,"eq","","",187],[11,"ne","","",187],[11,"fmt","","",187],[11,"clone","","",187],[6,"Output","",""],[11,"mul","","",187],[11,"identity","","",187],[11,"scale","","",187],[11,"skew","","",187],[11,"translate","","",187],[11,"rotate","","",187],[11,"eq","style::properties::longhands::transform","",188],[11,"ne","","",188],[11,"fmt","","",188],[11,"clone","","",188],[11,"to_css","core::option","",86],[6,"Output","style::properties::longhands::transform",""],[11,"mul","","",188],[11,"eq","","",189],[11,"ne","","",189],[11,"fmt","","",189],[11,"clone","","",189],[11,"to_css","","",189],[6,"ComputedValue","",""],[11,"to_computed_value","","",189],[0,"transform_origin","style::properties::longhands",""],[3,"SpecifiedValue","style::properties::longhands::transform_origin",""],[5,"get_initial_value","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"T","style::properties::longhands::transform_origin::computed_value",""],[12,"horizontal","","",190],[12,"vertical","","",190],[11,"eq","","",190],[11,"ne","","",190],[11,"fmt","","",190],[11,"clone","","",190],[11,"eq","style::properties::longhands::transform_origin","",191],[11,"ne","","",191],[11,"fmt","","",191],[11,"clone","","",191],[11,"to_css","","",191],[6,"ComputedValue","",""],[11,"to_computed_value","","",191],[0,"mix_blend_mode","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::mix_blend_mode",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::mix_blend_mode::computed_value",""],[13,"normal","","",192],[13,"multiply","","",192],[13,"screen","","",192],[13,"overlay","","",192],[13,"darken","","",192],[13,"lighten","","",192],[13,"color_dodge","","",192],[13,"color_burn","","",192],[13,"hard_light","","",192],[13,"soft_light","","",192],[13,"difference","","",192],[13,"exclusion","","",192],[13,"hue","","",192],[13,"saturation","","",192],[13,"color","","",192],[13,"luminosity","","",192],[11,"from_i64","","",192],[11,"from_u64","","",192],[11,"eq","","",192],[11,"ne","","",192],[11,"clone","","",192],[11,"parse","","",192],[11,"fmt","","",192],[11,"to_css","","",192],[0,"image_rendering","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::image_rendering",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[4,"T","style::properties::longhands::image_rendering::computed_value",""],[13,"Auto","","",193],[13,"CrispEdges","","",193],[13,"Pixelated","","",193],[11,"eq","","",193],[11,"ne","","",193],[11,"fmt","","",193],[11,"clone","","",193],[11,"to_css","","",193],[6,"SpecifiedValue","style::properties::longhands::image_rendering",""],[6,"ComputedValue","",""],[11,"to_computed_value","","",194],[0,"transition_duration","style::properties::longhands",""],[5,"parse_one","style::properties::longhands::transition_duration",""],[5,"get_initial_value","",""],[5,"get_initial_single_value","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"T","style::properties::longhands::transition_duration::computed_value",""],[11,"eq","","",195],[11,"ne","","",195],[11,"clone","","",195],[6,"ComputedValue","",""],[11,"to_computed_value","","",195],[11,"to_css","","",195],[0,"transition_timing_function","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::transition_timing_function",""],[5,"get_initial_single_value","",""],[5,"parse_one","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"T","style::properties::longhands::transition_timing_function::computed_value",""],[4,"TransitionTimingFunction","",""],[13,"CubicBezier","","",196],[13,"Steps","","",196],[4,"StartEnd","",""],[13,"Start","","",197],[13,"End","","",197],[11,"eq","","",196],[11,"ne","","",196],[11,"fmt","","",196],[11,"clone","","",196],[11,"to_css","","",196],[11,"eq","","",197],[11,"ne","","",197],[11,"fmt","","",197],[11,"clone","","",197],[11,"to_css","","",197],[11,"eq","","",198],[11,"ne","","",198],[11,"fmt","","",198],[11,"clone","","",198],[11,"to_css","","",198],[6,"ComputedValue","style::properties::longhands::transition_timing_function",""],[11,"to_computed_value","style::properties::longhands::transition_timing_function::computed_value","",198],[0,"transition_property","style::properties::longhands",""],[5,"get_initial_value","style::properties::longhands::transition_property",""],[5,"parse_one","",""],[5,"parse","",""],[5,"parse_specified","",""],[5,"parse_declared","",""],[0,"computed_value","",""],[3,"T","style::properties::longhands::transition_property::computed_value",""],[4,"TransitionProperty","",""],[13,"All","","",199],[13,"Top","","",199],[13,"Right","","",199],[13,"Bottom","","",199],[13,"Left","","",199],[7,"ALL_TRANSITION_PROPERTIES","",""],[11,"eq","","",199],[11,"ne","","",199],[11,"fmt","","",199],[11,"clone","","",199],[11,"to_css","","",199],[11,"eq","","",200],[11,"ne","","",200],[11,"fmt","","",200],[11,"clone","","",200],[11,"to_css","","",200],[6,"ComputedValue","style::properties::longhands::transition_property",""],[11,"to_computed_value","style::properties::longhands::transition_property::computed_value","",200],[0,"transition_delay","style::properties::longhands",""],[5,"parse_specified","style::properties::longhands::transition_delay",""],[5,"parse_declared","",""],[0,"shorthands","style::properties",""],[5,"parse_border","style::properties::shorthands",""],[0,"background","",""],[3,"Longhands","style::properties::shorthands::background",""],[12,"background_color","","",201],[12,"background_position","","",201],[12,"background_repeat","","",201],[12,"background_attachment","","",201],[12,"background_image","","",201],[12,"background_size","","",201],[5,"parse","",""],[0,"margin","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::margin",""],[12,"margin_top","","",202],[12,"margin_right","","",202],[12,"margin_bottom","","",202],[12,"margin_left","","",202],[5,"parse","",""],[0,"padding","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::padding",""],[12,"padding_top","","",203],[12,"padding_right","","",203],[12,"padding_bottom","","",203],[12,"padding_left","","",203],[5,"parse","",""],[0,"border_color","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::border_color",""],[12,"border_top_color","","",204],[12,"border_right_color","","",204],[12,"border_bottom_color","","",204],[12,"border_left_color","","",204],[5,"parse","",""],[0,"border_style","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::border_style",""],[12,"border_top_style","","",205],[12,"border_right_style","","",205],[12,"border_bottom_style","","",205],[12,"border_left_style","","",205],[5,"parse","",""],[0,"border_width","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::border_width",""],[12,"border_top_width","","",206],[12,"border_right_width","","",206],[12,"border_bottom_width","","",206],[12,"border_left_width","","",206],[5,"parse","",""],[0,"border_top","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::border_top",""],[12,"border_top_color","","",207],[12,"border_top_style","","",207],[12,"border_top_width","","",207],[5,"parse","",""],[0,"border_right","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::border_right",""],[12,"border_right_color","","",208],[12,"border_right_style","","",208],[12,"border_right_width","","",208],[5,"parse","",""],[0,"border_bottom","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::border_bottom",""],[12,"border_bottom_color","","",209],[12,"border_bottom_style","","",209],[12,"border_bottom_width","","",209],[5,"parse","",""],[0,"border_left","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::border_left",""],[12,"border_left_color","","",210],[12,"border_left_style","","",210],[12,"border_left_width","","",210],[5,"parse","",""],[0,"border","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::border",""],[12,"border_top_color","","",211],[12,"border_top_style","","",211],[12,"border_top_width","","",211],[12,"border_right_color","","",211],[12,"border_right_style","","",211],[12,"border_right_width","","",211],[12,"border_bottom_color","","",211],[12,"border_bottom_style","","",211],[12,"border_bottom_width","","",211],[12,"border_left_color","","",211],[12,"border_left_style","","",211],[12,"border_left_width","","",211],[5,"parse","",""],[0,"border_radius","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::border_radius",""],[12,"border_top_left_radius","","",212],[12,"border_top_right_radius","","",212],[12,"border_bottom_right_radius","","",212],[12,"border_bottom_left_radius","","",212],[5,"parse","",""],[0,"outline","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::outline",""],[12,"outline_color","","",213],[12,"outline_style","","",213],[12,"outline_width","","",213],[5,"parse","",""],[0,"font","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::font",""],[12,"font_style","","",214],[12,"font_variant","","",214],[12,"font_weight","","",214],[12,"font_size","","",214],[12,"line_height","","",214],[12,"font_family","","",214],[5,"parse","",""],[0,"word_wrap","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::word_wrap",""],[12,"overflow_wrap","","",215],[5,"parse","",""],[0,"list_style","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::list_style",""],[12,"list_style_image","","",216],[12,"list_style_position","","",216],[12,"list_style_type","","",216],[5,"parse","",""],[0,"overflow","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::overflow",""],[12,"overflow_x","","",217],[12,"overflow_y","","",217],[5,"parse","",""],[0,"transition","style::properties::shorthands",""],[3,"Longhands","style::properties::shorthands::transition",""],[12,"transition_property","","",218],[12,"transition_duration","","",218],[12,"transition_timing_function","","",218],[12,"transition_delay","","",218],[5,"parse","",""],[0,"style_structs","style::properties",""],[3,"Margin","style::properties::style_structs",""],[12,"margin_top","","",219],[12,"margin_right","","",219],[12,"margin_bottom","","",219],[12,"margin_left","","",219],[3,"Padding","",""],[12,"padding_top","","",220],[12,"padding_right","","",220],[12,"padding_bottom","","",220],[12,"padding_left","","",220],[3,"Border","",""],[12,"border_top_color","","",221],[12,"border_right_color","","",221],[12,"border_bottom_color","","",221],[12,"border_left_color","","",221],[12,"border_top_style","","",221],[12,"border_right_style","","",221],[12,"border_bottom_style","","",221],[12,"border_left_style","","",221],[12,"border_top_width","","",221],[12,"border_right_width","","",221],[12,"border_bottom_width","","",221],[12,"border_left_width","","",221],[12,"border_top_left_radius","","",221],[12,"border_top_right_radius","","",221],[12,"border_bottom_right_radius","","",221],[12,"border_bottom_left_radius","","",221],[3,"Outline","",""],[12,"outline_color","","",222],[12,"outline_style","","",222],[12,"outline_width","","",222],[12,"outline_offset","","",222],[3,"PositionOffsets","",""],[12,"top","","",223],[12,"right","","",223],[12,"bottom","","",223],[12,"left","","",223],[3,"Box","",""],[12,"display","","",224],[12,"position","","",224],[12,"float","","",224],[12,"clear","","",224],[12,"_servo_display_for_hypothetical_box","","",224],[12,"z_index","","",224],[12,"width","","",224],[12,"height","","",224],[12,"min_width","","",224],[12,"max_width","","",224],[12,"min_height","","",224],[12,"max_height","","",224],[12,"vertical_align","","",224],[12,"overflow_x","","",224],[12,"overflow_y","","",224],[12,"content","","",224],[12,"box_sizing","","",224],[3,"InheritedBox","",""],[12,"direction","","",225],[12,"line_height","","",225],[12,"visibility","","",225],[12,"writing_mode","","",225],[12,"text_orientation","","",225],[3,"List","",""],[12,"list_style_position","","",226],[12,"list_style_type","","",226],[12,"list_style_image","","",226],[12,"quotes","","",226],[3,"Counters","",""],[12,"counter_increment","","",227],[12,"counter_reset","","",227],[3,"Background","",""],[12,"background_color","","",228],[12,"background_image","","",228],[12,"background_position","","",228],[12,"background_repeat","","",228],[12,"background_attachment","","",228],[12,"background_size","","",228],[3,"Color","",""],[12,"color","","",229],[3,"Font","",""],[12,"font_family","","",230],[12,"font_style","","",230],[12,"font_variant","","",230],[12,"font_weight","","",230],[12,"font_size","","",230],[12,"font_stretch","","",230],[3,"InheritedText","",""],[12,"text_align","","",231],[12,"letter_spacing","","",231],[12,"word_spacing","","",231],[12,"text_indent","","",231],[12,"overflow_wrap","","",231],[12,"word_break","","",231],[12,"text_overflow","","",231],[12,"text_justify","","",231],[12,"_servo_text_decorations_in_effect","","",231],[12,"white_space","","",231],[12,"text_transform","","",231],[12,"text_rendering","","",231],[3,"Text","",""],[12,"text_decoration","","",232],[3,"Table","",""],[12,"table_layout","","",233],[3,"InheritedTable","",""],[12,"empty_cells","","",234],[12,"caption_side","","",234],[12,"border_collapse","","",234],[12,"border_spacing","","",234],[3,"Pointing","",""],[12,"cursor","","",235],[12,"pointer_events","","",235],[3,"Effects","",""],[12,"opacity","","",236],[12,"box_shadow","","",236],[12,"clip","","",236],[12,"text_shadow","","",236],[12,"filter","","",236],[12,"transform","","",236],[12,"transform_origin","","",236],[12,"mix_blend_mode","","",236],[12,"image_rendering","","",236],[3,"Animation","",""],[12,"transition_duration","","",237],[12,"transition_timing_function","","",237],[12,"transition_property","","",237],[12,"transition_delay","","",237],[11,"clone","","",219],[11,"eq","","",219],[11,"ne","","",219],[11,"clone","","",220],[11,"eq","","",220],[11,"ne","","",220],[11,"clone","","",221],[11,"eq","","",221],[11,"ne","","",221],[11,"clone","","",222],[11,"eq","","",222],[11,"ne","","",222],[11,"clone","","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"clone","","",224],[11,"eq","","",224],[11,"ne","","",224],[11,"clone","","",225],[11,"eq","","",225],[11,"ne","","",225],[11,"clone","","",226],[11,"eq","","",226],[11,"ne","","",226],[11,"clone","","",227],[11,"eq","","",227],[11,"ne","","",227],[11,"clone","","",228],[11,"eq","","",228],[11,"ne","","",228],[11,"clone","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"clone","","",230],[11,"eq","","",230],[11,"ne","","",230],[11,"clone","","",231],[11,"eq","","",231],[11,"ne","","",231],[11,"clone","","",232],[11,"eq","","",232],[11,"ne","","",232],[11,"clone","","",233],[11,"eq","","",233],[11,"ne","","",233],[11,"clone","","",234],[11,"eq","","",234],[11,"ne","","",234],[11,"clone","","",235],[11,"eq","","",235],[11,"ne","","",235],[11,"clone","","",236],[11,"eq","","",236],[11,"ne","","",236],[11,"clone","","",237],[11,"eq","","",237],[11,"ne","","",237],[11,"eq","style::properties","",52],[11,"ne","","",52],[11,"fmt","","",52],[11,"fmt","","",54],[11,"eq","","",54],[11,"ne","","",54],[11,"parse","","",54],[11,"fmt","","",55],[11,"eq","","",55],[11,"ne","","",55],[11,"clone","","",55],[11,"specified_value","","",55],[11,"eq","","",56],[11,"ne","","",56],[11,"clone","","",56],[11,"eq","","",57],[11,"ne","","",57],[11,"name","","",56],[11,"value","","",56],[11,"matches","","",56],[11,"parse","","",56],[11,"fmt","","",56],[11,"clone","","",53],[11,"resolve_color","","Resolves the currentColor keyword.\nAny color value form computed values (except for the 'color' property itself)\nshould go through this method.",53],[11,"content_inline_size","","",53],[11,"content_block_size","","",53],[11,"min_inline_size","","",53],[11,"min_block_size","","",53],[11,"max_inline_size","","",53],[11,"max_block_size","","",53],[11,"logical_padding","","",53],[11,"logical_border_width","","",53],[11,"logical_margin","","",53],[11,"logical_position","","",53],[11,"get_font_arc","","",53],[11,"get_margin","","",53],[11,"mutate_margin","","",53],[11,"get_padding","","",53],[11,"mutate_padding","","",53],[11,"get_border","","",53],[11,"mutate_border","","",53],[11,"get_outline","","",53],[11,"mutate_outline","","",53],[11,"get_positionoffsets","","",53],[11,"mutate_positionoffsets","","",53],[11,"get_box","","",53],[11,"mutate_box","","",53],[11,"get_inheritedbox","","",53],[11,"mutate_inheritedbox","","",53],[11,"get_list","","",53],[11,"mutate_list","","",53],[11,"get_counters","","",53],[11,"mutate_counters","","",53],[11,"get_background","","",53],[11,"mutate_background","","",53],[11,"get_color","","",53],[11,"mutate_color","","",53],[11,"get_font","","",53],[11,"mutate_font","","",53],[11,"get_inheritedtext","","",53],[11,"mutate_inheritedtext","","",53],[11,"get_text","","",53],[11,"mutate_text","","",53],[11,"get_table","","",53],[11,"mutate_table","","",53],[11,"get_inheritedtable","","",53],[11,"mutate_inheritedtable","","",53],[11,"get_pointing","","",53],[11,"mutate_pointing","","",53],[11,"get_effects","","",53],[11,"mutate_effects","","",53],[11,"get_animation","","",53],[11,"mutate_animation","","",53],[0,"node","style","Traits that nodes must implement. Breaks the otherwise-cyclic dependency between layout and\nstyle."],[8,"TNode","style::node",""],[16,"Element","style::node::TNode",""],[10,"parent_node","style::node","",238],[10,"first_child","","",238],[10,"last_child","","",238],[10,"prev_sibling","","",238],[10,"next_sibling","","",238],[10,"is_document","","",238],[10,"is_element","","",238],[10,"as_element","","",238],[10,"match_attr","","",238],[10,"is_html_element_in_html_document","","",238],[10,"has_changed","","",238],[10,"set_changed","","",238],[10,"is_dirty","","",238],[10,"set_dirty","","",238],[10,"has_dirty_siblings","","",238],[10,"set_dirty_siblings","","",238],[10,"has_dirty_descendants","","",238],[10,"set_dirty_descendants","","",238],[8,"TElement","",""],[10,"get_attr","","",239],[10,"get_attrs","","",239],[10,"get_link","","",239],[10,"get_local_name","","",239],[10,"get_namespace","","",239],[10,"get_hover_state","","",239],[10,"get_id","","",239],[10,"get_disabled_state","","",239],[10,"get_enabled_state","","",239],[10,"get_checked_state","","",239],[10,"get_indeterminate_state","","",239],[10,"has_class","","",239],[10,"has_nonzero_border","","",239],[10,"each_class","","",239],[8,"TElementAttributes","",""],[10,"get_length_attribute","","",240],[10,"get_integer_attribute","","",240],[10,"get_unsigned_integer_attribute","","",240],[10,"get_simple_color_attribute","","",240],[0,"media_queries","style",""],[3,"MediaQueryList","style::media_queries",""],[3,"MediaQuery","",""],[3,"Device","",""],[12,"media_type","","",241],[12,"viewport_size","","",241],[4,"Range","",""],[13,"Min","","",242],[13,"Max","","",242],[4,"Expression","",""],[13,"Width","","",243],[4,"Qualifier","",""],[13,"Only","","",244],[13,"Not","","",244],[4,"MediaQueryType","",""],[13,"All","","",245],[13,"MediaType","","",245],[4,"MediaType","",""],[13,"Screen","","",246],[13,"Print","","",246],[13,"Unknown","","",246],[5,"parse_media_query_list","",""],[11,"eq","","",247],[11,"ne","","",247],[11,"fmt","","",247],[11,"fmt","","",242],[11,"eq","","",242],[11,"ne","","",242],[11,"fmt","","",243],[11,"eq","","",243],[11,"ne","","",243],[11,"fmt","","",244],[11,"eq","","",244],[11,"ne","","",244],[11,"eq","","",248],[11,"ne","","",248],[11,"fmt","","",248],[11,"new","","",248],[11,"fmt","","",245],[11,"eq","","",245],[11,"ne","","",245],[11,"fmt","","",246],[11,"eq","","",246],[11,"ne","","",246],[11,"fmt","","",241],[11,"new","","",241],[11,"evaluate","","",247],[0,"font_face","style",""],[3,"UrlSource","style::font_face",""],[12,"url","","",249],[12,"format_hints","","",249],[3,"FontFaceRule","",""],[12,"family","","",250],[12,"sources","","",250],[4,"Source","",""],[13,"Url","","",251],[13,"Local","","",251],[5,"iter_font_face_rules_inner","",""],[5,"parse_font_face_block","",""],[11,"eq","","",251],[11,"ne","","",251],[11,"fmt","","",251],[11,"clone","","",251],[11,"eq","","",249],[11,"ne","","",249],[11,"fmt","","",249],[11,"clone","","",249],[11,"eq","","",250],[11,"ne","","",250],[11,"fmt","","",250],[0,"legacy","style","Legacy presentational attributes defined in the HTML5 specification: `<td width>`,\n`<input size>`, and so forth."],[4,"LengthAttribute","style::legacy","Legacy presentational attributes that take a length as defined in HTML5 § 2.4.4.4."],[13,"Width","","`<td width>`",252],[4,"IntegerAttribute","","Legacy presentational attributes that take an integer as defined in HTML5 § 2.4.4.2."],[13,"Size","","`<input size>`",253],[13,"Cols","","",253],[13,"Rows","","",253],[4,"UnsignedIntegerAttribute","","Legacy presentational attributes that take a nonnegative integer as defined in HTML5 § 2.4.4.2."],[13,"Border","","`<td border>`",254],[13,"CellSpacing","","`<table cellspacing>`",254],[13,"ColSpan","","`<td colspan>`",254],[4,"SimpleColorAttribute","","Legacy presentational attributes that take a simple color as defined in HTML5 § 2.4.6."],[13,"BgColor","","`<body bgcolor>`",255],[5,"from_declaration","","A convenience function to create a declaration block from a single declaration. This is\nprimarily used in `synthesize_rules_for_legacy_attributes`."],[8,"PresentationalHintSynthesis","","Extension methods for `Stylist` that cause rules to be synthesized for legacy attributes."],[10,"synthesize_presentational_hints_for_legacy_attributes","","Synthesizes rules from various HTML attributes (mostly legacy junk from HTML4) that confer\n*presentational hints* as defined in the HTML5 specification. This handles stuff like\n`<body bgcolor>`, `<input size>`, `<td width>`, and so forth.",256],[10,"synthesize_presentational_hint_for_legacy_background_color_attribute","","Synthesizes rules for the legacy `bgcolor` attribute.",256],[10,"synthesize_presentational_hint_for_legacy_border_attribute","","Synthesizes rules for the legacy `border` attribute.",256],[11,"eq","","",252],[11,"ne","","",252],[11,"eq","","",253],[11,"ne","","",253],[11,"eq","","",254],[11,"ne","","",254],[11,"eq","","",255],[11,"ne","","",255],[11,"synthesize_presentational_hints_for_legacy_attributes","style::selector_matching","",6],[11,"synthesize_presentational_hint_for_legacy_background_color_attribute","","",6],[11,"synthesize_presentational_hint_for_legacy_border_attribute","","",6],[0,"animation","style",""],[3,"PropertyAnimation","style::animation",""],[8,"GetMod","","Accesses an element of an array, \"wrapping around\" using modular arithmetic. This is needed\nto handle values of differing lengths according to CSS-TRANSITIONS § 2."],[16,"Item","style::animation::GetMod",""],[10,"get_mod","style::animation","",257],[11,"fmt","","",258],[11,"clone","","",258],[11,"from_transition","","Creates a new property animation for the given transition index and old and new styles.\nAny number of animations may be returned, from zero (if the property did not animate) to\none (for a single transition property) to arbitrarily many (for `all`).",258],[11,"update","","",258],[6,"Item","",""],[11,"get_mod","collections::vec","",88],[0,"computed_values","style",""],[14,"css_properties_accessors!","",""]],"paths":[[3,"Stylesheet"],[3,"MediaRule"],[3,"StyleRule"],[4,"Origin"],[4,"CSSRule"],[3,"ParserContext"],[3,"Stylist"],[3,"DeclarationListParser"],[3,"RuleListParser"],[4,"Token"],[3,"NumericValue"],[3,"PercentageValue"],[3,"Tokenizer"],[3,"SourcePosition"],[3,"SourceLocation"],[3,"SourcePosition"],[4,"MaybeOwned"],[3,"Parser"],[4,"BlockType"],[3,"Delimiters"],[3,"RGBA"],[4,"T"],[3,"CssStringWriter"],[3,"CSSColor"],[3,"CSSRGBA"],[3,"LengthAndPercentage"],[3,"LinearGradient"],[3,"ColorStop"],[4,"FontRelativeLength"],[4,"ViewportPercentageLength"],[4,"Length"],[4,"LengthOrPercentage"],[4,"LengthOrPercentageOrAuto"],[4,"LengthOrPercentageOrNone"],[4,"PositionComponent"],[4,"Image"],[4,"AngleOrCorner"],[4,"HorizontalDirection"],[4,"VerticalDirection"],[4,"BorderStyle"],[3,"CharacterWidth"],[3,"Angle"],[3,"Time"],[3,"Context"],[3,"LengthAndPercentage"],[3,"LinearGradient"],[3,"ColorStop"],[4,"LengthOrPercentage"],[4,"LengthOrPercentageOrAuto"],[4,"LengthOrPercentageOrNone"],[4,"Image"],[8,"ToComputedValue"],[3,"PropertyDeclarationBlock"],[3,"ComputedValues"],[4,"CSSWideKeyword"],[4,"DeclaredValue"],[4,"PropertyDeclaration"],[4,"PropertyDeclarationParseResult"],[3,"SpecifiedValue"],[3,"SpecifiedValue"],[3,"SpecifiedValue"],[3,"SpecifiedValue"],[3,"T"],[3,"Bezier"],[3,"HashCache"],[3,"LRUCache"],[3,"SimpleHashCache"],[4,"Cursor"],[4,"Stolen"],[3,"BufferPool"],[3,"Worker"],[3,"Stealer"],[3,"Deque"],[3,"Buffer"],[3,"FnvHasher"],[4,"ScreenPx"],[4,"ViewportPx"],[4,"PagePx"],[3,"WritingMode"],[3,"DebugWritingMode"],[3,"LogicalSize"],[3,"LogicalPoint"],[3,"LogicalMargin"],[3,"LogicalRect"],[3,"Box"],[3,"String"],[4,"Option"],[3,"Arc"],[3,"Vec"],[3,"LinkedList"],[3,"Node"],[3,"LinkedList2"],[3,"Opts"],[3,"PersistentList"],[3,"PersistentListIterator"],[3,"Range"],[3,"EachIndex"],[3,"LowercaseString"],[3,"TaskPool"],[3,"TaskState"],[3,"DefaultComparator"],[3,"WorkerProxy"],[3,"WorkQueue"],[3,"SmallVecIterator"],[3,"SmallVecMutIterator"],[3,"SmallVecMoveIterator"],[3,"SmallVec1"],[3,"SmallVec2"],[3,"SmallVec4"],[3,"SmallVec8"],[3,"SmallVec16"],[3,"SmallVec24"],[3,"SmallVec32"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[3,"SpecifiedValue"],[4,"SpecifiedValue"],[4,"T"],[4,"SpecifiedValue"],[4,"T"],[4,"T"],[3,"T"],[4,"T"],[4,"ContentItem"],[4,"T"],[4,"T"],[4,"T"],[4,"SpecifiedValue"],[3,"T"],[3,"T"],[3,"SpecifiedValue"],[3,"SpecifiedValue"],[3,"T"],[4,"T"],[4,"T"],[3,"SpecifiedExplicitSize"],[4,"SpecifiedValue"],[3,"ExplicitSize"],[4,"T"],[6,"SpecifiedValue"],[4,"FontFamily"],[4,"T"],[4,"T"],[4,"SpecifiedValue"],[4,"T"],[3,"SpecifiedValue"],[4,"T"],[4,"T"],[4,"SpecifiedValue"],[4,"SpecifiedValue"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[3,"SpecifiedValue"],[3,"SpecifiedValue"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[3,"SpecifiedValue"],[3,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[4,"T"],[3,"SpecifiedValue"],[3,"SpecifiedBoxShadow"],[3,"BoxShadow"],[6,"SpecifiedValue"],[3,"SpecifiedClipRect"],[3,"ClipRect"],[6,"SpecifiedValue"],[3,"SpecifiedTextShadow"],[3,"TextShadow"],[3,"T"],[3,"SpecifiedValue"],[3,"T"],[4,"Filter"],[3,"ComputedMatrix"],[3,"SpecifiedMatrix"],[3,"SpecifiedValue"],[3,"T"],[3,"SpecifiedValue"],[4,"T"],[4,"T"],[6,"SpecifiedValue"],[3,"T"],[4,"TransitionTimingFunction"],[4,"StartEnd"],[3,"T"],[4,"TransitionProperty"],[3,"T"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Longhands"],[3,"Margin"],[3,"Padding"],[3,"Border"],[3,"Outline"],[3,"PositionOffsets"],[3,"Box"],[3,"InheritedBox"],[3,"List"],[3,"Counters"],[3,"Background"],[3,"Color"],[3,"Font"],[3,"InheritedText"],[3,"Text"],[3,"Table"],[3,"InheritedTable"],[3,"Pointing"],[3,"Effects"],[3,"Animation"],[8,"TNode"],[8,"TElement"],[8,"TElementAttributes"],[3,"Device"],[4,"Range"],[4,"Expression"],[4,"Qualifier"],[4,"MediaQueryType"],[4,"MediaType"],[3,"MediaQueryList"],[3,"MediaQuery"],[3,"UrlSource"],[3,"FontFaceRule"],[4,"Source"],[4,"LengthAttribute"],[4,"IntegerAttribute"],[4,"UnsignedIntegerAttribute"],[4,"SimpleColorAttribute"],[8,"PresentationalHintSynthesis"],[8,"GetMod"],[3,"PropertyAnimation"]]};
searchIndex['net'] = {"items":[[0,"","net",""],[0,"image","","Image handling."],[0,"base","net::image",""],[5,"test_image_bin","net::image::base",""],[5,"load_from_memory","",""],[6,"Image","",""],[0,"holder","net::image",""],[3,"ImageHolder","net::image::holder","A struct to store image data. The image will be loaded once the first time it is requested,\nand an Arc will be stored.  Clones of this Arc are given out on demand."],[11,"clone","","",0],[11,"new","","",0],[11,"size","","This version doesn't perform any computation, but may be stale w.r.t. newly-available image\ndata that determines size.",0],[11,"get_size","","Query and update the current image size.",0],[11,"get_image_if_present","","",0],[11,"get_image","","",0],[11,"url","","",0],[0,"about_loader","net",""],[5,"factory","net::about_loader",""],[0,"file_loader","net",""],[5,"factory","net::file_loader",""],[0,"http_loader","net",""],[5,"factory","net::http_loader",""],[0,"data_loader","net",""],[5,"factory","net::data_loader",""],[0,"cookie","net","Implementation of cookie creation and matching as specified by\nhttp://tools.ietf.org/html/rfc6265"],[3,"Cookie","net::cookie","A stored cookie that wraps the definition in cookie-rs. This is used to implement\nvarious behaviours defined in the spec that rely on an associated request URL,\nwhich cookie-rs and hyper's header parsing do not support."],[12,"cookie","","",1],[12,"host_only","","",1],[12,"persistent","","",1],[12,"creation_time","","",1],[12,"last_access","","",1],[12,"expiry_time","","",1],[11,"fmt","","",1],[11,"clone","","",1],[11,"new_wrapped","","http://tools.ietf.org/html/rfc6265#section-5.3",1],[11,"touch","","",1],[11,"path_match","","",1],[11,"domain_match","","",1],[11,"appropriate_for_url","","",1],[0,"cookie_storage","net","Implementation of cookie storage as specified in\nhttp://tools.ietf.org/html/rfc6265"],[3,"CookieStorage","net::cookie_storage",""],[4,"CookieSource","","The creator of a given cookie"],[13,"HTTP","","An HTTP API",2],[13,"NonHTTP","","A non-HTTP API",2],[11,"eq","","",2],[11,"ne","","",2],[11,"new","","",3],[11,"remove","","",3],[11,"push","","",3],[11,"cookies_for_url","","",3],[0,"image_cache_task","net",""],[3,"ImageCacheTask","net::image_cache_task",""],[4,"Msg","",""],[13,"Prefetch","","Tell the cache that we may need a particular image soon. Must be posted\nbefore Decode",4],[13,"Decode","","Tell the cache to decode an image. Must be posted before GetImage/WaitForImage",4],[13,"GetImage","","Request an Image object for a URL. If the image is not is not immediately\navailable then ImageNotReady is returned.",4],[13,"WaitForImage","","Wait for an image to become available (or fail to load).",4],[13,"Exit","","Clients must wait for a response before shutting down the ResourceTask",4],[13,"StorePrefetchedImageData","","Used by the prefetch tasks to post back image binaries",4],[13,"StoreImage","","Used by the decoder tasks to post decoded images back to the cache",4],[13,"WaitForStore","","For testing",4],[13,"WaitForStorePrefetched","","For testing",4],[4,"ImageResponseMsg","",""],[13,"ImageReady","","",5],[13,"ImageNotReady","","",5],[13,"ImageFailed","","",5],[4,"LoadPlaceholder","",""],[13,"Preload","","",6],[13,"Ignore","","",6],[5,"spawn_listener","",""],[8,"ImageCacheTaskClient","",""],[10,"exit","","",7],[11,"clone","","",5],[11,"eq","","",5],[11,"clone","","",8],[11,"new","","",8],[11,"new_sync","","",8],[11,"exit","","",8],[11,"send","","",8],[0,"local_image_cache","net","An adapter for ImageCacheTask that does local caching to avoid\nextra message traffic, it also avoids waiting on the same image\nmultiple times and thus triggering reflows multiple times."],[3,"LocalImageCache","net::local_image_cache",""],[8,"ImageResponder","",""],[10,"respond","","",9],[11,"new","","",10],[11,"next_round","","The local cache will only do a single remote request for a given\nURL in each 'round'. Layout should call this each time it begins",10],[11,"prefetch","","",10],[11,"decode","","",10],[11,"get_image","","",10],[0,"pub_domains","net",""],[7,"PUB_DOMAINS","net::pub_domains",""],[0,"resource_task","net","A task that takes a URL and streams back the binary data."],[3,"LoadData","net::resource_task",""],[12,"url","","",11],[12,"method","","",11],[12,"headers","","Headers that will apply to the initial request only",11],[12,"preserved_headers","","Headers that will apply to the initial request and any redirects",11],[12,"data","","",11],[12,"cors","","",11],[12,"consumer","","",11],[3,"ResourceCORSData","",""],[12,"preflight","","CORS Preflight flag",12],[12,"origin","","Origin of CORS Request",12],[3,"Metadata","","Metadata about a loaded resource, such as is obtained from HTTP headers."],[12,"final_url","","Final URL after redirects.",13],[12,"content_type","","MIME type / subtype.",13],[12,"charset","","Character set.",13],[12,"headers","","Headers",13],[12,"status","","HTTP Status",13],[3,"LoadResponse","","Message sent in response to `Load`.  Contains metadata, and a port\nfor receiving the data."],[12,"metadata","","Metadata, such as from HTTP headers.",14],[12,"progress_port","","Port for reading data.",14],[3,"TargetedLoadResponse","","A LoadResponse directed at a particular consumer"],[12,"load_response","","",15],[12,"consumer","","",15],[3,"ResponseSenders","",""],[12,"immediate_consumer","","",16],[12,"eventual_consumer","","",16],[3,"ProgressMsgPortIterator","","Iterator that reads chunks of bytes from a ProgressMsg port"],[4,"ControlMsg","",""],[13,"Load","","Request the data associated with a particular URL",17],[13,"SetCookiesForUrl","","Store a set of cookies for a given originating URL",17],[13,"GetCookiesForUrl","","Retrieve the stored cookies for a given URL",17],[13,"Exit","","",17],[4,"ProgressMsg","","Messages sent in response to a `Load` message"],[13,"Payload","","Binary data - there may be multiple of these",18],[13,"Done","","Indicates loading is complete, either successfully or not",18],[5,"global_init","",""],[5,"start_sending","","For use by loaders in responding to a Load message."],[5,"start_sending_opt","","For use by loaders in responding to a Load message."],[5,"load_whole_resource","","Convenience function for synchronously loading a whole resource."],[5,"new_resource_task","","Create a ResourceTask"],[5,"parse_hostsfile","",""],[5,"replace_hosts","",""],[5,"load_bytes_iter","","Load a URL asynchronously and iterate over chunks of bytes from the response."],[6,"ResourceTask","","Handle to a resource task"],[11,"clone","","",11],[11,"new","","",11],[11,"clone","","",12],[11,"clone","","",13],[11,"default","","Metadata with defaults for everything optional.",13],[11,"set_content_type","","Extract the parts of a Mime that we care about.",13],[11,"fmt","","",18],[11,"eq","","",18],[11,"ne","","",18],[6,"Item","",""],[11,"next","","",19],[0,"storage_task","net",""],[4,"StorageType","net::storage_task",""],[13,"Session","","",20],[13,"Local","","",20],[4,"StorageTaskMsg","","Request operations on the storage data associated with a particular url"],[13,"Length","","gets the number of key/value pairs present in the associated storage data",21],[13,"Key","","gets the name of the key at the specified index in the associated storage data",21],[13,"GetItem","","gets the value associated with the given key in the associated storage data",21],[13,"SetItem","","sets the value of the given key in the associated storage data\nTODO throw QuotaExceededError in case of error",21],[13,"RemoveItem","","removes the key/value pair for the given key in the associated storage data",21],[13,"Clear","","clears the associated storage data by removing all the key/value pairs",21],[13,"Exit","","shut down this task",21],[6,"StorageTask","","Handle to a storage task"],[8,"StorageTaskFactory","",""],[10,"new","","",22],[11,"new","","Create a StorageTask",23],[0,"fetch","net","An implementation of the [Fetch spec](http://fetch.spec.whatwg.org/)"],[0,"request","net::fetch",""],[3,"Request","net::fetch::request","A [Request](http://fetch.spec.whatwg.org/#requests) as defined by the Fetch spec"],[12,"method","","",24],[12,"url","","",24],[12,"headers","","",24],[12,"unsafe_request","","",24],[12,"body","","",24],[12,"preserve_content_codings","","",24],[12,"skip_service_worker","","",24],[12,"context","","",24],[12,"context_frame_type","","",24],[12,"origin","","",24],[12,"force_origin_header","","",24],[12,"same_origin_data","","",24],[12,"referer","","",24],[12,"authentication","","",24],[12,"sync","","",24],[12,"mode","","",24],[12,"credentials_mode","","",24],[12,"use_url_credentials","","",24],[12,"manual_redirect","","",24],[12,"redirect_count","","",24],[12,"response_tainting","","",24],[12,"cache","","",24],[4,"Context","","A [request context](http://fetch.spec.whatwg.org/#concept-request-context)"],[13,"Audio","","",25],[13,"Beacon","","",25],[13,"CSPreport","","",25],[13,"Download","","",25],[13,"Embed","","",25],[13,"Eventsource","","",25],[13,"Favicon","","",25],[13,"Fetch","","",25],[13,"Font","","",25],[13,"Form","","",25],[13,"Frame","","",25],[13,"Hyperlink","","",25],[13,"IFrame","","",25],[13,"Image","","",25],[13,"ImageSet","","",25],[13,"Import","","",25],[13,"Internal","","",25],[13,"Location","","",25],[13,"Manifest","","",25],[13,"Object","","",25],[13,"Ping","","",25],[13,"Plugin","","",25],[13,"Prefetch","","",25],[13,"Script","","",25],[13,"ServiceWorker","","",25],[13,"SharedWorker","","",25],[13,"Subresource","","",25],[13,"Style","","",25],[13,"Track","","",25],[13,"Video","","",25],[13,"Worker","","",25],[13,"XMLHttpRequest","","",25],[13,"XSLT","","",25],[4,"ContextFrameType","","A [request context frame type](http://fetch.spec.whatwg.org/#concept-request-context-frame-type)"],[13,"Auxiliary","","",26],[13,"TopLevel","","",26],[13,"Nested","","",26],[13,"ContextNone","","",26],[4,"Referer","","A [referer](http://fetch.spec.whatwg.org/#concept-request-referrer)"],[13,"RefererNone","","",27],[13,"Client","","",27],[13,"RefererUrl","","",27],[4,"RequestMode","","A [request mode](http://fetch.spec.whatwg.org/#concept-request-mode)"],[13,"SameOrigin","","",28],[13,"NoCORS","","",28],[13,"CORSMode","","",28],[13,"ForcedPreflightMode","","",28],[4,"CredentialsMode","","Request [credentials mode](http://fetch.spec.whatwg.org/#concept-request-credentials-mode)"],[13,"Omit","","",29],[13,"CredentialsSameOrigin","","",29],[13,"Include","","",29],[4,"ResponseTainting","","[Response tainting](http://fetch.spec.whatwg.org/#concept-request-response-tainting)"],[13,"Basic","","",30],[13,"CORSTainting","","",30],[13,"Opaque","","",30],[11,"new","","",24],[11,"basic_fetch","","[Basic fetch](http://fetch.spec.whatwg.org#basic-fetch)",24],[11,"http_fetch","","",24],[0,"response","net::fetch",""],[3,"ResponseLoader","net::fetch::response",""],[3,"Response","","A [Response](http://fetch.spec.whatwg.org/#concept-response) as defined by the Fetch spec"],[12,"response_type","","",31],[12,"termination_reason","","",31],[12,"url","","",31],[12,"status","","`None` can be considered a StatusCode of `0`.",31],[12,"headers","","",31],[12,"body","","",31],[12,"internal_response","","[Internal response](http://fetch.spec.whatwg.org/#concept-internal-response), only used if the Response is a filtered response",31],[4,"ResponseType","","[Response type](http://fetch.spec.whatwg.org/#concept-response-type)"],[13,"Basic","","",32],[13,"CORS","","",32],[13,"Default","","",32],[13,"Error","","",32],[13,"Opaque","","",32],[4,"TerminationReason","","[Response termination reason](http://fetch.spec.whatwg.org/#concept-response-termination-reason)"],[13,"EndUserAbort","","",33],[13,"Fatal","","",33],[13,"Timeout","","",33],[4,"ResponseBody","","The response body can still be pushed to after fetch\nThis provides a way to store unfinished response bodies"],[13,"Empty","","",34],[13,"Receiving","","",34],[13,"Done","","",34],[4,"ResponseMsg","",""],[13,"Chunk","","",35],[13,"Finished","","",35],[13,"Errored","","",35],[11,"eq","","",32],[11,"ne","","",32],[11,"clone","","",32],[11,"clone","","",33],[11,"clone","","",34],[11,"clone","","",31],[11,"new","","",31],[11,"network_error","","",31],[11,"is_network_error","","",31],[11,"to_filtered","","Convert to a filtered response, of type `filter_type`.\nDo not use with type Error or Default",31],[0,"cors_cache","net::fetch","An implementation of the [CORS preflight cache](http://fetch.spec.whatwg.org/#cors-preflight-cache)\nFor now this library is XHR-specific.\nFor stuff involving `<img>`, `<iframe>`, `<form>`, etc please check what\nthe request mode should be and compare with the fetch spec\nThis library will eventually become the core of the Fetch crate\nwith CORSRequest being expanded into FetchRequest (etc)"],[3,"CORSCacheEntry","net::fetch::cors_cache","An entry in the CORS cache"],[12,"origin","","",36],[12,"url","","",36],[12,"max_age","","",36],[12,"credentials","","",36],[12,"header_or_method","","",36],[3,"CacheRequestDetails","","Properties of Request required to cache match."],[12,"origin","","",37],[12,"destination","","",37],[12,"credentials","","",37],[3,"BasicCORSCache","","A simple, vector-based CORS Cache"],[3,"CORSCacheTask","","A simple task-based CORS Cache that can be sent messages"],[4,"HeaderOrMethod","","Union type for CORS cache entries"],[13,"HeaderData","","",38],[13,"MethodData","","",38],[4,"CORSCacheTaskMsg","","Various messages that can be sent to a CORSCacheTask"],[13,"Clear","","",39],[13,"Cleanup","","",39],[13,"MatchHeader","","",39],[13,"MatchHeaderUpdate","","",39],[13,"MatchMethod","","",39],[13,"MatchMethodUpdate","","",39],[13,"Insert","","",39],[13,"ExitMsg","","",39],[6,"CORSCacheSender","","A Sender to a CORSCacheTask"],[8,"CORSCache","","Trait for a generic CORS Cache"],[10,"clear","","[Clear the cache](http://fetch.spec.whatwg.org/#concept-cache-clear)",40],[10,"cleanup","","Remove old entries",40],[10,"match_header","","Returns true if an entry with a [matching header](http://fetch.spec.whatwg.org/#concept-cache-match-header) is found",40],[10,"match_header_and_update","","Updates max age if an entry for a [matching header](http://fetch.spec.whatwg.org/#concept-cache-match-header) is found.",40],[10,"match_method","","Returns true if an entry with a [matching method](http://fetch.spec.whatwg.org/#concept-cache-match-method) is found",40],[10,"match_method_and_update","","Updates max age if an entry for [a matching method](http://fetch.spec.whatwg.org/#concept-cache-match-method) is found.",40],[10,"insert","","Insert an entry",40],[11,"clone","","",38],[11,"clone","","",36],[11,"clone","","",41],[11,"clear","","http://fetch.spec.whatwg.org/#concept-cache-clear",41],[11,"cleanup","","",41],[11,"match_header","","",41],[11,"match_header_and_update","","",41],[11,"match_method","","",41],[11,"match_method_and_update","","",41],[11,"insert","","",41],[11,"clear","","",42],[11,"cleanup","","",42],[11,"match_header","","",42],[11,"match_header_and_update","","",42],[11,"match_method","","",42],[11,"match_method_and_update","","",42],[11,"insert","","",42],[11,"new","","",43],[11,"get_sender","","Provides a sender to the cache task",43],[11,"run","","Runs the cache task\nThis blocks the current task, so it is advised\nto spawn a new task for this\nSend ExitMsg to the associated Sender to exit",43]],"paths":[[3,"ImageHolder"],[3,"Cookie"],[4,"CookieSource"],[3,"CookieStorage"],[4,"Msg"],[4,"ImageResponseMsg"],[4,"LoadPlaceholder"],[8,"ImageCacheTaskClient"],[3,"ImageCacheTask"],[8,"ImageResponder"],[3,"LocalImageCache"],[3,"LoadData"],[3,"ResourceCORSData"],[3,"Metadata"],[3,"LoadResponse"],[3,"TargetedLoadResponse"],[3,"ResponseSenders"],[4,"ControlMsg"],[4,"ProgressMsg"],[3,"ProgressMsgPortIterator"],[4,"StorageType"],[4,"StorageTaskMsg"],[8,"StorageTaskFactory"],[6,"StorageTask"],[3,"Request"],[4,"Context"],[4,"ContextFrameType"],[4,"Referer"],[4,"RequestMode"],[4,"CredentialsMode"],[4,"ResponseTainting"],[3,"Response"],[4,"ResponseType"],[4,"TerminationReason"],[4,"ResponseBody"],[4,"ResponseMsg"],[3,"CORSCacheEntry"],[3,"CacheRequestDetails"],[4,"HeaderOrMethod"],[4,"CORSCacheTaskMsg"],[8,"CORSCache"],[3,"BasicCORSCache"],[6,"CORSCacheSender"],[3,"CORSCacheTask"]]};
searchIndex['profile'] = {"items":[[0,"","profile",""],[0,"mem","","Memory profiling functions."],[3,"ProfilerChan","profile::mem",""],[3,"Report","","A single memory-related measurement."],[12,"path","","The identifying path for this report.",0],[12,"size","","The size, in bytes.",0],[3,"ReportsChan","","A channel through which memory reports can be sent."],[3,"Profiler","",""],[12,"port","","The port through which messages are received.",1],[4,"ProfilerMsg","","Messages that can be sent to the memory profiler thread."],[13,"RegisterReporter","","Register a Reporter with the memory profiler. The String is only used to identify the\nreporter so it can be unregistered later. The String must be distinct from that used by any\nother registered reporter otherwise a panic will occur.",2],[13,"UnregisterReporter","","Unregister a Reporter with the memory profiler. The String must match the name given when\nthe reporter was registered. If the String does not match the name of a registered reporter\na panic will occur.",2],[13,"Print","","Triggers printing of the memory profiling metrics.",2],[13,"Exit","","Tells the memory profiler to shut down.",2],[8,"Reporter","","A memory reporter is capable of measuring some data structure of interest. Because it needs\nto be passed to and registered with the Profiler, it's typically a \"small\" (i.e. easily\ncloneable) value that provides access to a \"large\" data structure, e.g. a channel that can\ninject a request for measurements into the event queue associated with the \"large\" data\nstructure."],[10,"collect_reports","","Collect one or more memory reports. Returns true on success, and false on failure.",3],[11,"clone","","",4],[11,"send","","",4],[11,"clone","","",5],[11,"send","","",5],[11,"create","","",1],[11,"new","","",1],[11,"start","","",1],[0,"time","profile","Timing functions."],[3,"ProfilerChan","profile::time",""],[3,"TimerMetadata","",""],[3,"Profiler","",""],[12,"port","","",6],[12,"last_msg","","",6],[4,"ProfilerMsg","",""],[13,"Time","","Normal message used for reporting time",7],[13,"Print","","Message used to force print the profiling metrics",7],[13,"Exit","","Tells the profiler to shut down.",7],[4,"ProfilerCategory","",""],[13,"Compositing","","",8],[13,"LayoutPerform","","",8],[13,"LayoutStyleRecalc","","",8],[13,"LayoutRestyleDamagePropagation","","",8],[13,"LayoutNonIncrementalReset","","",8],[13,"LayoutSelectorMatch","","",8],[13,"LayoutTreeBuilder","","",8],[13,"LayoutDamagePropagate","","",8],[13,"LayoutGeneratedContent","","",8],[13,"LayoutMain","","",8],[13,"LayoutParallelWarmup","","",8],[13,"LayoutShaping","","",8],[13,"LayoutDispListBuild","","",8],[13,"PaintingPerTile","","",8],[13,"PaintingPrepBuff","","",8],[13,"Painting","","",8],[13,"ImageDecoding","","",8],[4,"TimerMetadataFrameType","",""],[13,"RootWindow","","",9],[13,"IFrame","","",9],[4,"TimerMetadataReflowType","",""],[13,"Incremental","","",10],[13,"FirstReflow","","",10],[5,"profile","",""],[5,"time","",""],[6,"ProfilerMetadata","",""],[8,"Formattable","",""],[10,"format","","",11],[11,"clone","","",12],[11,"send","","",12],[11,"cmp","","",13],[11,"partial_cmp","","",13],[11,"lt","","",13],[11,"le","","",13],[11,"gt","","",13],[11,"ge","","",13],[11,"clone","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"format","core::option","",14],[11,"clone","profile::time","",7],[11,"cmp","","",8],[11,"partial_cmp","","",8],[11,"lt","","",8],[11,"le","","",8],[11,"gt","","",8],[11,"ge","","",8],[11,"clone","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"format","","",8],[11,"create","","",6],[11,"new","","",6],[11,"start","","",6],[11,"eq","","",9],[11,"ne","","",9],[11,"eq","","",10],[11,"ne","","",10],[14,"path!","profile","An easy way to build a path for a report."]],"paths":[[3,"Report"],[3,"Profiler"],[4,"ProfilerMsg"],[8,"Reporter"],[3,"ProfilerChan"],[3,"ReportsChan"],[3,"Profiler"],[4,"ProfilerMsg"],[4,"ProfilerCategory"],[4,"TimerMetadataFrameType"],[4,"TimerMetadataReflowType"],[8,"Formattable"],[3,"ProfilerChan"],[3,"TimerMetadata"],[4,"Option"]]};
searchIndex['util'] = {"items":[[0,"","util",""],[0,"smallvec","","Small vectors in various sizes. These store a certain number of elements inline and fall back\nto the heap for larger allocations."],[8,"VecLike","util::smallvec",""],[10,"vec_len","","",0],[10,"vec_push","","",0],[10,"vec_slice_mut","","",0],[10,"vec_slice_from_mut","","",0],[8,"SmallVecPrivate","",""],[10,"set_len","","",1],[10,"set_cap","","",1],[10,"data","","",1],[10,"mut_data","","",1],[10,"ptr","","",1],[10,"mut_ptr","","",1],[10,"set_ptr","","",1],[8,"SmallVec","",""],[10,"inline_size","","",2],[10,"len","","",2],[10,"is_empty","","",2],[10,"cap","","",2],[10,"spilled","","",2],[10,"begin","","",2],[10,"begin_mut","","",2],[10,"end","","",2],[10,"end_mut","","",2],[10,"iter","","",2],[10,"mut_iter","","",2],[10,"into_iter","","NB: For efficiency reasons (avoiding making a second copy of the inline elements), this\nactually clears out the original array instead of moving it.",2],[10,"push","","",2],[10,"push_all_move","","",2],[10,"pop","","",2],[10,"grow","","",2],[10,"get","","",2],[10,"get_mut","","",2],[10,"slice","","",2],[10,"as_slice","","",2],[10,"as_slice_mut","","",2],[10,"slice_mut","","",2],[10,"slice_from_mut","","",2],[10,"fail_bounds_check","","",2],[11,"clone","selectors::bloom","",3],[11,"new","","Creates a new bloom filter.",3],[11,"clear","","",3],[11,"insert","","Inserts an item into the bloom filter.",3],[11,"remove","","Removes an item from the bloom filter.",3],[11,"might_contain","","Check whether the filter might contain an item.  This can\nsometimes return true even if the item is not in the filter,\nbut will never return false for items that are actually in the\nfilter.",3],[11,"bloom_hash","string_cache::atom","",4],[11,"bloom_hash","string_cache::namespace","",5],[11,"new","selectors::matching","",6],[11,"get_all_matching_rules","","Append to `rule_list` all Rules in `self` that match node.",6],[11,"insert","","Insert rule into the correct hash.\nOrder in which to try: id_hash, class_hash, local_name_hash, universal_rules.",6],[11,"fmt","","",7],[11,"clone","","",7],[11,"clone","","",8],[11,"from_declarations","","",7],[11,"eq","","",9],[11,"ne","","",9],[11,"hash","","",10],[11,"cmp","","",10],[11,"partial_cmp","","",10],[11,"lt","","",10],[11,"le","","",10],[11,"gt","","",10],[11,"ge","","",10],[11,"clone","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"empty","","Returns an empty set of flags.",10],[11,"all","","Returns the set containing all flags.",10],[11,"bits","","Returns the raw value of the flags currently stored.",10],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",10],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",10],[11,"is_empty","","Returns `true` if no flags are currently stored.",10],[11,"is_all","","Returns `true` if all flags are currently set.",10],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10],[11,"insert","","Inserts the specified flags in-place.",10],[11,"remove","","Removes the specified flags in-place.",10],[11,"toggle","","Toggles the specified flags in-place.",10],[6,"Output","util::smallvec",""],[11,"bitor","selectors::matching","Returns the union of the two sets of flags.",10],[6,"Output","util::smallvec",""],[11,"bitxor","selectors::matching","Returns the left flags, but with all the right flags toggled.",10],[6,"Output","util::smallvec",""],[11,"bitand","selectors::matching","Returns the intersection between the two sets of flags.",10],[6,"Output","util::smallvec",""],[11,"sub","selectors::matching","Returns the set difference of the two sets of flags.",10],[6,"Output","util::smallvec",""],[11,"not","selectors::matching","Returns the complement of this set of flags.",10],[11,"new","selectors::parser","",11],[11,"fmt","","",12],[11,"clone","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"fmt","","",13],[11,"hash","","",13],[11,"clone","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"fmt","","",14],[11,"clone","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"fmt","","",15],[11,"clone","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"fmt","","",16],[11,"hash","","",16],[11,"clone","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"fmt","","",17],[11,"hash","","",17],[11,"clone","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"fmt","","",18],[11,"hash","","",18],[11,"clone","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"fmt","","",19],[11,"hash","","",19],[11,"clone","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"fmt","","",20],[11,"hash","","",20],[11,"clone","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"fmt","","",21],[11,"vec_len","collections::vec","",22],[11,"vec_push","","",22],[11,"vec_slice_mut","","",22],[6,"Item","util::smallvec",""],[11,"next","selectors::smallvec","",23],[11,"next_back","","",23],[6,"Item","util::smallvec",""],[11,"next","selectors::smallvec","",24],[6,"Item","util::smallvec",""],[11,"next","selectors::smallvec","",25],[11,"drop","","",25],[11,"set_len","","",26],[11,"set_cap","","",26],[11,"data","","",26],[11,"mut_data","","",26],[11,"ptr","","",26],[11,"mut_ptr","","",26],[11,"set_ptr","","",26],[11,"inline_size","","",26],[11,"len","","",26],[11,"is_empty","","",26],[11,"cap","","",26],[11,"vec_len","","",26],[11,"vec_push","","",26],[11,"vec_slice_mut","","",26],[11,"from_iter","","",26],[11,"extend","","",26],[11,"fmt","","",26],[11,"new","","",26],[11,"set_len","","",27],[11,"set_cap","","",27],[11,"data","","",27],[11,"mut_data","","",27],[11,"ptr","","",27],[11,"mut_ptr","","",27],[11,"set_ptr","","",27],[11,"inline_size","","",27],[11,"len","","",27],[11,"is_empty","","",27],[11,"cap","","",27],[11,"vec_len","","",27],[11,"vec_push","","",27],[11,"vec_slice_mut","","",27],[11,"from_iter","","",27],[11,"extend","","",27],[11,"fmt","","",27],[11,"new","","",27],[11,"set_len","","",28],[11,"set_cap","","",28],[11,"data","","",28],[11,"mut_data","","",28],[11,"ptr","","",28],[11,"mut_ptr","","",28],[11,"set_ptr","","",28],[11,"inline_size","","",28],[11,"len","","",28],[11,"is_empty","","",28],[11,"cap","","",28],[11,"vec_len","","",28],[11,"vec_push","","",28],[11,"vec_slice_mut","","",28],[11,"from_iter","","",28],[11,"extend","","",28],[11,"fmt","","",28],[11,"new","","",28],[11,"set_len","","",29],[11,"set_cap","","",29],[11,"data","","",29],[11,"mut_data","","",29],[11,"ptr","","",29],[11,"mut_ptr","","",29],[11,"set_ptr","","",29],[11,"inline_size","","",29],[11,"len","","",29],[11,"is_empty","","",29],[11,"cap","","",29],[11,"vec_len","","",29],[11,"vec_push","","",29],[11,"vec_slice_mut","","",29],[11,"from_iter","","",29],[11,"extend","","",29],[11,"fmt","","",29],[11,"new","","",29],[11,"set_len","","",30],[11,"set_cap","","",30],[11,"data","","",30],[11,"mut_data","","",30],[11,"ptr","","",30],[11,"mut_ptr","","",30],[11,"set_ptr","","",30],[11,"inline_size","","",30],[11,"len","","",30],[11,"is_empty","","",30],[11,"cap","","",30],[11,"vec_len","","",30],[11,"vec_push","","",30],[11,"vec_slice_mut","","",30],[11,"from_iter","","",30],[11,"extend","","",30],[11,"fmt","","",30],[11,"new","","",30],[11,"set_len","","",31],[11,"set_cap","","",31],[11,"data","","",31],[11,"mut_data","","",31],[11,"ptr","","",31],[11,"mut_ptr","","",31],[11,"set_ptr","","",31],[11,"inline_size","","",31],[11,"len","","",31],[11,"is_empty","","",31],[11,"cap","","",31],[11,"vec_len","","",31],[11,"vec_push","","",31],[11,"vec_slice_mut","","",31],[11,"from_iter","","",31],[11,"extend","","",31],[11,"fmt","","",31],[11,"new","","",31],[11,"set_len","","",32],[11,"set_cap","","",32],[11,"data","","",32],[11,"mut_data","","",32],[11,"ptr","","",32],[11,"mut_ptr","","",32],[11,"set_ptr","","",32],[11,"inline_size","","",32],[11,"len","","",32],[11,"is_empty","","",32],[11,"cap","","",32],[11,"vec_len","","",32],[11,"vec_push","","",32],[11,"vec_slice_mut","","",32],[11,"from_iter","","",32],[11,"extend","","",32],[11,"fmt","","",32],[11,"new","","",32],[11,"drop","","",26],[11,"drop","","",27],[11,"drop","","",28],[11,"drop","","",29],[11,"drop","","",30],[11,"drop","","",31],[11,"drop","","",32],[11,"clone","","",26],[11,"clone","","",27],[11,"clone","","",28],[11,"clone","","",29],[11,"clone","","",30],[11,"clone","","",31],[11,"clone","","",32],[3,"SmallVecIterator","util::smallvec",""],[3,"SmallVecMutIterator","",""],[3,"SmallVecMoveIterator","",""],[3,"SmallVec1","",""],[3,"SmallVec2","",""],[3,"SmallVec4","",""],[3,"SmallVec8","",""],[3,"SmallVec16","",""],[3,"SmallVec24","",""],[3,"SmallVec32","",""],[5,"breakpoint","util",""],[5,"arc_ptr_eq","",""],[0,"bezier","","Parametric Bézier curves."],[3,"Bezier","util::bezier",""],[11,"new","","",33],[11,"solve","","",33],[0,"cache","util",""],[3,"HashCache","util::cache",""],[3,"LRUCache","",""],[3,"SimpleHashCache","",""],[11,"new","","",34],[11,"insert","","",34],[11,"find","","",34],[11,"find_or_create","","",34],[11,"evict_all","","",34],[11,"new","","",35],[11,"touch","","",35],[11,"iter","","",35],[11,"insert","","",35],[11,"find","","",35],[11,"find_or_create","","",35],[11,"evict_all","","",35],[11,"new","","",36],[11,"insert","","",36],[11,"find","","",36],[11,"find_or_create","","",36],[11,"evict_all","","",36],[0,"cursor","util","A list of common mouse cursors per CSS3-UI § 8.1.1."],[4,"Cursor","util::cursor",""],[13,"NoCursor","","",37],[13,"DefaultCursor","","",37],[13,"PointerCursor","","",37],[13,"ContextMenuCursor","","",37],[13,"HelpCursor","","",37],[13,"ProgressCursor","","",37],[13,"WaitCursor","","",37],[13,"CellCursor","","",37],[13,"CrosshairCursor","","",37],[13,"TextCursor","","",37],[13,"VerticalTextCursor","","",37],[13,"AliasCursor","","",37],[13,"CopyCursor","","",37],[13,"MoveCursor","","",37],[13,"NoDropCursor","","",37],[13,"NotAllowedCursor","","",37],[13,"GrabCursor","","",37],[13,"GrabbingCursor","","",37],[13,"EResizeCursor","","",37],[13,"NResizeCursor","","",37],[13,"NeResizeCursor","","",37],[13,"NwResizeCursor","","",37],[13,"SResizeCursor","","",37],[13,"SeResizeCursor","","",37],[13,"SwResizeCursor","","",37],[13,"WResizeCursor","","",37],[13,"EwResizeCursor","","",37],[13,"NsResizeCursor","","",37],[13,"NeswResizeCursor","","",37],[13,"NwseResizeCursor","","",37],[13,"ColResizeCursor","","",37],[13,"RowResizeCursor","","",37],[13,"AllScrollCursor","","",37],[13,"ZoomInCursor","","",37],[13,"ZoomOutCursor","","",37],[11,"fmt","","",37],[11,"from_i64","","",37],[11,"from_u64","","",37],[11,"eq","","",37],[11,"ne","","",37],[11,"clone","","",37],[11,"from_css_keyword","","",37],[11,"to_css","","",37],[0,"debug_utils","util",""],[5,"hexdump","util::debug_utils",""],[0,"deque","util","A (mostly) lock-free concurrent work-stealing deque"],[3,"Worker","util::deque","Worker half of the work-stealing deque. This worker has exclusive access to\none side of the deque, and uses `push` and `pop` method to manipulate it."],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the\nopposite end of the deque from the worker, and they only have access to the\n`steal` method."],[3,"BufferPool","","The allocation pool for buffers used by work-stealing deques. Right now this\nstructure is used for reclamation of memory after it is no longer in use by\ndeques."],[4,"Stolen","","When stealing some data, this is an enumeration of the possible outcomes."],[13,"Empty","","The deque was empty at the time of stealing",38],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more\ndata.",38],[13,"Data","","The stealer has successfully stolen some data.",38],[11,"fmt","","",38],[11,"eq","","",38],[11,"ne","","",38],[11,"new","","Allocates a new buffer pool which in turn can be used to allocate new\ndeques.",39],[11,"deque","","Allocates a new work-stealing deque which will send/receiving memory to\nand from this buffer pool.",39],[11,"clone","","",39],[11,"push","","Pushes data onto the front of this work queue.",40],[11,"pop","","Pops data off the front of the work queue, returning `None` on an empty\nqueue.",40],[11,"pool","","Gets access to the buffer pool that this worker is attached to. This can\nbe used to create more deques which share the same buffer pool as this\ndeque.",40],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",41],[11,"pool","","Gets access to the buffer pool that this stealer is attached to. This\ncan be used to create more deques which share the same buffer pool as\nthis deque.",41],[11,"clone","","",41],[0,"linked_list","util","Utility functions for doubly-linked lists."],[5,"split_off_head","util::linked_list","Splits the head off a list in O(1) time, and returns the head."],[5,"prepend_from","","Prepends the items in the other list to this one, leaving the other list empty."],[0,"fnv","util","This file stolen wholesale from rustc/src/librustc/util/nodemap.rs"],[3,"FnvHasher","util::fnv","A speedy hash algorithm for node ids and def ids. The hashmap in\nlibcollections by default uses SipHash which isn't quite as speedy as we\nwant. In the compiler we're not really worried about DOS attempts, so we\njust default to a non-cryptographic hash."],[11,"default","","",42],[11,"finish","","",42],[11,"write","","",42],[0,"geometry","util",""],[3,"Au","util::geometry",""],[4,"ScreenPx","","A normalized \"pixel\" at the default resolution for the display."],[4,"ViewportPx","","One CSS \"px\" in the coordinate system of the \"initial viewport\":\nhttp://www.w3.org/TR/css-device-adapt/#initial-viewport"],[4,"PagePx","","One CSS \"px\" in the root coordinate system for the content document."],[5,"pt_to_px","",""],[5,"px_to_pt","",""],[5,"from_frac_px","",""],[5,"from_px","",""],[5,"to_px","",""],[5,"to_frac_px","",""],[5,"from_pt","",""],[5,"to_pt","",""],[5,"rect_contains_point","","Returns true if the rect contains the given point. Points on the top or left sides of the rect\nare considered inside the rectangle, while points on the right or bottom sides of the rect are\nnot considered inside the rectangle."],[5,"f32_rect_to_au_rect","","A helper function to convert a rect of `f32` pixels to a rect of app units."],[7,"ZERO_POINT","",""],[7,"ZERO_RECT","",""],[7,"MAX_RECT","",""],[17,"MIN_AU","",""],[17,"MAX_AU","",""],[11,"fmt","","",43],[11,"fmt","","",44],[11,"encode","","",44],[11,"fmt","","",45],[11,"encode","","",45],[11,"cmp","","",46],[11,"partial_cmp","","",46],[11,"lt","","",46],[11,"le","","",46],[11,"gt","","",46],[11,"ge","","",46],[11,"eq","","",46],[11,"ne","","",46],[11,"hash","","",46],[11,"clone","","",46],[11,"default","","",46],[11,"zero","","",46],[11,"encode","","",46],[11,"fmt","","",46],[6,"Output","",""],[11,"add","","",46],[6,"Output","",""],[11,"sub","","",46],[6,"Output","",""],[11,"mul","","",46],[6,"Output","",""],[11,"div","","",46],[6,"Output","",""],[11,"rem","","",46],[6,"Output","",""],[11,"neg","","",46],[11,"from","","",46],[11,"to_i64","","",46],[11,"to_u64","","",46],[11,"to_f32","","",46],[11,"to_f64","","",46],[11,"new","","FIXME(pcwalton): Workaround for lack of cross crate inlining of newtype structs!",46],[11,"scale_by","","",46],[11,"from_px","","",46],[11,"from_page_px","","",46],[11,"to_nearest_px","","",46],[11,"to_frac32_px","","",46],[11,"to_subpx","","",46],[11,"to_snapped","","",46],[11,"from_frac32_px","","",46],[11,"from_pt","","",46],[11,"from_frac_px","","",46],[11,"min","","",46],[11,"max","","",46],[0,"logical_geometry","util","Geometry in flow-relative space."],[3,"WritingMode","util::logical_geometry",""],[3,"LogicalSize","","A 2D size in flow-relative dimensions"],[12,"inline","","",47],[12,"block","","",47],[3,"LogicalPoint","","A 2D point in flow-relative dimensions"],[12,"i","","",48],[12,"b","","inline-axis coordinate",48],[3,"LogicalMargin","","A \"margin\" in flow-relative dimensions\nRepresents the four sides of the margins, borders, or padding of a CSS box,\nor a combination of those.\nA positive \"margin\" can be added to a rectangle to obtain a bigger rectangle."],[12,"block_start","","",49],[12,"inline_end","","",49],[12,"block_end","","",49],[12,"inline_start","","",49],[3,"LogicalRect","","A rectangle in flow-relative dimensions"],[12,"start","","",50],[12,"size","","",50],[17,"FLAG_RTL","",""],[17,"FLAG_VERTICAL","",""],[17,"FLAG_VERTICAL_LR","",""],[17,"FLAG_SIDEWAYS_LEFT","",""],[11,"hash","","",51],[11,"cmp","","",51],[11,"partial_cmp","","",51],[11,"lt","","",51],[11,"le","","",51],[11,"gt","","",51],[11,"ge","","",51],[11,"clone","","",51],[11,"eq","","",51],[11,"ne","","",51],[11,"encode","","",51],[11,"empty","","Returns an empty set of flags.",51],[11,"all","","Returns the set containing all flags.",51],[11,"bits","","Returns the raw value of the flags currently stored.",51],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",51],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",51],[11,"is_empty","","Returns `true` if no flags are currently stored.",51],[11,"is_all","","Returns `true` if all flags are currently set.",51],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",51],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",51],[11,"insert","","Inserts the specified flags in-place.",51],[11,"remove","","Removes the specified flags in-place.",51],[11,"toggle","","Toggles the specified flags in-place.",51],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",51],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",51],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",51],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",51],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",51],[11,"is_vertical","","",51],[11,"is_vertical_lr","","Assuming .is_vertical(), does the block direction go left to right?",51],[11,"is_inline_tb","","Assuming .is_vertical(), does the inline direction go top to bottom?",51],[11,"is_bidi_ltr","","",51],[11,"is_sideways_left","","",51],[11,"fmt","","",51],[11,"clone","","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"encode","","",47],[11,"fmt","","",47],[11,"zero","","",47],[11,"new","","",47],[11,"from_physical","","",47],[11,"width","","",47],[11,"set_width","","",47],[11,"height","","",47],[11,"set_height","","",47],[11,"to_physical","","",47],[11,"convert","","",47],[6,"Output","",""],[11,"add","","",47],[6,"Output","",""],[11,"sub","","",47],[11,"clone","","",48],[11,"encode","","",48],[11,"eq","","",48],[11,"ne","","",48],[11,"fmt","","",48],[11,"zero","","",48],[11,"new","","",48],[11,"from_physical","","",48],[11,"x","","",48],[11,"set_x","","",48],[11,"y","","",48],[11,"set_y","","",48],[11,"to_physical","","",48],[11,"convert","","",48],[11,"add_point","","This doesn’t really makes sense,\nbut happens when dealing with multiple origins.",48],[6,"Output","",""],[11,"add","","",48],[6,"Output","",""],[11,"sub","","",48],[11,"clone","","",49],[11,"eq","","",49],[11,"ne","","",49],[11,"encode","","",49],[11,"fmt","","",49],[11,"zero","","",49],[11,"new","","",49],[11,"new_all_same","","",49],[11,"from_physical","","",49],[11,"top","","",49],[11,"set_top","","",49],[11,"right","","",49],[11,"set_right","","",49],[11,"bottom","","",49],[11,"set_bottom","","",49],[11,"left","","",49],[11,"set_left","","",49],[11,"to_physical","","",49],[11,"convert","","",49],[11,"is_zero","","",49],[11,"inline_start_end","","",49],[11,"block_start_end","","",49],[11,"top_bottom","","",49],[11,"left_right","","",49],[6,"Output","",""],[11,"add","","",49],[6,"Output","",""],[11,"sub","","",49],[11,"clone","","",50],[11,"eq","","",50],[11,"ne","","",50],[11,"encode","","",50],[11,"fmt","","",50],[11,"zero","","",50],[11,"new","","",50],[11,"from_point_size","","",50],[11,"from_physical","","",50],[11,"inline_end","","",50],[11,"block_end","","",50],[11,"to_physical","","",50],[11,"convert","","",50],[11,"translate","","",50],[11,"union","","",50],[6,"Output","",""],[11,"add","","",50],[6,"Output","",""],[11,"sub","","",50],[0,"mem","util","Data structure measurement."],[5,"heap_size_of","util::mem",""],[8,"HeapSizeOf","",""],[10,"heap_size_of_children","","Measure the size of any heap-allocated structures that hang off this value, but not the\nspace taken up by the value itself (i.e. what size_of::<T> measures, more or less); that\nspace is handled by the implementation of HeapSizeOf for Box<T> below.",52],[11,"heap_size_of_children","alloc::boxed","",53],[11,"heap_size_of_children","collections::string","",54],[11,"heap_size_of_children","core::option","",55],[11,"heap_size_of_children","alloc::arc","",56],[11,"heap_size_of_children","collections::vec","",22],[11,"heap_size_of_children","collections::linked_list","",57],[0,"namespace","util",""],[5,"from_domstring","util::namespace",""],[0,"opts","util","Configuration options for a single run of the servo application. Created\nfrom command line arguments."],[3,"Opts","util::opts","Global flags for Servo, currently set on the command line."],[12,"urls","","The initial URLs to load.",58],[12,"paint_threads","","How many threads to use for CPU painting (`-t`).",58],[12,"gpu_painting","","True to use GPU painting via Skia-GL, false to use CPU painting via Skia (`-g`). Note that\ncompositing is always done on the GPU.",58],[12,"tile_size","","The maximum size of each tile in pixels (`-s`).",58],[12,"device_pixels_per_px","","The ratio of device pixels per px at the default scale. If unspecified, will use the\nplatform default setting.",58],[12,"time_profiler_period","","`None` to disable the time profiler or `Some` with an interval in seconds to enable it and\ncause it to produce output on that interval (`-p`).",58],[12,"mem_profiler_period","","`None` to disable the memory profiler or `Some` with an interval in seconds to enable it\nand cause it to produce output on that interval (`-m`).",58],[12,"enable_experimental","","Enable experimental web features (`-e`).",58],[12,"layout_threads","","The number of threads to use for layout (`-y`). Defaults to 1, which results in a recursive\nsequential algorithm.",58],[12,"nonincremental_layout","","",58],[12,"nossl","","",58],[12,"userscripts","","",58],[12,"output_file","","",58],[12,"headless","","",58],[12,"hard_fail","","",58],[12,"bubble_inline_sizes_separately","","True if we should bubble intrinsic widths sequentially (`-b`). If this is true, then\nintrinsic widths are computed as a separate pass instead of during flow construction. You\nmay wish to turn this flag on in order to benchmark style recalculation against other\nbrowser engines.",58],[12,"show_debug_borders","","True if we should show borders on all layers and tiles for\ndebugging purposes (`--show-debug-borders`).",58],[12,"show_debug_fragment_borders","","True if we should show borders on all fragments for debugging purposes\n(`--show-debug-fragment-borders`).",58],[12,"show_debug_parallel_paint","","True if we should paint tiles with overlays based on which thread painted them.",58],[12,"show_debug_parallel_layout","","True if we should paint borders around flows based on which thread painted them.",58],[12,"enable_text_antialiasing","","If set with --disable-text-aa, disable antialiasing on fonts. This is primarily useful for reftests\nwhere pixel perfect results are required when using fonts such as the Ahem\nfont for layout tests.",58],[12,"trace_layout","","True if each step of layout is traced to an external JSON file\nfor debugging purposes. Settings this implies sequential layout\nand paint.",58],[12,"profile_tasks","","If true, instrument the runtime for each task created and dump\nthat information to a JSON file that can be viewed in the task\nprofile viewer.",58],[12,"devtools_port","","`None` to disable devtools or `Some` with a port number to start a server to listen to\nremote Firefox devtools connections.",58],[12,"initial_window_size","","The initial requested size of the window.",58],[12,"user_agent","","An optional string allowing the user agent to be set for testing.",58],[12,"dump_flow_tree","","Dumps the flow tree after a layout.",58],[12,"dump_display_list","","Dumps the flow tree after a layout.",58],[12,"relayout_event","","Emits notifications when there is a relayout.",58],[12,"validate_display_list_geometry","","Whether to show an error when display list geometry escapes flow overflow regions.",58],[12,"resources_path","","A specific path to find required resources (such as user-agent.css).",58],[5,"print_debug_usage","",""],[5,"default_opts","",""],[5,"from_cmdline_args","",""],[5,"set_experimental_enabled","",""],[5,"experimental_enabled","",""],[5,"set_opts","",""],[5,"get","",""],[11,"clone","","",58],[0,"persistent_list","util","A persistent, thread-safe singly-linked list."],[3,"PersistentList","util::persistent_list",""],[3,"PersistentListIterator","",""],[11,"new","","",59],[11,"len","","",59],[11,"front","","",59],[11,"prepend_elem","","",59],[11,"iter","","",59],[11,"clone","","",59],[6,"Item","",""],[11,"next","","",60],[0,"range","util",""],[3,"Range","util::range","A range of indices"],[3,"EachIndex","","An iterator over each index in a range"],[5,"each_index","",""],[8,"RangeIndex","","An index type to be used by a `Range`"],[16,"Index","util::range::RangeIndex",""],[10,"new","util::range","",61],[10,"get","","",61],[6,"Index","",""],[11,"encode","","",62],[11,"clone","","",62],[11,"fmt","","",62],[6,"Item","",""],[11,"next","","",63],[11,"size_hint","","",63],[11,"new","","Create a new range from beginning and length offsets. This could be\ndenoted as `[begin, begin + length)`.",62],[11,"empty","","",62],[11,"begin","","The index offset to the beginning of the range.",62],[11,"length","","The index offset from the beginning to the end of the range.",62],[11,"end","","The index offset to the end of the range.",62],[11,"contains","","`true` if the index is between the beginning and the end of the range.",62],[11,"is_empty","","`true` if the offset from the beginning to the end of the range is zero.",62],[11,"shift_by","","Shift the entire range by the supplied index delta.",62],[11,"extend_by","","Extend the end of the range by the supplied index delta.",62],[11,"extend_to","","Move the end of the range to the target index.",62],[11,"adjust_by","","Adjust the beginning offset and the length by the supplied deltas.",62],[11,"reset","","Set the begin and length values.",62],[11,"intersect","","",62],[11,"each_index","","Returns an iterater that increments over `[begin, end)`.",62],[11,"is_valid_for_string","","",62],[0,"resource_files","util",""],[5,"resources_dir_path","util::resource_files",""],[5,"read_resource_file","",""],[0,"str","util",""],[3,"LowercaseString","util::str",""],[4,"LengthOrPercentageOrAuto","",""],[13,"Auto","","",64],[13,"Percentage","","",64],[13,"Length","","",64],[5,"null_str_as_empty","",""],[5,"null_str_as_empty_ref","",""],[5,"is_whitespace","",""],[5,"split_html_space_chars","",""],[5,"parse_integer","","Parse an integer according to\n<http://www.whatwg.org/html/#rules-for-parsing-integers>."],[5,"parse_unsigned_integer","","Parse an integer according to\n<http://www.whatwg.org/html/#rules-for-parsing-non-negative-integers>."],[5,"parse_length","","Parses a length per HTML5 § 2.4.4.4. If unparseable, `Auto` is returned."],[5,"parse_legacy_color","","Parses a legacy color per HTML5 § 2.4.6. If unparseable, `Err` is returned."],[5,"c_str_to_string","","Creates a String from the given null-terminated buffer.\nPanics if the buffer does not contain UTF-8."],[6,"DOMString","",""],[6,"StaticCharVec","",""],[6,"StaticStringVec","",""],[7,"HTML_SPACE_CHARACTERS","","A \"space character\" according to:"],[11,"fmt","","",65],[11,"hash","","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"clone","","",65],[11,"new","","",65],[11,"as_slice","","",65],[0,"task","util",""],[5,"spawn_named","util::task",""],[5,"spawn_named_with_send_on_failure","","Arrange to send a particular message to a channel if the task fails."],[0,"tid","util",""],[5,"tid","util::tid","Every task gets one, that's unique."],[0,"taskpool","util","A load-balancing task pool."],[3,"TaskPool","util::taskpool",""],[11,"new","","",66],[11,"execute","","",66],[0,"task_state","util","Supports dynamic assertions in debug builds about what sort of task is\nrunning and what state it's in."],[3,"TaskState","util::task_state",""],[5,"initialize","",""],[5,"get","",""],[5,"enter","",""],[5,"exit","",""],[17,"SCRIPT","",""],[17,"LAYOUT","",""],[17,"PAINT","",""],[17,"IN_WORKER","",""],[17,"IN_GC","",""],[17,"IN_HTML_PARSER","",""],[11,"hash","","",67],[11,"cmp","","",67],[11,"partial_cmp","","",67],[11,"lt","","",67],[11,"le","","",67],[11,"gt","","",67],[11,"ge","","",67],[11,"clone","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"fmt","","",67],[11,"empty","","Returns an empty set of flags.",67],[11,"all","","Returns the set containing all flags.",67],[11,"bits","","Returns the raw value of the flags currently stored.",67],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",67],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",67],[11,"is_empty","","Returns `true` if no flags are currently stored.",67],[11,"is_all","","Returns `true` if all flags are currently set.",67],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",67],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",67],[11,"insert","","Inserts the specified flags in-place.",67],[11,"remove","","Removes the specified flags in-place.",67],[11,"toggle","","Toggles the specified flags in-place.",67],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",67],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",67],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",67],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",67],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",67],[11,"is_script","","",67],[11,"is_layout","","",67],[11,"is_paint","","",67],[0,"vec","util",""],[5,"byte_swap","util::vec",""],[8,"Comparator","","FIXME(pcwalton): Workaround for lack of unboxed closures. This is called in\nperformance-critical code, so a closure is insufficient."],[10,"compare","","",68],[8,"BinarySearchMethods","",""],[10,"binary_search_","","",69],[10,"binary_search_index","","",69],[8,"FullBinarySearchMethods","",""],[10,"binary_search_index_by","","",70],[0,"workqueue","util","A work queue for scheduling units of work across threads in a fork-join fashion."],[3,"WorkUnit","util::workqueue","A unit of work."],[12,"fun","","The function to execute.",71],[12,"data","","Arbitrary data.",71],[3,"WorkerProxy","","A handle to the work queue that individual work units have."],[3,"WorkQueue","","A work queue on which units of work can be submitted."],[12,"data","","Arbitrary user data.",72],[11,"push","","Enqueues a block into the work queue.",73],[11,"user_data","","Retrieves the queue user data.",73],[11,"worker_index","","Retrieves the index of the worker.",73],[11,"new","","Creates a new work queue and spawns all the threads associated with\nit.",72],[11,"push","","Enqueues a block into the work queue.",72],[11,"run","","Synchronously runs all the enqueued tasks and waits for them to complete.",72],[11,"shutdown","","",72],[14,"int_range_index!","util","Implements a range index type with operator overloads"]],"paths":[[8,"VecLike"],[8,"SmallVecPrivate"],[8,"SmallVec"],[3,"BloomFilter"],[3,"Atom"],[3,"Namespace"],[3,"SelectorMap"],[3,"DeclarationBlock"],[3,"Rule"],[4,"SelectorMatchingResult"],[3,"CommonStyleAffectingAttributes"],[3,"ParserContext"],[3,"Selector"],[4,"PseudoElement"],[3,"CompoundSelector"],[4,"Combinator"],[4,"SimpleSelector"],[4,"CaseSensitivity"],[3,"LocalName"],[3,"AttrSelector"],[4,"NamespaceConstraint"],[4,"SimpleSelectorParseResult"],[3,"Vec"],[3,"SmallVecIterator"],[3,"SmallVecMutIterator"],[3,"SmallVecMoveIterator"],[3,"SmallVec1"],[3,"SmallVec2"],[3,"SmallVec4"],[3,"SmallVec8"],[3,"SmallVec16"],[3,"SmallVec24"],[3,"SmallVec32"],[3,"Bezier"],[3,"HashCache"],[3,"LRUCache"],[3,"SimpleHashCache"],[4,"Cursor"],[4,"Stolen"],[3,"BufferPool"],[3,"Worker"],[3,"Stealer"],[3,"FnvHasher"],[4,"ScreenPx"],[4,"ViewportPx"],[4,"PagePx"],[3,"Au"],[3,"LogicalSize"],[3,"LogicalPoint"],[3,"LogicalMargin"],[3,"LogicalRect"],[3,"WritingMode"],[8,"HeapSizeOf"],[3,"Box"],[3,"String"],[4,"Option"],[3,"Arc"],[3,"LinkedList"],[3,"Opts"],[3,"PersistentList"],[3,"PersistentListIterator"],[8,"RangeIndex"],[3,"Range"],[3,"EachIndex"],[4,"LengthOrPercentageOrAuto"],[3,"LowercaseString"],[3,"TaskPool"],[3,"TaskState"],[8,"Comparator"],[8,"BinarySearchMethods"],[8,"FullBinarySearchMethods"],[3,"WorkUnit"],[3,"WorkQueue"],[3,"WorkerProxy"]]};
searchIndex['layers'] = {"items":[[0,"","layers",""],[0,"color","",""],[3,"Color","layers::color",""],[12,"r","","",0],[12,"g","","",0],[12,"b","","",0],[12,"a","","",0],[0,"geometry","layers",""],[4,"DevicePixel","layers::geometry","One hardware pixel."],[4,"LayerPixel","","One pixel in layer coordinate space."],[11,"encode","","",1],[11,"encode","","",2],[0,"layers","layers",""],[3,"ContentAge","layers::layers",""],[3,"Layer","",""],[12,"children","","",3],[12,"transform","","",3],[12,"tile_size","","",3],[12,"extra_data","","",3],[12,"bounds","","The boundaries of this layer in the coordinate system of the parent layer.",3],[12,"content_age","","A monotonically increasing counter that keeps track of the current content age.",3],[12,"content_offset","","The content offset for this layer in unscaled layer pixels.",3],[12,"masks_to_bounds","","Whether this layer clips its children to its boundaries.",3],[12,"background_color","","The background color for this layer.",3],[3,"BufferRequest","","A request from the compositor to the renderer for tiles that need to be (re)displayed."],[12,"screen_rect","","",4],[12,"page_rect","","",4],[12,"content_age","","The content age of that this BufferRequest corresponds to.",4],[3,"LayerBuffer","",""],[12,"native_surface","","The native surface which can be shared between threads or processes. On Mac this is an\n`IOSurface`; on Linux this is an X Pixmap; on Android this is an `EGLImageKHR`.",5],[12,"rect","","The rect in the containing RenderLayer that this represents.",5],[12,"screen_pos","","The rect in pixels that will be drawn to the screen.",5],[12,"resolution","","The scale at which this tile is rendered",5],[12,"stride","","NB: stride is in pixels, like OpenGL GL_UNPACK_ROW_LENGTH.",5],[12,"painted_with_cpu","","Whether or not this buffer was painted with the CPU rasterization.",5],[12,"content_age","","The content age of that this buffer request corresponds to.",5],[3,"LayerBufferSet","","A set of layer buffers. This is an atomic unit used to switch between the front and back\nbuffers."],[12,"buffers","","",6],[11,"partial_cmp","","",7],[11,"lt","","",7],[11,"le","","",7],[11,"gt","","",7],[11,"ge","","",7],[11,"eq","","",7],[11,"ne","","",7],[11,"clone","","",7],[11,"new","","",7],[11,"next","","",7],[11,"new","","",3],[11,"children","","",3],[11,"add_child","","",3],[11,"get_buffer_requests","","",3],[11,"resize","","",3],[11,"add_buffer","","",3],[11,"collect_unused_buffers","","",3],[11,"collect_buffers","","",3],[11,"contents_changed","","",3],[11,"create_textures","","",3],[11,"do_for_all_tiles","","",3],[11,"clone","","",4],[11,"new","","",4],[11,"get_mem","","Returns the amount of memory used by the tile",5],[11,"is_valid","","Returns true if the tile is displayable at the given scale",5],[11,"get_size_2d","","Returns the Size2D of the tile",5],[11,"mark_wont_leak","","Marks the layer buffer as not leaking. See comments on\n`NativeSurfaceMethods::mark_wont_leak` for how this is used.",5],[11,"destroy","","Destroys the layer buffer. Painting task only.",5],[11,"mark_will_leak","","Notes all buffer surfaces will leak if not destroyed via a call to `destroy`.",6],[0,"rendergl","layers",""],[3,"RenderContext","layers::rendergl",""],[5,"bind_and_render_quad","",""],[5,"bind_and_render_quad_lines","",""],[5,"bind_and_render_solid_quad","",""],[5,"render_scene","",""],[8,"Render","",""],[10,"render","","",8],[11,"new","","",9],[11,"render","layers::layers","",3],[0,"scene","layers",""],[3,"Scene","layers::scene",""],[12,"root","","",10],[12,"viewport","","",10],[12,"scale","","The scene scale, to allow for zooming and high-resolution painting.",10],[11,"new","","",10],[11,"get_buffer_requests_for_layer","","",10],[11,"get_buffer_requests","","",10],[11,"mark_layer_contents_as_changed_recursively_for_layer","","",10],[11,"mark_layer_contents_as_changed_recursively","","",10],[11,"set_root_layer_size","","",10],[0,"texturegl","layers","OpenGL-specific implementation of texturing."],[3,"Texture","layers::texturegl","A texture."],[12,"target","","The texture target.",11],[12,"flip","","",11],[12,"size","","",11],[3,"BoundTexture","","Encapsulates a bound texture. This ensures that the texture is unbound\nproperly."],[12,"target","","",12],[4,"Format","",""],[13,"ARGB32Format","","",13],[13,"RGB24Format","","",13],[4,"FilterMode","",""],[13,"Nearest","","",14],[13,"Linear","","",14],[4,"TextureTarget","","The texture target."],[13,"TextureTarget2D","","TEXTURE_2D.",15],[13,"TextureTargetRectangle","","TEXTURE_RECTANGLE_ARB, with the size included.",15],[4,"Flip","","Whether a texture should be flipped."],[13,"NoFlip","","The texture should not be flipped.",16],[13,"VerticalFlip","","The texture should be flipped vertically.",16],[11,"drop","","",11],[11,"zero","","",11],[11,"is_zero","","",11],[11,"drop","","",12],[11,"new","","Creates a new blank texture.",11],[11,"new_with_buffer","","",11],[11,"native_texture","","Returns the raw OpenGL texture underlying this texture.",11],[11,"set_filter_mode","","Sets the filter mode for this texture.",11],[11,"bind","","Binds the texture to the current context.",11],[11,"eq","","",16],[11,"ne","","",16],[0,"tiling","layers",""],[3,"Tile","layers::tiling",""],[12,"texture","","A handle to the GPU texture.",17],[12,"transform","","The transformation applied to this tiles texture.",17],[12,"bounds","","The tile boundaries in the parent layer coordinates.",17],[3,"TileGrid","",""],[12,"tiles","","",18],[5,"rect_uint_as_rect_f32","",""],[11,"new","","",18],[11,"get_tile_index_range_for_rect","","",18],[11,"get_rect_for_tile_index","","",18],[11,"take_unused_buffers","","",18],[11,"add_unused_buffer","","",18],[11,"mark_tiles_outside_of_rect_as_unused","","",18],[11,"get_buffer_request_for_tile","","",18],[11,"get_buffer_requests_in_rect","","",18],[11,"get_tile_index_for_point","","",18],[11,"add_buffer","","",18],[11,"do_for_all_tiles","","",18],[11,"collect_buffers","","",18],[11,"create_textures","","",18],[0,"util","layers",""],[5,"convert_rgb32_to_rgb24","layers::util",""],[0,"platform","layers",""],[0,"linux","layers::platform",""],[0,"surface","layers::platform::linux","Implementation of cross-process surfaces for Linux. This uses X pixmaps."],[3,"NativePaintingGraphicsContext","layers::platform::linux::surface","The display and visual info. This is needed in order to upload on the painting side. This\nholds a weak reference to the display and will not close it when done."],[12,"display","","",19],[3,"NativeCompositingGraphicsContext","","The display, visual info, and framebuffer configuration. This is needed in order to bind to a\ntexture on the compositor side. This holds only a *weak* reference to the display and does not\nclose it."],[3,"NativeGraphicsMetadata","","The X display."],[12,"display","","",20],[3,"NativeGraphicsMetadataDescriptor","","A sendable form of the X display string."],[3,"PixmapNativeSurface","",""],[11,"from_metadata","","",19],[11,"from_display","","Creates a native graphics context from the given X display connection. This uses GLX. Only\nthe compositor is allowed to call this.",21],[11,"clone","","",20],[11,"from_descriptor","","Creates graphics metadata from a metadata descriptor.",20],[11,"encode","","",22],[11,"decode","","",22],[11,"clone","","",22],[11,"from_metadata","","Creates a metadata descriptor from metadata.",22],[11,"encode","","",23],[11,"decode","","",23],[11,"drop","","",23],[11,"from_skia_shared_gl_context","","",23],[11,"new","","",23],[11,"bind_to_texture","","This may only be called on the compositor side.",23],[11,"upload","","This may only be called on the painting side.",23],[11,"get_id","","",23],[11,"destroy","","",23],[11,"mark_will_leak","","",23],[11,"mark_wont_leak","","",23],[0,"surface","layers::platform","Implementation of cross-process surfaces. This delegates to the platform-specific\nimplementation."],[3,"MemoryBufferNativeSurface","layers::platform::surface",""],[4,"NativeSurface","",""],[13,"MemoryBuffer","","",24],[13,"Pixmap","","",24],[11,"new","","Creates a new native surface with uninitialized data.",24],[11,"from_draw_target_backing","","",24],[11,"bind_to_texture","","Binds the surface to a GPU texture. Compositing task only.",24],[11,"upload","","Uploads pixel data to the surface. Painting task only.",24],[11,"get_id","","Returns an opaque ID identifying the surface for debugging.",24],[11,"destroy","","Destroys the surface. After this, it is an error to use the surface. Painting task only.",24],[11,"mark_will_leak","","Records that the surface will leak if destroyed. This is done by the compositor immediately\nafter receiving the surface.",24],[11,"mark_wont_leak","","Marks the surface as not leaking. The painting task and the compositing task call this when\nthey are certain that the surface will not leak. For example:",24],[11,"encode","","",25],[11,"decode","","",25],[11,"new","","",25],[11,"bind_to_texture","","This may only be called on the compositor side.",25],[11,"upload","","This may only be called on the painting side.",25],[11,"get_id","","",25],[11,"destroy","","",25],[11,"mark_will_leak","","",25],[11,"mark_wont_leak","","",25],[11,"render","layers::tiling","",17]],"paths":[[3,"Color"],[4,"DevicePixel"],[4,"LayerPixel"],[3,"Layer"],[3,"BufferRequest"],[3,"LayerBuffer"],[3,"LayerBufferSet"],[3,"ContentAge"],[8,"Render"],[3,"RenderContext"],[3,"Scene"],[3,"Texture"],[3,"BoundTexture"],[4,"Format"],[4,"FilterMode"],[4,"TextureTarget"],[4,"Flip"],[3,"Tile"],[3,"TileGrid"],[3,"NativePaintingGraphicsContext"],[3,"NativeGraphicsMetadata"],[3,"NativeCompositingGraphicsContext"],[3,"NativeGraphicsMetadataDescriptor"],[3,"PixmapNativeSurface"],[4,"NativeSurface"],[3,"MemoryBufferNativeSurface"]]};
searchIndex['hyper'] = {"items":[[0,"","hyper","# Hyper\nHyper is a fast, modern HTTP implementation written in and for Rust. It\nis a low-level typesafe abstraction over raw HTTP, providing an elegant\nlayer over \"stringly-typed\" HTTP."],[0,"mime","",""],[11,"fmt","mime","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"clone","","",0],[11,"fmt","","",1],[11,"clone","","",1],[11,"eq","","",1],[11,"fmt","","",1],[6,"Err","hyper::mime",""],[11,"from_str","mime","",1],[11,"fmt","","",2],[11,"clone","","",2],[11,"eq","","",2],[11,"fmt","","",2],[6,"Err","hyper::mime",""],[11,"from_str","mime","",2],[11,"fmt","","",3],[11,"clone","","",3],[11,"eq","","",3],[11,"fmt","","",3],[6,"Err","hyper::mime",""],[11,"from_str","mime","",3],[11,"fmt","","",4],[11,"clone","","",4],[11,"eq","","",4],[11,"fmt","","",4],[6,"Err","hyper::mime",""],[11,"from_str","mime","",4],[11,"fmt","","",0],[6,"Err","hyper::mime",""],[11,"from_str","mime","",0],[3,"Mime","hyper::mime","Mime, or Media Type. Encapsulates common registers types."],[4,"TopLevel","",""],[13,"Star","","",1],[13,"Text","","",1],[13,"Image","","",1],[13,"Audio","","",1],[13,"Video","","",1],[13,"Application","","",1],[13,"Multipart","","",1],[13,"Message","","",1],[13,"Model","","",1],[13,"Ext","","",1],[4,"SubLevel","",""],[13,"Star","","",2],[13,"Plain","","",2],[13,"Html","","",2],[13,"Xml","","",2],[13,"Javascript","","",2],[13,"Css","","",2],[13,"Json","","",2],[13,"WwwFormUrlEncoded","","",2],[13,"FormData","","",2],[13,"Png","","",2],[13,"Gif","","",2],[13,"Bmp","","",2],[13,"Jpeg","","",2],[13,"Ext","","",2],[4,"Attr","",""],[13,"Charset","","",3],[13,"Q","","",3],[13,"Ext","","",3],[4,"Value","",""],[13,"Utf8","","",4],[13,"Ext","","",4],[6,"Param","",""],[11,"parse","url","Parse an URL with the default `UrlParser` parameters.",5],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",5],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",5],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",5],[11,"serialize","","Return the serialization of this URL as a string.",5],[11,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",5],[11,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",5],[11,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",5],[11,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",5],[11,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",5],[11,"username","","If the URL is in a *relative scheme*, return its username.",5],[11,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",5],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",5],[11,"password","","If the URL is in a *relative scheme*, return its password, if any.",5],[11,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",5],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",5],[11,"serialize_userinfo","","Serialize the URL's username and password, if any.",5],[11,"host","","If the URL is in a *relative scheme*, return its structured host.",5],[11,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",5],[11,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",5],[11,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",5],[11,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",5],[11,"port","","If the URL is in a *relative scheme* and has a port number, return it.",5],[11,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",5],[11,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",5],[11,"path","","If the URL is in a *relative scheme*, return its path components.",5],[11,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",5],[11,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",5],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",5],[11,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",5],[11,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",5],[11,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",5],[11,"utf8","url::encoding","",6],[11,"lookup","","",6],[11,"is_utf8","","",6],[11,"decode","","",6],[11,"encode","","",6],[11,"fmt","url::host","",7],[11,"clone","","",7],[11,"eq","","",7],[11,"ne","","",7],[11,"fmt","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"clone","","",8],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",7],[11,"serialize","","Serialize the host as a string.",7],[11,"fmt","","",7],[11,"parse","","Parse an IPv6 address, without the [] square brackets.",8],[11,"serialize","","Serialize the IPv6 address to a string.",8],[11,"fmt","","",8],[11,"fmt","url::parser","",9],[11,"clone","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"description","","",9],[11,"fmt","","",9],[11,"eq","","",10],[11,"ne","","",10],[6,"Item","hyper",""],[11,"next","url::parser","",11],[11,"fmt","url::format","",12],[11,"fmt","","",13],[11,"fmt","","",14],[11,"fmt","url","",5],[11,"clone","","",5],[11,"eq","","",5],[11,"ne","","",5],[11,"fmt","","",15],[11,"clone","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"fmt","","",16],[11,"clone","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"hash","","",5],[11,"new","","Return a new UrlParser with default parameters.",17],[11,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",17],[11,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",17],[11,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",17],[11,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",17],[11,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",17],[11,"fmt","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"default_port","","",18],[11,"same_as","","",18],[11,"encode","","",5],[11,"decode","","",5],[11,"fmt","","",5],[11,"fmt","","",15],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username.",16],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",16],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",16],[11,"domain","","If the host is a domain, return the domain as a string.",16],[11,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",16],[11,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",16],[11,"serialize_path","","Serialize the path as a string.",16],[11,"serialize_userinfo","","Serialize the userinfo as a string.",16],[11,"fmt","","",16],[11,"to_url_path","std::path","",19],[11,"to_url_path","std::old_path::posix","",20],[11,"to_url_path","std::old_path::windows","",21],[11,"from_url_path","std::path","",22],[11,"from_url_path","std::old_path::posix","",20],[11,"from_url_path","std::old_path::windows","",21],[3,"Url","hyper","The parsed representation of an absolute URL."],[12,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",5],[12,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",5],[12,"query","","The query string of the URL.",5],[12,"fragment","","The fragment identifier of the URL.",5],[4,"HttpError","","A set of errors that can occur parsing HTTP streams."],[13,"HttpMethodError","","An invalid `Method`, such as `GE,T`.",23],[13,"HttpUriError","","An invalid `RequestUri`, such as `exam ple.domain`.",23],[13,"HttpVersionError","","An invalid `HttpVersion`, such as `HTP/1.1`",23],[13,"HttpHeaderError","","An invalid `Header`.",23],[13,"HttpStatusError","","An invalid `Status`, such as `1337 ELITE`.",23],[13,"HttpIoError","","An `IoError` that occured while trying to read or write to a network stream.",23],[0,"client","","HTTP Client"],[3,"Client","hyper::client","A Client to use additional features with Requests."],[3,"RequestBuilder","","Options for an individual Request."],[4,"Body","","The target enum for the IntoBody trait."],[13,"ChunkedBody","","A Reader does not necessarily know it's size, so it is chunked.",24],[13,"SizedBody","","For Readers that can know their size, like a `File`.",24],[13,"BufBody","","A String has a size, and uses Content-Length.",24],[4,"RedirectPolicy","","Behavior regarding how to handle redirects within a Client."],[13,"FollowNone","","Don't follow any redirects.",25],[13,"FollowAll","","Follow all redirects.",25],[13,"FollowIf","","Follow a redirect if the contained function returns true.",25],[0,"request","","Client Requests"],[3,"Request","hyper::client::request","A client request to a remote server."],[12,"url","","The target URI for this request.",26],[12,"version","","The HTTP version of this request.",26],[11,"headers","","Read the Request headers.",26],[11,"method","","Read the Request method.",26],[11,"new","","Create a new client request.",26],[11,"with_connector","","Create a new client request with a specific underlying NetworkStream.",26],[11,"start","","Consume a Fresh Request, writing the headers and method,\nreturning a Streaming Request.",26],[11,"headers_mut","","Get a mutable reference to the Request headers.",26],[11,"send","","Completes writing the request, and returns a response to read from.",26],[11,"write","","",26],[11,"flush","","",26],[0,"response","hyper::client","Client Responses"],[3,"Response","hyper::client::response","A response for a client request to a remote server."],[12,"status","","The status from the server.",27],[12,"headers","","The headers from the server.",27],[12,"version","","The HTTP version of this response from the server.",27],[11,"new","","Creates a new response from a server.",27],[11,"status_raw","","Get the raw status code and reason.",27],[11,"into_inner","","Consumes the Request to return the NetworkStream underneath.",27],[11,"read","","",27],[8,"IntoBody","hyper::client","A helper trait to allow overloading of the body parameter."],[10,"into_body","","Consumes self into an instance of `Body`.",28],[8,"IntoUrl","","A helper trait to convert common objects into a Url."],[10,"into_url","","Consumes the object, trying to return a Url.",29],[11,"new","","Create a new Client.",30],[11,"set_ssl_verifier","","Set the SSL verifier callback for use with OpenSSL.",30],[11,"with_connector","","Create a new client with a specific connector.",30],[11,"set_redirect_policy","","Set the RedirectPolicy.",30],[11,"get","","Execute a Get request.",30],[11,"head","","Execute a Head request.",30],[11,"post","","Execute a Post request.",30],[11,"put","","Execute a Put request.",30],[11,"delete","","Execute a Delete request.",30],[11,"request","","Build a new request using this Client.",30],[11,"body","","Set a request body to be sent.",31],[11,"headers","","Add additional headers to the request.",31],[11,"header","","Add an individual new header to the request.",31],[11,"send","","Execute this request and receive a Response back.",31],[11,"read","","",24],[11,"into_body","","",24],[11,"into_url","hyper","",5],[11,"clone","hyper::client","",25],[11,"default","","",25],[0,"method","hyper","The HTTP request method"],[4,"Method","hyper::method","The Request Method (VERB)"],[13,"Options","","OPTIONS",32],[13,"Get","","GET",32],[13,"Post","","POST",32],[13,"Put","","PUT",32],[13,"Delete","","DELETE",32],[13,"Head","","HEAD",32],[13,"Trace","","TRACE",32],[13,"Connect","","CONNECT",32],[13,"Patch","","PATCH",32],[13,"Extension","","Method extentions. An example would be `let m = Extension(\"FOO\".to_string())`.",32],[11,"fmt","","",32],[11,"hash","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"clone","","",32],[11,"safe","","Whether a method is considered \"safe\", meaning the request is\nessentially read-only.",32],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has\nthe same result is executed multiple times.",32],[6,"Err","",""],[11,"from_str","","",32],[11,"fmt","","",32],[0,"header","hyper","Headers container, and common header fields."],[3,"EntityTag","hyper::header","An entity tag"],[12,"weak","","Weakness indicator for the tag",33],[12,"tag","","The opaque string in between the DQUOTEs",33],[3,"Quality","","Represents a quality used in quality values."],[3,"QualityItem","","Represents an item with a quality value as defined in\n[RFC7231](https://tools.ietf.org/html/rfc7231#section-5.3.1)."],[12,"item","","The actual contents of the field.",34],[12,"quality","","The quality (client or server preference) for the value.",34],[3,"AccessControlAllowHeaders","","The `Access-Control-Allow-Headers` response header,\npart of [CORS](http://www.w3.org/TR/cors/)."],[3,"AccessControlAllowMethods","","The `Access-Control-Allow-Methods` response header,\npart of [CORS](http://www.w3.org/TR/cors/)."],[3,"AccessControlMaxAge","","The `Access-Control-Max-Age` response header,\npart of [CORS](http://www.w3.org/TR/cors/)."],[3,"AccessControlRequestHeaders","","The `Access-Control-Request-Headers` request header,\npart of [CORS](http://www.w3.org/TR/cors/)."],[3,"AccessControlRequestMethod","","The `Access-Control-Request-Method` request header,\npart of [CORS](http://www.w3.org/TR/cors/)."],[3,"Accept","","The `Accept` header."],[3,"AcceptCharset","","The `Accept-Charset` header"],[3,"AcceptEncoding","","The `Accept-Encoding` header"],[3,"AcceptLanguage","","The `Accept-Language` header"],[3,"Allow","","The `Allow` header.\nSee also https://tools.ietf.org/html/rfc7231#section-7.4.1"],[3,"Authorization","","The `Authorization` header field."],[3,"Basic","","Credential holder for Basic Authentication"],[12,"username","","The username as a possibly empty string",35],[12,"password","","The password. `None` if the `:` delimiter character was not\npart of the parsed input.",35],[3,"CacheControl","","The Cache-Control header."],[3,"Connection","","The `Connection` header."],[3,"ContentLength","","The `Content-Length` header."],[3,"ContentType","","The `Content-Type` header."],[3,"Cookie","","The `Cookie` header. Defined in [RFC6265](tools.ietf.org/html/rfc6265#section-5.4):"],[3,"Date","","The `Date` header field."],[3,"Etag","","The `Etag` header."],[3,"Expires","","The `Expires` header field."],[3,"Host","","The `Host` header."],[12,"hostname","","The hostname, such a example.domain.",36],[12,"port","","An optional port number.",36],[3,"IfModifiedSince","","The `If-Modified-Since` header field."],[3,"IfUnmodifiedSince","","The `If-Unmodified-Since` header field."],[3,"LastModified","","The `LastModified` header field."],[3,"Location","","The `Location` header."],[3,"Referer","","The `Referer` header."],[3,"Server","","The `Server` header field."],[3,"SetCookie","","The `Set-Cookie` header"],[3,"TransferEncoding","","The `Transfer-Encoding` header."],[3,"Upgrade","","The `Upgrade` header."],[3,"UserAgent","","The `User-Agent` header field."],[3,"Headers","","A map of header fields on requests and responses."],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map."],[3,"HeaderView","","Returned with the `HeadersItems` iterator."],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls fmt_header."],[4,"Charset","","A Mime charset."],[13,"Us_Ascii","","US ASCII",37],[13,"Iso_8859_1","","ISO-8859-1",37],[13,"Iso_8859_2","","ISO-8859-2",37],[13,"Iso_8859_3","","ISO-8859-3",37],[13,"Iso_8859_4","","ISO-8859-4",37],[13,"Iso_8859_5","","ISO-8859-5",37],[13,"Iso_8859_6","","ISO-8859-6",37],[13,"Iso_8859_7","","ISO-8859-7",37],[13,"Iso_8859_8","","ISO-8859-8",37],[13,"Iso_8859_9","","ISO-8859-9",37],[13,"Iso_8859_10","","ISO-8859-10",37],[13,"Shift_Jis","","Shift_JIS",37],[13,"Euc_Jp","","EUC-JP",37],[13,"Iso_2022_Kr","","ISO-2022-KR",37],[13,"Euc_Kr","","EUC-KR",37],[13,"Iso_2022_Jp","","ISO-2022-JP",37],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",37],[13,"Iso_8859_6_E","","ISO-8859-6-E",37],[13,"Iso_8859_6_I","","ISO-8859-6-I",37],[13,"Iso_8859_8_E","","ISO-8859-8-E",37],[13,"Iso_8859_8_I","","ISO-8859-8-I",37],[13,"Gb2312","","GB2312",37],[13,"Big5","","Big5",37],[13,"Koi8_R","","KOI8-R",37],[13,"Ext","","An arbitrary charset specified as a string",37],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding`\nor `Accept-Encoding` header."],[13,"Chunked","","The `chunked` encoding.",38],[13,"Gzip","","The `gzip` encoding.",38],[13,"Deflate","","The `deflate` encoding.",38],[13,"Compress","","The `compress` encoding.",38],[13,"Identity","","The `identity` encoding.",38],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",38],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header,\npart of [CORS](http://www.w3.org/TR/cors/)."],[13,"AllowStar","","Allow all origins",39],[13,"AllowOrigin","","Allow one particular origin",39],[4,"CacheDirective","","CacheControl contains a list of these directives."],[13,"NoCache","","\"no-cache\"",40],[13,"NoStore","","\"no-store\"",40],[13,"NoTransform","","\"no-transform\"",40],[13,"OnlyIfCached","","\"only-if-cached\"",40],[13,"MaxAge","","\"max-age=delta\"",40],[13,"MaxStale","","\"max-stale=delta\"",40],[13,"MinFresh","","\"min-fresh=delta\"",40],[13,"MustRevalidate","","\"must-revalidate\"",40],[13,"Public","","\"public\"",40],[13,"Private","","\"private\"",40],[13,"ProxyRevalidate","","\"proxy-revalidate\"",40],[13,"SMaxAge","","\"s-maxage=delta\"",40],[13,"Extension","","Extension directives. Optionally include an argument.",40],[4,"ConnectionOption","","Values that can be in the `Connection` header."],[13,"KeepAlive","","The `keep-alive` connection value.",41],[13,"Close","","The `close` connection value.",41],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",41],[4,"IfMatch","","The `If-Match` header"],[13,"Any","","This corresponds to '*'.",42],[13,"EntityTags","","The header field names which will influence the response representation.",42],[4,"IfNoneMatch","","The `If-None-Match` header defined by HTTP/1.1."],[13,"Any","","This corresponds to '*'.",43],[13,"EntityTags","","The header field names which will influence the response representation.",43],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0."],[13,"NoCache","","Corresponds to the `no-cache` value.",44],[13,"Ext","","Every value other than `no-cache`.",44],[4,"Protocol","","Protocol values that can appear in the Upgrade header."],[13,"WebSocket","","The websocket protocol.",45],[13,"ProtocolExt","","Some other less common protocol.",45],[4,"Vary","","The `Allow` header.\nSee also https://tools.ietf.org/html/rfc7231#section-7.1.4"],[13,"Any","","This corresponds to '*'.",46],[13,"Headers","","The header field names which will influence the response representation.",46],[5,"qitem","","Convinience function to wrap a value in a `QualityItem`\nSets `q` to the default 1.0"],[5,"q","","Convenience function to create a `Quality` fromt a float."],[11,"fmt","","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"clone","","",47],[11,"header_name","","",47],[11,"parse_header","","",47],[11,"fmt_header","","",47],[11,"fmt","","",48],[11,"eq","","",48],[11,"ne","","",48],[11,"clone","","",48],[11,"header_name","","",48],[11,"parse_header","","",48],[11,"fmt_header","","",48],[11,"fmt","","",39],[11,"eq","","",39],[11,"ne","","",39],[11,"clone","","",39],[11,"header_name","","",39],[11,"parse_header","","",39],[11,"fmt_header","","",39],[11,"fmt","","",49],[11,"eq","","",49],[11,"ne","","",49],[11,"clone","","",49],[11,"header_name","","",49],[11,"parse_header","","",49],[11,"fmt_header","","",49],[11,"fmt","","",50],[11,"eq","","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"header_name","","",50],[11,"parse_header","","",50],[11,"fmt_header","","",50],[11,"fmt","","",51],[11,"eq","","",51],[11,"ne","","",51],[11,"clone","","",51],[11,"header_name","","",51],[11,"parse_header","","",51],[11,"fmt_header","","",51],[11,"fmt","","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"clone","","",47],[11,"header_name","","",47],[11,"parse_header","","",47],[11,"fmt_header","","",47],[11,"fmt","","",48],[11,"eq","","",48],[11,"ne","","",48],[11,"clone","","",48],[11,"header_name","","",48],[11,"parse_header","","",48],[11,"fmt_header","","",48],[11,"fmt","","",39],[11,"eq","","",39],[11,"ne","","",39],[11,"clone","","",39],[11,"header_name","","",39],[11,"parse_header","","",39],[11,"fmt_header","","",39],[11,"fmt","","",49],[11,"eq","","",49],[11,"ne","","",49],[11,"clone","","",49],[11,"header_name","","",49],[11,"parse_header","","",49],[11,"fmt_header","","",49],[11,"fmt","","",50],[11,"eq","","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"header_name","","",50],[11,"parse_header","","",50],[11,"fmt_header","","",50],[11,"fmt","","",51],[11,"eq","","",51],[11,"ne","","",51],[11,"clone","","",51],[11,"header_name","","",51],[11,"parse_header","","",51],[11,"fmt_header","","",51],[11,"fmt","","",52],[11,"eq","","",52],[11,"ne","","",52],[11,"clone","","",52],[11,"deref","","",52],[11,"deref_mut","","",52],[11,"header_name","","",52],[11,"parse_header","","",52],[11,"fmt_header","","",52],[11,"fmt","","",52],[11,"fmt","","",53],[11,"eq","","",53],[11,"ne","","",53],[11,"clone","","",53],[11,"deref","","",53],[11,"deref_mut","","",53],[11,"header_name","","",53],[11,"parse_header","","",53],[11,"fmt_header","","",53],[11,"fmt","","",53],[11,"fmt","","",54],[11,"eq","","",54],[11,"ne","","",54],[11,"clone","","",54],[11,"deref","","",54],[11,"deref_mut","","",54],[11,"header_name","","",54],[11,"parse_header","","",54],[11,"fmt_header","","",54],[11,"fmt","","",54],[11,"fmt","","",55],[11,"eq","","",55],[11,"ne","","",55],[11,"clone","","",55],[11,"deref","","",55],[11,"deref_mut","","",55],[11,"header_name","","",55],[11,"parse_header","","",55],[11,"fmt_header","","",55],[11,"fmt","","",55],[11,"fmt","","",56],[11,"eq","","",56],[11,"ne","","",56],[11,"clone","","",56],[11,"deref","","",56],[11,"deref_mut","","",56],[11,"header_name","","",56],[11,"parse_header","","",56],[11,"fmt_header","","",56],[11,"fmt","","",56],[11,"fmt","","",57],[11,"eq","","",57],[11,"ne","","",57],[11,"clone","","",57],[11,"deref","","",57],[11,"deref_mut","","",57],[11,"header_name","","",57],[11,"parse_header","","",57],[11,"fmt_header","","",57],[11,"scheme","collections::string","",58],[11,"fmt_scheme","","",58],[11,"fmt","hyper::header","",35],[11,"eq","","",35],[11,"ne","","",35],[11,"clone","","",35],[11,"scheme","","",35],[11,"fmt_scheme","","",35],[11,"from_str","","",35],[11,"fmt","","",59],[11,"clone","","",59],[11,"eq","","",59],[11,"ne","","",59],[11,"deref","","",59],[11,"deref_mut","","",59],[11,"header_name","","",59],[11,"parse_header","","",59],[11,"fmt_header","","",59],[11,"fmt","","",40],[11,"clone","","",40],[11,"eq","","",40],[11,"ne","","",40],[11,"fmt","","",40],[11,"from_str","","",40],[11,"fmt","","",60],[11,"eq","","",60],[11,"ne","","",60],[11,"clone","","",60],[11,"deref","","",60],[11,"deref_mut","","",60],[11,"header_name","","",60],[11,"parse_header","","",60],[11,"fmt_header","","",60],[11,"to_cookie_jar","","This method can be used to create CookieJar that can be used\nto manipulate cookies and create a corresponding `SetCookie` header afterwards.",60],[11,"from_cookie_jar","","Extracts all cookies from `CookieJar` and creates Cookie header.\nUseful for clients.",60],[11,"fmt","","",61],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[11,"deref","","",61],[11,"deref_mut","","",61],[11,"fmt","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"from_str","","",41],[11,"fmt","","",41],[11,"header_name","","",61],[11,"parse_header","","",61],[11,"fmt_header","","",61],[11,"fmt","","",62],[11,"eq","","",62],[11,"ne","","",62],[11,"clone","","",62],[11,"deref","","",62],[11,"deref_mut","","",62],[11,"header_name","","",62],[11,"parse_header","","",62],[11,"fmt_header","","",62],[11,"fmt","","",62],[11,"fmt","","",63],[11,"eq","","",63],[11,"ne","","",63],[11,"clone","","",63],[11,"deref","","",63],[11,"deref_mut","","",63],[11,"header_name","","",63],[11,"parse_header","","",63],[11,"fmt_header","","",63],[11,"fmt","","",63],[11,"fmt","","",64],[11,"clone","","",64],[11,"eq","","",64],[11,"ne","","",64],[11,"deref","","",64],[11,"deref_mut","","",64],[11,"header_name","","",64],[11,"parse_header","","",64],[11,"fmt_header","","",64],[11,"from_str","","",64],[11,"fmt","","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"clone","","",65],[11,"deref","","",65],[11,"deref_mut","","",65],[11,"header_name","","",65],[11,"parse_header","","",65],[11,"fmt_header","","",65],[11,"fmt","","",66],[11,"clone","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"deref","","",66],[11,"deref_mut","","",66],[11,"header_name","","",66],[11,"parse_header","","",66],[11,"fmt_header","","",66],[11,"from_str","","",66],[11,"fmt","","",36],[11,"eq","","",36],[11,"ne","","",36],[11,"clone","","",36],[11,"header_name","","",36],[11,"parse_header","","",36],[11,"fmt_header","","",36],[11,"fmt","","",42],[11,"eq","","",42],[11,"ne","","",42],[11,"clone","","",42],[11,"header_name","","",42],[11,"parse_header","","",42],[11,"fmt_header","","",42],[11,"fmt","","",67],[11,"clone","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"deref","","",67],[11,"deref_mut","","",67],[11,"header_name","","",67],[11,"parse_header","","",67],[11,"fmt_header","","",67],[11,"from_str","","",67],[11,"fmt","","",68],[11,"clone","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"deref","","",68],[11,"deref_mut","","",68],[11,"header_name","","",68],[11,"parse_header","","",68],[11,"fmt_header","","",68],[11,"from_str","","",68],[11,"fmt","","",43],[11,"eq","","",43],[11,"ne","","",43],[11,"clone","","",43],[11,"header_name","","",43],[11,"parse_header","","",43],[11,"fmt_header","","",43],[11,"fmt","","",69],[11,"clone","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"deref","","",69],[11,"deref_mut","","",69],[11,"header_name","","",69],[11,"parse_header","","",69],[11,"fmt_header","","",69],[11,"from_str","","",69],[11,"fmt","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"clone","","",70],[11,"deref","","",70],[11,"deref_mut","","",70],[11,"header_name","","",70],[11,"parse_header","","",70],[11,"fmt_header","","",70],[11,"fmt","","",70],[11,"fmt","","",44],[11,"eq","","",44],[11,"ne","","",44],[11,"clone","","",44],[11,"header_name","","",44],[11,"parse_header","","",44],[11,"fmt_header","","",44],[11,"fmt","","",71],[11,"eq","","",71],[11,"ne","","",71],[11,"clone","","",71],[11,"deref","","",71],[11,"deref_mut","","",71],[11,"header_name","","",71],[11,"parse_header","","",71],[11,"fmt_header","","",71],[11,"fmt","","",71],[11,"fmt","","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"deref","","",72],[11,"deref_mut","","",72],[11,"header_name","","",72],[11,"parse_header","","",72],[11,"fmt_header","","",72],[11,"fmt","","",72],[11,"fmt","","",73],[11,"eq","","",73],[11,"ne","","",73],[11,"clone","","",73],[11,"deref","","",73],[11,"deref_mut","","",73],[11,"header_name","","",73],[11,"parse_header","","",73],[11,"fmt_header","","",73],[11,"from_cookie_jar","","Use this to create SetCookie header from CookieJar using\ncalculated delta.",73],[11,"apply_to_cookie_jar","","Use this on client to apply changes from SetCookie to CookieJar.\nNote that this will `panic!` if `CookieJar` is not root.",73],[11,"fmt","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"deref","","",74],[11,"deref_mut","","",74],[11,"header_name","","",74],[11,"parse_header","","",74],[11,"fmt_header","","",74],[11,"fmt","","",74],[11,"fmt","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"clone","","",75],[11,"deref","","",75],[11,"deref_mut","","",75],[11,"fmt","","",45],[11,"eq","","",45],[11,"ne","","",45],[11,"clone","","",45],[11,"from_str","","",45],[11,"fmt","","",45],[11,"header_name","","",75],[11,"parse_header","","",75],[11,"fmt_header","","",75],[11,"fmt","","",76],[11,"eq","","",76],[11,"ne","","",76],[11,"clone","","",76],[11,"deref","","",76],[11,"deref_mut","","",76],[11,"header_name","","",76],[11,"parse_header","","",76],[11,"fmt_header","","",76],[11,"fmt","","",76],[11,"fmt","","",46],[11,"eq","","",46],[11,"ne","","",46],[11,"clone","","",46],[11,"header_name","","",46],[11,"parse_header","","",46],[11,"fmt_header","","",46],[11,"fmt","","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"clone","","",47],[11,"header_name","","",47],[11,"parse_header","","",47],[11,"fmt_header","","",47],[11,"fmt","","",48],[11,"eq","","",48],[11,"ne","","",48],[11,"clone","","",48],[11,"header_name","","",48],[11,"parse_header","","",48],[11,"fmt_header","","",48],[11,"fmt","","",39],[11,"eq","","",39],[11,"ne","","",39],[11,"clone","","",39],[11,"header_name","","",39],[11,"parse_header","","",39],[11,"fmt_header","","",39],[11,"fmt","","",49],[11,"eq","","",49],[11,"ne","","",49],[11,"clone","","",49],[11,"header_name","","",49],[11,"parse_header","","",49],[11,"fmt_header","","",49],[11,"fmt","","",50],[11,"eq","","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"header_name","","",50],[11,"parse_header","","",50],[11,"fmt_header","","",50],[11,"fmt","","",51],[11,"eq","","",51],[11,"ne","","",51],[11,"clone","","",51],[11,"header_name","","",51],[11,"parse_header","","",51],[11,"fmt_header","","",51],[11,"fmt","","",52],[11,"eq","","",52],[11,"ne","","",52],[11,"clone","","",52],[11,"deref","","",52],[11,"deref_mut","","",52],[11,"header_name","","",52],[11,"parse_header","","",52],[11,"fmt_header","","",52],[11,"fmt","","",52],[11,"fmt","","",53],[11,"eq","","",53],[11,"ne","","",53],[11,"clone","","",53],[11,"deref","","",53],[11,"deref_mut","","",53],[11,"header_name","","",53],[11,"parse_header","","",53],[11,"fmt_header","","",53],[11,"fmt","","",53],[11,"fmt","","",54],[11,"eq","","",54],[11,"ne","","",54],[11,"clone","","",54],[11,"deref","","",54],[11,"deref_mut","","",54],[11,"header_name","","",54],[11,"parse_header","","",54],[11,"fmt_header","","",54],[11,"fmt","","",54],[11,"fmt","","",55],[11,"eq","","",55],[11,"ne","","",55],[11,"clone","","",55],[11,"deref","","",55],[11,"deref_mut","","",55],[11,"header_name","","",55],[11,"parse_header","","",55],[11,"fmt_header","","",55],[11,"fmt","","",55],[11,"fmt","","",56],[11,"eq","","",56],[11,"ne","","",56],[11,"clone","","",56],[11,"deref","","",56],[11,"deref_mut","","",56],[11,"header_name","","",56],[11,"parse_header","","",56],[11,"fmt_header","","",56],[11,"fmt","","",56],[11,"fmt","","",57],[11,"eq","","",57],[11,"ne","","",57],[11,"clone","","",57],[11,"deref","","",57],[11,"deref_mut","","",57],[11,"header_name","","",57],[11,"parse_header","","",57],[11,"fmt_header","","",57],[11,"scheme","collections::string","",58],[11,"fmt_scheme","","",58],[11,"fmt","hyper::header","",35],[11,"eq","","",35],[11,"ne","","",35],[11,"clone","","",35],[11,"scheme","","",35],[11,"fmt_scheme","","",35],[11,"from_str","","",35],[11,"fmt","","",59],[11,"clone","","",59],[11,"eq","","",59],[11,"ne","","",59],[11,"deref","","",59],[11,"deref_mut","","",59],[11,"header_name","","",59],[11,"parse_header","","",59],[11,"fmt_header","","",59],[11,"fmt","","",40],[11,"clone","","",40],[11,"eq","","",40],[11,"ne","","",40],[11,"fmt","","",40],[11,"from_str","","",40],[11,"fmt","","",60],[11,"eq","","",60],[11,"ne","","",60],[11,"clone","","",60],[11,"deref","","",60],[11,"deref_mut","","",60],[11,"header_name","","",60],[11,"parse_header","","",60],[11,"fmt_header","","",60],[11,"to_cookie_jar","","This method can be used to create CookieJar that can be used\nto manipulate cookies and create a corresponding `SetCookie` header afterwards.",60],[11,"from_cookie_jar","","Extracts all cookies from `CookieJar` and creates Cookie header.\nUseful for clients.",60],[11,"fmt","","",61],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[11,"deref","","",61],[11,"deref_mut","","",61],[11,"fmt","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"from_str","","",41],[11,"fmt","","",41],[11,"header_name","","",61],[11,"parse_header","","",61],[11,"fmt_header","","",61],[11,"fmt","","",62],[11,"eq","","",62],[11,"ne","","",62],[11,"clone","","",62],[11,"deref","","",62],[11,"deref_mut","","",62],[11,"header_name","","",62],[11,"parse_header","","",62],[11,"fmt_header","","",62],[11,"fmt","","",62],[11,"fmt","","",63],[11,"eq","","",63],[11,"ne","","",63],[11,"clone","","",63],[11,"deref","","",63],[11,"deref_mut","","",63],[11,"header_name","","",63],[11,"parse_header","","",63],[11,"fmt_header","","",63],[11,"fmt","","",63],[11,"fmt","","",64],[11,"clone","","",64],[11,"eq","","",64],[11,"ne","","",64],[11,"deref","","",64],[11,"deref_mut","","",64],[11,"header_name","","",64],[11,"parse_header","","",64],[11,"fmt_header","","",64],[11,"from_str","","",64],[11,"fmt","","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"clone","","",65],[11,"deref","","",65],[11,"deref_mut","","",65],[11,"header_name","","",65],[11,"parse_header","","",65],[11,"fmt_header","","",65],[11,"fmt","","",66],[11,"clone","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"deref","","",66],[11,"deref_mut","","",66],[11,"header_name","","",66],[11,"parse_header","","",66],[11,"fmt_header","","",66],[11,"from_str","","",66],[11,"fmt","","",36],[11,"eq","","",36],[11,"ne","","",36],[11,"clone","","",36],[11,"header_name","","",36],[11,"parse_header","","",36],[11,"fmt_header","","",36],[11,"fmt","","",42],[11,"eq","","",42],[11,"ne","","",42],[11,"clone","","",42],[11,"header_name","","",42],[11,"parse_header","","",42],[11,"fmt_header","","",42],[11,"fmt","","",67],[11,"clone","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"deref","","",67],[11,"deref_mut","","",67],[11,"header_name","","",67],[11,"parse_header","","",67],[11,"fmt_header","","",67],[11,"from_str","","",67],[11,"fmt","","",68],[11,"clone","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"deref","","",68],[11,"deref_mut","","",68],[11,"header_name","","",68],[11,"parse_header","","",68],[11,"fmt_header","","",68],[11,"from_str","","",68],[11,"fmt","","",43],[11,"eq","","",43],[11,"ne","","",43],[11,"clone","","",43],[11,"header_name","","",43],[11,"parse_header","","",43],[11,"fmt_header","","",43],[11,"fmt","","",69],[11,"clone","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"deref","","",69],[11,"deref_mut","","",69],[11,"header_name","","",69],[11,"parse_header","","",69],[11,"fmt_header","","",69],[11,"from_str","","",69],[11,"fmt","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"clone","","",70],[11,"deref","","",70],[11,"deref_mut","","",70],[11,"header_name","","",70],[11,"parse_header","","",70],[11,"fmt_header","","",70],[11,"fmt","","",70],[11,"fmt","","",44],[11,"eq","","",44],[11,"ne","","",44],[11,"clone","","",44],[11,"header_name","","",44],[11,"parse_header","","",44],[11,"fmt_header","","",44],[11,"fmt","","",71],[11,"eq","","",71],[11,"ne","","",71],[11,"clone","","",71],[11,"deref","","",71],[11,"deref_mut","","",71],[11,"header_name","","",71],[11,"parse_header","","",71],[11,"fmt_header","","",71],[11,"fmt","","",71],[11,"fmt","","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"deref","","",72],[11,"deref_mut","","",72],[11,"header_name","","",72],[11,"parse_header","","",72],[11,"fmt_header","","",72],[11,"fmt","","",72],[11,"fmt","","",73],[11,"eq","","",73],[11,"ne","","",73],[11,"clone","","",73],[11,"deref","","",73],[11,"deref_mut","","",73],[11,"header_name","","",73],[11,"parse_header","","",73],[11,"fmt_header","","",73],[11,"from_cookie_jar","","Use this to create SetCookie header from CookieJar using\ncalculated delta.",73],[11,"apply_to_cookie_jar","","Use this on client to apply changes from SetCookie to CookieJar.\nNote that this will `panic!` if `CookieJar` is not root.",73],[11,"fmt","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"deref","","",74],[11,"deref_mut","","",74],[11,"header_name","","",74],[11,"parse_header","","",74],[11,"fmt_header","","",74],[11,"fmt","","",74],[11,"fmt","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"clone","","",75],[11,"deref","","",75],[11,"deref_mut","","",75],[11,"fmt","","",45],[11,"eq","","",45],[11,"ne","","",45],[11,"clone","","",45],[11,"from_str","","",45],[11,"fmt","","",45],[11,"header_name","","",75],[11,"parse_header","","",75],[11,"fmt_header","","",75],[11,"fmt","","",76],[11,"eq","","",76],[11,"ne","","",76],[11,"clone","","",76],[11,"deref","","",76],[11,"deref_mut","","",76],[11,"header_name","","",76],[11,"parse_header","","",76],[11,"fmt_header","","",76],[11,"fmt","","",76],[11,"fmt","","",46],[11,"eq","","",46],[11,"ne","","",46],[11,"clone","","",46],[11,"header_name","","",46],[11,"parse_header","","",46],[11,"fmt_header","","",46],[11,"eq","","",37],[11,"ne","","",37],[11,"fmt","","",37],[11,"clone","","",37],[11,"fmt","","",37],[11,"from_str","","",37],[11,"fmt","","",38],[11,"eq","","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"fmt","","",38],[11,"from_str","","",38],[11,"fmt","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"clone","","",33],[11,"fmt","","",33],[11,"from_str","","",33],[11,"partial_cmp","","",77],[11,"lt","","",77],[11,"le","","",77],[11,"gt","","",77],[11,"ge","","",77],[11,"eq","","",77],[11,"ne","","",77],[11,"cmp","","",77],[11,"fmt","","",77],[11,"clone","","",77],[11,"fmt","","",77],[11,"from_i64","","",77],[11,"from_u64","","",77],[11,"from_f64","","",77],[11,"to_i64","","",77],[11,"to_u64","","",77],[11,"to_f64","","",77],[11,"default","","",77],[11,"fmt","","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"clone","","",34],[11,"new","","Creates a new `QualityItem` from an item and a quality.\nThe item can be of any type.\nThe quality should be a value in the range [0, 1].",34],[11,"partial_cmp","","",34],[11,"fmt","","",34],[11,"from_str","","",34],[0,"parsing","","Utility functions for Header implementations."],[5,"from_one_raw_str","hyper::header::parsing","Reads a single raw string when parsing a header"],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec."],[5,"from_one_comma_delimited","","Reads a comma-delimited raw string into a Vec."],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string."],[5,"tm_from_str","","Get a Tm from HTTP date formats."],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header."],[10,"scheme","","An optional Scheme name.",78],[10,"fmt_scheme","","Format the Scheme data into a header value.",78],[8,"Header","","A trait for any object that will represent a header field and value."],[10,"header_name","","Returns the name of the header field this belongs to.",79],[10,"parse_header","","Parse a header from a raw stream of bytes.",79],[8,"HeaderFormat","","A trait for any object that will represent a header field and value."],[10,"fmt_header","","Format a header to be output into a TcpStream.",80],[11,"clone","alloc::boxed","",81],[11,"clone","hyper::header","",82],[11,"new","","Creates a new, empty headers map.",82],[11,"set","","Set a header field to the corresponding value.",82],[11,"get_raw","","Access the raw value of a header.",82],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",82],[11,"remove_raw","","Remove a header set by set_raw",82],[11,"get","","Get a reference to the header field's value, if it exists.",82],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",82],[11,"has","","Returns a boolean of whether a certain header is in the map.",82],[11,"remove","","Removes a header from the map, if one existed.\nReturns true if a header has been removed.",82],[11,"iter","","Returns an iterator over the header fields.",82],[11,"len","","Returns the number of headers in the map.",82],[11,"clear","","Remove all headers from the map.",82],[11,"fmt","","",82],[11,"fmt","","",82],[6,"Item","",""],[11,"next","","",83],[11,"is","","Check if a HeaderView is a certain Header.",84],[11,"name","","Get the Header name as a slice.",84],[11,"value","","Cast the value to a certain Header type.",84],[11,"value_string","","Get just the header value as a String.",84],[11,"fmt","","",84],[11,"fmt","","",84],[11,"extend","","",82],[11,"from_iter","","",82],[11,"fmt","","",85],[11,"fmt","","",85],[0,"http","hyper","Pieces pertaining to the HTTP message protocol."],[3,"RawStatus","hyper::http","The raw status code and reason-phrase."],[4,"HttpReader","","Readers to handle different Transfer-Encodings."],[13,"SizedReader","","A Reader used when a Content-Length header is passed with a positive integer.",86],[13,"ChunkedReader","","A Reader used when Transfer-Encoding is `chunked`.",86],[13,"EofReader","","A Reader used for responses that don't indicate a length or chunked.",86],[13,"EmptyReader","","A Reader used for messages that should never have a body.",86],[4,"HttpWriter","","Writers to handle different Transfer-Encodings."],[13,"ThroughWriter","","A no-op Writer, used initially before Transfer-Encoding is determined.",87],[13,"ChunkedWriter","","A Writer for when Transfer-Encoding includes `chunked`.",87],[13,"SizedWriter","","A Writer for when Content-Length is set.",87],[13,"EmptyWriter","","A writer that should not write any body.",87],[5,"is_token","","Determines if byte is a token char."],[5,"read_method","","Read a `Method` from a raw stream, such as `GET`.\n### Note:\nExtension methods are only parsed to 16 characters."],[5,"read_uri","","Read a `RequestUri` from a raw stream."],[5,"read_http_version","","Read the `HttpVersion` from a raw stream, such as `HTTP/1.1`."],[5,"read_header","","Read a RawHeaderLine from a Reader."],[5,"read_request_line","","Read the `RequestLine`, such as `GET / HTTP/1.1`."],[5,"read_status_line","","Read the StatusLine, such as `HTTP/1.1 200 OK`."],[5,"read_status","","Read the StatusCode from a stream."],[6,"RawHeaderLine","","The raw bytes when parsing a header line."],[6,"RequestLine","","`request-line   = method SP request-target SP HTTP-version CRLF`"],[6,"StatusLine","","`status-line = HTTP-version SP status-code SP reason-phrase CRLF`"],[17,"SP","",""],[17,"CR","",""],[17,"LF","",""],[17,"STAR","",""],[17,"LINE_ENDING","",""],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",86],[11,"read","","",86],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",87],[11,"get_ref","","Access the inner Writer.",87],[11,"get_mut","","Access the inner Writer mutably.",87],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",87],[11,"write","","",87],[11,"flush","","",87],[11,"fmt","","",88],[11,"eq","","",88],[11,"ne","","",88],[11,"clone","","",88],[0,"net","hyper","A collection of traits abstracting over Listeners and Streams."],[3,"NetworkConnections","hyper::net","An iterator wrapper over a NetworkAcceptor."],[3,"HttpConnector","","A connector that will produce HttpStreams."],[4,"Fresh","","The write-status indicating headers have not been written."],[4,"Streaming","","The write-status indicating headers have been written."],[4,"HttpListener","","A `NetworkListener` for `HttpStream`s."],[13,"Http","","Http variant.",89],[13,"Https","","Https variant. The two paths point to the certificate and key PEM files, in that order.",89],[4,"HttpStream","","A wrapper around a TcpStream."],[13,"Http","","A stream over the HTTP protocol.",90],[13,"Https","","A stream over the HTTP protocol, protected by SSL.",90],[6,"ContextVerifier","","A method that can set verification methods on an SSL context"],[8,"NetworkListener","","An abstraction to listen for connections on a certain port."],[16,"Stream","hyper::net::NetworkListener","The stream produced for each connection."],[10,"accept","hyper::net","Listens on a socket.\nReturns an iterator of streams.",91],[10,"socket_addr","","Get the address this Listener ended up listening on.",91],[11,"incoming","","Closes the Acceptor, so no more incoming connections will be handled.\nReturns an iterator over incoming connections.",91],[8,"NetworkStream","","An abstraction over streams that a Server can utilize."],[10,"peer_addr","","Get the remote address of the underlying connection.",92],[8,"NetworkConnector","","A connector creates a NetworkStream."],[16,"Stream","hyper::net::NetworkConnector","Type of Stream to create"],[10,"connect","hyper::net","Connect to a remote address.",93],[6,"Item","",""],[11,"next","","",94],[11,"fmt","alloc::boxed","",81],[11,"clone","","",81],[11,"is","hyper","Is the underlying type in this trait object a T?",92],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",92],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",92],[11,"downcast","","If the underlying type is T, extract it.",92],[11,"clone","hyper::net","",89],[11,"http","","Start listening to an address over HTTP.",89],[11,"https","","Start listening to an address over HTTPS.",89],[6,"Stream","",""],[11,"accept","","",89],[11,"socket_addr","","",89],[11,"clone","","",90],[11,"read","","",90],[11,"write","","",90],[11,"flush","","",90],[11,"peer_addr","","",90],[6,"Stream","",""],[11,"connect","","",95],[0,"server","hyper","HTTP Server"],[3,"Server","hyper::server","A server can listen on a TCP socket."],[3,"Listening","","A listening server, which can later be closed."],[12,"socket","","The socket addresses that the server is bound to.",96],[0,"request","","Server Requests"],[3,"Request","hyper::server::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`."],[12,"remote_addr","","The IP address of the remote connection.",97],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",97],[12,"headers","","The headers of the incoming request.",97],[12,"uri","","The target request-uri for this request.",97],[12,"version","","The version of HTTP for this request.",97],[11,"new","","Create a new Request, reading the StartLine and Headers so they are\nimmediately useful.",97],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",97],[11,"read","","",97],[0,"response","hyper::server","Server Responses"],[3,"Response","hyper::server::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`."],[12,"version","","The HTTP version of this response.",98],[11,"status","","The status of this response.",98],[11,"headers","","The headers of this response.",98],[11,"construct","","Construct a Response from its constituent parts.",98],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",98],[11,"new","","Creates a new Response that can be used to write to a network stream.",98],[11,"start","","Consume this Response<Fresh>, writing the Headers and Status and creating a Response<Streaming>",98],[11,"status_mut","","Get a mutable reference to the status.",98],[11,"headers_mut","","Get a mutable reference to the Headers.",98],[11,"end","","Flushes all writing of a response to the client.",98],[11,"write","","",98],[11,"flush","","",98],[8,"Handler","hyper::server","A handler that can handle incoming requests for a server."],[10,"handle","","Receives a `Request`/`Response` pair, and should perform some action on them.",99],[11,"new","","",100],[11,"http","","Creates a new server that will handle `HttpStream`s.",100],[11,"https","","Creates a new server that will handler `HttpStreams`s using a TLS connection.",100],[11,"listen_threads","","Binds to a socket, and starts handling connections using a task pool.",100],[11,"listen","","Binds to a socket and starts handling connections.",100],[11,"with_listener","","Creates a new server that will handle `HttpStream`s.",100],[11,"close","","Stop the server from listening to its socket address.",96],[0,"status","hyper","HTTP status codes"],[4,"StatusCode","hyper::status","An HTTP status code (`status-code` in RFC 7230 et al.)."],[13,"Continue","","100 Continue\n[[RFC7231, Section 6.2.1](https://tools.ietf.org/html/rfc7231#section-6.2.1)]",101],[13,"SwitchingProtocols","","101 Switching Protocols\n[[RFC7231, Section 6.2.2](https://tools.ietf.org/html/rfc7231#section-6.2.2)]",101],[13,"Processing","","102 Processing\n[[RFC2518](https://tools.ietf.org/html/rfc2518)]",101],[13,"Ok","","200 OK\n[[RFC7231, Section 6.3.1](https://tools.ietf.org/html/rfc7231#section-6.3.1)]",101],[13,"Created","","201 Created\n[[RFC7231, Section 6.3.2](https://tools.ietf.org/html/rfc7231#section-6.3.2)]",101],[13,"Accepted","","202 Accepted\n[[RFC7231, Section 6.3.3](https://tools.ietf.org/html/rfc7231#section-6.3.3)]",101],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information\n[[RFC7231, Section 6.3.4](https://tools.ietf.org/html/rfc7231#section-6.3.4)]",101],[13,"NoContent","","204 No Content\n[[RFC7231, Section 6.3.5](https://tools.ietf.org/html/rfc7231#section-6.3.5)]",101],[13,"ResetContent","","205 Reset Content\n[[RFC7231, Section 6.3.6](https://tools.ietf.org/html/rfc7231#section-6.3.6)]",101],[13,"PartialContent","","206 Partial Content\n[[RFC7233, Section 4.1](https://tools.ietf.org/html/rfc7233#section-4.1)]",101],[13,"MultiStatus","","207 Multi-Status\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",101],[13,"AlreadyReported","","208 Already Reported\n[[RFC5842](https://tools.ietf.org/html/rfc5842)]",101],[13,"ImUsed","","226 IM Used\n[[RFC3229](https://tools.ietf.org/html/rfc3229)]",101],[13,"MultipleChoices","","300 Multiple Choices\n[[RFC7231, Section 6.4.1](https://tools.ietf.org/html/rfc7231#section-6.4.1)]",101],[13,"MovedPermanently","","301 Moved Permanently\n[[RFC7231, Section 6.4.2](https://tools.ietf.org/html/rfc7231#section-6.4.2)]",101],[13,"Found","","302 Found\n[[RFC7231, Section 6.4.3](https://tools.ietf.org/html/rfc7231#section-6.4.3)]",101],[13,"SeeOther","","303 See Other\n[[RFC7231, Section 6.4.4](https://tools.ietf.org/html/rfc7231#section-6.4.4)]",101],[13,"NotModified","","304 Not Modified\n[[RFC7232, Section 4.1](https://tools.ietf.org/html/rfc7232#section-4.1)]",101],[13,"UseProxy","","305 Use Proxy\n[[RFC7231, Section 6.4.5](https://tools.ietf.org/html/rfc7231#section-6.4.5)]",101],[13,"TemporaryRedirect","","307 Temporary Redirect\n[[RFC7231, Section 6.4.7](https://tools.ietf.org/html/rfc7231#section-6.4.7)]",101],[13,"PermanentRedirect","","308 Permanent Redirect\n[[RFC7238](https://tools.ietf.org/html/rfc7238)]",101],[13,"BadRequest","","400 Bad Request\n[[RFC7231, Section 6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)]",101],[13,"Unauthorized","","401 Unauthorized\n[[RFC7235, Section 3.1](https://tools.ietf.org/html/rfc7235#section-3.1)]",101],[13,"PaymentRequired","","402 Payment Required\n[[RFC7231, Section 6.5.2](https://tools.ietf.org/html/rfc7231#section-6.5.2)]",101],[13,"Forbidden","","403 Forbidden\n[[RFC7231, Section 6.5.3](https://tools.ietf.org/html/rfc7231#section-6.5.3)]",101],[13,"NotFound","","404 Not Found\n[[RFC7231, Section 6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)]",101],[13,"MethodNotAllowed","","405 Method Not Allowed\n[[RFC7231, Section 6.5.5](https://tools.ietf.org/html/rfc7231#section-6.5.5)]",101],[13,"NotAcceptable","","406 Not Acceptable\n[[RFC7231, Section 6.5.6](https://tools.ietf.org/html/rfc7231#section-6.5.6)]",101],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required\n[[RFC7235, Section 3.2](https://tools.ietf.org/html/rfc7235#section-3.2)]",101],[13,"RequestTimeout","","408 Request Timeout\n[[RFC7231, Section 6.5.7](https://tools.ietf.org/html/rfc7231#section-6.5.7)]",101],[13,"Conflict","","409 Conflict\n[[RFC7231, Section 6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8)]",101],[13,"Gone","","410 Gone\n[[RFC7231, Section 6.5.9](https://tools.ietf.org/html/rfc7231#section-6.5.9)]",101],[13,"LengthRequired","","411 Length Required\n[[RFC7231, Section 6.5.10](https://tools.ietf.org/html/rfc7231#section-6.5.10)]",101],[13,"PreconditionFailed","","412 Precondition Failed\n[[RFC7232, Section 4.2](https://tools.ietf.org/html/rfc7232#section-4.2)]",101],[13,"PayloadTooLarge","","413 Payload Too Large\n[[RFC7231, Section 6.5.11](https://tools.ietf.org/html/rfc7231#section-6.5.11)]",101],[13,"UriTooLong","","414 URI Too Long\n[[RFC7231, Section 6.5.12](https://tools.ietf.org/html/rfc7231#section-6.5.12)]",101],[13,"UnsupportedMediaType","","415 Unsupported Media Type\n[[RFC7231, Section 6.5.13](https://tools.ietf.org/html/rfc7231#section-6.5.13)]",101],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable\n[[RFC7233, Section 4.4](https://tools.ietf.org/html/rfc7233#section-4.4)]",101],[13,"ExpectationFailed","","417 Expectation Failed\n[[RFC7231, Section 6.5.14](https://tools.ietf.org/html/rfc7231#section-6.5.14)]",101],[13,"ImATeapot","","418 I'm a teapot\n[curiously, not registered by IANA, but [RFC2324](https://tools.ietf.org/html/rfc2324)]",101],[13,"UnprocessableEntity","","422 Unprocessable Entity\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",101],[13,"Locked","","423 Locked\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",101],[13,"FailedDependency","","424 Failed Dependency\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",101],[13,"UpgradeRequired","","426 Upgrade Required\n[[RFC7231, Section 6.5.15](https://tools.ietf.org/html/rfc7231#section-6.5.15)]",101],[13,"PreconditionRequired","","428 Precondition Required\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",101],[13,"TooManyRequests","","429 Too Many Requests\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",101],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",101],[13,"InternalServerError","","500 Internal Server Error\n[[RFC7231, Section 6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)]",101],[13,"NotImplemented","","501 Not Implemented\n[[RFC7231, Section 6.6.2](https://tools.ietf.org/html/rfc7231#section-6.6.2)]",101],[13,"BadGateway","","502 Bad Gateway\n[[RFC7231, Section 6.6.3](https://tools.ietf.org/html/rfc7231#section-6.6.3)]",101],[13,"ServiceUnavailable","","503 Service Unavailable\n[[RFC7231, Section 6.6.4](https://tools.ietf.org/html/rfc7231#section-6.6.4)]",101],[13,"GatewayTimeout","","504 Gateway Timeout\n[[RFC7231, Section 6.6.5](https://tools.ietf.org/html/rfc7231#section-6.6.5)]",101],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported\n[[RFC7231, Section 6.6.6](https://tools.ietf.org/html/rfc7231#section-6.6.6)]",101],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates\n[[RFC2295](https://tools.ietf.org/html/rfc2295)]",101],[13,"InsufficientStorage","","507 Insufficient Storage\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",101],[13,"LoopDetected","","508 Loop Detected\n[[RFC5842](https://tools.ietf.org/html/rfc5842)]",101],[13,"NotExtended","","510 Not Extended\n[[RFC2774](https://tools.ietf.org/html/rfc2774)]",101],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",101],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",101],[4,"StatusClass","","The class of an HTTP `status-code`."],[13,"Informational","","1xx (Informational): The request was received, continuing process",102],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",102],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",102],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",102],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",102],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",102],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",101],[11,"class","","Determine the class of a status code, based on its first digit.",101],[11,"is_informational","","Check if class is Informational.",101],[11,"is_success","","Check if class is Success.",101],[11,"is_redirection","","Check if class is Redirection.",101],[11,"is_client_error","","Check if class is ClientError.",101],[11,"is_server_error","","Check if class is ServerError.",101],[11,"is_strange_status","","Check if class is NoClass",101],[11,"fmt","","",101],[11,"fmt","","",101],[11,"eq","","",101],[11,"clone","","",101],[11,"from_i64","","",101],[11,"from_u64","","",101],[11,"partial_cmp","","",101],[11,"cmp","","",101],[11,"to_i64","","",101],[11,"to_u64","","",101],[11,"cmp","","",102],[11,"partial_cmp","","",102],[11,"lt","","",102],[11,"le","","",102],[11,"gt","","",102],[11,"ge","","",102],[11,"eq","","",102],[11,"ne","","",102],[11,"clone","","",102],[11,"default_code","","Get the default status code for the class.",102],[11,"to_i64","","",102],[11,"to_u64","","",102],[0,"uri","hyper","HTTP RequestUris"],[4,"RequestUri","hyper::uri","The Request-URI of a Request's StartLine."],[13,"AbsolutePath","","The most common request target, an absolute path and optional query.",103],[13,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",103],[13,"Authority","","The authority form is only for use with `CONNECT` requests.",103],[13,"Star","","The star is used to target the entire server, instead of a specific resource.",103],[11,"clone","","",103],[11,"eq","","",103],[11,"ne","","",103],[11,"fmt","","",103],[0,"version","hyper","HTTP Versions enum"],[4,"HttpVersion","hyper::version","Represents a version of the HTTP spec."],[13,"Http09","","`HTTP/0.9`",104],[13,"Http10","","`HTTP/1.0`",104],[13,"Http11","","`HTTP/1.1`",104],[13,"Http20","","`HTTP/2.0`",104],[11,"fmt","","",104],[11,"partial_cmp","","",104],[11,"lt","","",104],[11,"le","","",104],[11,"gt","","",104],[11,"ge","","",104],[11,"eq","","",104],[11,"ne","","",104],[11,"fmt","","",104],[6,"HttpResult","hyper","Result type often returned from methods that can have `HttpError`s."],[11,"clone","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"fmt","","",23],[11,"fmt","","",23],[11,"description","","",23],[11,"cause","","",23],[11,"from_error","","",23],[11,"from_error","","",23],[14,"bench_header!","",""],[14,"deref!","",""],[14,"impl_list_header!","",""],[14,"impl_header!","",""]],"paths":[[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"],[3,"Url"],[3,"EncodingOverride"],[4,"Host"],[3,"Ipv6Address"],[4,"ParseError"],[4,"Context"],[3,"CharRanges"],[3,"PathFormatter"],[3,"UserInfoFormatter"],[3,"UrlNoFragmentFormatter"],[4,"SchemeData"],[3,"RelativeSchemeData"],[3,"UrlParser"],[4,"SchemeType"],[3,"Path"],[3,"Path"],[3,"Path"],[3,"PathBuf"],[4,"HttpError"],[4,"Body"],[4,"RedirectPolicy"],[3,"Request"],[3,"Response"],[8,"IntoBody"],[8,"IntoUrl"],[3,"Client"],[3,"RequestBuilder"],[4,"Method"],[3,"EntityTag"],[3,"QualityItem"],[3,"Basic"],[3,"Host"],[4,"Charset"],[4,"Encoding"],[4,"AccessControlAllowOrigin"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"Pragma"],[4,"Protocol"],[4,"Vary"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"Accept"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"Allow"],[3,"Authorization"],[3,"String"],[3,"CacheControl"],[3,"Cookie"],[3,"Connection"],[3,"ContentLength"],[3,"ContentType"],[3,"Date"],[3,"Etag"],[3,"Expires"],[3,"LastModified"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"Location"],[3,"Referer"],[3,"Server"],[3,"SetCookie"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"UserAgent"],[3,"Quality"],[8,"Scheme"],[8,"Header"],[8,"HeaderFormat"],[3,"Box"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"HeaderFormatter"],[4,"HttpReader"],[4,"HttpWriter"],[3,"RawStatus"],[4,"HttpListener"],[4,"HttpStream"],[8,"NetworkListener"],[8,"NetworkStream"],[8,"NetworkConnector"],[3,"NetworkConnections"],[3,"HttpConnector"],[3,"Listening"],[3,"Request"],[3,"Response"],[8,"Handler"],[3,"Server"],[4,"StatusCode"],[4,"StatusClass"],[4,"RequestUri"],[4,"HttpVersion"]]};
searchIndex['io_surface'] = {"items":[],"paths":[]};
searchIndex['azure'] = {"items":[[0,"","azure",""],[0,"azure_hl","","High-level bindings to Azure."],[3,"ColorPattern","azure::azure_hl",""],[12,"azure_color_pattern","","",0],[3,"StrokeOptions","",""],[12,"line_width","","",1],[12,"miter_limit","","",1],[12,"mDashPattern","","",1],[12,"fields","","",1],[3,"DrawOptions","",""],[12,"alpha","","",2],[12,"fields","","",2],[3,"DrawSurfaceOptions","",""],[12,"filter","","",3],[12,"sampling_bounds","","",3],[3,"DrawTarget","",""],[12,"azure_draw_target","","",4],[12,"backing","","",4],[3,"SourceSurface","",""],[12,"azure_source_surface","","",5],[3,"GradientStops","",""],[12,"azure_gradient_stops","","",6],[3,"GradientStop","",""],[12,"offset","","",7],[12,"color","","",7],[3,"DataSourceSurface","",""],[12,"azure_data_source_surface","","",8],[3,"Path","",""],[12,"azure_path","","",9],[3,"PathBuilder","",""],[12,"azure_path_builder","","",10],[3,"LinearGradientPattern","",""],[12,"azure_linear_gradient_pattern","","",11],[3,"RadialGradientPattern","",""],[12,"azure_radial_gradient_pattern","","",12],[3,"FilterNode","",""],[12,"azure_filter_node","","",13],[3,"ColorMatrixInput","",""],[3,"CompositeInput","",""],[3,"FloodFilterInput","",""],[3,"GaussianBlurInput","",""],[3,"LinearTransferInput","",""],[3,"TableTransferInput","",""],[3,"Matrix5x4","",""],[12,"m11","","",14],[12,"m12","","",14],[12,"m13","","",14],[12,"m14","","",14],[12,"m21","","",14],[12,"m22","","",14],[12,"m23","","",14],[12,"m24","","",14],[12,"m31","","",14],[12,"m32","","",14],[12,"m33","","",14],[12,"m34","","",14],[12,"m41","","",14],[12,"m42","","",14],[12,"m43","","",14],[12,"m44","","",14],[12,"m51","","",14],[12,"m52","","",14],[12,"m53","","",14],[12,"m54","","",14],[4,"CompositionOp","",""],[13,"Over","","",15],[13,"Add","","",15],[13,"Atop","","",15],[13,"Out","","",15],[13,"In","","",15],[13,"Source","","",15],[13,"DestIn","","",15],[13,"DestOut","","",15],[13,"DestOver","","",15],[13,"DestAtop","","",15],[13,"Xor","","",15],[13,"Multiply","","",15],[13,"Screen","","",15],[13,"Overlay","","",15],[13,"Darken","","",15],[13,"Lighten","","",15],[13,"ColorDodge","","",15],[13,"ColorBurn","","",15],[13,"HardLight","","",15],[13,"SoftLight","","",15],[13,"Difference","","",15],[13,"Exclusion","","",15],[13,"Hue","","",15],[13,"Saturation","","",15],[13,"Color","","",15],[13,"Luminosity","","",15],[13,"Count","","",15],[4,"JoinStyle","",""],[13,"Bevel","","",16],[13,"Round","","",16],[13,"Miter","","",16],[13,"MiterOrBevel","","",16],[4,"CapStyle","",""],[13,"Butt","","",17],[13,"Round","","",17],[13,"Square","","",17],[4,"SurfaceFormat","",""],[13,"B8G8R8A8","","",18],[13,"B8G8R8X8","","",18],[13,"R8G8B8A8","","",18],[13,"R8G8B8X8","","",18],[13,"R5G6B5","","",18],[13,"A8","","",18],[13,"YUV","","",18],[13,"UNKNOWN","","",18],[4,"Filter","",""],[13,"Good","","",19],[13,"Linear","","",19],[13,"Point","","",19],[4,"BackendType","",""],[13,"None","","",20],[13,"Direct2D","","",20],[13,"CoreGraphics","","",20],[13,"CoreGraphicsAccelerated","","",20],[13,"Cairo","","",20],[13,"Skia","","",20],[13,"Recording","","",20],[13,"Direct2D11","","",20],[13,"NVPathRendering","","",20],[4,"DrawTargetBacking","",""],[13,"Empty","","",21],[13,"Data","","",21],[13,"SkiaContext","","",21],[4,"ExtendMode","",""],[13,"Clamp","","",22],[13,"Repeat","","",22],[13,"Reflect","","",22],[4,"PatternRef","",""],[13,"Color","","",23],[13,"LinearGradient","","",23],[13,"RadialGradient","","",23],[4,"Pattern","",""],[13,"Color","","",24],[13,"LinearGradient","","",24],[13,"RadialGradient","","",24],[4,"ColorMatrixAttribute","",""],[13,"Matrix","","",25],[4,"FloodAttribute","",""],[13,"Color","","",26],[4,"GaussianBlurAttribute","",""],[13,"StdDeviation","","",27],[4,"LinearTransferAttribute","",""],[13,"DisableR","","",28],[13,"DisableG","","",28],[13,"DisableB","","",28],[13,"DisableA","","",28],[13,"SlopeR","","",28],[13,"SlopeG","","",28],[13,"SlopeB","","",28],[13,"SlopeA","","",28],[13,"InterceptR","","",28],[13,"InterceptG","","",28],[13,"InterceptB","","",28],[13,"InterceptA","","",28],[4,"TableTransferAttribute","",""],[13,"DisableR","","",29],[13,"DisableG","","",29],[13,"DisableB","","",29],[13,"DisableA","","",29],[13,"TableR","","",29],[13,"TableG","","",29],[13,"TableB","","",29],[13,"TableA","","",29],[4,"FilterType","",""],[13,"ColorMatrix","","",30],[13,"Composite","","",30],[13,"Flood","","",30],[13,"GaussianBlur","","",30],[13,"LinearTransfer","","",30],[13,"TableTransfer","","",30],[5,"clone_mutable_draw_target","",""],[8,"AsAzureRect","",""],[10,"as_azure_rect","","",31],[8,"AsAzureIntSize","",""],[10,"as_azure_int_size","","",32],[8,"AsAzurePoint","",""],[10,"as_azure_point","","",33],[8,"SourceSurfaceMethods","",""],[10,"get_azure_source_surface","","",34],[11,"size","","",34],[11,"format","","",34],[8,"FilterInputIndex","",""],[10,"azure_index","","",35],[8,"FilterAttribute","",""],[10,"set","","",36],[8,"FilterInput","",""],[10,"set","","",37],[11,"as_azure_rect","geom::rect","",38],[11,"as_azure_int_size","geom::size","",39],[11,"as_azure_point","geom::point","",40],[11,"drop","azure::azure_hl","",0],[11,"new","","",0],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"new","","",1],[11,"new","","",2],[11,"set_composition_op","","",2],[11,"set_antialias_mode","","",2],[11,"new","","",18],[11,"as_azure_filter","","",19],[11,"new","","",3],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"as_azure_backend_type","","",20],[11,"drop","","",4],[11,"eq","","",4],[11,"new","","",4],[11,"new_with_data","","",4],[11,"new_with_fbo","","",4],[11,"clone","","",4],[11,"make_current","","",4],[11,"steal_draw_target_backing","","Consumes this draw target and returns the underlying draw target backing.",4],[11,"get_size","","",4],[11,"get_format","","",4],[11,"get_transform","","",4],[11,"flush","","",4],[11,"clear_rect","","",4],[11,"fill","","",4],[11,"fill_rect","","",4],[11,"stroke","","",4],[11,"stroke_line","","",4],[11,"stroke_rect","","",4],[11,"draw_surface","","",4],[11,"draw_filter","","",4],[11,"draw_surface_with_shadow","","",4],[11,"snapshot","","",4],[11,"create_source_surface_from_data","","",4],[11,"create_similar_draw_target","","",4],[11,"create_shadow_draw_target","","",4],[11,"create_gradient_stops","","",4],[11,"set_transform","","",4],[11,"fill_glyphs","","",4],[11,"create_path_builder","","",4],[11,"create_filter","","",4],[11,"push_clip","","",4],[11,"push_clip_rect","","",4],[11,"pop_clip","","",4],[11,"drop","","",21],[11,"clone","","",21],[11,"make_current","","",21],[11,"flush","","",21],[11,"drop","","",5],[11,"new","","",5],[11,"drop","","",6],[11,"new","","",6],[11,"clone","","",7],[11,"eq","","",22],[11,"ne","","",22],[11,"clone","","",22],[11,"get_data_surface","","",5],[11,"get_azure_source_surface","","",5],[11,"drop","","",8],[11,"with_data","","",8],[11,"stride","","",8],[11,"get_size","","",8],[11,"get_azure_source_surface","","",8],[11,"drop","","",9],[11,"move_to","","",10],[11,"line_to","","",10],[11,"arc","","Adds an arc to the current figure.",10],[11,"quadratic_curve_to","","Adds a quadratic Bézier curve to the current figure.",10],[11,"bezier_curve_to","","Adds a cubic Bézier curve to the current figure.",10],[11,"close","","Closes the current path.",10],[11,"finish","","",10],[11,"drop","","",10],[11,"drop","","",11],[11,"new","","",11],[11,"drop","","",12],[11,"new","","",12],[11,"to_pattern_ref","","",24],[11,"drop","","",13],[11,"set_input","","",13],[11,"set_attribute","","",13],[11,"azure_index","","",41],[11,"azure_index","","",42],[11,"azure_index","","",43],[11,"azure_index","","",44],[11,"azure_index","","",45],[11,"azure_index","","",46],[11,"set","","",25],[11,"set","","",26],[11,"set","","",27],[11,"set","","",28],[11,"set","","",29],[11,"as_azure_filter_type","","",30],[11,"set","","",5],[11,"set","","",13],[11,"fmt","","",14],[11,"clone","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"as_azure_matrix_5x4","","",14],[0,"scaled_font","azure",""],[3,"ScaledFont","azure::scaled_font",""],[4,"FontInfo","",""],[13,"NativeFont","","",47],[13,"FontData","","",47],[0,"linux","",""],[6,"FT_Face","azure::scaled_font::linux",""],[17,"FT_LOAD_DEFAULT","",""],[6,"SkTypeface","azure::scaled_font",""],[11,"drop","","",48],[11,"get_ref","","",48],[11,"new","","",48],[0,"azure","azure",""],[3,"struct__AzColor","azure::azure",""],[12,"r","","",49],[12,"g","","",49],[12,"b","","",49],[12,"a","","",49],[3,"struct__AzGradientStop","",""],[12,"offset","","",50],[12,"color","","",50],[3,"struct__AzIntRect","",""],[12,"x","","",51],[12,"y","","",51],[12,"width","","",51],[12,"height","","",51],[3,"struct__AzRect","",""],[12,"x","","",52],[12,"y","","",52],[12,"width","","",52],[12,"height","","",52],[3,"struct__AzIntPoint","",""],[12,"x","","",53],[12,"y","","",53],[3,"struct__AzPoint","",""],[12,"x","","",54],[12,"y","","",54],[3,"struct__AzIntSize","",""],[12,"width","","",55],[12,"height","","",55],[3,"struct__AzSize","",""],[12,"width","","",56],[12,"height","","",56],[3,"struct__AzMatrix","",""],[3,"struct__AzMatrix5x4","",""],[12,"_11","","",57],[12,"_12","","",57],[12,"_13","","",57],[12,"_14","","",57],[12,"_21","","",57],[12,"_22","","",57],[12,"_23","","",57],[12,"_24","","",57],[12,"_31","","",57],[12,"_32","","",57],[12,"_33","","",57],[12,"_34","","",57],[12,"_41","","",57],[12,"_42","","",57],[12,"_43","","",57],[12,"_44","","",57],[12,"_51","","",57],[12,"_52","","",57],[12,"_53","","",57],[12,"_54","","",57],[3,"struct__AzDrawOptions","",""],[12,"mAlpha","","",58],[12,"fields","","",58],[3,"struct__AzStrokeOptions","",""],[12,"mLineWidth","","",59],[12,"mMiterLimit","","",59],[12,"mDashPattern","","",59],[12,"mDashLength","","",59],[12,"mDashOffset","","",59],[12,"fields","","",59],[3,"struct__AzDrawSurfaceOptions","",""],[12,"filter","","",60],[12,"sampling_bounds","","",60],[3,"struct__AzGlyph","",""],[12,"mIndex","","",61],[12,"mPosition","","",61],[3,"struct__AzGlyphBuffer","",""],[12,"mGlyphs","","",62],[12,"mNumGlyphs","","",62],[3,"struct__AzNativeFont","",""],[12,"mType","","",63],[12,"mFont","","",63],[5,"AzSanityCheck","",""],[5,"AzCreateColorPattern","",""],[5,"AzReleasePattern","",""],[5,"AzCreateDrawTarget","",""],[5,"AzCreateDrawTargetForData","",""],[5,"AzCreateDrawTargetSkiaWithGrContextAndFBO","",""],[5,"AzRetainDrawTarget","",""],[5,"AzReleaseDrawTarget","",""],[5,"AzDrawTargetGetSize","",""],[5,"AzDrawTargetGetFormat","",""],[5,"AzDrawTargetGetTransform","",""],[5,"AzDrawTargetFlush","",""],[5,"AzDrawTargetClearRect","",""],[5,"AzDrawTargetFillRect","",""],[5,"AzDrawTargetStrokeRect","",""],[5,"AzDrawTargetStrokeLine","",""],[5,"AzDrawTargetFill","",""],[5,"AzDrawTargetStroke","",""],[5,"AzDrawTargetPushClip","",""],[5,"AzDrawTargetPushClipRect","",""],[5,"AzDrawTargetPopClip","",""],[5,"AzDrawTargetFillGlyphs","",""],[5,"AzDrawTargetDrawSurface","",""],[5,"AzDrawTargetDrawFilter","",""],[5,"AzDrawTargetDrawSurfaceWithShadow","",""],[5,"AzDrawTargetGetSnapshot","",""],[5,"AzDrawTargetCreateSourceSurfaceFromData","",""],[5,"AzDrawTargetCreateSimilarDrawTarget","",""],[5,"AzDrawTargetCreateShadowDrawTarget","",""],[5,"AzDrawTargetCreateGradientStops","",""],[5,"AzDrawTargetCreateFilter","",""],[5,"AzCreateLinearGradientPattern","",""],[5,"AzCreateRadialGradientPattern","",""],[5,"AzReleaseSourceSurface","",""],[5,"AzSourceSurfaceGetSize","",""],[5,"AzSourceSurfaceGetFormat","",""],[5,"AzSourceSurfaceGetDataSurface","",""],[5,"AzDataSourceSurfaceGetData","",""],[5,"AzDataSourceSurfaceGetStride","",""],[5,"AzCreateScaledFontForNativeFont","",""],[5,"AzCreateScaledFontForTrueTypeData","",""],[5,"AzReleaseScaledFont","",""],[5,"AzDrawTargetSetTransform","",""],[5,"AzCreateFontOptionsForName","",""],[5,"AzDestroyFontOptions","",""],[5,"AzCreatePathBuilder","",""],[5,"AzReleasePathBuilder","",""],[5,"AzPathBuilderMoveTo","",""],[5,"AzPathBuilderLineTo","",""],[5,"AzPathBuilderArc","",""],[5,"AzPathBuilderBezierTo","",""],[5,"AzPathBuilderQuadraticBezierTo","",""],[5,"AzPathBuilderClose","",""],[5,"AzPathBuilderFinish","",""],[5,"AzReleasePath","",""],[5,"AzReleaseGradientStops","",""],[5,"AzReleaseFilterNode","",""],[5,"AzFilterNodeSetSourceSurfaceInput","",""],[5,"AzFilterNodeSetFilterNodeInput","",""],[5,"AzFilterNodeSetFloatAttribute","",""],[5,"AzFilterNodeSetFloatArrayAttribute","",""],[5,"AzFilterNodeSetColorAttribute","",""],[5,"AzFilterNodeSetMatrix5x4Attribute","",""],[5,"AzFilterNodeSetBoolAttribute","",""],[6,"AzFontOptions","",""],[6,"AzFloat","",""],[6,"enum_AzSurfaceType","",""],[6,"enum_AzSurfaceFormat","",""],[6,"AzSurfaceFormat","",""],[6,"enum_AzBackendType","",""],[6,"AzBackendType","",""],[6,"enum_AzFilterType","",""],[6,"AzFilterType","",""],[6,"enum_AzFontType","",""],[6,"enum_AzNativeSurfaceType","",""],[6,"enum_AzNativeFontType","",""],[6,"enum_AzFontStyle","",""],[6,"enum_AzCompositionOp","",""],[6,"AzCompositionOp","",""],[6,"enum_AzExtendMode","",""],[6,"enum_AzFillRule","",""],[6,"enum_AzAntialiasMode","",""],[6,"enum_AzFilter","",""],[6,"AzFilter","",""],[6,"enum_AzPatternType","",""],[6,"enum_AzJoinStyle","",""],[6,"AzJoinStyle","",""],[6,"enum_AzCapStyle","",""],[6,"AzCapStyle","",""],[6,"enum_AzSamplingBounds","",""],[6,"enum_AzSide","",""],[6,"enum_AzColorMatrixFilterAtts","",""],[6,"enum_AzColorMatrixFilterInputs","",""],[6,"enum_AzCompositeFilterInputs","",""],[6,"enum_AzFloodFilterAtts","",""],[6,"enum_AzFloodFilterInputs","",""],[6,"enum_AzGaussianBlurAtts","",""],[6,"enum_AzGaussianBlurInputs","",""],[6,"enum_LinearTransferAtts","",""],[6,"enum_AzLinearTransferInputs","",""],[6,"enum_AzTableTransferAtts","",""],[6,"enum_AzTableTransferInputs","",""],[6,"enum_TransferAtts","",""],[6,"AzColor","",""],[6,"AzGradientStop","",""],[6,"AzIntRect","",""],[6,"AzRect","",""],[6,"AzIntPoint","",""],[6,"AzPoint","",""],[6,"AzIntSize","",""],[6,"AzSize","",""],[6,"AzMatrix","",""],[6,"AzMatrix5x4","",""],[6,"AzDrawOptions","",""],[6,"AzStrokeOptions","",""],[6,"AzDrawSurfaceOptions","",""],[6,"AzGlyph","",""],[6,"AzGlyphBuffer","",""],[6,"AzNativeFont","",""],[6,"AzGradientStopsRef","",""],[6,"AzDrawTargetRef","",""],[6,"AzPatternRef","",""],[6,"AzColorPatternRef","",""],[6,"AzLinearGradientPatternRef","",""],[6,"AzRadialGradientPatternRef","",""],[6,"AzScaledFontRef","",""],[6,"AzGlyphRenderingOptionsRef","",""],[6,"AzSourceSurfaceRef","",""],[6,"AzDataSourceSurfaceRef","",""],[6,"AzDrawSurfaceOptionsRef","",""],[6,"AzGLContext","",""],[6,"AzGLContextMetadataRef","",""],[6,"AzPathRef","",""],[6,"AzPathBuilderRef","",""],[6,"AzFilterNodeRef","",""],[6,"AzExtendMode","",""],[7,"AZ_SURFACE_DATA","",""],[7,"AZ_SURFACE_D2D1_BITMAP","",""],[7,"AZ_SURFACE_D2D1_DRAWTARGET","",""],[7,"AZ_SURFACE_CAIRO","",""],[7,"AZ_SURFACE_CAIRO_IMAGE","",""],[7,"AZ_SURFACE_COREGRAPHICS_IMAGE","",""],[7,"AZ_SURFACE_COREGRAPHICS_CGCONTEXT","",""],[7,"AZ_SURFACE_SKIA","",""],[7,"AZ_SURFACE_DUAL_DT","",""],[7,"AZ_SURFACE_D2D1_1_IMAGE","",""],[7,"AZ_SURFACE_RECORDING","",""],[7,"AZ_SURFACE_NVPR_TEXTURE","",""],[7,"AZ_SURFACE_TILED","",""],[7,"AZ_FORMAT_B8G8R8A8","",""],[7,"AZ_FORMAT_B8G8R8X8","",""],[7,"AZ_FORMAT_R8G8B8A8","",""],[7,"AZ_FORMAT_R8G8B8X8","",""],[7,"AZ_FORMAT_R5G6B5","",""],[7,"AZ_FORMAT_A8","",""],[7,"AZ_FORMAT_YUV","",""],[7,"AZ_FORMAT_UNKNOWN","",""],[7,"AZ_BACKEND_NONE","",""],[7,"AZ_BACKEND_DIRECT2D","",""],[7,"AZ_BACKEND_COREGRAPHICS","",""],[7,"AZ_BACKEND_COREGRAPHICS_ACCELERATED","",""],[7,"AZ_BACKEND_CAIRO","",""],[7,"AZ_BACKEND_SKIA","",""],[7,"AZ_BACKEND_RECORDING","",""],[7,"AZ_BACKEND_DIRECT2D1_1","",""],[7,"AZ_BACKEND_NVP","",""],[7,"AZ_FILTER_TYPE_BLEND","",""],[7,"AZ_FILTER_TYPE_TRANSFORM","",""],[7,"AZ_FILTER_TYPE_MORPHOLOGY","",""],[7,"AZ_FILTER_TYPE_COLOR_MATRIX","",""],[7,"AZ_FILTER_TYPE_FLOOD","",""],[7,"AZ_FILTER_TYPE_TILE","",""],[7,"AZ_FILTER_TYPE_TABLE_TRANSFER","",""],[7,"AZ_FILTER_TYPE_DISCRETE_TRANSFER","",""],[7,"AZ_FILTER_TYPE_LINEAR_TRANSFER","",""],[7,"AZ_FILTER_TYPE_GAMMA_TRANSFER","",""],[7,"AZ_FILTER_TYPE_CONVOLVE_MATRIX","",""],[7,"AZ_FILTER_TYPE_DISPLACEMENT_MAP","",""],[7,"AZ_FILTER_TYPE_TURBULENCE","",""],[7,"AZ_FILTER_TYPE_ARITHMETIC_COMBINE","",""],[7,"AZ_FILTER_TYPE_COMPOSITE","",""],[7,"AZ_FILTER_TYPE_DIRECTIONAL_BLUR","",""],[7,"AZ_FILTER_TYPE_GAUSSIAN_BLUR","",""],[7,"AZ_FILTER_TYPE_POINT_DIFFUSE","",""],[7,"AZ_FILTER_TYPE_POINT_SPECULAR","",""],[7,"AZ_FILTER_TYPE_SPOT_DIFFUSE","",""],[7,"AZ_FILTER_TYPE_SPOT_SPECULAR","",""],[7,"AZ_FILTER_TYPE_DISTANT_DIFFUSE","",""],[7,"AZ_FILTER_TYPE_DISTANT_SPECULAR","",""],[7,"AZ_FILTER_TYPE_CROP","",""],[7,"AZ_FILTER_TYPE_PREMULTIPLY","",""],[7,"AZ_FILTER_TYPE_UNPREMULTIPLY","",""],[7,"AZ_FONT_DWRITE","",""],[7,"AZ_FONT_GDI","",""],[7,"AZ_FONT_MAC","",""],[7,"AZ_FONT_SKIA","",""],[7,"AZ_FONT_CAIRO","",""],[7,"AZ_FONT_COREGRAPHICS","",""],[7,"AZ_FONT_NVPR","",""],[7,"AZ_NATIVE_SURFACE_D3D10_TEXTURE","",""],[7,"AZ_NATIVE_SURFACE_CAIRO_SURFACE","",""],[7,"AZ_NATIVE_SURFACE_CAIRO_CONTEXT","",""],[7,"AZ_NATIVE_SURFACE_CGCONTEXT","",""],[7,"AZ_NATIVE_SURFACE_CGCONTEXT_ACCELERATED","",""],[7,"AZ_NATIVE_SURFACE_OPENGL_TEXTUR","",""],[7,"AZ_NATIVE_FONT_DWRITE_FONT_FACE","",""],[7,"AZ_NATIVE_FONT_GDI_FONT_FACE","",""],[7,"AZ_NATIVE_FONT_MAC_FONT_FACE","",""],[7,"AZ_NATIVE_FONT_SKIA_FONT_FACE","",""],[7,"AZ_NATIVE_FONT_CAIRO_FONT_FACE","",""],[7,"AZ_NATIVE_FONT_NVPR_FONT_FAC","",""],[7,"AZ_FONT_STYLE_NORMAL","",""],[7,"AZ_FONT_STYLE_ITALIC","",""],[7,"AZ_FONT_STYLE_BOLD","",""],[7,"AZ_FONT_STYLE_BOLD_ITALIC","",""],[7,"AZ_OP_OVER","",""],[7,"AZ_OP_ADD","",""],[7,"AZ_OP_ATOP","",""],[7,"AZ_OP_OUT","",""],[7,"AZ_OP_IN","",""],[7,"AZ_OP_SOURCE","",""],[7,"AZ_OP_DEST_IN","",""],[7,"AZ_OP_DEST_OUT","",""],[7,"AZ_OP_DEST_OVER","",""],[7,"AZ_OP_DEST_ATOP","",""],[7,"AZ_OP_XOR","",""],[7,"AZ_OP_MULTIPLY","",""],[7,"AZ_OP_SCREEN","",""],[7,"AZ_OP_OVERLAY","",""],[7,"AZ_OP_DARKEN","",""],[7,"AZ_OP_LIGHTEN","",""],[7,"AZ_OP_COLOR_DODGE","",""],[7,"AZ_OP_COLOR_BURN","",""],[7,"AZ_OP_HARD_LIGHT","",""],[7,"AZ_OP_SOFT_LIGHT","",""],[7,"AZ_OP_DIFFERENCE","",""],[7,"AZ_OP_EXCLUSION","",""],[7,"AZ_OP_HUE","",""],[7,"AZ_OP_SATURATION","",""],[7,"AZ_OP_COLOR","",""],[7,"AZ_OP_LUMINOSITY","",""],[7,"AZ_OP_COUNT","",""],[7,"AZ_EXTEND_CLAMP","",""],[7,"AZ_EXTEND_REPEAT","",""],[7,"AZ_EXTEND_REFLECT","",""],[7,"AZ_FILL_WINDING","",""],[7,"AZ_FILL_EVEN_ODD","",""],[7,"AZ_AA_NONE","",""],[7,"AZ_AA_GRAY","",""],[7,"AZ_AA_SUBPIXEL","",""],[7,"AZ_AA_DEFAULT","",""],[7,"AZ_FILTER_GOOD","",""],[7,"AZ_FILTER_LINEAR","",""],[7,"AZ_FILTER_POINT","",""],[7,"AZ_PATTERN_COLOR","",""],[7,"AZ_PATTERN_SURFACE","",""],[7,"AZ_PATTERN_LINEAR_GRADIENT","",""],[7,"AZ_PATTERN_RADIAL_GRADIENT","",""],[7,"AZ_JOIN_BEVEL","",""],[7,"AZ_JOIN_ROUND","",""],[7,"AZ_JOIN_MITER","",""],[7,"AZ_JOIN_MITER_OR_BEVEL","",""],[7,"AZ_CAP_BUTT","",""],[7,"AZ_CAP_ROUND","",""],[7,"AZ_CAP_SQUARE","",""],[7,"AZ_SAMPLING_UNBOUNDED","",""],[7,"AZ_SAMPLING_BOUNDED","",""],[7,"AZ_eSideTop","",""],[7,"AZ_eSideRight","",""],[7,"AZ_eSideBottom","",""],[7,"AZ_eSideLeft","",""],[7,"AZ_ATT_COLOR_MATRIX_MATRIX","",""],[7,"AZ_IN_COLOR_MATRIX_IN","",""],[7,"AZ_IN_COMPOSITE_IN","",""],[7,"AZ_ATT_FLOOD_COLOR","",""],[7,"AZ_IN_FLOOD_IN","",""],[7,"AZ_ATT_GAUSSIAN_BLUR_STD_DEVIATION","",""],[7,"AZ_IN_GAUSSIAN_BLUR_IN","",""],[7,"AZ_ATT_LINEAR_TRANSFER_SLOPE_R","",""],[7,"AZ_ATT_LINEAR_TRANSFER_SLOPE_G","",""],[7,"AZ_ATT_LINEAR_TRANSFER_SLOPE_B","",""],[7,"AZ_ATT_LINEAR_TRANSFER_SLOPE_A","",""],[7,"AZ_ATT_LINEAR_TRANSFER_INTERCEPT_R","",""],[7,"AZ_ATT_LINEAR_TRANSFER_INTERCEPT_G","",""],[7,"AZ_ATT_LINEAR_TRANSFER_INTERCEPT_B","",""],[7,"AZ_ATT_LINEAR_TRANSFER_INTERCEPT_A","",""],[7,"AZ_IN_LINEAR_TRANSFER_IN","",""],[7,"AZ_ATT_TABLE_TRANSFER_TABLE_R","",""],[7,"AZ_ATT_TABLE_TRANSFER_TABLE_G","",""],[7,"AZ_ATT_TABLE_TRANSFER_TABLE_B","",""],[7,"AZ_ATT_TABLE_TRANSFER_TABLE_A","",""],[7,"AZ_IN_TABLE_TRANSFER_IN","",""],[7,"AZ_ATT_TRANSFER_DISABLE_R","",""],[7,"AZ_ATT_TRANSFER_DISABLE_G","",""],[7,"AZ_ATT_TRANSFER_DISABLE_B","",""],[7,"AZ_ATT_TRANSFER_DISABLE_A","",""],[11,"clone","","",49],[11,"eq","","",64],[11,"clone","","",57],[11,"eq","","",57],[11,"ne","","",57]],"paths":[[3,"ColorPattern"],[3,"StrokeOptions"],[3,"DrawOptions"],[3,"DrawSurfaceOptions"],[3,"DrawTarget"],[3,"SourceSurface"],[3,"GradientStops"],[3,"GradientStop"],[3,"DataSourceSurface"],[3,"Path"],[3,"PathBuilder"],[3,"LinearGradientPattern"],[3,"RadialGradientPattern"],[3,"FilterNode"],[3,"Matrix5x4"],[4,"CompositionOp"],[4,"JoinStyle"],[4,"CapStyle"],[4,"SurfaceFormat"],[4,"Filter"],[4,"BackendType"],[4,"DrawTargetBacking"],[4,"ExtendMode"],[4,"PatternRef"],[4,"Pattern"],[4,"ColorMatrixAttribute"],[4,"FloodAttribute"],[4,"GaussianBlurAttribute"],[4,"LinearTransferAttribute"],[4,"TableTransferAttribute"],[4,"FilterType"],[8,"AsAzureRect"],[8,"AsAzureIntSize"],[8,"AsAzurePoint"],[8,"SourceSurfaceMethods"],[8,"FilterInputIndex"],[8,"FilterAttribute"],[8,"FilterInput"],[3,"Rect"],[3,"Size2D"],[3,"Point2D"],[3,"ColorMatrixInput"],[3,"CompositeInput"],[3,"FloodFilterInput"],[3,"GaussianBlurInput"],[3,"LinearTransferInput"],[3,"TableTransferInput"],[4,"FontInfo"],[3,"ScaledFont"],[3,"struct__AzColor"],[3,"struct__AzGradientStop"],[3,"struct__AzIntRect"],[3,"struct__AzRect"],[3,"struct__AzIntPoint"],[3,"struct__AzPoint"],[3,"struct__AzIntSize"],[3,"struct__AzSize"],[3,"struct__AzMatrix5x4"],[3,"struct__AzDrawOptions"],[3,"struct__AzStrokeOptions"],[3,"struct__AzDrawSurfaceOptions"],[3,"struct__AzGlyph"],[3,"struct__AzGlyphBuffer"],[3,"struct__AzNativeFont"],[6,"AzColor"]]};
searchIndex['cgl'] = {"items":[[0,"","cgl",""],[5,"CGLSetCurrentContext","",""],[5,"CGLGetCurrentContext","",""],[5,"CGLChoosePixelFormat","",""],[5,"CGLDescribePixelFormat","",""],[5,"CGLDestroyPixelFormat","",""],[5,"CGLCreateContext","",""],[5,"CGLGetPixelFormat","",""],[5,"CGLLockContext","",""],[5,"CGLUnlockContext","",""],[5,"CGLTexImageIOSurface2D","",""],[6,"CGLContextObj","",""],[6,"CGLError","",""],[6,"CGLPixelFormatAttribute","",""],[6,"CGLPixelFormatObj","",""],[6,"IOSurfaceRef","",""],[17,"kCGLNoError","",""],[17,"kCGLPFAAllRenderers","",""],[17,"kCGLPFADoubleBuffer","",""],[17,"kCGLPFAStereo","",""],[17,"kCGLPFAAuxBuffers","",""],[17,"kCGLPFAColorSize","",""],[17,"kCGLPFAAlphaSize","",""],[17,"kCGLPFADepthSize","",""],[17,"kCGLPFAStencilSize","",""],[17,"kCGLPFAAccumSize","",""],[17,"kCGLPFAMinimumPolicy","",""],[17,"kCGLPFAMaximumPolicy","",""],[17,"kCGLPFAOffScreen","",""],[17,"kCGLPFAFullScreen","",""],[17,"kCGLPFASampleBuffers","",""],[17,"kCGLPFASamples","",""],[17,"kCGLPFAAuxDepthStencil","",""],[17,"kCGLPFAColorFloat","",""],[17,"kCGLPFAMultisample","",""],[17,"kCGLPFASupersample","",""],[17,"kCGLPFASampleAlpha","",""],[17,"kCGLPFARendererID","",""],[17,"kCGLPFASingleRenderer","",""],[17,"kCGLPFANoRecovery","",""],[17,"kCGLPFAAccelerated","",""],[17,"kCGLPFAClosestPolicy","",""],[17,"kCGLPFARobust","",""],[17,"kCGLPFABackingStore","",""],[17,"kCGLPFAMPSafe","",""],[17,"kCGLPFAWindow","",""],[17,"kCGLPFAMultiScreen","",""],[17,"kCGLPFACompliant","",""],[17,"kCGLPFADisplayMask","",""],[17,"kCGLPFAPBuffer","",""],[17,"kCGLPFARemotePBuffer","",""],[17,"kCGLPFAAllowOfflineRenderers","",""],[17,"kCGLPFAAcceleratedCompute","",""],[17,"kCGLPFAOpenGLProfile","",""],[17,"kCGLPFAVirtualScreenCount","",""],[17,"CORE_BOOLEAN_ATTRIBUTES","",""],[17,"CORE_INTEGER_ATTRIBUTES","",""]],"paths":[]};
searchIndex['glutin'] = {"items":[[0,"","glutin","The purpose of this library is to provide an OpenGL context on as many\n platforms as possible."],[3,"WindowBuilder","","Object that allows you to build windows."],[3,"Window","","Represents an OpenGL context and the Window or environment around it."],[3,"WindowProxy","","Represents a thread safe subset of operations that can be called\non a window. This structure can be safely cloned and sent between\nthreads."],[3,"PollEventsIterator","","An iterator for the `poll_events` function."],[3,"WaitEventsIterator","","An iterator for the `wait_events` function."],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors."],[3,"MonitorID","","Identifier for a monitor."],[3,"PixelFormat","","Describes a possible format. Unused."],[12,"hardware_accelerated","","",0],[12,"red_bits","","",0],[12,"green_bits","","",0],[12,"blue_bits","","",0],[12,"alpha_bits","","",0],[12,"depth_bits","","",0],[12,"stencil_bits","","",0],[12,"stereoscopy","","",0],[12,"double_buffer","","",0],[12,"multisampling","","",0],[12,"srgb","","",0],[4,"Event","",""],[13,"Resized","","The size of the window has changed.",1],[13,"Moved","","The position of the window has changed.",1],[13,"Closed","","The window has been closed.",1],[13,"ReceivedCharacter","","The window received a unicode character.",1],[13,"Focused","","The window gained or lost focus.",1],[13,"KeyboardInput","","An event from the keyboard has been received.",1],[13,"MouseMoved","","The cursor has moved on the window.",1],[13,"MouseWheel","","A positive value indicates that the wheel was rotated forward, away from the user;\na negative value indicates that the wheel was rotated backward, toward the user.",1],[13,"MouseInput","","An event from the mouse has been received.",1],[13,"Awakened","","The event loop was woken up by another thread.",1],[13,"Refresh","","The window needs to be redrawn.",1],[4,"ElementState","",""],[13,"Pressed","","",2],[13,"Released","","",2],[4,"MouseButton","",""],[13,"Left","","",3],[13,"Right","","",3],[13,"Middle","","",3],[13,"Other","","",3],[4,"VirtualKeyCode","",""],[13,"Key1","","The '1' key over the letters.",4],[13,"Key2","","The '2' key over the letters.",4],[13,"Key3","","The '3' key over the letters.",4],[13,"Key4","","The '4' key over the letters.",4],[13,"Key5","","The '5' key over the letters.",4],[13,"Key6","","The '6' key over the letters.",4],[13,"Key7","","The '7' key over the letters.",4],[13,"Key8","","The '8' key over the letters.",4],[13,"Key9","","The '9' key over the letters.",4],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",4],[13,"A","","",4],[13,"B","","",4],[13,"C","","",4],[13,"D","","",4],[13,"E","","",4],[13,"F","","",4],[13,"G","","",4],[13,"H","","",4],[13,"I","","",4],[13,"J","","",4],[13,"K","","",4],[13,"L","","",4],[13,"M","","",4],[13,"N","","",4],[13,"O","","",4],[13,"P","","",4],[13,"Q","","",4],[13,"R","","",4],[13,"S","","",4],[13,"T","","",4],[13,"U","","",4],[13,"V","","",4],[13,"W","","",4],[13,"X","","",4],[13,"Y","","",4],[13,"Z","","",4],[13,"Escape","","The Escape key, next to F1.",4],[13,"F1","","",4],[13,"F2","","",4],[13,"F3","","",4],[13,"F4","","",4],[13,"F5","","",4],[13,"F6","","",4],[13,"F7","","",4],[13,"F8","","",4],[13,"F9","","",4],[13,"F10","","",4],[13,"F11","","",4],[13,"F12","","",4],[13,"F13","","",4],[13,"F14","","",4],[13,"F15","","",4],[13,"Snapshot","","Print Screen/SysRq.",4],[13,"Scroll","","Scroll Lock.",4],[13,"Pause","","Pause/Break key, next to Scroll lock.",4],[13,"Insert","","`Insert`, next to Backspace.",4],[13,"Home","","",4],[13,"Delete","","",4],[13,"End","","",4],[13,"PageDown","","",4],[13,"PageUp","","",4],[13,"Left","","",4],[13,"Up","","",4],[13,"Right","","",4],[13,"Down","","",4],[13,"Back","","The Backspace key, right over Enter.",4],[13,"Return","","The Enter key.",4],[13,"Space","","The space bar.",4],[13,"Numlock","","",4],[13,"Numpad0","","",4],[13,"Numpad1","","",4],[13,"Numpad2","","",4],[13,"Numpad3","","",4],[13,"Numpad4","","",4],[13,"Numpad5","","",4],[13,"Numpad6","","",4],[13,"Numpad7","","",4],[13,"Numpad8","","",4],[13,"Numpad9","","",4],[13,"AbntC1","","",4],[13,"AbntC2","","",4],[13,"Add","","",4],[13,"Apostrophe","","",4],[13,"Apps","","",4],[13,"At","","",4],[13,"Ax","","",4],[13,"Backslash","","",4],[13,"Calculator","","",4],[13,"Capital","","",4],[13,"Colon","","",4],[13,"Comma","","",4],[13,"Convert","","",4],[13,"Decimal","","",4],[13,"Divide","","",4],[13,"Equals","","",4],[13,"Grave","","",4],[13,"Kana","","",4],[13,"Kanji","","",4],[13,"LAlt","","",4],[13,"LBracket","","",4],[13,"LControl","","",4],[13,"LMenu","","",4],[13,"LShift","","",4],[13,"LWin","","",4],[13,"Mail","","",4],[13,"MediaSelect","","",4],[13,"MediaStop","","",4],[13,"Minus","","",4],[13,"Multiply","","",4],[13,"Mute","","",4],[13,"MyComputer","","",4],[13,"NextTrack","","",4],[13,"NoConvert","","",4],[13,"NumpadComma","","",4],[13,"NumpadEnter","","",4],[13,"NumpadEquals","","",4],[13,"OEM102","","",4],[13,"Period","","",4],[13,"Playpause","","",4],[13,"Power","","",4],[13,"Prevtrack","","",4],[13,"RAlt","","",4],[13,"RBracket","","",4],[13,"RControl","","",4],[13,"RMenu","","",4],[13,"RShift","","",4],[13,"RWin","","",4],[13,"Semicolon","","",4],[13,"Slash","","",4],[13,"Sleep","","",4],[13,"Stop","","",4],[13,"Subtract","","",4],[13,"Sysrq","","",4],[13,"Tab","","",4],[13,"Underline","","",4],[13,"Unlabeled","","",4],[13,"VolumeDown","","",4],[13,"VolumeUp","","",4],[13,"Wake","","",4],[13,"Webback","","",4],[13,"WebFavorites","","",4],[13,"WebForward","","",4],[13,"WebHome","","",4],[13,"WebRefresh","","",4],[13,"WebSearch","","",4],[13,"WebStop","","",4],[13,"Yen","","",4],[4,"CreationError","","Error that can happen while creating a window or a headless renderer."],[13,"OsError","","",5],[13,"NotSupported","","",5],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin."],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",6],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",6],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",6],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created."],[13,"Latest","","Request the latest version of the \"best\" API of this platform.",7],[13,"Specific","","Request a specific version of a specific API.",7],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`.\nElse if OpenGL ES or WebGL is available, create a context with the\nspecified `opengles_version`.",7],[12,"opengl_version","glutin::GlRequest","The version to use for OpenGL.",7],[12,"opengles_version","","The version to use for OpenGL ES.",7],[4,"MouseCursor","glutin",""],[13,"Default","","The platform-dependent default cursor.",8],[13,"Crosshair","","A simple crosshair.",8],[13,"Hand","","A hand (often used to indicate links in web browsers).",8],[13,"Arrow","","Self explanatory.",8],[13,"Move","","Indicates something is to be moved.",8],[13,"Text","","Indicates text that may be selected or edited.",8],[13,"Wait","","Program busy indicator.",8],[13,"Help","","Help indicator (often rendered as a \"?\")",8],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast\nwith \"Wait\" the user may still interact with the program. Often rendered\nas a spinning beach ball, or an arrow with a watch or hourglass.",8],[13,"NotAllowed","","Cursor showing that something cannot be done.",8],[13,"ContextMenu","","",8],[13,"NoneCursor","","",8],[13,"Cell","","",8],[13,"VerticalText","","",8],[13,"Alias","","",8],[13,"Copy","","",8],[13,"NoDrop","","",8],[13,"Grab","","",8],[13,"Grabbing","","",8],[13,"AllScroll","","",8],[13,"ZoomIn","","",8],[13,"ZoomOut","","",8],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor\nis used when the movement starts from the south-east corner of the box.",8],[13,"NResize","","",8],[13,"NeResize","","",8],[13,"NwResize","","",8],[13,"SResize","","",8],[13,"SeResize","","",8],[13,"SwResize","","",8],[13,"WResize","","",8],[13,"EwResize","","",8],[13,"NsResize","","",8],[13,"NeswResize","","",8],[13,"NwseResize","","",8],[13,"ColResize","","",8],[13,"RowResize","","",8],[5,"get_available_monitors","","Returns the list of all available monitors."],[5,"get_primary_monitor","","Returns the primary monitor of the system."],[11,"fmt","","",1],[11,"clone","","",1],[11,"clone","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"hash","","",2],[11,"fmt","","",2],[11,"clone","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"hash","","",3],[11,"fmt","","",3],[11,"clone","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"hash","","",4],[11,"fmt","","",4],[11,"new","","Initializes a new `WindowBuilder` with default values.",9],[11,"with_dimensions","","Requests the window to be of specific dimensions.",9],[11,"with_title","","Requests a specific title for the window.",9],[11,"with_fullscreen","","Requests fullscreen mode.",9],[11,"with_shared_lists","","The created window will share all its OpenGL objects with the window in the parameter.",9],[11,"with_gl_version","","THIS FUNCTION IS DEPRECATED",9],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",9],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",9],[11,"with_vsync","","Requests that the window has vsync enabled.",9],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",9],[11,"with_multisampling","","Sets the multisampling level to request.",9],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",9],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",9],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",9],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",9],[11,"build","","Builds the window.",9],[11,"build_strict","","Builds the window.",9],[11,"default","","",10],[11,"new","","Creates a new OpenGL context, and a Window for platforms where this is appropriate.",10],[11,"is_closed","","Returns true if the window has previously been closed by the user.",10],[11,"should_close","","Returns true if the window has previously been closed by the user.",10],[11,"set_title","","Modifies the title of the window.",10],[11,"show","","Shows the window if it was hidden.",10],[11,"hide","","Hides the window if it was visible.",10],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the\n top-left hand corner of the desktop.",10],[11,"set_position","","Modifies the position of the window.",10],[11,"get_inner_size","","Returns the size in pixels of the client area of the window.",10],[11,"get_outer_size","","Returns the size in pixels of the window.",10],[11,"set_inner_size","","Modifies the inner size of the window.",10],[11,"poll_events","","Returns an iterator that poll for the next event in the window's events queue.\nReturns `None` if there is no event in the queue.",10],[11,"wait_events","","Returns an iterator that returns events one by one, blocking if necessary until one is\navailable.",10],[11,"make_current","","Sets the context as the current context.",10],[11,"is_current","","Returns true if this context is the current one in this thread.",10],[11,"get_proc_address","","Returns the address of an OpenGL function.",10],[11,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",10],[11,"platform_display","","Gets the native platform specific display for this window.\nThis is typically only required when integrating with\nother libraries that need this information.",10],[11,"platform_window","","Gets the native platform specific window handle. This is\ntypically only required when integrating with other libraries\nthat need this information.",10],[11,"get_api","","Returns the API that is currently provided by this window.",10],[11,"create_window_proxy","","Create a window proxy for this window, that can be freely\npassed to different threads.",10],[11,"set_window_resize_callback","","Sets a resize callback that is called by Mac (and potentially other\noperating systems) during resize operations. This can be used to repaint\nduring window resizing.",10],[11,"set_cursor","","Modifies the mouse cursor of the window.\nHas no effect on Android.",10],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the\nwindow size in screen pixels. This is typically one for a normal display\nand two for a retina display.",10],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",10],[11,"get_proc_addr","","",10],[11,"clone","","",11],[11,"wakeup_event_loop","","Triggers a blocked event loop to wake up. This is\ntypically called when another thread wants to wake\nup the blocked rendering thread to cause a refresh.",11],[11,"next","","",12],[11,"next","","",13],[11,"next","","",14],[11,"get_name","","Returns a human-readable name of the monitor.",15],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",15],[6,"ScanCode","",""],[11,"fmt","","",1],[11,"clone","","",1],[11,"clone","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"hash","","",2],[11,"fmt","","",2],[11,"clone","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"hash","","",3],[11,"fmt","","",3],[11,"clone","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"hash","","",4],[11,"fmt","","",4],[11,"eq","","",5],[11,"ne","","",5],[11,"fmt","","",5],[11,"clone","","",5],[11,"fmt","","",5],[11,"description","","",5],[11,"eq","","",6],[11,"ne","","",6],[11,"clone","","",6],[11,"fmt","","",6],[11,"clone","","",7],[11,"fmt","","",7],[11,"fmt","","",8],[11,"clone","","",0],[11,"fmt","","",0]],"paths":[[3,"PixelFormat"],[4,"Event"],[4,"ElementState"],[4,"MouseButton"],[4,"VirtualKeyCode"],[4,"CreationError"],[4,"Api"],[4,"GlRequest"],[4,"MouseCursor"],[3,"WindowBuilder"],[3,"Window"],[3,"WindowProxy"],[3,"PollEventsIterator"],[3,"WaitEventsIterator"],[3,"AvailableMonitorsIter"],[3,"MonitorID"]]};
searchIndex['selectors'] = {"items":[[0,"","selectors",""],[0,"bloom","","Simple counting bloom filters."],[3,"BloomFilter","selectors::bloom","A counting Bloom filter with 8-bit counters.  For now we assume\nthat having two hash functions is enough, but we may revisit that\ndecision later."],[8,"BloomHash","",""],[10,"bloom_hash","","",0],[11,"clone","","",1],[11,"new","","Creates a new bloom filter.",1],[11,"clear","","",1],[11,"insert","","Inserts an item into the bloom filter.",1],[11,"remove","","Removes an item from the bloom filter.",1],[11,"might_contain","","Check whether the filter might contain an item.  This can\nsometimes return true even if the item is not in the filter,\nbut will never return false for items that are actually in the\nfilter.",1],[11,"bloom_hash","string_cache::atom","",2],[11,"bloom_hash","string_cache::namespace","",3],[0,"matching","selectors",""],[3,"SelectorMap","selectors::matching","Map node attributes to Rules whose last simple selector starts with them."],[3,"Rule","",""],[12,"selector","","",4],[12,"declarations","","",4],[3,"DeclarationBlock","","A property declaration together with its precedence among rules of equal specificity so that\nwe can sort them."],[12,"declarations","","",5],[12,"source_order","","",5],[12,"specificity","","",5],[3,"CommonStyleAffectingAttributes","",""],[3,"CommonStyleAffectingAttributeInfo","",""],[12,"atom","","",6],[12,"mode","","",6],[4,"CommonStyleAffectingAttributeMode","",""],[13,"IsPresent","","",7],[13,"IsEqual","","",7],[5,"matches","",""],[5,"common_style_affecting_attributes","",""],[5,"rare_style_affecting_attributes","","Attributes that, if present, disable style sharing. All legacy HTML attributes must be in\neither this list or `common_style_affecting_attributes`. See the comment in\n`synthesize_presentational_hints_for_legacy_attributes`."],[5,"matches_simple_selector","","Determines whether the given element matches the given single selector."],[7,"SELECTOR_WHITESPACE","","The definition of whitespace per CSS Selectors Level 3 § 4."],[7,"RECOMMENDED_SELECTOR_BLOOM_FILTER_SIZE","",""],[17,"HIDDEN_ATTRIBUTE","",""],[17,"NO_WRAP_ATTRIBUTE","",""],[17,"ALIGN_LEFT_ATTRIBUTE","",""],[17,"ALIGN_CENTER_ATTRIBUTE","",""],[17,"ALIGN_RIGHT_ATTRIBUTE","",""],[11,"new","","",8],[11,"get_all_matching_rules","","Append to `rule_list` all Rules in `self` that match node.",8],[11,"insert","","Insert rule into the correct hash.\nOrder in which to try: id_hash, class_hash, local_name_hash, universal_rules.",8],[11,"fmt","","",5],[11,"clone","","",5],[11,"clone","","",4],[11,"from_declarations","","",5],[11,"hash","","",9],[11,"cmp","","",9],[11,"partial_cmp","","",9],[11,"lt","","",9],[11,"le","","",9],[11,"gt","","",9],[11,"ge","","",9],[11,"clone","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"empty","","Returns an empty set of flags.",9],[11,"all","","Returns the set containing all flags.",9],[11,"bits","","Returns the raw value of the flags currently stored.",9],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",9],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",9],[11,"is_empty","","Returns `true` if no flags are currently stored.",9],[11,"is_all","","Returns `true` if all flags are currently set.",9],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9],[11,"insert","","Inserts the specified flags in-place.",9],[11,"remove","","Removes the specified flags in-place.",9],[11,"toggle","","Toggles the specified flags in-place.",9],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",9],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",9],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",9],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",9],[0,"parser","selectors",""],[3,"ParserContext","selectors::parser",""],[12,"in_user_agent_stylesheet","","",10],[12,"default_namespace","","",10],[12,"namespace_prefixes","","",10],[3,"Selector","",""],[12,"compound_selectors","","",11],[12,"pseudo_element","","",11],[12,"specificity","","",11],[3,"CompoundSelector","",""],[12,"simple_selectors","","",12],[12,"next","","",12],[3,"LocalName","",""],[12,"name","","",13],[12,"lower_name","","",13],[3,"AttrSelector","",""],[12,"name","","",14],[12,"lower_name","","",14],[12,"namespace","","",14],[4,"PseudoElement","",""],[13,"Before","","",15],[13,"After","","",15],[4,"Combinator","",""],[13,"Child","","",16],[13,"Descendant","","",16],[13,"NextSibling","","",16],[13,"LaterSibling","","",16],[4,"SimpleSelector","",""],[13,"ID","","",17],[13,"Class","","",17],[13,"LocalName","","",17],[13,"Namespace","","",17],[13,"AttrExists","","",17],[13,"AttrEqual","","",17],[13,"AttrIncludes","","",17],[13,"AttrDashMatch","","",17],[13,"AttrPrefixMatch","","",17],[13,"AttrSubstringMatch","","",17],[13,"AttrSuffixMatch","","",17],[13,"Negation","","",17],[13,"AnyLink","","",17],[13,"Link","","",17],[13,"Visited","","",17],[13,"Hover","","",17],[13,"Disabled","","",17],[13,"Enabled","","",17],[13,"Checked","","",17],[13,"Indeterminate","","",17],[13,"FirstChild","","",17],[13,"LastChild","","",17],[13,"OnlyChild","","",17],[13,"Root","","",17],[13,"NthChild","","",17],[13,"NthLastChild","","",17],[13,"NthOfType","","",17],[13,"NthLastOfType","","",17],[13,"FirstOfType","","",17],[13,"LastOfType","","",17],[13,"OnlyOfType","","",17],[13,"ServoNonzeroBorder","","",17],[4,"CaseSensitivity","",""],[13,"CaseSensitive","","",18],[13,"CaseInsensitive","","",18],[4,"NamespaceConstraint","",""],[13,"Any","","",19],[13,"Specific","","",19],[5,"parse_author_origin_selector_list_from_str","",""],[5,"parse_selector_list","","Parse a comma-separated list of Selectors.\naka Selector Group in http://www.w3.org/TR/css3-selectors/#grouping"],[11,"new","","",10],[11,"fmt","","",11],[11,"clone","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"fmt","","",15],[11,"hash","","",15],[11,"clone","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"fmt","","",12],[11,"clone","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"fmt","","",16],[11,"clone","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"fmt","","",17],[11,"hash","","",17],[11,"clone","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"fmt","","",18],[11,"hash","","",18],[11,"clone","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"fmt","","",13],[11,"hash","","",13],[11,"clone","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"fmt","","",14],[11,"hash","","",14],[11,"clone","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"fmt","","",19],[11,"hash","","",19],[11,"clone","","",19],[11,"eq","","",19],[11,"ne","","",19],[0,"quicksort","selectors","In-place sorting."],[5,"quicksort_by","selectors::quicksort","An in-place quicksort."],[0,"smallvec","selectors","Small vectors in various sizes. These store a certain number of elements inline and fall back\nto the heap for larger allocations."],[3,"SmallVecIterator","selectors::smallvec",""],[3,"SmallVecMutIterator","",""],[3,"SmallVecMoveIterator","",""],[3,"SmallVec1","",""],[3,"SmallVec2","",""],[3,"SmallVec4","",""],[3,"SmallVec8","",""],[3,"SmallVec16","",""],[3,"SmallVec24","",""],[3,"SmallVec32","",""],[8,"VecLike","",""],[10,"vec_len","","",20],[10,"vec_push","","",20],[10,"vec_slice_mut","","",20],[11,"vec_slice_from_mut","","",20],[8,"SmallVecPrivate","",""],[10,"set_len","","",21],[10,"set_cap","","",21],[10,"data","","",21],[10,"mut_data","","",21],[10,"ptr","","",21],[10,"mut_ptr","","",21],[10,"set_ptr","","",21],[8,"SmallVec","",""],[10,"inline_size","","",22],[10,"len","","",22],[10,"is_empty","","",22],[10,"cap","","",22],[11,"spilled","","",22],[11,"begin","","",22],[11,"begin_mut","","",22],[11,"end","","",22],[11,"end_mut","","",22],[11,"iter","","",22],[11,"mut_iter","","",22],[11,"into_iter","","NB: For efficiency reasons (avoiding making a second copy of the inline elements), this\nactually clears out the original array instead of moving it.",22],[11,"push","","",22],[11,"push_all_move","","",22],[11,"pop","","",22],[11,"grow","","",22],[11,"get","","",22],[11,"get_mut","","",22],[11,"slice","","",22],[11,"as_slice","","",22],[11,"as_slice_mut","","",22],[11,"slice_mut","","",22],[11,"slice_from_mut","","",22],[11,"fail_bounds_check","","",22],[11,"vec_len","collections::vec","",23],[11,"vec_push","","",23],[11,"vec_slice_mut","","",23],[6,"Item","selectors::smallvec",""],[11,"next","","",24],[11,"next_back","","",24],[6,"Item","",""],[11,"next","","",25],[6,"Item","",""],[11,"next","","",26],[11,"drop","","",26],[11,"set_len","","",27],[11,"set_cap","","",27],[11,"data","","",27],[11,"mut_data","","",27],[11,"ptr","","",27],[11,"mut_ptr","","",27],[11,"set_ptr","","",27],[11,"inline_size","","",27],[11,"len","","",27],[11,"is_empty","","",27],[11,"cap","","",27],[11,"vec_len","","",27],[11,"vec_push","","",27],[11,"vec_slice_mut","","",27],[11,"from_iter","","",27],[11,"extend","","",27],[11,"fmt","","",27],[11,"new","","",27],[11,"set_len","","",28],[11,"set_cap","","",28],[11,"data","","",28],[11,"mut_data","","",28],[11,"ptr","","",28],[11,"mut_ptr","","",28],[11,"set_ptr","","",28],[11,"inline_size","","",28],[11,"len","","",28],[11,"is_empty","","",28],[11,"cap","","",28],[11,"vec_len","","",28],[11,"vec_push","","",28],[11,"vec_slice_mut","","",28],[11,"from_iter","","",28],[11,"extend","","",28],[11,"fmt","","",28],[11,"new","","",28],[11,"set_len","","",29],[11,"set_cap","","",29],[11,"data","","",29],[11,"mut_data","","",29],[11,"ptr","","",29],[11,"mut_ptr","","",29],[11,"set_ptr","","",29],[11,"inline_size","","",29],[11,"len","","",29],[11,"is_empty","","",29],[11,"cap","","",29],[11,"vec_len","","",29],[11,"vec_push","","",29],[11,"vec_slice_mut","","",29],[11,"from_iter","","",29],[11,"extend","","",29],[11,"fmt","","",29],[11,"new","","",29],[11,"set_len","","",30],[11,"set_cap","","",30],[11,"data","","",30],[11,"mut_data","","",30],[11,"ptr","","",30],[11,"mut_ptr","","",30],[11,"set_ptr","","",30],[11,"inline_size","","",30],[11,"len","","",30],[11,"is_empty","","",30],[11,"cap","","",30],[11,"vec_len","","",30],[11,"vec_push","","",30],[11,"vec_slice_mut","","",30],[11,"from_iter","","",30],[11,"extend","","",30],[11,"fmt","","",30],[11,"new","","",30],[11,"set_len","","",31],[11,"set_cap","","",31],[11,"data","","",31],[11,"mut_data","","",31],[11,"ptr","","",31],[11,"mut_ptr","","",31],[11,"set_ptr","","",31],[11,"inline_size","","",31],[11,"len","","",31],[11,"is_empty","","",31],[11,"cap","","",31],[11,"vec_len","","",31],[11,"vec_push","","",31],[11,"vec_slice_mut","","",31],[11,"from_iter","","",31],[11,"extend","","",31],[11,"fmt","","",31],[11,"new","","",31],[11,"set_len","","",32],[11,"set_cap","","",32],[11,"data","","",32],[11,"mut_data","","",32],[11,"ptr","","",32],[11,"mut_ptr","","",32],[11,"set_ptr","","",32],[11,"inline_size","","",32],[11,"len","","",32],[11,"is_empty","","",32],[11,"cap","","",32],[11,"vec_len","","",32],[11,"vec_push","","",32],[11,"vec_slice_mut","","",32],[11,"from_iter","","",32],[11,"extend","","",32],[11,"fmt","","",32],[11,"new","","",32],[11,"set_len","","",33],[11,"set_cap","","",33],[11,"data","","",33],[11,"mut_data","","",33],[11,"ptr","","",33],[11,"mut_ptr","","",33],[11,"set_ptr","","",33],[11,"inline_size","","",33],[11,"len","","",33],[11,"is_empty","","",33],[11,"cap","","",33],[11,"vec_len","","",33],[11,"vec_push","","",33],[11,"vec_slice_mut","","",33],[11,"from_iter","","",33],[11,"extend","","",33],[11,"fmt","","",33],[11,"new","","",33],[11,"drop","","",27],[11,"drop","","",28],[11,"drop","","",29],[11,"drop","","",30],[11,"drop","","",31],[11,"drop","","",32],[11,"drop","","",33],[11,"clone","","",27],[11,"clone","","",28],[11,"clone","","",29],[11,"clone","","",30],[11,"clone","","",31],[11,"clone","","",32],[11,"clone","","",33],[0,"tree","selectors","Traits that nodes must implement. Breaks the otherwise-cyclic dependency between layout and\nstyle."],[8,"TNode","selectors::tree",""],[16,"Element","selectors::tree::TNode",""],[10,"parent_node","selectors::tree","",34],[10,"first_child","","",34],[10,"last_child","","",34],[10,"prev_sibling","","",34],[10,"next_sibling","","",34],[10,"is_document","","",34],[10,"is_element","","",34],[10,"as_element","","",34],[10,"match_attr","","",34],[10,"is_html_element_in_html_document","","",34],[10,"has_changed","","",34],[10,"set_changed","","",34],[10,"is_dirty","","",34],[10,"set_dirty","","",34],[10,"has_dirty_siblings","","",34],[10,"set_dirty_siblings","","",34],[10,"has_dirty_descendants","","",34],[10,"set_dirty_descendants","","",34],[8,"TElement","",""],[10,"get_attr","","",35],[10,"get_attrs","","",35],[10,"get_link","","",35],[10,"get_local_name","","",35],[10,"get_namespace","","",35],[10,"get_hover_state","","",35],[10,"get_id","","",35],[10,"get_disabled_state","","",35],[10,"get_enabled_state","","",35],[10,"get_checked_state","","",35],[10,"get_indeterminate_state","","",35],[10,"has_class","","",35],[10,"has_nonzero_border","","",35],[10,"each_class","","",35]],"paths":[[8,"BloomHash"],[3,"BloomFilter"],[3,"Atom"],[3,"Namespace"],[3,"Rule"],[3,"DeclarationBlock"],[3,"CommonStyleAffectingAttributeInfo"],[4,"CommonStyleAffectingAttributeMode"],[3,"SelectorMap"],[3,"CommonStyleAffectingAttributes"],[3,"ParserContext"],[3,"Selector"],[3,"CompoundSelector"],[3,"LocalName"],[3,"AttrSelector"],[4,"PseudoElement"],[4,"Combinator"],[4,"SimpleSelector"],[4,"CaseSensitivity"],[4,"NamespaceConstraint"],[8,"VecLike"],[8,"SmallVecPrivate"],[8,"SmallVec"],[3,"Vec"],[3,"SmallVecIterator"],[3,"SmallVecMutIterator"],[3,"SmallVecMoveIterator"],[3,"SmallVec1"],[3,"SmallVec2"],[3,"SmallVec4"],[3,"SmallVec8"],[3,"SmallVec16"],[3,"SmallVec24"],[3,"SmallVec32"],[8,"TNode"],[8,"TElement"]]};
searchIndex['html5ever'] = {"items":[[0,"","html5ever",""],[3,"Attribute","","A tag attribute."],[12,"name","","",0],[12,"value","","",0],[0,"tokenizer","","The HTML5 tokenizer."],[3,"Doctype","html5ever::tokenizer","A `DOCTYPE` token."],[12,"name","","",1],[12,"public_id","","",1],[12,"system_id","","",1],[12,"force_quirks","","",1],[3,"Tag","","A tag token."],[12,"kind","","",2],[12,"name","","",2],[12,"self_closing","","",2],[12,"attrs","","",2],[3,"TokenizerOpts","","Tokenizer options, with an impl for `Default`."],[12,"exact_errors","","Report all parse errors described in the spec, at some\nperformance penalty?  Default: false",3],[12,"discard_bom","","Discard a `U+FEFF BYTE ORDER MARK` if we see one at the beginning\nof the stream?  Default: true",3],[12,"profile","","Keep a record of how long we spent in each state?  Printed\nwhen `end()` is called.  Default: false",3],[12,"initial_state","","Initial state override.  Only the test runner should use\na non-`None` value!",3],[12,"last_start_tag_name","","Last start tag.  Only the test runner should use a\nnon-`None` value!",3],[3,"Tokenizer","","The HTML tokenizer."],[4,"TagKind","",""],[13,"StartTag","","",4],[13,"EndTag","","",4],[4,"Token","",""],[13,"DoctypeToken","","",5],[13,"TagToken","","",5],[13,"CommentToken","","",5],[13,"CharacterTokens","","",5],[13,"NullCharacterToken","","",5],[13,"EOFToken","","",5],[13,"ParseError","","",5],[0,"states","","Tokenizer states."],[4,"ScriptEscapeKind","html5ever::tokenizer::states",""],[13,"Escaped","","",6],[13,"DoubleEscaped","","",6],[4,"DoctypeIdKind","",""],[13,"Public","","",7],[13,"System","","",7],[4,"RawKind","",""],[13,"Rcdata","","",8],[13,"Rawtext","","",8],[13,"ScriptData","","",8],[13,"ScriptDataEscaped","","",8],[4,"AttrValueKind","",""],[13,"Unquoted","","",9],[13,"SingleQuoted","","",9],[13,"DoubleQuoted","","",9],[4,"State","",""],[13,"Data","","",10],[13,"Plaintext","","",10],[13,"TagOpen","","",10],[13,"EndTagOpen","","",10],[13,"TagName","","",10],[13,"RawData","","",10],[13,"RawLessThanSign","","",10],[13,"RawEndTagOpen","","",10],[13,"RawEndTagName","","",10],[13,"ScriptDataEscapeStart","","",10],[13,"ScriptDataEscapeStartDash","","",10],[13,"ScriptDataEscapedDash","","",10],[13,"ScriptDataEscapedDashDash","","",10],[13,"ScriptDataDoubleEscapeEnd","","",10],[13,"BeforeAttributeName","","",10],[13,"AttributeName","","",10],[13,"AfterAttributeName","","",10],[13,"BeforeAttributeValue","","",10],[13,"AttributeValue","","",10],[13,"AfterAttributeValueQuoted","","",10],[13,"SelfClosingStartTag","","",10],[13,"BogusComment","","",10],[13,"MarkupDeclarationOpen","","",10],[13,"CommentStart","","",10],[13,"CommentStartDash","","",10],[13,"Comment","","",10],[13,"CommentEndDash","","",10],[13,"CommentEnd","","",10],[13,"CommentEndBang","","",10],[13,"Doctype","","",10],[13,"BeforeDoctypeName","","",10],[13,"DoctypeName","","",10],[13,"AfterDoctypeName","","",10],[13,"AfterDoctypeKeyword","","",10],[13,"BeforeDoctypeIdentifier","","",10],[13,"DoctypeIdentifierDoubleQuoted","","",10],[13,"DoctypeIdentifierSingleQuoted","","",10],[13,"AfterDoctypeIdentifier","","",10],[13,"BetweenDoctypePublicAndSystemIdentifiers","","",10],[13,"BogusDoctype","","",10],[13,"CdataSection","","",10],[11,"fmt","","",6],[11,"hash","","",6],[11,"clone","","",6],[11,"cmp","","",6],[11,"partial_cmp","","",6],[11,"lt","","",6],[11,"le","","",6],[11,"gt","","",6],[11,"ge","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"fmt","","",7],[11,"hash","","",7],[11,"clone","","",7],[11,"cmp","","",7],[11,"partial_cmp","","",7],[11,"lt","","",7],[11,"le","","",7],[11,"gt","","",7],[11,"ge","","",7],[11,"eq","","",7],[11,"ne","","",7],[11,"fmt","","",8],[11,"hash","","",8],[11,"clone","","",8],[11,"cmp","","",8],[11,"partial_cmp","","",8],[11,"lt","","",8],[11,"le","","",8],[11,"gt","","",8],[11,"ge","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"fmt","","",9],[11,"hash","","",9],[11,"clone","","",9],[11,"cmp","","",9],[11,"partial_cmp","","",9],[11,"lt","","",9],[11,"le","","",9],[11,"gt","","",9],[11,"ge","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"fmt","","",10],[11,"hash","","",10],[11,"clone","","",10],[11,"cmp","","",10],[11,"partial_cmp","","",10],[11,"lt","","",10],[11,"le","","",10],[11,"gt","","",10],[11,"ge","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"fmt","html5ever::tokenizer","",1],[11,"clone","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"new","","",1],[11,"fmt","html5ever","",0],[11,"clone","","",0],[11,"cmp","","",0],[11,"partial_cmp","","",0],[11,"lt","","",0],[11,"le","","",0],[11,"gt","","",0],[11,"ge","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"fmt","html5ever::tokenizer","",4],[11,"clone","","",4],[11,"hash","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"fmt","","",2],[11,"clone","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"equiv_modulo_attr_order","","Are the tags equivalent when we don't care about attribute order?\nAlso ignores the self-closing flag.",2],[11,"fmt","","",5],[11,"eq","","",5],[11,"ne","","",5],[8,"TokenSink","","Types which can receive tokens from the tokenizer."],[10,"process_token","","Process a token.",11],[11,"query_state_change","","The tokenizer will call this after emitting any start tag.\nThis allows the tree builder to change the tokenizer's state.\nBy default no state changes occur.",11],[11,"clone","","",3],[11,"default","","",3],[11,"new","","Create a new tokenizer which feeds tokens to a particular `TokenSink`.",12],[11,"unwrap","","",12],[11,"sink","","",12],[11,"sink_mut","","",12],[11,"feed","","Feed an input string into the tokenizer.",12],[11,"end","","Indicate that we have reached the end of the input.",12],[0,"tree_builder","html5ever","The HTML5 tree builder."],[3,"TreeBuilderOpts","html5ever::tree_builder","Tree builder options, with an impl for Default."],[12,"exact_errors","","Report all parse errors described in the spec, at some\nperformance penalty?  Default: false",13],[12,"scripting_enabled","","Is scripting enabled?",13],[12,"iframe_srcdoc","","Is this an `iframe srcdoc` document?",13],[12,"drop_doctype","","Should we drop the DOCTYPE (if any) from the tree?",13],[12,"ignore_missing_rules","","The `<svg>`, `<math>`, and `<template>` tags have special\nparsing rules that are currently unimplemented.  By default\nwe `panic!()` if any of these tags is encountered.  If this\noption is enabled, we will instead attempt to parse them\nusing the ordinary HTML parsing rules.",13],[12,"quirks_mode","","Initial TreeBuilder quirks mode. Default: NoQuirks",13],[3,"TreeBuilder","","The HTML tree builder."],[0,"interface","","The interface for consumers of the tree builder (and thus the\nparser overall)."],[4,"QuirksMode","html5ever::tree_builder::interface","A document's quirks mode."],[13,"Quirks","","",14],[13,"LimitedQuirks","","",14],[13,"NoQuirks","","",14],[4,"NodeOrText","","Something which can be inserted into the DOM."],[13,"AppendNode","","",15],[13,"AppendText","","",15],[8,"TreeSink","","Types which can process tree modifications from the tree builder."],[16,"Handle","html5ever::tree_builder::interface::TreeSink","`Handle` is a reference to a DOM node.  The tree builder requires\nthat a `Handle` implements `Clone` to get another reference to\nthe same node."],[10,"parse_error","html5ever::tree_builder::interface","Signal a parse error.",16],[10,"get_document","","Get a handle to the `Document` node.",16],[10,"same_node","","Do two handles refer to the same node?",16],[10,"elem_name","","What is the name of this element?",16],[10,"set_quirks_mode","","Set the document's quirks mode.",16],[10,"create_element","","Create an element.",16],[10,"create_comment","","Create a comment node.",16],[10,"append","","Append a node as the last child of the given node.  If this would\nproduce adjacent sibling text nodes, it should concatenate the text\ninstead.",16],[10,"append_before_sibling","","Append a node as the sibling immediately before the given node.  If that node\nhas no parent, do nothing and return Err(new_node).",16],[10,"append_doctype_to_document","","Append a `DOCTYPE` element to the `Document` node.",16],[10,"add_attrs_if_missing","","Add each attribute to the given element, if no attribute\nwith that name already exists.",16],[10,"remove_from_parent","","Detach the given node from its parent.",16],[10,"reparent_children","","Remove all the children from node and append them to new_parent.",16],[10,"mark_script_already_started","","Mark a HTML `<script>` element as \"already started\".",16],[11,"complete_script","","Indicate that a `<script>` element is complete.",16],[8,"Tracer","","Trace hooks for a garbage-collected DOM."],[16,"Handle","html5ever::tree_builder::interface::Tracer",""],[10,"trace_handle","html5ever::tree_builder::interface","Upon a call to `trace_handles`, the tree builder will call this method\nfor each handle in its internal state.",17],[11,"fmt","","",14],[11,"hash","","",14],[11,"clone","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"clone","html5ever::tree_builder","",13],[11,"default","","",13],[11,"new","","Create a new tree builder which sends tree modifications to a particular `TreeSink`.",18],[11,"new_for_fragment","","Create a new tree builder which sends tree modifications to a particular `TreeSink`.\nThis is for parsing fragments.",18],[11,"tokenizer_state_for_context_elem","","",18],[11,"unwrap","","",18],[11,"sink","","",18],[11,"sink_mut","","",18],[11,"trace_handles","","Call the `Tracer`'s `trace_handle` method on every `Handle` in the tree builder's\ninternal state.  This is intended to support garbage-collected DOMs.",18],[11,"is_fragment","","Are we parsing a HTML fragment?",18],[11,"process_token","","",18],[11,"query_state_change","","",18],[0,"serialize","html5ever",""],[3,"SerializeOpts","html5ever::serialize",""],[12,"scripting_enabled","","Is scripting enabled?",19],[12,"traversal_scope","","Serialize the root node? Default: ChildrenOnly",19],[3,"Serializer","",""],[4,"TraversalScope","",""],[13,"IncludeNode","","",20],[13,"ChildrenOnly","","",20],[5,"serialize","",""],[6,"AttrRef","",""],[8,"Serializable","",""],[10,"serialize","","",21],[11,"eq","","",20],[11,"ne","","",20],[11,"default","","",19],[11,"start_elem","","",22],[11,"end_elem","","",22],[11,"write_text","","",22],[11,"write_comment","","",22],[11,"write_doctype","","",22],[11,"write_processing_instruction","","",22],[0,"sink","html5ever","Consumers of the parser API."],[0,"common","html5ever::sink",""],[4,"NodeEnum","html5ever::sink::common","The different kinds of nodes in the DOM."],[13,"Document","","The `Document` itself.",23],[13,"Doctype","","A `DOCTYPE` with name, public id, and system id.",23],[13,"Text","","A text node.",23],[13,"Comment","","A comment.",23],[13,"Element","","An element with attributes.",23],[11,"fmt","","",23],[0,"rcdom","html5ever::sink","A simple reference-counted DOM."],[3,"Node","html5ever::sink::rcdom","A DOM node."],[12,"node","","",24],[12,"parent","","",24],[12,"children","","",24],[12,"script_already_started","","The \"script already started\" flag.",24],[3,"RcDom","","The DOM itself; the result of parsing."],[12,"document","","The `Document` itself.",25],[12,"errors","","Errors that occurred during parsing.",25],[12,"quirks_mode","","The document's quirks mode.",25],[6,"Handle","","Reference to a DOM node."],[6,"WeakHandle","","Weak reference to a DOM node, used for parent pointers."],[6,"Handle","",""],[11,"parse_error","","",25],[11,"get_document","","",25],[11,"set_quirks_mode","","",25],[11,"same_node","","",25],[11,"elem_name","","",25],[11,"create_element","","",25],[11,"create_comment","","",25],[11,"append","","",25],[11,"append_before_sibling","","",25],[11,"append_doctype_to_document","","",25],[11,"add_attrs_if_missing","","",25],[11,"remove_from_parent","","",25],[11,"reparent_children","","",25],[11,"mark_script_already_started","","",25],[11,"default","","",25],[6,"Sink","",""],[11,"get_result","","",25],[11,"serialize","","",26],[0,"owned_dom","html5ever::sink","A simple DOM where every node is owned by its parent."],[3,"SquishyNode","html5ever::sink::owned_dom","The internal type we use for nodes during parsing."],[3,"Handle","",""],[3,"Sink","",""],[3,"Node","",""],[12,"node","","",27],[12,"children","","",27],[3,"OwnedDom","",""],[12,"document","","",28],[12,"errors","","",28],[12,"quirks_mode","","",28],[11,"eq","","",29],[11,"clone","","",29],[11,"deref_mut","","",29],[6,"Target","",""],[11,"deref","","",29],[11,"default","","",30],[6,"Handle","",""],[11,"parse_error","","",30],[11,"get_document","","",30],[11,"set_quirks_mode","","",30],[11,"same_node","","",30],[11,"elem_name","","",30],[11,"create_element","","",30],[11,"create_comment","","",30],[11,"append","","",30],[11,"append_before_sibling","","",30],[11,"append_doctype_to_document","","",30],[11,"add_attrs_if_missing","","",30],[11,"remove_from_parent","","",30],[11,"reparent_children","","",30],[11,"mark_script_already_started","","",30],[6,"Sink","",""],[11,"get_result","","",28],[11,"serialize","","",27],[0,"driver","html5ever","High-level interface to the parser."],[3,"ParseOpts","html5ever::driver","All-encompassing options struct for the parser."],[12,"tokenizer","","Tokenizer options.",31],[12,"tree_builder","","Tree builder options.",31],[5,"one_input","","Convenience function to turn a single `String` into an iterator."],[5,"tokenize_to","","Tokenize and send results to a `TokenSink`."],[5,"parse_to","","Parse and send results to a `TreeSink`."],[5,"parse_fragment_to","","Parse an HTML fragment and send results to a `TreeSink`."],[5,"parse","","Parse into a type which implements `ParseResult`."],[5,"parse_fragment","","Parse an HTML fragment into a type which implements `ParseResult`."],[8,"ParseResult","","Results which can be extracted from a `TreeSink`."],[16,"Sink","html5ever::driver::ParseResult",""],[10,"get_result","html5ever::driver","",32],[11,"default","","",31],[11,"clone","","",31],[11,"query_state_change","html5ever::tokenizer","The tokenizer will call this after emitting any start tag.\nThis allows the tree builder to change the tokenizer's state.\nBy default no state changes occur.",11]],"paths":[[3,"Attribute"],[3,"Doctype"],[3,"Tag"],[3,"TokenizerOpts"],[4,"TagKind"],[4,"Token"],[4,"ScriptEscapeKind"],[4,"DoctypeIdKind"],[4,"RawKind"],[4,"AttrValueKind"],[4,"State"],[8,"TokenSink"],[3,"Tokenizer"],[3,"TreeBuilderOpts"],[4,"QuirksMode"],[4,"NodeOrText"],[8,"TreeSink"],[8,"Tracer"],[3,"TreeBuilder"],[3,"SerializeOpts"],[4,"TraversalScope"],[8,"Serializable"],[3,"Serializer"],[4,"NodeEnum"],[3,"Node"],[3,"RcDom"],[6,"Handle"],[3,"Node"],[3,"OwnedDom"],[3,"Handle"],[3,"Sink"],[3,"ParseOpts"],[8,"ParseResult"]]};
searchIndex['js'] = {"items":[[0,"","js",""],[3,"Class","",""],[12,"name","","",0],[12,"flags","","",0],[12,"addProperty","","",0],[12,"delProperty","","",0],[12,"getProperty","","",0],[12,"setProperty","","",0],[12,"enumerate","","",0],[12,"resolve","","",0],[12,"convert","","",0],[12,"finalize","","",0],[12,"checkAccess","","",0],[12,"call","","",0],[12,"hasInstance","","",0],[12,"construct","","",0],[12,"trace","","",0],[12,"ext","","",0],[12,"ops","","",0],[3,"ClassExtension","",""],[12,"equality","","",1],[12,"outerObject","","",1],[12,"innerObject","","",1],[12,"iteratorObject","","",1],[12,"unused","","",1],[12,"isWrappedNative","","",1],[3,"ObjectOps","",""],[12,"lookupGeneric","","",2],[12,"lookupProperty","","",2],[12,"lookupElement","","",2],[12,"lookupSpecial","","",2],[12,"defineGeneric","","",2],[12,"defineProperty","","",2],[12,"defineElement","","",2],[12,"defineSpecial","","",2],[12,"getGeneric","","",2],[12,"getProperty","","",2],[12,"getElement","","",2],[12,"getElementIfPresent","","",2],[12,"getSpecial","","",2],[12,"setGeneric","","",2],[12,"setProperty","","",2],[12,"setElement","","",2],[12,"setSpecial","","",2],[12,"getGenericAttributes","","",2],[12,"getPropertyAttributes","","",2],[12,"getElementAttributes","","",2],[12,"getSpecialAttributes","","",2],[12,"setGenericAttributes","","",2],[12,"setPropertyAttributes","","",2],[12,"setElementAttributes","","",2],[12,"setSpecialAttributes","","",2],[12,"deleteProperty","","",2],[12,"deleteElement","","",2],[12,"deleteSpecial","","",2],[12,"enumerate","","",2],[12,"typeOf","","",2],[12,"thisObject","","",2],[12,"clear","","",2],[4,"JSGCTraceKind","",""],[13,"JSTRACE_OBJECT","","",3],[13,"JSTRACE_STRING","","",3],[13,"JSTRACE_SCRIPT","","",3],[5,"JSCLASS_HAS_RESERVED_SLOTS","",""],[5,"JS_ARGV","",""],[5,"JS_SET_RVAL","",""],[5,"JS_THIS_OBJECT","",""],[5,"JS_CALLEE","",""],[0,"jsapi","",""],[3,"JSHandleObject","js::jsapi",""],[12,"unnamed_field1","","",4],[3,"JSHandleValue","",""],[12,"unnamed_field1","","",5],[3,"JSHandleString","",""],[12,"unnamed_field1","","",6],[3,"JSMutableHandleObject","",""],[12,"unnamed_field1","","",7],[3,"JSHandleId","",""],[12,"unnamed_field1","","",8],[3,"JSMutableHandleValue","",""],[12,"unnamed_field1","","",9],[3,"JSFreeOp","",""],[12,"runtime","","",10],[3,"JSStringFinalizer","",""],[12,"finalize","","",11],[3,"JSErrorFormatString","",""],[12,"format","","",12],[12,"argCount","","",12],[12,"exnType","","",12],[3,"JSTracer","",""],[12,"runtime","","",13],[12,"callback","","",13],[12,"debugPrinter","","",13],[12,"debugPrintArg","","",13],[12,"debugPrintIndex","","",13],[12,"eagerlyTraceWeakMaps","","",13],[12,"realLocation","","",13],[3,"JSClass","",""],[12,"name","","",14],[12,"flags","","",14],[12,"addProperty","","",14],[12,"delProperty","","",14],[12,"getProperty","","",14],[12,"setProperty","","",14],[12,"enumerate","","",14],[12,"resolve","","",14],[12,"convert","","",14],[12,"finalize","","",14],[12,"checkAccess","","",14],[12,"call","","",14],[12,"hasInstance","","",14],[12,"construct","","",14],[12,"trace","","",14],[12,"reserved","","",14],[3,"JSConstDoubleSpec","",""],[12,"dval","","",15],[12,"name","","",15],[12,"flags","","",15],[12,"spare","","",15],[3,"JSStrictPropertyOpWrapper","",""],[12,"op","","",16],[12,"info","","",16],[3,"JSPropertyOpWrapper","",""],[12,"op","","",17],[12,"info","","",17],[3,"JSNativeWrapper","",""],[12,"op","","",18],[12,"info","","",18],[3,"JSPropertySpec","",""],[12,"name","","",19],[12,"tinyid","","",19],[12,"flags","","",19],[12,"getter","","",19],[12,"setter","","",19],[3,"JSFunctionSpec","",""],[12,"name","","",20],[12,"call","","",20],[12,"nargs","","",20],[12,"flags","","",20],[12,"selfHostedName","","",20],[3,"JSPropertyDescriptor","",""],[12,"obj","","",21],[12,"attrs","","",21],[12,"shortid","","",21],[12,"getter","","",21],[12,"setter","","",21],[12,"value","","",21],[3,"JSPrincipals","",""],[12,"refcount","","",22],[3,"JSSecurityCallbacks","",""],[12,"checkObjectAccess","","",23],[12,"subsumePrincipals","","",23],[12,"findObjectPrincipals","","",23],[12,"contentSecurityPolicyAllows","","",23],[3,"JSStructuredCloneCallbacks","",""],[12,"read","","",24],[12,"write","","",24],[12,"reportError","","",24],[3,"JSLocaleCallbacks","",""],[12,"localeToUpperCase","","",25],[12,"localeToLowerCase","","",25],[12,"localeCompare","","",25],[12,"localeToUnicode","","",25],[12,"localeGetErrorMessage","","",25],[3,"JSErrorReport","",""],[12,"filename","","",26],[12,"originPrincipals","","",26],[12,"lineno","","",26],[12,"linebuf","","",26],[12,"tokenptr","","",26],[12,"uclinebuf","","",26],[12,"uctokenptr","","",26],[12,"flags","","",26],[12,"errorNumber","","",26],[12,"ucmessage","","",26],[12,"messageArgs","","",26],[12,"exnType","","",26],[12,"column","","",26],[4,"JSString","",""],[4,"JSFlatString","",""],[4,"JSObject","",""],[4,"JSScript","",""],[4,"JSFunction","",""],[4,"JSContext","",""],[4,"JSRuntime","",""],[4,"JSIdArray","",""],[4,"JSExceptionState","",""],[4,"JSStructuredCloneReader","",""],[4,"JSStructuredCloneWriter","",""],[4,"JSCompartment","",""],[4,"JSCrossCompartmentCall","",""],[4,"JSVersion","",""],[13,"JSVERSION_DEFAULT","","",27],[13,"JSVERSION_LATEST","","",27],[4,"JSIterateOp","",""],[13,"JSENUMERATE_INIT","","",28],[13,"JSENUMERATE_INIT_ALL","","",28],[13,"JSENUMERATE_NEXT","","",28],[13,"JSENUMERATE_DESTROY","","",28],[4,"JSType","",""],[13,"JSTYPE_VOID","","",29],[13,"JSTYPE_OBJECT","","",29],[13,"JSTYPE_FUNCTION","","",29],[13,"JSTYPE_STRING","","",29],[13,"JSTYPE_NUMBER","","",29],[13,"JSTYPE_BOOLEAN","","",29],[13,"JSTYPE_NULL","","",29],[13,"JSTYPE_XML","","",29],[13,"JSTYPE_LIMIT","","",29],[4,"JSAccessMode","",""],[13,"JSACC_PROTO","","",30],[13,"JSACC_WATCH","","",30],[13,"JSACC_READ","","",30],[13,"JSACC_WRITE","","",30],[13,"JSACC_LIMIT","","",30],[4,"JSGCTraceKind","",""],[13,"JSTRACE_OBJECT","","",31],[13,"JSTRACE_STRING","","",31],[13,"JSTRACE_SCRIPT","","",31],[5,"JS_CreateHandleObject","",""],[5,"JS_DestroyHandleObject","",""],[5,"JS_CreateMutableHandleObject","",""],[5,"JS_DestroyMutableHandleObject","",""],[5,"JS_CreateHandleId","",""],[5,"JS_DestroyHandleId","",""],[5,"JS_StringHasBeenInterned","",""],[5,"INTERNED_STRING_TO_JSID","",""],[5,"JS_CallOnce","",""],[5,"JS_Now","",""],[5,"JS_GetNaNValue","",""],[5,"JS_GetNegativeInfinityValue","",""],[5,"JS_GetPositiveInfinityValue","",""],[5,"JS_GetEmptyStringValue","",""],[5,"JS_GetEmptyString","",""],[5,"JS_ConvertArguments","",""],[5,"JS_ConvertValue","",""],[5,"JS_ValueToObject","",""],[5,"JS_ValueToFunction","",""],[5,"JS_ValueToConstructor","",""],[5,"JS_ValueToString","",""],[5,"JS_ValueToSource","",""],[5,"JS_ValueToNumber","",""],[5,"JS_DoubleIsInt32","",""],[5,"JS_DoubleToInt32","",""],[5,"JS_DoubleToUint32","",""],[5,"JS_ValueToECMAInt32","",""],[5,"JS_ValueToInt64","",""],[5,"JS_ValueToUint64","",""],[5,"JS_ValueToECMAUint32","",""],[5,"JS_ValueToInt32","",""],[5,"JS_ValueToUint16","",""],[5,"JS_ValueToBoolean","",""],[5,"JS_TypeOfValue","",""],[5,"JS_GetTypeName","",""],[5,"JS_StrictlyEqual","",""],[5,"JS_LooselyEqual","",""],[5,"JS_SameValue","",""],[5,"JS_IsBuiltinEvalFunction","",""],[5,"JS_IsBuiltinFunctionConstructor","",""],[5,"JS_Init","",""],[5,"JS_Finish","",""],[5,"JS_ShutDown","",""],[5,"JS_GetRuntimePrivate","",""],[5,"JS_GetRuntime","",""],[5,"JS_SetRuntimePrivate","",""],[5,"JS_BeginRequest","",""],[5,"JS_EndRequest","",""],[5,"JS_YieldRequest","",""],[5,"JS_SuspendRequest","",""],[5,"JS_ResumeRequest","",""],[5,"JS_IsInRequest","",""],[5,"JS_IsInSuspendedRequest","",""],[5,"JS_SetContextCallback","",""],[5,"JS_NewContext","",""],[5,"JS_DestroyContext","",""],[5,"JS_DestroyContextNoGC","",""],[5,"JS_GetContextPrivate","",""],[5,"JS_SetContextPrivate","",""],[5,"JS_GetSecondContextPrivate","",""],[5,"JS_SetSecondContextPrivate","",""],[5,"JS_ContextIterator","",""],[5,"JS_GetVersion","",""],[5,"JS_SetVersion","",""],[5,"JS_VersionToString","",""],[5,"JS_StringToVersion","",""],[5,"JS_GetOptions","",""],[5,"JS_SetOptions","",""],[5,"JS_ToggleOptions","",""],[5,"JS_SetJitHardening","",""],[5,"JS_GetImplementationVersion","",""],[5,"JS_SetDestroyCompartmentCallback","",""],[5,"JS_SetCompartmentNameCallback","",""],[5,"JS_SetWrapObjectCallbacks","",""],[5,"JS_EnterCrossCompartmentCall","",""],[5,"JS_LeaveCrossCompartmentCall","",""],[5,"JS_SetCompartmentPrivate","",""],[5,"JS_GetCompartmentPrivate","",""],[5,"JS_WrapObject","",""],[5,"JS_WrapValue","",""],[5,"JS_TransplantObject","",""],[5,"js_TransplantObjectWithWrapper","",""],[5,"JS_RefreshCrossCompartmentWrappers","",""],[5,"JS_IterateCompartments","",""],[5,"JS_GetGlobalObject","",""],[5,"JS_SetGlobalObject","",""],[5,"JS_InitStandardClasses","",""],[5,"JS_ResolveStandardClass","",""],[5,"JS_EnumerateStandardClasses","",""],[5,"JS_EnumerateResolvedStandardClasses","",""],[5,"JS_GetClassObject","",""],[5,"JS_GetClassPrototype","",""],[5,"JS_IdentifyClassPrototype","",""],[5,"JS_GetFunctionPrototype","",""],[5,"JS_GetObjectPrototype","",""],[5,"JS_GetGlobalForObject","",""],[5,"JS_GetGlobalForCompartmentOrNull","",""],[5,"JS_GetGlobalForScopeChain","",""],[5,"JS_GetScriptedGlobal","",""],[5,"JS_InitReflect","",""],[5,"JS_EnumerateDiagnosticMemoryRegions","",""],[5,"JS_ComputeThis","",""],[5,"JS_MallocInCompartment","",""],[5,"JS_FreeInCompartment","",""],[5,"JS_malloc","",""],[5,"JS_realloc","",""],[5,"JS_free","",""],[5,"JS_freeop","",""],[5,"JS_GetDefaultFreeOp","",""],[5,"JS_updateMallocCounter","",""],[5,"JS_strdup","",""],[5,"JS_AddValueRoot","",""],[5,"JS_AddStringRoot","",""],[5,"JS_AddObjectRoot","",""],[5,"JS_AddGCThingRoot","",""],[5,"JS_AddNamedValueRoot","",""],[5,"JS_AddNamedStringRoot","",""],[5,"JS_AddNamedObjectRoot","",""],[5,"JS_AddNamedScriptRoot","",""],[5,"JS_AddNamedGCThingRoot","",""],[5,"JS_RemoveValueRoot","",""],[5,"JS_RemoveStringRoot","",""],[5,"JS_RemoveObjectRoot","",""],[5,"JS_RemoveScriptRoot","",""],[5,"JS_RemoveGCThingRoot","",""],[5,"JS_RemoveValueRootRT","",""],[5,"JS_RemoveStringRootRT","",""],[5,"JS_RemoveObjectRootRT","",""],[5,"js_AddRootRT","",""],[5,"js_AddGCThingRootRT","",""],[5,"js_RemoveRoot","",""],[5,"JS_AnchorPtr","",""],[5,"JS_MapGCRoots","",""],[5,"JS_LockGCThing","",""],[5,"JS_LockGCThingRT","",""],[5,"JS_UnlockGCThing","",""],[5,"JS_UnlockGCThingRT","",""],[5,"JS_SetExtraGCRootsTracer","",""],[5,"JS_CallTracer","",""],[5,"JS_TracerInit","",""],[5,"JS_TraceChildren","",""],[5,"JS_TraceRuntime","",""],[5,"JS_GetTraceThingInfo","",""],[5,"JS_GetTraceEdgeName","",""],[5,"JS_GC","",""],[5,"JS_MaybeGC","",""],[5,"JS_SetGCZeal","",""],[5,"JS_InhibitGC","",""],[5,"JS_AllowGC","",""],[5,"JS_SetGCCallback","",""],[5,"JS_SetFinalizeCallback","",""],[5,"JS_IsGCMarkingTracer","",""],[5,"JS_IsAboutToBeFinalized","",""],[5,"JS_SetGCParameter","",""],[5,"JS_GetGCParameter","",""],[5,"JS_SetGCParameterForThread","",""],[5,"JS_GetGCParameterForThread","",""],[5,"JS_NewExternalString","",""],[5,"JS_IsExternalString","",""],[5,"JS_GetExternalStringFinalizer","",""],[5,"JS_SetNativeStackQuota","",""],[5,"JS_IdArrayLength","",""],[5,"JS_IdArrayGet","",""],[5,"JS_DestroyIdArray","",""],[5,"JS_ValueToId","",""],[5,"JS_IdToValue","",""],[5,"JS_DefaultValue","",""],[5,"JS_PropertyStub","",""],[5,"JS_StrictPropertyStub","",""],[5,"JS_EnumerateStub","",""],[5,"JS_ResolveStub","",""],[5,"JS_ConvertStub","",""],[5,"JS_InitClass","",""],[5,"JS_LinkConstructorAndPrototype","",""],[5,"JS_GetClass","",""],[5,"JS_InstanceOf","",""],[5,"JS_HasInstance","",""],[5,"JS_GetPrivate","",""],[5,"JS_SetPrivate","",""],[5,"JS_GetInstancePrivate","",""],[5,"JS_GetPrototype","",""],[5,"JS_SetPrototype","",""],[5,"JS_GetParent","",""],[5,"JS_SetParent","",""],[5,"JS_GetConstructor","",""],[5,"JS_GetObjectId","",""],[5,"JS_NewGlobalObject","",""],[5,"JS_NewObject","",""],[5,"JS_IsExtensible","",""],[5,"JS_IsNative","",""],[5,"JS_GetObjectRuntime","",""],[5,"JS_NewObjectWithGivenProto","",""],[5,"JS_DeepFreezeObject","",""],[5,"JS_FreezeObject","",""],[5,"JS_New","",""],[5,"JS_DefineObject","",""],[5,"JS_DefineConstDoubles","",""],[5,"JS_DefineProperties","",""],[5,"JS_DefineProperty","",""],[5,"JS_DefinePropertyById","",""],[5,"JS_DefineOwnProperty","",""],[5,"JS_GetPropertyAttributes","",""],[5,"JS_GetPropertyAttrsGetterAndSetter","",""],[5,"JS_GetPropertyAttrsGetterAndSetterById","",""],[5,"JS_SetPropertyAttributes","",""],[5,"JS_DefinePropertyWithTinyId","",""],[5,"JS_AlreadyHasOwnProperty","",""],[5,"JS_AlreadyHasOwnPropertyById","",""],[5,"JS_HasProperty","",""],[5,"JS_HasPropertyById","",""],[5,"JS_LookupProperty","",""],[5,"JS_LookupPropertyById","",""],[5,"JS_LookupPropertyWithFlags","",""],[5,"JS_LookupPropertyWithFlagsById","",""],[5,"JS_GetPropertyDescriptorById","",""],[5,"JS_GetOwnPropertyDescriptor","",""],[5,"JS_GetProperty","",""],[5,"JS_GetPropertyDefault","",""],[5,"JS_GetPropertyById","",""],[5,"JS_GetPropertyByIdDefault","",""],[5,"JS_ForwardGetPropertyTo","",""],[5,"JS_GetMethodById","",""],[5,"JS_GetMethod","",""],[5,"JS_SetProperty","",""],[5,"JS_SetPropertyById","",""],[5,"JS_DeleteProperty","",""],[5,"JS_DeleteProperty2","",""],[5,"JS_DeletePropertyById","",""],[5,"JS_DeletePropertyById2","",""],[5,"JS_DefineUCProperty","",""],[5,"JS_GetUCPropertyAttributes","",""],[5,"JS_GetUCPropertyAttrsGetterAndSetter","",""],[5,"JS_SetUCPropertyAttributes","",""],[5,"JS_DefineUCPropertyWithTinyId","",""],[5,"JS_AlreadyHasOwnUCProperty","",""],[5,"JS_HasUCProperty","",""],[5,"JS_LookupUCProperty","",""],[5,"JS_GetUCProperty","",""],[5,"JS_SetUCProperty","",""],[5,"JS_DeleteUCProperty2","",""],[5,"JS_NewArrayObject","",""],[5,"JS_IsArrayObject","",""],[5,"JS_GetArrayLength","",""],[5,"JS_SetArrayLength","",""],[5,"JS_DefineElement","",""],[5,"JS_AlreadyHasOwnElement","",""],[5,"JS_HasElement","",""],[5,"JS_LookupElement","",""],[5,"JS_GetElement","",""],[5,"JS_ForwardGetElementTo","",""],[5,"JS_GetElementIfPresent","",""],[5,"JS_SetElement","",""],[5,"JS_DeleteElement","",""],[5,"JS_DeleteElement2","",""],[5,"JS_ClearScope","",""],[5,"JS_Enumerate","",""],[5,"JS_NewPropertyIterator","",""],[5,"JS_NextProperty","",""],[5,"JS_ArrayIterator","",""],[5,"JS_CheckAccess","",""],[5,"JS_GetReservedSlot","",""],[5,"JS_SetReservedSlot","",""],[5,"JS_HoldPrincipals","",""],[5,"JS_DropPrincipals","",""],[5,"JS_SetSecurityCallbacks","",""],[5,"JS_GetSecurityCallbacks","",""],[5,"JS_SetTrustedPrincipals","",""],[5,"JS_InitDestroyPrincipalsCallback","",""],[5,"JS_NewFunction","",""],[5,"JS_NewFunctionById","",""],[5,"JS_GetFunctionObject","",""],[5,"JS_GetFunctionId","",""],[5,"JS_GetFunctionDisplayId","",""],[5,"JS_GetFunctionFlags","",""],[5,"JS_GetFunctionArity","",""],[5,"JS_ObjectIsFunction","",""],[5,"JS_ObjectIsCallable","",""],[5,"JS_IsNativeFunction","",""],[5,"JS_BindCallable","",""],[5,"JS_DefineFunctions","",""],[5,"JS_DefineFunction","",""],[5,"JS_DefineUCFunction","",""],[5,"JS_DefineFunctionById","",""],[5,"JS_CloneFunctionObject","",""],[5,"JS_BufferIsCompilableUnit","",""],[5,"JS_CompileScript","",""],[5,"JS_CompileScriptForPrincipals","",""],[5,"JS_CompileScriptForPrincipalsVersion","",""],[5,"JS_CompileUCScript","",""],[5,"JS_CompileUCScriptForPrincipals","",""],[5,"JS_CompileUCScriptForPrincipalsVersion","",""],[5,"JS_CompileUCScriptForPrincipalsVersionOrigin","",""],[5,"JS_CompileUTF8File","",""],[5,"JS_CompileUTF8FileHandle","",""],[5,"JS_CompileUTF8FileHandleForPrincipals","",""],[5,"JS_CompileUTF8FileHandleForPrincipalsVersion","",""],[5,"JS_GetGlobalFromScript","",""],[5,"JS_CompileFunction","",""],[5,"JS_CompileFunctionForPrincipals","",""],[5,"JS_CompileUCFunction","",""],[5,"JS_CompileUCFunctionForPrincipals","",""],[5,"JS_CompileUCFunctionForPrincipalsVersion","",""],[5,"JS_DecompileScript","",""],[5,"JS_DecompileFunction","",""],[5,"JS_DecompileFunctionBody","",""],[5,"JS_ExecuteScript","",""],[5,"JS_ExecuteScriptVersion","",""],[5,"JS_EvaluateScript","",""],[5,"JS_EvaluateScriptForPrincipals","",""],[5,"JS_EvaluateScriptForPrincipalsVersion","",""],[5,"JS_EvaluateUCScript","",""],[5,"JS_EvaluateUCScriptForPrincipals","",""],[5,"JS_EvaluateUCScriptForPrincipalsVersion","",""],[5,"JS_EvaluateUCScriptForPrincipalsVersionOrigin","",""],[5,"JS_CallFunction","",""],[5,"JS_CallFunctionName","",""],[5,"JS_CallFunctionValue","",""],[5,"JS_SetOperationCallback","",""],[5,"JS_GetOperationCallback","",""],[5,"JS_TriggerOperationCallback","",""],[5,"JS_IsRunning","",""],[5,"JS_SaveFrameChain","",""],[5,"JS_RestoreFrameChain","",""],[5,"JS_NewStringCopyN","",""],[5,"JS_NewStringCopyZ","",""],[5,"JS_InternJSString","",""],[5,"JS_InternStringN","",""],[5,"JS_InternString","",""],[5,"JS_NewUCString","",""],[5,"JS_NewUCStringCopyN","",""],[5,"JS_NewUCStringCopyZ","",""],[5,"JS_InternUCStringN","",""],[5,"JS_InternUCString","",""],[5,"JS_CompareStrings","",""],[5,"JS_StringEqualsAscii","",""],[5,"JS_PutEscapedString","",""],[5,"JS_FileEscapedString","",""],[5,"JS_GetStringLength","",""],[5,"JS_GetStringCharsAndLength","",""],[5,"JS_GetInternedStringChars","",""],[5,"JS_GetInternedStringCharsAndLength","",""],[5,"JS_GetStringCharsZ","",""],[5,"JS_GetStringCharsZAndLength","",""],[5,"JS_FlattenString","",""],[5,"JS_GetFlatStringChars","",""],[5,"JS_FlatStringEqualsAscii","",""],[5,"JS_PutEscapedFlatString","",""],[5,"JS_NewGrowableString","",""],[5,"JS_NewDependentString","",""],[5,"JS_ConcatStrings","",""],[5,"JS_UndependString","",""],[5,"JS_MakeStringImmutable","",""],[5,"JS_CStringsAreUTF8","",""],[5,"JS_SetCStringsAreUTF8","",""],[5,"JS_EncodeCharacters","",""],[5,"JS_DecodeBytes","",""],[5,"JS_DecodeUTF8","",""],[5,"JS_EncodeString","",""],[5,"JS_GetStringEncodingLength","",""],[5,"JS_EncodeStringToBuffer","",""],[5,"JS_Stringify","",""],[5,"JS_ParseJSON","",""],[5,"JS_ParseJSONWithReviver","",""],[5,"JS_ReadStructuredClone","",""],[5,"JS_WriteStructuredClone","",""],[5,"JS_StructuredClone","",""],[5,"JS_SetStructuredCloneCallbacks","",""],[5,"JS_ReadUint32Pair","",""],[5,"JS_ReadBytes","",""],[5,"JS_ReadTypedArray","",""],[5,"JS_WriteUint32Pair","",""],[5,"JS_WriteBytes","",""],[5,"JS_WriteTypedArray","",""],[5,"JS_SetLocaleCallbacks","",""],[5,"JS_GetLocaleCallbacks","",""],[5,"JS_ReportError","",""],[5,"JS_ReportErrorNumber","",""],[5,"JS_ReportErrorNumberUC","",""],[5,"JS_ReportWarning","",""],[5,"JS_ReportErrorFlagsAndNumber","",""],[5,"JS_ReportErrorFlagsAndNumberUC","",""],[5,"JS_ReportOutOfMemory","",""],[5,"JS_ReportAllocationOverflow","",""],[5,"JS_GetErrorReporter","",""],[5,"JS_SetErrorReporter","",""],[5,"JS_NewDateObject","",""],[5,"JS_NewDateObjectMsec","",""],[5,"JS_ObjectIsDate","",""],[5,"JS_ClearDateCaches","",""],[5,"JS_NewRegExpObject","",""],[5,"JS_NewUCRegExpObject","",""],[5,"JS_SetRegExpInput","",""],[5,"JS_ClearRegExpStatics","",""],[5,"JS_ExecuteRegExp","",""],[5,"JS_NewRegExpObjectNoStatics","",""],[5,"JS_NewUCRegExpObjectNoStatics","",""],[5,"JS_ExecuteRegExpNoStatics","",""],[5,"JS_ObjectIsRegExp","",""],[5,"JS_GetRegExpFlags","",""],[5,"JS_GetRegExpSource","",""],[5,"JS_IsExceptionPending","",""],[5,"JS_GetPendingException","",""],[5,"JS_SetPendingException","",""],[5,"JS_ClearPendingException","",""],[5,"JS_ReportPendingException","",""],[5,"JS_SaveExceptionState","",""],[5,"JS_RestoreExceptionState","",""],[5,"JS_DropExceptionState","",""],[5,"JS_ErrorFromException","",""],[5,"JS_ThrowReportedError","",""],[5,"JS_ThrowStopIteration","",""],[5,"JS_GetCurrentThread","",""],[5,"JS_AbortIfWrongThread","",""],[5,"JS_ClearRuntimeThread","",""],[5,"JS_SetRuntimeThread","",""],[5,"JS_SetNativeStackBounds","",""],[5,"JS_NewObjectForConstructor","",""],[5,"JS_IndexToId","",""],[5,"JS_IsIdentifier","",""],[5,"JS_DescribeScriptedCaller","",""],[5,"JS_EncodeScript","",""],[5,"JS_EncodeInterpretedFunction","",""],[5,"JS_DecodeScript","",""],[5,"JS_DecodeInterpretedFunction","",""],[6,"JSBool","",""],[6,"jschar","",""],[6,"jsid","",""],[6,"JSCallOnceType","",""],[6,"JSInitCallback","",""],[6,"JSProtoKey","",""],[6,"moz_static_assert6","",""],[6,"JSRawObject","",""],[6,"JSPropertyOp","",""],[6,"JSStrictPropertyOp","",""],[6,"JSNewEnumerateOp","",""],[6,"JSEnumerateOp","",""],[6,"JSResolveOp","",""],[6,"JSNewResolveOp","",""],[6,"JSConvertOp","",""],[6,"JSTypeOfOp","",""],[6,"JSFinalizeOp","",""],[6,"JSCheckAccessOp","",""],[6,"JSHasInstanceOp","",""],[6,"JSTraceOp","",""],[6,"JSTraceNamePrinter","",""],[6,"JSEqualityOp","",""],[6,"JSNative","",""],[6,"Enum_JSContextOp","",""],[6,"JSContextOp","",""],[6,"JSContextCallback","",""],[6,"Enum_JSGCStatus","",""],[6,"JSGCStatus","",""],[6,"JSGCCallback","",""],[6,"Enum_JSFinalizeStatus","",""],[6,"JSFinalizeStatus","",""],[6,"JSFinalizeCallback","",""],[6,"JSTraceDataOp","",""],[6,"JSOperationCallback","",""],[6,"JSErrorReporter","",""],[6,"Enum_JSExnType","",""],[6,"JSExnType","",""],[6,"JSErrorCallback","",""],[6,"JSLocaleToUpperCase","",""],[6,"JSLocaleToLowerCase","",""],[6,"JSLocaleCompare","",""],[6,"JSLocaleToUnicode","",""],[6,"JSDestroyPrincipalsOp","",""],[6,"JSSubsumePrincipalsOp","",""],[6,"JSObjectPrincipalsFinder","",""],[6,"JSCSPEvalChecker","",""],[6,"JSWrapObjectCallback","",""],[6,"JSPreWrapCallback","",""],[6,"JSSameCompartmentWrapObjectCallback","",""],[6,"JSDestroyCompartmentCallback","",""],[6,"JSCompartmentNameCallback","",""],[6,"ReadStructuredCloneOp","",""],[6,"WriteStructuredCloneOp","",""],[6,"StructuredCloneErrorOp","",""],[6,"JSIterateCompartmentCallback","",""],[6,"JSEnumerateDiagnosticMemoryCallback","",""],[6,"Enum_JSGCRootType","",""],[6,"JSGCRootType","",""],[6,"JSGCRootMapFun","",""],[6,"JSTraceCallback","",""],[6,"Enum_JSGCParamKey","",""],[6,"JSGCParamKey","",""],[6,"Enum_JSGCMode","",""],[6,"JSGCMode","",""],[6,"JSClassInternal","",""],[6,"Enum_JSExecPart","",""],[6,"JSExecPart","",""],[6,"JSONWriteCallback","",""],[17,"JSProto_LIMIT","",""],[17,"JS_DEFAULT_ZEAL_FREQ","",""],[17,"JSCONTEXT_NEW","",""],[17,"JSCONTEXT_DESTROY","",""],[17,"JSGC_BEGIN","",""],[17,"JSGC_END","",""],[17,"JSFINALIZE_START","",""],[17,"JSFINALIZE_END","",""],[17,"JSEXN_NONE","",""],[17,"JSEXN_ERR","",""],[17,"JSEXN_INTERNALERR","",""],[17,"JSEXN_EVALERR","",""],[17,"JSEXN_RANGEERR","",""],[17,"JSEXN_REFERENCEERR","",""],[17,"JSEXN_SYNTAXERR","",""],[17,"JSEXN_TYPEERR","",""],[17,"JSEXN_URIERR","",""],[17,"JSEXN_LIMIT","",""],[17,"JS_GC_ROOT_VALUE_PTR","",""],[17,"JS_GC_ROOT_GCTHING_PTR","",""],[17,"JSGC_MAX_BYTES","",""],[17,"JSGC_MAX_MALLOC_BYTES","",""],[17,"JSGC_BYTES","",""],[17,"JSGC_NUMBER","",""],[17,"JSGC_MAX_CODE_CACHE_BYTES","",""],[17,"JSGC_MODE","",""],[17,"JSGC_UNUSED_CHUNKS","",""],[17,"JSGC_TOTAL_CHUNKS","",""],[17,"JSGC_SLICE_TIME_BUDGET","",""],[17,"JSGC_MARK_STACK_LIMIT","",""],[17,"JSGC_HIGH_FREQUENCY_TIME_LIMIT","",""],[17,"JSGC_HIGH_FREQUENCY_LOW_LIMIT","",""],[17,"JSGC_HIGH_FREQUENCY_HIGH_LIMIT","",""],[17,"JSGC_HIGH_FREQUENCY_HEAP_GROWTH_MAX","",""],[17,"JSGC_HIGH_FREQUENCY_HEAP_GROWTH_MIN","",""],[17,"JSGC_LOW_FREQUENCY_HEAP_GROWTH","",""],[17,"JSGC_DYNAMIC_HEAP_GROWTH","",""],[17,"JSGC_DYNAMIC_MARK_SLICE","",""],[17,"JSGC_ANALYSIS_PURGE_TRIGGER","",""],[17,"JSGC_MODE_GLOBAL","",""],[17,"JSGC_MODE_COMPARTMENT","",""],[17,"JSGC_MODE_INCREMENTAL","",""],[17,"JSEXEC_PROLOG","",""],[17,"JSEXEC_MAIN","",""],[17,"JSREPORT_ERROR","",""],[17,"JSREPORT_WARNING","",""],[17,"JSREPORT_EXCEPTION","",""],[17,"JSREPORT_STRICT","",""],[17,"JSREPORT_STRICT_MODE_ERROR","",""],[0,"rust","js","Rust wrappers around the raw JS apis"],[3,"rt_rsrc","js::rust",""],[12,"ptr","","",32],[3,"Cx","",""],[12,"ptr","","",33],[12,"rt","","",33],[5,"new_runtime","",""],[5,"rt","",""],[5,"new_context","",""],[5,"reportError","",""],[5,"with_compartment","",""],[6,"rt","",""],[8,"RtUtils","",""],[10,"cx","","",34],[11,"drop","","",32],[11,"cx","alloc::rc","",35],[11,"drop","js::rust","",33],[11,"set_default_options_and_version","","",33],[11,"set_options","","",33],[11,"set_version","","",33],[11,"set_logging_error_reporter","","",33],[11,"set_error_reporter","","",33],[11,"evaluate_script","","",33],[0,"glue","js",""],[3,"ProxyTraps","js::glue",""],[12,"getPropertyDescriptor","","",36],[12,"getOwnPropertyDescriptor","","",36],[12,"defineProperty","","",36],[12,"getOwnPropertyNames","","",36],[12,"delete_","","",36],[12,"enumerate","","",36],[12,"has","","",36],[12,"hasOwn","","",36],[12,"get","","",36],[12,"set","","",36],[12,"keys","","",36],[12,"iterate","","",36],[12,"call","","",36],[12,"construct","","",36],[12,"nativeCall","","",36],[12,"hasInstance","","",36],[12,"typeOf","","",36],[12,"objectClassIs","","",36],[12,"obj_toString","","",36],[12,"fun_toString","","",36],[12,"defaultValue","","",36],[12,"iteratorNext","","",36],[12,"finalize","","",36],[12,"getElementIfPresent","","",36],[12,"getPrototypeOf","","",36],[12,"trace","","",36],[4,"AutoIdVector","",""],[5,"RUST_JS_NumberValue","",""],[5,"CallJitPropertyOp","",""],[5,"CallJitMethodOp","",""],[5,"RUST_FUNCTION_VALUE_TO_JITINFO","",""],[5,"SetFunctionNativeReserved","",""],[5,"GetFunctionNativeReserved","",""],[5,"CreateProxyHandler","",""],[5,"CreateWrapperProxyHandler","",""],[5,"NewProxyObject","",""],[5,"WrapperNew","",""],[5,"GetProxyExtra","",""],[5,"GetProxyPrivate","",""],[5,"SetProxyExtra","",""],[5,"GetObjectProto","",""],[5,"GetObjectParent","",""],[5,"RUST_JSID_IS_INT","",""],[5,"RUST_JSID_TO_INT","",""],[5,"RUST_JSID_IS_STRING","",""],[5,"RUST_JSID_TO_STRING","",""],[5,"RUST_SET_JITINFO","",""],[5,"RUST_INTERNED_STRING_TO_JSID","",""],[5,"DefineFunctionWithReserved","",""],[5,"GetObjectJSClass","",""],[5,"RUST_js_GetErrorMessage","",""],[5,"js_IsObjectProxyClass","",""],[5,"js_IsFunctionProxyClass","",""],[5,"IsProxyHandlerFamily","",""],[5,"GetProxyHandlerExtra","",""],[5,"GetProxyHandler","",""],[5,"InvokeGetOwnPropertyDescriptor","",""],[5,"GetGlobalForObjectCrossCompartment","",""],[5,"ReportError","",""],[5,"IsWrapper","",""],[5,"UnwrapObject","",""],[5,"AppendToAutoIdVector","",""],[17,"JS_STRUCTURED_CLONE_VERSION","",""],[0,"jsval","js",""],[3,"JSVal","js::jsval",""],[12,"v","","",37],[5,"NullValue","",""],[5,"UndefinedValue","",""],[5,"Int32Value","",""],[5,"DoubleValue","",""],[5,"UInt32Value","",""],[5,"StringValue","",""],[5,"BooleanValue","",""],[5,"ObjectValue","",""],[5,"ObjectOrNullValue","",""],[5,"PrivateValue","",""],[11,"clone","","",37],[11,"eq","","",37],[11,"ne","","",37],[11,"is_undefined","","",37],[11,"is_null","","",37],[11,"is_null_or_undefined","","",37],[11,"is_boolean","","",37],[11,"is_double","","",37],[11,"is_primitive","","",37],[11,"is_string","","",37],[11,"is_object","","",37],[11,"to_boolean","","",37],[11,"to_object","","",37],[11,"is_object_or_null","","",37],[11,"to_object_or_null","","",37],[11,"to_private","","",37],[11,"is_gcthing","","",37],[11,"to_gcthing","","",37],[11,"is_markable","","",37],[11,"trace_kind","","",37],[0,"jsfriendapi","js",""],[3,"JSJitInfo","js::jsfriendapi",""],[12,"op","","",38],[12,"protoID","","",38],[12,"depth","","",38],[12,"isInfallible","","",38],[12,"isConstant","","",38],[5,"JS_ObjectToOuterObject","",""],[5,"JS_WrapPropertyDescriptor","",""],[0,"bindgen","",""],[5,"JS_NewObjectWithUniqueType","js::jsfriendapi::bindgen",""],[5,"JS_GetAddressableObject","",""],[5,"JS_NewInt8Array","",""],[5,"JS_GetInt8ArrayData","",""],[5,"JS_NewUint8Array","",""],[5,"JS_GetUint8ArrayData","",""],[5,"JS_NewUint8ClampedArray","",""],[5,"JS_GetUint8ClampedArrayData","",""],[5,"JS_NewInt16Array","",""],[5,"JS_GetInt16ArrayData","",""],[5,"JS_NewUint16Array","",""],[5,"JS_GetUint16ArrayData","",""],[5,"JS_NewInt32Array","",""],[5,"JS_GetInt32ArrayData","",""],[5,"JS_NewUint32Array","",""],[5,"JS_GetUint32ArrayData","",""],[5,"JS_NewFloat32Array","",""],[5,"JS_GetFloat32ArrayData","",""],[5,"JS_NewFloat64Array","",""],[5,"JS_GetFloat64ArrayData","",""],[6,"JSJitPropertyOp","js::jsfriendapi",""],[6,"JSObjectOp","js",""],[17,"JSOPTION_STRICT","",""],[17,"JSOPTION_WERROR","",""],[17,"JSOPTION_VAROBJFIX","",""],[17,"JSOPTION_DONT_REPORT_UNCAUGHT","",""],[17,"JSOPTION_AUTOJSAPI_OWNS_ERROR_REPORTING","",""],[17,"JSOPTION_METHODJIT","",""],[17,"JSOPTION_TYPE_INFERENCE","",""],[17,"default_heapsize","",""],[17,"default_stacksize","",""],[17,"ERR","",""],[17,"JSID_TYPE_STRING","",""],[17,"JSID_TYPE_INT","",""],[17,"JSID_TYPE_VOID","",""],[17,"JSID_TYPE_OBJECT","",""],[17,"JSID_TYPE_DEFAULT_XML_NAMESPACE","",""],[17,"JSID_TYPE_MASK","",""],[17,"JSID_VOID","",""],[17,"JSFUN_CONSTRUCTOR","",""],[17,"JSPROP_ENUMERATE","",""],[17,"JSPROP_READONLY","",""],[17,"JSPROP_PERMANENT","",""],[17,"JSPROP_GETTER","",""],[17,"JSPROP_SETTER","",""],[17,"JSPROP_SHARED","",""],[17,"JSPROP_NATIVE_ACCESSORS","",""],[17,"JSCLASS_RESERVED_SLOTS_SHIFT","",""],[17,"JSCLASS_RESERVED_SLOTS_WIDTH","",""],[17,"JSCLASS_RESERVED_SLOTS_MASK","",""],[17,"JSCLASS_HIGH_FLAGS_SHIFT","",""],[17,"JSCLASS_IS_GLOBAL","",""],[17,"JSCLASS_GLOBAL_SLOT_COUNT","",""],[17,"JSCLASS_IS_DOMJSCLASS","",""],[17,"JSCLASS_USERBIT1","",""],[17,"JSSLOT_PROXY_PRIVATE","",""],[17,"JSRESOLVE_QUALIFIED","",""],[17,"JSRESOLVE_ASSIGNING","",""],[17,"JSRESOLVE_DETECTING","",""]],"paths":[[3,"Class"],[3,"ClassExtension"],[3,"ObjectOps"],[4,"JSGCTraceKind"],[3,"JSHandleObject"],[3,"JSHandleValue"],[3,"JSHandleString"],[3,"JSMutableHandleObject"],[3,"JSHandleId"],[3,"JSMutableHandleValue"],[3,"JSFreeOp"],[3,"JSStringFinalizer"],[3,"JSErrorFormatString"],[3,"JSTracer"],[3,"JSClass"],[3,"JSConstDoubleSpec"],[3,"JSStrictPropertyOpWrapper"],[3,"JSPropertyOpWrapper"],[3,"JSNativeWrapper"],[3,"JSPropertySpec"],[3,"JSFunctionSpec"],[3,"JSPropertyDescriptor"],[3,"JSPrincipals"],[3,"JSSecurityCallbacks"],[3,"JSStructuredCloneCallbacks"],[3,"JSLocaleCallbacks"],[3,"JSErrorReport"],[4,"JSVersion"],[4,"JSIterateOp"],[4,"JSType"],[4,"JSAccessMode"],[4,"JSGCTraceKind"],[3,"rt_rsrc"],[3,"Cx"],[8,"RtUtils"],[3,"Rc"],[3,"ProxyTraps"],[3,"JSVal"],[3,"JSJitInfo"]]};
searchIndex['gleam'] = {"items":[[0,"","gleam",""],[0,"gl","",""],[3,"__GLsync","gleam::gl",""],[3,"_cl_context","",""],[3,"_cl_event","",""],[3,"FnPtr","",""],[5,"Accum","",""],[5,"ActiveTexture","","Fallbacks: ActiveTextureARB"],[5,"AlphaFunc","",""],[5,"AreTexturesResident","",""],[5,"ArrayElement","","Fallbacks: ArrayElementEXT"],[5,"AttachShader","","Fallbacks: AttachObjectARB"],[5,"Begin","",""],[5,"BeginConditionalRender","","Fallbacks: BeginConditionalRenderNV"],[5,"BeginQuery","","Fallbacks: BeginQueryARB"],[5,"BeginTransformFeedback","","Fallbacks: BeginTransformFeedbackEXT, BeginTransformFeedbackNV"],[5,"BindAttribLocation","","Fallbacks: BindAttribLocationARB"],[5,"BindBuffer","","Fallbacks: BindBufferARB"],[5,"BindBufferBase","","Fallbacks: BindBufferBaseEXT, BindBufferBaseNV"],[5,"BindBufferRange","","Fallbacks: BindBufferRangeEXT, BindBufferRangeNV"],[5,"BindFragDataLocation","","Fallbacks: BindFragDataLocationEXT"],[5,"BindFramebuffer","",""],[5,"BindRenderbuffer","",""],[5,"BindTexture","","Fallbacks: BindTextureEXT"],[5,"BindVertexArray","","Fallbacks: BindVertexArrayOES"],[5,"Bitmap","",""],[5,"BlendColor","","Fallbacks: BlendColorEXT"],[5,"BlendEquation","","Fallbacks: BlendEquationEXT"],[5,"BlendEquationSeparate","","Fallbacks: BlendEquationSeparateEXT"],[5,"BlendFunc","",""],[5,"BlendFuncSeparate","","Fallbacks: BlendFuncSeparateEXT, BlendFuncSeparateINGR"],[5,"BlitFramebuffer","","Fallbacks: BlitFramebufferEXT, BlitFramebufferNV"],[5,"BufferData","","Fallbacks: BufferDataARB"],[5,"BufferSubData","","Fallbacks: BufferSubDataARB"],[5,"CallList","",""],[5,"CallLists","",""],[5,"CheckFramebufferStatus","","Fallbacks: CheckFramebufferStatusEXT"],[5,"ClampColor","","Fallbacks: ClampColorARB"],[5,"Clear","",""],[5,"ClearAccum","",""],[5,"ClearBufferfi","",""],[5,"ClearBufferfv","",""],[5,"ClearBufferiv","",""],[5,"ClearBufferuiv","",""],[5,"ClearColor","",""],[5,"ClearDepth","",""],[5,"ClearIndex","",""],[5,"ClearStencil","",""],[5,"ClientActiveTexture","","Fallbacks: ClientActiveTextureARB"],[5,"ClipPlane","",""],[5,"Color3b","",""],[5,"Color3bv","",""],[5,"Color3d","",""],[5,"Color3dv","",""],[5,"Color3f","",""],[5,"Color3fv","",""],[5,"Color3i","",""],[5,"Color3iv","",""],[5,"Color3s","",""],[5,"Color3sv","",""],[5,"Color3ub","",""],[5,"Color3ubv","",""],[5,"Color3ui","",""],[5,"Color3uiv","",""],[5,"Color3us","",""],[5,"Color3usv","",""],[5,"Color4b","",""],[5,"Color4bv","",""],[5,"Color4d","",""],[5,"Color4dv","",""],[5,"Color4f","",""],[5,"Color4fv","",""],[5,"Color4i","",""],[5,"Color4iv","",""],[5,"Color4s","",""],[5,"Color4sv","",""],[5,"Color4ub","",""],[5,"Color4ubv","",""],[5,"Color4ui","",""],[5,"Color4uiv","",""],[5,"Color4us","",""],[5,"Color4usv","",""],[5,"ColorMask","",""],[5,"ColorMaski","","Fallbacks: ColorMaskIndexedEXT, ColorMaskiEXT"],[5,"ColorMaterial","",""],[5,"ColorPointer","",""],[5,"CompileShader","","Fallbacks: CompileShaderARB"],[5,"CompressedTexImage1D","","Fallbacks: CompressedTexImage1DARB"],[5,"CompressedTexImage2D","","Fallbacks: CompressedTexImage2DARB"],[5,"CompressedTexImage3D","","Fallbacks: CompressedTexImage3DARB, CompressedTexImage3DOES"],[5,"CompressedTexSubImage1D","","Fallbacks: CompressedTexSubImage1DARB"],[5,"CompressedTexSubImage2D","","Fallbacks: CompressedTexSubImage2DARB"],[5,"CompressedTexSubImage3D","","Fallbacks: CompressedTexSubImage3DARB, CompressedTexSubImage3DOES"],[5,"CopyPixels","",""],[5,"CopyTexImage1D","","Fallbacks: CopyTexImage1DEXT"],[5,"CopyTexImage2D","","Fallbacks: CopyTexImage2DEXT"],[5,"CopyTexSubImage1D","","Fallbacks: CopyTexSubImage1DEXT"],[5,"CopyTexSubImage2D","","Fallbacks: CopyTexSubImage2DEXT"],[5,"CopyTexSubImage3D","","Fallbacks: CopyTexSubImage3DEXT, CopyTexSubImage3DOES"],[5,"CreateProgram","","Fallbacks: CreateProgramObjectARB"],[5,"CreateShader","","Fallbacks: CreateShaderObjectARB"],[5,"CullFace","",""],[5,"DeleteBuffers","","Fallbacks: DeleteBuffersARB"],[5,"DeleteFramebuffers","","Fallbacks: DeleteFramebuffersEXT"],[5,"DeleteLists","",""],[5,"DeleteProgram","",""],[5,"DeleteQueries","","Fallbacks: DeleteQueriesARB"],[5,"DeleteRenderbuffers","","Fallbacks: DeleteRenderbuffersEXT"],[5,"DeleteShader","",""],[5,"DeleteTextures","",""],[5,"DeleteVertexArrays","","Fallbacks: DeleteVertexArraysAPPLE, DeleteVertexArraysOES"],[5,"DepthFunc","",""],[5,"DepthMask","",""],[5,"DepthRange","",""],[5,"DetachShader","","Fallbacks: DetachObjectARB"],[5,"Disable","",""],[5,"DisableClientState","",""],[5,"DisableVertexAttribArray","","Fallbacks: DisableVertexAttribArrayARB"],[5,"Disablei","","Fallbacks: DisableIndexedEXT, DisableiEXT, DisableiNV"],[5,"DrawArrays","","Fallbacks: DrawArraysEXT"],[5,"DrawBuffer","",""],[5,"DrawBuffers","","Fallbacks: DrawBuffersARB, DrawBuffersATI, DrawBuffersEXT"],[5,"DrawElements","",""],[5,"DrawPixels","",""],[5,"DrawRangeElements","","Fallbacks: DrawRangeElementsEXT"],[5,"EdgeFlag","",""],[5,"EdgeFlagPointer","",""],[5,"EdgeFlagv","",""],[5,"Enable","",""],[5,"EnableClientState","",""],[5,"EnableVertexAttribArray","","Fallbacks: EnableVertexAttribArrayARB"],[5,"Enablei","","Fallbacks: EnableIndexedEXT, EnableiNV, EnableiEXT"],[5,"End","",""],[5,"EndConditionalRender","","Fallbacks: EndConditionalRenderNV, EndConditionalRenderNVX"],[5,"EndList","",""],[5,"EndQuery","","Fallbacks: EndQueryARB"],[5,"EndTransformFeedback","","Fallbacks: EndTransformFeedbackEXT, EndTransformFeedbackNV"],[5,"EvalCoord1d","",""],[5,"EvalCoord1dv","",""],[5,"EvalCoord1f","",""],[5,"EvalCoord1fv","",""],[5,"EvalCoord2d","",""],[5,"EvalCoord2dv","",""],[5,"EvalCoord2f","",""],[5,"EvalCoord2fv","",""],[5,"EvalMesh1","",""],[5,"EvalMesh2","",""],[5,"EvalPoint1","",""],[5,"EvalPoint2","",""],[5,"FeedbackBuffer","",""],[5,"Finish","",""],[5,"Flush","",""],[5,"FlushMappedBufferRange","","Fallbacks: FlushMappedBufferRangeAPPLE, FlushMappedBufferRangeEXT"],[5,"FogCoordPointer","","Fallbacks: FogCoordPointerEXT"],[5,"FogCoordd","","Fallbacks: FogCoorddEXT"],[5,"FogCoorddv","","Fallbacks: FogCoorddvEXT"],[5,"FogCoordf","","Fallbacks: FogCoordfEXT"],[5,"FogCoordfv","","Fallbacks: FogCoordfvEXT"],[5,"Fogf","",""],[5,"Fogfv","",""],[5,"Fogi","",""],[5,"Fogiv","",""],[5,"FramebufferRenderbuffer","","Fallbacks: FramebufferRenderbufferEXT"],[5,"FramebufferTexture1D","","Fallbacks: FramebufferTexture1DEXT"],[5,"FramebufferTexture2D","","Fallbacks: FramebufferTexture2DEXT"],[5,"FramebufferTexture3D","","Fallbacks: FramebufferTexture3DEXT, FramebufferTexture3DOES"],[5,"FramebufferTextureLayer","","Fallbacks: FramebufferTextureLayerARB, FramebufferTextureLayerEXT"],[5,"FrontFace","",""],[5,"Frustum","",""],[5,"GenBuffers","","Fallbacks: GenBuffersARB"],[5,"GenFramebuffers","","Fallbacks: GenFramebuffersEXT"],[5,"GenLists","",""],[5,"GenQueries","","Fallbacks: GenQueriesARB"],[5,"GenRenderbuffers","","Fallbacks: GenRenderbuffersEXT"],[5,"GenTextures","",""],[5,"GenVertexArrays","","Fallbacks: GenVertexArraysAPPLE, GenVertexArraysOES"],[5,"GenerateMipmap","","Fallbacks: GenerateMipmapEXT"],[5,"GetActiveAttrib","","Fallbacks: GetActiveAttribARB"],[5,"GetActiveUniform","","Fallbacks: GetActiveUniformARB"],[5,"GetAttachedShaders","",""],[5,"GetAttribLocation","","Fallbacks: GetAttribLocationARB"],[5,"GetBooleani_v","","Fallbacks: GetBooleanIndexedvEXT"],[5,"GetBooleanv","",""],[5,"GetBufferParameteriv","","Fallbacks: GetBufferParameterivARB"],[5,"GetBufferPointerv","","Fallbacks: GetBufferPointervARB, GetBufferPointervOES"],[5,"GetBufferSubData","","Fallbacks: GetBufferSubDataARB"],[5,"GetClipPlane","",""],[5,"GetCompressedTexImage","","Fallbacks: GetCompressedTexImageARB"],[5,"GetDoublev","",""],[5,"GetError","",""],[5,"GetFloatv","",""],[5,"GetFragDataLocation","","Fallbacks: GetFragDataLocationEXT"],[5,"GetFramebufferAttachmentParameteriv","","Fallbacks: GetFramebufferAttachmentParameterivEXT"],[5,"GetIntegeri_v","","Fallbacks: GetIntegerIndexedvEXT"],[5,"GetIntegerv","",""],[5,"GetLightfv","",""],[5,"GetLightiv","",""],[5,"GetMapdv","",""],[5,"GetMapfv","",""],[5,"GetMapiv","",""],[5,"GetMaterialfv","",""],[5,"GetMaterialiv","",""],[5,"GetPixelMapfv","",""],[5,"GetPixelMapuiv","",""],[5,"GetPixelMapusv","",""],[5,"GetPointerv","","Fallbacks: GetPointervEXT, GetPointervKHR"],[5,"GetPolygonStipple","",""],[5,"GetProgramInfoLog","",""],[5,"GetProgramiv","",""],[5,"GetQueryObjectiv","","Fallbacks: GetQueryObjectivARB, GetQueryObjectivEXT"],[5,"GetQueryObjectuiv","","Fallbacks: GetQueryObjectuivARB"],[5,"GetQueryiv","","Fallbacks: GetQueryivARB"],[5,"GetRenderbufferParameteriv","","Fallbacks: GetRenderbufferParameterivEXT"],[5,"GetShaderInfoLog","",""],[5,"GetShaderSource","","Fallbacks: GetShaderSourceARB"],[5,"GetShaderiv","",""],[5,"GetString","",""],[5,"GetStringi","",""],[5,"GetTexEnvfv","",""],[5,"GetTexEnviv","",""],[5,"GetTexGendv","",""],[5,"GetTexGenfv","",""],[5,"GetTexGeniv","",""],[5,"GetTexImage","",""],[5,"GetTexLevelParameterfv","",""],[5,"GetTexLevelParameteriv","",""],[5,"GetTexParameterIiv","","Fallbacks: GetTexParameterIivEXT"],[5,"GetTexParameterIuiv","","Fallbacks: GetTexParameterIuivEXT"],[5,"GetTexParameterfv","",""],[5,"GetTexParameteriv","",""],[5,"GetTransformFeedbackVarying","","Fallbacks: GetTransformFeedbackVaryingEXT"],[5,"GetUniformLocation","","Fallbacks: GetUniformLocationARB"],[5,"GetUniformfv","","Fallbacks: GetUniformfvARB"],[5,"GetUniformiv","","Fallbacks: GetUniformivARB"],[5,"GetUniformuiv","","Fallbacks: GetUniformuivEXT"],[5,"GetVertexAttribIiv","","Fallbacks: GetVertexAttribIivEXT"],[5,"GetVertexAttribIuiv","","Fallbacks: GetVertexAttribIuivEXT"],[5,"GetVertexAttribPointerv","","Fallbacks: GetVertexAttribPointervARB, GetVertexAttribPointervNV"],[5,"GetVertexAttribdv","","Fallbacks: GetVertexAttribdvARB, GetVertexAttribdvNV"],[5,"GetVertexAttribfv","","Fallbacks: GetVertexAttribfvARB, GetVertexAttribfvNV"],[5,"GetVertexAttribiv","","Fallbacks: GetVertexAttribivARB, GetVertexAttribivNV"],[5,"Hint","",""],[5,"IndexMask","",""],[5,"IndexPointer","",""],[5,"Indexd","",""],[5,"Indexdv","",""],[5,"Indexf","",""],[5,"Indexfv","",""],[5,"Indexi","",""],[5,"Indexiv","",""],[5,"Indexs","",""],[5,"Indexsv","",""],[5,"Indexub","",""],[5,"Indexubv","",""],[5,"InitNames","",""],[5,"InterleavedArrays","",""],[5,"IsBuffer","","Fallbacks: IsBufferARB"],[5,"IsEnabled","",""],[5,"IsEnabledi","","Fallbacks: IsEnabledIndexedEXT, IsEnablediEXT, IsEnablediNV"],[5,"IsFramebuffer","","Fallbacks: IsFramebufferEXT"],[5,"IsList","",""],[5,"IsProgram","",""],[5,"IsQuery","","Fallbacks: IsQueryARB"],[5,"IsRenderbuffer","","Fallbacks: IsRenderbufferEXT"],[5,"IsShader","",""],[5,"IsTexture","",""],[5,"IsVertexArray","","Fallbacks: IsVertexArrayAPPLE, IsVertexArrayOES"],[5,"LightModelf","",""],[5,"LightModelfv","",""],[5,"LightModeli","",""],[5,"LightModeliv","",""],[5,"Lightf","",""],[5,"Lightfv","",""],[5,"Lighti","",""],[5,"Lightiv","",""],[5,"LineStipple","",""],[5,"LineWidth","",""],[5,"LinkProgram","","Fallbacks: LinkProgramARB"],[5,"ListBase","",""],[5,"LoadIdentity","",""],[5,"LoadMatrixd","",""],[5,"LoadMatrixf","",""],[5,"LoadName","",""],[5,"LoadTransposeMatrixd","","Fallbacks: LoadTransposeMatrixdARB"],[5,"LoadTransposeMatrixf","","Fallbacks: LoadTransposeMatrixfARB"],[5,"LogicOp","",""],[5,"Map1d","",""],[5,"Map1f","",""],[5,"Map2d","",""],[5,"Map2f","",""],[5,"MapBuffer","","Fallbacks: MapBufferARB, MapBufferOES"],[5,"MapBufferRange","","Fallbacks: MapBufferRangeEXT"],[5,"MapGrid1d","",""],[5,"MapGrid1f","",""],[5,"MapGrid2d","",""],[5,"MapGrid2f","",""],[5,"Materialf","",""],[5,"Materialfv","",""],[5,"Materiali","",""],[5,"Materialiv","",""],[5,"MatrixMode","",""],[5,"MultMatrixd","",""],[5,"MultMatrixf","",""],[5,"MultTransposeMatrixd","","Fallbacks: MultTransposeMatrixdARB"],[5,"MultTransposeMatrixf","","Fallbacks: MultTransposeMatrixfARB"],[5,"MultiDrawArrays","","Fallbacks: MultiDrawArraysEXT"],[5,"MultiDrawElements","","Fallbacks: MultiDrawElementsEXT"],[5,"MultiTexCoord1d","","Fallbacks: MultiTexCoord1dARB"],[5,"MultiTexCoord1dv","","Fallbacks: MultiTexCoord1dvARB"],[5,"MultiTexCoord1f","","Fallbacks: MultiTexCoord1fARB"],[5,"MultiTexCoord1fv","","Fallbacks: MultiTexCoord1fvARB"],[5,"MultiTexCoord1i","","Fallbacks: MultiTexCoord1iARB"],[5,"MultiTexCoord1iv","","Fallbacks: MultiTexCoord1ivARB"],[5,"MultiTexCoord1s","","Fallbacks: MultiTexCoord1sARB"],[5,"MultiTexCoord1sv","","Fallbacks: MultiTexCoord1svARB"],[5,"MultiTexCoord2d","","Fallbacks: MultiTexCoord2dARB"],[5,"MultiTexCoord2dv","","Fallbacks: MultiTexCoord2dvARB"],[5,"MultiTexCoord2f","","Fallbacks: MultiTexCoord2fARB"],[5,"MultiTexCoord2fv","","Fallbacks: MultiTexCoord2fvARB"],[5,"MultiTexCoord2i","","Fallbacks: MultiTexCoord2iARB"],[5,"MultiTexCoord2iv","","Fallbacks: MultiTexCoord2ivARB"],[5,"MultiTexCoord2s","","Fallbacks: MultiTexCoord2sARB"],[5,"MultiTexCoord2sv","","Fallbacks: MultiTexCoord2svARB"],[5,"MultiTexCoord3d","","Fallbacks: MultiTexCoord3dARB"],[5,"MultiTexCoord3dv","","Fallbacks: MultiTexCoord3dvARB"],[5,"MultiTexCoord3f","","Fallbacks: MultiTexCoord3fARB"],[5,"MultiTexCoord3fv","","Fallbacks: MultiTexCoord3fvARB"],[5,"MultiTexCoord3i","","Fallbacks: MultiTexCoord3iARB"],[5,"MultiTexCoord3iv","","Fallbacks: MultiTexCoord3ivARB"],[5,"MultiTexCoord3s","","Fallbacks: MultiTexCoord3sARB"],[5,"MultiTexCoord3sv","","Fallbacks: MultiTexCoord3svARB"],[5,"MultiTexCoord4d","","Fallbacks: MultiTexCoord4dARB"],[5,"MultiTexCoord4dv","","Fallbacks: MultiTexCoord4dvARB"],[5,"MultiTexCoord4f","","Fallbacks: MultiTexCoord4fARB"],[5,"MultiTexCoord4fv","","Fallbacks: MultiTexCoord4fvARB"],[5,"MultiTexCoord4i","","Fallbacks: MultiTexCoord4iARB"],[5,"MultiTexCoord4iv","","Fallbacks: MultiTexCoord4ivARB"],[5,"MultiTexCoord4s","","Fallbacks: MultiTexCoord4sARB"],[5,"MultiTexCoord4sv","","Fallbacks: MultiTexCoord4svARB"],[5,"NewList","",""],[5,"Normal3b","",""],[5,"Normal3bv","",""],[5,"Normal3d","",""],[5,"Normal3dv","",""],[5,"Normal3f","",""],[5,"Normal3fv","",""],[5,"Normal3i","",""],[5,"Normal3iv","",""],[5,"Normal3s","",""],[5,"Normal3sv","",""],[5,"NormalPointer","",""],[5,"Ortho","",""],[5,"PassThrough","",""],[5,"PixelMapfv","",""],[5,"PixelMapuiv","",""],[5,"PixelMapusv","",""],[5,"PixelStoref","",""],[5,"PixelStorei","",""],[5,"PixelTransferf","",""],[5,"PixelTransferi","",""],[5,"PixelZoom","",""],[5,"PointParameterf","","Fallbacks: PointParameterfARB, PointParameterfEXT, PointParameterfSGIS"],[5,"PointParameterfv","","Fallbacks: PointParameterfvARB, PointParameterfvEXT, PointParameterfvSGIS"],[5,"PointParameteri","","Fallbacks: PointParameteriNV"],[5,"PointParameteriv","","Fallbacks: PointParameterivNV"],[5,"PointSize","",""],[5,"PolygonMode","",""],[5,"PolygonOffset","",""],[5,"PolygonStipple","",""],[5,"PopAttrib","",""],[5,"PopClientAttrib","",""],[5,"PopMatrix","",""],[5,"PopName","",""],[5,"PrioritizeTextures","","Fallbacks: PrioritizeTexturesEXT"],[5,"PushAttrib","",""],[5,"PushClientAttrib","",""],[5,"PushMatrix","",""],[5,"PushName","",""],[5,"RasterPos2d","",""],[5,"RasterPos2dv","",""],[5,"RasterPos2f","",""],[5,"RasterPos2fv","",""],[5,"RasterPos2i","",""],[5,"RasterPos2iv","",""],[5,"RasterPos2s","",""],[5,"RasterPos2sv","",""],[5,"RasterPos3d","",""],[5,"RasterPos3dv","",""],[5,"RasterPos3f","",""],[5,"RasterPos3fv","",""],[5,"RasterPos3i","",""],[5,"RasterPos3iv","",""],[5,"RasterPos3s","",""],[5,"RasterPos3sv","",""],[5,"RasterPos4d","",""],[5,"RasterPos4dv","",""],[5,"RasterPos4f","",""],[5,"RasterPos4fv","",""],[5,"RasterPos4i","",""],[5,"RasterPos4iv","",""],[5,"RasterPos4s","",""],[5,"RasterPos4sv","",""],[5,"ReadBuffer","",""],[5,"ReadPixels","",""],[5,"Rectd","",""],[5,"Rectdv","",""],[5,"Rectf","",""],[5,"Rectfv","",""],[5,"Recti","",""],[5,"Rectiv","",""],[5,"Rects","",""],[5,"Rectsv","",""],[5,"RenderMode","",""],[5,"RenderbufferStorage","","Fallbacks: RenderbufferStorageEXT"],[5,"RenderbufferStorageMultisample","","Fallbacks: RenderbufferStorageMultisampleEXT, RenderbufferStorageMultisampleNV"],[5,"Rotated","",""],[5,"Rotatef","",""],[5,"SampleCoverage","","Fallbacks: SampleCoverageARB"],[5,"Scaled","",""],[5,"Scalef","",""],[5,"Scissor","",""],[5,"SecondaryColor3b","","Fallbacks: SecondaryColor3bEXT"],[5,"SecondaryColor3bv","","Fallbacks: SecondaryColor3bvEXT"],[5,"SecondaryColor3d","","Fallbacks: SecondaryColor3dEXT"],[5,"SecondaryColor3dv","","Fallbacks: SecondaryColor3dvEXT"],[5,"SecondaryColor3f","","Fallbacks: SecondaryColor3fEXT"],[5,"SecondaryColor3fv","","Fallbacks: SecondaryColor3fvEXT"],[5,"SecondaryColor3i","","Fallbacks: SecondaryColor3iEXT"],[5,"SecondaryColor3iv","","Fallbacks: SecondaryColor3ivEXT"],[5,"SecondaryColor3s","","Fallbacks: SecondaryColor3sEXT"],[5,"SecondaryColor3sv","","Fallbacks: SecondaryColor3svEXT"],[5,"SecondaryColor3ub","","Fallbacks: SecondaryColor3ubEXT"],[5,"SecondaryColor3ubv","","Fallbacks: SecondaryColor3ubvEXT"],[5,"SecondaryColor3ui","","Fallbacks: SecondaryColor3uiEXT"],[5,"SecondaryColor3uiv","","Fallbacks: SecondaryColor3uivEXT"],[5,"SecondaryColor3us","","Fallbacks: SecondaryColor3usEXT"],[5,"SecondaryColor3usv","","Fallbacks: SecondaryColor3usvEXT"],[5,"SecondaryColorPointer","","Fallbacks: SecondaryColorPointerEXT"],[5,"SelectBuffer","",""],[5,"ShadeModel","",""],[5,"ShaderSource","","Fallbacks: ShaderSourceARB"],[5,"StencilFunc","",""],[5,"StencilFuncSeparate","",""],[5,"StencilMask","",""],[5,"StencilMaskSeparate","",""],[5,"StencilOp","",""],[5,"StencilOpSeparate","","Fallbacks: StencilOpSeparateATI"],[5,"TexCoord1d","",""],[5,"TexCoord1dv","",""],[5,"TexCoord1f","",""],[5,"TexCoord1fv","",""],[5,"TexCoord1i","",""],[5,"TexCoord1iv","",""],[5,"TexCoord1s","",""],[5,"TexCoord1sv","",""],[5,"TexCoord2d","",""],[5,"TexCoord2dv","",""],[5,"TexCoord2f","",""],[5,"TexCoord2fv","",""],[5,"TexCoord2i","",""],[5,"TexCoord2iv","",""],[5,"TexCoord2s","",""],[5,"TexCoord2sv","",""],[5,"TexCoord3d","",""],[5,"TexCoord3dv","",""],[5,"TexCoord3f","",""],[5,"TexCoord3fv","",""],[5,"TexCoord3i","",""],[5,"TexCoord3iv","",""],[5,"TexCoord3s","",""],[5,"TexCoord3sv","",""],[5,"TexCoord4d","",""],[5,"TexCoord4dv","",""],[5,"TexCoord4f","",""],[5,"TexCoord4fv","",""],[5,"TexCoord4i","",""],[5,"TexCoord4iv","",""],[5,"TexCoord4s","",""],[5,"TexCoord4sv","",""],[5,"TexCoordPointer","",""],[5,"TexEnvf","",""],[5,"TexEnvfv","",""],[5,"TexEnvi","",""],[5,"TexEnviv","",""],[5,"TexGend","",""],[5,"TexGendv","",""],[5,"TexGenf","",""],[5,"TexGenfv","",""],[5,"TexGeni","",""],[5,"TexGeniv","",""],[5,"TexImage1D","",""],[5,"TexImage2D","",""],[5,"TexImage3D","","Fallbacks: TexImage3DEXT, TexImage3DOES"],[5,"TexParameterIiv","","Fallbacks: TexParameterIivEXT"],[5,"TexParameterIuiv","","Fallbacks: TexParameterIuivEXT"],[5,"TexParameterf","",""],[5,"TexParameterfv","",""],[5,"TexParameteri","",""],[5,"TexParameteriv","",""],[5,"TexSubImage1D","","Fallbacks: TexSubImage1DEXT"],[5,"TexSubImage2D","","Fallbacks: TexSubImage2DEXT"],[5,"TexSubImage3D","","Fallbacks: TexSubImage3DEXT, TexSubImage3DOES"],[5,"TransformFeedbackVaryings","","Fallbacks: TransformFeedbackVaryingsEXT"],[5,"Translated","",""],[5,"Translatef","",""],[5,"Uniform1f","","Fallbacks: Uniform1fARB"],[5,"Uniform1fv","","Fallbacks: Uniform1fvARB"],[5,"Uniform1i","","Fallbacks: Uniform1iARB"],[5,"Uniform1iv","","Fallbacks: Uniform1ivARB"],[5,"Uniform1ui","","Fallbacks: Uniform1uiEXT"],[5,"Uniform1uiv","","Fallbacks: Uniform1uivEXT"],[5,"Uniform2f","","Fallbacks: Uniform2fARB"],[5,"Uniform2fv","","Fallbacks: Uniform2fvARB"],[5,"Uniform2i","","Fallbacks: Uniform2iARB"],[5,"Uniform2iv","","Fallbacks: Uniform2ivARB"],[5,"Uniform2ui","","Fallbacks: Uniform2uiEXT"],[5,"Uniform2uiv","","Fallbacks: Uniform2uivEXT"],[5,"Uniform3f","","Fallbacks: Uniform3fARB"],[5,"Uniform3fv","","Fallbacks: Uniform3fvARB"],[5,"Uniform3i","","Fallbacks: Uniform3iARB"],[5,"Uniform3iv","","Fallbacks: Uniform3ivARB"],[5,"Uniform3ui","","Fallbacks: Uniform3uiEXT"],[5,"Uniform3uiv","","Fallbacks: Uniform3uivEXT"],[5,"Uniform4f","","Fallbacks: Uniform4fARB"],[5,"Uniform4fv","","Fallbacks: Uniform4fvARB"],[5,"Uniform4i","","Fallbacks: Uniform4iARB"],[5,"Uniform4iv","","Fallbacks: Uniform4ivARB"],[5,"Uniform4ui","","Fallbacks: Uniform4uiEXT"],[5,"Uniform4uiv","","Fallbacks: Uniform4uivEXT"],[5,"UniformMatrix2fv","","Fallbacks: UniformMatrix2fvARB"],[5,"UniformMatrix2x3fv","","Fallbacks: UniformMatrix2x3fvNV"],[5,"UniformMatrix2x4fv","","Fallbacks: UniformMatrix2x4fvNV"],[5,"UniformMatrix3fv","","Fallbacks: UniformMatrix3fvARB"],[5,"UniformMatrix3x2fv","","Fallbacks: UniformMatrix3x2fvNV"],[5,"UniformMatrix3x4fv","","Fallbacks: UniformMatrix3x4fvNV"],[5,"UniformMatrix4fv","","Fallbacks: UniformMatrix4fvARB"],[5,"UniformMatrix4x2fv","","Fallbacks: UniformMatrix4x2fvNV"],[5,"UniformMatrix4x3fv","","Fallbacks: UniformMatrix4x3fvNV"],[5,"UnmapBuffer","","Fallbacks: UnmapBufferARB, UnmapBufferOES"],[5,"UseProgram","","Fallbacks: UseProgramObjectARB"],[5,"ValidateProgram","","Fallbacks: ValidateProgramARB"],[5,"Vertex2d","",""],[5,"Vertex2dv","",""],[5,"Vertex2f","",""],[5,"Vertex2fv","",""],[5,"Vertex2i","",""],[5,"Vertex2iv","",""],[5,"Vertex2s","",""],[5,"Vertex2sv","",""],[5,"Vertex3d","",""],[5,"Vertex3dv","",""],[5,"Vertex3f","",""],[5,"Vertex3fv","",""],[5,"Vertex3i","",""],[5,"Vertex3iv","",""],[5,"Vertex3s","",""],[5,"Vertex3sv","",""],[5,"Vertex4d","",""],[5,"Vertex4dv","",""],[5,"Vertex4f","",""],[5,"Vertex4fv","",""],[5,"Vertex4i","",""],[5,"Vertex4iv","",""],[5,"Vertex4s","",""],[5,"Vertex4sv","",""],[5,"VertexAttrib1d","","Fallbacks: VertexAttrib1dARB, VertexAttrib1dNV"],[5,"VertexAttrib1dv","","Fallbacks: VertexAttrib1dvARB, VertexAttrib1dvNV"],[5,"VertexAttrib1f","","Fallbacks: VertexAttrib1fARB, VertexAttrib1fNV"],[5,"VertexAttrib1fv","","Fallbacks: VertexAttrib1fvARB, VertexAttrib1fvNV"],[5,"VertexAttrib1s","","Fallbacks: VertexAttrib1sARB, VertexAttrib1sNV"],[5,"VertexAttrib1sv","","Fallbacks: VertexAttrib1svARB, VertexAttrib1svNV"],[5,"VertexAttrib2d","","Fallbacks: VertexAttrib2dARB, VertexAttrib2dNV"],[5,"VertexAttrib2dv","","Fallbacks: VertexAttrib2dvARB, VertexAttrib2dvNV"],[5,"VertexAttrib2f","","Fallbacks: VertexAttrib2fARB, VertexAttrib2fNV"],[5,"VertexAttrib2fv","","Fallbacks: VertexAttrib2fvARB, VertexAttrib2fvNV"],[5,"VertexAttrib2s","","Fallbacks: VertexAttrib2sARB, VertexAttrib2sNV"],[5,"VertexAttrib2sv","","Fallbacks: VertexAttrib2svARB, VertexAttrib2svNV"],[5,"VertexAttrib3d","","Fallbacks: VertexAttrib3dARB, VertexAttrib3dNV"],[5,"VertexAttrib3dv","","Fallbacks: VertexAttrib3dvARB, VertexAttrib3dvNV"],[5,"VertexAttrib3f","","Fallbacks: VertexAttrib3fARB, VertexAttrib3fNV"],[5,"VertexAttrib3fv","","Fallbacks: VertexAttrib3fvARB, VertexAttrib3fvNV"],[5,"VertexAttrib3s","","Fallbacks: VertexAttrib3sARB, VertexAttrib3sNV"],[5,"VertexAttrib3sv","","Fallbacks: VertexAttrib3svARB, VertexAttrib3svNV"],[5,"VertexAttrib4Nbv","","Fallbacks: VertexAttrib4NbvARB"],[5,"VertexAttrib4Niv","","Fallbacks: VertexAttrib4NivARB"],[5,"VertexAttrib4Nsv","","Fallbacks: VertexAttrib4NsvARB"],[5,"VertexAttrib4Nub","","Fallbacks: VertexAttrib4NubARB, VertexAttrib4ubNV"],[5,"VertexAttrib4Nubv","","Fallbacks: VertexAttrib4NubvARB, VertexAttrib4ubvNV"],[5,"VertexAttrib4Nuiv","","Fallbacks: VertexAttrib4NuivARB"],[5,"VertexAttrib4Nusv","","Fallbacks: VertexAttrib4NusvARB"],[5,"VertexAttrib4bv","","Fallbacks: VertexAttrib4bvARB"],[5,"VertexAttrib4d","","Fallbacks: VertexAttrib4dARB, VertexAttrib4dNV"],[5,"VertexAttrib4dv","","Fallbacks: VertexAttrib4dvARB, VertexAttrib4dvNV"],[5,"VertexAttrib4f","","Fallbacks: VertexAttrib4fARB, VertexAttrib4fNV"],[5,"VertexAttrib4fv","","Fallbacks: VertexAttrib4fvARB, VertexAttrib4fvNV"],[5,"VertexAttrib4iv","","Fallbacks: VertexAttrib4ivARB"],[5,"VertexAttrib4s","","Fallbacks: VertexAttrib4sARB, VertexAttrib4sNV"],[5,"VertexAttrib4sv","","Fallbacks: VertexAttrib4svARB, VertexAttrib4svNV"],[5,"VertexAttrib4ubv","","Fallbacks: VertexAttrib4ubvARB"],[5,"VertexAttrib4uiv","","Fallbacks: VertexAttrib4uivARB"],[5,"VertexAttrib4usv","","Fallbacks: VertexAttrib4usvARB"],[5,"VertexAttribI1i","","Fallbacks: VertexAttribI1iEXT"],[5,"VertexAttribI1iv","","Fallbacks: VertexAttribI1ivEXT"],[5,"VertexAttribI1ui","","Fallbacks: VertexAttribI1uiEXT"],[5,"VertexAttribI1uiv","","Fallbacks: VertexAttribI1uivEXT"],[5,"VertexAttribI2i","","Fallbacks: VertexAttribI2iEXT"],[5,"VertexAttribI2iv","","Fallbacks: VertexAttribI2ivEXT"],[5,"VertexAttribI2ui","","Fallbacks: VertexAttribI2uiEXT"],[5,"VertexAttribI2uiv","","Fallbacks: VertexAttribI2uivEXT"],[5,"VertexAttribI3i","","Fallbacks: VertexAttribI3iEXT"],[5,"VertexAttribI3iv","","Fallbacks: VertexAttribI3ivEXT"],[5,"VertexAttribI3ui","","Fallbacks: VertexAttribI3uiEXT"],[5,"VertexAttribI3uiv","","Fallbacks: VertexAttribI3uivEXT"],[5,"VertexAttribI4bv","","Fallbacks: VertexAttribI4bvEXT"],[5,"VertexAttribI4i","","Fallbacks: VertexAttribI4iEXT"],[5,"VertexAttribI4iv","","Fallbacks: VertexAttribI4ivEXT"],[5,"VertexAttribI4sv","","Fallbacks: VertexAttribI4svEXT"],[5,"VertexAttribI4ubv","","Fallbacks: VertexAttribI4ubvEXT"],[5,"VertexAttribI4ui","","Fallbacks: VertexAttribI4uiEXT"],[5,"VertexAttribI4uiv","","Fallbacks: VertexAttribI4uivEXT"],[5,"VertexAttribI4usv","","Fallbacks: VertexAttribI4usvEXT"],[5,"VertexAttribIPointer","","Fallbacks: VertexAttribIPointerEXT"],[5,"VertexAttribPointer","","Fallbacks: VertexAttribPointerARB"],[5,"VertexPointer","",""],[5,"Viewport","",""],[5,"WindowPos2d","","Fallbacks: WindowPos2dARB, WindowPos2dMESA"],[5,"WindowPos2dv","","Fallbacks: WindowPos2dvARB, WindowPos2dvMESA"],[5,"WindowPos2f","","Fallbacks: WindowPos2fARB, WindowPos2fMESA"],[5,"WindowPos2fv","","Fallbacks: WindowPos2fvARB, WindowPos2fvMESA"],[5,"WindowPos2i","","Fallbacks: WindowPos2iARB, WindowPos2iMESA"],[5,"WindowPos2iv","","Fallbacks: WindowPos2ivARB, WindowPos2ivMESA"],[5,"WindowPos2s","","Fallbacks: WindowPos2sARB, WindowPos2sMESA"],[5,"WindowPos2sv","","Fallbacks: WindowPos2svARB, WindowPos2svMESA"],[5,"WindowPos3d","","Fallbacks: WindowPos3dARB, WindowPos3dMESA"],[5,"WindowPos3dv","","Fallbacks: WindowPos3dvARB, WindowPos3dvMESA"],[5,"WindowPos3f","","Fallbacks: WindowPos3fARB, WindowPos3fMESA"],[5,"WindowPos3fv","","Fallbacks: WindowPos3fvARB, WindowPos3fvMESA"],[5,"WindowPos3i","","Fallbacks: WindowPos3iARB, WindowPos3iMESA"],[5,"WindowPos3iv","","Fallbacks: WindowPos3ivARB, WindowPos3ivMESA"],[5,"WindowPos3s","","Fallbacks: WindowPos3sARB, WindowPos3sMESA"],[5,"WindowPos3sv","","Fallbacks: WindowPos3svARB, WindowPos3svMESA"],[5,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the\nuse of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.\n~~~ignore\ngl::load_with(|s| glfw.get_proc_address(s));\n~~~"],[5,"load","","Load each OpenGL symbol using a custom load function."],[5,"buffer_data","",""],[5,"shader_source","",""],[5,"delete_buffers","",""],[5,"delete_frame_buffers","",""],[5,"read_pixels","",""],[5,"gen_buffers","",""],[5,"gen_framebuffers","",""],[5,"gen_textures","",""],[5,"active_texture","",""],[5,"attach_shader","",""],[5,"bind_attrib_location","",""],[5,"bind_buffer","",""],[5,"bind_framebuffer","",""],[5,"bind_texture","",""],[5,"tex_image_2d","",""],[5,"tex_parameter_i","",""],[5,"framebuffer_texture_2d","",""],[5,"vertex_attrib_pointer_f32","",""],[5,"delete_textures","",""],[5,"viewport","",""],[5,"line_width","",""],[5,"use_program","",""],[5,"draw_arrays","",""],[5,"blend_func","",""],[5,"enable","",""],[5,"disable","",""],[5,"enable_vertex_attrib_array","",""],[5,"disable_vertex_attrib_array","",""],[5,"uniform_4f","",""],[5,"uniform_matrix_4fv","",""],[5,"uniform_1i","",""],[5,"get_attrib_location","",""],[5,"get_uniform_location","",""],[5,"get_program_info_log","",""],[5,"get_program_iv","",""],[5,"get_shader_info_log","",""],[5,"get_string","",""],[5,"get_shader_iv","",""],[5,"compile_shader","",""],[5,"create_program","",""],[5,"create_shader","",""],[5,"link_program","",""],[5,"clear_color","",""],[5,"clear","",""],[5,"flush","",""],[5,"finish","",""],[0,"types","",""],[3,"__GLsync","gleam::gl::types",""],[3,"_cl_context","",""],[3,"_cl_event","",""],[6,"GLenum","",""],[6,"GLboolean","",""],[6,"GLbitfield","",""],[6,"GLvoid","",""],[6,"GLbyte","",""],[6,"GLshort","",""],[6,"GLint","",""],[6,"GLclampx","",""],[6,"GLubyte","",""],[6,"GLushort","",""],[6,"GLuint","",""],[6,"GLsizei","",""],[6,"GLfloat","",""],[6,"GLclampf","",""],[6,"GLdouble","",""],[6,"GLclampd","",""],[6,"GLeglImageOES","",""],[6,"GLchar","",""],[6,"GLcharARB","",""],[6,"GLhandleARB","",""],[6,"GLhalfARB","",""],[6,"GLhalf","",""],[6,"GLfixed","",""],[6,"GLintptr","",""],[6,"GLsizeiptr","",""],[6,"GLint64","",""],[6,"GLuint64","",""],[6,"GLintptrARB","",""],[6,"GLsizeiptrARB","",""],[6,"GLint64EXT","",""],[6,"GLuint64EXT","",""],[6,"GLsync","",""],[6,"GLDEBUGPROC","",""],[6,"GLDEBUGPROCARB","",""],[6,"GLDEBUGPROCKHR","",""],[6,"GLDEBUGPROCAMD","",""],[6,"GLhalfNV","",""],[6,"GLvdpauSurfaceNV","",""],[0,"Accum","gleam::gl",""],[5,"is_loaded","gleam::gl::Accum",""],[5,"load_with","",""],[0,"ActiveTexture","gleam::gl",""],[5,"is_loaded","gleam::gl::ActiveTexture",""],[5,"load_with","",""],[0,"AlphaFunc","gleam::gl",""],[5,"is_loaded","gleam::gl::AlphaFunc",""],[5,"load_with","",""],[0,"AreTexturesResident","gleam::gl",""],[5,"is_loaded","gleam::gl::AreTexturesResident",""],[5,"load_with","",""],[0,"ArrayElement","gleam::gl",""],[5,"is_loaded","gleam::gl::ArrayElement",""],[5,"load_with","",""],[0,"AttachShader","gleam::gl",""],[5,"is_loaded","gleam::gl::AttachShader",""],[5,"load_with","",""],[0,"Begin","gleam::gl",""],[5,"is_loaded","gleam::gl::Begin",""],[5,"load_with","",""],[0,"BeginConditionalRender","gleam::gl",""],[5,"is_loaded","gleam::gl::BeginConditionalRender",""],[5,"load_with","",""],[0,"BeginQuery","gleam::gl",""],[5,"is_loaded","gleam::gl::BeginQuery",""],[5,"load_with","",""],[0,"BeginTransformFeedback","gleam::gl",""],[5,"is_loaded","gleam::gl::BeginTransformFeedback",""],[5,"load_with","",""],[0,"BindAttribLocation","gleam::gl",""],[5,"is_loaded","gleam::gl::BindAttribLocation",""],[5,"load_with","",""],[0,"BindBuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::BindBuffer",""],[5,"load_with","",""],[0,"BindBufferBase","gleam::gl",""],[5,"is_loaded","gleam::gl::BindBufferBase",""],[5,"load_with","",""],[0,"BindBufferRange","gleam::gl",""],[5,"is_loaded","gleam::gl::BindBufferRange",""],[5,"load_with","",""],[0,"BindFragDataLocation","gleam::gl",""],[5,"is_loaded","gleam::gl::BindFragDataLocation",""],[5,"load_with","",""],[0,"BindFramebuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::BindFramebuffer",""],[5,"load_with","",""],[0,"BindRenderbuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::BindRenderbuffer",""],[5,"load_with","",""],[0,"BindTexture","gleam::gl",""],[5,"is_loaded","gleam::gl::BindTexture",""],[5,"load_with","",""],[0,"BindVertexArray","gleam::gl",""],[5,"is_loaded","gleam::gl::BindVertexArray",""],[5,"load_with","",""],[0,"Bitmap","gleam::gl",""],[5,"is_loaded","gleam::gl::Bitmap",""],[5,"load_with","",""],[0,"BlendColor","gleam::gl",""],[5,"is_loaded","gleam::gl::BlendColor",""],[5,"load_with","",""],[0,"BlendEquation","gleam::gl",""],[5,"is_loaded","gleam::gl::BlendEquation",""],[5,"load_with","",""],[0,"BlendEquationSeparate","gleam::gl",""],[5,"is_loaded","gleam::gl::BlendEquationSeparate",""],[5,"load_with","",""],[0,"BlendFunc","gleam::gl",""],[5,"is_loaded","gleam::gl::BlendFunc",""],[5,"load_with","",""],[0,"BlendFuncSeparate","gleam::gl",""],[5,"is_loaded","gleam::gl::BlendFuncSeparate",""],[5,"load_with","",""],[0,"BlitFramebuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::BlitFramebuffer",""],[5,"load_with","",""],[0,"BufferData","gleam::gl",""],[5,"is_loaded","gleam::gl::BufferData",""],[5,"load_with","",""],[0,"BufferSubData","gleam::gl",""],[5,"is_loaded","gleam::gl::BufferSubData",""],[5,"load_with","",""],[0,"CallList","gleam::gl",""],[5,"is_loaded","gleam::gl::CallList",""],[5,"load_with","",""],[0,"CallLists","gleam::gl",""],[5,"is_loaded","gleam::gl::CallLists",""],[5,"load_with","",""],[0,"CheckFramebufferStatus","gleam::gl",""],[5,"is_loaded","gleam::gl::CheckFramebufferStatus",""],[5,"load_with","",""],[0,"ClampColor","gleam::gl",""],[5,"is_loaded","gleam::gl::ClampColor",""],[5,"load_with","",""],[0,"Clear","gleam::gl",""],[5,"is_loaded","gleam::gl::Clear",""],[5,"load_with","",""],[0,"ClearAccum","gleam::gl",""],[5,"is_loaded","gleam::gl::ClearAccum",""],[5,"load_with","",""],[0,"ClearBufferfi","gleam::gl",""],[5,"is_loaded","gleam::gl::ClearBufferfi",""],[5,"load_with","",""],[0,"ClearBufferfv","gleam::gl",""],[5,"is_loaded","gleam::gl::ClearBufferfv",""],[5,"load_with","",""],[0,"ClearBufferiv","gleam::gl",""],[5,"is_loaded","gleam::gl::ClearBufferiv",""],[5,"load_with","",""],[0,"ClearBufferuiv","gleam::gl",""],[5,"is_loaded","gleam::gl::ClearBufferuiv",""],[5,"load_with","",""],[0,"ClearColor","gleam::gl",""],[5,"is_loaded","gleam::gl::ClearColor",""],[5,"load_with","",""],[0,"ClearDepth","gleam::gl",""],[5,"is_loaded","gleam::gl::ClearDepth",""],[5,"load_with","",""],[0,"ClearIndex","gleam::gl",""],[5,"is_loaded","gleam::gl::ClearIndex",""],[5,"load_with","",""],[0,"ClearStencil","gleam::gl",""],[5,"is_loaded","gleam::gl::ClearStencil",""],[5,"load_with","",""],[0,"ClientActiveTexture","gleam::gl",""],[5,"is_loaded","gleam::gl::ClientActiveTexture",""],[5,"load_with","",""],[0,"ClipPlane","gleam::gl",""],[5,"is_loaded","gleam::gl::ClipPlane",""],[5,"load_with","",""],[0,"Color3b","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3b",""],[5,"load_with","",""],[0,"Color3bv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3bv",""],[5,"load_with","",""],[0,"Color3d","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3d",""],[5,"load_with","",""],[0,"Color3dv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3dv",""],[5,"load_with","",""],[0,"Color3f","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3f",""],[5,"load_with","",""],[0,"Color3fv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3fv",""],[5,"load_with","",""],[0,"Color3i","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3i",""],[5,"load_with","",""],[0,"Color3iv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3iv",""],[5,"load_with","",""],[0,"Color3s","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3s",""],[5,"load_with","",""],[0,"Color3sv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3sv",""],[5,"load_with","",""],[0,"Color3ub","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3ub",""],[5,"load_with","",""],[0,"Color3ubv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3ubv",""],[5,"load_with","",""],[0,"Color3ui","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3ui",""],[5,"load_with","",""],[0,"Color3uiv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3uiv",""],[5,"load_with","",""],[0,"Color3us","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3us",""],[5,"load_with","",""],[0,"Color3usv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color3usv",""],[5,"load_with","",""],[0,"Color4b","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4b",""],[5,"load_with","",""],[0,"Color4bv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4bv",""],[5,"load_with","",""],[0,"Color4d","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4d",""],[5,"load_with","",""],[0,"Color4dv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4dv",""],[5,"load_with","",""],[0,"Color4f","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4f",""],[5,"load_with","",""],[0,"Color4fv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4fv",""],[5,"load_with","",""],[0,"Color4i","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4i",""],[5,"load_with","",""],[0,"Color4iv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4iv",""],[5,"load_with","",""],[0,"Color4s","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4s",""],[5,"load_with","",""],[0,"Color4sv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4sv",""],[5,"load_with","",""],[0,"Color4ub","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4ub",""],[5,"load_with","",""],[0,"Color4ubv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4ubv",""],[5,"load_with","",""],[0,"Color4ui","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4ui",""],[5,"load_with","",""],[0,"Color4uiv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4uiv",""],[5,"load_with","",""],[0,"Color4us","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4us",""],[5,"load_with","",""],[0,"Color4usv","gleam::gl",""],[5,"is_loaded","gleam::gl::Color4usv",""],[5,"load_with","",""],[0,"ColorMask","gleam::gl",""],[5,"is_loaded","gleam::gl::ColorMask",""],[5,"load_with","",""],[0,"ColorMaski","gleam::gl",""],[5,"is_loaded","gleam::gl::ColorMaski",""],[5,"load_with","",""],[0,"ColorMaterial","gleam::gl",""],[5,"is_loaded","gleam::gl::ColorMaterial",""],[5,"load_with","",""],[0,"ColorPointer","gleam::gl",""],[5,"is_loaded","gleam::gl::ColorPointer",""],[5,"load_with","",""],[0,"CompileShader","gleam::gl",""],[5,"is_loaded","gleam::gl::CompileShader",""],[5,"load_with","",""],[0,"CompressedTexImage1D","gleam::gl",""],[5,"is_loaded","gleam::gl::CompressedTexImage1D",""],[5,"load_with","",""],[0,"CompressedTexImage2D","gleam::gl",""],[5,"is_loaded","gleam::gl::CompressedTexImage2D",""],[5,"load_with","",""],[0,"CompressedTexImage3D","gleam::gl",""],[5,"is_loaded","gleam::gl::CompressedTexImage3D",""],[5,"load_with","",""],[0,"CompressedTexSubImage1D","gleam::gl",""],[5,"is_loaded","gleam::gl::CompressedTexSubImage1D",""],[5,"load_with","",""],[0,"CompressedTexSubImage2D","gleam::gl",""],[5,"is_loaded","gleam::gl::CompressedTexSubImage2D",""],[5,"load_with","",""],[0,"CompressedTexSubImage3D","gleam::gl",""],[5,"is_loaded","gleam::gl::CompressedTexSubImage3D",""],[5,"load_with","",""],[0,"CopyPixels","gleam::gl",""],[5,"is_loaded","gleam::gl::CopyPixels",""],[5,"load_with","",""],[0,"CopyTexImage1D","gleam::gl",""],[5,"is_loaded","gleam::gl::CopyTexImage1D",""],[5,"load_with","",""],[0,"CopyTexImage2D","gleam::gl",""],[5,"is_loaded","gleam::gl::CopyTexImage2D",""],[5,"load_with","",""],[0,"CopyTexSubImage1D","gleam::gl",""],[5,"is_loaded","gleam::gl::CopyTexSubImage1D",""],[5,"load_with","",""],[0,"CopyTexSubImage2D","gleam::gl",""],[5,"is_loaded","gleam::gl::CopyTexSubImage2D",""],[5,"load_with","",""],[0,"CopyTexSubImage3D","gleam::gl",""],[5,"is_loaded","gleam::gl::CopyTexSubImage3D",""],[5,"load_with","",""],[0,"CreateProgram","gleam::gl",""],[5,"is_loaded","gleam::gl::CreateProgram",""],[5,"load_with","",""],[0,"CreateShader","gleam::gl",""],[5,"is_loaded","gleam::gl::CreateShader",""],[5,"load_with","",""],[0,"CullFace","gleam::gl",""],[5,"is_loaded","gleam::gl::CullFace",""],[5,"load_with","",""],[0,"DeleteBuffers","gleam::gl",""],[5,"is_loaded","gleam::gl::DeleteBuffers",""],[5,"load_with","",""],[0,"DeleteFramebuffers","gleam::gl",""],[5,"is_loaded","gleam::gl::DeleteFramebuffers",""],[5,"load_with","",""],[0,"DeleteLists","gleam::gl",""],[5,"is_loaded","gleam::gl::DeleteLists",""],[5,"load_with","",""],[0,"DeleteProgram","gleam::gl",""],[5,"is_loaded","gleam::gl::DeleteProgram",""],[5,"load_with","",""],[0,"DeleteQueries","gleam::gl",""],[5,"is_loaded","gleam::gl::DeleteQueries",""],[5,"load_with","",""],[0,"DeleteRenderbuffers","gleam::gl",""],[5,"is_loaded","gleam::gl::DeleteRenderbuffers",""],[5,"load_with","",""],[0,"DeleteShader","gleam::gl",""],[5,"is_loaded","gleam::gl::DeleteShader",""],[5,"load_with","",""],[0,"DeleteTextures","gleam::gl",""],[5,"is_loaded","gleam::gl::DeleteTextures",""],[5,"load_with","",""],[0,"DeleteVertexArrays","gleam::gl",""],[5,"is_loaded","gleam::gl::DeleteVertexArrays",""],[5,"load_with","",""],[0,"DepthFunc","gleam::gl",""],[5,"is_loaded","gleam::gl::DepthFunc",""],[5,"load_with","",""],[0,"DepthMask","gleam::gl",""],[5,"is_loaded","gleam::gl::DepthMask",""],[5,"load_with","",""],[0,"DepthRange","gleam::gl",""],[5,"is_loaded","gleam::gl::DepthRange",""],[5,"load_with","",""],[0,"DetachShader","gleam::gl",""],[5,"is_loaded","gleam::gl::DetachShader",""],[5,"load_with","",""],[0,"Disable","gleam::gl",""],[5,"is_loaded","gleam::gl::Disable",""],[5,"load_with","",""],[0,"DisableClientState","gleam::gl",""],[5,"is_loaded","gleam::gl::DisableClientState",""],[5,"load_with","",""],[0,"DisableVertexAttribArray","gleam::gl",""],[5,"is_loaded","gleam::gl::DisableVertexAttribArray",""],[5,"load_with","",""],[0,"Disablei","gleam::gl",""],[5,"is_loaded","gleam::gl::Disablei",""],[5,"load_with","",""],[0,"DrawArrays","gleam::gl",""],[5,"is_loaded","gleam::gl::DrawArrays",""],[5,"load_with","",""],[0,"DrawBuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::DrawBuffer",""],[5,"load_with","",""],[0,"DrawBuffers","gleam::gl",""],[5,"is_loaded","gleam::gl::DrawBuffers",""],[5,"load_with","",""],[0,"DrawElements","gleam::gl",""],[5,"is_loaded","gleam::gl::DrawElements",""],[5,"load_with","",""],[0,"DrawPixels","gleam::gl",""],[5,"is_loaded","gleam::gl::DrawPixels",""],[5,"load_with","",""],[0,"DrawRangeElements","gleam::gl",""],[5,"is_loaded","gleam::gl::DrawRangeElements",""],[5,"load_with","",""],[0,"EdgeFlag","gleam::gl",""],[5,"is_loaded","gleam::gl::EdgeFlag",""],[5,"load_with","",""],[0,"EdgeFlagPointer","gleam::gl",""],[5,"is_loaded","gleam::gl::EdgeFlagPointer",""],[5,"load_with","",""],[0,"EdgeFlagv","gleam::gl",""],[5,"is_loaded","gleam::gl::EdgeFlagv",""],[5,"load_with","",""],[0,"Enable","gleam::gl",""],[5,"is_loaded","gleam::gl::Enable",""],[5,"load_with","",""],[0,"EnableClientState","gleam::gl",""],[5,"is_loaded","gleam::gl::EnableClientState",""],[5,"load_with","",""],[0,"EnableVertexAttribArray","gleam::gl",""],[5,"is_loaded","gleam::gl::EnableVertexAttribArray",""],[5,"load_with","",""],[0,"Enablei","gleam::gl",""],[5,"is_loaded","gleam::gl::Enablei",""],[5,"load_with","",""],[0,"End","gleam::gl",""],[5,"is_loaded","gleam::gl::End",""],[5,"load_with","",""],[0,"EndConditionalRender","gleam::gl",""],[5,"is_loaded","gleam::gl::EndConditionalRender",""],[5,"load_with","",""],[0,"EndList","gleam::gl",""],[5,"is_loaded","gleam::gl::EndList",""],[5,"load_with","",""],[0,"EndQuery","gleam::gl",""],[5,"is_loaded","gleam::gl::EndQuery",""],[5,"load_with","",""],[0,"EndTransformFeedback","gleam::gl",""],[5,"is_loaded","gleam::gl::EndTransformFeedback",""],[5,"load_with","",""],[0,"EvalCoord1d","gleam::gl",""],[5,"is_loaded","gleam::gl::EvalCoord1d",""],[5,"load_with","",""],[0,"EvalCoord1dv","gleam::gl",""],[5,"is_loaded","gleam::gl::EvalCoord1dv",""],[5,"load_with","",""],[0,"EvalCoord1f","gleam::gl",""],[5,"is_loaded","gleam::gl::EvalCoord1f",""],[5,"load_with","",""],[0,"EvalCoord1fv","gleam::gl",""],[5,"is_loaded","gleam::gl::EvalCoord1fv",""],[5,"load_with","",""],[0,"EvalCoord2d","gleam::gl",""],[5,"is_loaded","gleam::gl::EvalCoord2d",""],[5,"load_with","",""],[0,"EvalCoord2dv","gleam::gl",""],[5,"is_loaded","gleam::gl::EvalCoord2dv",""],[5,"load_with","",""],[0,"EvalCoord2f","gleam::gl",""],[5,"is_loaded","gleam::gl::EvalCoord2f",""],[5,"load_with","",""],[0,"EvalCoord2fv","gleam::gl",""],[5,"is_loaded","gleam::gl::EvalCoord2fv",""],[5,"load_with","",""],[0,"EvalMesh1","gleam::gl",""],[5,"is_loaded","gleam::gl::EvalMesh1",""],[5,"load_with","",""],[0,"EvalMesh2","gleam::gl",""],[5,"is_loaded","gleam::gl::EvalMesh2",""],[5,"load_with","",""],[0,"EvalPoint1","gleam::gl",""],[5,"is_loaded","gleam::gl::EvalPoint1",""],[5,"load_with","",""],[0,"EvalPoint2","gleam::gl",""],[5,"is_loaded","gleam::gl::EvalPoint2",""],[5,"load_with","",""],[0,"FeedbackBuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::FeedbackBuffer",""],[5,"load_with","",""],[0,"Finish","gleam::gl",""],[5,"is_loaded","gleam::gl::Finish",""],[5,"load_with","",""],[0,"Flush","gleam::gl",""],[5,"is_loaded","gleam::gl::Flush",""],[5,"load_with","",""],[0,"FlushMappedBufferRange","gleam::gl",""],[5,"is_loaded","gleam::gl::FlushMappedBufferRange",""],[5,"load_with","",""],[0,"FogCoordPointer","gleam::gl",""],[5,"is_loaded","gleam::gl::FogCoordPointer",""],[5,"load_with","",""],[0,"FogCoordd","gleam::gl",""],[5,"is_loaded","gleam::gl::FogCoordd",""],[5,"load_with","",""],[0,"FogCoorddv","gleam::gl",""],[5,"is_loaded","gleam::gl::FogCoorddv",""],[5,"load_with","",""],[0,"FogCoordf","gleam::gl",""],[5,"is_loaded","gleam::gl::FogCoordf",""],[5,"load_with","",""],[0,"FogCoordfv","gleam::gl",""],[5,"is_loaded","gleam::gl::FogCoordfv",""],[5,"load_with","",""],[0,"Fogf","gleam::gl",""],[5,"is_loaded","gleam::gl::Fogf",""],[5,"load_with","",""],[0,"Fogfv","gleam::gl",""],[5,"is_loaded","gleam::gl::Fogfv",""],[5,"load_with","",""],[0,"Fogi","gleam::gl",""],[5,"is_loaded","gleam::gl::Fogi",""],[5,"load_with","",""],[0,"Fogiv","gleam::gl",""],[5,"is_loaded","gleam::gl::Fogiv",""],[5,"load_with","",""],[0,"FramebufferRenderbuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::FramebufferRenderbuffer",""],[5,"load_with","",""],[0,"FramebufferTexture1D","gleam::gl",""],[5,"is_loaded","gleam::gl::FramebufferTexture1D",""],[5,"load_with","",""],[0,"FramebufferTexture2D","gleam::gl",""],[5,"is_loaded","gleam::gl::FramebufferTexture2D",""],[5,"load_with","",""],[0,"FramebufferTexture3D","gleam::gl",""],[5,"is_loaded","gleam::gl::FramebufferTexture3D",""],[5,"load_with","",""],[0,"FramebufferTextureLayer","gleam::gl",""],[5,"is_loaded","gleam::gl::FramebufferTextureLayer",""],[5,"load_with","",""],[0,"FrontFace","gleam::gl",""],[5,"is_loaded","gleam::gl::FrontFace",""],[5,"load_with","",""],[0,"Frustum","gleam::gl",""],[5,"is_loaded","gleam::gl::Frustum",""],[5,"load_with","",""],[0,"GenBuffers","gleam::gl",""],[5,"is_loaded","gleam::gl::GenBuffers",""],[5,"load_with","",""],[0,"GenFramebuffers","gleam::gl",""],[5,"is_loaded","gleam::gl::GenFramebuffers",""],[5,"load_with","",""],[0,"GenLists","gleam::gl",""],[5,"is_loaded","gleam::gl::GenLists",""],[5,"load_with","",""],[0,"GenQueries","gleam::gl",""],[5,"is_loaded","gleam::gl::GenQueries",""],[5,"load_with","",""],[0,"GenRenderbuffers","gleam::gl",""],[5,"is_loaded","gleam::gl::GenRenderbuffers",""],[5,"load_with","",""],[0,"GenTextures","gleam::gl",""],[5,"is_loaded","gleam::gl::GenTextures",""],[5,"load_with","",""],[0,"GenVertexArrays","gleam::gl",""],[5,"is_loaded","gleam::gl::GenVertexArrays",""],[5,"load_with","",""],[0,"GenerateMipmap","gleam::gl",""],[5,"is_loaded","gleam::gl::GenerateMipmap",""],[5,"load_with","",""],[0,"GetActiveAttrib","gleam::gl",""],[5,"is_loaded","gleam::gl::GetActiveAttrib",""],[5,"load_with","",""],[0,"GetActiveUniform","gleam::gl",""],[5,"is_loaded","gleam::gl::GetActiveUniform",""],[5,"load_with","",""],[0,"GetAttachedShaders","gleam::gl",""],[5,"is_loaded","gleam::gl::GetAttachedShaders",""],[5,"load_with","",""],[0,"GetAttribLocation","gleam::gl",""],[5,"is_loaded","gleam::gl::GetAttribLocation",""],[5,"load_with","",""],[0,"GetBooleani_v","gleam::gl",""],[5,"is_loaded","gleam::gl::GetBooleani_v",""],[5,"load_with","",""],[0,"GetBooleanv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetBooleanv",""],[5,"load_with","",""],[0,"GetBufferParameteriv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetBufferParameteriv",""],[5,"load_with","",""],[0,"GetBufferPointerv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetBufferPointerv",""],[5,"load_with","",""],[0,"GetBufferSubData","gleam::gl",""],[5,"is_loaded","gleam::gl::GetBufferSubData",""],[5,"load_with","",""],[0,"GetClipPlane","gleam::gl",""],[5,"is_loaded","gleam::gl::GetClipPlane",""],[5,"load_with","",""],[0,"GetCompressedTexImage","gleam::gl",""],[5,"is_loaded","gleam::gl::GetCompressedTexImage",""],[5,"load_with","",""],[0,"GetDoublev","gleam::gl",""],[5,"is_loaded","gleam::gl::GetDoublev",""],[5,"load_with","",""],[0,"GetError","gleam::gl",""],[5,"is_loaded","gleam::gl::GetError",""],[5,"load_with","",""],[0,"GetFloatv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetFloatv",""],[5,"load_with","",""],[0,"GetFragDataLocation","gleam::gl",""],[5,"is_loaded","gleam::gl::GetFragDataLocation",""],[5,"load_with","",""],[0,"GetFramebufferAttachmentParameteriv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetFramebufferAttachmentParameteriv",""],[5,"load_with","",""],[0,"GetIntegeri_v","gleam::gl",""],[5,"is_loaded","gleam::gl::GetIntegeri_v",""],[5,"load_with","",""],[0,"GetIntegerv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetIntegerv",""],[5,"load_with","",""],[0,"GetLightfv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetLightfv",""],[5,"load_with","",""],[0,"GetLightiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetLightiv",""],[5,"load_with","",""],[0,"GetMapdv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetMapdv",""],[5,"load_with","",""],[0,"GetMapfv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetMapfv",""],[5,"load_with","",""],[0,"GetMapiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetMapiv",""],[5,"load_with","",""],[0,"GetMaterialfv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetMaterialfv",""],[5,"load_with","",""],[0,"GetMaterialiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetMaterialiv",""],[5,"load_with","",""],[0,"GetPixelMapfv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetPixelMapfv",""],[5,"load_with","",""],[0,"GetPixelMapuiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetPixelMapuiv",""],[5,"load_with","",""],[0,"GetPixelMapusv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetPixelMapusv",""],[5,"load_with","",""],[0,"GetPointerv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetPointerv",""],[5,"load_with","",""],[0,"GetPolygonStipple","gleam::gl",""],[5,"is_loaded","gleam::gl::GetPolygonStipple",""],[5,"load_with","",""],[0,"GetProgramInfoLog","gleam::gl",""],[5,"is_loaded","gleam::gl::GetProgramInfoLog",""],[5,"load_with","",""],[0,"GetProgramiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetProgramiv",""],[5,"load_with","",""],[0,"GetQueryObjectiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetQueryObjectiv",""],[5,"load_with","",""],[0,"GetQueryObjectuiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetQueryObjectuiv",""],[5,"load_with","",""],[0,"GetQueryiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetQueryiv",""],[5,"load_with","",""],[0,"GetRenderbufferParameteriv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetRenderbufferParameteriv",""],[5,"load_with","",""],[0,"GetShaderInfoLog","gleam::gl",""],[5,"is_loaded","gleam::gl::GetShaderInfoLog",""],[5,"load_with","",""],[0,"GetShaderSource","gleam::gl",""],[5,"is_loaded","gleam::gl::GetShaderSource",""],[5,"load_with","",""],[0,"GetShaderiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetShaderiv",""],[5,"load_with","",""],[0,"GetString","gleam::gl",""],[5,"is_loaded","gleam::gl::GetString",""],[5,"load_with","",""],[0,"GetStringi","gleam::gl",""],[5,"is_loaded","gleam::gl::GetStringi",""],[5,"load_with","",""],[0,"GetTexEnvfv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetTexEnvfv",""],[5,"load_with","",""],[0,"GetTexEnviv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetTexEnviv",""],[5,"load_with","",""],[0,"GetTexGendv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetTexGendv",""],[5,"load_with","",""],[0,"GetTexGenfv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetTexGenfv",""],[5,"load_with","",""],[0,"GetTexGeniv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetTexGeniv",""],[5,"load_with","",""],[0,"GetTexImage","gleam::gl",""],[5,"is_loaded","gleam::gl::GetTexImage",""],[5,"load_with","",""],[0,"GetTexLevelParameterfv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetTexLevelParameterfv",""],[5,"load_with","",""],[0,"GetTexLevelParameteriv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetTexLevelParameteriv",""],[5,"load_with","",""],[0,"GetTexParameterIiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetTexParameterIiv",""],[5,"load_with","",""],[0,"GetTexParameterIuiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetTexParameterIuiv",""],[5,"load_with","",""],[0,"GetTexParameterfv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetTexParameterfv",""],[5,"load_with","",""],[0,"GetTexParameteriv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetTexParameteriv",""],[5,"load_with","",""],[0,"GetTransformFeedbackVarying","gleam::gl",""],[5,"is_loaded","gleam::gl::GetTransformFeedbackVarying",""],[5,"load_with","",""],[0,"GetUniformLocation","gleam::gl",""],[5,"is_loaded","gleam::gl::GetUniformLocation",""],[5,"load_with","",""],[0,"GetUniformfv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetUniformfv",""],[5,"load_with","",""],[0,"GetUniformiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetUniformiv",""],[5,"load_with","",""],[0,"GetUniformuiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetUniformuiv",""],[5,"load_with","",""],[0,"GetVertexAttribIiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetVertexAttribIiv",""],[5,"load_with","",""],[0,"GetVertexAttribIuiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetVertexAttribIuiv",""],[5,"load_with","",""],[0,"GetVertexAttribPointerv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetVertexAttribPointerv",""],[5,"load_with","",""],[0,"GetVertexAttribdv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetVertexAttribdv",""],[5,"load_with","",""],[0,"GetVertexAttribfv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetVertexAttribfv",""],[5,"load_with","",""],[0,"GetVertexAttribiv","gleam::gl",""],[5,"is_loaded","gleam::gl::GetVertexAttribiv",""],[5,"load_with","",""],[0,"Hint","gleam::gl",""],[5,"is_loaded","gleam::gl::Hint",""],[5,"load_with","",""],[0,"IndexMask","gleam::gl",""],[5,"is_loaded","gleam::gl::IndexMask",""],[5,"load_with","",""],[0,"IndexPointer","gleam::gl",""],[5,"is_loaded","gleam::gl::IndexPointer",""],[5,"load_with","",""],[0,"Indexd","gleam::gl",""],[5,"is_loaded","gleam::gl::Indexd",""],[5,"load_with","",""],[0,"Indexdv","gleam::gl",""],[5,"is_loaded","gleam::gl::Indexdv",""],[5,"load_with","",""],[0,"Indexf","gleam::gl",""],[5,"is_loaded","gleam::gl::Indexf",""],[5,"load_with","",""],[0,"Indexfv","gleam::gl",""],[5,"is_loaded","gleam::gl::Indexfv",""],[5,"load_with","",""],[0,"Indexi","gleam::gl",""],[5,"is_loaded","gleam::gl::Indexi",""],[5,"load_with","",""],[0,"Indexiv","gleam::gl",""],[5,"is_loaded","gleam::gl::Indexiv",""],[5,"load_with","",""],[0,"Indexs","gleam::gl",""],[5,"is_loaded","gleam::gl::Indexs",""],[5,"load_with","",""],[0,"Indexsv","gleam::gl",""],[5,"is_loaded","gleam::gl::Indexsv",""],[5,"load_with","",""],[0,"Indexub","gleam::gl",""],[5,"is_loaded","gleam::gl::Indexub",""],[5,"load_with","",""],[0,"Indexubv","gleam::gl",""],[5,"is_loaded","gleam::gl::Indexubv",""],[5,"load_with","",""],[0,"InitNames","gleam::gl",""],[5,"is_loaded","gleam::gl::InitNames",""],[5,"load_with","",""],[0,"InterleavedArrays","gleam::gl",""],[5,"is_loaded","gleam::gl::InterleavedArrays",""],[5,"load_with","",""],[0,"IsBuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::IsBuffer",""],[5,"load_with","",""],[0,"IsEnabled","gleam::gl",""],[5,"is_loaded","gleam::gl::IsEnabled",""],[5,"load_with","",""],[0,"IsEnabledi","gleam::gl",""],[5,"is_loaded","gleam::gl::IsEnabledi",""],[5,"load_with","",""],[0,"IsFramebuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::IsFramebuffer",""],[5,"load_with","",""],[0,"IsList","gleam::gl",""],[5,"is_loaded","gleam::gl::IsList",""],[5,"load_with","",""],[0,"IsProgram","gleam::gl",""],[5,"is_loaded","gleam::gl::IsProgram",""],[5,"load_with","",""],[0,"IsQuery","gleam::gl",""],[5,"is_loaded","gleam::gl::IsQuery",""],[5,"load_with","",""],[0,"IsRenderbuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::IsRenderbuffer",""],[5,"load_with","",""],[0,"IsShader","gleam::gl",""],[5,"is_loaded","gleam::gl::IsShader",""],[5,"load_with","",""],[0,"IsTexture","gleam::gl",""],[5,"is_loaded","gleam::gl::IsTexture",""],[5,"load_with","",""],[0,"IsVertexArray","gleam::gl",""],[5,"is_loaded","gleam::gl::IsVertexArray",""],[5,"load_with","",""],[0,"LightModelf","gleam::gl",""],[5,"is_loaded","gleam::gl::LightModelf",""],[5,"load_with","",""],[0,"LightModelfv","gleam::gl",""],[5,"is_loaded","gleam::gl::LightModelfv",""],[5,"load_with","",""],[0,"LightModeli","gleam::gl",""],[5,"is_loaded","gleam::gl::LightModeli",""],[5,"load_with","",""],[0,"LightModeliv","gleam::gl",""],[5,"is_loaded","gleam::gl::LightModeliv",""],[5,"load_with","",""],[0,"Lightf","gleam::gl",""],[5,"is_loaded","gleam::gl::Lightf",""],[5,"load_with","",""],[0,"Lightfv","gleam::gl",""],[5,"is_loaded","gleam::gl::Lightfv",""],[5,"load_with","",""],[0,"Lighti","gleam::gl",""],[5,"is_loaded","gleam::gl::Lighti",""],[5,"load_with","",""],[0,"Lightiv","gleam::gl",""],[5,"is_loaded","gleam::gl::Lightiv",""],[5,"load_with","",""],[0,"LineStipple","gleam::gl",""],[5,"is_loaded","gleam::gl::LineStipple",""],[5,"load_with","",""],[0,"LineWidth","gleam::gl",""],[5,"is_loaded","gleam::gl::LineWidth",""],[5,"load_with","",""],[0,"LinkProgram","gleam::gl",""],[5,"is_loaded","gleam::gl::LinkProgram",""],[5,"load_with","",""],[0,"ListBase","gleam::gl",""],[5,"is_loaded","gleam::gl::ListBase",""],[5,"load_with","",""],[0,"LoadIdentity","gleam::gl",""],[5,"is_loaded","gleam::gl::LoadIdentity",""],[5,"load_with","",""],[0,"LoadMatrixd","gleam::gl",""],[5,"is_loaded","gleam::gl::LoadMatrixd",""],[5,"load_with","",""],[0,"LoadMatrixf","gleam::gl",""],[5,"is_loaded","gleam::gl::LoadMatrixf",""],[5,"load_with","",""],[0,"LoadName","gleam::gl",""],[5,"is_loaded","gleam::gl::LoadName",""],[5,"load_with","",""],[0,"LoadTransposeMatrixd","gleam::gl",""],[5,"is_loaded","gleam::gl::LoadTransposeMatrixd",""],[5,"load_with","",""],[0,"LoadTransposeMatrixf","gleam::gl",""],[5,"is_loaded","gleam::gl::LoadTransposeMatrixf",""],[5,"load_with","",""],[0,"LogicOp","gleam::gl",""],[5,"is_loaded","gleam::gl::LogicOp",""],[5,"load_with","",""],[0,"Map1d","gleam::gl",""],[5,"is_loaded","gleam::gl::Map1d",""],[5,"load_with","",""],[0,"Map1f","gleam::gl",""],[5,"is_loaded","gleam::gl::Map1f",""],[5,"load_with","",""],[0,"Map2d","gleam::gl",""],[5,"is_loaded","gleam::gl::Map2d",""],[5,"load_with","",""],[0,"Map2f","gleam::gl",""],[5,"is_loaded","gleam::gl::Map2f",""],[5,"load_with","",""],[0,"MapBuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::MapBuffer",""],[5,"load_with","",""],[0,"MapBufferRange","gleam::gl",""],[5,"is_loaded","gleam::gl::MapBufferRange",""],[5,"load_with","",""],[0,"MapGrid1d","gleam::gl",""],[5,"is_loaded","gleam::gl::MapGrid1d",""],[5,"load_with","",""],[0,"MapGrid1f","gleam::gl",""],[5,"is_loaded","gleam::gl::MapGrid1f",""],[5,"load_with","",""],[0,"MapGrid2d","gleam::gl",""],[5,"is_loaded","gleam::gl::MapGrid2d",""],[5,"load_with","",""],[0,"MapGrid2f","gleam::gl",""],[5,"is_loaded","gleam::gl::MapGrid2f",""],[5,"load_with","",""],[0,"Materialf","gleam::gl",""],[5,"is_loaded","gleam::gl::Materialf",""],[5,"load_with","",""],[0,"Materialfv","gleam::gl",""],[5,"is_loaded","gleam::gl::Materialfv",""],[5,"load_with","",""],[0,"Materiali","gleam::gl",""],[5,"is_loaded","gleam::gl::Materiali",""],[5,"load_with","",""],[0,"Materialiv","gleam::gl",""],[5,"is_loaded","gleam::gl::Materialiv",""],[5,"load_with","",""],[0,"MatrixMode","gleam::gl",""],[5,"is_loaded","gleam::gl::MatrixMode",""],[5,"load_with","",""],[0,"MultMatrixd","gleam::gl",""],[5,"is_loaded","gleam::gl::MultMatrixd",""],[5,"load_with","",""],[0,"MultMatrixf","gleam::gl",""],[5,"is_loaded","gleam::gl::MultMatrixf",""],[5,"load_with","",""],[0,"MultTransposeMatrixd","gleam::gl",""],[5,"is_loaded","gleam::gl::MultTransposeMatrixd",""],[5,"load_with","",""],[0,"MultTransposeMatrixf","gleam::gl",""],[5,"is_loaded","gleam::gl::MultTransposeMatrixf",""],[5,"load_with","",""],[0,"MultiDrawArrays","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiDrawArrays",""],[5,"load_with","",""],[0,"MultiDrawElements","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiDrawElements",""],[5,"load_with","",""],[0,"MultiTexCoord1d","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord1d",""],[5,"load_with","",""],[0,"MultiTexCoord1dv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord1dv",""],[5,"load_with","",""],[0,"MultiTexCoord1f","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord1f",""],[5,"load_with","",""],[0,"MultiTexCoord1fv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord1fv",""],[5,"load_with","",""],[0,"MultiTexCoord1i","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord1i",""],[5,"load_with","",""],[0,"MultiTexCoord1iv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord1iv",""],[5,"load_with","",""],[0,"MultiTexCoord1s","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord1s",""],[5,"load_with","",""],[0,"MultiTexCoord1sv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord1sv",""],[5,"load_with","",""],[0,"MultiTexCoord2d","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord2d",""],[5,"load_with","",""],[0,"MultiTexCoord2dv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord2dv",""],[5,"load_with","",""],[0,"MultiTexCoord2f","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord2f",""],[5,"load_with","",""],[0,"MultiTexCoord2fv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord2fv",""],[5,"load_with","",""],[0,"MultiTexCoord2i","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord2i",""],[5,"load_with","",""],[0,"MultiTexCoord2iv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord2iv",""],[5,"load_with","",""],[0,"MultiTexCoord2s","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord2s",""],[5,"load_with","",""],[0,"MultiTexCoord2sv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord2sv",""],[5,"load_with","",""],[0,"MultiTexCoord3d","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord3d",""],[5,"load_with","",""],[0,"MultiTexCoord3dv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord3dv",""],[5,"load_with","",""],[0,"MultiTexCoord3f","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord3f",""],[5,"load_with","",""],[0,"MultiTexCoord3fv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord3fv",""],[5,"load_with","",""],[0,"MultiTexCoord3i","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord3i",""],[5,"load_with","",""],[0,"MultiTexCoord3iv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord3iv",""],[5,"load_with","",""],[0,"MultiTexCoord3s","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord3s",""],[5,"load_with","",""],[0,"MultiTexCoord3sv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord3sv",""],[5,"load_with","",""],[0,"MultiTexCoord4d","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord4d",""],[5,"load_with","",""],[0,"MultiTexCoord4dv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord4dv",""],[5,"load_with","",""],[0,"MultiTexCoord4f","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord4f",""],[5,"load_with","",""],[0,"MultiTexCoord4fv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord4fv",""],[5,"load_with","",""],[0,"MultiTexCoord4i","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord4i",""],[5,"load_with","",""],[0,"MultiTexCoord4iv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord4iv",""],[5,"load_with","",""],[0,"MultiTexCoord4s","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord4s",""],[5,"load_with","",""],[0,"MultiTexCoord4sv","gleam::gl",""],[5,"is_loaded","gleam::gl::MultiTexCoord4sv",""],[5,"load_with","",""],[0,"NewList","gleam::gl",""],[5,"is_loaded","gleam::gl::NewList",""],[5,"load_with","",""],[0,"Normal3b","gleam::gl",""],[5,"is_loaded","gleam::gl::Normal3b",""],[5,"load_with","",""],[0,"Normal3bv","gleam::gl",""],[5,"is_loaded","gleam::gl::Normal3bv",""],[5,"load_with","",""],[0,"Normal3d","gleam::gl",""],[5,"is_loaded","gleam::gl::Normal3d",""],[5,"load_with","",""],[0,"Normal3dv","gleam::gl",""],[5,"is_loaded","gleam::gl::Normal3dv",""],[5,"load_with","",""],[0,"Normal3f","gleam::gl",""],[5,"is_loaded","gleam::gl::Normal3f",""],[5,"load_with","",""],[0,"Normal3fv","gleam::gl",""],[5,"is_loaded","gleam::gl::Normal3fv",""],[5,"load_with","",""],[0,"Normal3i","gleam::gl",""],[5,"is_loaded","gleam::gl::Normal3i",""],[5,"load_with","",""],[0,"Normal3iv","gleam::gl",""],[5,"is_loaded","gleam::gl::Normal3iv",""],[5,"load_with","",""],[0,"Normal3s","gleam::gl",""],[5,"is_loaded","gleam::gl::Normal3s",""],[5,"load_with","",""],[0,"Normal3sv","gleam::gl",""],[5,"is_loaded","gleam::gl::Normal3sv",""],[5,"load_with","",""],[0,"NormalPointer","gleam::gl",""],[5,"is_loaded","gleam::gl::NormalPointer",""],[5,"load_with","",""],[0,"Ortho","gleam::gl",""],[5,"is_loaded","gleam::gl::Ortho",""],[5,"load_with","",""],[0,"PassThrough","gleam::gl",""],[5,"is_loaded","gleam::gl::PassThrough",""],[5,"load_with","",""],[0,"PixelMapfv","gleam::gl",""],[5,"is_loaded","gleam::gl::PixelMapfv",""],[5,"load_with","",""],[0,"PixelMapuiv","gleam::gl",""],[5,"is_loaded","gleam::gl::PixelMapuiv",""],[5,"load_with","",""],[0,"PixelMapusv","gleam::gl",""],[5,"is_loaded","gleam::gl::PixelMapusv",""],[5,"load_with","",""],[0,"PixelStoref","gleam::gl",""],[5,"is_loaded","gleam::gl::PixelStoref",""],[5,"load_with","",""],[0,"PixelStorei","gleam::gl",""],[5,"is_loaded","gleam::gl::PixelStorei",""],[5,"load_with","",""],[0,"PixelTransferf","gleam::gl",""],[5,"is_loaded","gleam::gl::PixelTransferf",""],[5,"load_with","",""],[0,"PixelTransferi","gleam::gl",""],[5,"is_loaded","gleam::gl::PixelTransferi",""],[5,"load_with","",""],[0,"PixelZoom","gleam::gl",""],[5,"is_loaded","gleam::gl::PixelZoom",""],[5,"load_with","",""],[0,"PointParameterf","gleam::gl",""],[5,"is_loaded","gleam::gl::PointParameterf",""],[5,"load_with","",""],[0,"PointParameterfv","gleam::gl",""],[5,"is_loaded","gleam::gl::PointParameterfv",""],[5,"load_with","",""],[0,"PointParameteri","gleam::gl",""],[5,"is_loaded","gleam::gl::PointParameteri",""],[5,"load_with","",""],[0,"PointParameteriv","gleam::gl",""],[5,"is_loaded","gleam::gl::PointParameteriv",""],[5,"load_with","",""],[0,"PointSize","gleam::gl",""],[5,"is_loaded","gleam::gl::PointSize",""],[5,"load_with","",""],[0,"PolygonMode","gleam::gl",""],[5,"is_loaded","gleam::gl::PolygonMode",""],[5,"load_with","",""],[0,"PolygonOffset","gleam::gl",""],[5,"is_loaded","gleam::gl::PolygonOffset",""],[5,"load_with","",""],[0,"PolygonStipple","gleam::gl",""],[5,"is_loaded","gleam::gl::PolygonStipple",""],[5,"load_with","",""],[0,"PopAttrib","gleam::gl",""],[5,"is_loaded","gleam::gl::PopAttrib",""],[5,"load_with","",""],[0,"PopClientAttrib","gleam::gl",""],[5,"is_loaded","gleam::gl::PopClientAttrib",""],[5,"load_with","",""],[0,"PopMatrix","gleam::gl",""],[5,"is_loaded","gleam::gl::PopMatrix",""],[5,"load_with","",""],[0,"PopName","gleam::gl",""],[5,"is_loaded","gleam::gl::PopName",""],[5,"load_with","",""],[0,"PrioritizeTextures","gleam::gl",""],[5,"is_loaded","gleam::gl::PrioritizeTextures",""],[5,"load_with","",""],[0,"PushAttrib","gleam::gl",""],[5,"is_loaded","gleam::gl::PushAttrib",""],[5,"load_with","",""],[0,"PushClientAttrib","gleam::gl",""],[5,"is_loaded","gleam::gl::PushClientAttrib",""],[5,"load_with","",""],[0,"PushMatrix","gleam::gl",""],[5,"is_loaded","gleam::gl::PushMatrix",""],[5,"load_with","",""],[0,"PushName","gleam::gl",""],[5,"is_loaded","gleam::gl::PushName",""],[5,"load_with","",""],[0,"RasterPos2d","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos2d",""],[5,"load_with","",""],[0,"RasterPos2dv","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos2dv",""],[5,"load_with","",""],[0,"RasterPos2f","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos2f",""],[5,"load_with","",""],[0,"RasterPos2fv","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos2fv",""],[5,"load_with","",""],[0,"RasterPos2i","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos2i",""],[5,"load_with","",""],[0,"RasterPos2iv","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos2iv",""],[5,"load_with","",""],[0,"RasterPos2s","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos2s",""],[5,"load_with","",""],[0,"RasterPos2sv","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos2sv",""],[5,"load_with","",""],[0,"RasterPos3d","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos3d",""],[5,"load_with","",""],[0,"RasterPos3dv","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos3dv",""],[5,"load_with","",""],[0,"RasterPos3f","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos3f",""],[5,"load_with","",""],[0,"RasterPos3fv","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos3fv",""],[5,"load_with","",""],[0,"RasterPos3i","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos3i",""],[5,"load_with","",""],[0,"RasterPos3iv","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos3iv",""],[5,"load_with","",""],[0,"RasterPos3s","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos3s",""],[5,"load_with","",""],[0,"RasterPos3sv","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos3sv",""],[5,"load_with","",""],[0,"RasterPos4d","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos4d",""],[5,"load_with","",""],[0,"RasterPos4dv","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos4dv",""],[5,"load_with","",""],[0,"RasterPos4f","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos4f",""],[5,"load_with","",""],[0,"RasterPos4fv","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos4fv",""],[5,"load_with","",""],[0,"RasterPos4i","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos4i",""],[5,"load_with","",""],[0,"RasterPos4iv","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos4iv",""],[5,"load_with","",""],[0,"RasterPos4s","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos4s",""],[5,"load_with","",""],[0,"RasterPos4sv","gleam::gl",""],[5,"is_loaded","gleam::gl::RasterPos4sv",""],[5,"load_with","",""],[0,"ReadBuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::ReadBuffer",""],[5,"load_with","",""],[0,"ReadPixels","gleam::gl",""],[5,"is_loaded","gleam::gl::ReadPixels",""],[5,"load_with","",""],[0,"Rectd","gleam::gl",""],[5,"is_loaded","gleam::gl::Rectd",""],[5,"load_with","",""],[0,"Rectdv","gleam::gl",""],[5,"is_loaded","gleam::gl::Rectdv",""],[5,"load_with","",""],[0,"Rectf","gleam::gl",""],[5,"is_loaded","gleam::gl::Rectf",""],[5,"load_with","",""],[0,"Rectfv","gleam::gl",""],[5,"is_loaded","gleam::gl::Rectfv",""],[5,"load_with","",""],[0,"Recti","gleam::gl",""],[5,"is_loaded","gleam::gl::Recti",""],[5,"load_with","",""],[0,"Rectiv","gleam::gl",""],[5,"is_loaded","gleam::gl::Rectiv",""],[5,"load_with","",""],[0,"Rects","gleam::gl",""],[5,"is_loaded","gleam::gl::Rects",""],[5,"load_with","",""],[0,"Rectsv","gleam::gl",""],[5,"is_loaded","gleam::gl::Rectsv",""],[5,"load_with","",""],[0,"RenderMode","gleam::gl",""],[5,"is_loaded","gleam::gl::RenderMode",""],[5,"load_with","",""],[0,"RenderbufferStorage","gleam::gl",""],[5,"is_loaded","gleam::gl::RenderbufferStorage",""],[5,"load_with","",""],[0,"RenderbufferStorageMultisample","gleam::gl",""],[5,"is_loaded","gleam::gl::RenderbufferStorageMultisample",""],[5,"load_with","",""],[0,"Rotated","gleam::gl",""],[5,"is_loaded","gleam::gl::Rotated",""],[5,"load_with","",""],[0,"Rotatef","gleam::gl",""],[5,"is_loaded","gleam::gl::Rotatef",""],[5,"load_with","",""],[0,"SampleCoverage","gleam::gl",""],[5,"is_loaded","gleam::gl::SampleCoverage",""],[5,"load_with","",""],[0,"Scaled","gleam::gl",""],[5,"is_loaded","gleam::gl::Scaled",""],[5,"load_with","",""],[0,"Scalef","gleam::gl",""],[5,"is_loaded","gleam::gl::Scalef",""],[5,"load_with","",""],[0,"Scissor","gleam::gl",""],[5,"is_loaded","gleam::gl::Scissor",""],[5,"load_with","",""],[0,"SecondaryColor3b","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3b",""],[5,"load_with","",""],[0,"SecondaryColor3bv","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3bv",""],[5,"load_with","",""],[0,"SecondaryColor3d","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3d",""],[5,"load_with","",""],[0,"SecondaryColor3dv","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3dv",""],[5,"load_with","",""],[0,"SecondaryColor3f","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3f",""],[5,"load_with","",""],[0,"SecondaryColor3fv","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3fv",""],[5,"load_with","",""],[0,"SecondaryColor3i","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3i",""],[5,"load_with","",""],[0,"SecondaryColor3iv","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3iv",""],[5,"load_with","",""],[0,"SecondaryColor3s","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3s",""],[5,"load_with","",""],[0,"SecondaryColor3sv","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3sv",""],[5,"load_with","",""],[0,"SecondaryColor3ub","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3ub",""],[5,"load_with","",""],[0,"SecondaryColor3ubv","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3ubv",""],[5,"load_with","",""],[0,"SecondaryColor3ui","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3ui",""],[5,"load_with","",""],[0,"SecondaryColor3uiv","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3uiv",""],[5,"load_with","",""],[0,"SecondaryColor3us","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3us",""],[5,"load_with","",""],[0,"SecondaryColor3usv","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColor3usv",""],[5,"load_with","",""],[0,"SecondaryColorPointer","gleam::gl",""],[5,"is_loaded","gleam::gl::SecondaryColorPointer",""],[5,"load_with","",""],[0,"SelectBuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::SelectBuffer",""],[5,"load_with","",""],[0,"ShadeModel","gleam::gl",""],[5,"is_loaded","gleam::gl::ShadeModel",""],[5,"load_with","",""],[0,"ShaderSource","gleam::gl",""],[5,"is_loaded","gleam::gl::ShaderSource",""],[5,"load_with","",""],[0,"StencilFunc","gleam::gl",""],[5,"is_loaded","gleam::gl::StencilFunc",""],[5,"load_with","",""],[0,"StencilFuncSeparate","gleam::gl",""],[5,"is_loaded","gleam::gl::StencilFuncSeparate",""],[5,"load_with","",""],[0,"StencilMask","gleam::gl",""],[5,"is_loaded","gleam::gl::StencilMask",""],[5,"load_with","",""],[0,"StencilMaskSeparate","gleam::gl",""],[5,"is_loaded","gleam::gl::StencilMaskSeparate",""],[5,"load_with","",""],[0,"StencilOp","gleam::gl",""],[5,"is_loaded","gleam::gl::StencilOp",""],[5,"load_with","",""],[0,"StencilOpSeparate","gleam::gl",""],[5,"is_loaded","gleam::gl::StencilOpSeparate",""],[5,"load_with","",""],[0,"TexCoord1d","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord1d",""],[5,"load_with","",""],[0,"TexCoord1dv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord1dv",""],[5,"load_with","",""],[0,"TexCoord1f","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord1f",""],[5,"load_with","",""],[0,"TexCoord1fv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord1fv",""],[5,"load_with","",""],[0,"TexCoord1i","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord1i",""],[5,"load_with","",""],[0,"TexCoord1iv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord1iv",""],[5,"load_with","",""],[0,"TexCoord1s","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord1s",""],[5,"load_with","",""],[0,"TexCoord1sv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord1sv",""],[5,"load_with","",""],[0,"TexCoord2d","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord2d",""],[5,"load_with","",""],[0,"TexCoord2dv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord2dv",""],[5,"load_with","",""],[0,"TexCoord2f","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord2f",""],[5,"load_with","",""],[0,"TexCoord2fv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord2fv",""],[5,"load_with","",""],[0,"TexCoord2i","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord2i",""],[5,"load_with","",""],[0,"TexCoord2iv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord2iv",""],[5,"load_with","",""],[0,"TexCoord2s","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord2s",""],[5,"load_with","",""],[0,"TexCoord2sv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord2sv",""],[5,"load_with","",""],[0,"TexCoord3d","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord3d",""],[5,"load_with","",""],[0,"TexCoord3dv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord3dv",""],[5,"load_with","",""],[0,"TexCoord3f","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord3f",""],[5,"load_with","",""],[0,"TexCoord3fv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord3fv",""],[5,"load_with","",""],[0,"TexCoord3i","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord3i",""],[5,"load_with","",""],[0,"TexCoord3iv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord3iv",""],[5,"load_with","",""],[0,"TexCoord3s","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord3s",""],[5,"load_with","",""],[0,"TexCoord3sv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord3sv",""],[5,"load_with","",""],[0,"TexCoord4d","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord4d",""],[5,"load_with","",""],[0,"TexCoord4dv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord4dv",""],[5,"load_with","",""],[0,"TexCoord4f","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord4f",""],[5,"load_with","",""],[0,"TexCoord4fv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord4fv",""],[5,"load_with","",""],[0,"TexCoord4i","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord4i",""],[5,"load_with","",""],[0,"TexCoord4iv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord4iv",""],[5,"load_with","",""],[0,"TexCoord4s","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord4s",""],[5,"load_with","",""],[0,"TexCoord4sv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoord4sv",""],[5,"load_with","",""],[0,"TexCoordPointer","gleam::gl",""],[5,"is_loaded","gleam::gl::TexCoordPointer",""],[5,"load_with","",""],[0,"TexEnvf","gleam::gl",""],[5,"is_loaded","gleam::gl::TexEnvf",""],[5,"load_with","",""],[0,"TexEnvfv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexEnvfv",""],[5,"load_with","",""],[0,"TexEnvi","gleam::gl",""],[5,"is_loaded","gleam::gl::TexEnvi",""],[5,"load_with","",""],[0,"TexEnviv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexEnviv",""],[5,"load_with","",""],[0,"TexGend","gleam::gl",""],[5,"is_loaded","gleam::gl::TexGend",""],[5,"load_with","",""],[0,"TexGendv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexGendv",""],[5,"load_with","",""],[0,"TexGenf","gleam::gl",""],[5,"is_loaded","gleam::gl::TexGenf",""],[5,"load_with","",""],[0,"TexGenfv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexGenfv",""],[5,"load_with","",""],[0,"TexGeni","gleam::gl",""],[5,"is_loaded","gleam::gl::TexGeni",""],[5,"load_with","",""],[0,"TexGeniv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexGeniv",""],[5,"load_with","",""],[0,"TexImage1D","gleam::gl",""],[5,"is_loaded","gleam::gl::TexImage1D",""],[5,"load_with","",""],[0,"TexImage2D","gleam::gl",""],[5,"is_loaded","gleam::gl::TexImage2D",""],[5,"load_with","",""],[0,"TexImage3D","gleam::gl",""],[5,"is_loaded","gleam::gl::TexImage3D",""],[5,"load_with","",""],[0,"TexParameterIiv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexParameterIiv",""],[5,"load_with","",""],[0,"TexParameterIuiv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexParameterIuiv",""],[5,"load_with","",""],[0,"TexParameterf","gleam::gl",""],[5,"is_loaded","gleam::gl::TexParameterf",""],[5,"load_with","",""],[0,"TexParameterfv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexParameterfv",""],[5,"load_with","",""],[0,"TexParameteri","gleam::gl",""],[5,"is_loaded","gleam::gl::TexParameteri",""],[5,"load_with","",""],[0,"TexParameteriv","gleam::gl",""],[5,"is_loaded","gleam::gl::TexParameteriv",""],[5,"load_with","",""],[0,"TexSubImage1D","gleam::gl",""],[5,"is_loaded","gleam::gl::TexSubImage1D",""],[5,"load_with","",""],[0,"TexSubImage2D","gleam::gl",""],[5,"is_loaded","gleam::gl::TexSubImage2D",""],[5,"load_with","",""],[0,"TexSubImage3D","gleam::gl",""],[5,"is_loaded","gleam::gl::TexSubImage3D",""],[5,"load_with","",""],[0,"TransformFeedbackVaryings","gleam::gl",""],[5,"is_loaded","gleam::gl::TransformFeedbackVaryings",""],[5,"load_with","",""],[0,"Translated","gleam::gl",""],[5,"is_loaded","gleam::gl::Translated",""],[5,"load_with","",""],[0,"Translatef","gleam::gl",""],[5,"is_loaded","gleam::gl::Translatef",""],[5,"load_with","",""],[0,"Uniform1f","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform1f",""],[5,"load_with","",""],[0,"Uniform1fv","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform1fv",""],[5,"load_with","",""],[0,"Uniform1i","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform1i",""],[5,"load_with","",""],[0,"Uniform1iv","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform1iv",""],[5,"load_with","",""],[0,"Uniform1ui","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform1ui",""],[5,"load_with","",""],[0,"Uniform1uiv","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform1uiv",""],[5,"load_with","",""],[0,"Uniform2f","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform2f",""],[5,"load_with","",""],[0,"Uniform2fv","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform2fv",""],[5,"load_with","",""],[0,"Uniform2i","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform2i",""],[5,"load_with","",""],[0,"Uniform2iv","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform2iv",""],[5,"load_with","",""],[0,"Uniform2ui","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform2ui",""],[5,"load_with","",""],[0,"Uniform2uiv","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform2uiv",""],[5,"load_with","",""],[0,"Uniform3f","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform3f",""],[5,"load_with","",""],[0,"Uniform3fv","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform3fv",""],[5,"load_with","",""],[0,"Uniform3i","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform3i",""],[5,"load_with","",""],[0,"Uniform3iv","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform3iv",""],[5,"load_with","",""],[0,"Uniform3ui","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform3ui",""],[5,"load_with","",""],[0,"Uniform3uiv","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform3uiv",""],[5,"load_with","",""],[0,"Uniform4f","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform4f",""],[5,"load_with","",""],[0,"Uniform4fv","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform4fv",""],[5,"load_with","",""],[0,"Uniform4i","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform4i",""],[5,"load_with","",""],[0,"Uniform4iv","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform4iv",""],[5,"load_with","",""],[0,"Uniform4ui","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform4ui",""],[5,"load_with","",""],[0,"Uniform4uiv","gleam::gl",""],[5,"is_loaded","gleam::gl::Uniform4uiv",""],[5,"load_with","",""],[0,"UniformMatrix2fv","gleam::gl",""],[5,"is_loaded","gleam::gl::UniformMatrix2fv",""],[5,"load_with","",""],[0,"UniformMatrix2x3fv","gleam::gl",""],[5,"is_loaded","gleam::gl::UniformMatrix2x3fv",""],[5,"load_with","",""],[0,"UniformMatrix2x4fv","gleam::gl",""],[5,"is_loaded","gleam::gl::UniformMatrix2x4fv",""],[5,"load_with","",""],[0,"UniformMatrix3fv","gleam::gl",""],[5,"is_loaded","gleam::gl::UniformMatrix3fv",""],[5,"load_with","",""],[0,"UniformMatrix3x2fv","gleam::gl",""],[5,"is_loaded","gleam::gl::UniformMatrix3x2fv",""],[5,"load_with","",""],[0,"UniformMatrix3x4fv","gleam::gl",""],[5,"is_loaded","gleam::gl::UniformMatrix3x4fv",""],[5,"load_with","",""],[0,"UniformMatrix4fv","gleam::gl",""],[5,"is_loaded","gleam::gl::UniformMatrix4fv",""],[5,"load_with","",""],[0,"UniformMatrix4x2fv","gleam::gl",""],[5,"is_loaded","gleam::gl::UniformMatrix4x2fv",""],[5,"load_with","",""],[0,"UniformMatrix4x3fv","gleam::gl",""],[5,"is_loaded","gleam::gl::UniformMatrix4x3fv",""],[5,"load_with","",""],[0,"UnmapBuffer","gleam::gl",""],[5,"is_loaded","gleam::gl::UnmapBuffer",""],[5,"load_with","",""],[0,"UseProgram","gleam::gl",""],[5,"is_loaded","gleam::gl::UseProgram",""],[5,"load_with","",""],[0,"ValidateProgram","gleam::gl",""],[5,"is_loaded","gleam::gl::ValidateProgram",""],[5,"load_with","",""],[0,"Vertex2d","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex2d",""],[5,"load_with","",""],[0,"Vertex2dv","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex2dv",""],[5,"load_with","",""],[0,"Vertex2f","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex2f",""],[5,"load_with","",""],[0,"Vertex2fv","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex2fv",""],[5,"load_with","",""],[0,"Vertex2i","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex2i",""],[5,"load_with","",""],[0,"Vertex2iv","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex2iv",""],[5,"load_with","",""],[0,"Vertex2s","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex2s",""],[5,"load_with","",""],[0,"Vertex2sv","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex2sv",""],[5,"load_with","",""],[0,"Vertex3d","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex3d",""],[5,"load_with","",""],[0,"Vertex3dv","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex3dv",""],[5,"load_with","",""],[0,"Vertex3f","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex3f",""],[5,"load_with","",""],[0,"Vertex3fv","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex3fv",""],[5,"load_with","",""],[0,"Vertex3i","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex3i",""],[5,"load_with","",""],[0,"Vertex3iv","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex3iv",""],[5,"load_with","",""],[0,"Vertex3s","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex3s",""],[5,"load_with","",""],[0,"Vertex3sv","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex3sv",""],[5,"load_with","",""],[0,"Vertex4d","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex4d",""],[5,"load_with","",""],[0,"Vertex4dv","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex4dv",""],[5,"load_with","",""],[0,"Vertex4f","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex4f",""],[5,"load_with","",""],[0,"Vertex4fv","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex4fv",""],[5,"load_with","",""],[0,"Vertex4i","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex4i",""],[5,"load_with","",""],[0,"Vertex4iv","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex4iv",""],[5,"load_with","",""],[0,"Vertex4s","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex4s",""],[5,"load_with","",""],[0,"Vertex4sv","gleam::gl",""],[5,"is_loaded","gleam::gl::Vertex4sv",""],[5,"load_with","",""],[0,"VertexAttrib1d","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib1d",""],[5,"load_with","",""],[0,"VertexAttrib1dv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib1dv",""],[5,"load_with","",""],[0,"VertexAttrib1f","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib1f",""],[5,"load_with","",""],[0,"VertexAttrib1fv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib1fv",""],[5,"load_with","",""],[0,"VertexAttrib1s","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib1s",""],[5,"load_with","",""],[0,"VertexAttrib1sv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib1sv",""],[5,"load_with","",""],[0,"VertexAttrib2d","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib2d",""],[5,"load_with","",""],[0,"VertexAttrib2dv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib2dv",""],[5,"load_with","",""],[0,"VertexAttrib2f","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib2f",""],[5,"load_with","",""],[0,"VertexAttrib2fv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib2fv",""],[5,"load_with","",""],[0,"VertexAttrib2s","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib2s",""],[5,"load_with","",""],[0,"VertexAttrib2sv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib2sv",""],[5,"load_with","",""],[0,"VertexAttrib3d","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib3d",""],[5,"load_with","",""],[0,"VertexAttrib3dv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib3dv",""],[5,"load_with","",""],[0,"VertexAttrib3f","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib3f",""],[5,"load_with","",""],[0,"VertexAttrib3fv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib3fv",""],[5,"load_with","",""],[0,"VertexAttrib3s","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib3s",""],[5,"load_with","",""],[0,"VertexAttrib3sv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib3sv",""],[5,"load_with","",""],[0,"VertexAttrib4Nbv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4Nbv",""],[5,"load_with","",""],[0,"VertexAttrib4Niv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4Niv",""],[5,"load_with","",""],[0,"VertexAttrib4Nsv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4Nsv",""],[5,"load_with","",""],[0,"VertexAttrib4Nub","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4Nub",""],[5,"load_with","",""],[0,"VertexAttrib4Nubv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4Nubv",""],[5,"load_with","",""],[0,"VertexAttrib4Nuiv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4Nuiv",""],[5,"load_with","",""],[0,"VertexAttrib4Nusv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4Nusv",""],[5,"load_with","",""],[0,"VertexAttrib4bv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4bv",""],[5,"load_with","",""],[0,"VertexAttrib4d","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4d",""],[5,"load_with","",""],[0,"VertexAttrib4dv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4dv",""],[5,"load_with","",""],[0,"VertexAttrib4f","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4f",""],[5,"load_with","",""],[0,"VertexAttrib4fv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4fv",""],[5,"load_with","",""],[0,"VertexAttrib4iv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4iv",""],[5,"load_with","",""],[0,"VertexAttrib4s","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4s",""],[5,"load_with","",""],[0,"VertexAttrib4sv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4sv",""],[5,"load_with","",""],[0,"VertexAttrib4ubv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4ubv",""],[5,"load_with","",""],[0,"VertexAttrib4uiv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4uiv",""],[5,"load_with","",""],[0,"VertexAttrib4usv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttrib4usv",""],[5,"load_with","",""],[0,"VertexAttribI1i","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI1i",""],[5,"load_with","",""],[0,"VertexAttribI1iv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI1iv",""],[5,"load_with","",""],[0,"VertexAttribI1ui","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI1ui",""],[5,"load_with","",""],[0,"VertexAttribI1uiv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI1uiv",""],[5,"load_with","",""],[0,"VertexAttribI2i","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI2i",""],[5,"load_with","",""],[0,"VertexAttribI2iv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI2iv",""],[5,"load_with","",""],[0,"VertexAttribI2ui","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI2ui",""],[5,"load_with","",""],[0,"VertexAttribI2uiv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI2uiv",""],[5,"load_with","",""],[0,"VertexAttribI3i","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI3i",""],[5,"load_with","",""],[0,"VertexAttribI3iv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI3iv",""],[5,"load_with","",""],[0,"VertexAttribI3ui","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI3ui",""],[5,"load_with","",""],[0,"VertexAttribI3uiv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI3uiv",""],[5,"load_with","",""],[0,"VertexAttribI4bv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI4bv",""],[5,"load_with","",""],[0,"VertexAttribI4i","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI4i",""],[5,"load_with","",""],[0,"VertexAttribI4iv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI4iv",""],[5,"load_with","",""],[0,"VertexAttribI4sv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI4sv",""],[5,"load_with","",""],[0,"VertexAttribI4ubv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI4ubv",""],[5,"load_with","",""],[0,"VertexAttribI4ui","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI4ui",""],[5,"load_with","",""],[0,"VertexAttribI4uiv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI4uiv",""],[5,"load_with","",""],[0,"VertexAttribI4usv","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribI4usv",""],[5,"load_with","",""],[0,"VertexAttribIPointer","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribIPointer",""],[5,"load_with","",""],[0,"VertexAttribPointer","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexAttribPointer",""],[5,"load_with","",""],[0,"VertexPointer","gleam::gl",""],[5,"is_loaded","gleam::gl::VertexPointer",""],[5,"load_with","",""],[0,"Viewport","gleam::gl",""],[5,"is_loaded","gleam::gl::Viewport",""],[5,"load_with","",""],[0,"WindowPos2d","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos2d",""],[5,"load_with","",""],[0,"WindowPos2dv","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos2dv",""],[5,"load_with","",""],[0,"WindowPos2f","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos2f",""],[5,"load_with","",""],[0,"WindowPos2fv","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos2fv",""],[5,"load_with","",""],[0,"WindowPos2i","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos2i",""],[5,"load_with","",""],[0,"WindowPos2iv","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos2iv",""],[5,"load_with","",""],[0,"WindowPos2s","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos2s",""],[5,"load_with","",""],[0,"WindowPos2sv","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos2sv",""],[5,"load_with","",""],[0,"WindowPos3d","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos3d",""],[5,"load_with","",""],[0,"WindowPos3dv","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos3dv",""],[5,"load_with","",""],[0,"WindowPos3f","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos3f",""],[5,"load_with","",""],[0,"WindowPos3fv","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos3fv",""],[5,"load_with","",""],[0,"WindowPos3i","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos3i",""],[5,"load_with","",""],[0,"WindowPos3iv","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos3iv",""],[5,"load_with","",""],[0,"WindowPos3s","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos3s",""],[5,"load_with","",""],[0,"WindowPos3sv","gleam::gl",""],[5,"is_loaded","gleam::gl::WindowPos3sv",""],[5,"load_with","",""],[6,"GLenum","gleam::gl",""],[6,"GLboolean","",""],[6,"GLbitfield","",""],[6,"GLvoid","",""],[6,"GLbyte","",""],[6,"GLshort","",""],[6,"GLint","",""],[6,"GLclampx","",""],[6,"GLubyte","",""],[6,"GLushort","",""],[6,"GLuint","",""],[6,"GLsizei","",""],[6,"GLfloat","",""],[6,"GLclampf","",""],[6,"GLdouble","",""],[6,"GLclampd","",""],[6,"GLeglImageOES","",""],[6,"GLchar","",""],[6,"GLcharARB","",""],[6,"GLhandleARB","",""],[6,"GLhalfARB","",""],[6,"GLhalf","",""],[6,"GLfixed","",""],[6,"GLintptr","",""],[6,"GLsizeiptr","",""],[6,"GLint64","",""],[6,"GLuint64","",""],[6,"GLintptrARB","",""],[6,"GLsizeiptrARB","",""],[6,"GLint64EXT","",""],[6,"GLuint64EXT","",""],[6,"GLsync","",""],[6,"GLDEBUGPROC","",""],[6,"GLDEBUGPROCARB","",""],[6,"GLDEBUGPROCKHR","",""],[6,"GLDEBUGPROCAMD","",""],[6,"GLhalfNV","",""],[6,"GLvdpauSurfaceNV","",""],[17,"CURRENT_BIT","",""],[17,"POINT_BIT","",""],[17,"LINE_BIT","",""],[17,"POLYGON_BIT","",""],[17,"POLYGON_STIPPLE_BIT","",""],[17,"PIXEL_MODE_BIT","",""],[17,"LIGHTING_BIT","",""],[17,"FOG_BIT","",""],[17,"DEPTH_BUFFER_BIT","",""],[17,"ACCUM_BUFFER_BIT","",""],[17,"STENCIL_BUFFER_BIT","",""],[17,"VIEWPORT_BIT","",""],[17,"TRANSFORM_BIT","",""],[17,"ENABLE_BIT","",""],[17,"COLOR_BUFFER_BIT","",""],[17,"HINT_BIT","",""],[17,"EVAL_BIT","",""],[17,"LIST_BIT","",""],[17,"TEXTURE_BIT","",""],[17,"SCISSOR_BIT","",""],[17,"MULTISAMPLE_BIT","",""],[17,"ALL_ATTRIB_BITS","",""],[17,"CLIENT_PIXEL_STORE_BIT","",""],[17,"CLIENT_VERTEX_ARRAY_BIT","",""],[17,"CLIENT_ALL_ATTRIB_BITS","",""],[17,"CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT","",""],[17,"MAP_READ_BIT","",""],[17,"MAP_WRITE_BIT","",""],[17,"MAP_INVALIDATE_RANGE_BIT","",""],[17,"MAP_INVALIDATE_BUFFER_BIT","",""],[17,"MAP_FLUSH_EXPLICIT_BIT","",""],[17,"MAP_UNSYNCHRONIZED_BIT","",""],[17,"FALSE","",""],[17,"NO_ERROR","",""],[17,"ZERO","",""],[17,"NONE","",""],[17,"TRUE","",""],[17,"ONE","",""],[17,"POINTS","",""],[17,"LINES","",""],[17,"LINE_LOOP","",""],[17,"LINE_STRIP","",""],[17,"TRIANGLES","",""],[17,"TRIANGLE_STRIP","",""],[17,"TRIANGLE_FAN","",""],[17,"QUADS","",""],[17,"QUAD_STRIP","",""],[17,"POLYGON","",""],[17,"ACCUM","",""],[17,"LOAD","",""],[17,"RETURN","",""],[17,"MULT","",""],[17,"ADD","",""],[17,"NEVER","",""],[17,"LESS","",""],[17,"EQUAL","",""],[17,"LEQUAL","",""],[17,"GREATER","",""],[17,"NOTEQUAL","",""],[17,"GEQUAL","",""],[17,"ALWAYS","",""],[17,"SRC_COLOR","",""],[17,"ONE_MINUS_SRC_COLOR","",""],[17,"SRC_ALPHA","",""],[17,"ONE_MINUS_SRC_ALPHA","",""],[17,"DST_ALPHA","",""],[17,"ONE_MINUS_DST_ALPHA","",""],[17,"DST_COLOR","",""],[17,"ONE_MINUS_DST_COLOR","",""],[17,"SRC_ALPHA_SATURATE","",""],[17,"FRONT_LEFT","",""],[17,"FRONT_RIGHT","",""],[17,"BACK_LEFT","",""],[17,"BACK_RIGHT","",""],[17,"FRONT","",""],[17,"BACK","",""],[17,"LEFT","",""],[17,"RIGHT","",""],[17,"FRONT_AND_BACK","",""],[17,"AUX0","",""],[17,"AUX1","",""],[17,"AUX2","",""],[17,"AUX3","",""],[17,"INVALID_ENUM","",""],[17,"INVALID_VALUE","",""],[17,"INVALID_OPERATION","",""],[17,"STACK_OVERFLOW","",""],[17,"STACK_UNDERFLOW","",""],[17,"OUT_OF_MEMORY","",""],[17,"INVALID_FRAMEBUFFER_OPERATION","",""],[17,"_2D","",""],[17,"_3D","",""],[17,"_3D_COLOR","",""],[17,"_3D_COLOR_TEXTURE","",""],[17,"_4D_COLOR_TEXTURE","",""],[17,"PASS_THROUGH_TOKEN","",""],[17,"POINT_TOKEN","",""],[17,"LINE_TOKEN","",""],[17,"POLYGON_TOKEN","",""],[17,"BITMAP_TOKEN","",""],[17,"DRAW_PIXEL_TOKEN","",""],[17,"COPY_PIXEL_TOKEN","",""],[17,"LINE_RESET_TOKEN","",""],[17,"EXP","",""],[17,"EXP2","",""],[17,"CW","",""],[17,"CCW","",""],[17,"COEFF","",""],[17,"ORDER","",""],[17,"DOMAIN","",""],[17,"CURRENT_COLOR","",""],[17,"CURRENT_INDEX","",""],[17,"CURRENT_NORMAL","",""],[17,"CURRENT_TEXTURE_COORDS","",""],[17,"CURRENT_RASTER_COLOR","",""],[17,"CURRENT_RASTER_INDEX","",""],[17,"CURRENT_RASTER_TEXTURE_COORDS","",""],[17,"CURRENT_RASTER_POSITION","",""],[17,"CURRENT_RASTER_POSITION_VALID","",""],[17,"CURRENT_RASTER_DISTANCE","",""],[17,"POINT_SMOOTH","",""],[17,"POINT_SIZE","",""],[17,"POINT_SIZE_RANGE","",""],[17,"SMOOTH_POINT_SIZE_RANGE","",""],[17,"POINT_SIZE_GRANULARITY","",""],[17,"SMOOTH_POINT_SIZE_GRANULARITY","",""],[17,"LINE_SMOOTH","",""],[17,"LINE_WIDTH","",""],[17,"LINE_WIDTH_RANGE","",""],[17,"SMOOTH_LINE_WIDTH_RANGE","",""],[17,"LINE_WIDTH_GRANULARITY","",""],[17,"SMOOTH_LINE_WIDTH_GRANULARITY","",""],[17,"LINE_STIPPLE","",""],[17,"LINE_STIPPLE_PATTERN","",""],[17,"LINE_STIPPLE_REPEAT","",""],[17,"LIST_MODE","",""],[17,"MAX_LIST_NESTING","",""],[17,"LIST_BASE","",""],[17,"LIST_INDEX","",""],[17,"POLYGON_MODE","",""],[17,"POLYGON_SMOOTH","",""],[17,"POLYGON_STIPPLE","",""],[17,"EDGE_FLAG","",""],[17,"CULL_FACE","",""],[17,"CULL_FACE_MODE","",""],[17,"FRONT_FACE","",""],[17,"LIGHTING","",""],[17,"LIGHT_MODEL_LOCAL_VIEWER","",""],[17,"LIGHT_MODEL_TWO_SIDE","",""],[17,"LIGHT_MODEL_AMBIENT","",""],[17,"SHADE_MODEL","",""],[17,"COLOR_MATERIAL_FACE","",""],[17,"COLOR_MATERIAL_PARAMETER","",""],[17,"COLOR_MATERIAL","",""],[17,"FOG","",""],[17,"FOG_INDEX","",""],[17,"FOG_DENSITY","",""],[17,"FOG_START","",""],[17,"FOG_END","",""],[17,"FOG_MODE","",""],[17,"FOG_COLOR","",""],[17,"DEPTH_RANGE","",""],[17,"DEPTH_TEST","",""],[17,"DEPTH_WRITEMASK","",""],[17,"DEPTH_CLEAR_VALUE","",""],[17,"DEPTH_FUNC","",""],[17,"ACCUM_CLEAR_VALUE","",""],[17,"STENCIL_TEST","",""],[17,"STENCIL_CLEAR_VALUE","",""],[17,"STENCIL_FUNC","",""],[17,"STENCIL_VALUE_MASK","",""],[17,"STENCIL_FAIL","",""],[17,"STENCIL_PASS_DEPTH_FAIL","",""],[17,"STENCIL_PASS_DEPTH_PASS","",""],[17,"STENCIL_REF","",""],[17,"STENCIL_WRITEMASK","",""],[17,"MATRIX_MODE","",""],[17,"NORMALIZE","",""],[17,"VIEWPORT","",""],[17,"MODELVIEW_STACK_DEPTH","",""],[17,"PROJECTION_STACK_DEPTH","",""],[17,"TEXTURE_STACK_DEPTH","",""],[17,"MODELVIEW_MATRIX","",""],[17,"PROJECTION_MATRIX","",""],[17,"TEXTURE_MATRIX","",""],[17,"ATTRIB_STACK_DEPTH","",""],[17,"CLIENT_ATTRIB_STACK_DEPTH","",""],[17,"ALPHA_TEST","",""],[17,"ALPHA_TEST_FUNC","",""],[17,"ALPHA_TEST_REF","",""],[17,"DITHER","",""],[17,"BLEND_DST","",""],[17,"BLEND_SRC","",""],[17,"BLEND","",""],[17,"LOGIC_OP_MODE","",""],[17,"INDEX_LOGIC_OP","",""],[17,"LOGIC_OP","",""],[17,"COLOR_LOGIC_OP","",""],[17,"AUX_BUFFERS","",""],[17,"DRAW_BUFFER","",""],[17,"READ_BUFFER","",""],[17,"SCISSOR_BOX","",""],[17,"SCISSOR_TEST","",""],[17,"INDEX_CLEAR_VALUE","",""],[17,"INDEX_WRITEMASK","",""],[17,"COLOR_CLEAR_VALUE","",""],[17,"COLOR_WRITEMASK","",""],[17,"INDEX_MODE","",""],[17,"RGBA_MODE","",""],[17,"DOUBLEBUFFER","",""],[17,"STEREO","",""],[17,"RENDER_MODE","",""],[17,"PERSPECTIVE_CORRECTION_HINT","",""],[17,"POINT_SMOOTH_HINT","",""],[17,"LINE_SMOOTH_HINT","",""],[17,"POLYGON_SMOOTH_HINT","",""],[17,"FOG_HINT","",""],[17,"TEXTURE_GEN_S","",""],[17,"TEXTURE_GEN_T","",""],[17,"TEXTURE_GEN_R","",""],[17,"TEXTURE_GEN_Q","",""],[17,"PIXEL_MAP_I_TO_I","",""],[17,"PIXEL_MAP_S_TO_S","",""],[17,"PIXEL_MAP_I_TO_R","",""],[17,"PIXEL_MAP_I_TO_G","",""],[17,"PIXEL_MAP_I_TO_B","",""],[17,"PIXEL_MAP_I_TO_A","",""],[17,"PIXEL_MAP_R_TO_R","",""],[17,"PIXEL_MAP_G_TO_G","",""],[17,"PIXEL_MAP_B_TO_B","",""],[17,"PIXEL_MAP_A_TO_A","",""],[17,"PIXEL_MAP_I_TO_I_SIZE","",""],[17,"PIXEL_MAP_S_TO_S_SIZE","",""],[17,"PIXEL_MAP_I_TO_R_SIZE","",""],[17,"PIXEL_MAP_I_TO_G_SIZE","",""],[17,"PIXEL_MAP_I_TO_B_SIZE","",""],[17,"PIXEL_MAP_I_TO_A_SIZE","",""],[17,"PIXEL_MAP_R_TO_R_SIZE","",""],[17,"PIXEL_MAP_G_TO_G_SIZE","",""],[17,"PIXEL_MAP_B_TO_B_SIZE","",""],[17,"PIXEL_MAP_A_TO_A_SIZE","",""],[17,"UNPACK_SWAP_BYTES","",""],[17,"UNPACK_LSB_FIRST","",""],[17,"UNPACK_ROW_LENGTH","",""],[17,"UNPACK_SKIP_ROWS","",""],[17,"UNPACK_SKIP_PIXELS","",""],[17,"UNPACK_ALIGNMENT","",""],[17,"PACK_SWAP_BYTES","",""],[17,"PACK_LSB_FIRST","",""],[17,"PACK_ROW_LENGTH","",""],[17,"PACK_SKIP_ROWS","",""],[17,"PACK_SKIP_PIXELS","",""],[17,"PACK_ALIGNMENT","",""],[17,"MAP_COLOR","",""],[17,"MAP_STENCIL","",""],[17,"INDEX_SHIFT","",""],[17,"INDEX_OFFSET","",""],[17,"RED_SCALE","",""],[17,"RED_BIAS","",""],[17,"ZOOM_X","",""],[17,"ZOOM_Y","",""],[17,"GREEN_SCALE","",""],[17,"GREEN_BIAS","",""],[17,"BLUE_SCALE","",""],[17,"BLUE_BIAS","",""],[17,"ALPHA_SCALE","",""],[17,"ALPHA_BIAS","",""],[17,"DEPTH_SCALE","",""],[17,"DEPTH_BIAS","",""],[17,"MAX_EVAL_ORDER","",""],[17,"MAX_LIGHTS","",""],[17,"MAX_CLIP_PLANES","",""],[17,"MAX_CLIP_DISTANCES","",""],[17,"MAX_TEXTURE_SIZE","",""],[17,"MAX_PIXEL_MAP_TABLE","",""],[17,"MAX_ATTRIB_STACK_DEPTH","",""],[17,"MAX_MODELVIEW_STACK_DEPTH","",""],[17,"MAX_NAME_STACK_DEPTH","",""],[17,"MAX_PROJECTION_STACK_DEPTH","",""],[17,"MAX_TEXTURE_STACK_DEPTH","",""],[17,"MAX_VIEWPORT_DIMS","",""],[17,"MAX_CLIENT_ATTRIB_STACK_DEPTH","",""],[17,"SUBPIXEL_BITS","",""],[17,"INDEX_BITS","",""],[17,"RED_BITS","",""],[17,"GREEN_BITS","",""],[17,"BLUE_BITS","",""],[17,"ALPHA_BITS","",""],[17,"DEPTH_BITS","",""],[17,"STENCIL_BITS","",""],[17,"ACCUM_RED_BITS","",""],[17,"ACCUM_GREEN_BITS","",""],[17,"ACCUM_BLUE_BITS","",""],[17,"ACCUM_ALPHA_BITS","",""],[17,"NAME_STACK_DEPTH","",""],[17,"AUTO_NORMAL","",""],[17,"MAP1_COLOR_4","",""],[17,"MAP1_INDEX","",""],[17,"MAP1_NORMAL","",""],[17,"MAP1_TEXTURE_COORD_1","",""],[17,"MAP1_TEXTURE_COORD_2","",""],[17,"MAP1_TEXTURE_COORD_3","",""],[17,"MAP1_TEXTURE_COORD_4","",""],[17,"MAP1_VERTEX_3","",""],[17,"MAP1_VERTEX_4","",""],[17,"MAP2_COLOR_4","",""],[17,"MAP2_INDEX","",""],[17,"MAP2_NORMAL","",""],[17,"MAP2_TEXTURE_COORD_1","",""],[17,"MAP2_TEXTURE_COORD_2","",""],[17,"MAP2_TEXTURE_COORD_3","",""],[17,"MAP2_TEXTURE_COORD_4","",""],[17,"MAP2_VERTEX_3","",""],[17,"MAP2_VERTEX_4","",""],[17,"MAP1_GRID_DOMAIN","",""],[17,"MAP1_GRID_SEGMENTS","",""],[17,"MAP2_GRID_DOMAIN","",""],[17,"MAP2_GRID_SEGMENTS","",""],[17,"TEXTURE_1D","",""],[17,"TEXTURE_2D","",""],[17,"FEEDBACK_BUFFER_POINTER","",""],[17,"FEEDBACK_BUFFER_SIZE","",""],[17,"FEEDBACK_BUFFER_TYPE","",""],[17,"SELECTION_BUFFER_POINTER","",""],[17,"SELECTION_BUFFER_SIZE","",""],[17,"TEXTURE_WIDTH","",""],[17,"TEXTURE_HEIGHT","",""],[17,"TEXTURE_INTERNAL_FORMAT","",""],[17,"TEXTURE_COMPONENTS","",""],[17,"TEXTURE_BORDER_COLOR","",""],[17,"TEXTURE_BORDER","",""],[17,"DONT_CARE","",""],[17,"FASTEST","",""],[17,"NICEST","",""],[17,"AMBIENT","",""],[17,"DIFFUSE","",""],[17,"SPECULAR","",""],[17,"POSITION","",""],[17,"SPOT_DIRECTION","",""],[17,"SPOT_EXPONENT","",""],[17,"SPOT_CUTOFF","",""],[17,"CONSTANT_ATTENUATION","",""],[17,"LINEAR_ATTENUATION","",""],[17,"QUADRATIC_ATTENUATION","",""],[17,"COMPILE","",""],[17,"COMPILE_AND_EXECUTE","",""],[17,"BYTE","",""],[17,"UNSIGNED_BYTE","",""],[17,"SHORT","",""],[17,"UNSIGNED_SHORT","",""],[17,"INT","",""],[17,"UNSIGNED_INT","",""],[17,"FLOAT","",""],[17,"_2_BYTES","",""],[17,"_3_BYTES","",""],[17,"_4_BYTES","",""],[17,"DOUBLE","",""],[17,"HALF_FLOAT","",""],[17,"CLEAR","",""],[17,"AND","",""],[17,"AND_REVERSE","",""],[17,"COPY","",""],[17,"AND_INVERTED","",""],[17,"NOOP","",""],[17,"XOR","",""],[17,"OR","",""],[17,"NOR","",""],[17,"EQUIV","",""],[17,"INVERT","",""],[17,"OR_REVERSE","",""],[17,"COPY_INVERTED","",""],[17,"OR_INVERTED","",""],[17,"NAND","",""],[17,"SET","",""],[17,"EMISSION","",""],[17,"SHININESS","",""],[17,"AMBIENT_AND_DIFFUSE","",""],[17,"COLOR_INDEXES","",""],[17,"MODELVIEW","",""],[17,"PROJECTION","",""],[17,"TEXTURE","",""],[17,"COLOR","",""],[17,"DEPTH","",""],[17,"STENCIL","",""],[17,"COLOR_INDEX","",""],[17,"STENCIL_INDEX","",""],[17,"DEPTH_COMPONENT","",""],[17,"RED","",""],[17,"GREEN","",""],[17,"BLUE","",""],[17,"ALPHA","",""],[17,"RGB","",""],[17,"RGBA","",""],[17,"LUMINANCE","",""],[17,"LUMINANCE_ALPHA","",""],[17,"BITMAP","",""],[17,"POINT","",""],[17,"LINE","",""],[17,"FILL","",""],[17,"RENDER","",""],[17,"FEEDBACK","",""],[17,"SELECT","",""],[17,"FLAT","",""],[17,"SMOOTH","",""],[17,"KEEP","",""],[17,"REPLACE","",""],[17,"INCR","",""],[17,"DECR","",""],[17,"VENDOR","",""],[17,"RENDERER","",""],[17,"VERSION","",""],[17,"EXTENSIONS","",""],[17,"S","",""],[17,"T","",""],[17,"R","",""],[17,"Q","",""],[17,"MODULATE","",""],[17,"DECAL","",""],[17,"TEXTURE_ENV_MODE","",""],[17,"TEXTURE_ENV_COLOR","",""],[17,"TEXTURE_ENV","",""],[17,"EYE_LINEAR","",""],[17,"OBJECT_LINEAR","",""],[17,"SPHERE_MAP","",""],[17,"TEXTURE_GEN_MODE","",""],[17,"OBJECT_PLANE","",""],[17,"EYE_PLANE","",""],[17,"NEAREST","",""],[17,"LINEAR","",""],[17,"NEAREST_MIPMAP_NEAREST","",""],[17,"LINEAR_MIPMAP_NEAREST","",""],[17,"NEAREST_MIPMAP_LINEAR","",""],[17,"LINEAR_MIPMAP_LINEAR","",""],[17,"TEXTURE_MAG_FILTER","",""],[17,"TEXTURE_MIN_FILTER","",""],[17,"TEXTURE_WRAP_S","",""],[17,"TEXTURE_WRAP_T","",""],[17,"CLAMP","",""],[17,"REPEAT","",""],[17,"POLYGON_OFFSET_UNITS","",""],[17,"POLYGON_OFFSET_POINT","",""],[17,"POLYGON_OFFSET_LINE","",""],[17,"R3_G3_B2","",""],[17,"V2F","",""],[17,"V3F","",""],[17,"C4UB_V2F","",""],[17,"C4UB_V3F","",""],[17,"C3F_V3F","",""],[17,"N3F_V3F","",""],[17,"C4F_N3F_V3F","",""],[17,"T2F_V3F","",""],[17,"T4F_V4F","",""],[17,"T2F_C4UB_V3F","",""],[17,"T2F_C3F_V3F","",""],[17,"T2F_N3F_V3F","",""],[17,"T2F_C4F_N3F_V3F","",""],[17,"T4F_C4F_N3F_V4F","",""],[17,"CLIP_PLANE0","",""],[17,"CLIP_DISTANCE0","",""],[17,"CLIP_PLANE1","",""],[17,"CLIP_DISTANCE1","",""],[17,"CLIP_PLANE2","",""],[17,"CLIP_DISTANCE2","",""],[17,"CLIP_PLANE3","",""],[17,"CLIP_DISTANCE3","",""],[17,"CLIP_PLANE4","",""],[17,"CLIP_DISTANCE4","",""],[17,"CLIP_PLANE5","",""],[17,"CLIP_DISTANCE5","",""],[17,"CLIP_DISTANCE6","",""],[17,"CLIP_DISTANCE7","",""],[17,"LIGHT0","",""],[17,"LIGHT1","",""],[17,"LIGHT2","",""],[17,"LIGHT3","",""],[17,"LIGHT4","",""],[17,"LIGHT5","",""],[17,"LIGHT6","",""],[17,"LIGHT7","",""],[17,"CONSTANT_COLOR","",""],[17,"ONE_MINUS_CONSTANT_COLOR","",""],[17,"CONSTANT_ALPHA","",""],[17,"ONE_MINUS_CONSTANT_ALPHA","",""],[17,"FUNC_ADD","",""],[17,"MIN","",""],[17,"MAX","",""],[17,"BLEND_EQUATION_RGB","",""],[17,"FUNC_SUBTRACT","",""],[17,"FUNC_REVERSE_SUBTRACT","",""],[17,"UNSIGNED_BYTE_3_3_2","",""],[17,"UNSIGNED_SHORT_4_4_4_4","",""],[17,"UNSIGNED_SHORT_5_5_5_1","",""],[17,"UNSIGNED_INT_8_8_8_8","",""],[17,"UNSIGNED_INT_10_10_10_2","",""],[17,"POLYGON_OFFSET_FILL","",""],[17,"POLYGON_OFFSET_FACTOR","",""],[17,"RESCALE_NORMAL","",""],[17,"ALPHA4","",""],[17,"ALPHA8","",""],[17,"ALPHA12","",""],[17,"ALPHA16","",""],[17,"LUMINANCE4","",""],[17,"LUMINANCE8","",""],[17,"LUMINANCE12","",""],[17,"LUMINANCE16","",""],[17,"LUMINANCE4_ALPHA4","",""],[17,"LUMINANCE6_ALPHA2","",""],[17,"LUMINANCE8_ALPHA8","",""],[17,"LUMINANCE12_ALPHA4","",""],[17,"LUMINANCE12_ALPHA12","",""],[17,"LUMINANCE16_ALPHA16","",""],[17,"INTENSITY","",""],[17,"INTENSITY4","",""],[17,"INTENSITY8","",""],[17,"INTENSITY12","",""],[17,"INTENSITY16","",""],[17,"RGB4","",""],[17,"RGB5","",""],[17,"RGB8","",""],[17,"RGB10","",""],[17,"RGB12","",""],[17,"RGB16","",""],[17,"RGBA2","",""],[17,"RGBA4","",""],[17,"RGB5_A1","",""],[17,"RGBA8","",""],[17,"RGB10_A2","",""],[17,"RGBA12","",""],[17,"RGBA16","",""],[17,"TEXTURE_RED_SIZE","",""],[17,"TEXTURE_GREEN_SIZE","",""],[17,"TEXTURE_BLUE_SIZE","",""],[17,"TEXTURE_ALPHA_SIZE","",""],[17,"TEXTURE_LUMINANCE_SIZE","",""],[17,"TEXTURE_INTENSITY_SIZE","",""],[17,"PROXY_TEXTURE_1D","",""],[17,"PROXY_TEXTURE_2D","",""],[17,"TEXTURE_PRIORITY","",""],[17,"TEXTURE_RESIDENT","",""],[17,"TEXTURE_BINDING_1D","",""],[17,"TEXTURE_BINDING_2D","",""],[17,"TEXTURE_BINDING_3D","",""],[17,"PACK_SKIP_IMAGES","",""],[17,"PACK_IMAGE_HEIGHT","",""],[17,"UNPACK_SKIP_IMAGES","",""],[17,"UNPACK_IMAGE_HEIGHT","",""],[17,"TEXTURE_3D","",""],[17,"PROXY_TEXTURE_3D","",""],[17,"TEXTURE_DEPTH","",""],[17,"TEXTURE_WRAP_R","",""],[17,"MAX_3D_TEXTURE_SIZE","",""],[17,"VERTEX_ARRAY","",""],[17,"NORMAL_ARRAY","",""],[17,"COLOR_ARRAY","",""],[17,"INDEX_ARRAY","",""],[17,"TEXTURE_COORD_ARRAY","",""],[17,"EDGE_FLAG_ARRAY","",""],[17,"VERTEX_ARRAY_SIZE","",""],[17,"VERTEX_ARRAY_TYPE","",""],[17,"VERTEX_ARRAY_STRIDE","",""],[17,"NORMAL_ARRAY_TYPE","",""],[17,"NORMAL_ARRAY_STRIDE","",""],[17,"COLOR_ARRAY_SIZE","",""],[17,"COLOR_ARRAY_TYPE","",""],[17,"COLOR_ARRAY_STRIDE","",""],[17,"INDEX_ARRAY_TYPE","",""],[17,"INDEX_ARRAY_STRIDE","",""],[17,"TEXTURE_COORD_ARRAY_SIZE","",""],[17,"TEXTURE_COORD_ARRAY_TYPE","",""],[17,"TEXTURE_COORD_ARRAY_STRIDE","",""],[17,"EDGE_FLAG_ARRAY_STRIDE","",""],[17,"VERTEX_ARRAY_POINTER","",""],[17,"NORMAL_ARRAY_POINTER","",""],[17,"COLOR_ARRAY_POINTER","",""],[17,"INDEX_ARRAY_POINTER","",""],[17,"TEXTURE_COORD_ARRAY_POINTER","",""],[17,"EDGE_FLAG_ARRAY_POINTER","",""],[17,"MULTISAMPLE","",""],[17,"SAMPLE_ALPHA_TO_COVERAGE","",""],[17,"SAMPLE_ALPHA_TO_ONE","",""],[17,"SAMPLE_COVERAGE","",""],[17,"SAMPLE_BUFFERS","",""],[17,"SAMPLES","",""],[17,"SAMPLE_COVERAGE_VALUE","",""],[17,"SAMPLE_COVERAGE_INVERT","",""],[17,"BLEND_DST_RGB","",""],[17,"BLEND_SRC_RGB","",""],[17,"BLEND_DST_ALPHA","",""],[17,"BLEND_SRC_ALPHA","",""],[17,"BGR","",""],[17,"BGRA","",""],[17,"MAX_ELEMENTS_VERTICES","",""],[17,"MAX_ELEMENTS_INDICES","",""],[17,"POINT_SIZE_MIN","",""],[17,"POINT_SIZE_MAX","",""],[17,"POINT_FADE_THRESHOLD_SIZE","",""],[17,"POINT_DISTANCE_ATTENUATION","",""],[17,"CLAMP_TO_BORDER","",""],[17,"CLAMP_TO_EDGE","",""],[17,"TEXTURE_MIN_LOD","",""],[17,"TEXTURE_MAX_LOD","",""],[17,"TEXTURE_BASE_LEVEL","",""],[17,"TEXTURE_MAX_LEVEL","",""],[17,"GENERATE_MIPMAP","",""],[17,"GENERATE_MIPMAP_HINT","",""],[17,"DEPTH_COMPONENT16","",""],[17,"DEPTH_COMPONENT24","",""],[17,"DEPTH_COMPONENT32","",""],[17,"LIGHT_MODEL_COLOR_CONTROL","",""],[17,"SINGLE_COLOR","",""],[17,"SEPARATE_SPECULAR_COLOR","",""],[17,"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","",""],[17,"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","",""],[17,"FRAMEBUFFER_ATTACHMENT_RED_SIZE","",""],[17,"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","",""],[17,"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","",""],[17,"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","",""],[17,"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","",""],[17,"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","",""],[17,"FRAMEBUFFER_DEFAULT","",""],[17,"FRAMEBUFFER_UNDEFINED","",""],[17,"DEPTH_STENCIL_ATTACHMENT","",""],[17,"MAJOR_VERSION","",""],[17,"MINOR_VERSION","",""],[17,"NUM_EXTENSIONS","",""],[17,"CONTEXT_FLAGS","",""],[17,"INDEX","",""],[17,"COMPRESSED_RED","",""],[17,"COMPRESSED_RG","",""],[17,"RG","",""],[17,"RG_INTEGER","",""],[17,"R8","",""],[17,"R16","",""],[17,"RG8","",""],[17,"RG16","",""],[17,"R16F","",""],[17,"R32F","",""],[17,"RG16F","",""],[17,"RG32F","",""],[17,"R8I","",""],[17,"R8UI","",""],[17,"R16I","",""],[17,"R16UI","",""],[17,"R32I","",""],[17,"R32UI","",""],[17,"RG8I","",""],[17,"RG8UI","",""],[17,"RG16I","",""],[17,"RG16UI","",""],[17,"RG32I","",""],[17,"RG32UI","",""],[17,"UNSIGNED_BYTE_2_3_3_REV","",""],[17,"UNSIGNED_SHORT_5_6_5","",""],[17,"UNSIGNED_SHORT_5_6_5_REV","",""],[17,"UNSIGNED_SHORT_4_4_4_4_REV","",""],[17,"UNSIGNED_SHORT_1_5_5_5_REV","",""],[17,"UNSIGNED_INT_8_8_8_8_REV","",""],[17,"UNSIGNED_INT_2_10_10_10_REV","",""],[17,"MIRRORED_REPEAT","",""],[17,"FOG_COORDINATE_SOURCE","",""],[17,"FOG_COORD_SRC","",""],[17,"FOG_COORDINATE","",""],[17,"FOG_COORD","",""],[17,"FRAGMENT_DEPTH","",""],[17,"CURRENT_FOG_COORDINATE","",""],[17,"CURRENT_FOG_COORD","",""],[17,"FOG_COORDINATE_ARRAY_TYPE","",""],[17,"FOG_COORD_ARRAY_TYPE","",""],[17,"FOG_COORDINATE_ARRAY_STRIDE","",""],[17,"FOG_COORD_ARRAY_STRIDE","",""],[17,"FOG_COORDINATE_ARRAY_POINTER","",""],[17,"FOG_COORD_ARRAY_POINTER","",""],[17,"FOG_COORDINATE_ARRAY","",""],[17,"FOG_COORD_ARRAY","",""],[17,"COLOR_SUM","",""],[17,"CURRENT_SECONDARY_COLOR","",""],[17,"SECONDARY_COLOR_ARRAY_SIZE","",""],[17,"SECONDARY_COLOR_ARRAY_TYPE","",""],[17,"SECONDARY_COLOR_ARRAY_STRIDE","",""],[17,"SECONDARY_COLOR_ARRAY_POINTER","",""],[17,"SECONDARY_COLOR_ARRAY","",""],[17,"CURRENT_RASTER_SECONDARY_COLOR","",""],[17,"ALIASED_POINT_SIZE_RANGE","",""],[17,"ALIASED_LINE_WIDTH_RANGE","",""],[17,"TEXTURE0","",""],[17,"TEXTURE1","",""],[17,"TEXTURE2","",""],[17,"TEXTURE3","",""],[17,"TEXTURE4","",""],[17,"TEXTURE5","",""],[17,"TEXTURE6","",""],[17,"TEXTURE7","",""],[17,"TEXTURE8","",""],[17,"TEXTURE9","",""],[17,"TEXTURE10","",""],[17,"TEXTURE11","",""],[17,"TEXTURE12","",""],[17,"TEXTURE13","",""],[17,"TEXTURE14","",""],[17,"TEXTURE15","",""],[17,"TEXTURE16","",""],[17,"TEXTURE17","",""],[17,"TEXTURE18","",""],[17,"TEXTURE19","",""],[17,"TEXTURE20","",""],[17,"TEXTURE21","",""],[17,"TEXTURE22","",""],[17,"TEXTURE23","",""],[17,"TEXTURE24","",""],[17,"TEXTURE25","",""],[17,"TEXTURE26","",""],[17,"TEXTURE27","",""],[17,"TEXTURE28","",""],[17,"TEXTURE29","",""],[17,"TEXTURE30","",""],[17,"TEXTURE31","",""],[17,"ACTIVE_TEXTURE","",""],[17,"CLIENT_ACTIVE_TEXTURE","",""],[17,"MAX_TEXTURE_UNITS","",""],[17,"TRANSPOSE_MODELVIEW_MATRIX","",""],[17,"TRANSPOSE_PROJECTION_MATRIX","",""],[17,"TRANSPOSE_TEXTURE_MATRIX","",""],[17,"TRANSPOSE_COLOR_MATRIX","",""],[17,"SUBTRACT","",""],[17,"MAX_RENDERBUFFER_SIZE","",""],[17,"COMPRESSED_ALPHA","",""],[17,"COMPRESSED_LUMINANCE","",""],[17,"COMPRESSED_LUMINANCE_ALPHA","",""],[17,"COMPRESSED_INTENSITY","",""],[17,"COMPRESSED_RGB","",""],[17,"COMPRESSED_RGBA","",""],[17,"TEXTURE_COMPRESSION_HINT","",""],[17,"TEXTURE_RECTANGLE_ARB","",""],[17,"TEXTURE_BINDING_RECTANGLE_ARB","",""],[17,"PROXY_TEXTURE_RECTANGLE_ARB","",""],[17,"MAX_RECTANGLE_TEXTURE_SIZE_ARB","",""],[17,"DEPTH_STENCIL","",""],[17,"UNSIGNED_INT_24_8","",""],[17,"MAX_TEXTURE_LOD_BIAS","",""],[17,"TEXTURE_FILTER_CONTROL","",""],[17,"TEXTURE_LOD_BIAS","",""],[17,"INCR_WRAP","",""],[17,"DECR_WRAP","",""],[17,"NORMAL_MAP","",""],[17,"REFLECTION_MAP","",""],[17,"TEXTURE_CUBE_MAP","",""],[17,"TEXTURE_BINDING_CUBE_MAP","",""],[17,"TEXTURE_CUBE_MAP_POSITIVE_X","",""],[17,"TEXTURE_CUBE_MAP_NEGATIVE_X","",""],[17,"TEXTURE_CUBE_MAP_POSITIVE_Y","",""],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Y","",""],[17,"TEXTURE_CUBE_MAP_POSITIVE_Z","",""],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Z","",""],[17,"PROXY_TEXTURE_CUBE_MAP","",""],[17,"MAX_CUBE_MAP_TEXTURE_SIZE","",""],[17,"COMBINE","",""],[17,"COMBINE_RGB","",""],[17,"COMBINE_ALPHA","",""],[17,"RGB_SCALE","",""],[17,"ADD_SIGNED","",""],[17,"INTERPOLATE","",""],[17,"CONSTANT","",""],[17,"PRIMARY_COLOR","",""],[17,"PREVIOUS","",""],[17,"SOURCE0_RGB","",""],[17,"SRC0_RGB","",""],[17,"SOURCE1_RGB","",""],[17,"SRC1_RGB","",""],[17,"SOURCE2_RGB","",""],[17,"SRC2_RGB","",""],[17,"SOURCE0_ALPHA","",""],[17,"SRC0_ALPHA","",""],[17,"SOURCE1_ALPHA","",""],[17,"SRC1_ALPHA","",""],[17,"SOURCE2_ALPHA","",""],[17,"SRC2_ALPHA","",""],[17,"OPERAND0_RGB","",""],[17,"OPERAND1_RGB","",""],[17,"OPERAND2_RGB","",""],[17,"OPERAND0_ALPHA","",""],[17,"OPERAND1_ALPHA","",""],[17,"OPERAND2_ALPHA","",""],[17,"VERTEX_ARRAY_BINDING","",""],[17,"VERTEX_ATTRIB_ARRAY_ENABLED","",""],[17,"VERTEX_ATTRIB_ARRAY_SIZE","",""],[17,"VERTEX_ATTRIB_ARRAY_STRIDE","",""],[17,"VERTEX_ATTRIB_ARRAY_TYPE","",""],[17,"CURRENT_VERTEX_ATTRIB","",""],[17,"VERTEX_PROGRAM_POINT_SIZE","",""],[17,"VERTEX_PROGRAM_TWO_SIDE","",""],[17,"VERTEX_ATTRIB_ARRAY_POINTER","",""],[17,"TEXTURE_COMPRESSED_IMAGE_SIZE","",""],[17,"TEXTURE_COMPRESSED","",""],[17,"NUM_COMPRESSED_TEXTURE_FORMATS","",""],[17,"COMPRESSED_TEXTURE_FORMATS","",""],[17,"DOT3_RGB","",""],[17,"DOT3_RGBA","",""],[17,"BUFFER_SIZE","",""],[17,"BUFFER_USAGE","",""],[17,"STENCIL_BACK_FUNC","",""],[17,"STENCIL_BACK_FAIL","",""],[17,"STENCIL_BACK_PASS_DEPTH_FAIL","",""],[17,"STENCIL_BACK_PASS_DEPTH_PASS","",""],[17,"RGBA32F","",""],[17,"RGB32F","",""],[17,"RGBA16F","",""],[17,"RGB16F","",""],[17,"MAX_DRAW_BUFFERS","",""],[17,"DRAW_BUFFER0","",""],[17,"DRAW_BUFFER1","",""],[17,"DRAW_BUFFER2","",""],[17,"DRAW_BUFFER3","",""],[17,"DRAW_BUFFER4","",""],[17,"DRAW_BUFFER5","",""],[17,"DRAW_BUFFER6","",""],[17,"DRAW_BUFFER7","",""],[17,"DRAW_BUFFER8","",""],[17,"DRAW_BUFFER9","",""],[17,"DRAW_BUFFER10","",""],[17,"DRAW_BUFFER11","",""],[17,"DRAW_BUFFER12","",""],[17,"DRAW_BUFFER13","",""],[17,"DRAW_BUFFER14","",""],[17,"DRAW_BUFFER15","",""],[17,"BLEND_EQUATION_ALPHA","",""],[17,"TEXTURE_DEPTH_SIZE","",""],[17,"DEPTH_TEXTURE_MODE","",""],[17,"TEXTURE_COMPARE_MODE","",""],[17,"TEXTURE_COMPARE_FUNC","",""],[17,"COMPARE_R_TO_TEXTURE","",""],[17,"COMPARE_REF_TO_TEXTURE","",""],[17,"POINT_SPRITE","",""],[17,"COORD_REPLACE","",""],[17,"QUERY_COUNTER_BITS","",""],[17,"CURRENT_QUERY","",""],[17,"QUERY_RESULT","",""],[17,"QUERY_RESULT_AVAILABLE","",""],[17,"MAX_VERTEX_ATTRIBS","",""],[17,"VERTEX_ATTRIB_ARRAY_NORMALIZED","",""],[17,"MAX_TEXTURE_COORDS","",""],[17,"MAX_TEXTURE_IMAGE_UNITS","",""],[17,"ARRAY_BUFFER","",""],[17,"ELEMENT_ARRAY_BUFFER","",""],[17,"ARRAY_BUFFER_BINDING","",""],[17,"ELEMENT_ARRAY_BUFFER_BINDING","",""],[17,"VERTEX_ARRAY_BUFFER_BINDING","",""],[17,"NORMAL_ARRAY_BUFFER_BINDING","",""],[17,"COLOR_ARRAY_BUFFER_BINDING","",""],[17,"INDEX_ARRAY_BUFFER_BINDING","",""],[17,"TEXTURE_COORD_ARRAY_BUFFER_BINDING","",""],[17,"EDGE_FLAG_ARRAY_BUFFER_BINDING","",""],[17,"SECONDARY_COLOR_ARRAY_BUFFER_BINDING","",""],[17,"FOG_COORDINATE_ARRAY_BUFFER_BINDING","",""],[17,"FOG_COORD_ARRAY_BUFFER_BINDING","",""],[17,"WEIGHT_ARRAY_BUFFER_BINDING","",""],[17,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","",""],[17,"READ_ONLY","",""],[17,"WRITE_ONLY","",""],[17,"READ_WRITE","",""],[17,"BUFFER_ACCESS","",""],[17,"BUFFER_MAPPED","",""],[17,"BUFFER_MAP_POINTER","",""],[17,"STREAM_DRAW","",""],[17,"STREAM_READ","",""],[17,"STREAM_COPY","",""],[17,"STATIC_DRAW","",""],[17,"STATIC_READ","",""],[17,"STATIC_COPY","",""],[17,"DYNAMIC_DRAW","",""],[17,"DYNAMIC_READ","",""],[17,"DYNAMIC_COPY","",""],[17,"PIXEL_PACK_BUFFER","",""],[17,"PIXEL_UNPACK_BUFFER","",""],[17,"PIXEL_PACK_BUFFER_BINDING","",""],[17,"PIXEL_UNPACK_BUFFER_BINDING","",""],[17,"DEPTH24_STENCIL8","",""],[17,"TEXTURE_STENCIL_SIZE","",""],[17,"VERTEX_ATTRIB_ARRAY_INTEGER","",""],[17,"MAX_ARRAY_TEXTURE_LAYERS","",""],[17,"MIN_PROGRAM_TEXEL_OFFSET","",""],[17,"MAX_PROGRAM_TEXEL_OFFSET","",""],[17,"SAMPLES_PASSED","",""],[17,"CLAMP_VERTEX_COLOR","",""],[17,"CLAMP_FRAGMENT_COLOR","",""],[17,"CLAMP_READ_COLOR","",""],[17,"FIXED_ONLY","",""],[17,"FRAGMENT_SHADER","",""],[17,"VERTEX_SHADER","",""],[17,"MAX_FRAGMENT_UNIFORM_COMPONENTS","",""],[17,"MAX_VERTEX_UNIFORM_COMPONENTS","",""],[17,"MAX_VARYING_FLOATS","",""],[17,"MAX_VARYING_COMPONENTS","",""],[17,"MAX_VERTEX_TEXTURE_IMAGE_UNITS","",""],[17,"MAX_COMBINED_TEXTURE_IMAGE_UNITS","",""],[17,"SHADER_TYPE","",""],[17,"FLOAT_VEC2","",""],[17,"FLOAT_VEC3","",""],[17,"FLOAT_VEC4","",""],[17,"INT_VEC2","",""],[17,"INT_VEC3","",""],[17,"INT_VEC4","",""],[17,"BOOL","",""],[17,"BOOL_VEC2","",""],[17,"BOOL_VEC3","",""],[17,"BOOL_VEC4","",""],[17,"FLOAT_MAT2","",""],[17,"FLOAT_MAT3","",""],[17,"FLOAT_MAT4","",""],[17,"SAMPLER_1D","",""],[17,"SAMPLER_2D","",""],[17,"SAMPLER_3D","",""],[17,"SAMPLER_CUBE","",""],[17,"SAMPLER_1D_SHADOW","",""],[17,"SAMPLER_2D_SHADOW","",""],[17,"FLOAT_MAT2x3","",""],[17,"FLOAT_MAT2x4","",""],[17,"FLOAT_MAT3x2","",""],[17,"FLOAT_MAT3x4","",""],[17,"FLOAT_MAT4x2","",""],[17,"FLOAT_MAT4x3","",""],[17,"DELETE_STATUS","",""],[17,"COMPILE_STATUS","",""],[17,"LINK_STATUS","",""],[17,"VALIDATE_STATUS","",""],[17,"INFO_LOG_LENGTH","",""],[17,"ATTACHED_SHADERS","",""],[17,"ACTIVE_UNIFORMS","",""],[17,"ACTIVE_UNIFORM_MAX_LENGTH","",""],[17,"SHADER_SOURCE_LENGTH","",""],[17,"ACTIVE_ATTRIBUTES","",""],[17,"ACTIVE_ATTRIBUTE_MAX_LENGTH","",""],[17,"FRAGMENT_SHADER_DERIVATIVE_HINT","",""],[17,"SHADING_LANGUAGE_VERSION","",""],[17,"CURRENT_PROGRAM","",""],[17,"TEXTURE_RED_TYPE","",""],[17,"TEXTURE_GREEN_TYPE","",""],[17,"TEXTURE_BLUE_TYPE","",""],[17,"TEXTURE_ALPHA_TYPE","",""],[17,"TEXTURE_LUMINANCE_TYPE","",""],[17,"TEXTURE_INTENSITY_TYPE","",""],[17,"TEXTURE_DEPTH_TYPE","",""],[17,"UNSIGNED_NORMALIZED","",""],[17,"TEXTURE_1D_ARRAY","",""],[17,"PROXY_TEXTURE_1D_ARRAY","",""],[17,"TEXTURE_2D_ARRAY","",""],[17,"PROXY_TEXTURE_2D_ARRAY","",""],[17,"TEXTURE_BINDING_1D_ARRAY","",""],[17,"TEXTURE_BINDING_2D_ARRAY","",""],[17,"R11F_G11F_B10F","",""],[17,"UNSIGNED_INT_10F_11F_11F_REV","",""],[17,"RGB9_E5","",""],[17,"UNSIGNED_INT_5_9_9_9_REV","",""],[17,"TEXTURE_SHARED_SIZE","",""],[17,"SRGB","",""],[17,"SRGB8","",""],[17,"SRGB_ALPHA","",""],[17,"SRGB8_ALPHA8","",""],[17,"SLUMINANCE_ALPHA","",""],[17,"SLUMINANCE8_ALPHA8","",""],[17,"SLUMINANCE","",""],[17,"SLUMINANCE8","",""],[17,"COMPRESSED_SRGB","",""],[17,"COMPRESSED_SRGB_ALPHA","",""],[17,"COMPRESSED_SLUMINANCE","",""],[17,"COMPRESSED_SLUMINANCE_ALPHA","",""],[17,"TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH","",""],[17,"TRANSFORM_FEEDBACK_BUFFER_MODE","",""],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","",""],[17,"TRANSFORM_FEEDBACK_VARYINGS","",""],[17,"TRANSFORM_FEEDBACK_BUFFER_START","",""],[17,"TRANSFORM_FEEDBACK_BUFFER_SIZE","",""],[17,"PRIMITIVES_GENERATED","",""],[17,"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","",""],[17,"RASTERIZER_DISCARD","",""],[17,"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","",""],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","",""],[17,"INTERLEAVED_ATTRIBS","",""],[17,"SEPARATE_ATTRIBS","",""],[17,"TRANSFORM_FEEDBACK_BUFFER","",""],[17,"TRANSFORM_FEEDBACK_BUFFER_BINDING","",""],[17,"POINT_SPRITE_COORD_ORIGIN","",""],[17,"LOWER_LEFT","",""],[17,"UPPER_LEFT","",""],[17,"STENCIL_BACK_REF","",""],[17,"STENCIL_BACK_VALUE_MASK","",""],[17,"STENCIL_BACK_WRITEMASK","",""],[17,"DRAW_FRAMEBUFFER_BINDING","",""],[17,"FRAMEBUFFER_BINDING","",""],[17,"RENDERBUFFER_BINDING","",""],[17,"READ_FRAMEBUFFER","",""],[17,"DRAW_FRAMEBUFFER","",""],[17,"READ_FRAMEBUFFER_BINDING","",""],[17,"RENDERBUFFER_SAMPLES","",""],[17,"DEPTH_COMPONENT32F","",""],[17,"DEPTH32F_STENCIL8","",""],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","",""],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","",""],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","",""],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","",""],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","",""],[17,"FRAMEBUFFER_COMPLETE","",""],[17,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT","",""],[17,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","",""],[17,"FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER","",""],[17,"FRAMEBUFFER_INCOMPLETE_READ_BUFFER","",""],[17,"FRAMEBUFFER_UNSUPPORTED","",""],[17,"MAX_COLOR_ATTACHMENTS","",""],[17,"COLOR_ATTACHMENT0","",""],[17,"COLOR_ATTACHMENT1","",""],[17,"COLOR_ATTACHMENT2","",""],[17,"COLOR_ATTACHMENT3","",""],[17,"COLOR_ATTACHMENT4","",""],[17,"COLOR_ATTACHMENT5","",""],[17,"COLOR_ATTACHMENT6","",""],[17,"COLOR_ATTACHMENT7","",""],[17,"COLOR_ATTACHMENT8","",""],[17,"COLOR_ATTACHMENT9","",""],[17,"COLOR_ATTACHMENT10","",""],[17,"COLOR_ATTACHMENT11","",""],[17,"COLOR_ATTACHMENT12","",""],[17,"COLOR_ATTACHMENT13","",""],[17,"COLOR_ATTACHMENT14","",""],[17,"COLOR_ATTACHMENT15","",""],[17,"DEPTH_ATTACHMENT","",""],[17,"STENCIL_ATTACHMENT","",""],[17,"FRAMEBUFFER","",""],[17,"RENDERBUFFER","",""],[17,"RENDERBUFFER_WIDTH","",""],[17,"RENDERBUFFER_HEIGHT","",""],[17,"RENDERBUFFER_INTERNAL_FORMAT","",""],[17,"STENCIL_INDEX1","",""],[17,"STENCIL_INDEX4","",""],[17,"STENCIL_INDEX8","",""],[17,"STENCIL_INDEX16","",""],[17,"RENDERBUFFER_RED_SIZE","",""],[17,"RENDERBUFFER_GREEN_SIZE","",""],[17,"RENDERBUFFER_BLUE_SIZE","",""],[17,"RENDERBUFFER_ALPHA_SIZE","",""],[17,"RENDERBUFFER_DEPTH_SIZE","",""],[17,"RENDERBUFFER_STENCIL_SIZE","",""],[17,"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","",""],[17,"MAX_SAMPLES","",""],[17,"RGBA32UI","",""],[17,"RGB32UI","",""],[17,"RGBA16UI","",""],[17,"RGB16UI","",""],[17,"RGBA8UI","",""],[17,"RGB8UI","",""],[17,"RGBA32I","",""],[17,"RGB32I","",""],[17,"RGBA16I","",""],[17,"RGB16I","",""],[17,"RGBA8I","",""],[17,"RGB8I","",""],[17,"RED_INTEGER","",""],[17,"GREEN_INTEGER","",""],[17,"BLUE_INTEGER","",""],[17,"ALPHA_INTEGER","",""],[17,"RGB_INTEGER","",""],[17,"RGBA_INTEGER","",""],[17,"BGR_INTEGER","",""],[17,"BGRA_INTEGER","",""],[17,"FLOAT_32_UNSIGNED_INT_24_8_REV","",""],[17,"FRAMEBUFFER_SRGB","",""],[17,"COMPRESSED_RED_RGTC1","",""],[17,"COMPRESSED_SIGNED_RED_RGTC1","",""],[17,"COMPRESSED_RG_RGTC2","",""],[17,"COMPRESSED_SIGNED_RG_RGTC2","",""],[17,"SAMPLER_1D_ARRAY","",""],[17,"SAMPLER_2D_ARRAY","",""],[17,"SAMPLER_1D_ARRAY_SHADOW","",""],[17,"SAMPLER_2D_ARRAY_SHADOW","",""],[17,"SAMPLER_CUBE_SHADOW","",""],[17,"UNSIGNED_INT_VEC2","",""],[17,"UNSIGNED_INT_VEC3","",""],[17,"UNSIGNED_INT_VEC4","",""],[17,"INT_SAMPLER_1D","",""],[17,"INT_SAMPLER_2D","",""],[17,"INT_SAMPLER_3D","",""],[17,"INT_SAMPLER_CUBE","",""],[17,"INT_SAMPLER_1D_ARRAY","",""],[17,"INT_SAMPLER_2D_ARRAY","",""],[17,"UNSIGNED_INT_SAMPLER_1D","",""],[17,"UNSIGNED_INT_SAMPLER_2D","",""],[17,"UNSIGNED_INT_SAMPLER_3D","",""],[17,"UNSIGNED_INT_SAMPLER_CUBE","",""],[17,"UNSIGNED_INT_SAMPLER_1D_ARRAY","",""],[17,"UNSIGNED_INT_SAMPLER_2D_ARRAY","",""],[17,"QUERY_WAIT","",""],[17,"QUERY_NO_WAIT","",""],[17,"QUERY_BY_REGION_WAIT","",""],[17,"QUERY_BY_REGION_NO_WAIT","",""],[17,"BUFFER_ACCESS_FLAGS","",""],[17,"BUFFER_MAP_LENGTH","",""],[17,"BUFFER_MAP_OFFSET","",""],[11,"new","","Creates a `FnPtr` from a load attempt.",0],[11,"new","","Creates a `FnPtr` from a load attempt.",0]],"paths":[[3,"FnPtr"]]};
searchIndex['glx'] = {"items":[[0,"","glx",""],[5,"BindTexImageEXT","",""],[5,"ChooseFBConfig","",""],[5,"ChooseVisual","",""],[5,"CopyContext","",""],[5,"CreateContext","",""],[5,"CreateGLXPixmap","",""],[5,"CreateNewContext","",""],[5,"CreatePbuffer","",""],[5,"CreatePixmap","",""],[5,"CreateWindow","",""],[5,"DestroyContext","",""],[5,"DestroyGLXPixmap","",""],[5,"DestroyPbuffer","",""],[5,"DestroyPixmap","",""],[5,"DestroyWindow","",""],[5,"GetClientString","",""],[5,"GetConfig","",""],[5,"GetCurrentContext","",""],[5,"GetCurrentDisplay","",""],[5,"GetCurrentDrawable","",""],[5,"GetCurrentReadDrawable","",""],[5,"GetFBConfigAttrib","",""],[5,"GetFBConfigs","",""],[5,"GetProcAddress","",""],[5,"GetSelectedEvent","",""],[5,"GetVisualFromFBConfig","",""],[5,"IsDirect","",""],[5,"MakeContextCurrent","",""],[5,"MakeCurrent","",""],[5,"QueryContext","",""],[5,"QueryDrawable","",""],[5,"QueryExtension","",""],[5,"QueryExtensionsString","",""],[5,"QueryServerString","",""],[5,"QueryVersion","",""],[5,"ReleaseTexImageEXT","",""],[5,"SelectEvent","",""],[5,"SwapBuffers","",""],[5,"UseXFont","",""],[5,"WaitGL","",""],[5,"WaitX","",""],[0,"types","",""],[3,"__GLsync","glx::types",""],[3,"_cl_context","",""],[3,"_cl_event","",""],[3,"Display","",""],[3,"XVisualInfo","",""],[12,"visual","","",0],[12,"visualid","","",0],[12,"screen","","",0],[12,"depth","","",0],[12,"class","","",0],[12,"red_mask","","",0],[12,"green_mask","","",0],[12,"blue_mask","","",0],[12,"colormap_size","","",0],[12,"bits_per_rgb","","",0],[3,"GLXPbufferClobberEvent","",""],[12,"event_type","","",1],[12,"draw_type","","",1],[12,"serial","","",1],[12,"send_event","","",1],[12,"display","","",1],[12,"drawable","","",1],[12,"buffer_mask","","",1],[12,"aux_buffer","","",1],[12,"x","","",1],[12,"y","","",1],[12,"width","","",1],[12,"height","","",1],[12,"count","","",1],[3,"GLXBufferSwapComplete","",""],[12,"type_","","",2],[12,"serial","","",2],[12,"send_event","","",2],[12,"display","","",2],[12,"drawable","","",2],[12,"event_type","","",2],[12,"ust","","",2],[12,"msc","","",2],[12,"sbc","","",2],[3,"GLXBufferClobberEventSGIX","",""],[12,"type_","","",3],[12,"serial","","",3],[12,"send_event","","",3],[12,"display","","",3],[12,"drawable","","",3],[12,"event_type","","",3],[12,"draw_type","","",3],[12,"mask","","",3],[12,"x","","",3],[12,"y","","",3],[12,"width","","",3],[12,"height","","",3],[12,"count","","",3],[3,"GLXHyperpipeNetworkSGIX","",""],[12,"pipeName","","",4],[12,"networkId","","",4],[3,"GLXHyperpipeConfigSGIX","",""],[12,"pipeName","","",5],[12,"channel","","",5],[12,"participationType","","",5],[12,"timeSlice","","",5],[3,"GLXPipeRect","",""],[12,"pipeName","","",6],[12,"srcXOrigin","","",6],[12,"srcYOrigin","","",6],[12,"srcWidth","","",6],[12,"srcHeight","","",6],[12,"destXOrigin","","",6],[12,"destYOrigin","","",6],[12,"destWidth","","",6],[12,"destHeight","","",6],[3,"GLXPipeRectLimits","",""],[12,"pipeName","","",7],[12,"XOrigin","","",7],[12,"YOrigin","","",7],[12,"maxHeight","","",7],[12,"maxWidth","","",7],[6,"GLenum","",""],[6,"GLboolean","",""],[6,"GLbitfield","",""],[6,"GLvoid","",""],[6,"GLbyte","",""],[6,"GLshort","",""],[6,"GLint","",""],[6,"GLclampx","",""],[6,"GLubyte","",""],[6,"GLushort","",""],[6,"GLuint","",""],[6,"GLsizei","",""],[6,"GLfloat","",""],[6,"GLclampf","",""],[6,"GLdouble","",""],[6,"GLclampd","",""],[6,"GLeglImageOES","",""],[6,"GLchar","",""],[6,"GLcharARB","",""],[6,"GLhandleARB","",""],[6,"GLhalfARB","",""],[6,"GLhalf","",""],[6,"GLfixed","",""],[6,"GLintptr","",""],[6,"GLsizeiptr","",""],[6,"GLint64","",""],[6,"GLuint64","",""],[6,"GLintptrARB","",""],[6,"GLsizeiptrARB","",""],[6,"GLint64EXT","",""],[6,"GLuint64EXT","",""],[6,"GLsync","",""],[6,"GLDEBUGPROC","",""],[6,"GLDEBUGPROCARB","",""],[6,"GLDEBUGPROCKHR","",""],[6,"GLDEBUGPROCAMD","",""],[6,"GLhalfNV","",""],[6,"GLvdpauSurfaceNV","",""],[6,"XID","",""],[6,"Bool","",""],[6,"Font","",""],[6,"Pixmap","",""],[6,"Visual","",""],[6,"VisualID","",""],[6,"Window","",""],[6,"GLXFBConfigID","",""],[6,"GLXFBConfig","",""],[6,"GLXContextID","",""],[6,"GLXContext","",""],[6,"GLXPixmap","",""],[6,"GLXDrawable","",""],[6,"GLXWindow","",""],[6,"GLXPbuffer","",""],[6,"__GLXextFuncPtr","",""],[6,"GLXVideoCaptureDeviceNV","",""],[6,"GLXVideoDeviceNV","",""],[6,"GLXVideoSourceSGIX","",""],[6,"GLXFBConfigIDSGIX","",""],[6,"GLXFBConfigSGIX","",""],[6,"GLXPbufferSGIX","",""],[17,"EXTENSION_NAME","glx",""],[17,"VENDOR","",""],[17,"VERSION","",""],[17,"EXTENSIONS","",""],[17,"PbufferClobber","",""],[17,"BufferSwapComplete","",""],[17,"BAD_SCREEN","",""],[17,"BAD_ATTRIBUTE","",""],[17,"NO_EXTENSION","",""],[17,"BAD_VISUAL","",""],[17,"BAD_CONTEXT","",""],[17,"BAD_VALUE","",""],[17,"BAD_ENUM","",""],[17,"WINDOW_BIT","",""],[17,"PIXMAP_BIT","",""],[17,"PBUFFER_BIT","",""],[17,"RGBA_BIT","",""],[17,"COLOR_INDEX_BIT","",""],[17,"PBUFFER_CLOBBER_MASK","",""],[17,"FRONT_LEFT_BUFFER_BIT","",""],[17,"FRONT_RIGHT_BUFFER_BIT","",""],[17,"BACK_LEFT_BUFFER_BIT","",""],[17,"BACK_RIGHT_BUFFER_BIT","",""],[17,"AUX_BUFFERS_BIT","",""],[17,"DEPTH_BUFFER_BIT","",""],[17,"STENCIL_BUFFER_BIT","",""],[17,"ACCUM_BUFFER_BIT","",""],[17,"TEXTURE_1D_BIT_EXT","",""],[17,"TEXTURE_2D_BIT_EXT","",""],[17,"TEXTURE_RECTANGLE_BIT_EXT","",""],[17,"DONT_CARE","",""],[17,"USE_GL","",""],[17,"BUFFER_SIZE","",""],[17,"LEVEL","",""],[17,"RGBA","",""],[17,"DOUBLEBUFFER","",""],[17,"STEREO","",""],[17,"AUX_BUFFERS","",""],[17,"RED_SIZE","",""],[17,"GREEN_SIZE","",""],[17,"BLUE_SIZE","",""],[17,"ALPHA_SIZE","",""],[17,"DEPTH_SIZE","",""],[17,"STENCIL_SIZE","",""],[17,"ACCUM_RED_SIZE","",""],[17,"ACCUM_GREEN_SIZE","",""],[17,"ACCUM_BLUE_SIZE","",""],[17,"ACCUM_ALPHA_SIZE","",""],[17,"CONFIG_CAVEAT","",""],[17,"X_VISUAL_TYPE","",""],[17,"TRANSPARENT_TYPE","",""],[17,"TRANSPARENT_INDEX_VALUE","",""],[17,"TRANSPARENT_RED_VALUE","",""],[17,"TRANSPARENT_GREEN_VALUE","",""],[17,"TRANSPARENT_BLUE_VALUE","",""],[17,"TRANSPARENT_ALPHA_VALUE","",""],[17,"BIND_TO_TEXTURE_RGB_EXT","",""],[17,"BIND_TO_TEXTURE_RGBA_EXT","",""],[17,"BIND_TO_MIPMAP_TEXTURE_EXT","",""],[17,"BIND_TO_TEXTURE_TARGETS_EXT","",""],[17,"Y_INVERTED_EXT","",""],[17,"TEXTURE_FORMAT_EXT","",""],[17,"TEXTURE_TARGET_EXT","",""],[17,"MIPMAP_TEXTURE_EXT","",""],[17,"TEXTURE_FORMAT_NONE_EXT","",""],[17,"TEXTURE_FORMAT_RGB_EXT","",""],[17,"TEXTURE_FORMAT_RGBA_EXT","",""],[17,"TEXTURE_1D_EXT","",""],[17,"TEXTURE_2D_EXT","",""],[17,"TEXTURE_RECTANGLE_EXT","",""],[17,"FRONT_LEFT_EXT","",""],[17,"FRONT_RIGHT_EXT","",""],[17,"BACK_LEFT_EXT","",""],[17,"BACK_RIGHT_EXT","",""],[17,"FRONT_EXT","",""],[17,"BACK_EXT","",""],[17,"AUX0_EXT","",""],[17,"AUX1_EXT","",""],[17,"AUX2_EXT","",""],[17,"AUX3_EXT","",""],[17,"AUX4_EXT","",""],[17,"AUX5_EXT","",""],[17,"AUX6_EXT","",""],[17,"AUX7_EXT","",""],[17,"AUX8_EXT","",""],[17,"AUX9_EXT","",""],[17,"NONE","",""],[17,"SLOW_CONFIG","",""],[17,"TRUE_COLOR","",""],[17,"DIRECT_COLOR","",""],[17,"PSEUDO_COLOR","",""],[17,"STATIC_COLOR","",""],[17,"GRAY_SCALE","",""],[17,"STATIC_GRAY","",""],[17,"TRANSPARENT_RGB","",""],[17,"TRANSPARENT_INDEX","",""],[17,"VISUAL_ID","",""],[17,"SCREEN","",""],[17,"NON_CONFORMANT_CONFIG","",""],[17,"DRAWABLE_TYPE","",""],[17,"RENDER_TYPE","",""],[17,"X_RENDERABLE","",""],[17,"FBCONFIG_ID","",""],[17,"RGBA_TYPE","",""],[17,"COLOR_INDEX_TYPE","",""],[17,"MAX_PBUFFER_WIDTH","",""],[17,"MAX_PBUFFER_HEIGHT","",""],[17,"MAX_PBUFFER_PIXELS","",""],[17,"PRESERVED_CONTENTS","",""],[17,"LARGEST_PBUFFER","",""],[17,"WIDTH","",""],[17,"HEIGHT","",""],[17,"EVENT_MASK","",""],[17,"DAMAGED","",""],[17,"SAVED","",""],[17,"WINDOW","",""],[17,"PBUFFER","",""],[17,"PBUFFER_HEIGHT","",""],[17,"PBUFFER_WIDTH","",""],[17,"SAMPLE_BUFFERS","",""],[17,"SAMPLES","",""]],"paths":[[3,"XVisualInfo"],[3,"GLXPbufferClobberEvent"],[3,"GLXBufferSwapComplete"],[3,"GLXBufferClobberEventSGIX"],[3,"GLXHyperpipeNetworkSGIX"],[3,"GLXHyperpipeConfigSGIX"],[3,"GLXPipeRect"],[3,"GLXPipeRectLimits"]]};
searchIndex['mozjs_sys'] = {"items":[],"paths":[]};
searchIndex['cookie'] = {"items":[[0,"","cookie",""],[3,"CookieJar","","A jar of cookies for managing a session"],[3,"Cookie","",""],[12,"name","","",0],[12,"value","","",0],[12,"expires","","",0],[12,"max_age","","",0],[12,"domain","","",0],[12,"path","","",0],[12,"secure","","",0],[12,"httponly","","",0],[12,"custom","","",0],[3,"AttrVal","",""],[11,"new","","Creates a new empty cookie jar with the given signing key.",1],[11,"add_original","","Adds an original cookie from a request.",1],[11,"add","","Adds a new cookie to this cookie jar.",1],[11,"remove","","Removes a cookie from this cookie jar.",1],[11,"find","","Finds a cookie inside of this cookie jar.",1],[11,"signed","","Creates a child signed cookie jar.",1],[11,"encrypted","","Creates a child encrypted cookie jar.",1],[11,"permanent","","Creates a child jar for permanent cookie storage.",1],[11,"delta","","Calculates the changes that have occurred to this cookie jar over time,\nreturning a vector of `Set-Cookie` headers.",1],[11,"iter","","Return an iterator over the cookies in this jar.",1],[11,"fmt","","",0],[11,"clone","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"new","","",0],[11,"parse","","",0],[11,"pair","","",0],[11,"fmt","","",2],[11,"fmt","","",0],[6,"Err","",""],[11,"from_str","","",0]],"paths":[[3,"Cookie"],[3,"CookieJar"],[3,"AttrVal"]]};
searchIndex['string_cache'] = {"items":[[0,"","string_cache",""],[0,"atom","",""],[3,"Atom","string_cache::atom",""],[12,"data","","This field is public so that the `atom!()` macro can use it.\nYou should not otherwise access this field.",0],[0,"repr","","Details of the atom representation that need to be shared between\nthe macros crate and the run-time library, in order to guarantee\nconsistency."],[4,"UnpackedAtom","string_cache::atom::repr",""],[13,"Dynamic","","Pointer to a dynamic table entry.  Must be 16-byte aligned!",1],[13,"Inline","","Length + bytes of string.",1],[13,"Static","","Index in static interning table.",1],[5,"pack_static","",""],[5,"from_packed_dynamic","","Used for a fast path in Clone and Drop."],[5,"inline_orig_bytes","","For as_slice on inline atoms, we need a pointer into the original\nstring contents."],[17,"DYNAMIC_TAG","",""],[17,"INLINE_TAG","",""],[17,"STATIC_TAG","",""],[17,"MAX_INLINE_LEN","",""],[11,"pack","","",1],[11,"from_packed","","",1],[11,"eq","string_cache::atom","",0],[11,"ne","","",0],[11,"hash","","",0],[11,"from_slice","","",0],[11,"as_slice","","",0],[11,"clone","","",0],[11,"drop","","",0],[6,"Target","",""],[11,"deref","","",0],[11,"fmt","","",0],[11,"partial_cmp","","",0],[11,"cmp","","",0],[0,"namespace","string_cache",""],[3,"Namespace","string_cache::namespace","An atom that is meant to represent a namespace in the HTML / XML sense.\nWhether a given string represents a namespace is contextual, so this is\na transparent wrapper that will not catch all mistakes."],[3,"QualName","","A name with a namespace."],[12,"ns","","",2],[12,"local","","",2],[11,"clone","","",3],[11,"fmt","","",3],[11,"hash","","",3],[11,"cmp","","",3],[11,"partial_cmp","","",3],[11,"lt","","",3],[11,"le","","",3],[11,"gt","","",3],[11,"ge","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",2],[11,"fmt","","",2],[11,"hash","","",2],[11,"cmp","","",2],[11,"partial_cmp","","",2],[11,"lt","","",2],[11,"le","","",2],[11,"gt","","",2],[11,"ge","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"new","","",2],[14,"qualname!","string_cache",""]],"paths":[[3,"Atom"],[4,"UnpackedAtom"],[3,"QualName"],[3,"Namespace"]]};
searchIndex['openssl'] = {"items":[[0,"","openssl",""],[0,"asn1","",""],[3,"Asn1Time","openssl::asn1",""],[11,"new","","Wraps existing ASN1_TIME and takes ownership",0],[11,"days_from_now","","Creates a new time on specified interval in days from now",0],[11,"get_handle","","Returns raw handle",0],[11,"drop","","",0],[0,"bn","openssl",""],[3,"BigNum","openssl::bn",""],[4,"RNGProperty","",""],[13,"MsbMaybeZero","","",1],[13,"MsbOne","","",1],[13,"TwoMsbOne","","",1],[0,"unchecked","",""],[6,"Output","openssl::bn::unchecked",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"clone","openssl::bn","",2],[6,"Output","openssl::bn::unchecked",""],[11,"neg","openssl::bn","",2],[11,"new","","",2],[11,"new_from","","",2],[11,"from_dec_str","","",2],[11,"from_hex_str","","",2],[11,"new_from_slice","","",2],[11,"checked_sqr","","",2],[11,"checked_nnmod","","",2],[11,"checked_mod_add","","",2],[11,"checked_mod_sub","","",2],[11,"checked_mod_mul","","",2],[11,"checked_mod_sqr","","",2],[11,"checked_exp","","",2],[11,"checked_mod_exp","","",2],[11,"checked_mod_inv","","",2],[11,"add_word","","",2],[11,"sub_word","","",2],[11,"mul_word","","",2],[11,"div_word","","",2],[11,"mod_word","","",2],[11,"checked_gcd","","",2],[11,"checked_generate_prime","","",2],[11,"is_prime","","",2],[11,"is_prime_fast","","",2],[11,"checked_new_random","","",2],[11,"checked_new_pseudo_random","","",2],[11,"checked_rand_in_range","","",2],[11,"checked_pseudo_rand_in_range","","",2],[11,"set_bit","","",2],[11,"clear_bit","","",2],[11,"is_bit_set","","",2],[11,"mask_bits","","",2],[11,"checked_shl1","","",2],[11,"checked_shr1","","",2],[11,"checked_add","","",2],[11,"checked_sub","","",2],[11,"checked_mul","","",2],[11,"checked_div","","",2],[11,"checked_mod","","",2],[11,"checked_shl","","",2],[11,"checked_shr","","",2],[11,"negate","","",2],[11,"abs_cmp","","",2],[11,"is_negative","","",2],[11,"num_bits","","",2],[11,"num_bytes","","",2],[11,"to_vec","","",2],[11,"to_dec_str","","",2],[11,"to_hex_str","","",2],[11,"fmt","","",2],[11,"eq","","",2],[11,"cmp","","",2],[11,"partial_cmp","","",2],[11,"drop","","",2],[0,"bio","openssl",""],[3,"MemBio","openssl::bio",""],[11,"drop","","",3],[11,"new","","Creates a new owned memory based BIO",3],[11,"borrowed","","Returns a \"borrow\", i.e. it has no ownership",3],[11,"unwrap","","Consumes current bio and returns wrapped value\nNote that data ownership is lost and\nshould be managed manually",3],[11,"get_handle","","Temporarily gets wrapped value",3],[11,"read","","",3],[11,"write","","",3],[11,"flush","","",3],[0,"crypto","openssl",""],[0,"hash","openssl::crypto",""],[3,"Hasher","openssl::crypto::hash","Provides message digest (hash) computation."],[4,"Type","","Message digest (hash) type."],[13,"MD5","","",4],[13,"SHA1","","",4],[13,"SHA224","","",4],[13,"SHA256","","",4],[13,"SHA384","","",4],[13,"SHA512","","",4],[13,"RIPEMD160","","",4],[5,"hash","","Computes the hash of the `data` with the hash `t`."],[11,"md_len","","Returns the length of the message digest.",4],[11,"evp_md","","Internal interface subject to removal.",4],[11,"new","","Creates a new `Hasher` with the specified hash type.",5],[11,"finish","","Returns the hash of the data written since creation or\nthe last `finish` and resets the hasher.",5],[11,"write","","",5],[11,"flush","","",5],[11,"clone","","",5],[11,"drop","","",5],[0,"hmac","openssl::crypto",""],[3,"HMAC","openssl::crypto::hmac","Provides HMAC computation."],[5,"hmac","","Computes the HMAC of the `data` with the hash `t` and `key`."],[11,"new","","Creates a new `HMAC` with the specified hash type using the `key`.",6],[11,"finish","","Returns the hash of the data written since creation or\nthe last `finish` and resets the hasher.",6],[11,"write","","",6],[11,"flush","","",6],[11,"clone","","",6],[11,"drop","","",6],[0,"pkcs5","openssl::crypto",""],[5,"pbkdf2_hmac_sha1","openssl::crypto::pkcs5","Derives a key from a password and salt using the PBKDF2-HMAC-SHA1 algorithm."],[0,"pkey","openssl::crypto",""],[3,"PKey","openssl::crypto::pkey",""],[4,"Role","","Represents a role an asymmetric key might be appropriate for."],[13,"Encrypt","","",7],[13,"Decrypt","","",7],[13,"Sign","","",7],[13,"Verify","","",7],[4,"EncryptionPadding","","Type of encryption padding to use."],[13,"OAEP","","",8],[13,"PKCS1v15","","",8],[11,"new","","",9],[11,"gen","","",9],[11,"save_pub","","Returns a serialized form of the public key, suitable for load_pub().",9],[11,"load_pub","","Loads a serialized form of the public key, as produced by save_pub().",9],[11,"save_priv","","Returns a serialized form of the public and private keys, suitable for\nload_priv().",9],[11,"load_priv","","Loads a serialized form of the public and private keys, as produced by\nsave_priv().",9],[11,"write_pem","","Stores private key as a PEM",9],[11,"size","","Returns the size of the public key modulus.",9],[11,"can","","Returns whether this pkey object can perform the specified role.",9],[11,"max_data","","Returns the maximum amount of data that can be encrypted by an encrypt()\ncall.",9],[11,"encrypt_with_padding","","",9],[11,"decrypt_with_padding","","",9],[11,"encrypt","","Encrypts data using OAEP padding, returning the encrypted data. The\nsupplied data must not be larger than max_data().",9],[11,"decrypt","","Decrypts data, expecting OAEP padding, returning the decrypted data.",9],[11,"sign","","Signs data, using OpenSSL's default scheme and sha256. Unlike encrypt(),\ncan process an arbitrary amount of data; returns the signature.",9],[11,"verify","","Verifies a signature s (using OpenSSL's default scheme and sha256) on a\nmessage m. Returns true if the signature is valid, and false otherwise.",9],[11,"sign_with_hash","","",9],[11,"verify_with_hash","","",9],[11,"get_handle","","",9],[11,"drop","","",9],[0,"rand","openssl::crypto",""],[5,"rand_bytes","openssl::crypto::rand",""],[0,"symm","openssl::crypto",""],[3,"Crypter","openssl::crypto::symm","Represents a symmetric cipher context."],[4,"Mode","",""],[13,"Encrypt","","",10],[13,"Decrypt","","",10],[4,"Type","",""],[13,"AES_128_ECB","","",11],[13,"AES_128_CBC","","",11],[13,"AES_256_ECB","","",11],[13,"AES_256_CBC","","",11],[13,"RC4_128","","",11],[5,"encrypt","","Encrypts data, using the specified crypter type in encrypt mode with the\nspecified key and iv; returns the resulting (encrypted) data."],[5,"decrypt","","Decrypts data, using the specified crypter type in decrypt mode with the\nspecified key and iv; returns the resulting (decrypted) data."],[11,"new","","",12],[11,"pad","","Enables or disables padding. If padding is disabled, total amount of\ndata encrypted must be a multiple of block size.",12],[11,"init","","Initializes this crypter.",12],[11,"update","","Update this crypter with more data to encrypt or decrypt. Returns\nencrypted or decrypted bytes.",12],[11,"finalize","","Finish crypting. Returns the remaining partial block of output, if any.",12],[11,"drop","","",12],[0,"memcmp","openssl::crypto",""],[5,"eq","openssl::crypto::memcmp","Returns `true` iff `a` and `b` contain the same bytes."],[0,"ssl","openssl",""],[3,"SslContext","openssl::ssl","An SSL context object"],[3,"Ssl","",""],[3,"SslStream","","A stream wrapper which handles SSL encryption for an underlying stream."],[4,"SslMethod","","Determines the SSL method supported"],[13,"Sslv23","","Support the SSLv2, SSLv3 and TLSv1 protocols.",13],[13,"Sslv3","","Only support the SSLv3 protocol.",13],[13,"Tlsv1","","Only support the TLSv1 protocol.",13],[4,"SslVerifyMode","","Determines the type of certificate verification used"],[13,"SslVerifyPeer","","Verify that the server's certificate is trusted",14],[13,"SslVerifyNone","","Do not verify the server's certificate",14],[4,"MaybeSslStream","","A utility type to help in cases where the use of SSL is decided at runtime."],[13,"Ssl","","A connection using SSL",15],[13,"Normal","","A connection not using SSL",15],[0,"error","",""],[4,"SslError","openssl::ssl::error","An SSL error"],[13,"StreamError","","The underlying stream reported an error",16],[13,"SslSessionClosed","","The SSL session has been closed by the other end",16],[13,"OpenSslErrors","","An error in the OpenSSL library",16],[4,"OpensslError","","An error from the OpenSSL library"],[13,"UnknownError","","An unknown error",17],[12,"library","openssl::ssl::error::OpensslError","The library reporting the error",17],[12,"function","","The function reporting the error",17],[12,"reason","","The reason for the error",17],[11,"eq","openssl::ssl::error","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",16],[11,"fmt","","",16],[11,"description","","",16],[11,"cause","","",16],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"fmt","","",17],[11,"get","","Creates a new `OpenSslErrors` with the current contents of the error\nstack.",16],[11,"from_error","","Creates an `SslError` from the raw numeric error code.",16],[6,"VerifyCallback","openssl::ssl","The signature of functions that can be used to manually verify certificates"],[6,"VerifyCallbackData","","The signature of functions that can be used to manually verify certificates\nwhen user-data should be carried for all verification process"],[11,"eq","","",13],[11,"ne","","",13],[11,"hash","","",13],[11,"fmt","","",13],[11,"clone","","",13],[11,"fmt","","",14],[11,"clone","","",14],[11,"fmt","","",18],[11,"drop","","",18],[11,"new","","Creates a new SSL context.",18],[11,"set_verify","","Configures the certificate verification method for new connections.",18],[11,"set_verify_with_data","","Configures the certificate verification method for new connections also\ncarrying supplied data.",18],[11,"set_verify_depth","","Sets verification depth",18],[11,"set_CA_file","","Specifies the file that contains trusted CA certificates.",18],[11,"set_certificate_file","","Specifies the file that contains certificate",18],[11,"set_private_key_file","","Specifies the file that contains private key",18],[11,"set_cipher_list","","",18],[11,"fmt","","",19],[11,"drop","","",19],[11,"new","","",19],[11,"set_hostname","","Set the host name to be used with SNI (Server Name Indication).",19],[11,"get_peer_certificate","","",19],[11,"clone","","",20],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",20],[11,"fmt","","",20],[11,"new_server_from","","",20],[11,"new_from","","Attempts to create a new SSL stream from a given `Ssl` instance.",20],[11,"new","","Creates a new SSL stream",20],[11,"new_server","","Creates a new SSL server stream",20],[11,"get_inner","","Returns a mutable reference to the underlying stream.",20],[11,"get_ref","","Returns a reference to the underlying stream.",20],[11,"get_mut","","Returns a mutable reference to the underlying stream.",20],[11,"get_compression","","Get the compression currently in use.  The result will be\neither None, indicating no compression is in use, or a string\nwith the compression name.",20],[11,"read","","",20],[11,"write","","",20],[11,"flush","","",20],[11,"fmt","","",15],[11,"read","","",15],[11,"write","","",15],[11,"flush","","",15],[11,"get_ref","","Returns a reference to the underlying stream.",15],[11,"get_mut","","Returns a mutable reference to the underlying stream.",15],[0,"x509","openssl",""],[3,"X509StoreContext","openssl::x509",""],[3,"X509Generator","","Generator of private key/certificate pairs"],[3,"X509","","A public key certificate"],[3,"X509Name","",""],[4,"X509FileType","",""],[13,"PEM","","",21],[13,"ASN1","","",21],[13,"Default","","",21],[4,"KeyUsage","",""],[13,"DigitalSignature","","",22],[13,"NonRepudiation","","",22],[13,"KeyEncipherment","","",22],[13,"DataEncipherment","","",22],[13,"KeyAgreement","","",22],[13,"KeyCertSign","","",22],[13,"CRLSign","","",22],[13,"EncipherOnly","","",22],[13,"DecipherOnly","","",22],[4,"ExtKeyUsage","",""],[13,"ServerAuth","","",23],[13,"ClientAuth","","",23],[13,"CodeSigning","","",23],[13,"EmailProtection","","",23],[13,"TimeStamping","","",23],[13,"MsCodeInd","","",23],[13,"MsCodeCom","","",23],[13,"MsCtlSign","","",23],[13,"MsSgc","","",23],[13,"MsEfs","","",23],[13,"NsSgc","","",23],[4,"X509ValidationError","",""],[13,"X509UnableToGetIssuerCert","","",24],[13,"X509UnableToGetCrl","","",24],[13,"X509UnableToDecryptCertSignature","","",24],[13,"X509UnableToDecryptCrlSignature","","",24],[13,"X509UnableToDecodeIssuerPublicKey","","",24],[13,"X509CertSignatureFailure","","",24],[13,"X509CrlSignatureFailure","","",24],[13,"X509CertNotYetValid","","",24],[13,"X509CertHasExpired","","",24],[13,"X509CrlNotYetValid","","",24],[13,"X509CrlHasExpired","","",24],[13,"X509ErrorInCertNotBeforeField","","",24],[13,"X509ErrorInCertNotAfterField","","",24],[13,"X509ErrorInCrlLastUpdateField","","",24],[13,"X509ErrorInCrlNextUpdateField","","",24],[13,"X509OutOfMem","","",24],[13,"X509DepthZeroSelfSignedCert","","",24],[13,"X509SelfSignedCertInChain","","",24],[13,"X509UnableToGetIssuerCertLocally","","",24],[13,"X509UnableToVerifyLeafSignature","","",24],[13,"X509CertChainTooLong","","",24],[13,"X509CertRevoked","","",24],[13,"X509InvalidCA","","",24],[13,"X509PathLengthExceeded","","",24],[13,"X509InvalidPurpose","","",24],[13,"X509CertUntrusted","","",24],[13,"X509CertRejected","","",24],[13,"X509SubjectIssuerMismatch","","",24],[13,"X509AkidSkidMismatch","","",24],[13,"X509AkidIssuerSerialMismatch","","",24],[13,"X509KeyusageNoCertsign","","",24],[13,"X509UnableToGetCrlIssuer","","",24],[13,"X509UnhandledCriticalExtension","","",24],[13,"X509KeyusageNoCrlSign","","",24],[13,"X509UnhandledCriticalCrlExtension","","",24],[13,"X509InvalidNonCA","","",24],[13,"X509ProxyPathLengthExceeded","","",24],[13,"X509KeyusageNoDigitalSignature","","",24],[13,"X509ProxyCertificatesNotAllowed","","",24],[13,"X509InvalidExtension","","",24],[13,"X509InavlidPolicyExtension","","",24],[13,"X509NoExplicitPolicy","","",24],[13,"X509DifferentCrlScope","","",24],[13,"X509UnsupportedExtensionFeature","","",24],[13,"X509UnnestedResource","","",24],[13,"X509PermittedVolation","","",24],[13,"X509ExcludedViolation","","",24],[13,"X509SubtreeMinmax","","",24],[13,"X509UnsupportedConstraintType","","",24],[13,"X509UnsupportedConstraintSyntax","","",24],[13,"X509UnsupportedNameSyntax","","",24],[13,"X509CrlPathValidationError","","",24],[13,"X509ApplicationVerification","","",24],[13,"X509UnknownError","","",24],[11,"new","","",25],[11,"get_error","","",25],[11,"get_current_cert","","",25],[11,"clone","","",22],[11,"clone","","",23],[11,"new","","Creates a new generator with the following defaults:",26],[11,"set_bitlength","","Sets desired bit length",26],[11,"set_valid_period","","Sets certificate validity period in days since today",26],[11,"set_CN","","Sets Common Name of certificate",26],[11,"set_usage","","Sets what for certificate could be used",26],[11,"set_ext_usage","","Sets allowed extended usage of certificate",26],[11,"set_sign_hash","","",26],[11,"generate","","Generates a private key and a signed certificate and returns them",26],[11,"new","","Creates new from handle with desired ownership.",27],[11,"new_in_ctx","","Creates a new certificate from context. Doesn't take ownership\nof handle.",27],[11,"from_pem","","Reads certificate from PEM, takes ownership of handle",27],[11,"subject_name","","",27],[11,"fingerprint","","Returns certificate fingerprint calculated using provided hash",27],[11,"write_pem","","Writes certificate as PEM",27],[11,"drop","","",27]],"paths":[[3,"Asn1Time"],[4,"RNGProperty"],[3,"BigNum"],[3,"MemBio"],[4,"Type"],[3,"Hasher"],[3,"HMAC"],[4,"Role"],[4,"EncryptionPadding"],[3,"PKey"],[4,"Mode"],[4,"Type"],[3,"Crypter"],[4,"SslMethod"],[4,"SslVerifyMode"],[4,"MaybeSslStream"],[4,"SslError"],[4,"OpensslError"],[3,"SslContext"],[3,"Ssl"],[3,"SslStream"],[4,"X509FileType"],[4,"KeyUsage"],[4,"ExtKeyUsage"],[4,"X509ValidationError"],[3,"X509StoreContext"],[3,"X509Generator"],[3,"X509"]]};
searchIndex['phf_macros'] = {"items":[[0,"","phf_macros","Compiler plugin defining macros that create PHF data structures."],[0,"util","",""],[3,"Entry","phf_macros::util",""],[12,"key_contents","","",0],[12,"key","","",0],[12,"value","","",0],[4,"Key","",""],[13,"Str","","",1],[13,"Binary","","",1],[13,"Char","","",1],[13,"U8","","",1],[13,"I8","","",1],[13,"U16","","",1],[13,"I16","","",1],[13,"U32","","",1],[13,"I32","","",1],[13,"U64","","",1],[13,"I64","","",1],[13,"Bool","","",1],[5,"create_map","",""],[5,"create_set","",""],[5,"create_ordered_map","",""],[5,"create_ordered_set","",""],[11,"clone","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"hash","","",1],[11,"phf_hash","","",1],[11,"phf_hash","","",0],[14,"phf_map!","phf_macros","Constructs a `phf::Map` at compile time."],[14,"phf_set!","","Constructs a `phf::Set` at compile time."],[14,"phf_ordered_map!","","Constructs a `phf::OrderedMap` at compile time."],[14,"phf_ordered_set!","","Constructs a `phf::OrderedSet` at compile time."]],"paths":[[3,"Entry"],[4,"Key"]]};
searchIndex['openssl-sys'] = {"items":[[0,"","openssl-sys",""],[3,"EVP_MD_CTX","",""],[3,"HMAC_CTX","",""],[3,"X509V3_CTX","",""],[3,"BIGNUM","",""],[12,"d","","",0],[12,"top","","",0],[12,"dmax","","",0],[12,"neg","","",0],[12,"flags","","",0],[5,"init","",""],[5,"BIO_eof","",""],[5,"ASN1_INTEGER_set","",""],[5,"ASN1_STRING_type_new","",""],[5,"ASN1_TIME_free","",""],[5,"BIO_ctrl","",""],[5,"BIO_free_all","",""],[5,"BIO_new","",""],[5,"BIO_read","",""],[5,"BIO_write","",""],[5,"BIO_s_mem","",""],[5,"BN_new","",""],[5,"BN_dup","",""],[5,"BN_clear_free","",""],[5,"BN_CTX_new","",""],[5,"BN_CTX_free","",""],[5,"BN_num_bits","",""],[5,"BN_set_negative","",""],[5,"BN_set_word","",""],[5,"BN_add","",""],[5,"BN_div","",""],[5,"BN_exp","",""],[5,"BN_gcd","",""],[5,"BN_mod_add","",""],[5,"BN_mod_exp","",""],[5,"BN_mod_inverse","",""],[5,"BN_mod_mul","",""],[5,"BN_mod_sqr","",""],[5,"BN_mod_sub","",""],[5,"BN_mul","",""],[5,"BN_nnmod","",""],[5,"BN_add_word","",""],[5,"BN_sub_word","",""],[5,"BN_mul_word","",""],[5,"BN_div_word","",""],[5,"BN_mod_word","",""],[5,"BN_sqr","",""],[5,"BN_sub","",""],[5,"BN_clear_bit","",""],[5,"BN_is_bit_set","",""],[5,"BN_lshift","",""],[5,"BN_lshift1","",""],[5,"BN_mask_bits","",""],[5,"BN_rshift","",""],[5,"BN_set_bit","",""],[5,"BN_rshift1","",""],[5,"BN_cmp","",""],[5,"BN_ucmp","",""],[5,"BN_generate_prime_ex","",""],[5,"BN_is_prime_ex","",""],[5,"BN_is_prime_fasttest_ex","",""],[5,"BN_rand","",""],[5,"BN_pseudo_rand","",""],[5,"BN_rand_range","",""],[5,"BN_pseudo_rand_range","",""],[5,"BN_bin2bn","",""],[5,"BN_bn2bin","",""],[5,"BN_dec2bn","",""],[5,"BN_bn2dec","",""],[5,"BN_hex2bn","",""],[5,"BN_bn2hex","",""],[5,"CRYPTO_num_locks","",""],[5,"CRYPTO_set_locking_callback","",""],[5,"CRYPTO_free","",""],[5,"CRYPTO_memcmp","",""],[5,"ERR_get_error","",""],[5,"ERR_lib_error_string","",""],[5,"ERR_func_error_string","",""],[5,"ERR_reason_error_string","",""],[5,"ERR_load_crypto_strings","",""],[5,"EVP_md5","",""],[5,"EVP_ripemd160","",""],[5,"EVP_sha1","",""],[5,"EVP_sha224","",""],[5,"EVP_sha256","",""],[5,"EVP_sha384","",""],[5,"EVP_sha512","",""],[5,"EVP_aes_128_cbc","",""],[5,"EVP_aes_128_ecb","",""],[5,"EVP_aes_256_cbc","",""],[5,"EVP_aes_256_ecb","",""],[5,"EVP_rc4","",""],[5,"EVP_CIPHER_CTX_new","",""],[5,"EVP_CIPHER_CTX_set_padding","",""],[5,"EVP_CIPHER_CTX_free","",""],[5,"EVP_CipherInit","",""],[5,"EVP_CipherUpdate","",""],[5,"EVP_CipherFinal","",""],[5,"EVP_DigestInit","",""],[5,"EVP_DigestInit_ex","",""],[5,"EVP_DigestUpdate","",""],[5,"EVP_DigestFinal","",""],[5,"EVP_DigestFinal_ex","",""],[5,"EVP_MD_CTX_create","",""],[5,"EVP_MD_CTX_copy_ex","",""],[5,"EVP_MD_CTX_destroy","",""],[5,"EVP_PKEY_new","",""],[5,"EVP_PKEY_free","",""],[5,"EVP_PKEY_assign","",""],[5,"EVP_PKEY_get1_RSA","",""],[5,"EVP_PKEY_set1_RSA","",""],[5,"HMAC_CTX_init","",""],[5,"HMAC_CTX_cleanup","",""],[5,"HMAC_CTX_copy","",""],[5,"HMAC_Init_ex_shim","",""],[5,"HMAC_Final_shim","",""],[5,"HMAC_Update_shim","",""],[5,"PEM_read_bio_X509","",""],[5,"PEM_write_bio_PrivateKey","",""],[5,"PEM_write_bio_X509","",""],[5,"PKCS5_PBKDF2_HMAC_SHA1","",""],[5,"RAND_bytes","",""],[5,"RSA_generate_key","",""],[5,"RSA_private_decrypt","",""],[5,"RSA_public_encrypt","",""],[5,"RSA_sign","",""],[5,"RSA_size","",""],[5,"RSA_verify","",""],[5,"SSL_library_init","",""],[5,"SSL_load_error_strings","",""],[5,"SSLv3_method","",""],[5,"TLSv1_method","",""],[5,"SSLv23_method","",""],[5,"SSL_new","",""],[5,"SSL_free","",""],[5,"SSL_set_bio","",""],[5,"SSL_get_rbio","",""],[5,"SSL_get_wbio","",""],[5,"SSL_accept","",""],[5,"SSL_connect","",""],[5,"SSL_ctrl","",""],[5,"SSL_get_error","",""],[5,"SSL_read","",""],[5,"SSL_write","",""],[5,"SSL_get_ex_data_X509_STORE_CTX_idx","",""],[5,"SSL_get_SSL_CTX","",""],[5,"SSL_get_current_compression","",""],[5,"SSL_get_peer_certificate","",""],[5,"SSL_COMP_get_name","",""],[5,"SSL_CTX_new","",""],[5,"SSL_CTX_free","",""],[5,"SSL_CTX_set_verify","",""],[5,"SSL_CTX_set_verify_depth","",""],[5,"SSL_CTX_load_verify_locations","",""],[5,"SSL_CTX_get_ex_new_index","",""],[5,"SSL_CTX_set_ex_data","",""],[5,"SSL_CTX_get_ex_data","",""],[5,"SSL_CTX_use_certificate_file","",""],[5,"SSL_CTX_use_PrivateKey_file","",""],[5,"SSL_CTX_set_cipher_list","",""],[5,"X509_add_ext","",""],[5,"X509_digest","",""],[5,"X509_free","",""],[5,"X509_get_serialNumber","",""],[5,"X509_get_subject_name","",""],[5,"X509_gmtime_adj","",""],[5,"X509_new","",""],[5,"X509_set_issuer_name","",""],[5,"X509_set_notAfter","",""],[5,"X509_set_notBefore","",""],[5,"X509_set_version","",""],[5,"X509_set_pubkey","",""],[5,"X509_sign","",""],[5,"X509_EXTENSION_free","",""],[5,"X509_NAME_add_entry_by_txt","",""],[5,"X509_NAME_get_index_by_NID","",""],[5,"X509_NAME_get_entry","",""],[5,"X509_NAME_ENTRY_get_data","",""],[5,"ASN1_STRING_to_UTF8","",""],[5,"X509_STORE_CTX_get_current_cert","",""],[5,"X509_STORE_CTX_get_error","",""],[5,"X509_STORE_CTX_get_ex_data","",""],[5,"X509V3_EXT_conf_nid","",""],[5,"X509V3_set_ctx","",""],[5,"i2d_RSA_PUBKEY","",""],[5,"d2i_RSA_PUBKEY","",""],[5,"i2d_RSAPrivateKey","",""],[5,"d2i_RSAPrivateKey","",""],[0,"probe","",""],[3,"ProbeResult","openssl-sys::probe",""],[12,"cert_file","","",1],[12,"cert_dir","","",1],[5,"find_certs_dirs","","Probe the system for the directory in which CA certificates should likely be\nfound."],[5,"init_ssl_cert_env_vars","",""],[5,"probe","",""],[6,"ASN1_INTEGER","openssl-sys",""],[6,"ASN1_STRING","",""],[6,"ASN1_TIME","",""],[6,"BIO","",""],[6,"BIO_METHOD","",""],[6,"BN_CTX","",""],[6,"COMP_METHOD","",""],[6,"CRYPTO_EX_DATA","",""],[6,"ENGINE","",""],[6,"EVP_CIPHER","",""],[6,"EVP_CIPHER_CTX","",""],[6,"EVP_MD","",""],[6,"EVP_PKEY","",""],[6,"EVP_PKEY_CTX","",""],[6,"RSA","",""],[6,"SSL","",""],[6,"SSL_CTX","",""],[6,"SSL_METHOD","",""],[6,"X509","",""],[6,"X509_CRL","",""],[6,"X509_EXTENSION","",""],[6,"X509_NAME","",""],[6,"X509_NAME_ENTRY","",""],[6,"X509_REQ","",""],[6,"X509_STORE_CTX","",""],[6,"CRYPTO_EX_new","",""],[6,"CRYPTO_EX_dup","",""],[6,"CRYPTO_EX_free","",""],[6,"PasswordCallback","",""],[17,"BIO_CTRL_EOF","",""],[17,"CRYPTO_LOCK","",""],[17,"MBSTRING_ASC","",""],[17,"MBSTRING_BMP","",""],[17,"MBSTRING_FLAG","",""],[17,"MBSTRING_UNIV","",""],[17,"MBSTRING_UTF8","",""],[17,"NID_ext_key_usage","",""],[17,"NID_key_usage","",""],[17,"SSL_CTRL_SET_TLSEXT_HOSTNAME","",""],[17,"SSL_ERROR_NONE","",""],[17,"SSL_ERROR_SSL","",""],[17,"SSL_ERROR_SYSCALL","",""],[17,"SSL_ERROR_WANT_ACCEPT","",""],[17,"SSL_ERROR_WANT_CONNECT","",""],[17,"SSL_ERROR_WANT_READ","",""],[17,"SSL_ERROR_WANT_WRITE","",""],[17,"SSL_ERROR_WANT_X509_LOOKUP","",""],[17,"SSL_ERROR_ZERO_RETURN","",""],[17,"SSL_VERIFY_NONE","",""],[17,"SSL_VERIFY_PEER","",""],[17,"TLSEXT_NAMETYPE_host_name","",""],[17,"V_ASN1_GENERALIZEDTIME","",""],[17,"V_ASN1_UTCTIME","",""],[17,"X509_FILETYPE_ASN1","",""],[17,"X509_FILETYPE_DEFAULT","",""],[17,"X509_FILETYPE_PEM","",""],[17,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","",""],[17,"X509_V_ERR_AKID_SKID_MISMATCH","",""],[17,"X509_V_ERR_APPLICATION_VERIFICATION","",""],[17,"X509_V_ERR_CERT_CHAIN_TOO_LONG","",""],[17,"X509_V_ERR_CERT_HAS_EXPIRED","",""],[17,"X509_V_ERR_CERT_NOT_YET_VALID","",""],[17,"X509_V_ERR_CERT_REJECTED","",""],[17,"X509_V_ERR_CERT_REVOKED","",""],[17,"X509_V_ERR_CERT_SIGNATURE_FAILURE","",""],[17,"X509_V_ERR_CERT_UNTRUSTED","",""],[17,"X509_V_ERR_CRL_HAS_EXPIRED","",""],[17,"X509_V_ERR_CRL_NOT_YET_VALID","",""],[17,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","",""],[17,"X509_V_ERR_CRL_SIGNATURE_FAILURE","",""],[17,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","",""],[17,"X509_V_ERR_DIFFERENT_CRL_SCOPE","",""],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","",""],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","",""],[17,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","",""],[17,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","",""],[17,"X509_V_ERR_EXCLUDED_VIOLATION","",""],[17,"X509_V_ERR_INVALID_CA","",""],[17,"X509_V_ERR_INVALID_EXTENSION","",""],[17,"X509_V_ERR_INVALID_NON_CA","",""],[17,"X509_V_ERR_INVALID_POLICY_EXTENSION","",""],[17,"X509_V_ERR_INVALID_PURPOSE","",""],[17,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","",""],[17,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","",""],[17,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","",""],[17,"X509_V_ERR_NO_EXPLICIT_POLICY","",""],[17,"X509_V_ERR_OUT_OF_MEM","",""],[17,"X509_V_ERR_PATH_LENGTH_EXCEEDED","",""],[17,"X509_V_ERR_PERMITTED_VIOLATION","",""],[17,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","",""],[17,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","",""],[17,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","",""],[17,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","",""],[17,"X509_V_ERR_SUBTREE_MINMAX","",""],[17,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","",""],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","",""],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","",""],[17,"X509_V_ERR_UNABLE_TO_GET_CRL","",""],[17,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","",""],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","",""],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","",""],[17,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","",""],[17,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","",""],[17,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","",""],[17,"X509_V_ERR_UNNESTED_RESOURCE","",""],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","",""],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","",""],[17,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","",""],[17,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","",""],[17,"X509_V_OK","",""]],"paths":[[3,"BIGNUM"],[3,"ProbeResult"]]};
searchIndex['core_text'] = {"items":[],"paths":[]};
searchIndex['png'] = {"items":[[0,"","png",""],[3,"Image","",""],[12,"width","","",0],[12,"height","","",0],[12,"pixels","","",0],[4,"PixelsByColorType","",""],[13,"K8","","",1],[13,"KA8","","",1],[13,"RGB8","","",1],[13,"RGBA8","","",1],[5,"is_png","",""],[5,"read_data","",""],[5,"load_png","",""],[5,"load_png_from_memory","",""],[5,"write_data","",""],[5,"flush_data","",""],[5,"store_png","",""],[0,"ffi","",""],[5,"setjmp","png::ffi",""],[5,"pngshim_jmpbuf","",""],[5,"RUST_png_get_header_ver","",""],[5,"RUST_png_sig_cmp","",""],[5,"RUST_png_create_info_struct","",""],[5,"RUST_png_get_io_ptr","",""],[5,"RUST_png_set_sig_bytes","",""],[5,"RUST_png_create_read_struct","",""],[5,"RUST_png_destroy_read_struct","",""],[5,"RUST_png_set_read_fn","",""],[5,"RUST_png_read_info","",""],[5,"RUST_png_read_update_info","",""],[5,"RUST_png_read_image","",""],[5,"RUST_png_read_png","",""],[5,"RUST_png_create_write_struct","",""],[5,"RUST_png_destroy_write_struct","",""],[5,"RUST_png_set_write_fn","",""],[5,"RUST_png_write_png","",""],[5,"RUST_png_get_IHDR","",""],[5,"RUST_png_get_pHYs","",""],[5,"RUST_png_get_image_width","",""],[5,"RUST_png_get_image_height","",""],[5,"RUST_png_get_bit_depth","",""],[5,"RUST_png_get_color_type","",""],[5,"RUST_png_get_valid","",""],[5,"RUST_png_get_rows","",""],[5,"RUST_png_set_IHDR","",""],[5,"RUST_png_set_pHYs","",""],[5,"RUST_png_set_rows","",""],[5,"RUST_png_set_packing","",""],[5,"RUST_png_set_palette_to_rgb","",""],[5,"RUST_png_set_expand_gray_1_2_4_to_8","",""],[5,"RUST_png_set_gray_to_rgb","",""],[5,"RUST_png_set_tRNS_to_alpha","",""],[5,"RUST_png_set_add_alpha","",""],[5,"RUST_png_set_filler","",""],[5,"RUST_png_set_interlace_handling","",""],[5,"RUST_png_set_strip_16","",""],[6,"png_struct","",""],[6,"png_info","",""],[17,"TRANSFORM_IDENTITY","",""],[17,"FILTER_NONE","",""],[17,"INTERLACE_NONE","",""],[17,"COMPRESSION_TYPE_DEFAULT","",""],[17,"COLOR_TYPE_GRAY","",""],[17,"COLOR_TYPE_RGB","",""],[17,"COLOR_TYPE_PALETTE","",""],[17,"COLOR_TYPE_GRAY_ALPHA","",""],[17,"COLOR_TYPE_GA","",""],[17,"COLOR_TYPE_RGB_ALPHA","",""],[17,"COLOR_TYPE_RGBA","",""],[17,"FILLER_AFTER","",""],[17,"INFO_tRNS","",""]],"paths":[[3,"Image"],[4,"PixelsByColorType"]]};
searchIndex['fontconfig'] = {"items":[[0,"","fontconfig",""],[0,"fontconfig","",""],[3,"struct__FcMatrix","fontconfig::fontconfig",""],[12,"xx","","",0],[12,"xy","","",0],[12,"yx","","",0],[12,"yy","","",0],[3,"struct__FcObjectType","",""],[12,"object","","",1],[12,"_type","","",1],[3,"struct__FcConstant","",""],[12,"name","","",2],[12,"object","","",2],[12,"value","","",2],[3,"struct__FcValue","",""],[12,"_type","","",3],[12,"u","","",3],[3,"struct__FcFontSet","",""],[12,"nfont","","",4],[12,"sfont","","",4],[12,"fonts","","",4],[3,"struct__FcObjectSet","",""],[12,"nobject","","",5],[12,"sobject","","",5],[12,"objects","","",5],[5,"FcBlanksCreate","",""],[5,"FcBlanksDestroy","",""],[5,"FcBlanksAdd","",""],[5,"FcBlanksIsMember","",""],[5,"FcCacheDir","",""],[5,"FcCacheCopySet","",""],[5,"FcCacheSubdir","",""],[5,"FcCacheNumSubdir","",""],[5,"FcCacheNumFont","",""],[5,"FcDirCacheUnlink","",""],[5,"FcDirCacheValid","",""],[5,"FcConfigHome","",""],[5,"FcConfigEnableHome","",""],[5,"FcConfigFilename","",""],[5,"FcConfigCreate","",""],[5,"FcConfigReference","",""],[5,"FcConfigDestroy","",""],[5,"FcConfigSetCurrent","",""],[5,"FcConfigGetCurrent","",""],[5,"FcConfigUptoDate","",""],[5,"FcConfigBuildFonts","",""],[5,"FcConfigGetFontDirs","",""],[5,"FcConfigGetConfigDirs","",""],[5,"FcConfigGetConfigFiles","",""],[5,"FcConfigGetCache","",""],[5,"FcConfigGetBlanks","",""],[5,"FcConfigGetCacheDirs","",""],[5,"FcConfigGetRescanInterval","",""],[5,"FcConfigSetRescanInterval","",""],[5,"FcConfigGetFonts","",""],[5,"FcConfigAppFontAddFile","",""],[5,"FcConfigAppFontAddDir","",""],[5,"FcConfigAppFontClear","",""],[5,"FcConfigSubstituteWithPat","",""],[5,"FcConfigSubstitute","",""],[5,"FcCharSetCreate","",""],[5,"FcCharSetNew","",""],[5,"FcCharSetDestroy","",""],[5,"FcCharSetAddChar","",""],[5,"FcCharSetCopy","",""],[5,"FcCharSetEqual","",""],[5,"FcCharSetIntersect","",""],[5,"FcCharSetUnion","",""],[5,"FcCharSetSubtract","",""],[5,"FcCharSetMerge","",""],[5,"FcCharSetHasChar","",""],[5,"FcCharSetCount","",""],[5,"FcCharSetIntersectCount","",""],[5,"FcCharSetSubtractCount","",""],[5,"FcCharSetIsSubset","",""],[5,"FcCharSetFirstPage","",""],[5,"FcCharSetNextPage","",""],[5,"FcCharSetCoverage","",""],[5,"FcValuePrint","",""],[5,"FcPatternPrint","",""],[5,"FcFontSetPrint","",""],[5,"FcDefaultSubstitute","",""],[5,"FcFileIsDir","",""],[5,"FcFileScan","",""],[5,"FcDirScan","",""],[5,"FcDirSave","",""],[5,"FcDirCacheLoad","",""],[5,"FcDirCacheRead","",""],[5,"FcDirCacheUnload","",""],[5,"FcFreeTypeQuery","",""],[5,"FcFontSetCreate","",""],[5,"FcFontSetDestroy","",""],[5,"FcFontSetAdd","",""],[5,"FcInitLoadConfig","",""],[5,"FcInitLoadConfigAndFonts","",""],[5,"FcInit","",""],[5,"FcFini","",""],[5,"FcGetVersion","",""],[5,"FcInitReinitialize","",""],[5,"FcInitBringUptoDate","",""],[5,"FcGetLangs","",""],[5,"FcLangGetCharSet","",""],[5,"FcLangSetCreate","",""],[5,"FcLangSetDestroy","",""],[5,"FcLangSetCopy","",""],[5,"FcLangSetAdd","",""],[5,"FcLangSetHasLang","",""],[5,"FcLangSetCompare","",""],[5,"FcLangSetContains","",""],[5,"FcLangSetEqual","",""],[5,"FcLangSetHash","",""],[5,"FcLangSetGetLangs","",""],[5,"FcObjectSetCreate","",""],[5,"FcObjectSetAdd","",""],[5,"FcObjectSetDestroy","",""],[5,"FcObjectSetBuild","",""],[5,"FcFontSetList","",""],[5,"FcFontList","",""],[5,"FcAtomicCreate","",""],[5,"FcAtomicLock","",""],[5,"FcAtomicNewFile","",""],[5,"FcAtomicOrigFile","",""],[5,"FcAtomicReplaceOrig","",""],[5,"FcAtomicDeleteNew","",""],[5,"FcAtomicUnlock","",""],[5,"FcAtomicDestroy","",""],[5,"FcFontSetMatch","",""],[5,"FcFontMatch","",""],[5,"FcFontRenderPrepare","",""],[5,"FcFontSetSort","",""],[5,"FcFontSort","",""],[5,"FcFontSetSortDestroy","",""],[5,"FcMatrixCopy","",""],[5,"FcMatrixEqual","",""],[5,"FcMatrixMultiply","",""],[5,"FcMatrixRotate","",""],[5,"FcMatrixScale","",""],[5,"FcMatrixShear","",""],[5,"FcNameRegisterObjectTypes","",""],[5,"FcNameUnregisterObjectTypes","",""],[5,"FcNameGetObjectType","",""],[5,"FcNameRegisterConstants","",""],[5,"FcNameUnregisterConstants","",""],[5,"FcNameGetConstant","",""],[5,"FcNameConstant","",""],[5,"FcNameParse","",""],[5,"FcNameUnparse","",""],[5,"FcPatternCreate","",""],[5,"FcPatternDuplicate","",""],[5,"FcPatternReference","",""],[5,"FcPatternFilter","",""],[5,"FcValueDestroy","",""],[5,"FcValueEqual","",""],[5,"FcValueSave","",""],[5,"FcPatternDestroy","",""],[5,"FcPatternEqual","",""],[5,"FcPatternEqualSubset","",""],[5,"FcPatternHash","",""],[5,"FcPatternAdd","",""],[5,"FcPatternAddWeak","",""],[5,"FcPatternGet","",""],[5,"FcPatternDel","",""],[5,"FcPatternRemove","",""],[5,"FcPatternAddInteger","",""],[5,"FcPatternAddDouble","",""],[5,"FcPatternAddString","",""],[5,"FcPatternAddMatrix","",""],[5,"FcPatternAddCharSet","",""],[5,"FcPatternAddBool","",""],[5,"FcPatternAddLangSet","",""],[5,"FcPatternGetInteger","",""],[5,"FcPatternGetDouble","",""],[5,"FcPatternGetString","",""],[5,"FcPatternGetMatrix","",""],[5,"FcPatternGetCharSet","",""],[5,"FcPatternGetBool","",""],[5,"FcPatternGetLangSet","",""],[5,"FcPatternBuild","",""],[5,"FcPatternFormat","",""],[5,"FcStrCopy","",""],[5,"FcStrCopyFilename","",""],[5,"FcStrPlus","",""],[5,"FcStrFree","",""],[5,"FcStrDowncase","",""],[5,"FcStrCmpIgnoreCase","",""],[5,"FcStrCmp","",""],[5,"FcStrStrIgnoreCase","",""],[5,"FcStrStr","",""],[5,"FcUtf8ToUcs4","",""],[5,"FcUtf8Len","",""],[5,"FcUcs4ToUtf8","",""],[5,"FcUtf16ToUcs4","",""],[5,"FcUtf16Len","",""],[5,"FcStrDirname","",""],[5,"FcStrBasename","",""],[5,"FcStrSetCreate","",""],[5,"FcStrSetMember","",""],[5,"FcStrSetEqual","",""],[5,"FcStrSetAdd","",""],[5,"FcStrSetAddFilename","",""],[5,"FcStrSetDel","",""],[5,"FcStrSetDestroy","",""],[5,"FcStrListCreate","",""],[5,"FcStrListNext","",""],[5,"FcStrListDone","",""],[5,"FcConfigParseAndLoad","",""],[6,"FcChar8","",""],[6,"FcChar16","",""],[6,"FcChar32","",""],[6,"FcBool","",""],[6,"enum__FcType","",""],[6,"FcType","",""],[6,"FcMatrix","",""],[6,"struct__FcCharSet","",""],[6,"FcCharSet","",""],[6,"FcObjectType","",""],[6,"FcConstant","",""],[6,"enum__FcResult","",""],[6,"FcResult","",""],[6,"struct__FcPattern","",""],[6,"FcPattern","",""],[6,"struct__FcLangSet","",""],[6,"FcLangSet","",""],[6,"FcValue","",""],[6,"FcFontSet","",""],[6,"FcObjectSet","",""],[6,"enum__FcMatchKind","",""],[6,"FcMatchKind","",""],[6,"enum__FcLangResult","",""],[6,"FcLangResult","",""],[6,"enum__FcSetName","",""],[6,"FcSetName","",""],[6,"struct__FcAtomic","",""],[6,"FcAtomic","",""],[6,"FcEndian","",""],[6,"struct__FcConfig","",""],[6,"FcConfig","",""],[6,"struct__FcGlobalCache","",""],[6,"FcFileCache","",""],[6,"struct__FcBlanks","",""],[6,"FcBlanks","",""],[6,"struct__FcStrList","",""],[6,"FcStrList","",""],[6,"struct__FcStrSet","",""],[6,"FcStrSet","",""],[6,"struct__FcCache","",""],[6,"FcCache","",""],[6,"union_unnamed1","",""],[17,"FcTypeVoid","",""],[17,"FcTypeInteger","",""],[17,"FcTypeDouble","",""],[17,"FcTypeString","",""],[17,"FcTypeBool","",""],[17,"FcTypeMatrix","",""],[17,"FcTypeCharSet","",""],[17,"FcTypeFTFace","",""],[17,"FcTypeLangSet","",""],[17,"FC_WEIGHT_THIN","",""],[17,"FC_WEIGHT_EXTRALIGHT","",""],[17,"FC_WEIGHT_ULTRALIGHT","",""],[17,"FC_WEIGHT_LIGHT","",""],[17,"FC_WEIGHT_BOOK","",""],[17,"FC_WEIGHT_REGULAR","",""],[17,"FC_WEIGHT_NORMAL","",""],[17,"FC_WEIGHT_MEDIUM","",""],[17,"FC_WEIGHT_DEMIBOLD","",""],[17,"FC_WEIGHT_SEMIBOLD","",""],[17,"FC_WEIGHT_BOLD","",""],[17,"FC_WEIGHT_EXTRABOLD","",""],[17,"FC_WEIGHT_ULTRABOLD","",""],[17,"FC_WEIGHT_BLACK","",""],[17,"FC_WEIGHT_HEAVY","",""],[17,"FC_WEIGHT_EXTRABLACK","",""],[17,"FC_WEIGHT_ULTRABLACK","",""],[17,"FC_SLANT_ROMAN","",""],[17,"FC_SLANT_ITALIC","",""],[17,"FC_SLANT_OBLIQUE","",""],[17,"FcResultMatch","",""],[17,"FcResultNoMatch","",""],[17,"FcResultTypeMismatch","",""],[17,"FcResultNoId","",""],[17,"FcResultOutOfMemory","",""],[17,"FcMatchPattern","",""],[17,"FcMatchFont","",""],[17,"FcMatchScan","",""],[17,"FcLangEqual","",""],[17,"FcLangDifferentCountry","",""],[17,"FcLangDifferentTerritory","",""],[17,"FcLangDifferentLang","",""],[17,"FcSetSystem","",""],[17,"FcSetApplication","",""],[17,"FcEndianBig","",""],[17,"FcEndianLittle","",""]],"paths":[[3,"struct__FcMatrix"],[3,"struct__FcObjectType"],[3,"struct__FcConstant"],[3,"struct__FcValue"],[3,"struct__FcFontSet"],[3,"struct__FcObjectSet"]]};
searchIndex['cssparser'] = {"items":[[0,"","cssparser","Implementation of [CSS Syntax Module Level 3](http://dev.w3.org/csswg/css-syntax-3/) for Rust."],[3,"NumericValue","","The numeric value of `Number` and `Dimension` tokens."],[12,"value","","The value as a float",0],[12,"int_value","","If the origin source did not include a fractional part, the value as an integer.",0],[12,"signed","","Whether the number had a `+` or `-` sign.",0],[3,"PercentageValue","","The numeric value of `Percentage` tokens."],[12,"unit_value","","The value as a float, divided by 100 so that the nominal range is 0.0 to 1.0.",1],[12,"int_value","","If the origin source did not include a fractional part, the value as an integer. It is **not** divided by 100.",1],[12,"signed","","Whether the number had a `+` or `-` sign.",1],[3,"SourceLocation","","The line and column number for a given position within the input."],[12,"line","","The line number, starting at 1 for the first line.",2],[12,"column","","The column number within a line, starting at 1 for the character of the line.",2],[3,"DeclarationListParser","","Provides an iterator for declaration list parsing."],[12,"input","","The input given to `DeclarationListParser::new`",3],[12,"parser","","The parser given to `DeclarationListParser::new`",3],[3,"RuleListParser","","Provides an iterator for rule list parsing."],[12,"input","","The input given to `RuleListParser::new`",4],[12,"parser","","The parser given to `RuleListParser::new`",4],[3,"RGBA","","A color with red, green, blue, and alpha components."],[12,"red","","The red channel. Nominally in 0.0 ... 1.0.",5],[12,"green","","The green channel. Nominally in 0.0 ... 1.0.",5],[12,"blue","","The blue channel. Nominally in 0.0 ... 1.0.",5],[12,"alpha","","The alpha (opacity) channel. Clamped to 0.0 ... 1.0.",5],[3,"CssStringWriter","","A `TextWriter` adaptor that escapes text for writing as a double-quoted CSS string.\nQuotes are not included."],[3,"Parser","","A CSS parser that borrows its `&str` input,\nyields `Token`s,\nand keeps track of nested blocks and functions."],[3,"Delimiters","","A set of characters, to be used with the `Parser::parse_until*` methods."],[3,"SourcePosition","","A capture of the internal state of a `Parser` (including the position within the input),\nobtained from the `Parser::position` method."],[4,"Token","","One of the pieces the CSS input is broken into."],[13,"Ident","","A [`<ident-token>`](http://dev.w3.org/csswg/css-syntax/#ident-token-diagram)",6],[13,"AtKeyword","","A [`<at-keyword-token>`](http://dev.w3.org/csswg/css-syntax/#at-keyword-token-diagram)",6],[13,"Hash","","A [`<hash-token>`](http://dev.w3.org/csswg/css-syntax/#hash-token-diagram) with the type flag set to \"unrestricted\"",6],[13,"IDHash","","A [`<hash-token>`](http://dev.w3.org/csswg/css-syntax/#hash-token-diagram) with the type flag set to \"id\"",6],[13,"QuotedString","","A [`<string-token>`](http://dev.w3.org/csswg/css-syntax/#string-token-diagram)",6],[13,"Url","","A [`<url-token>`](http://dev.w3.org/csswg/css-syntax/#url-token-diagram) or `url( <string-token> )` function",6],[13,"Delim","","A `<delim-token>`",6],[13,"Number","","A [`<number-token>`](http://dev.w3.org/csswg/css-syntax/#number-token-diagram)",6],[13,"Percentage","","A [`<percentage-token>`](http://dev.w3.org/csswg/css-syntax/#percentage-token-diagram)",6],[13,"Dimension","","A [`<dimension-token>`](http://dev.w3.org/csswg/css-syntax/#dimension-token-diagram)",6],[13,"UnicodeRange","","A [`<unicode-range-token>`](http://dev.w3.org/csswg/css-syntax/#unicode-range-token-diagram)",6],[13,"WhiteSpace","","A [`<whitespace-token>`](http://dev.w3.org/csswg/css-syntax/#whitespace-token-diagram)",6],[13,"Comment","","A comment.",6],[13,"Colon","","A `:` `<colon-token>`",6],[13,"Semicolon","","A `;` `<semicolon-token>`",6],[13,"Comma","","A `,` `<comma-token>`",6],[13,"IncludeMatch","","A `~=` [`<include-match-token>`](http://dev.w3.org/csswg/css-syntax/#include-match-token-diagram)",6],[13,"DashMatch","","A `|=` [`<dash-match-token>`](http://dev.w3.org/csswg/css-syntax/#dash-match-token-diagram)",6],[13,"PrefixMatch","","A `^=` [`<prefix-match-token>`](http://dev.w3.org/csswg/css-syntax/#prefix-match-token-diagram)",6],[13,"SuffixMatch","","A `$=` [`<suffix-match-token>`](http://dev.w3.org/csswg/css-syntax/#suffix-match-token-diagram)",6],[13,"SubstringMatch","","A `*=` [`<substring-match-token>`](http://dev.w3.org/csswg/css-syntax/#substring-match-token-diagram)",6],[13,"Column","","A `||` [`<column-token>`](http://dev.w3.org/csswg/css-syntax/#column-token-diagram)",6],[13,"CDO","","A `<!--` [`<CDO-token>`](http://dev.w3.org/csswg/css-syntax/#CDO-token-diagram)",6],[13,"CDC","","A `-->` [`<CDC-token>`](http://dev.w3.org/csswg/css-syntax/#CDC-token-diagram)",6],[13,"Function","","A [`<function-token>`](http://dev.w3.org/csswg/css-syntax/#function-token-diagram)",6],[13,"ParenthesisBlock","","A `<(-token>`",6],[13,"SquareBracketBlock","","A `<[-token>`",6],[13,"CurlyBracketBlock","","A `<{-token>`",6],[13,"BadUrl","","A `<bad-url-token>`",6],[13,"BadString","","A `<bad-string-token>`",6],[13,"CloseParenthesis","","A `<)-token>`",6],[13,"CloseSquareBracket","","A `<]-token>`",6],[13,"CloseCurlyBracket","","A `<}-token>`",6],[4,"AtRuleType","","The return value for `AtRuleParser::parse_prelude`.\nIndicates whether the at-rule is expected to have a `{ /* ... */ }` block\nor end with a `;` semicolon."],[13,"WithoutBlock","","The at-rule is expected to end with a `;` semicolon. Example: `@import`.",7],[13,"WithBlock","","The at-rule is expected to have a a `{ /* ... */ }` block. Example: `@media`",7],[13,"OptionalBlock","","The at-rule may either have a block or end with a semicolon.",7],[4,"Color","","A <color> value."],[13,"CurrentColor","","The 'currentColor' keyword",8],[13,"RGBA","","Everything else gets converted to RGBA during parsing",8],[5,"parse_important","","Parse `!important`."],[5,"parse_one_declaration","","Parse a single declaration, such as an `( /* ... */ )` parenthesis in an `@supports` prelude."],[5,"parse_one_rule","","Parse a single rule, such as for CSSOM’s `CSSStyleSheet.insertRule`."],[5,"decode_stylesheet_bytes","","Determine the character encoding of a CSS stylesheet and decode it."],[5,"parse_color_keyword","","Return the named color with the given name."],[5,"parse_nth","","Parse the *An+B* notation, as found in the `:nth-child()` selector.\nThe input is typically the arguments of a function,\nin which case the caller needs to check if the arguments’ parser is exhausted.\nReturn `Ok((A, B))`, or `Err(())` for a syntax error."],[5,"serialize_identifier","","Write a CSS identifier, escaping characters as necessary."],[5,"serialize_string","","Write a double-quoted CSS string token, escaping content as necessary."],[0,"Delimiter","","`Delimiters` constants."],[17,"None","cssparser::Delimiter","The empty delimiter set"],[17,"CurlyBracketBlock","","The delimiter set with only the `{` opening curly bracket"],[17,"Semicolon","","The delimiter set with only the `;` semicolon"],[17,"Comma","","The delimiter set with only the `,` comma"],[11,"new","cssparser","Create a new `DeclarationListParser` for the given `input` and `parser`.",3],[11,"next","","",3],[11,"new_for_stylesheet","","Create a new `RuleListParser` for the given `input` at the top-level of a stylesheet\nand the given `parser`.",4],[11,"new_for_nested_rule","","Same is `new_for_stylesheet`, but should be used for rule lists inside a block\nsuch as the body of an `@media` rule.",4],[11,"next","","",4],[11,"clone","","",6],[11,"fmt","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"clone","","",0],[11,"fmt","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"clone","","",1],[11,"fmt","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",2],[11,"fmt","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"clone","","",9],[11,"fmt","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"clone","","",10],[11,"fmt","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"clone","","",11],[11,"bitor","","",11],[11,"new","","Create a new parser",10],[11,"is_exhausted","","Check whether the input is exhausted. That is, if `.next()` would return a token.",10],[11,"expect_exhausted","","Check whether the input is exhausted. That is, if `.next()` would return a token.\nReturn a `Result` so that the `try!` macro can be used: `try!(input.expect_exhausted())`",10],[11,"position","","Return the current internal state of the parser (including position within the input).",10],[11,"reset","","Restore the internal state of the parser (including position within the input)\nto what was previously saved by the `Parser::position` method.",10],[11,"try","","Execute the given closure, passing it the parser.\nIf the result (returned unchanged) is `Err`,\nthe internal state of the parser  (including position within the input)\nis restored to what it was before the call.",10],[11,"slice","","Return a slice of the CSS input",10],[11,"slice_from","","Return a slice of the CSS input, from the given position to the current one.",10],[11,"current_source_location","","Return the line and column number within the input for the current position.",10],[11,"source_location","","Return the line and column number within the input for the given position.",10],[11,"next","","Return the next token in the input that is neither whitespace or a comment,\nand advance the position accordingly.",10],[11,"next_including_whitespace","","Same as `Parser::next`, but does not skip whitespace tokens.",10],[11,"next_including_whitespace_and_comments","","Same as `Parser::next`, but does not skip whitespace or comment tokens.",10],[11,"parse_entirely","","Have the given closure parse something, then check the the input is exhausted.\nThe result is overridden to `Err(())` if some input remains.",10],[11,"parse_comma_separated","","Parse a list of comma-separated values, all with the same syntax.",10],[11,"parse_nested_block","","Parse the content of a block or function.",10],[11,"parse_until_before","","Limit parsing to until a given delimiter. (E.g. a semicolon for a property value.)",10],[11,"parse_until_after","","Like `parse_until_before`, but also consume the delimiter token.",10],[11,"expect_ident","","Parse a <ident-token> and return the unescaped value.",10],[11,"expect_ident_matching","","Parse a <ident-token> whose unescaped value is an ASCII-insensitive match for the given value.",10],[11,"expect_string","","Parse a <string-token> and return the unescaped value.",10],[11,"expect_ident_or_string","","Parse either a <ident-token> or a <string-token>, and return the unescaped value.",10],[11,"expect_url","","Parse a <url-token> and return the unescaped value.",10],[11,"expect_url_or_string","","Parse either a <url-token> or a <string-token>, and return the unescaped value.",10],[11,"expect_number","","Parse a <number-token> and return the integer value.",10],[11,"expect_integer","","Parse a <number-token> that does not have a fractional part, and return the integer value.",10],[11,"expect_percentage","","Parse a <percentage-token> and return the value.\n`0%` and `100%` map to `0.0` and `1.0` (not `100.0`), respectively.",10],[11,"expect_colon","","Parse a `:` <colon-token>.",10],[11,"expect_semicolon","","Parse a `;` <semicolon-token>.",10],[11,"expect_comma","","Parse a `,` <comma-token>.",10],[11,"expect_delim","","Parse a <delim-token> with the given value.",10],[11,"expect_curly_bracket_block","","Parse a `{ /* ... */ }` curly brackets block.",10],[11,"expect_square_bracket_block","","Parse a `[ /* ... */ ]` square brackets block.",10],[11,"expect_parenthesis_block","","Parse a `( /* ... */ )` parenthesis block.",10],[11,"expect_function","","Parse a <function> token and return its name.",10],[11,"expect_function_matching","","Parse a <function> token whose name is an ASCII-insensitive match for the given value.",10],[11,"eq","","",5],[11,"ne","","",5],[11,"clone","","",5],[11,"to_css","","",5],[11,"eq","","",8],[11,"ne","","",8],[11,"clone","","",8],[11,"to_css","","",8],[11,"fmt","","",5],[11,"fmt","","",8],[11,"parse","","Parse a <color> value, per CSS Color Module Level 3.",8],[11,"to_css","","",6],[11,"new","","Wrap a text writer to create a `CssStringWriter`.",12],[11,"write_str","","",12],[11,"write_char","","",12],[8,"DeclarationParser","","A trait to provide various parsing of declaration values."],[16,"Declaration","cssparser::DeclarationParser","The finished representation of a declaration."],[10,"parse_value","cssparser","Parse the value of a declaration with the given `name`.",13],[8,"QualifiedRuleParser","","A trait to provide various parsing of qualified rules."],[16,"Prelude","cssparser::QualifiedRuleParser","The intermediate representation of a qualified rule prelude."],[16,"QualifiedRule","","The finished representation of a qualified rule."],[11,"parse_prelude","cssparser","Parse the prelude of a qualified rule. For style rules, this is as Selector list.",14],[11,"parse_block","","Parse the content of a `{ /* ... */ }` block for the body of the qualified rule.",14],[8,"AtRuleParser","","A trait to provide various parsing of at-rules."],[16,"Prelude","cssparser::AtRuleParser","The intermediate representation of an at-rule prelude."],[16,"AtRule","","The finished representation of an at-rule."],[11,"parse_prelude","cssparser","Parse the prelude of an at-rule with the given `name`.",15],[11,"parse_block","","Parse the content of a `{ /* ... */ }` block for the body of the at-rule.",15],[11,"rule_without_block","","An `OptionalBlock` prelude was followed by `;`.",15],[8,"ToCss","","Trait for things the can serialize themselves in CSS syntax."],[10,"to_css","","Serialize `self` in CSS syntax, writing to `dest`.",16],[11,"to_css_string","","Serialize `self` in CSS syntax and return a string.",16],[11,"fmt_to_css","","Serialize `self` in CSS syntax and return a result compatible with `std::fmt::Show`.",16],[14,"match_ignore_ascii_case!","","This macro is equivalent to a `match` expression on an `&str` value,\nbut matching is case-insensitive in the ASCII range."],[11,"parse_prelude","","Parse the prelude of an at-rule with the given `name`.",15],[11,"parse_block","","Parse the content of a `{ /* ... */ }` block for the body of the at-rule.",15],[11,"rule_without_block","","An `OptionalBlock` prelude was followed by `;`.",15],[11,"parse_prelude","","Parse the prelude of a qualified rule. For style rules, this is as Selector list.",14],[11,"parse_block","","Parse the content of a `{ /* ... */ }` block for the body of the qualified rule.",14],[11,"to_css_string","","Serialize `self` in CSS syntax and return a string.",16],[11,"fmt_to_css","","Serialize `self` in CSS syntax and return a result compatible with `std::fmt::Show`.",16]],"paths":[[3,"NumericValue"],[3,"PercentageValue"],[3,"SourceLocation"],[3,"DeclarationListParser"],[3,"RuleListParser"],[3,"RGBA"],[4,"Token"],[4,"AtRuleType"],[4,"Color"],[3,"SourcePosition"],[3,"Parser"],[3,"Delimiters"],[3,"CssStringWriter"],[8,"DeclarationParser"],[8,"QualifiedRuleParser"],[8,"AtRuleParser"],[8,"ToCss"]]};
searchIndex['time'] = {"items":[[0,"","time","Simple time handling."],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds."],[12,"sec","","",0],[12,"nsec","","",0],[3,"PreciseTime","","An opaque structure representing a moment in time."],[3,"SteadyTime","","A structure representing a moment in time."],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on),\nalso called a broken-down time value."],[12,"tm_sec","","Seconds after the minute - [0, 60]",1],[12,"tm_min","","Minutes after the hour - [0, 59]",1],[12,"tm_hour","","Hours after midnight - [0, 23]",1],[12,"tm_mday","","Day of the month - [1, 31]",1],[12,"tm_mon","","Months since January - [0, 11]",1],[12,"tm_year","","Years since 1900",1],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1],[12,"tm_yday","","Days since January 1 - [0, 365]",1],[12,"tm_isdst","","Daylight Saving Time flag.",1],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any\nadjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example,\nfor U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display."],[4,"ParseError","",""],[13,"InvalidSecond","","",2],[13,"InvalidMinute","","",2],[13,"InvalidHour","","",2],[13,"InvalidDay","","",2],[13,"InvalidMonth","","",2],[13,"InvalidYear","","",2],[13,"InvalidDayOfWeek","","",2],[13,"InvalidDayOfMonth","","",2],[13,"InvalidDayOfYear","","",2],[13,"InvalidZoneOffset","","",2],[13,"InvalidTime","","",2],[13,"MissingFormatConverter","","",2],[13,"InvalidFormatSpecifier","","",2],[13,"UnexpectedCharacter","","",2],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z."],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch."],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch."],[5,"tzset","",""],[5,"empty_tm","",""],[5,"at_utc","","Returns the specified time in UTC"],[5,"now_utc","","Returns the current time in UTC"],[5,"at","","Returns the specified time in the local timezone"],[5,"now","","Returns the current time in the local timezone"],[5,"strptime","","Parses the time from the string according to the format string."],[5,"strftime","","Formats the time according to the format string."],[11,"fmt","","",0],[11,"cmp","","",0],[11,"partial_cmp","","",0],[11,"lt","","",0],[11,"le","","",0],[11,"gt","","",0],[11,"ge","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"clone","","",0],[11,"new","","",0],[6,"Output","",""],[11,"add","","",0],[6,"Output","",""],[11,"sub","","",0],[6,"Output","",""],[11,"sub","","",0],[11,"clone","","",3],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",3],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",3],[11,"fmt","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"cmp","","",4],[11,"partial_cmp","","",4],[11,"lt","","",4],[11,"le","","",4],[11,"gt","","",4],[11,"ge","","",4],[11,"clone","","",4],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",4],[11,"fmt","","",4],[6,"Output","",""],[11,"sub","","",4],[6,"Output","",""],[11,"sub","","",4],[6,"Output","",""],[11,"add","","",4],[11,"fmt","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[6,"Output","",""],[11,"add","","The resulting Tm is in UTC.",1],[6,"Output","",""],[11,"sub","","The resulting Tm is in UTC.",1],[11,"partial_cmp","","",1],[11,"cmp","","",1],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1],[11,"to_local","","Convert time to the local timezone",1],[11,"to_utc","","Convert time to the UTC",1],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1],[11,"strftime","","Formats the time according to the format string.",1],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1],[11,"fmt","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"fmt","","",2],[11,"fmt","","",5],[11,"fmt","","",5]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"TmFmt"]]};
searchIndex['skia'] = {"items":[[0,"","skia",""],[0,"skia","",""],[5,"SkiaSkNativeSharedGLContextCreate","skia::skia",""],[5,"SkiaSkNativeSharedGLContextRetain","",""],[5,"SkiaSkNativeSharedGLContextRelease","",""],[5,"SkiaSkNativeSharedGLContextGetFBOID","",""],[5,"SkiaSkNativeSharedGLContextStealSurface","",""],[5,"SkiaSkNativeSharedGLContextGetGrContext","",""],[5,"SkiaSkNativeSharedGLContextMakeCurrent","",""],[5,"SkiaSkNativeSharedGLContextFlush","",""],[6,"SkiaSkNativeSharedGLContextRef","",""],[6,"SkiaGrContextRef","",""],[6,"SkiaGrGLSharedSurfaceRef","",""],[6,"SkiaGrGLNativeContextRef","",""]],"paths":[]};
searchIndex['phf_generator'] = {"items":[[0,"","phf_generator",""],[3,"HashState","",""],[12,"key","","",0],[12,"disps","","",0],[12,"map","","",0],[5,"generate_hash","",""]],"paths":[[3,"HashState"]]};
searchIndex['uuid'] = {"items":[[0,"","uuid","Generate and parse UUIDs"],[3,"Uuid","","A Universally Unique Identifier (UUID)"],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm"],[13,"Mac","","Version 1: MAC address",0],[13,"Dce","","Version 2: DCE Security",0],[13,"Md5","","Version 3: MD5 hash",0],[13,"Random","","Version 4: Random",0],[13,"Sha1","","Version 5: SHA-1 hash",0],[4,"UuidVariant","","The reserved variants of UUIDs"],[13,"NCS","","Reserved by the NCS for backward compatibility",1],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1],[13,"Future","","Reserved for future expansion",1],[4,"ParseError","","Error details for string parsing failures"],[13,"InvalidLength","","",2],[13,"InvalidCharacter","","",2],[13,"InvalidGroups","","",2],[13,"InvalidGroupLength","","",2],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID"],[11,"eq","","",0],[11,"ne","","",0],[11,"eq","","",1],[11,"ne","","",1],[11,"fmt","","",3],[11,"hash","","",3],[11,"fmt","","",2],[11,"fmt","","",2],[11,"nil","","Returns a nil or empty UUID (containing all zeroes)",3],[11,"new","","Create a new UUID of the specified version",3],[11,"new_v4","","Creates a new random UUID",3],[11,"from_fields","","Creates a UUID using the supplied field values",3],[11,"from_bytes","","Creates a UUID using the supplied bytes",3],[11,"get_variant","","Returns the variant of the UUID structure",3],[11,"get_version_num","","Returns the version number of the UUID",3],[11,"get_version","","Returns the version of the UUID",3],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",3],[11,"to_simple_string","","Returns the UUID as a string of 16 hexadecimal digits",3],[11,"to_hyphenated_string","","Returns a string of hexadecimal digits, separated into groups with a hyphen.",3],[11,"to_urn_string","","Returns the UUID formatted as a full URN string",3],[11,"parse_str","","Parses a UUID from a string of hexadecimal digits with optional hyphens",3],[11,"is_nil","","Tests if the UUID is nil",3],[11,"default","","Returns the nil UUID, which is all zeroes",3],[11,"clone","","Returns a copy of the UUID",3],[6,"Err","",""],[11,"from_str","","Parse a hex string and interpret as a UUID",3],[11,"fmt","","",3],[11,"eq","","",3],[11,"encode","","Encode a UUID as a hyphenated string",3],[11,"decode","","Decode a UUID from a string",3],[11,"rand","","",3]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"]]};
searchIndex['core_graphics'] = {"items":[],"paths":[]};
searchIndex['gl_generator'] = {"items":[[0,"","gl_generator","# gl_generator"],[5,"generate_bindings","","Public function that generates Rust source code."],[0,"generators","",""],[5,"gen_type_aliases","gl_generator::generators","Generates all the type aliases for a namespace."],[5,"gen_parameters","","Generates the list of Rust `Arg`s that a `Cmd` requires."],[5,"gen_return_type","","Generates the Rust return type of a `Cmd`."],[5,"gen_symbol_name","","Generates the native symbol name of a `Cmd`."],[0,"global_gen","",""],[3,"GlobalGenerator","gl_generator::generators::global_gen",""],[11,"write","","",0],[0,"static_gen","gl_generator::generators",""],[3,"StaticGenerator","gl_generator::generators::static_gen",""],[11,"write","","",1],[0,"struct_gen","gl_generator::generators",""],[3,"StructGenerator","gl_generator::generators::struct_gen",""],[11,"write","","",2],[0,"static_struct_gen","gl_generator::generators",""],[3,"StaticStructGenerator","gl_generator::generators::static_struct_gen",""],[11,"write","","",3],[8,"Generator","gl_generator::generators","Trait for a bindings generator."],[10,"write","","Builds the GL bindings.",4],[0,"registry","gl_generator",""],[3,"Registry","gl_generator::registry",""],[12,"groups","","",5],[12,"enums","","",5],[12,"cmds","","",5],[12,"features","","",5],[12,"extensions","","",5],[12,"aliases","","",5],[3,"EnumIterator","",""],[3,"CmdIterator","",""],[3,"Group","",""],[12,"name","","",6],[12,"enums","","",6],[3,"EnumNs","",""],[12,"namespace","","",7],[12,"group","","",7],[12,"ty","","",7],[12,"start","","",7],[12,"end","","",7],[12,"vendor","","",7],[12,"comment","","",7],[12,"defs","","",7],[3,"Enum","",""],[12,"ident","","",8],[12,"value","","",8],[12,"alias","","",8],[12,"ty","","",8],[3,"CmdNs","",""],[12,"namespace","","",9],[12,"defs","","",9],[3,"Binding","",""],[12,"ident","","",10],[12,"ty","","",10],[12,"group","","",10],[3,"Cmd","",""],[12,"proto","","",11],[12,"params","","",11],[12,"is_safe","","True if this command doesn't take any pointers.",11],[12,"alias","","",11],[12,"vecequiv","","",11],[12,"glx","","",11],[3,"Feature","",""],[12,"api","","",12],[12,"name","","",12],[12,"number","","",12],[12,"requires","","",12],[12,"removes","","",12],[3,"Require","",""],[12,"comment","","",13],[12,"enums","","A reference to the earlier types, by name",13],[12,"commands","","A reference to the earlier types, by name",13],[3,"Remove","",""],[12,"profile","","",14],[12,"comment","","",14],[12,"enums","","A reference to the earlier types, by name",14],[12,"commands","","A reference to the earlier types, by name",14],[3,"Extension","",""],[12,"name","","",15],[12,"supported","","which apis this extension is defined for (see Feature.api)",15],[12,"requires","","",15],[3,"GlxOpcode","",""],[12,"ty","","",16],[12,"opcode","","",16],[12,"name","","",16],[12,"comment","","",16],[3,"Filter","",""],[12,"fallbacks","","",17],[12,"extensions","","",17],[12,"profile","","",17],[12,"version","","",17],[12,"api","","",17],[4,"Ns","",""],[13,"Gl","","",18],[13,"Glx","","",18],[13,"Wgl","","",18],[13,"Egl","","",18],[13,"Gles1","","",18],[13,"Gles2","","",18],[4,"Fallbacks","",""],[13,"All","","",19],[13,"None","","",19],[11,"fmt_struct_name","","",18],[6,"Err","",""],[11,"from_str","","",18],[11,"fmt","","",18],[11,"from_xml","","Generate a registry from the supplied XML string",5],[11,"get_tys","","Returns a set of all the types used in the supplied registry. This is useful\nfor working out what conversions are needed for the specific registry.",5],[11,"enum_iter","","",5],[11,"cmd_iter","","",5],[6,"Output","",""],[11,"add","","",5],[6,"Item","",""],[11,"next","","",20],[6,"Item","",""],[11,"next","","",21],[11,"clone","","",12],[11,"clone","","",13],[11,"clone","","",14],[11,"clone","","",15]],"paths":[[3,"GlobalGenerator"],[3,"StaticGenerator"],[3,"StructGenerator"],[3,"StaticStructGenerator"],[8,"Generator"],[3,"Registry"],[3,"Group"],[3,"EnumNs"],[3,"Enum"],[3,"CmdNs"],[3,"Binding"],[3,"Cmd"],[3,"Feature"],[3,"Require"],[3,"Remove"],[3,"Extension"],[3,"GlxOpcode"],[3,"Filter"],[4,"Ns"],[4,"Fallbacks"],[3,"EnumIterator"],[3,"CmdIterator"]]};
searchIndex['fontconfig-sys'] = {"items":[],"paths":[]};
searchIndex['encoding'] = {"items":[[0,"","encoding","# Encoding 0.2.25"],[0,"types","","Interface to the character encoding."],[3,"CodecError","encoding::types","Error information from either encoder or decoder."],[12,"upto","","The byte position of the first remaining byte, with respect to the *current* input.\nFor the `finish` call, this should be no more than zero (since there is no input).\nIt can be negative if the remaining byte is in the prior inputs,\nas long as the remaining byte is not yet processed.\nThe caller should feed the bytes starting from this point again\nin order to continue encoding or decoding after an error.",0],[12,"cause","","A human-readable cause of the error.",0],[4,"DecoderTrap","","Trap, which handles decoder errors."],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG \"fatal\" error algorithm.",1],[13,"Replace","","Replaces an error with a U+FFFD (decoder).\nCorresponds to WHATWG \"replacement\" error algorithm.",1],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",1],[13,"Call","","Calls given function to handle decoder errors.\nThe function is given the current decoder, input and output writer,\nand should return true only when it is fine to keep going.",1],[4,"EncoderTrap","",""],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG \"fatal\" error algorithm.",2],[13,"Replace","","Replaces an error with `?` in given encoding.\nNote that this fails when `?` cannot be represented in given encoding.\nCorresponds to WHATWG \"URL\" error algorithms.",2],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",2],[13,"NcrEscape","","Replaces an error with XML numeric character references (e.g. `&#1234;`).\nThe encoder trap fails when NCRs cannot be represented in given encoding.\nCorresponds to WHATWG \"<form>\" error algorithms.",2],[13,"Call","","Calls given function to handle encoder errors.\nThe function is given the current encoder, input and output writer,\nand should return true only when it is fine to keep going.",2],[5,"decode","","Determine the encoding by looking for a Byte Order Mark (BOM)\nand decoded a single string in memory.\nReturn the result and the used encoding."],[6,"EncodingRef","","A trait object using dynamic dispatch which is a sendable reference to the encoding,\nfor code where the encoding is not known at compile-time."],[6,"EncoderTrapFunc","","A type of the bare function in `EncoderTrap` values."],[6,"DecoderTrapFunc","","A type of the bare function in `DecoderTrap` values."],[8,"ByteWriter","","Byte writer used by encoders. In most cases this will be an owned vector of `u8`."],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawEncoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",3],[10,"write_byte","","Writes a single byte.",3],[10,"write_bytes","","Writes a number of bytes.",3],[8,"StringWriter","","String writer used by decoders. In most cases this will be an owned string."],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawDecoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",4],[10,"write_char","","Writes a single character.",4],[10,"write_str","","Writes a string.",4],[8,"RawEncoder","","Encoder converting a Unicode string into a byte sequence.\nThis is a lower level interface, and normally `Encoding::encode` should be used instead."],[10,"from_self","","Creates a fresh `RawEncoder` instance which parameters are same as `self`.",5],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. U+0000 through U+007F always map to bytes 00 through 7F and nothing else.",5],[10,"raw_feed","","Feeds given portion of string to the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns a byte offset to the first unprocessed character\n(that can be zero when the first such character appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",5],[10,"raw_finish","","Finishes the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns optional error information (None means success).\n`remaining` value of the error information, if any, is always an empty string.",5],[8,"RawDecoder","","Decoder converting a byte sequence into a Unicode string.\nThis is a lower level interface, and normally `Encoding::decode` should be used instead."],[10,"from_self","","Creates a fresh `RawDecoder` instance which parameters are same as `self`.",6],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. bytes 00 through 7F always map to U+0000 through U+007F and nothing else.",6],[10,"raw_feed","","Feeds given portion of byte sequence to the encoder,\npushes the a decoded string at the end of the given output,\nand returns an offset to the first unprocessed byte\n(that can be zero when the first such byte appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",6],[10,"raw_finish","","Finishes the decoder,\npushes the a decoded string at the end of the given output,\nand returns optional error information (None means success).",6],[8,"Encoding","","Character encoding."],[10,"name","","Returns the canonical name of given encoding.\nThis name is guaranteed to be unique across built-in encodings,\nbut it is not normative and would be at most arbitrary.",7],[11,"whatwg_name","","Returns a name of given encoding defined in the WHATWG Encoding standard, if any.\nThis name often differs from `name` due to the compatibility reason.",7],[10,"raw_encoder","","Creates a new encoder.",7],[10,"raw_decoder","","Creates a new decoder.",7],[11,"encode","","An easy-to-use interface to `RawEncoder`.\nOn the encoder error `trap` is called,\nwhich may return a replacement sequence to continue processing,\nor a failure to return the error.",7],[11,"decode","","An easy-to-use interface to `RawDecoder`.\nOn the decoder error `trap` is called,\nwhich may return a replacement string to continue processing,\nor a failure to return the error.",7],[11,"writer_hint","collections::vec","",8],[11,"write_byte","","",8],[11,"write_bytes","","",8],[11,"writer_hint","collections::string","",9],[11,"write_char","","",9],[11,"write_str","","",9],[0,"codec","encoding","Codec implementations."],[0,"error","encoding::codec","A placeholder encoding that returns encoder/decoder error for every case."],[3,"ErrorEncoding","encoding::codec::error","An encoding that returns encoder/decoder error for every case."],[3,"ErrorEncoder","","An encoder that always returns error."],[3,"ErrorDecoder","","A decoder that always returns error."],[11,"clone","","",10],[11,"name","","",10],[11,"raw_encoder","","",10],[11,"raw_decoder","","",10],[11,"clone","","",11],[11,"new","","",11],[11,"from_self","","",11],[11,"raw_feed","","",11],[11,"raw_finish","","",11],[11,"clone","","",12],[11,"new","","",12],[11,"from_self","","",12],[11,"raw_feed","","",12],[11,"raw_finish","","",12],[0,"ascii","encoding::codec","7-bit ASCII encoding."],[3,"ASCIIEncoding","encoding::codec::ascii","ASCII, also known as ISO/IEC 646:US."],[3,"ASCIIEncoder","","An encoder for ASCII."],[3,"ASCIIDecoder","","A decoder for ASCII."],[11,"clone","","",13],[11,"name","","",13],[11,"raw_encoder","","",13],[11,"raw_decoder","","",13],[11,"clone","","",14],[11,"new","","",14],[11,"from_self","","",14],[11,"is_ascii_compatible","","",14],[11,"raw_feed","","",14],[11,"raw_finish","","",14],[11,"clone","","",15],[11,"new","","",15],[11,"from_self","","",15],[11,"is_ascii_compatible","","",15],[11,"raw_feed","","",15],[11,"raw_finish","","",15],[0,"singlebyte","encoding::codec","Common codec implementation for single-byte encodings."],[3,"SingleByteEncoding","encoding::codec::singlebyte","A common framework for single-byte encodings based on ASCII."],[12,"name","","",16],[12,"whatwg_name","","",16],[12,"index_forward","","",16],[12,"index_backward","","",16],[3,"SingleByteEncoder","","An encoder for single-byte encodings based on ASCII."],[3,"SingleByteDecoder","","A decoder for single-byte encodings based on ASCII."],[0,"iso_8859_1","","Algorithmic mapping for ISO 8859-1."],[5,"forward","encoding::codec::singlebyte::iso_8859_1",""],[5,"backward","",""],[11,"name","encoding::codec::singlebyte","",16],[11,"whatwg_name","","",16],[11,"raw_encoder","","",16],[11,"raw_decoder","","",16],[11,"clone","","",17],[11,"new","","",17],[11,"from_self","","",17],[11,"is_ascii_compatible","","",17],[11,"raw_feed","","",17],[11,"raw_finish","","",17],[11,"clone","","",18],[11,"new","","",18],[11,"from_self","","",18],[11,"is_ascii_compatible","","",18],[11,"raw_feed","","",18],[11,"raw_finish","","",18],[0,"utf_8","encoding::codec","UTF-8, the universal encoding."],[3,"UTF8Encoding","encoding::codec::utf_8","UTF-8 (UCS Transformation Format, 8-bit)."],[3,"UTF8Encoder","","An encoder for UTF-8."],[3,"UTF8Decoder","","A decoder for UTF-8."],[5,"from_utf8","","Almost equivalent to `std::str::from_utf8`.\nThis function is provided for the fair benchmark against the stdlib's UTF-8 conversion\nfunctions, as rust-encoding always allocates a new string."],[11,"clone","","",19],[11,"name","","",19],[11,"whatwg_name","","",19],[11,"raw_encoder","","",19],[11,"raw_decoder","","",19],[11,"clone","","",20],[11,"new","","",20],[11,"from_self","","",20],[11,"is_ascii_compatible","","",20],[11,"raw_feed","","",20],[11,"raw_finish","","",20],[11,"clone","","",21],[11,"new","","",21],[11,"from_self","","",21],[11,"is_ascii_compatible","","",21],[11,"raw_feed","","",21],[11,"raw_finish","","",21],[0,"utf_16","encoding::codec","UTF-16."],[3,"Little","encoding::codec::utf_16","An implementation type for little endian."],[3,"Big","","An implementation type for big endian."],[3,"UTF16Encoding","","UTF-16 (UCS Transformation Format, 16-bit)."],[3,"UTF16Encoder","","An encoder for UTF-16."],[3,"UTF16Decoder","","A decoder for UTF-16."],[6,"UTF16LEEncoding","","A type for UTF-16 in little endian."],[6,"UTF16BEEncoding","","A type for UTF-16 in big endian."],[17,"UTF_16LE_ENCODING","","An instance for UTF-16 in little endian."],[17,"UTF_16BE_ENCODING","","An instance for UTF-16 in big endian."],[11,"clone","","",22],[11,"clone","","",23],[11,"clone","","",24],[11,"name","","",24],[11,"whatwg_name","","",24],[11,"raw_encoder","","",24],[11,"raw_decoder","","",24],[11,"clone","","",25],[11,"from_self","","",25],[11,"raw_feed","","",25],[11,"raw_finish","","",25],[11,"new","","",26],[11,"from_self","","",26],[11,"raw_feed","","",26],[11,"raw_finish","","",26],[0,"korean","encoding::codec","Legacy Korean encodings based on KS X 1001."],[3,"Windows949Encoding","encoding::codec::korean","Windows code page 949."],[3,"Windows949Encoder","","An encoder for Windows code page 949."],[3,"Windows949Decoder","","A decoder for Windows code page 949."],[11,"clone","","",27],[11,"name","","",27],[11,"whatwg_name","","",27],[11,"raw_encoder","","",27],[11,"raw_decoder","","",27],[11,"clone","","",28],[11,"new","","",28],[11,"from_self","","",28],[11,"is_ascii_compatible","","",28],[11,"raw_feed","","",28],[11,"raw_finish","","",28],[11,"clone","","",29],[11,"new","","",29],[11,"from_self","","",29],[11,"is_ascii_compatible","","",29],[11,"raw_feed","","",29],[11,"raw_finish","","",29],[0,"japanese","encoding::codec","Legacy Japanese encodings based on JIS X 0208 and JIS X 0212."],[3,"EUCJPEncoding","encoding::codec::japanese","EUC-JP. (XXX with asymmetric JIS X 0212 support)"],[3,"EUCJPEncoder","","An encoder for EUC-JP with unused G3 character set."],[3,"EUCJP0212Decoder","","A decoder for EUC-JP with JIS X 0212 in G3."],[3,"Windows31JEncoding","","Windows code page 932, i.e. Shift_JIS with IBM/NEC extensions."],[3,"Windows31JEncoder","","An encoder for Shift_JIS with IBM/NEC extensions."],[3,"Windows31JDecoder","","A decoder for Shift_JIS with IBM/NEC extensions."],[3,"ISO2022JPEncoding","","ISO-2022-JP."],[3,"ISO2022JPEncoder","","An encoder for ISO-2022-JP without JIS X 0212/0213 support."],[3,"ISO2022JPDecoder","","A decoder for ISO-2022-JP with JIS X 0212 support."],[11,"clone","","",30],[11,"name","","",30],[11,"whatwg_name","","",30],[11,"raw_encoder","","",30],[11,"raw_decoder","","",30],[11,"clone","","",31],[11,"new","","",31],[11,"from_self","","",31],[11,"is_ascii_compatible","","",31],[11,"raw_feed","","",31],[11,"raw_finish","","",31],[11,"clone","","",32],[11,"new","","",32],[11,"from_self","","",32],[11,"is_ascii_compatible","","",32],[11,"raw_feed","","",32],[11,"raw_finish","","",32],[11,"clone","","",33],[11,"name","","",33],[11,"whatwg_name","","",33],[11,"raw_encoder","","",33],[11,"raw_decoder","","",33],[11,"clone","","",34],[11,"new","","",34],[11,"from_self","","",34],[11,"is_ascii_compatible","","",34],[11,"raw_feed","","",34],[11,"raw_finish","","",34],[11,"clone","","",35],[11,"new","","",35],[11,"from_self","","",35],[11,"is_ascii_compatible","","",35],[11,"raw_feed","","",35],[11,"raw_finish","","",35],[11,"clone","","",36],[11,"name","","",36],[11,"whatwg_name","","",36],[11,"raw_encoder","","",36],[11,"raw_decoder","","",36],[11,"clone","","",37],[11,"new","","",37],[11,"from_self","","",37],[11,"is_ascii_compatible","","",37],[11,"raw_feed","","",37],[11,"raw_finish","","",37],[11,"clone","","",38],[11,"new","","",38],[11,"from_self","","",38],[11,"is_ascii_compatible","","",38],[11,"raw_feed","","",38],[11,"raw_finish","","",38],[0,"simpchinese","encoding::codec","Legacy simplified Chinese encodings based on GB 2312 and GB 18030."],[3,"GB18030Encoding","encoding::codec::simpchinese","GB 18030-2005."],[3,"GB18030Encoder","","An encoder for GB 18030."],[3,"GB18030Decoder","","A decoder for GB 18030."],[3,"HZEncoding","","HZ. (RFC 1843)"],[3,"HZEncoder","","An encoder for HZ."],[3,"HZDecoder","","A decoder for HZ."],[11,"clone","","",39],[11,"name","","",39],[11,"whatwg_name","","",39],[11,"raw_encoder","","",39],[11,"raw_decoder","","",39],[11,"clone","","",40],[11,"new","","",40],[11,"from_self","","",40],[11,"is_ascii_compatible","","",40],[11,"raw_feed","","",40],[11,"raw_finish","","",40],[11,"clone","","",41],[11,"new","","",41],[11,"from_self","","",41],[11,"is_ascii_compatible","","",41],[11,"raw_feed","","",41],[11,"raw_finish","","",41],[11,"clone","","",42],[11,"name","","",42],[11,"whatwg_name","","",42],[11,"raw_encoder","","",42],[11,"raw_decoder","","",42],[11,"clone","","",43],[11,"new","","",43],[11,"from_self","","",43],[11,"is_ascii_compatible","","",43],[11,"raw_feed","","",43],[11,"raw_finish","","",43],[11,"clone","","",44],[11,"new","","",44],[11,"from_self","","",44],[11,"is_ascii_compatible","","",44],[11,"raw_feed","","",44],[11,"raw_finish","","",44],[0,"tradchinese","encoding::codec","Legacy traditional Chinese encodings."],[3,"BigFive2003Encoding","encoding::codec::tradchinese","Big5-2003 with common extensions. (XXX with asymmetric HKSCS-2008 support)"],[3,"BigFive2003Encoder","","An encoder for Big5-2003."],[3,"BigFive2003HKSCS2008Decoder","","A decoder for Big5-2003 with HKSCS-2008 extension."],[11,"clone","","",45],[11,"name","","",45],[11,"whatwg_name","","",45],[11,"raw_encoder","","",45],[11,"raw_decoder","","",45],[11,"clone","","",46],[11,"new","","",46],[11,"from_self","","",46],[11,"is_ascii_compatible","","",46],[11,"raw_feed","","",46],[11,"raw_finish","","",46],[11,"clone","","",47],[11,"new","","",47],[11,"from_self","","",47],[11,"is_ascii_compatible","","",47],[11,"raw_feed","","",47],[11,"raw_finish","","",47],[0,"whatwg","encoding::codec","Asymmetric or special encoding constructions required by the WHATWG Encoding standard."],[3,"EncoderOnlyUTF8Encoding","encoding::codec::whatwg","Replacement encoding used to solve a particular attack vector due to mismatching server and\nclient supports for encodings. It is rarely useful outside."],[0,"x_user_defined","","Algorithmic mapping for `x-user-defined` encoding."],[5,"forward","encoding::codec::whatwg::x_user_defined",""],[5,"backward","",""],[11,"clone","encoding::codec::whatwg","",48],[11,"name","","",48],[11,"whatwg_name","","",48],[11,"raw_encoder","","",48],[11,"raw_decoder","","",48],[0,"all","encoding","A list of all supported encodings. Useful for encodings fixed in the compile time."],[0,"whatwg","encoding::all",""],[7,"X_USER_DEFINED","encoding::all::whatwg",""],[7,"ISO_8859_8_I","",""],[7,"REPLACEMENT","",""],[7,"ERROR","encoding::all",""],[7,"ASCII","",""],[7,"IBM866","",""],[7,"ISO_8859_1","",""],[7,"ISO_8859_2","",""],[7,"ISO_8859_3","",""],[7,"ISO_8859_4","",""],[7,"ISO_8859_5","",""],[7,"ISO_8859_6","",""],[7,"ISO_8859_7","",""],[7,"ISO_8859_8","",""],[7,"ISO_8859_10","",""],[7,"ISO_8859_13","",""],[7,"ISO_8859_14","",""],[7,"ISO_8859_15","",""],[7,"ISO_8859_16","",""],[7,"KOI8_R","",""],[7,"KOI8_U","",""],[7,"MAC_ROMAN","",""],[7,"WINDOWS_874","",""],[7,"WINDOWS_1250","",""],[7,"WINDOWS_1251","",""],[7,"WINDOWS_1252","",""],[7,"WINDOWS_1253","",""],[7,"WINDOWS_1254","",""],[7,"WINDOWS_1255","",""],[7,"WINDOWS_1256","",""],[7,"WINDOWS_1257","",""],[7,"WINDOWS_1258","",""],[7,"MAC_CYRILLIC","",""],[7,"UTF_8","",""],[7,"UTF_16LE","",""],[7,"UTF_16BE","",""],[7,"WINDOWS_949","",""],[7,"EUC_JP","",""],[7,"WINDOWS_31J","",""],[7,"ISO_2022_JP","",""],[7,"GB18030","",""],[7,"HZ","",""],[7,"BIG5_2003","",""],[0,"label","encoding","An interface for retrieving an encoding (or a set of encodings) from a string/numeric label."],[5,"encoding_from_whatwg_label","encoding::label","Returns an encoding from given label, defined in the WHATWG Encoding standard, if any.\nImplements \"get an encoding\" algorithm: http://encoding.spec.whatwg.org/#concept-encoding-get"],[5,"encoding_from_windows_code_page","","Returns an encoding from Windows code page number.\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/dd317756%28v=vs.85%29.aspx\nSometimes it can return a *superset* of the requested encoding, e.g. for several CJK encodings."]],"paths":[[3,"CodecError"],[4,"DecoderTrap"],[4,"EncoderTrap"],[8,"ByteWriter"],[8,"StringWriter"],[8,"RawEncoder"],[8,"RawDecoder"],[8,"Encoding"],[3,"Vec"],[3,"String"],[3,"ErrorEncoding"],[3,"ErrorEncoder"],[3,"ErrorDecoder"],[3,"ASCIIEncoding"],[3,"ASCIIEncoder"],[3,"ASCIIDecoder"],[3,"SingleByteEncoding"],[3,"SingleByteEncoder"],[3,"SingleByteDecoder"],[3,"UTF8Encoding"],[3,"UTF8Encoder"],[3,"UTF8Decoder"],[3,"Little"],[3,"Big"],[3,"UTF16Encoding"],[3,"UTF16Encoder"],[3,"UTF16Decoder"],[3,"Windows949Encoding"],[3,"Windows949Encoder"],[3,"Windows949Decoder"],[3,"EUCJPEncoding"],[3,"EUCJPEncoder"],[3,"EUCJP0212Decoder"],[3,"Windows31JEncoding"],[3,"Windows31JEncoder"],[3,"Windows31JDecoder"],[3,"ISO2022JPEncoding"],[3,"ISO2022JPEncoder"],[3,"ISO2022JPDecoder"],[3,"GB18030Encoding"],[3,"GB18030Encoder"],[3,"GB18030Decoder"],[3,"HZEncoding"],[3,"HZEncoder"],[3,"HZDecoder"],[3,"BigFive2003Encoding"],[3,"BigFive2003Encoder"],[3,"BigFive2003HKSCS2008Decoder"],[3,"EncoderOnlyUTF8Encoding"]]};
searchIndex['harfbuzz'] = {"items":[[0,"","harfbuzz",""],[3,"struct__hb_user_data_key_t","",""],[3,"struct__hb_glyph_info_t","",""],[12,"codepoint","","",0],[12,"mask","","",0],[12,"cluster","","",0],[3,"struct__hb_glyph_position_t","",""],[12,"x_advance","","",1],[12,"y_advance","","",1],[12,"x_offset","","",1],[12,"y_offset","","",1],[3,"struct__hb_glyph_extents_t","",""],[3,"struct__hb_feature_t","",""],[12,"_tag","","",2],[12,"_value","","",2],[12,"_start","","",2],[12,"_end","","",2],[5,"RUST_hb_tag_from_string","",""],[5,"RUST_hb_direction_from_string","",""],[5,"RUST_hb_direction_to_string","",""],[5,"RUST_hb_language_from_string","",""],[5,"RUST_hb_language_to_string","",""],[5,"RUST_hb_language_get_default","",""],[5,"RUST_hb_script_from_iso15924_tag","",""],[5,"RUST_hb_script_from_string","",""],[5,"RUST_hb_script_to_iso15924_tag","",""],[5,"RUST_hb_script_get_horizontal_direction","",""],[5,"RUST_hb_blob_create","",""],[5,"RUST_hb_blob_create_sub_blob","",""],[5,"RUST_hb_blob_get_empty","",""],[5,"RUST_hb_blob_reference","",""],[5,"RUST_hb_blob_destroy","",""],[5,"RUST_hb_blob_set_user_data","",""],[5,"RUST_hb_blob_get_user_data","",""],[5,"RUST_hb_blob_make_immutable","",""],[5,"RUST_hb_blob_is_immutable","",""],[5,"RUST_hb_blob_get_length","",""],[5,"RUST_hb_blob_get_data","",""],[5,"RUST_hb_blob_get_data_writable","",""],[5,"RUST_hb_unicode_funcs_get_default","",""],[5,"RUST_hb_unicode_funcs_create","",""],[5,"RUST_hb_unicode_funcs_get_empty","",""],[5,"RUST_hb_unicode_funcs_reference","",""],[5,"RUST_hb_unicode_funcs_destroy","",""],[5,"RUST_hb_unicode_funcs_set_user_data","",""],[5,"RUST_hb_unicode_funcs_get_user_data","",""],[5,"RUST_hb_unicode_funcs_make_immutable","",""],[5,"RUST_hb_unicode_funcs_is_immutable","",""],[5,"RUST_hb_unicode_funcs_get_parent","",""],[5,"RUST_hb_unicode_funcs_set_combining_class_func","",""],[5,"RUST_hb_unicode_funcs_set_eastasian_width_func","",""],[5,"RUST_hb_unicode_funcs_set_general_category_func","",""],[5,"RUST_hb_unicode_funcs_set_mirroring_func","",""],[5,"RUST_hb_unicode_funcs_set_script_func","",""],[5,"RUST_hb_unicode_funcs_set_compose_func","",""],[5,"RUST_hb_unicode_funcs_set_decompose_func","",""],[5,"RUST_hb_unicode_combining_class","",""],[5,"RUST_hb_unicode_eastasian_width","",""],[5,"RUST_hb_unicode_general_category","",""],[5,"RUST_hb_unicode_mirroring","",""],[5,"RUST_hb_unicode_script","",""],[5,"RUST_hb_unicode_compose","",""],[5,"RUST_hb_unicode_decompose","",""],[5,"RUST_hb_buffer_create","",""],[5,"RUST_hb_buffer_get_empty","",""],[5,"RUST_hb_buffer_reference","",""],[5,"RUST_hb_buffer_destroy","",""],[5,"RUST_hb_buffer_set_user_data","",""],[5,"RUST_hb_buffer_get_user_data","",""],[5,"RUST_hb_buffer_set_unicode_funcs","",""],[5,"RUST_hb_buffer_get_unicode_funcs","",""],[5,"RUST_hb_buffer_set_direction","",""],[5,"RUST_hb_buffer_get_direction","",""],[5,"RUST_hb_buffer_set_script","",""],[5,"RUST_hb_buffer_get_script","",""],[5,"RUST_hb_buffer_set_language","",""],[5,"RUST_hb_buffer_get_language","",""],[5,"RUST_hb_buffer_reset","",""],[5,"RUST_hb_buffer_pre_allocate","",""],[5,"RUST_hb_buffer_allocation_successful","",""],[5,"RUST_hb_buffer_reverse","",""],[5,"RUST_hb_buffer_reverse_clusters","",""],[5,"RUST_hb_buffer_guess_properties","",""],[5,"RUST_hb_buffer_add","",""],[5,"RUST_hb_buffer_add_utf8","",""],[5,"RUST_hb_buffer_add_utf16","",""],[5,"RUST_hb_buffer_add_utf32","",""],[5,"RUST_hb_buffer_set_length","",""],[5,"RUST_hb_buffer_get_length","",""],[5,"RUST_hb_buffer_get_glyph_infos","",""],[5,"RUST_hb_buffer_get_glyph_positions","",""],[5,"RUST_hb_face_create","",""],[5,"RUST_hb_face_create_for_tables","",""],[5,"RUST_hb_face_get_empty","",""],[5,"RUST_hb_face_reference","",""],[5,"RUST_hb_face_destroy","",""],[5,"RUST_hb_face_set_user_data","",""],[5,"RUST_hb_face_get_user_data","",""],[5,"RUST_hb_face_make_immutable","",""],[5,"RUST_hb_face_is_immutable","",""],[5,"RUST_hb_face_reference_table","",""],[5,"RUST_hb_face_reference_blob","",""],[5,"RUST_hb_face_set_index","",""],[5,"RUST_hb_face_get_index","",""],[5,"RUST_hb_face_set_upem","",""],[5,"RUST_hb_face_get_upem","",""],[5,"RUST_hb_font_funcs_create","",""],[5,"RUST_hb_font_funcs_get_empty","",""],[5,"RUST_hb_font_funcs_reference","",""],[5,"RUST_hb_font_funcs_destroy","",""],[5,"RUST_hb_font_funcs_set_user_data","",""],[5,"RUST_hb_font_funcs_get_user_data","",""],[5,"RUST_hb_font_funcs_make_immutable","",""],[5,"RUST_hb_font_funcs_is_immutable","",""],[5,"RUST_hb_font_funcs_set_glyph_func","",""],[5,"RUST_hb_font_funcs_set_glyph_h_advance_func","",""],[5,"RUST_hb_font_funcs_set_glyph_v_advance_func","",""],[5,"RUST_hb_font_funcs_set_glyph_h_origin_func","",""],[5,"RUST_hb_font_funcs_set_glyph_v_origin_func","",""],[5,"RUST_hb_font_funcs_set_glyph_h_kerning_func","",""],[5,"RUST_hb_font_funcs_set_glyph_v_kerning_func","",""],[5,"RUST_hb_font_funcs_set_glyph_extents_func","",""],[5,"RUST_hb_font_funcs_set_glyph_contour_point_func","",""],[5,"RUST_hb_font_get_glyph","",""],[5,"RUST_hb_font_get_glyph_h_advance","",""],[5,"RUST_hb_font_get_glyph_v_advance","",""],[5,"RUST_hb_font_get_glyph_h_origin","",""],[5,"RUST_hb_font_get_glyph_v_origin","",""],[5,"RUST_hb_font_get_glyph_h_kerning","",""],[5,"RUST_hb_font_get_glyph_v_kerning","",""],[5,"RUST_hb_font_get_glyph_extents","",""],[5,"RUST_hb_font_get_glyph_contour_point","",""],[5,"RUST_hb_font_get_glyph_advance_for_direction","",""],[5,"RUST_hb_font_get_glyph_origin_for_direction","",""],[5,"RUST_hb_font_add_glyph_origin_for_direction","",""],[5,"RUST_hb_font_subtract_glyph_origin_for_direction","",""],[5,"RUST_hb_font_get_glyph_kerning_for_direction","",""],[5,"RUST_hb_font_get_glyph_extents_for_origin","",""],[5,"RUST_hb_font_get_glyph_contour_point_for_origin","",""],[5,"RUST_hb_font_create","",""],[5,"RUST_hb_font_create_sub_font","",""],[5,"RUST_hb_font_get_empty","",""],[5,"RUST_hb_font_reference","",""],[5,"RUST_hb_font_destroy","",""],[5,"RUST_hb_font_set_user_data","",""],[5,"RUST_hb_font_get_user_data","",""],[5,"RUST_hb_font_make_immutable","",""],[5,"RUST_hb_font_is_immutable","",""],[5,"RUST_hb_font_get_parent","",""],[5,"RUST_hb_font_get_face","",""],[5,"RUST_hb_font_set_funcs","",""],[5,"RUST_hb_font_set_funcs_data","",""],[5,"RUST_hb_font_set_scale","",""],[5,"RUST_hb_font_get_scale","",""],[5,"RUST_hb_font_set_ppem","",""],[5,"RUST_hb_font_get_ppem","",""],[5,"RUST_hb_set_create","",""],[5,"RUST_hb_set_get_empty","",""],[5,"RUST_hb_set_reference","",""],[5,"RUST_hb_set_destroy","",""],[5,"RUST_hb_set_set_user_data","",""],[5,"RUST_hb_set_get_user_data","",""],[5,"RUST_hb_set_allocation_successful","",""],[5,"RUST_hb_set_clear","",""],[5,"RUST_hb_set_empty","",""],[5,"RUST_hb_set_has","",""],[5,"RUST_hb_set_add","",""],[5,"RUST_hb_set_del","",""],[5,"RUST_hb_set_equal","",""],[5,"RUST_hb_set_set","",""],[5,"RUST_hb_set_union","",""],[5,"RUST_hb_set_intersect","",""],[5,"RUST_hb_set_subtract","",""],[5,"RUST_hb_set_min","",""],[5,"RUST_hb_set_max","",""],[5,"RUST_hb_shape","",""],[5,"RUST_hb_shape_full","",""],[5,"RUST_hb_shape_list_shapers","",""],[5,"RUST_hb_version","",""],[5,"RUST_hb_version_string","",""],[5,"RUST_hb_version_check","",""],[6,"hb_bool_t","",""],[6,"hb_codepoint_t","",""],[6,"hb_position_t","",""],[6,"hb_mask_t","",""],[6,"union__hb_var_int_t","",""],[6,"hb_var_int_t","",""],[6,"hb_tag_t","",""],[6,"hb_direction_t","",""],[6,"struct__hb_language_t","",""],[6,"hb_language_t","",""],[6,"hb_unicode_general_category_t","",""],[6,"hb_script_t","",""],[6,"hb_user_data_key_t","",""],[6,"hb_destroy_func_t","",""],[6,"hb_memory_mode_t","",""],[6,"struct__hb_blob_t","",""],[6,"hb_blob_t","",""],[6,"struct__hb_unicode_funcs_t","",""],[6,"hb_unicode_funcs_t","",""],[6,"hb_unicode_combining_class_func_t","",""],[6,"hb_unicode_eastasian_width_func_t","",""],[6,"hb_unicode_general_category_func_t","",""],[6,"hb_unicode_mirroring_func_t","",""],[6,"hb_unicode_script_func_t","",""],[6,"hb_unicode_compose_func_t","",""],[6,"hb_unicode_decompose_func_t","",""],[6,"struct__hb_buffer_t","",""],[6,"hb_buffer_t","",""],[6,"hb_glyph_info_t","",""],[6,"hb_glyph_position_t","",""],[6,"struct__hb_face_t","",""],[6,"hb_face_t","",""],[6,"struct__hb_font_t","",""],[6,"hb_font_t","",""],[6,"hb_reference_table_func_t","",""],[6,"struct__hb_font_funcs_t","",""],[6,"hb_font_funcs_t","",""],[6,"hb_glyph_extents_t","",""],[6,"hb_font_get_glyph_func_t","",""],[6,"hb_font_get_glyph_advance_func_t","",""],[6,"hb_font_get_glyph_h_advance_func_t","",""],[6,"hb_font_get_glyph_v_advance_func_t","",""],[6,"hb_font_get_glyph_origin_func_t","",""],[6,"hb_font_get_glyph_h_origin_func_t","",""],[6,"hb_font_get_glyph_v_origin_func_t","",""],[6,"hb_font_get_glyph_kerning_func_t","",""],[6,"hb_font_get_glyph_h_kerning_func_t","",""],[6,"hb_font_get_glyph_v_kerning_func_t","",""],[6,"hb_font_get_glyph_extents_func_t","",""],[6,"hb_font_get_glyph_contour_point_func_t","",""],[6,"struct__hb_set_t","",""],[6,"hb_set_t","",""],[6,"hb_feature_t","",""],[17,"HB_DIRECTION_INVALID","",""],[17,"HB_DIRECTION_LTR","",""],[17,"HB_DIRECTION_RTL","",""],[17,"HB_DIRECTION_TTB","",""],[17,"HB_DIRECTION_BTT","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_CONTROL","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_FORMAT","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_SURROGATE","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR","",""],[17,"HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR","",""],[17,"HB_SCRIPT_COMMON","",""],[17,"HB_SCRIPT_ARABIC","",""],[17,"HB_SCRIPT_ARMENIAN","",""],[17,"HB_SCRIPT_BENGALI","",""],[17,"HB_SCRIPT_BOPOMOFO","",""],[17,"HB_SCRIPT_CANADIAN_ABORIGINAL","",""],[17,"HB_SCRIPT_CHEROKEE","",""],[17,"HB_SCRIPT_COPTIC","",""],[17,"HB_SCRIPT_CYRILLIC","",""],[17,"HB_SCRIPT_DEVANAGARI","",""],[17,"HB_SCRIPT_GEORGIAN","",""],[17,"HB_SCRIPT_GREEK","",""],[17,"HB_SCRIPT_GUJARATI","",""],[17,"HB_SCRIPT_GURMUKHI","",""],[17,"HB_SCRIPT_HANGUL","",""],[17,"HB_SCRIPT_HAN","",""],[17,"HB_SCRIPT_HEBREW","",""],[17,"HB_SCRIPT_HIRAGANA","",""],[17,"HB_SCRIPT_INHERITED","",""],[17,"HB_SCRIPT_KANNADA","",""],[17,"HB_SCRIPT_KATAKANA","",""],[17,"HB_SCRIPT_LAO","",""],[17,"HB_SCRIPT_LATIN","",""],[17,"HB_SCRIPT_MALAYALAM","",""],[17,"HB_SCRIPT_MONGOLIAN","",""],[17,"HB_SCRIPT_OGHAM","",""],[17,"HB_SCRIPT_ORIYA","",""],[17,"HB_SCRIPT_RUNIC","",""],[17,"HB_SCRIPT_SYRIAC","",""],[17,"HB_SCRIPT_TAMIL","",""],[17,"HB_SCRIPT_TELUGU","",""],[17,"HB_SCRIPT_THAI","",""],[17,"HB_SCRIPT_YI","",""],[17,"HB_SCRIPT_TIBETAN","",""],[17,"HB_SCRIPT_ETHIOPIC","",""],[17,"HB_SCRIPT_KHMER","",""],[17,"HB_SCRIPT_MYANMAR","",""],[17,"HB_SCRIPT_SINHALA","",""],[17,"HB_SCRIPT_THAANA","",""],[17,"HB_SCRIPT_DESERET","",""],[17,"HB_SCRIPT_GOTHIC","",""],[17,"HB_SCRIPT_OLD_ITALIC","",""],[17,"HB_SCRIPT_BUHID","",""],[17,"HB_SCRIPT_HANUNOO","",""],[17,"HB_SCRIPT_TAGALOG","",""],[17,"HB_SCRIPT_TAGBANWA","",""],[17,"HB_SCRIPT_BRAILLE","",""],[17,"HB_SCRIPT_CYPRIOT","",""],[17,"HB_SCRIPT_LIMBU","",""],[17,"HB_SCRIPT_LINEAR_B","",""],[17,"HB_SCRIPT_OSMANYA","",""],[17,"HB_SCRIPT_SHAVIAN","",""],[17,"HB_SCRIPT_TAI_LE","",""],[17,"HB_SCRIPT_UGARITIC","",""],[17,"HB_SCRIPT_BUGINESE","",""],[17,"HB_SCRIPT_GLAGOLITIC","",""],[17,"HB_SCRIPT_KHAROSHTHI","",""],[17,"HB_SCRIPT_NEW_TAI_LUE","",""],[17,"HB_SCRIPT_OLD_PERSIAN","",""],[17,"HB_SCRIPT_SYLOTI_NAGRI","",""],[17,"HB_SCRIPT_TIFINAGH","",""],[17,"HB_SCRIPT_BALINESE","",""],[17,"HB_SCRIPT_CUNEIFORM","",""],[17,"HB_SCRIPT_NKO","",""],[17,"HB_SCRIPT_PHAGS_PA","",""],[17,"HB_SCRIPT_PHOENICIAN","",""],[17,"HB_SCRIPT_UNKNOWN","",""],[17,"HB_SCRIPT_CARIAN","",""],[17,"HB_SCRIPT_CHAM","",""],[17,"HB_SCRIPT_KAYAH_LI","",""],[17,"HB_SCRIPT_LEPCHA","",""],[17,"HB_SCRIPT_LYCIAN","",""],[17,"HB_SCRIPT_LYDIAN","",""],[17,"HB_SCRIPT_OL_CHIKI","",""],[17,"HB_SCRIPT_REJANG","",""],[17,"HB_SCRIPT_SAURASHTRA","",""],[17,"HB_SCRIPT_SUNDANESE","",""],[17,"HB_SCRIPT_VAI","",""],[17,"HB_SCRIPT_AVESTAN","",""],[17,"HB_SCRIPT_BAMUM","",""],[17,"HB_SCRIPT_EGYPTIAN_HIEROGLYPHS","",""],[17,"HB_SCRIPT_IMPERIAL_ARAMAIC","",""],[17,"HB_SCRIPT_INSCRIPTIONAL_PAHLAVI","",""],[17,"HB_SCRIPT_INSCRIPTIONAL_PARTHIAN","",""],[17,"HB_SCRIPT_JAVANESE","",""],[17,"HB_SCRIPT_KAITHI","",""],[17,"HB_SCRIPT_LISU","",""],[17,"HB_SCRIPT_MEETEI_MAYEK","",""],[17,"HB_SCRIPT_OLD_SOUTH_ARABIAN","",""],[17,"HB_SCRIPT_OLD_TURKIC","",""],[17,"HB_SCRIPT_SAMARITAN","",""],[17,"HB_SCRIPT_TAI_THAM","",""],[17,"HB_SCRIPT_TAI_VIET","",""],[17,"HB_SCRIPT_BATAK","",""],[17,"HB_SCRIPT_BRAHMI","",""],[17,"HB_SCRIPT_MANDAIC","",""],[17,"HB_SCRIPT_CHAKMA","",""],[17,"HB_SCRIPT_MEROITIC_CURSIVE","",""],[17,"HB_SCRIPT_MEROITIC_HIEROGLYPHS","",""],[17,"HB_SCRIPT_MIAO","",""],[17,"HB_SCRIPT_SHARADA","",""],[17,"HB_SCRIPT_SORA_SOMPENG","",""],[17,"HB_SCRIPT_TAKRI","",""],[17,"HB_SCRIPT_INVALID","",""],[17,"HB_MEMORY_MODE_DUPLICATE","",""],[17,"HB_MEMORY_MODE_READONLY","",""],[17,"HB_MEMORY_MODE_WRITABLE","",""],[17,"HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE","",""]],"paths":[[3,"struct__hb_glyph_info_t"],[3,"struct__hb_glyph_position_t"],[3,"struct__hb_feature_t"]]};
searchIndex['string_cache_plugin'] = {"items":[[0,"","string_cache_plugin",""],[5,"plugin_registrar","",""]],"paths":[]};
searchIndex['task_info'] = {"items":[],"paths":[]};
searchIndex['html5ever_macros'] = {"items":[[0,"","html5ever_macros",""],[5,"plugin_registrar","",""],[0,"named_entities","",""],[5,"expand","html5ever_macros::named_entities",""],[0,"match_token","html5ever_macros","Implements the `match_token!()` macro for use by the HTML tree builder\nin `src/tree_builder/mod.rs`."],[5,"expand","html5ever_macros::match_token","Expand the `match_token!` macro."]],"paths":[]};
searchIndex['url'] = {"items":[[0,"","url","<a href=\"https://github.com/servo/rust-url\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"../github.png\" alt=\"Fork me on GitHub\"></a>\n<style>.sidebar { margin-top: 53px }</style>"],[3,"Ipv6Address","","A 128 bit IPv6 address"],[12,"pieces","","",0],[3,"Url","","The parsed representation of an absolute URL."],[12,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",1],[12,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",1],[12,"query","","The query string of the URL.",1],[12,"fragment","","The fragment identifier of the URL.",1],[3,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP."],[12,"username","","The username of the URL, as a possibly empty, pecent-encoded string.",2],[12,"password","","The password of the URL.",2],[12,"host","","The host of the URL, either a domain name or an IPv4 address",2],[12,"port","","The port number of the URL.\n`None` for file-like schemes, or to indicate the default port number.",2],[12,"default_port","","The default port number for the URL’s scheme.\n`None` for file-like schemes.",2],[12,"path","","The path of the URL, as vector of pecent-encoded strings.",2],[3,"UrlParser","","A set of optional parameters for URL parsing."],[4,"Host","","The host name of an URL."],[13,"Domain","","A (DNS) domain name or an IPv4 address.",3],[13,"Ipv6","","An IPv6 address, represented inside `[...]` square brackets\nso that `:` colon characters in the address are not ambiguous\nwith the port number delimiter.",3],[4,"ParseError","","Errors that can occur during parsing."],[13,"EmptyHost","","",4],[13,"InvalidScheme","","",4],[13,"InvalidPort","","",4],[13,"InvalidIpv6Address","","",4],[13,"InvalidDomainCharacter","","",4],[13,"InvalidCharacter","","",4],[13,"InvalidBackslash","","",4],[13,"InvalidPercentEncoded","","",4],[13,"InvalidAtSymbolInUser","","",4],[13,"ExpectedTwoSlashes","","",4],[13,"ExpectedInitialSlash","","",4],[13,"NonUrlCodePoint","","",4],[13,"RelativeUrlWithScheme","","",4],[13,"RelativeUrlWithoutBase","","",4],[13,"RelativeUrlWithNonRelativeBase","","",4],[13,"NonAsciiDomainsNotSupportedYet","","",4],[13,"CannotSetJavascriptFragment","","",4],[13,"CannotSetPortWithFileLikeScheme","","",4],[13,"CannotSetUsernameWithNonRelativeScheme","","",4],[13,"CannotSetPasswordWithNonRelativeScheme","","",4],[13,"CannotSetHostPortWithNonRelativeScheme","","",4],[13,"CannotSetHostWithNonRelativeScheme","","",4],[13,"CannotSetPortWithNonRelativeScheme","","",4],[13,"CannotSetPathWithNonRelativeScheme","","",4],[4,"SchemeData","","The components of the URL whose representation depends on where the scheme is *relative*."],[13,"Relative","","Components for URLs in a *relative* scheme such as HTTP.",5],[13,"NonRelative","","No further structure is assumed for *non-relative* schemes such as `data` and `mailto`.",5],[4,"SchemeType","","Determines the behavior of the URL parser for a given scheme."],[13,"NonRelative","","Indicate that the scheme is *non-relative*.",6],[13,"Relative","","Indicate that the scheme is *relative*, and what the default port number is.",6],[13,"FileLike","","Indicate a *relative* scheme similar to the *file* scheme.",6],[5,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier."],[5,"whatwg_scheme_type_mapper","","http://url.spec.whatwg.org/#relative-scheme"],[11,"fmt","","",3],[11,"clone","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"fmt","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"clone","","",0],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",3],[11,"serialize","","Serialize the host as a string.",3],[11,"fmt","","",3],[11,"parse","","Parse an IPv6 address, without the [] square brackets.",0],[11,"serialize","","Serialize the IPv6 address to a string.",0],[11,"fmt","","",0],[11,"fmt","","",4],[11,"clone","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"description","","",4],[11,"fmt","","",4],[0,"urlutils","","These methods are not meant for use in Rust code,\nonly to help implement the JavaScript URLUtils API: http://url.spec.whatwg.org/#urlutils"],[3,"UrlUtilsWrapper","url::urlutils",""],[12,"url","","",7],[12,"parser","","",7],[0,"percent_encoding","url",""],[3,"EncodeSet","url::percent_encoding","Represents a set of characters / bytes that should be percent-encoded."],[5,"percent_encode_to","","Percent-encode the given bytes, and push the result to `output`."],[5,"percent_encode","","Percent-encode the given bytes."],[5,"utf8_percent_encode_to","","Percent-encode the UTF-8 encoding of the given string, and push the result to `output`."],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string."],[5,"percent_decode_to","","Percent-decode the given bytes, and push the result to `output`."],[5,"percent_decode","","Percent-decode the given bytes."],[5,"lossy_utf8_percent_decode","","Percent-decode the given bytes, and decode the result as UTF-8."],[5,"from_hex","",""],[7,"SIMPLE_ENCODE_SET","","This encode set is used for fragment identifier and non-relative scheme data."],[7,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings."],[7,"DEFAULT_ENCODE_SET","","This encode set is used for path components."],[7,"USERINFO_ENCODE_SET","","This encode set is used in the URL parser for usernames and passwords."],[7,"PASSWORD_ENCODE_SET","","This encode set should be used when setting the password field of a parsed URL."],[7,"USERNAME_ENCODE_SET","","This encode set should be used when setting the username field of a parsed URL."],[7,"FORM_URLENCODED_ENCODE_SET","","This encode set is used in `application/x-www-form-urlencoded` serialization."],[0,"form_urlencoded","url","Parser and serializer for the [`application/x-www-form-urlencoded` format](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms."],[5,"parse","url::form_urlencoded","Convert a byte string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs."],[5,"serialize_owned","","Convert a slice of owned (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[5,"serialize","","Convert an iterator of (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[0,"punycode","url","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation."],[5,"decode_to_string","url::punycode","Convert Punycode to an Unicode `String`."],[5,"decode","","Convert Punycode to Unicode."],[5,"encode_str","","Convert an Unicode `str` to Punycode."],[5,"encode","","Convert Unicode to Punycode."],[0,"format","url","Formatting utilities for URLs."],[3,"PathFormatter","url::format","Formatter and serializer for URL path data."],[12,"path","","The path as a slice of string-like objects (String or &str).",8],[3,"UserInfoFormatter","","Formatter and serializer for URL username and password data."],[12,"username","","URL username as a string slice.",9],[12,"password","","URL password as an optional string slice.",9],[3,"UrlNoFragmentFormatter","","Formatter for URLs which ignores the fragment field."],[12,"url","","",10],[11,"fmt","","",8],[11,"fmt","","",9],[11,"fmt","","",10],[6,"ErrorHandler","url","This is called on non-fatal parse errors."],[6,"ParseResult","",""],[8,"ToUrlPath","",""],[10,"to_url_path","","",11],[8,"FromUrlPath","",""],[10,"from_url_path","","",12],[11,"fmt","","",1],[11,"clone","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"fmt","","",5],[11,"clone","","",5],[11,"eq","","",5],[11,"ne","","",5],[11,"fmt","","",2],[11,"clone","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"hash","","",1],[11,"new","","Return a new UrlParser with default parameters.",13],[11,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",13],[11,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",13],[11,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",13],[11,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",13],[11,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",13],[11,"fmt","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"default_port","","",6],[11,"same_as","","",6],[11,"parse","","Parse an URL with the default `UrlParser` parameters.",1],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",1],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",1],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",1],[11,"serialize","","Return the serialization of this URL as a string.",1],[11,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",1],[11,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",1],[11,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",1],[11,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",1],[11,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",1],[11,"username","","If the URL is in a *relative scheme*, return its username.",1],[11,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",1],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",1],[11,"password","","If the URL is in a *relative scheme*, return its password, if any.",1],[11,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",1],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",1],[11,"serialize_userinfo","","Serialize the URL's username and password, if any.",1],[11,"host","","If the URL is in a *relative scheme*, return its structured host.",1],[11,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",1],[11,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",1],[11,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",1],[11,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",1],[11,"port","","If the URL is in a *relative scheme* and has a port number, return it.",1],[11,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",1],[11,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",1],[11,"path","","If the URL is in a *relative scheme*, return its path components.",1],[11,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",1],[11,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",1],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",1],[11,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",1],[11,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",1],[11,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",1],[11,"encode","","",1],[11,"decode","","",1],[11,"fmt","","",1],[11,"fmt","","",5],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username.",2],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",2],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",2],[11,"domain","","If the host is a domain, return the domain as a string.",2],[11,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",2],[11,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",2],[11,"serialize_path","","Serialize the path as a string.",2],[11,"serialize_userinfo","","Serialize the userinfo as a string.",2],[11,"fmt","","",2],[11,"to_url_path","std::path","",14],[11,"to_url_path","std::old_path::posix","",15],[11,"to_url_path","std::old_path::windows","",16],[11,"from_url_path","std::path","",17],[11,"from_url_path","std::old_path::posix","",15],[11,"from_url_path","std::old_path::windows","",16]],"paths":[[3,"Ipv6Address"],[3,"Url"],[3,"RelativeSchemeData"],[4,"Host"],[4,"ParseError"],[4,"SchemeData"],[4,"SchemeType"],[3,"UrlUtilsWrapper"],[3,"PathFormatter"],[3,"UserInfoFormatter"],[3,"UrlNoFragmentFormatter"],[8,"ToUrlPath"],[8,"FromUrlPath"],[3,"UrlParser"],[3,"Path"],[3,"Path"],[3,"Path"],[3,"PathBuf"]]};
searchIndex['geom'] = {"items":[[0,"","geom",""],[0,"approxeq","",""],[8,"ApproxEq","geom::approxeq","Trait for testing approximate equality"],[10,"approx_epsilon","","",0],[10,"approx_eq","","",0],[10,"approx_eq_eps","","",0],[0,"length","geom","A one-dimensional length, tagged with its units."],[3,"Length","geom::length","A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`."],[11,"fmt","","",1],[11,"encode","","",1],[11,"decode","","",1],[11,"new","","",1],[11,"get","","",1],[6,"Output","",""],[11,"add","","",1],[6,"Output","",""],[11,"sub","","",1],[6,"Output","",""],[11,"mul","","",1],[6,"Output","",""],[11,"div","","",1],[6,"Output","",""],[11,"neg","","",1],[11,"cast","","Cast from one numeric representation to another, preserving the units.",1],[11,"clone","","",1],[11,"eq","","",1],[11,"partial_cmp","","",1],[11,"cmp","","",1],[11,"zero","","",1],[0,"matrix","geom",""],[3,"Matrix4","geom::matrix",""],[12,"m11","","",2],[12,"m12","","",2],[12,"m13","","",2],[12,"m14","","",2],[12,"m21","","",2],[12,"m22","","",2],[12,"m23","","",2],[12,"m24","","",2],[12,"m31","","",2],[12,"m32","","",2],[12,"m33","","",2],[12,"m34","","",2],[12,"m41","","",2],[12,"m42","","",2],[12,"m43","","",2],[12,"m44","","",2],[5,"Matrix4","",""],[5,"ortho","",""],[5,"identity","",""],[11,"fmt","","",2],[11,"approx_eq","","",2],[11,"mul","","",2],[11,"mul_s","","",2],[11,"scale","","",2],[11,"to_array","","",2],[11,"translate","","",2],[0,"matrix2d","geom",""],[3,"Matrix2D","geom::matrix2d",""],[11,"clone","","",3],[11,"new","","",3],[11,"mul","","",3],[11,"translate","","",3],[11,"scale","","",3],[11,"identity","","",3],[11,"to_array","","",3],[11,"transform_point","","Returns the given point transformed by this matrix.",3],[11,"transform_rect","","Returns a rectangle that encompasses the result of transforming the given rectangle by this\nmatrix.",3],[0,"num","geom","A one-dimensional length, tagged with its units."],[8,"Zero","geom::num",""],[10,"zero","","",4],[8,"One","",""],[10,"one","","",5],[0,"point","geom",""],[3,"Point2D","geom::point",""],[12,"x","","",6],[12,"y","","",6],[5,"Point2D","",""],[5,"TypedPoint2D","",""],[6,"TypedPoint2D","",""],[11,"eq","","",6],[11,"ne","","",6],[11,"hash","","",6],[11,"encode","","",6],[11,"decode","","",6],[11,"clone","","",6],[11,"zero","","",6],[11,"fmt","","",6],[6,"Output","",""],[11,"add","","",6],[6,"Output","",""],[11,"add","","",6],[11,"add_size","","",6],[6,"Output","",""],[11,"sub","","",6],[6,"Output","",""],[11,"neg","","",6],[6,"Output","",""],[11,"mul","","",6],[6,"Output","",""],[11,"div","","",6],[11,"to_untyped","","Drop the units, preserving only the numeric value.",6],[11,"from_untyped","","Tag a unitless value with units.",6],[11,"cast","","Cast from one numeric representation to another, preserving the units.",6],[11,"as_f32","","",6],[11,"as_uint","","",6],[0,"rect","geom",""],[3,"Rect","geom::rect",""],[12,"origin","","",7],[12,"size","","",7],[5,"Rect","",""],[5,"min","",""],[5,"max","",""],[6,"TypedRect","",""],[11,"eq","","",7],[11,"ne","","",7],[11,"encode","","",7],[11,"decode","","",7],[11,"clone","","",7],[11,"fmt","","",7],[11,"intersects","","",7],[11,"max_x","","",7],[11,"min_x","","",7],[11,"max_y","","",7],[11,"min_y","","",7],[11,"intersection","","",7],[11,"union","","",7],[11,"translate","","",7],[11,"contains","","",7],[11,"inflate","","",7],[11,"top_right","","",7],[11,"bottom_left","","",7],[11,"bottom_right","","",7],[11,"translate_by_size","","",7],[11,"scale","","",7],[11,"zero","","",7],[11,"is_empty","","",7],[6,"Output","",""],[11,"mul","","",7],[6,"Output","",""],[11,"div","","",7],[11,"to_untyped","","Drop the units, preserving only the numeric value.",7],[11,"from_untyped","","Tag a unitless value with units.",7],[11,"cast","","Cast from one numeric representation to another, preserving the units.",7],[11,"as_f32","","",7],[11,"as_uint","","",7],[0,"scale_factor","geom","A type-checked scaling factor between units."],[3,"ScaleFactor","geom::scale_factor","A scaling factor between two different units of measurement."],[11,"fmt","","",8],[11,"encode","","",8],[11,"decode","","",8],[11,"new","","",8],[11,"get","","",8],[11,"inv","","The inverse ScaleFactor (1.0 / self).",8],[6,"Output","",""],[11,"mul","","",8],[6,"Output","",""],[11,"add","","",8],[6,"Output","",""],[11,"sub","","",8],[11,"cast","","Cast from one numeric representation to another, preserving the units.",8],[11,"eq","","",8],[11,"clone","","",8],[0,"side_offsets","geom","A group of side offsets, which correspond to top/left/bottom/right for borders, padding,\nand margins in CSS."],[3,"SideOffsets2D","geom::side_offsets","A group of side offsets, which correspond to top/left/bottom/right for borders, padding,\nand margins in CSS."],[12,"top","","",9],[12,"right","","",9],[12,"bottom","","",9],[12,"left","","",9],[3,"SideOffsets2DSimdI32","","A SIMD enabled version of SideOffsets2D specialized for i32."],[12,"top","","",10],[12,"bottom","","",10],[12,"right","","",10],[12,"left","","",10],[11,"eq","","",9],[11,"ne","","",9],[11,"clone","","",9],[11,"new","","",9],[11,"new_all_same","","",9],[11,"horizontal","","",9],[11,"vertical","","",9],[6,"Output","",""],[11,"add","","",9],[11,"zero","","",9],[11,"rand","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"clone","","",10],[11,"new","","",10],[11,"new_all_same","","",10],[11,"horizontal","","",10],[11,"vertical","","",10],[11,"zero","","",10],[11,"is_zero","","",10],[0,"size","geom",""],[3,"Size2D","geom::size",""],[12,"width","","",11],[12,"height","","",11],[5,"Size2D","",""],[5,"TypedSize2D","",""],[6,"TypedSize2D","",""],[11,"eq","","",11],[11,"ne","","",11],[11,"encode","","",11],[11,"decode","","",11],[11,"clone","","",11],[11,"fmt","","",11],[11,"area","","",11],[11,"zero","","",11],[6,"Output","",""],[11,"mul","","",11],[6,"Output","",""],[11,"div","","",11],[11,"to_untyped","","Drop the units, preserving only the numeric value.",11],[11,"from_untyped","","Tag a unitless value with units.",11],[11,"cast","","Cast from one numeric representation to another, preserving the units.",11],[11,"as_f32","","",11],[11,"as_uint","","",11]],"paths":[[8,"ApproxEq"],[3,"Length"],[3,"Matrix4"],[3,"Matrix2D"],[8,"Zero"],[8,"One"],[3,"Point2D"],[3,"Rect"],[3,"ScaleFactor"],[3,"SideOffsets2D"],[3,"SideOffsets2DSimdI32"],[3,"Size2D"]]};
searchIndex['phf'] = {"items":[[0,"","phf","Compile time optimized maps and sets."],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures"],[10,"phf_hash","","Hashes the value of `self`, factoring in a seed",0],[3,"Map","","An immutable map constructed at compile time."],[3,"Set","","An immutable set constructed at compile time."],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time."],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time."],[0,"map","","An immutable map constructed at compile time."],[3,"Map","phf::map","An immutable map constructed at compile time."],[3,"Entries","","An iterator over the key/value pairs in a `Map`."],[3,"Keys","","An iterator over the keys in a `Map`."],[3,"Values","","An iterator over the values in a `Map`."],[11,"fmt","","",1],[6,"Output","",""],[11,"index","","",1],[11,"is_empty","","Returns true if the `Map` is empty.",1],[11,"len","","Returns the number of entries in the `Map`.",1],[11,"contains_key","","Determines if `key` is in the `Map`.",1],[11,"get","","Returns a reference to the value that `key` maps to.",1],[11,"get_key","","Returns a reference to the map's internal static instance of the given\nkey.",1],[11,"get_entry","","Like `get`, but returns both the key and the value.",1],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1],[11,"keys","","Returns an iterator over the keys in the map.",1],[11,"values","","Returns an iterator over the values in the map.",1],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[11,"next","","",2],[11,"size_hint","","",2],[11,"next_back","","",2],[6,"Item","",""],[11,"next","","",3],[11,"size_hint","","",3],[11,"next_back","","",3],[6,"Item","",""],[11,"next","","",4],[11,"size_hint","","",4],[11,"next_back","","",4],[0,"set","phf","An immutable set constructed at compile time."],[3,"Set","phf::set","An immutable set constructed at compile time."],[3,"Iter","","An iterator over the values in a `Set`."],[11,"fmt","","",5],[11,"len","","Returns the number of elements in the `Set`.",5],[11,"is_empty","","Returns true if the `Set` contains no elements.",5],[11,"get_key","","Returns a reference to the set's internal static instance of the given\nkey.",5],[11,"contains","","Returns true if `value` is in the `Set`.",5],[11,"iter","","Returns an iterator over the values in the set.",5],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[11,"next","","",6],[11,"size_hint","","",6],[11,"next_back","","",6],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time."],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time."],[3,"Entries","","An iterator over the entries in a `OrderedMap`."],[3,"Keys","","An iterator over the keys in a `OrderedMap`."],[3,"Values","","An iterator over the values in a `OrderedMap`."],[11,"fmt","","",7],[6,"Output","",""],[11,"index","","",7],[11,"len","","Returns the number of entries in the `Map`.",7],[11,"is_empty","","Returns true if the `Map` is empty.",7],[11,"get","","Returns a reference to the value that `key` maps to.",7],[11,"get_key","","Returns a reference to the map's internal static instance of the given\nkey.",7],[11,"contains_key","","Determines if `key` is in the `Map`.",7],[11,"get_index","","Returns the index of the key within the list used to initialize\nthe ordered map.",7],[11,"get_entry","","Like `get`, but returns both the key and the value.",7],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7],[11,"keys","","Returns an iterator over the keys in the map.",7],[11,"values","","Returns an iterator over the values in the map.",7],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[11,"next","","",8],[11,"size_hint","","",8],[11,"next_back","","",8],[11,"indexable","","",8],[11,"idx","","",8],[6,"Item","",""],[11,"next","","",9],[11,"size_hint","","",9],[11,"next_back","","",9],[11,"indexable","","",9],[11,"idx","","",9],[6,"Item","",""],[11,"next","","",10],[11,"size_hint","","",10],[11,"next_back","","",10],[11,"indexable","","",10],[11,"idx","","",10],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time."],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time."],[3,"Iter","","An iterator over the values in a `OrderedSet`."],[11,"fmt","","",11],[11,"len","","Returns the number of elements in the `OrderedSet`.",11],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11],[11,"get_key","","Returns a reference to the set's internal static instance of the given\nkey.",11],[11,"get_index","","Returns the index of the key within the list used to initialize\nthe ordered set.",11],[11,"contains","","Returns true if `value` is in the `Set`.",11],[11,"iter","","Returns an iterator over the values in the set.",11],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[11,"next","","",12],[11,"size_hint","","",12],[11,"next_back","","",12],[11,"indexable","","",12],[11,"idx","","",12]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex['mime'] = {"items":[[0,"","mime","# Mime"],[3,"Mime","","Mime, or Media Type. Encapsulates common registers types."],[4,"TopLevel","",""],[13,"Star","","",0],[13,"Text","","",0],[13,"Image","","",0],[13,"Audio","","",0],[13,"Video","","",0],[13,"Application","","",0],[13,"Multipart","","",0],[13,"Message","","",0],[13,"Model","","",0],[13,"Ext","","",0],[4,"SubLevel","",""],[13,"Star","","",1],[13,"Plain","","",1],[13,"Html","","",1],[13,"Xml","","",1],[13,"Javascript","","",1],[13,"Css","","",1],[13,"Json","","",1],[13,"WwwFormUrlEncoded","","",1],[13,"FormData","","",1],[13,"Png","","",1],[13,"Gif","","",1],[13,"Bmp","","",1],[13,"Jpeg","","",1],[13,"Ext","","",1],[4,"Attr","",""],[13,"Charset","","",2],[13,"Q","","",2],[13,"Ext","","",2],[4,"Value","",""],[13,"Utf8","","",3],[13,"Ext","","",3],[6,"Param","",""],[11,"fmt","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"clone","","",4],[11,"fmt","","",0],[11,"clone","","",0],[11,"eq","","",0],[11,"fmt","","",0],[6,"Err","",""],[11,"from_str","","",0],[11,"fmt","","",1],[11,"clone","","",1],[11,"eq","","",1],[11,"fmt","","",1],[6,"Err","",""],[11,"from_str","","",1],[11,"fmt","","",2],[11,"clone","","",2],[11,"eq","","",2],[11,"fmt","","",2],[6,"Err","",""],[11,"from_str","","",2],[11,"fmt","","",3],[11,"clone","","",3],[11,"eq","","",3],[11,"fmt","","",3],[6,"Err","",""],[11,"from_str","","",3],[11,"fmt","","",4],[6,"Err","",""],[11,"from_str","","",4]],"paths":[[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"],[3,"Mime"]]};
searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation"],[3,"OsRng","","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:"],[3,"Generator","","Iterator which will generate a stream of random items."],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters."],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator."],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint)."],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints)."],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform."],[3,"ThreadRng","","The thread-local RNG."],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed."],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`."],[5,"random","","Generates a random value using the thread-local random number generator."],[5,"sample","","Randomly sample up to `amount` elements from an iterator."],[0,"distributions","","Sampling from random distributions."],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits."],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`."],[12,"weight","","The numerical weight of this item",0],[12,"item","","The actual item which is being weighted",0],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items."],[0,"range","","Generating numbers between two others."],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds."],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`."],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2],[11,"sample","","",2],[11,"ind_sample","","",2],[0,"gamma","rand::distributions","The Gamma and derived distributions."],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution."],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[3,"FisherF","","The Fisher F distribution `F(m, n)`."],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3],[11,"sample","","",3],[11,"ind_sample","","",3],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4],[11,"sample","","",4],[11,"ind_sample","","",4],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5],[11,"sample","","",5],[11,"ind_sample","","",5],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6],[11,"sample","","",6],[11,"ind_sample","","",6],[0,"normal","rand::distributions","The normal and derived distributions."],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian)."],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[11,"rand","","",7],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8],[11,"sample","","",8],[11,"ind_sample","","",8],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9],[11,"sample","","",9],[11,"ind_sample","","",9],[0,"exponential","rand::distributions","The exponential distribution."],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers."],[3,"Exp","","The exponential distribution `Exp(lambda)`."],[11,"rand","","",10],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11],[11,"sample","","",11],[11,"ind_sample","","",11],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`."],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12],[8,"IndependentSample","","`Sample`s that do not require keeping track of state."],[10,"ind_sample","","Generate a random value.",13],[11,"sample","","",14],[11,"ind_sample","","",14],[11,"new","","",14],[11,"new","","Create a new `WeightedChoice`.",15],[11,"sample","","",15],[11,"ind_sample","","",15],[0,"isaac","rand","The ISAAC random number generator."],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1]."],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm."],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16],[11,"clone","","",16],[11,"next_u32","","",16],[11,"reseed","","",16],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16],[11,"rand","","",16],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17],[11,"clone","","",17],[11,"next_u32","","",17],[11,"next_u64","","",17],[11,"reseed","","",17],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17],[11,"rand","","",17],[0,"chacha","rand","The ChaCha random number generator."],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1]."],[11,"clone","","",18],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18],[11,"next_u32","","",18],[11,"reseed","","",18],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18],[11,"rand","","",18],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes."],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes."],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call."],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`."],[10,"reseed","","Reseed the given RNG.",20],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19],[11,"next_u32","","",19],[11,"next_u64","","",19],[11,"fill_bytes","","",19],[11,"reseed","","",19],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19],[11,"reseed","","",21],[11,"default","","",21],[11,"rand","rand","",22],[11,"rand","","",23],[11,"rand","","",22],[11,"rand","","",23],[11,"rand","core::option","",24],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators."],[11,"new","","Create a new `OsRng`.",25],[11,"next_u32","","",25],[11,"next_u64","","",25],[11,"fill_bytes","","",25],[0,"reader","","A wrapper around any Reader to treat it as an RNG."],[3,"ReaderRng","rand::reader","An RNG that reads random bytes straight from a `Reader`. This will\nwork best with an infinite reader, but this is not required."],[11,"new","","Create a new `ReaderRng` from a `Reader`.",26],[11,"next_u32","","",26],[11,"next_u64","","",26],[11,"fill_bytes","","",26],[8,"Rand","rand","A type that can be randomly generated using an `Rng`."],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27],[8,"Rng","","A random number generator."],[10,"next_u32","","Return the next random u32.",28],[11,"next_u64","","Return the next random u64.",28],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28],[11,"fill_bytes","","Fill `dest` with random data.",28],[11,"gen","","Return a random value of a `Rand` type.",28],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28],[11,"choose","","Return a random element from `values`.",28],[11,"shuffle","","Shuffle a mutable slice in place.",28],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times."],[10,"reseed","","Reseed an RNG with the given seed.",29],[10,"from_seed","","Create a new RNG with the given seed.",29],[6,"Item","",""],[11,"next","","",30],[6,"Item","",""],[11,"next","","",31],[11,"clone","","",32],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",32],[11,"next_u32","","",32],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",32],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",32],[11,"rand","","",32],[11,"clone","","",33],[11,"new","","Create a randomly seeded instance of `StdRng`.",33],[11,"next_u32","","",33],[11,"next_u64","","",33],[11,"reseed","","",33],[11,"from_seed","","",33],[11,"clone","","",34],[11,"next_u32","","",34],[11,"next_u64","","",34],[11,"fill_bytes","","",34]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReaderRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['core_foundation'] = {"items":[],"paths":[]};
searchIndex['freetype'] = {"items":[[0,"","freetype",""],[0,"freetype","",""],[3,"struct_FT_MemoryRec_","freetype::freetype",""],[12,"user","","",0],[12,"alloc","","",0],[12,"free","","",0],[12,"realloc","","",0],[3,"struct_FT_StreamRec_","",""],[12,"base","","",1],[12,"size","","",1],[12,"pos","","",1],[12,"descriptor","","",1],[12,"pathname","","",1],[12,"read","","",1],[12,"close","","",1],[12,"memory","","",1],[12,"cursor","","",1],[12,"limit","","",1],[3,"struct_FT_Vector_","",""],[12,"x","","",2],[12,"y","","",2],[3,"struct_FT_BBox_","",""],[12,"xMin","","",3],[12,"yMin","","",3],[12,"xMax","","",3],[12,"yMax","","",3],[3,"struct_FT_Bitmap_","",""],[12,"rows","","",4],[12,"width","","",4],[12,"pitch","","",4],[12,"buffer","","",4],[12,"num_grays","","",4],[12,"pixel_mode","","",4],[12,"palette_mode","","",4],[12,"palette","","",4],[3,"struct_FT_Outline_","",""],[12,"n_contours","","",5],[12,"n_points","","",5],[12,"points","","",5],[12,"tags","","",5],[12,"contours","","",5],[12,"flags","","",5],[3,"struct_FT_Outline_Funcs_","",""],[12,"move_to","","",6],[12,"line_to","","",6],[12,"conic_to","","",6],[12,"cubic_to","","",6],[12,"shift","","",6],[12,"delta","","",6],[3,"struct_FT_Span_","",""],[12,"x","","",7],[12,"len","","",7],[12,"coverage","","",7],[3,"struct_FT_Raster_Params_","",""],[12,"target","","",8],[12,"source","","",8],[12,"flags","","",8],[12,"gray_spans","","",8],[12,"black_spans","","",8],[12,"bit_test","","",8],[12,"bit_set","","",8],[12,"user","","",8],[12,"clip_box","","",8],[3,"struct_FT_Raster_Funcs_","",""],[12,"glyph_format","","",9],[12,"raster_new","","",9],[12,"raster_reset","","",9],[12,"raster_set_mode","","",9],[12,"raster_render","","",9],[12,"raster_done","","",9],[3,"struct_FT_UnitVector_","",""],[12,"x","","",10],[12,"y","","",10],[3,"struct_FT_Matrix_","",""],[12,"xx","","",11],[12,"xy","","",11],[12,"yx","","",11],[12,"yy","","",11],[3,"struct_FT_Data_","",""],[12,"pointer","","",12],[12,"length","","",12],[3,"struct_FT_Generic_","",""],[12,"data","","",13],[12,"finalizer","","",13],[3,"struct_FT_ListNodeRec_","",""],[12,"prev","","",14],[12,"next","","",14],[12,"data","","",14],[3,"struct_FT_ListRec_","",""],[12,"head","","",15],[12,"tail","","",15],[3,"struct_FT_Glyph_Metrics_","",""],[12,"width","","",16],[12,"height","","",16],[12,"horiBearingX","","",16],[12,"horiBearingY","","",16],[12,"horiAdvance","","",16],[12,"vertBearingX","","",16],[12,"vertBearingY","","",16],[12,"vertAdvance","","",16],[3,"struct_FT_Bitmap_Size_","",""],[12,"height","","",17],[12,"width","","",17],[12,"size","","",17],[12,"x_ppem","","",17],[12,"y_ppem","","",17],[3,"struct_FT_CharMapRec_","",""],[12,"face","","",18],[12,"encoding","","",18],[12,"platform_id","","",18],[12,"encoding_id","","",18],[3,"struct_FT_FaceRec_","",""],[12,"num_faces","","",19],[12,"face_index","","",19],[12,"face_flags","","",19],[12,"style_flags","","",19],[12,"num_glyphs","","",19],[12,"family_name","","",19],[12,"style_name","","",19],[12,"num_fixed_sizes","","",19],[12,"available_sizes","","",19],[12,"num_charmaps","","",19],[12,"charmaps","","",19],[12,"generic","","",19],[12,"bbox","","",19],[12,"units_per_EM","","",19],[12,"ascender","","",19],[12,"descender","","",19],[12,"height","","",19],[12,"max_advance_width","","",19],[12,"max_advance_height","","",19],[12,"underline_position","","",19],[12,"underline_thickness","","",19],[12,"glyph","","",19],[12,"size","","",19],[12,"charmap","","",19],[12,"driver","","",19],[12,"memory","","",19],[12,"stream","","",19],[12,"sizes_list","","",19],[12,"autohint","","",19],[12,"extensions","","",19],[12,"internal","","",19],[3,"struct_FT_Size_Metrics_","",""],[12,"x_ppem","","",20],[12,"y_ppem","","",20],[12,"x_scale","","",20],[12,"y_scale","","",20],[12,"ascender","","",20],[12,"descender","","",20],[12,"height","","",20],[12,"max_advance","","",20],[3,"struct_FT_SizeRec_","",""],[12,"face","","",21],[12,"generic","","",21],[12,"metrics","","",21],[12,"internal","","",21],[3,"struct_FT_GlyphSlotRec_","",""],[12,"library","","",22],[12,"face","","",22],[12,"next","","",22],[12,"reserved","","",22],[12,"generic","","",22],[12,"metrics","","",22],[12,"linearHoriAdvance","","",22],[12,"linearVertAdvance","","",22],[12,"advance","","",22],[12,"format","","",22],[12,"bitmap","","",22],[12,"bitmap_left","","",22],[12,"bitmap_top","","",22],[12,"outline","","",22],[12,"num_subglyphs","","",22],[12,"subglyphs","","",22],[12,"control_data","","",22],[12,"control_len","","",22],[12,"lsb_delta","","",22],[12,"rsb_delta","","",22],[12,"other","","",22],[12,"internal","","",22],[3,"struct_FT_Parameter_","",""],[12,"tag","","",23],[12,"data","","",23],[3,"struct_FT_Open_Args_","",""],[12,"flags","","",24],[12,"memory_base","","",24],[12,"memory_size","","",24],[12,"pathname","","",24],[12,"stream","","",24],[12,"driver","","",24],[12,"num_params","","",24],[12,"params","","",24],[3,"struct_FT_Size_RequestRec_","",""],[12,"_type","","",25],[12,"width","","",25],[12,"height","","",25],[12,"horiResolution","","",25],[12,"vertResolution","","",25],[5,"FT_Init_FreeType","",""],[5,"FT_New_Library","",""],[5,"FT_Add_Default_Modules","",""],[5,"FT_Done_FreeType","",""],[5,"FT_New_Face","",""],[5,"FT_New_Memory_Face","",""],[5,"FT_Open_Face","",""],[5,"FT_Attach_File","",""],[5,"FT_Attach_Stream","",""],[5,"FT_Reference_Face","",""],[5,"FT_Done_Face","",""],[5,"FT_Select_Size","",""],[5,"FT_Request_Size","",""],[5,"FT_Set_Char_Size","",""],[5,"FT_Set_Pixel_Sizes","",""],[5,"FT_Load_Glyph","",""],[5,"FT_Load_Char","",""],[5,"FT_Set_Transform","",""],[5,"FT_Render_Glyph","",""],[5,"FT_Get_Kerning","",""],[5,"FT_Get_Track_Kerning","",""],[5,"FT_Get_Glyph_Name","",""],[5,"FT_Get_Postscript_Name","",""],[5,"FT_Select_Charmap","",""],[5,"FT_Set_Charmap","",""],[5,"FT_Get_Charmap_Index","",""],[5,"FT_Get_Char_Index","",""],[5,"FT_Get_First_Char","",""],[5,"FT_Get_Next_Char","",""],[5,"FT_Get_Name_Index","",""],[5,"FT_Get_SubGlyph_Info","",""],[5,"FT_Get_FSType_Flags","",""],[5,"FT_Face_GetCharVariantIndex","",""],[5,"FT_Face_GetCharVariantIsDefault","",""],[5,"FT_Face_GetVariantSelectors","",""],[5,"FT_Face_GetVariantsOfChar","",""],[5,"FT_Face_GetCharsOfVariant","",""],[5,"FT_MulDiv","",""],[5,"FT_MulFix","",""],[5,"FT_DivFix","",""],[5,"FT_RoundFix","",""],[5,"FT_CeilFix","",""],[5,"FT_FloorFix","",""],[5,"FT_Vector_Transform","",""],[5,"FT_Library_Version","",""],[5,"FT_Face_CheckTrueTypePatents","",""],[5,"FT_Face_SetUnpatentedHinting","",""],[5,"FT_Get_Sfnt_Table","",""],[6,"FT_Int16","",""],[6,"FT_UInt16","",""],[6,"FT_Int32","",""],[6,"FT_UInt32","",""],[6,"FT_Fast","",""],[6,"FT_UFast","",""],[6,"FT_Memory","",""],[6,"FT_Alloc_Func","",""],[6,"FT_Free_Func","",""],[6,"FT_Realloc_Func","",""],[6,"FT_Stream","",""],[6,"union_FT_StreamDesc_","",""],[6,"FT_StreamDesc","",""],[6,"FT_Stream_IoFunc","",""],[6,"FT_Stream_CloseFunc","",""],[6,"FT_StreamRec","",""],[6,"FT_Pos","",""],[6,"FT_Vector","",""],[6,"FT_BBox","",""],[6,"enum_FT_Sfnt_Tag_","",""],[6,"FT_Sfnt_Tag","",""],[6,"enum_FT_Pixel_Mode_","",""],[6,"FT_Pixel_Mode","",""],[6,"FT_Bitmap","",""],[6,"FT_Outline","",""],[6,"FT_Outline_MoveToFunc","",""],[6,"FT_Outline_LineToFunc","",""],[6,"FT_Outline_ConicToFunc","",""],[6,"FT_Outline_CubicToFunc","",""],[6,"FT_Outline_Funcs","",""],[6,"enum_FT_Glyph_Format_","",""],[6,"FT_Glyph_Format","",""],[6,"struct_FT_RasterRec_","",""],[6,"FT_Raster","",""],[6,"FT_Span","",""],[6,"FT_SpanFunc","",""],[6,"FT_Raster_BitTest_Func","",""],[6,"FT_Raster_BitSet_Func","",""],[6,"FT_Raster_Params","",""],[6,"FT_Raster_NewFunc","",""],[6,"FT_Raster_DoneFunc","",""],[6,"FT_Raster_ResetFunc","",""],[6,"FT_Raster_SetModeFunc","",""],[6,"FT_Raster_RenderFunc","",""],[6,"FT_Raster_Funcs","",""],[6,"FT_Bool","",""],[6,"FT_FWord","",""],[6,"FT_UFWord","",""],[6,"FT_Char","",""],[6,"FT_Byte","",""],[6,"FT_Bytes","",""],[6,"FT_Tag","",""],[6,"FT_String","",""],[6,"FT_Short","",""],[6,"FT_UShort","",""],[6,"FT_Int","",""],[6,"FT_UInt","",""],[6,"FT_Long","",""],[6,"FT_ULong","",""],[6,"FT_F2Dot14","",""],[6,"FT_F26Dot6","",""],[6,"FT_Fixed","",""],[6,"FT_Error","",""],[6,"FT_Pointer","",""],[6,"FT_Offset","",""],[6,"FT_PtrDist","",""],[6,"FT_UnitVector","",""],[6,"FT_Matrix","",""],[6,"FT_Data","",""],[6,"FT_Generic_Finalizer","",""],[6,"FT_Generic","",""],[6,"FT_ListNode","",""],[6,"FT_List","",""],[6,"FT_ListNodeRec","",""],[6,"FT_ListRec","",""],[6,"FT_Glyph_Metrics","",""],[6,"FT_Bitmap_Size","",""],[6,"struct_FT_LibraryRec_","",""],[6,"FT_Library","",""],[6,"struct_FT_ModuleRec_","",""],[6,"FT_Module","",""],[6,"struct_FT_DriverRec_","",""],[6,"FT_Driver","",""],[6,"struct_FT_RendererRec_","",""],[6,"FT_Renderer","",""],[6,"FT_Face","",""],[6,"FT_Size","",""],[6,"FT_GlyphSlot","",""],[6,"FT_CharMap","",""],[6,"enum_FT_Encoding_","",""],[6,"FT_Encoding","",""],[6,"FT_CharMapRec","",""],[6,"struct_FT_Face_InternalRec_","",""],[6,"FT_Face_Internal","",""],[6,"FT_FaceRec","",""],[6,"struct_FT_Size_InternalRec_","",""],[6,"FT_Size_Internal","",""],[6,"FT_Size_Metrics","",""],[6,"FT_SizeRec","",""],[6,"struct_FT_SubGlyphRec_","",""],[6,"FT_SubGlyph","",""],[6,"struct_FT_Slot_InternalRec_","",""],[6,"FT_Slot_Internal","",""],[6,"FT_GlyphSlotRec","",""],[6,"FT_Parameter","",""],[6,"FT_Open_Args","",""],[6,"enum_FT_Size_Request_Type_","",""],[6,"FT_Size_Request_Type","",""],[6,"FT_Size_RequestRec","",""],[6,"FT_Size_Request","",""],[6,"enum_FT_Render_Mode_","",""],[6,"FT_Render_Mode","",""],[6,"enum_FT_Kerning_Mode_","",""],[6,"FT_Kerning_Mode","",""],[6,"enum_unnamed1","",""],[6,"enum_unnamed2","",""],[17,"ft_sfnt_head","",""],[17,"ft_sfnt_maxp","",""],[17,"ft_sfnt_os2","",""],[17,"ft_sfnt_hhea","",""],[17,"ft_sfnt_vhea","",""],[17,"ft_sfnt_post","",""],[17,"ft_sfnt_pclt","",""],[17,"ft_sfnt_max","",""],[17,"FT_PIXEL_MODE_NONE","",""],[17,"FT_PIXEL_MODE_MONO","",""],[17,"FT_PIXEL_MODE_GRAY","",""],[17,"FT_PIXEL_MODE_GRAY2","",""],[17,"FT_PIXEL_MODE_GRAY4","",""],[17,"FT_PIXEL_MODE_LCD","",""],[17,"FT_PIXEL_MODE_LCD_V","",""],[17,"FT_PIXEL_MODE_MAX","",""],[17,"FT_GLYPH_FORMAT_NONE","",""],[17,"FT_GLYPH_FORMAT_COMPOSITE","",""],[17,"FT_GLYPH_FORMAT_BITMAP","",""],[17,"FT_GLYPH_FORMAT_OUTLINE","",""],[17,"FT_GLYPH_FORMAT_PLOTTER","",""],[17,"FT_ENCODING_NONE","",""],[17,"FT_ENCODING_MS_SYMBOL","",""],[17,"FT_ENCODING_UNICODE","",""],[17,"FT_ENCODING_SJIS","",""],[17,"FT_ENCODING_GB2312","",""],[17,"FT_ENCODING_BIG5","",""],[17,"FT_ENCODING_WANSUNG","",""],[17,"FT_ENCODING_JOHAB","",""],[17,"FT_ENCODING_MS_SJIS","",""],[17,"FT_ENCODING_MS_GB2312","",""],[17,"FT_ENCODING_MS_BIG5","",""],[17,"FT_ENCODING_MS_WANSUNG","",""],[17,"FT_ENCODING_MS_JOHAB","",""],[17,"FT_ENCODING_ADOBE_STANDARD","",""],[17,"FT_ENCODING_ADOBE_EXPERT","",""],[17,"FT_ENCODING_ADOBE_CUSTOM","",""],[17,"FT_ENCODING_ADOBE_LATIN_1","",""],[17,"FT_ENCODING_OLD_LATIN_2","",""],[17,"FT_ENCODING_APPLE_ROMAN","",""],[17,"FT_LOAD_DEFAULT","",""],[17,"FT_LOAD_NO_SCALE","",""],[17,"FT_LOAD_NO_HINTING","",""],[17,"FT_LOAD_RENDER","",""],[17,"FT_LOAD_NO_BITMAP","",""],[17,"FT_LOAD_VERTICAL_LAYOUT","",""],[17,"FT_LOAD_FORCE_AUTOHINT","",""],[17,"FT_LOAD_CROP_BITMAP","",""],[17,"FT_LOAD_PENDANTIC","",""],[17,"FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH","",""],[17,"FT_LOAD_NO_RECURSE","",""],[17,"FT_LOAD_IGNORE_TRANSFORM","",""],[17,"FT_LOAD_MONOCHROME","",""],[17,"FT_LOAD_LINEAR_DESIGN","",""],[17,"FT_LOAD_NO_AUTOHINT","",""],[17,"FT_STYLE_FLAG_ITALIC","",""],[17,"FT_STYLE_FLAG_BOLD","",""],[17,"FT_SIZE_REQUEST_TYPE_NOMINAL","",""],[17,"FT_SIZE_REQUEST_TYPE_REAL_DIM","",""],[17,"FT_SIZE_REQUEST_TYPE_BBOX","",""],[17,"FT_SIZE_REQUEST_TYPE_CELL","",""],[17,"FT_SIZE_REQUEST_TYPE_SCALES","",""],[17,"FT_SIZE_REQUEST_TYPE_MAX","",""],[17,"FT_RENDER_MODE_NORMAL","",""],[17,"FT_RENDER_MODE_LIGHT","",""],[17,"FT_RENDER_MODE_MONO","",""],[17,"FT_RENDER_MODE_LCD","",""],[17,"FT_RENDER_MODE_LCD_V","",""],[17,"FT_RENDER_MODE_MAX","",""],[17,"FT_KERNING_DEFAULT","",""],[17,"FT_KERNING_UNFITTED","",""],[17,"FT_KERNING_UNSCALED","",""],[17,"FT_Mod_Err_Base","",""],[17,"FT_Mod_Err_Autofit","",""],[17,"FT_Mod_Err_BDF","",""],[17,"FT_Mod_Err_Cache","",""],[17,"FT_Mod_Err_CFF","",""],[17,"FT_Mod_Err_CID","",""],[17,"FT_Mod_Err_Gzip","",""],[17,"FT_Mod_Err_LZW","",""],[17,"FT_Mod_Err_OTvalid","",""],[17,"FT_Mod_Err_PCF","",""],[17,"FT_Mod_Err_PFR","",""],[17,"FT_Mod_Err_PSaux","",""],[17,"FT_Mod_Err_PShinter","",""],[17,"FT_Mod_Err_PSnames","",""],[17,"FT_Mod_Err_Raster","",""],[17,"FT_Mod_Err_SFNT","",""],[17,"FT_Mod_Err_Smooth","",""],[17,"FT_Mod_Err_TrueType","",""],[17,"FT_Mod_Err_Type1","",""],[17,"FT_Mod_Err_Type42","",""],[17,"FT_Mod_Err_Winfonts","",""],[17,"FT_Mod_Err_Max","",""],[17,"FT_Err_Ok","",""],[17,"FT_Err_Cannot_Open_Resource","",""],[17,"FT_Err_Unknown_File_Format","",""],[17,"FT_Err_Invalid_File_Format","",""],[17,"FT_Err_Invalid_Version","",""],[17,"FT_Err_Lower_Module_Version","",""],[17,"FT_Err_Invalid_Argument","",""],[17,"FT_Err_Unimplemented_Feature","",""],[17,"FT_Err_Invalid_Table","",""],[17,"FT_Err_Invalid_Offset","",""],[17,"FT_Err_Array_Too_Large","",""],[17,"FT_Err_Invalid_Glyph_Index","",""],[17,"FT_Err_Invalid_Character_Code","",""],[17,"FT_Err_Invalid_Glyph_Format","",""],[17,"FT_Err_Cannot_Render_Glyph","",""],[17,"FT_Err_Invalid_Outline","",""],[17,"FT_Err_Invalid_Composite","",""],[17,"FT_Err_Too_Many_Hints","",""],[17,"FT_Err_Invalid_Pixel_Size","",""],[17,"FT_Err_Invalid_Handle","",""],[17,"FT_Err_Invalid_Library_Handle","",""],[17,"FT_Err_Invalid_Driver_Handle","",""],[17,"FT_Err_Invalid_Face_Handle","",""],[17,"FT_Err_Invalid_Size_Handle","",""],[17,"FT_Err_Invalid_Slot_Handle","",""],[17,"FT_Err_Invalid_CharMap_Handle","",""],[17,"FT_Err_Invalid_Cache_Handle","",""],[17,"FT_Err_Invalid_Stream_Handle","",""],[17,"FT_Err_Too_Many_Drivers","",""],[17,"FT_Err_Too_Many_Extensions","",""],[17,"FT_Err_Out_Of_Memory","",""],[17,"FT_Err_Unlisted_Object","",""],[17,"FT_Err_Cannot_Open_Stream","",""],[17,"FT_Err_Invalid_Stream_Seek","",""],[17,"FT_Err_Invalid_Stream_Skip","",""],[17,"FT_Err_Invalid_Stream_Read","",""],[17,"FT_Err_Invalid_Stream_Operation","",""],[17,"FT_Err_Invalid_Frame_Operation","",""],[17,"FT_Err_Nested_Frame_Access","",""],[17,"FT_Err_Invalid_Frame_Read","",""],[17,"FT_Err_Raster_Uninitialized","",""],[17,"FT_Err_Raster_Corrupted","",""],[17,"FT_Err_Raster_Overflow","",""],[17,"FT_Err_Raster_Negative_Height","",""],[17,"FT_Err_Too_Many_Caches","",""],[17,"FT_Err_Invalid_Opcode","",""],[17,"FT_Err_Too_Few_Arguments","",""],[17,"FT_Err_Stack_Overflow","",""],[17,"FT_Err_Code_Overflow","",""],[17,"FT_Err_Bad_Argument","",""],[17,"FT_Err_Divide_By_Zero","",""],[17,"FT_Err_Invalid_Reference","",""],[17,"FT_Err_Debug_OpCode","",""],[17,"FT_Err_ENDF_In_Exec_Stream","",""],[17,"FT_Err_Nested_DEFS","",""],[17,"FT_Err_Invalid_CodeRange","",""],[17,"FT_Err_Execution_Too_Long","",""],[17,"FT_Err_Too_Many_Function_Defs","",""],[17,"FT_Err_Too_Many_Instruction_Defs","",""],[17,"FT_Err_Table_Missing","",""],[17,"FT_Err_Horiz_Header_Missing","",""],[17,"FT_Err_Locations_Missing","",""],[17,"FT_Err_Name_Table_Missing","",""],[17,"FT_Err_CMap_Table_Missing","",""],[17,"FT_Err_Hmtx_Table_Missing","",""],[17,"FT_Err_Post_Table_Missing","",""],[17,"FT_Err_Invalid_Horiz_Metrics","",""],[17,"FT_Err_Invalid_CharMap_Format","",""],[17,"FT_Err_Invalid_PPem","",""],[17,"FT_Err_Invalid_Vert_Metrics","",""],[17,"FT_Err_Could_Not_Find_Context","",""],[17,"FT_Err_Invalid_Post_Table_Format","",""],[17,"FT_Err_Invalid_Post_Table","",""],[17,"FT_Err_Syntax_Error","",""],[17,"FT_Err_Stack_Underflow","",""],[17,"FT_Err_Ignore","",""],[17,"FT_Err_No_Unicode_Glyph_Name","",""],[17,"FT_Err_Missing_Startfont_Field","",""],[17,"FT_Err_Missing_Font_Field","",""],[17,"FT_Err_Missing_Size_Field","",""],[17,"FT_Err_Missing_Fontboundingbox_Field","",""],[17,"FT_Err_Missing_Chars_Field","",""],[17,"FT_Err_Missing_Startchar_Field","",""],[17,"FT_Err_Missing_Encoding_Field","",""],[17,"FT_Err_Missing_Bbx_Field","",""],[17,"FT_Err_Bbx_Too_Big","",""],[17,"FT_Err_Corrupted_Font_Header","",""],[17,"FT_Err_Corrupted_Font_Glyphs","",""],[17,"FT_Err_Max","",""],[8,"FTErrorMethods","",""],[10,"succeeded","","",26],[11,"succeeded","","",27],[0,"tt_os2","freetype",""],[3,"TT_OS2","freetype::tt_os2",""],[12,"version","","",28],[12,"xAvgCharWidth","","",28],[12,"usWeightClass","","",28],[12,"usWidthClass","","",28],[12,"fsType","","",28],[12,"ySubscriptXSize","","",28],[12,"ySubscriptYSize","","",28],[12,"ySubscriptXOffset","","",28],[12,"ySubscriptYOffset","","",28],[12,"ySuperscriptXSize","","",28],[12,"ySuperscriptYSize","","",28],[12,"ySuperscriptXOffset","","",28],[12,"ySuperscriptYOffset","","",28],[12,"yStrikeoutSize","","",28],[12,"yStrikeoutPosition","","",28],[12,"sFamilyClass","","",28],[12,"panose","","",28],[12,"ulUnicodeRange1","","",28],[12,"ulUnicodeRange2","","",28],[12,"ulUnicodeRange3","","",28],[12,"ulUnicodeRange4","","",28],[12,"ulCodePageRange1","","",28],[12,"ulCodePageRange2","","",28],[12,"sxHeight","","",28],[12,"sCapHeight","","",28],[12,"usDefaultChar","","",28],[12,"usBreakChar","","",28],[12,"usMaxContext","","",28]],"paths":[[3,"struct_FT_MemoryRec_"],[3,"struct_FT_StreamRec_"],[3,"struct_FT_Vector_"],[3,"struct_FT_BBox_"],[3,"struct_FT_Bitmap_"],[3,"struct_FT_Outline_"],[3,"struct_FT_Outline_Funcs_"],[3,"struct_FT_Span_"],[3,"struct_FT_Raster_Params_"],[3,"struct_FT_Raster_Funcs_"],[3,"struct_FT_UnitVector_"],[3,"struct_FT_Matrix_"],[3,"struct_FT_Data_"],[3,"struct_FT_Generic_"],[3,"struct_FT_ListNodeRec_"],[3,"struct_FT_ListRec_"],[3,"struct_FT_Glyph_Metrics_"],[3,"struct_FT_Bitmap_Size_"],[3,"struct_FT_CharMapRec_"],[3,"struct_FT_FaceRec_"],[3,"struct_FT_Size_Metrics_"],[3,"struct_FT_SizeRec_"],[3,"struct_FT_GlyphSlotRec_"],[3,"struct_FT_Parameter_"],[3,"struct_FT_Open_Args_"],[3,"struct_FT_Size_RequestRec_"],[8,"FTErrorMethods"],[6,"FT_Error"],[3,"TT_OS2"]]};
searchIndex['gl_common'] = {"items":[[0,"","gl_common","Defines everything used by `gl_generator`."],[8,"GlFunctionsSource","",""],[10,"get_proc_addr","","",0]],"paths":[[8,"GlFunctionsSource"]]};
searchIndex['xlib'] = {"items":[[0,"","xlib",""],[3,"struct__XExtData","",""],[12,"number","","",0],[12,"next","","",0],[12,"free_private","","",0],[12,"private_data","","",0],[3,"XExtCodes","",""],[12,"extension","","",1],[12,"major_opcode","","",1],[12,"first_event","","",1],[12,"first_error","","",1],[3,"XPixmapFormatValues","",""],[12,"depth","","",2],[12,"bits_per_pixel","","",2],[12,"scanline_pad","","",2],[3,"XGCValues","",""],[12,"function","","",3],[12,"plane_mask","","",3],[12,"foreground","","",3],[12,"background","","",3],[12,"line_width","","",3],[12,"line_style","","",3],[12,"cap_style","","",3],[12,"join_style","","",3],[12,"fill_style","","",3],[12,"fill_rule","","",3],[12,"arc_mode","","",3],[12,"tile","","",3],[12,"stipple","","",3],[12,"ts_x_origin","","",3],[12,"ts_y_origin","","",3],[12,"font","","",3],[12,"subwindow_mode","","",3],[12,"graphics_exposures","","",3],[12,"clip_x_origin","","",3],[12,"clip_y_origin","","",3],[12,"clip_mask","","",3],[12,"dash_offset","","",3],[12,"dashes","","",3],[3,"Visual","",""],[12,"ext_data","","",4],[12,"visualid","","",4],[12,"_class","","",4],[12,"red_mask","","",4],[12,"green_mask","","",4],[12,"blue_mask","","",4],[12,"bits_per_rgb","","",4],[12,"map_entries","","",4],[3,"Depth","",""],[12,"depth","","",5],[12,"nvisuals","","",5],[12,"visuals","","",5],[3,"Screen","",""],[12,"ext_data","","",6],[12,"display","","",6],[12,"root","","",6],[12,"width","","",6],[12,"height","","",6],[12,"mwidth","","",6],[12,"mheight","","",6],[12,"ndepths","","",6],[12,"depths","","",6],[12,"root_depth","","",6],[12,"root_visual","","",6],[12,"default_gc","","",6],[12,"cmap","","",6],[12,"white_pixel","","",6],[12,"black_pixel","","",6],[12,"max_maps","","",6],[12,"min_maps","","",6],[12,"backing_store","","",6],[12,"save_unders","","",6],[12,"root_input_mask","","",6],[3,"ScreenFormat","",""],[12,"ext_data","","",7],[12,"depth","","",7],[12,"bits_per_pixel","","",7],[12,"scanline_pad","","",7],[3,"XSetWindowAttributes","",""],[12,"background_pixmap","","",8],[12,"background_pixel","","",8],[12,"border_pixmap","","",8],[12,"border_pixel","","",8],[12,"bit_gravity","","",8],[12,"win_gravity","","",8],[12,"backing_store","","",8],[12,"backing_planes","","",8],[12,"backing_pixel","","",8],[12,"save_under","","",8],[12,"event_mask","","",8],[12,"do_not_propagate_mask","","",8],[12,"override_redirect","","",8],[12,"colormap","","",8],[12,"cursor","","",8],[3,"XWindowAttributes","",""],[12,"x","","",9],[12,"y","","",9],[12,"width","","",9],[12,"height","","",9],[12,"border_width","","",9],[12,"depth","","",9],[12,"visual","","",9],[12,"root","","",9],[12,"_class","","",9],[12,"bit_gravity","","",9],[12,"win_gravity","","",9],[12,"backing_store","","",9],[12,"backing_planes","","",9],[12,"backing_pixel","","",9],[12,"save_under","","",9],[12,"colormap","","",9],[12,"map_installed","","",9],[12,"map_state","","",9],[12,"all_event_masks","","",9],[12,"your_event_mask","","",9],[12,"do_not_propagate_mask","","",9],[12,"override_redirect","","",9],[12,"screen","","",9],[3,"XHostAddress","",""],[12,"family","","",10],[12,"length","","",10],[12,"address","","",10],[3,"XServerInterpretedAddress","",""],[12,"typelength","","",11],[12,"valuelength","","",11],[12,"_type","","",11],[12,"value","","",11],[3,"struct__XImage","",""],[12,"width","","",12],[12,"height","","",12],[12,"xoffset","","",12],[12,"format","","",12],[12,"data","","",12],[12,"byte_order","","",12],[12,"bitmap_unit","","",12],[12,"bitmap_bit_order","","",12],[12,"bitmap_pad","","",12],[12,"depth","","",12],[12,"bytes_per_line","","",12],[12,"bits_per_pixel","","",12],[12,"red_mask","","",12],[12,"green_mask","","",12],[12,"blue_mask","","",12],[12,"obdata","","",12],[12,"f","","",12],[3,"struct_funcs","",""],[12,"create_image","","",13],[12,"destroy_image","","",13],[12,"get_pixel","","",13],[12,"put_pixel","","",13],[12,"sub_image","","",13],[12,"add_pixel","","",13],[3,"XWindowChanges","",""],[12,"x","","",14],[12,"y","","",14],[12,"width","","",14],[12,"height","","",14],[12,"border_width","","",14],[12,"sibling","","",14],[12,"stack_mode","","",14],[3,"XColor","",""],[12,"pixel","","",15],[12,"red","","",15],[12,"green","","",15],[12,"blue","","",15],[12,"flags","","",15],[12,"pad","","",15],[3,"XSegment","",""],[12,"x1","","",16],[12,"y1","","",16],[12,"x2","","",16],[12,"y2","","",16],[3,"XPoint","",""],[12,"x","","",17],[12,"y","","",17],[3,"XRectangle","",""],[12,"x","","",18],[12,"y","","",18],[12,"width","","",18],[12,"height","","",18],[3,"XArc","",""],[12,"x","","",19],[12,"y","","",19],[12,"width","","",19],[12,"height","","",19],[12,"angle1","","",19],[12,"angle2","","",19],[3,"XKeyboardControl","",""],[12,"key_click_percent","","",20],[12,"bell_percent","","",20],[12,"bell_pitch","","",20],[12,"bell_duration","","",20],[12,"led","","",20],[12,"led_mode","","",20],[12,"key","","",20],[12,"auto_repeat_mode","","",20],[3,"XKeyboardState","",""],[12,"key_click_percent","","",21],[12,"bell_percent","","",21],[12,"bell_pitch","","",21],[12,"bell_duration","","",21],[12,"led_mask","","",21],[12,"global_auto_repeat","","",21],[12,"auto_repeats","","",21],[3,"XTimeCoord","",""],[12,"time","","",22],[12,"x","","",22],[12,"y","","",22],[3,"XModifierKeymap","",""],[12,"max_keypermod","","",23],[12,"modifiermap","","",23],[3,"XKeyEvent","",""],[12,"_type","","",24],[12,"serial","","",24],[12,"send_event","","",24],[12,"display","","",24],[12,"window","","",24],[12,"root","","",24],[12,"subwindow","","",24],[12,"time","","",24],[12,"x","","",24],[12,"y","","",24],[12,"x_root","","",24],[12,"y_root","","",24],[12,"state","","",24],[12,"keycode","","",24],[12,"same_screen","","",24],[3,"XButtonEvent","",""],[12,"_type","","",25],[12,"serial","","",25],[12,"send_event","","",25],[12,"display","","",25],[12,"window","","",25],[12,"root","","",25],[12,"subwindow","","",25],[12,"time","","",25],[12,"x","","",25],[12,"y","","",25],[12,"x_root","","",25],[12,"y_root","","",25],[12,"state","","",25],[12,"button","","",25],[12,"same_screen","","",25],[3,"XMotionEvent","",""],[12,"_type","","",26],[12,"serial","","",26],[12,"send_event","","",26],[12,"display","","",26],[12,"window","","",26],[12,"root","","",26],[12,"subwindow","","",26],[12,"time","","",26],[12,"x","","",26],[12,"y","","",26],[12,"x_root","","",26],[12,"y_root","","",26],[12,"state","","",26],[12,"is_hint","","",26],[12,"same_screen","","",26],[3,"XCrossingEvent","",""],[12,"_type","","",27],[12,"serial","","",27],[12,"send_event","","",27],[12,"display","","",27],[12,"window","","",27],[12,"root","","",27],[12,"subwindow","","",27],[12,"time","","",27],[12,"x","","",27],[12,"y","","",27],[12,"x_root","","",27],[12,"y_root","","",27],[12,"mode","","",27],[12,"detail","","",27],[12,"same_screen","","",27],[12,"focus","","",27],[12,"state","","",27],[3,"XFocusChangeEvent","",""],[12,"_type","","",28],[12,"serial","","",28],[12,"send_event","","",28],[12,"display","","",28],[12,"window","","",28],[12,"mode","","",28],[12,"detail","","",28],[3,"XKeymapEvent","",""],[12,"_type","","",29],[12,"serial","","",29],[12,"send_event","","",29],[12,"display","","",29],[12,"window","","",29],[12,"key_vector","","",29],[3,"XExposeEvent","",""],[12,"_type","","",30],[12,"serial","","",30],[12,"send_event","","",30],[12,"display","","",30],[12,"window","","",30],[12,"x","","",30],[12,"y","","",30],[12,"width","","",30],[12,"height","","",30],[12,"count","","",30],[3,"XGraphicsExposeEvent","",""],[12,"_type","","",31],[12,"serial","","",31],[12,"send_event","","",31],[12,"display","","",31],[12,"drawable","","",31],[12,"x","","",31],[12,"y","","",31],[12,"width","","",31],[12,"height","","",31],[12,"count","","",31],[12,"major_code","","",31],[12,"minor_code","","",31],[3,"XNoExposeEvent","",""],[12,"_type","","",32],[12,"serial","","",32],[12,"send_event","","",32],[12,"display","","",32],[12,"drawable","","",32],[12,"major_code","","",32],[12,"minor_code","","",32],[3,"XVisibilityEvent","",""],[12,"_type","","",33],[12,"serial","","",33],[12,"send_event","","",33],[12,"display","","",33],[12,"window","","",33],[12,"state","","",33],[3,"XCreateWindowEvent","",""],[12,"_type","","",34],[12,"serial","","",34],[12,"send_event","","",34],[12,"display","","",34],[12,"parent","","",34],[12,"window","","",34],[12,"x","","",34],[12,"y","","",34],[12,"width","","",34],[12,"height","","",34],[12,"border_width","","",34],[12,"override_redirect","","",34],[3,"XDestroyWindowEvent","",""],[12,"_type","","",35],[12,"serial","","",35],[12,"send_event","","",35],[12,"display","","",35],[12,"event","","",35],[12,"window","","",35],[3,"XUnmapEvent","",""],[12,"_type","","",36],[12,"serial","","",36],[12,"send_event","","",36],[12,"display","","",36],[12,"event","","",36],[12,"window","","",36],[12,"from_configure","","",36],[3,"XMapEvent","",""],[12,"_type","","",37],[12,"serial","","",37],[12,"send_event","","",37],[12,"display","","",37],[12,"event","","",37],[12,"window","","",37],[12,"override_redirect","","",37],[3,"XMapRequestEvent","",""],[12,"_type","","",38],[12,"serial","","",38],[12,"send_event","","",38],[12,"display","","",38],[12,"parent","","",38],[12,"window","","",38],[3,"XReparentEvent","",""],[12,"_type","","",39],[12,"serial","","",39],[12,"send_event","","",39],[12,"display","","",39],[12,"event","","",39],[12,"window","","",39],[12,"parent","","",39],[12,"x","","",39],[12,"y","","",39],[12,"override_redirect","","",39],[3,"XConfigureEvent","",""],[12,"_type","","",40],[12,"serial","","",40],[12,"send_event","","",40],[12,"display","","",40],[12,"event","","",40],[12,"window","","",40],[12,"x","","",40],[12,"y","","",40],[12,"width","","",40],[12,"height","","",40],[12,"border_width","","",40],[12,"above","","",40],[12,"override_redirect","","",40],[3,"XGravityEvent","",""],[12,"_type","","",41],[12,"serial","","",41],[12,"send_event","","",41],[12,"display","","",41],[12,"event","","",41],[12,"window","","",41],[12,"x","","",41],[12,"y","","",41],[3,"XResizeRequestEvent","",""],[12,"_type","","",42],[12,"serial","","",42],[12,"send_event","","",42],[12,"display","","",42],[12,"window","","",42],[12,"width","","",42],[12,"height","","",42],[3,"XConfigureRequestEvent","",""],[12,"_type","","",43],[12,"serial","","",43],[12,"send_event","","",43],[12,"display","","",43],[12,"parent","","",43],[12,"window","","",43],[12,"x","","",43],[12,"y","","",43],[12,"width","","",43],[12,"height","","",43],[12,"border_width","","",43],[12,"above","","",43],[12,"detail","","",43],[12,"value_mask","","",43],[3,"XCirculateEvent","",""],[12,"_type","","",44],[12,"serial","","",44],[12,"send_event","","",44],[12,"display","","",44],[12,"event","","",44],[12,"window","","",44],[12,"place","","",44],[3,"XCirculateRequestEvent","",""],[12,"_type","","",45],[12,"serial","","",45],[12,"send_event","","",45],[12,"display","","",45],[12,"parent","","",45],[12,"window","","",45],[12,"place","","",45],[3,"XPropertyEvent","",""],[12,"_type","","",46],[12,"serial","","",46],[12,"send_event","","",46],[12,"display","","",46],[12,"window","","",46],[12,"atom","","",46],[12,"time","","",46],[12,"state","","",46],[3,"XSelectionClearEvent","",""],[12,"_type","","",47],[12,"serial","","",47],[12,"send_event","","",47],[12,"display","","",47],[12,"window","","",47],[12,"selection","","",47],[12,"time","","",47],[3,"XSelectionRequestEvent","",""],[12,"_type","","",48],[12,"serial","","",48],[12,"send_event","","",48],[12,"display","","",48],[12,"owner","","",48],[12,"requestor","","",48],[12,"selection","","",48],[12,"target","","",48],[12,"property","","",48],[12,"time","","",48],[3,"XSelectionEvent","",""],[12,"_type","","",49],[12,"serial","","",49],[12,"send_event","","",49],[12,"display","","",49],[12,"requestor","","",49],[12,"selection","","",49],[12,"target","","",49],[12,"property","","",49],[12,"time","","",49],[3,"XColormapEvent","",""],[12,"_type","","",50],[12,"serial","","",50],[12,"send_event","","",50],[12,"display","","",50],[12,"window","","",50],[12,"colormap","","",50],[12,"_new","","",50],[12,"state","","",50],[3,"XClientMessageEvent","",""],[12,"_type","","",51],[12,"serial","","",51],[12,"send_event","","",51],[12,"display","","",51],[12,"window","","",51],[12,"message_type","","",51],[12,"format","","",51],[12,"data","","",51],[3,"XMappingEvent","",""],[12,"_type","","",52],[12,"serial","","",52],[12,"send_event","","",52],[12,"display","","",52],[12,"window","","",52],[12,"request","","",52],[12,"first_keycode","","",52],[12,"count","","",52],[3,"XErrorEvent","",""],[12,"_type","","",53],[12,"display","","",53],[12,"resourceid","","",53],[12,"serial","","",53],[12,"error_code","","",53],[12,"request_code","","",53],[12,"minor_code","","",53],[3,"XAnyEvent","",""],[12,"_type","","",54],[12,"serial","","",54],[12,"send_event","","",54],[12,"display","","",54],[12,"window","","",54],[3,"XGenericEvent","",""],[12,"_type","","",55],[12,"serial","","",55],[12,"send_event","","",55],[12,"display","","",55],[12,"extension","","",55],[12,"evtype","","",55],[3,"XGenericEventCookie","",""],[12,"_type","","",56],[12,"serial","","",56],[12,"send_event","","",56],[12,"display","","",56],[12,"extension","","",56],[12,"evtype","","",56],[12,"cookie","","",56],[12,"data","","",56],[3,"XCharStruct","",""],[12,"lbearing","","",57],[12,"rbearing","","",57],[12,"width","","",57],[12,"ascent","","",57],[12,"descent","","",57],[12,"attributes","","",57],[3,"XFontProp","",""],[12,"name","","",58],[12,"card32","","",58],[3,"XFontStruct","",""],[12,"ext_data","","",59],[12,"fid","","",59],[12,"direction","","",59],[12,"min_char_or_byte2","","",59],[12,"max_char_or_byte2","","",59],[12,"min_byte1","","",59],[12,"max_byte1","","",59],[12,"all_chars_exist","","",59],[12,"default_char","","",59],[12,"n_properties","","",59],[12,"properties","","",59],[12,"min_bounds","","",59],[12,"max_bounds","","",59],[12,"per_char","","",59],[12,"ascent","","",59],[12,"descent","","",59],[3,"XTextItem","",""],[12,"chars","","",60],[12,"nchars","","",60],[12,"delta","","",60],[12,"font","","",60],[3,"XChar2b","",""],[12,"byte1","","",61],[12,"byte2","","",61],[3,"XTextItem16","",""],[12,"chars","","",62],[12,"nchars","","",62],[12,"delta","","",62],[12,"font","","",62],[3,"XFontSetExtents","",""],[12,"max_ink_extent","","",63],[12,"max_logical_extent","","",63],[3,"XmbTextItem","",""],[12,"chars","","",64],[12,"nchars","","",64],[12,"delta","","",64],[12,"font_set","","",64],[3,"XwcTextItem","",""],[12,"chars","","",65],[12,"nchars","","",65],[12,"delta","","",65],[12,"font_set","","",65],[3,"XOMCharSetList","",""],[12,"charset_count","","",66],[12,"charset_list","","",66],[3,"XOMOrientation","",""],[12,"num_orientation","","",67],[12,"orientation","","",67],[3,"XOMFontInfo","",""],[12,"num_font","","",68],[12,"font_struct_list","","",68],[12,"font_name_list","","",68],[3,"XIMStyles","",""],[12,"count_styles","","",69],[12,"supported_styles","","",69],[3,"XIMCallback","",""],[12,"client_data","","",70],[12,"callback","","",70],[3,"XICCallback","",""],[12,"client_data","","",71],[12,"callback","","",71],[3,"struct__XIMText","",""],[12,"length","","",72],[12,"feedback","","",72],[12,"encoding_is_wchar","","",72],[12,"string","","",72],[3,"struct__XIMPreeditStateNotifyCallbackStruct","",""],[12,"state","","",73],[3,"struct__XIMStringConversionText","",""],[12,"length","","",74],[12,"feedback","","",74],[12,"encoding_is_wchar","","",74],[12,"string","","",74],[3,"struct__XIMStringConversionCallbackStruct","",""],[12,"position","","",75],[12,"direction","","",75],[12,"operation","","",75],[12,"factor","","",75],[12,"text","","",75],[3,"struct__XIMPreeditDrawCallbackStruct","",""],[12,"caret","","",76],[12,"chg_first","","",76],[12,"chg_length","","",76],[12,"text","","",76],[3,"struct__XIMPreeditCaretCallbackStruct","",""],[12,"position","","",77],[12,"direction","","",77],[12,"style","","",77],[3,"struct__XIMStatusDrawCallbackStruct","",""],[12,"_type","","",78],[12,"data","","",78],[3,"struct__XIMHotKeyTrigger","",""],[12,"keysym","","",79],[12,"modifier","","",79],[12,"modifier_mask","","",79],[3,"struct__XIMHotKeyTriggers","",""],[12,"num_hot_key","","",80],[12,"key","","",80],[3,"XIMValuesList","",""],[12,"count_values","","",81],[12,"supported_values","","",81],[3,"struct_unnamed1","",""],[12,"ext_data","","",82],[12,"private1","","",82],[12,"fd","","",82],[12,"private2","","",82],[12,"proto_major_version","","",82],[12,"proto_minor_version","","",82],[12,"vendor","","",82],[12,"private3","","",82],[12,"private4","","",82],[12,"private5","","",82],[12,"private6","","",82],[12,"resource_alloc","","",82],[12,"byte_order","","",82],[12,"bitmap_unit","","",82],[12,"bitmap_pad","","",82],[12,"bitmap_bit_order","","",82],[12,"nformats","","",82],[12,"pixmap_format","","",82],[12,"private8","","",82],[12,"release","","",82],[12,"private9","","",82],[12,"private10","","",82],[12,"qlen","","",82],[12,"last_request_read","","",82],[12,"request","","",82],[12,"private11","","",82],[12,"private12","","",82],[12,"private13","","",82],[12,"private14","","",82],[12,"max_request_size","","",82],[12,"db","","",82],[12,"private15","","",82],[12,"display_name","","",82],[12,"default_screen","","",82],[12,"nscreens","","",82],[12,"screens","","",82],[12,"motion_buffer","","",82],[12,"private16","","",82],[12,"min_keycode","","",82],[12,"max_keycode","","",82],[12,"private17","","",82],[12,"private18","","",82],[12,"private19","","",82],[12,"xdefaults","","",82],[3,"XVisualInfo","",""],[12,"visual","","",83],[12,"visualid","","",83],[12,"screen","","",83],[12,"depth","","",83],[12,"class","","",83],[12,"red_mask","","",83],[12,"green_mask","","",83],[12,"blue_mask","","",83],[12,"colormap_size","","",83],[12,"bits_per_rgb","","",83],[3,"XClassHint","",""],[12,"res_name","","",84],[12,"res_class","","",84],[3,"XSizeHintFlags","",""],[3,"XSizeHintInternal","",""],[12,"x","","",85],[12,"y","","",85],[3,"XSizeHints","",""],[12,"flags","","",86],[12,"x","","",86],[12,"y","","",86],[12,"width","","",86],[12,"height","","",86],[12,"min_width","","",86],[12,"min_height","","",86],[12,"max_width","","",86],[12,"max_height","","",86],[12,"width_inc","","",86],[12,"height_inc","","",86],[12,"min_aspect","","",86],[12,"max_aspect","","",86],[12,"base_width","","",86],[12,"base_height","","",86],[12,"win_gravity","","",86],[5,"_Xmblen","",""],[5,"XLoadQueryFont","",""],[5,"XQueryFont","",""],[5,"XGetMotionEvents","",""],[5,"XDeleteModifiermapEntry","",""],[5,"XGetModifierMapping","",""],[5,"XInsertModifiermapEntry","",""],[5,"XNewModifiermap","",""],[5,"XCreateImage","",""],[5,"XInitImage","",""],[5,"XGetImage","",""],[5,"XGetSubImage","",""],[5,"XOpenDisplay","",""],[5,"XrmInitialize","",""],[5,"XFetchBytes","",""],[5,"XFetchBuffer","",""],[5,"XGetAtomName","",""],[5,"XGetAtomNames","",""],[5,"XGetClassHint","",""],[5,"XGetDefault","",""],[5,"XDisplayName","",""],[5,"XKeysymToString","",""],[5,"XSynchronize","",""],[5,"XSetAfterFunction","",""],[5,"XInternAtom","",""],[5,"XInternAtoms","",""],[5,"XCopyColormapAndFree","",""],[5,"XCreateColormap","",""],[5,"XCreatePixmapCursor","",""],[5,"XCreateGlyphCursor","",""],[5,"XCreateFontCursor","",""],[5,"XLoadFont","",""],[5,"XCreateGC","",""],[5,"XGContextFromGC","",""],[5,"XFlushGC","",""],[5,"XCreatePixmap","",""],[5,"XCreateBitmapFromData","",""],[5,"XCreatePixmapFromBitmapData","",""],[5,"XCreateSimpleWindow","",""],[5,"XGetSelectionOwner","",""],[5,"XCreateWindow","",""],[5,"XListInstalledColormaps","",""],[5,"XListFonts","",""],[5,"XListFontsWithInfo","",""],[5,"XGetFontPath","",""],[5,"XListExtensions","",""],[5,"XListProperties","",""],[5,"XListHosts","",""],[5,"XKeycodeToKeysym","",""],[5,"XLookupKeysym","",""],[5,"XGetKeyboardMapping","",""],[5,"XStringToKeysym","",""],[5,"XMaxRequestSize","",""],[5,"XExtendedMaxRequestSize","",""],[5,"XResourceManagerString","",""],[5,"XScreenResourceString","",""],[5,"XDisplayMotionBufferSize","",""],[5,"XVisualIDFromVisual","",""],[5,"XInitThreads","",""],[5,"XLockDisplay","",""],[5,"XUnlockDisplay","",""],[5,"XInitExtension","",""],[5,"XAddExtension","",""],[5,"XFindOnExtensionList","",""],[5,"XEHeadOfExtensionList","",""],[5,"XRootWindow","",""],[5,"XDefaultRootWindow","",""],[5,"XRootWindowOfScreen","",""],[5,"XDefaultVisual","",""],[5,"XDefaultVisualOfScreen","",""],[5,"XDefaultGC","",""],[5,"XDefaultGCOfScreen","",""],[5,"XBlackPixel","",""],[5,"XWhitePixel","",""],[5,"XAllPlanes","",""],[5,"XBlackPixelOfScreen","",""],[5,"XWhitePixelOfScreen","",""],[5,"XNextRequest","",""],[5,"XLastKnownRequestProcessed","",""],[5,"XServerVendor","",""],[5,"XDisplayString","",""],[5,"XDefaultColormap","",""],[5,"XDefaultColormapOfScreen","",""],[5,"XDisplayOfScreen","",""],[5,"XScreenOfDisplay","",""],[5,"XDefaultScreenOfDisplay","",""],[5,"XEventMaskOfScreen","",""],[5,"XScreenNumberOfScreen","",""],[5,"XSetErrorHandler","",""],[5,"XSetIOErrorHandler","",""],[5,"XListPixmapFormats","",""],[5,"XListDepths","",""],[5,"XReconfigureWMWindow","",""],[5,"XGetWMProtocols","",""],[5,"XSetWMProtocols","",""],[5,"XIconifyWindow","",""],[5,"XWithdrawWindow","",""],[5,"XGetCommand","",""],[5,"XGetWMColormapWindows","",""],[5,"XSetWMColormapWindows","",""],[5,"XFreeStringList","",""],[5,"XSetTransientForHint","",""],[5,"XActivateScreenSaver","",""],[5,"XAddHost","",""],[5,"XAddHosts","",""],[5,"XAddToExtensionList","",""],[5,"XAddToSaveSet","",""],[5,"XAllocColor","",""],[5,"XAllocColorCells","",""],[5,"XAllocColorPlanes","",""],[5,"XAllocNamedColor","",""],[5,"XAllowEvents","",""],[5,"XAutoRepeatOff","",""],[5,"XAutoRepeatOn","",""],[5,"XBell","",""],[5,"XBitmapBitOrder","",""],[5,"XBitmapPad","",""],[5,"XBitmapUnit","",""],[5,"XCellsOfScreen","",""],[5,"XChangeActivePointerGrab","",""],[5,"XChangeGC","",""],[5,"XChangeKeyboardControl","",""],[5,"XChangeKeyboardMapping","",""],[5,"XChangePointerControl","",""],[5,"XChangeProperty","",""],[5,"XChangeSaveSet","",""],[5,"XChangeWindowAttributes","",""],[5,"XCheckIfEvent","",""],[5,"XCheckMaskEvent","",""],[5,"XCheckTypedEvent","",""],[5,"XCheckTypedWindowEvent","",""],[5,"XCheckWindowEvent","",""],[5,"XCirculateSubwindows","",""],[5,"XCirculateSubwindowsDown","",""],[5,"XCirculateSubwindowsUp","",""],[5,"XClearArea","",""],[5,"XClearWindow","",""],[5,"XCloseDisplay","",""],[5,"XConfigureWindow","",""],[5,"XConnectionNumber","",""],[5,"XConvertSelection","",""],[5,"XCopyArea","",""],[5,"XCopyGC","",""],[5,"XCopyPlane","",""],[5,"XDefaultDepth","",""],[5,"XDefaultDepthOfScreen","",""],[5,"XDefaultScreen","",""],[5,"XDefineCursor","",""],[5,"XDeleteProperty","",""],[5,"XDestroyWindow","",""],[5,"XDestroySubwindows","",""],[5,"XDoesBackingStore","",""],[5,"XDoesSaveUnders","",""],[5,"XDisableAccessControl","",""],[5,"XDisplayCells","",""],[5,"XDisplayHeight","",""],[5,"XDisplayHeightMM","",""],[5,"XDisplayKeycodes","",""],[5,"XDisplayPlanes","",""],[5,"XDisplayWidth","",""],[5,"XDisplayWidthMM","",""],[5,"XDrawArc","",""],[5,"XDrawArcs","",""],[5,"XDrawImageString","",""],[5,"XDrawImageString16","",""],[5,"XDrawLine","",""],[5,"XDrawLines","",""],[5,"XDrawPoint","",""],[5,"XDrawPoints","",""],[5,"XDrawRectangle","",""],[5,"XDrawRectangles","",""],[5,"XDrawSegments","",""],[5,"XDrawString","",""],[5,"XDrawString16","",""],[5,"XDrawText","",""],[5,"XDrawText16","",""],[5,"XEnableAccessControl","",""],[5,"XEventsQueued","",""],[5,"XFetchName","",""],[5,"XFillArc","",""],[5,"XFillArcs","",""],[5,"XFillPolygon","",""],[5,"XFillRectangle","",""],[5,"XFillRectangles","",""],[5,"XFlush","",""],[5,"XForceScreenSaver","",""],[5,"XFree","",""],[5,"XFreeColormap","",""],[5,"XFreeColors","",""],[5,"XFreeCursor","",""],[5,"XFreeExtensionList","",""],[5,"XFreeFont","",""],[5,"XFreeFontInfo","",""],[5,"XFreeFontNames","",""],[5,"XFreeFontPath","",""],[5,"XFreeGC","",""],[5,"XFreeModifiermap","",""],[5,"XFreePixmap","",""],[5,"XGeometry","",""],[5,"XGetErrorDatabaseText","",""],[5,"XGetErrorText","",""],[5,"XGetFontProperty","",""],[5,"XGetGCValues","",""],[5,"XGetGeometry","",""],[5,"XGetIconName","",""],[5,"XGetInputFocus","",""],[5,"XGetKeyboardControl","",""],[5,"XGetPointerControl","",""],[5,"XGetPointerMapping","",""],[5,"XGetScreenSaver","",""],[5,"XGetTransientForHint","",""],[5,"XGetWindowProperty","",""],[5,"XGetWindowAttributes","",""],[5,"XGetWMNormalHints","",""],[5,"XGrabButton","",""],[5,"XGrabKey","",""],[5,"XGrabKeyboard","",""],[5,"XGrabPointer","",""],[5,"XGrabServer","",""],[5,"XHeightMMOfScreen","",""],[5,"XHeightOfScreen","",""],[5,"XIfEvent","",""],[5,"XImageByteOrder","",""],[5,"XInstallColormap","",""],[5,"XKeysymToKeycode","",""],[5,"XKillClient","",""],[5,"XLookupColor","",""],[5,"XLowerWindow","",""],[5,"XMapRaised","",""],[5,"XMapSubwindows","",""],[5,"XMapWindow","",""],[5,"XMaskEvent","",""],[5,"XMaxCmapsOfScreen","",""],[5,"XMinCmapsOfScreen","",""],[5,"XMoveResizeWindow","",""],[5,"XMoveWindow","",""],[5,"XNextEvent","",""],[5,"XNoOp","",""],[5,"XParseColor","",""],[5,"XParseGeometry","",""],[5,"XPeekEvent","",""],[5,"XPeekIfEvent","",""],[5,"XPending","",""],[5,"XPlanesOfScreen","",""],[5,"XProtocolRevision","",""],[5,"XProtocolVersion","",""],[5,"XPutBackEvent","",""],[5,"XPutImage","",""],[5,"XQLength","",""],[5,"XQueryBestCursor","",""],[5,"XQueryBestSize","",""],[5,"XQueryBestStipple","",""],[5,"XQueryBestTile","",""],[5,"XQueryColor","",""],[5,"XQueryColors","",""],[5,"XQueryExtension","",""],[5,"XQueryKeymap","",""],[5,"XQueryPointer","",""],[5,"XQueryTextExtents","",""],[5,"XQueryTextExtents16","",""],[5,"XQueryTree","",""],[5,"XRaiseWindow","",""],[5,"XReadBitmapFile","",""],[5,"XReadBitmapFileData","",""],[5,"XRebindKeysym","",""],[5,"XRecolorCursor","",""],[5,"XRefreshKeyboardMapping","",""],[5,"XRemoveFromSaveSet","",""],[5,"XRemoveHost","",""],[5,"XRemoveHosts","",""],[5,"XReparentWindow","",""],[5,"XResetScreenSaver","",""],[5,"XResizeWindow","",""],[5,"XRestackWindows","",""],[5,"XRotateBuffers","",""],[5,"XRotateWindowProperties","",""],[5,"XScreenCount","",""],[5,"XSelectInput","",""],[5,"XSendEvent","",""],[5,"XSetAccessControl","",""],[5,"XSetArcMode","",""],[5,"XSetBackground","",""],[5,"XSetClipMask","",""],[5,"XSetClipOrigin","",""],[5,"XSetClipRectangles","",""],[5,"XSetCloseDownMode","",""],[5,"XSetCommand","",""],[5,"XSetDashes","",""],[5,"XSetFillRule","",""],[5,"XSetFillStyle","",""],[5,"XSetFont","",""],[5,"XSetFontPath","",""],[5,"XSetForeground","",""],[5,"XSetFunction","",""],[5,"XSetGraphicsExposures","",""],[5,"XSetIconName","",""],[5,"XSetInputFocus","",""],[5,"XSetLineAttributes","",""],[5,"XSetModifierMapping","",""],[5,"XSetPlaneMask","",""],[5,"XSetPointerMapping","",""],[5,"XSetScreenSaver","",""],[5,"XSetSelectionOwner","",""],[5,"XSetState","",""],[5,"XSetStipple","",""],[5,"XSetSubwindowMode","",""],[5,"XSetTSOrigin","",""],[5,"XSetTile","",""],[5,"XSetWindowBackground","",""],[5,"XSetWindowBackgroundPixmap","",""],[5,"XSetWindowBorder","",""],[5,"XSetWindowBorderPixmap","",""],[5,"XSetWindowBorderWidth","",""],[5,"XSetWindowColormap","",""],[5,"XStoreBuffer","",""],[5,"XStoreBytes","",""],[5,"XStoreColor","",""],[5,"XStoreColors","",""],[5,"XStoreName","",""],[5,"XStoreNamedColor","",""],[5,"XSync","",""],[5,"XTextExtents","",""],[5,"XTextExtents16","",""],[5,"XTextWidth","",""],[5,"XTextWidth16","",""],[5,"XTranslateCoordinates","",""],[5,"XUndefineCursor","",""],[5,"XUngrabButton","",""],[5,"XUngrabKey","",""],[5,"XUngrabKeyboard","",""],[5,"XUngrabPointer","",""],[5,"XUngrabServer","",""],[5,"XUninstallColormap","",""],[5,"XUnloadFont","",""],[5,"XUnmapSubwindows","",""],[5,"XUnmapWindow","",""],[5,"XVendorRelease","",""],[5,"XWarpPointer","",""],[5,"XWidthMMOfScreen","",""],[5,"XWidthOfScreen","",""],[5,"XWindowEvent","",""],[5,"XWriteBitmapFile","",""],[5,"XSupportsLocale","",""],[5,"XSetLocaleModifiers","",""],[5,"XOpenOM","",""],[5,"XCloseOM","",""],[5,"XSetOMValues","",""],[5,"XGetOMValues","",""],[5,"XDisplayOfOM","",""],[5,"XLocaleOfOM","",""],[5,"XCreateOC","",""],[5,"XDestroyOC","",""],[5,"XOMOfOC","",""],[5,"XSetOCValues","",""],[5,"XGetOCValues","",""],[5,"XCreateFontSet","",""],[5,"XFreeFontSet","",""],[5,"XFontsOfFontSet","",""],[5,"XBaseFontNameListOfFontSet","",""],[5,"XLocaleOfFontSet","",""],[5,"XContextDependentDrawing","",""],[5,"XDirectionalDependentDrawing","",""],[5,"XContextualDrawing","",""],[5,"XExtentsOfFontSet","",""],[5,"XmbTextEscapement","",""],[5,"XwcTextEscapement","",""],[5,"Xutf8TextEscapement","",""],[5,"XmbTextExtents","",""],[5,"XwcTextExtents","",""],[5,"Xutf8TextExtents","",""],[5,"XmbTextPerCharExtents","",""],[5,"XwcTextPerCharExtents","",""],[5,"Xutf8TextPerCharExtents","",""],[5,"XmbDrawText","",""],[5,"XwcDrawText","",""],[5,"Xutf8DrawText","",""],[5,"XmbDrawString","",""],[5,"XwcDrawString","",""],[5,"Xutf8DrawString","",""],[5,"XmbDrawImageString","",""],[5,"XwcDrawImageString","",""],[5,"Xutf8DrawImageString","",""],[5,"XOpenIM","",""],[5,"XCloseIM","",""],[5,"XGetIMValues","",""],[5,"XSetIMValues","",""],[5,"XDisplayOfIM","",""],[5,"XLocaleOfIM","",""],[5,"XCreateIC","",""],[5,"XDestroyIC","",""],[5,"XSetICFocus","",""],[5,"XUnsetICFocus","",""],[5,"XwcResetIC","",""],[5,"XmbResetIC","",""],[5,"Xutf8ResetIC","",""],[5,"XSetICValues","",""],[5,"XGetICValues","",""],[5,"XIMOfIC","",""],[5,"XFilterEvent","",""],[5,"XmbLookupString","",""],[5,"XwcLookupString","",""],[5,"Xutf8LookupString","",""],[5,"XVaCreateNestedList","",""],[5,"XRegisterIMInstantiateCallback","",""],[5,"XUnregisterIMInstantiateCallback","",""],[5,"XInternalConnectionNumbers","",""],[5,"XProcessInternalConnection","",""],[5,"XAddConnectionWatch","",""],[5,"XRemoveConnectionWatch","",""],[5,"XSetAuthorization","",""],[5,"_Xmbtowc","",""],[5,"_Xwctomb","",""],[5,"XGetEventData","",""],[5,"XFreeEventData","",""],[11,"hash","","",87],[11,"cmp","","",87],[11,"partial_cmp","","",87],[11,"lt","","",87],[11,"le","","",87],[11,"gt","","",87],[11,"ge","","",87],[11,"clone","","",87],[11,"eq","","",87],[11,"ne","","",87],[11,"empty","","Returns an empty set of flags.",87],[11,"all","","Returns the set containing all flags.",87],[11,"bits","","Returns the raw value of the flags currently stored.",87],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",87],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",87],[11,"is_empty","","Returns `true` if no flags are currently stored.",87],[11,"is_all","","Returns `true` if all flags are currently set.",87],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",87],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",87],[11,"insert","","Inserts the specified flags in-place.",87],[11,"remove","","Removes the specified flags in-place.",87],[11,"toggle","","Toggles the specified flags in-place.",87],[11,"bitor","","Returns the union of the two sets of flags.",87],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",87],[11,"bitand","","Returns the intersection between the two sets of flags.",87],[11,"sub","","Returns the set difference of the two sets of flags.",87],[11,"not","","Returns the complement of this set of flags.",87],[6,"XID","",""],[6,"Mask","",""],[6,"Atom","",""],[6,"VisualID","",""],[6,"Time","",""],[6,"Window","",""],[6,"Drawable","",""],[6,"Font","",""],[6,"Pixmap","",""],[6,"Cursor","",""],[6,"Colormap","",""],[6,"GContext","",""],[6,"KeySym","",""],[6,"KeyCode","",""],[6,"XPointer","",""],[6,"XExtData","",""],[6,"struct__XGC","",""],[6,"GC","",""],[6,"struct__XDisplay","",""],[6,"XImage","",""],[6,"Display","",""],[6,"struct__XPrivate","",""],[6,"struct__XrmHashBucketRec","",""],[6,"_XPrivDisplay","",""],[6,"XKeyPressedEvent","",""],[6,"XKeyReleasedEvent","",""],[6,"XButtonPressedEvent","",""],[6,"XButtonReleasedEvent","",""],[6,"XPointerMovedEvent","",""],[6,"XEnterWindowEvent","",""],[6,"XLeaveWindowEvent","",""],[6,"XFocusInEvent","",""],[6,"XFocusOutEvent","",""],[6,"union__XEvent","",""],[6,"XEvent","",""],[6,"XEDataObject","",""],[6,"struct__XOM","",""],[6,"XOM","",""],[6,"struct__XOC","",""],[6,"XOC","",""],[6,"XFontSet","",""],[6,"XOrientation","",""],[6,"struct__XIM","",""],[6,"XIM","",""],[6,"struct__XIC","",""],[6,"XIC","",""],[6,"XIMProc","",""],[6,"XICProc","",""],[6,"XIDProc","",""],[6,"XIMStyle","",""],[6,"XVaNestedList","",""],[6,"XIMFeedback","",""],[6,"XIMText","",""],[6,"XIMPreeditState","",""],[6,"XIMPreeditStateNotifyCallbackStruct","",""],[6,"XIMResetState","",""],[6,"XIMStringConversionFeedback","",""],[6,"XIMStringConversionText","",""],[6,"XIMStringConversionPosition","",""],[6,"XIMStringConversionType","",""],[6,"XIMStringConversionOperation","",""],[6,"XIMCaretDirection","",""],[6,"XIMStringConversionCallbackStruct","",""],[6,"XIMPreeditDrawCallbackStruct","",""],[6,"XIMCaretStyle","",""],[6,"XIMPreeditCaretCallbackStruct","",""],[6,"XIMStatusDataType","",""],[6,"XIMStatusDrawCallbackStruct","",""],[6,"XIMHotKeyTrigger","",""],[6,"XIMHotKeyTriggers","",""],[6,"XIMHotKeyState","",""],[6,"XErrorHandler","",""],[6,"XIOErrorHandler","",""],[6,"XConnectionWatchProc","",""],[6,"union_unnamed3","",""],[6,"union_unnamed5","",""],[6,"union_unnamed2","",""],[6,"union_unnamed4","",""],[7,"XOMOrientation_LTR_TTB","",""],[7,"XOMOrientation_RTL_TTB","",""],[7,"XOMOrientation_TTB_LTR","",""],[7,"XOMOrientation_TTB_RTL","",""],[7,"XOMOrientation_Context","",""],[7,"XIMForwardChar","",""],[7,"XIMBackwardChar","",""],[7,"XIMForwardWord","",""],[7,"XIMBackwardWord","",""],[7,"XIMCaretUp","",""],[7,"XIMCaretDown","",""],[7,"XIMNextLine","",""],[7,"XIMPreviousLine","",""],[7,"XIMLineStart","",""],[7,"XIMLineEnd","",""],[7,"XIMAbsolutePosition","",""],[7,"XIMDontChange","",""],[7,"XIMIsInvisible","",""],[7,"XIMIsPrimary","",""],[7,"XIMIsSecondary","",""],[7,"XIMTextType","",""],[7,"XIMBitmapType","",""],[7,"ZPixmap","",""],[17,"USPosition","",""],[17,"USSize","",""],[17,"PPosition","",""],[17,"PSize","",""],[17,"PMinSize","",""],[17,"PMaxSize","",""],[17,"PResizeInc","",""],[17,"PAspect","",""],[17,"PBaseSize","",""],[17,"PWinGravity","",""],[17,"PAllHints","",""],[11,"hash","","",87],[11,"cmp","","",87],[11,"partial_cmp","","",87],[11,"lt","","",87],[11,"le","","",87],[11,"gt","","",87],[11,"ge","","",87],[11,"clone","","",87],[11,"eq","","",87],[11,"ne","","",87],[11,"empty","","Returns an empty set of flags.",87],[11,"all","","Returns the set containing all flags.",87],[11,"bits","","Returns the raw value of the flags currently stored.",87],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",87],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",87],[11,"is_empty","","Returns `true` if no flags are currently stored.",87],[11,"is_all","","Returns `true` if all flags are currently set.",87],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",87],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",87],[11,"insert","","Inserts the specified flags in-place.",87],[11,"remove","","Removes the specified flags in-place.",87],[11,"toggle","","Toggles the specified flags in-place.",87],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",87],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",87],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",87],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",87],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",87]],"paths":[[3,"struct__XExtData"],[3,"XExtCodes"],[3,"XPixmapFormatValues"],[3,"XGCValues"],[3,"Visual"],[3,"Depth"],[3,"Screen"],[3,"ScreenFormat"],[3,"XSetWindowAttributes"],[3,"XWindowAttributes"],[3,"XHostAddress"],[3,"XServerInterpretedAddress"],[3,"struct__XImage"],[3,"struct_funcs"],[3,"XWindowChanges"],[3,"XColor"],[3,"XSegment"],[3,"XPoint"],[3,"XRectangle"],[3,"XArc"],[3,"XKeyboardControl"],[3,"XKeyboardState"],[3,"XTimeCoord"],[3,"XModifierKeymap"],[3,"XKeyEvent"],[3,"XButtonEvent"],[3,"XMotionEvent"],[3,"XCrossingEvent"],[3,"XFocusChangeEvent"],[3,"XKeymapEvent"],[3,"XExposeEvent"],[3,"XGraphicsExposeEvent"],[3,"XNoExposeEvent"],[3,"XVisibilityEvent"],[3,"XCreateWindowEvent"],[3,"XDestroyWindowEvent"],[3,"XUnmapEvent"],[3,"XMapEvent"],[3,"XMapRequestEvent"],[3,"XReparentEvent"],[3,"XConfigureEvent"],[3,"XGravityEvent"],[3,"XResizeRequestEvent"],[3,"XConfigureRequestEvent"],[3,"XCirculateEvent"],[3,"XCirculateRequestEvent"],[3,"XPropertyEvent"],[3,"XSelectionClearEvent"],[3,"XSelectionRequestEvent"],[3,"XSelectionEvent"],[3,"XColormapEvent"],[3,"XClientMessageEvent"],[3,"XMappingEvent"],[3,"XErrorEvent"],[3,"XAnyEvent"],[3,"XGenericEvent"],[3,"XGenericEventCookie"],[3,"XCharStruct"],[3,"XFontProp"],[3,"XFontStruct"],[3,"XTextItem"],[3,"XChar2b"],[3,"XTextItem16"],[3,"XFontSetExtents"],[3,"XmbTextItem"],[3,"XwcTextItem"],[3,"XOMCharSetList"],[3,"XOMOrientation"],[3,"XOMFontInfo"],[3,"XIMStyles"],[3,"XIMCallback"],[3,"XICCallback"],[3,"struct__XIMText"],[3,"struct__XIMPreeditStateNotifyCallbackStruct"],[3,"struct__XIMStringConversionText"],[3,"struct__XIMStringConversionCallbackStruct"],[3,"struct__XIMPreeditDrawCallbackStruct"],[3,"struct__XIMPreeditCaretCallbackStruct"],[3,"struct__XIMStatusDrawCallbackStruct"],[3,"struct__XIMHotKeyTrigger"],[3,"struct__XIMHotKeyTriggers"],[3,"XIMValuesList"],[3,"struct_unnamed1"],[3,"XVisualInfo"],[3,"XClassHint"],[3,"XSizeHintInternal"],[3,"XSizeHints"],[3,"XSizeHintFlags"]]};
searchIndex['xml'] = {"items":[[0,"","xml","This crate currently provides almost XML 1.0/1.1-compliant pull parser."],[0,"macros","","Contains several macros used in this crate."],[0,"name","",""],[3,"Name","xml::name","Represents a qualified XML name."],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",0],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",0],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",0],[3,"OwnedName","","An owned variant of `Name`."],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",1],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",1],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",1],[11,"fmt","","",0],[11,"hash","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"clone","","",0],[11,"fmt","","",0],[11,"to_owned","","Returns an owned variant of the qualified name.",0],[11,"local","","Returns a new `Name` instance representing plain local name.",0],[11,"qualified","","Returns a new `Name` instance representing a qualified name with or without a prefix and\nwith a namespace URI.",0],[11,"to_repr","","Returns correct XML representation of this local name and prefix.",0],[11,"fmt","","",1],[11,"hash","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"fmt","","",1],[11,"borrow","","Constructs a borrowed `Name` based on this owned name.",1],[11,"local","","Returns a new `OwnedName` instance representing a plain local name.",1],[11,"qualified","","Returns a new `OwnedName` instance representing a qualified name with or without\na prefix and with a namespace URI.",1],[11,"prefix_as_ref","","Returns an optional prefix by reference, equivalent to `self.borrow().prefix`\nbut avoids extra work.",1],[11,"namespace_as_ref","","Returns an optional namespace by reference, equivalen to `self.borrow().namespace`\nbut avoids extra work.",1],[11,"to_repr","","See `Name::to_repr()` for details.",1],[6,"Err","",""],[11,"from_str","","Parses the given string slice into a qualified name.",1],[0,"attribute","xml",""],[3,"Attribute","xml::attribute","A borrowed version of an XML attribute."],[12,"name","","Attribute name.",2],[12,"value","","Attribute value.",2],[3,"OwnedAttribute","",""],[12,"name","","",3],[12,"value","","",3],[11,"fmt","","",2],[11,"hash","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"clone","","",2],[11,"fmt","","",2],[11,"to_owned","","",2],[11,"new","","",2],[11,"fmt","","",3],[11,"hash","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"borrow","","",3],[11,"new","","",3],[11,"fmt","","",3],[0,"common","xml","Contains several types used throughout the library."],[3,"Error","xml::common","XML parsing error."],[4,"XmlVersion","","XML version enumeration."],[13,"Version10","","XML version 1.0.",4],[13,"Version11","","XML version 1.1.",4],[5,"is_whitespace_char","","Checks whether the given character is a white space character (`S`)\nas is defined by XML 1.1 specification, [section 2.3][1]."],[5,"is_name_start_char","","Checks whether the given character is a name start character (`NameStartChar`)\nas is defined by XML 1.1 specification, [section 2.3][1]."],[5,"is_name_char","","Checks whether the given character is a name character (`NameChar`)\nas is defined by XML 1.1 specification, [section 2.3][1]."],[8,"HasPosition","","Represents a thing which has a position inside some textual document."],[10,"row","","Returns a line number inside the document.",5],[10,"col","","Returns a column number inside the document.",5],[11,"fmt","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"clone","","",6],[11,"fmt","","",6],[11,"row","","",6],[11,"col","","",6],[11,"new","","Creates a new error using position information from the provided\n`HasPosition` object and a message.",6],[11,"new_full","","Creates a new error using provided position information and a message.",6],[11,"msg","","Returns a reference to a message which is contained inside this error.",6],[11,"description","","",6],[11,"eq","","",4],[11,"ne","","",4],[11,"clone","","",4],[11,"fmt","","",4],[0,"escape","xml",""],[5,"escape_str","xml::escape","Performs escaping of common XML characters."],[0,"namespace","xml",""],[3,"Namespace","xml::namespace","Namespace is a map from prefixes to namespace URIs."],[3,"NamespaceMappings","","An iterator over mappings from prefixes to URIs in a namespace."],[3,"NamespaceStack","","Namespace stack is a sequence of namespaces."],[3,"NamespaceStackMappings","","An iterator over mappings from prefixes to URIs in a namespace stack."],[6,"UriMapping","",""],[17,"NS_XMLNS_PREFIX","",""],[17,"NS_XMLNS_URI","",""],[17,"NS_XML_PREFIX","",""],[17,"NS_XML_URI","",""],[17,"NS_EMPTY_URI","",""],[8,"NamespaceIterable","","Denotes something which contains namespace URI mappings."],[16,"Iter","xml::namespace::NamespaceIterable",""],[10,"uri_mappings","xml::namespace","",7],[11,"clone","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"empty","","Returns an empty namespace.",8],[11,"is_empty","","Checks whether this namespace is empty.",8],[11,"is_essentially_empty","","Checks whether this namespace is essentially empty, that is, it does not contain\nanything but the default mappings.",8],[11,"put","","Puts a mapping into this namespace.",8],[11,"force_put","","Puts a mapping into this namespace forcefully.",8],[11,"get","","Queries the namespace for the given prefix.",8],[6,"Item","",""],[11,"next","","",9],[6,"Iter","",""],[11,"uri_mappings","","",8],[11,"eq","","",10],[11,"ne","","",10],[11,"clone","","",10],[11,"empty","","Returns an empty namespace stack.",10],[11,"default","","Returns a namespace stack with default items in it.",10],[11,"push_empty","","Adds an empty namespace to the top of this stack.",10],[11,"pop","","Removes a namespace at the top of the stack.",10],[11,"peek","","Returns a namespace at the top of the stack, leaving the stack intact.",10],[11,"put","","Puts a mapping into the topmost namespace in this stack.",10],[11,"get","","Performs a search for the given prefix in the whole stack.",10],[11,"squash","","Combines this stack of namespaces into a single namespace.",10],[6,"Item","",""],[11,"next","","",11],[6,"Iter","",""],[11,"uri_mappings","","",10],[0,"reader","xml","Contains high-level interface for a pull-based XML parser."],[3,"EventReader","xml::reader","Simple wrapper around an `std::old_io::Buffer` which provides pull-based XML parsing."],[3,"Events","","XML events iterator, created by `events()` method on `Parser`."],[0,"config","","Contains parser configuration structure."],[3,"ParserConfig","xml::reader::config","Parser configuration structure."],[12,"trim_whitespace","","Whether or not should whitespace be removed. Default is false.",12],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to characters.\nDefault is false.",12],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters.\nDefault is false.",12],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",12],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be merged.\nDefault is true.",12],[11,"new","","Returns a new config with default values.",12],[11,"trim_whitespace","","Sets the field to the provided value and returns updated config object.",12],[11,"whitespace_to_characters","","Sets the field to the provided value and returns updated config object.",12],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",12],[11,"ignore_comments","","Sets the field to the provided value and returns updated config object.",12],[11,"coalesce_characters","","Sets the field to the provided value and returns updated config object.",12],[0,"events","xml::reader","Contains `XmlEvent` datatype, instances of which are emitted by the parser."],[4,"XmlEvent","xml::reader::events","An element of an XML input stream."],[13,"StartDocument","","Corresponds to XML document declaration.",13],[12,"version","xml::reader::events::XmlEvent","XML version.",13],[12,"encoding","","XML document encoding.",13],[12,"standalone","","XML standalone declaration.",13],[13,"EndDocument","xml::reader::events","Denotes to the end of the document stream.",13],[13,"ProcessingInstruction","","Denotes an XML processing instruction.",13],[12,"name","xml::reader::events::XmlEvent","Processing instruction target.",13],[12,"data","","Processing instruction content.",13],[13,"StartElement","xml::reader::events","Denotes a beginning of an XML element.",13],[12,"name","xml::reader::events::XmlEvent","Qualified name of the element.",13],[12,"attributes","","A list of attributes associated with the element.",13],[12,"namespace","","Contents of the namespace mapping at this point of the document.",13],[13,"EndElement","xml::reader::events","Denotes an end of an XML document.",13],[12,"name","xml::reader::events::XmlEvent","Qualified name of the element.",13],[13,"CData","xml::reader::events","Denotes CDATA content.",13],[13,"Comment","","Denotes a comment.",13],[13,"Characters","","Denotes character data outside of tags.",13],[13,"Whitespace","","Denotes a chunk of whitespace outside of tags.",13],[13,"Error","","Denotes parsing error.",13],[11,"clone","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"fmt","","",13],[11,"as_writer_event","","",13],[11,"new","xml::reader","Creates a new parser, consuming given `Buffer`.",14],[11,"new_with_config","","Creates a new parser with the provded configuration, consuming given `Buffer`.",14],[11,"next","","Pulls and returns next XML event from the stream.",14],[11,"events","","Returns an iterator over XML events.",14],[6,"Item","",""],[11,"next","","",15],[11,"new_from_string","","Convenience method to create a reader from an owned string.",14],[11,"new_from_bytes","","Convenience method to create a reader from an owned vector of bytes.",14],[11,"new_from_str_slice","","Convenience method to create a reader from a string slice.",14],[11,"new_from_bytes_slice","","Convenience method to create a reader from a slice of bytes.",14],[0,"writer","xml",""],[3,"EventWriter","xml::writer",""],[0,"config","","Contains emitter configuration structure."],[3,"EmitterConfig","xml::writer::config","Emitter configuration structure."],[12,"line_separator","","Line separator used to separate lines in formatted output. Default is `\"\\n\"`.",16],[12,"indent_string","","A string which will be used for a single level of indentation. Default is `\"  \"`\n(two spaces).",16],[12,"perform_indent","","Whether or not the emitted document should be indented. Default is false.",16],[12,"write_document_declaration","","Whether or not to write XML document declaration at the beginning of a document.\nDefault is true.",16],[12,"normalize_empty_elements","","Whether or not to convert elements with empty content to empty elements. Default is true.",16],[12,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters. Default is false.",16],[11,"new","","Creates an emitter configuration with default values.",16],[11,"line_separator","","Sets the field to the provided value and returns updated config object.",16],[11,"indent_string","","Sets the field to the provided value and returns updated config object.",16],[11,"perform_indent","","Sets the field to the provided value and returns updated config object.",16],[11,"write_document_declaration","","Sets the field to the provided value and returns updated config object.",16],[11,"normalize_empty_elements","","Sets the field to the provided value and returns updated config object.",16],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",16],[0,"events","xml::writer",""],[4,"XmlEvent","xml::writer::events","An element of an XML output stream."],[13,"StartDocument","","Corresponds to XML document declaration.",17],[12,"version","xml::writer::events::XmlEvent","XML version.",17],[12,"encoding","","XML document encoding.",17],[12,"standalone","","XML standalone declaration.",17],[13,"ProcessingInstruction","xml::writer::events","Denotes an XML processing instruction.",17],[12,"name","xml::writer::events::XmlEvent","Processing instruction target.",17],[12,"data","","Processing instruction content.",17],[13,"StartElement","xml::writer::events","Denotes a beginning of an XML element.",17],[12,"name","xml::writer::events::XmlEvent","Qualified name of the element.",17],[12,"attributes","","A list of attributes associated with the element.",17],[12,"namespace","","Contents of the namespace mapping at this point of the document.",17],[13,"EndElement","xml::writer::events","Denotes an end of an XML document.",17],[12,"name","xml::writer::events::XmlEvent","Qualified name of the element.",17],[13,"CData","xml::writer::events","Denotes CDATA content.",17],[13,"Comment","","Denotes a comment.",17],[13,"Characters","","Denotes character data outside of tags.",17],[6,"EventWriterResult","xml::writer",""],[11,"new","","",18],[11,"new_with_config","","",18],[11,"write","","",18],[11,"new_into_mem","","",18],[11,"new_into_mem_config","","",18],[0,"util","xml",""],[3,"ClonedPairwise","xml::util",""],[8,"OptionBorrowExt","",""],[10,"borrow_internals","","",19],[8,"IteratorClonedPairwiseExt","",""],[10,"cloned_pairwise","","",20],[11,"borrow_internals","core::option","",21],[6,"Item","xml::util",""],[11,"next","","",22]],"paths":[[3,"Name"],[3,"OwnedName"],[3,"Attribute"],[3,"OwnedAttribute"],[4,"XmlVersion"],[8,"HasPosition"],[3,"Error"],[8,"NamespaceIterable"],[3,"Namespace"],[3,"NamespaceMappings"],[3,"NamespaceStack"],[3,"NamespaceStackMappings"],[3,"ParserConfig"],[4,"XmlEvent"],[3,"EventReader"],[3,"Events"],[3,"EmitterConfig"],[4,"XmlEvent"],[3,"EventWriter"],[8,"OptionBorrowExt"],[8,"IteratorClonedPairwiseExt"],[4,"Option"],[3,"ClonedPairwise"]]};
searchIndex['encoding-index-simpchinese'] = {"items":[[0,"","encoding-index-simpchinese","Simplified Chinese index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding)."],[0,"gb18030","","GB 18030 two-byte area."],[5,"forward","encoding-index-simpchinese::gb18030","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"gb18030_ranges","encoding-index-simpchinese","GB 18030 four-byte area."],[5,"forward","encoding-index-simpchinese::gb18030_ranges","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."]],"paths":[]};
searchIndex['encoding-index-singlebyte'] = {"items":[[0,"","encoding-index-singlebyte","Single-byte index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding)."],[0,"ibm866","","IBM code page 866."],[5,"forward","encoding-index-singlebyte::ibm866","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"iso_8859_2","encoding-index-singlebyte","ISO 8859-2."],[5,"forward","encoding-index-singlebyte::iso_8859_2","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"iso_8859_3","encoding-index-singlebyte","ISO 8859-3."],[5,"forward","encoding-index-singlebyte::iso_8859_3","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"iso_8859_4","encoding-index-singlebyte","ISO 8859-4."],[5,"forward","encoding-index-singlebyte::iso_8859_4","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"iso_8859_5","encoding-index-singlebyte","ISO 8859-5."],[5,"forward","encoding-index-singlebyte::iso_8859_5","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"iso_8859_6","encoding-index-singlebyte","ISO 8859-6."],[5,"forward","encoding-index-singlebyte::iso_8859_6","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"iso_8859_7","encoding-index-singlebyte","ISO 8859-7."],[5,"forward","encoding-index-singlebyte::iso_8859_7","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"iso_8859_8","encoding-index-singlebyte","ISO 8859-8 (either visual or logical)."],[5,"forward","encoding-index-singlebyte::iso_8859_8","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"iso_8859_10","encoding-index-singlebyte","ISO 8859-10."],[5,"forward","encoding-index-singlebyte::iso_8859_10","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"iso_8859_13","encoding-index-singlebyte","ISO 8859-13."],[5,"forward","encoding-index-singlebyte::iso_8859_13","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"iso_8859_14","encoding-index-singlebyte","ISO 8859-14."],[5,"forward","encoding-index-singlebyte::iso_8859_14","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"iso_8859_15","encoding-index-singlebyte","ISO 8859-15."],[5,"forward","encoding-index-singlebyte::iso_8859_15","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"iso_8859_16","encoding-index-singlebyte","ISO 8859-16."],[5,"forward","encoding-index-singlebyte::iso_8859_16","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"koi8_r","encoding-index-singlebyte","KOI8-R."],[5,"forward","encoding-index-singlebyte::koi8_r","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"koi8_u","encoding-index-singlebyte","KOI8-U."],[5,"forward","encoding-index-singlebyte::koi8_u","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"macintosh","encoding-index-singlebyte","MacRoman."],[5,"forward","encoding-index-singlebyte::macintosh","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"windows_874","encoding-index-singlebyte","Windows code page 874."],[5,"forward","encoding-index-singlebyte::windows_874","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"windows_1250","encoding-index-singlebyte","Windows code page 1250."],[5,"forward","encoding-index-singlebyte::windows_1250","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"windows_1251","encoding-index-singlebyte","Windows code page 1251."],[5,"forward","encoding-index-singlebyte::windows_1251","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"windows_1252","encoding-index-singlebyte","Windows code page 1252."],[5,"forward","encoding-index-singlebyte::windows_1252","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"windows_1253","encoding-index-singlebyte","Windows code page 1253."],[5,"forward","encoding-index-singlebyte::windows_1253","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"windows_1254","encoding-index-singlebyte","Windows code page 1254."],[5,"forward","encoding-index-singlebyte::windows_1254","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"windows_1255","encoding-index-singlebyte","Windows code page 1254."],[5,"forward","encoding-index-singlebyte::windows_1255","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"windows_1256","encoding-index-singlebyte","Windows code page 1256."],[5,"forward","encoding-index-singlebyte::windows_1256","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"windows_1257","encoding-index-singlebyte","Windows code page 1257."],[5,"forward","encoding-index-singlebyte::windows_1257","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"windows_1258","encoding-index-singlebyte","Windows code page 1258."],[5,"forward","encoding-index-singlebyte::windows_1258","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[0,"x_mac_cyrillic","encoding-index-singlebyte","MacCyrillic."],[5,"forward","encoding-index-singlebyte::x_mac_cyrillic","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."]],"paths":[]};
searchIndex['encoding-index-tradchinese'] = {"items":[[0,"","encoding-index-tradchinese","Traditional Chinese index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding)."],[0,"big5","","Big5 and HKSCS."],[5,"forward","encoding-index-tradchinese::big5","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."]],"paths":[]};
searchIndex['encoding-index-japanese'] = {"items":[[0,"","encoding-index-japanese","Japanese index tables for [rust-encoding](https://github.com/lifthrasiir/rust-encoding)."],[0,"jis0208","","JIS X 0208 with common extensions."],[5,"forward","encoding-index-japanese::jis0208","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."],[5,"backward_remapped","","Returns the index shift_jis pointer for code point `code`."],[0,"jis0212","encoding-index-japanese","JIS X 0212."],[5,"forward","encoding-index-japanese::jis0212","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."]],"paths":[]};
searchIndex['encoding-index-korean'] = {"items":[[0,"","encoding-index-korean","Korean index tables for [rust-encoding](https://github.com/lifthrasiir/rust-encoding)."],[0,"euc_kr","","KS X 1001 plus Unified Hangul Code."],[5,"forward","encoding-index-korean::euc_kr","Returns the index code point for pointer `code` in this index."],[5,"backward","","Returns the index pointer for code point `code` in this index."]],"paths":[]};
searchIndex['png-sys'] = {"items":[],"paths":[]};
searchIndex['mod_path'] = {"items":[[0,"","mod_path",""],[5,"plugin_registrar","",""]],"paths":[]};
searchIndex['freetype-sys'] = {"items":[],"paths":[]};
searchIndex['regex_macros'] = {"items":[[0,"","regex_macros","This crate provides the `regex!` macro. Its use is documented in the\n`regex` crate."]],"paths":[]};
searchIndex['expat-sys'] = {"items":[],"paths":[]};
searchIndex['khronos_api'] = {"items":[[0,"","khronos_api","This crates contains the sources of the official OpenGL repository."],[7,"GL_XML","","Content of the official `gl.xml` file."],[7,"EGL_XML","","Content of the official `egl.xml` file."],[7,"WGL_XML","","Content of the official `wgl.xml` file."],[7,"GLX_XML","","Content of the official `glx.xml` file."]],"paths":[]};
searchIndex['lazy_static'] = {"items":[[0,"","lazy_static","A macro for declaring lazily evaluated statics."],[14,"lazy_static!","",""]],"paths":[]};
searchIndex['stb_image'] = {"items":[[0,"","stb_image",""],[0,"stb_image","",""],[0,"bindgen","stb_image::stb_image",""],[3,"stbi_io_callbacks","stb_image::stb_image::bindgen",""],[5,"stbi_load_from_memory","",""],[5,"stbi_load","",""],[5,"stbi_load_from_file","",""],[5,"stbi_load_from_callbacks","",""],[5,"stbi_loadf_from_memory","",""],[5,"stbi_loadf","",""],[5,"stbi_loadf_from_file","",""],[5,"stbi_loadf_from_callbacks","",""],[5,"stbi_hdr_to_ldr_gamma","",""],[5,"stbi_hdr_to_ldr_scale","",""],[5,"stbi_ldr_to_hdr_gamma","",""],[5,"stbi_ldr_to_hdr_scale","",""],[5,"stbi_is_hdr_from_callbacks","",""],[5,"stbi_is_hdr_from_memory","",""],[5,"stbi_is_hdr","",""],[5,"stbi_is_hdr_from_file","",""],[5,"stbi_failure_reason","",""],[5,"stbi_image_free","",""],[5,"stbi_info_from_memory","",""],[5,"stbi_info_from_callbacks","",""],[5,"stbi_info","",""],[5,"stbi_info_from_file","",""],[5,"stbi_set_unpremultiply_on_load","",""],[5,"stbi_convert_iphone_png_to_rgb","",""],[5,"stbi_zlib_decode_malloc_guesssize","",""],[5,"stbi_zlib_decode_malloc","",""],[5,"stbi_zlib_decode_buffer","",""],[5,"stbi_zlib_decode_noheader_malloc","",""],[5,"stbi_zlib_decode_noheader_buffer","",""],[6,"stbi_uc","",""],[0,"image","stb_image",""],[3,"Image","stb_image::image",""],[12,"width","","",0],[12,"height","","",0],[12,"depth","","",0],[12,"data","","",0],[4,"LoadResult","",""],[13,"Error","","",1],[13,"ImageU8","","",1],[13,"ImageF32","","",1],[5,"new_image","",""],[5,"load","",""],[5,"load_with_depth","",""],[5,"load_from_memory","",""],[5,"load_from_memory_with_depth","",""]],"paths":[[3,"Image"],[4,"LoadResult"]]};
searchIndex['phf_shared'] = {"items":[[0,"","phf_shared",""],[5,"displace","",""],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures"],[10,"phf_hash","","Hashes the value of `self`, factoring in a seed",0]],"paths":[[8,"PhfHash"]]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade."],[3,"LogRecord","","The \"payload\" of a log message."],[3,"LogLocation","","The location of a log message."],[12,"module_path","","The module path of the message.",0],[12,"file","","The source file containing the message.",0],[12,"line","","The line containing the message.",0],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter."],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called."],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework"],[13,"Error","","The \"error\" level.",1],[13,"Warn","","The \"warn\" level.",1],[13,"Info","","The \"info\" level.",1],[13,"Debug","","The \"debug\" level.",1],[13,"Trace","","The \"trace\" level.",1],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework."],[13,"Off","","A level lower than all log levels.",2],[13,"Error","","Corresponds to the `Error` log level.",2],[13,"Warn","","Corresponds to the `Warn` log level.",2],[13,"Info","","Corresponds to the `Trace` log level.",2],[13,"Debug","","Corresponds to the `Debug` log level.",2],[13,"Trace","","Corresponds to the `Trace` log level.",2],[5,"max_log_level","","Returns the current maximum log level."],[5,"set_logger","","Sets the global logger."],[5,"enabled","","Determines if the current logger will ignore a log message at the specified\nlevel from the specified module."],[5,"log","","Logs a message."],[8,"Log","","A trait encapsulating the operations required of a logger"],[10,"enabled","","Determines if a log message sent at the specified level from the\nspecified module would be logged.",3],[10,"log","","Logs the `LogRecord`.",3],[11,"fmt","","",1],[11,"clone","","",1],[11,"eq","","",1],[11,"eq","","",1],[11,"partial_cmp","","",1],[11,"partial_cmp","","",1],[11,"cmp","","",1],[6,"Err","",""],[11,"from_str","","",1],[11,"fmt","","",1],[11,"max","","Returns the most verbose logging level.",1],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",1],[11,"fmt","","",2],[11,"clone","","",2],[11,"eq","","",2],[11,"eq","","",2],[11,"partial_cmp","","",2],[11,"partial_cmp","","",2],[11,"cmp","","",2],[6,"Err","",""],[11,"from_str","","",2],[11,"fmt","","",2],[11,"max","","Returns the most verbose logging level filter.",2],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",2],[11,"new","","Creates a new `LogRecord`.",4],[11,"args","","The message body.",4],[11,"location","","The location of the log directive.",4],[11,"level","","The verbosity level of the message.",4],[11,"fmt","","",0],[11,"clone","","",0],[11,"fmt","","",5],[11,"get","","Gets the current maximum log level filter.",5],[11,"set","","Sets the maximum log level.",5],[11,"fmt","","",6],[11,"fmt","","",6],[11,"description","","",6],[14,"log!","","The standard logging macro."],[14,"error!","","Logs a message at the error level."],[14,"warn!","","Logs a message at the warn level."],[14,"info!","","Logs a message at the info level."],[14,"debug!","","Logs a message at the debug level."],[14,"trace!","","Logs a message at the trace level."],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged."]],"paths":[[3,"LogLocation"],[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"]]};
searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types."],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","core::marker","",5],[11,"decode","","",5],[11,"encode","std::path","",6],[11,"encode","","",7],[11,"decode","","",7],[11,"encode","core::cell","",8],[11,"decode","","",8],[11,"encode","","",9],[11,"decode","","",9],[11,"encode","alloc::arc","",10],[11,"decode","","",10],[11,"encode","collections::linked_list","",11],[11,"decode","","",11],[11,"encode","collections::vec_deque","",12],[11,"decode","","",12],[11,"encode","collections::btree::map","",13],[11,"decode","","",13],[11,"encode","collections::btree::set","",14],[11,"decode","","",14],[11,"encode","std::collections::hash::map","",15],[11,"decode","","",15],[11,"encode","std::collections::hash::set","",16],[11,"decode","","",16],[0,"base64","rustc-serialize","Base64 binary-to-text encoding"],[3,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`."],[12,"char_set","","Character set to use",17],[12,"newline","","Newline to use",17],[12,"pad","","True to pad output with `=` characters",17],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17],[4,"CharacterSet","","Available encoding character sets"],[13,"Standard","","The standard character set (uses `+` and `/`)",18],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18],[4,"Newline","","Available newline types"],[13,"LF","","A linefeed (i.e. Unix-style newline)",19],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20],[13,"InvalidBase64Length","","The input had an invalid length",20],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[8,"ToBase64","","A trait for converting a value to base64 encoding."],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21],[8,"FromBase64","","A trait for converting from base64 encoded values."],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22],[11,"fmt","","",20],[11,"description","","",20],[11,"fmt","","",20],[0,"hex","rustc-serialize","Hex binary-to-text encoding"],[4,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string"],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",23],[13,"InvalidHexLength","","The input had an invalid length",23],[8,"ToHex","","A trait for converting a value to hexadecimal encoding"],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24],[8,"FromHex","","A trait for converting hexadecimal encoded values"],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25],[11,"fmt","","",23],[11,"description","","",23],[11,"fmt","","",23],[0,"json","rustc-serialize","JSON parsing and serialization"],[3,"PrettyJson","rustc-serialize::json",""],[3,"AsJson","",""],[3,"AsPrettyJson","",""],[3,"Encoder","","A structure for implementing serialization to JSON."],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[3,"Decoder","","A structure to decode JSON to values in rust."],[4,"Json","","Represents a json value"],[13,"I64","","",26],[13,"U64","","",26],[13,"F64","","",26],[13,"String","","",26],[13,"Boolean","","",26],[13,"Array","","",26],[13,"Object","","",26],[13,"Null","","",26],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[13,"InvalidSyntax","","",27],[13,"InvalidNumber","","",27],[13,"EOFWhileParsingObject","","",27],[13,"EOFWhileParsingArray","","",27],[13,"EOFWhileParsingValue","","",27],[13,"EOFWhileParsingString","","",27],[13,"KeyMustBeAString","","",27],[13,"ExpectedColon","","",27],[13,"TrailingCharacters","","",27],[13,"TrailingComma","","",27],[13,"InvalidEscape","","",27],[13,"InvalidUnicodeCodePoint","","",27],[13,"LoneLeadingSurrogateInHexEscape","","",27],[13,"UnexpectedEndOfHexEscape","","",27],[13,"UnrecognizedHex","","",27],[13,"NotFourDigit","","",27],[13,"ControlCharacterInString","","",27],[13,"NotUtf8","","",27],[4,"ParserError","",""],[13,"SyntaxError","","msg, line, col",28],[13,"IoError","","",28],[4,"DecoderError","",""],[13,"ParseError","","",29],[13,"ExpectedError","","",29],[13,"MissingFieldError","","",29],[13,"UnknownVariantError","","",29],[13,"ApplicationError","","",29],[13,"EOF","","",29],[4,"EncoderError","",""],[13,"FmtError","","",30],[13,"BadHashmapKey","","",30],[4,"JsonEvent","","The output of the streaming parser."],[13,"ObjectStart","","",31],[13,"ObjectEnd","","",31],[13,"ArrayStart","","",31],[13,"ArrayEnd","","",31],[13,"BooleanValue","","",31],[13,"I64Value","","",31],[13,"U64Value","","",31],[13,"F64Value","","",31],[13,"StringValue","","",31],[13,"NullValue","","",31],[13,"Error","","",31],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[13,"Index","","",32],[13,"Key","","",32],[5,"error_str","","Returns a readable error string for a given error code."],[5,"decode","","Shortcut function to decode a JSON `&str` into an object"],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[6,"Array","",""],[6,"Object","",""],[6,"BuilderError","",""],[6,"EncodeResult","",""],[6,"DecodeResult","",""],[8,"ToJson","","A trait for converting values to JSON"],[10,"to_json","","Converts the value of `self` to an instance of JSON",33],[11,"fmt","","",26],[11,"partial_cmp","","",26],[11,"lt","","",26],[11,"le","","",26],[11,"gt","","",26],[11,"ge","","",26],[11,"eq","","",26],[11,"ne","","",26],[11,"clone","","",26],[11,"eq","","",27],[11,"ne","","",27],[11,"clone","","",27],[11,"fmt","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"fmt","","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"fmt","","",30],[11,"fmt","","",27],[11,"description","","",29],[11,"cause","","",29],[11,"fmt","","",29],[11,"description","","",28],[11,"fmt","","",28],[11,"description","","",30],[11,"fmt","","",30],[11,"from_error","","",30],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",34],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",34],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34],[6,"Error","",""],[11,"emit_nil","","",34],[11,"emit_usize","","",34],[11,"emit_u64","","",34],[11,"emit_u32","","",34],[11,"emit_u16","","",34],[11,"emit_u8","","",34],[11,"emit_isize","","",34],[11,"emit_i64","","",34],[11,"emit_i32","","",34],[11,"emit_i16","","",34],[11,"emit_i8","","",34],[11,"emit_bool","","",34],[11,"emit_f64","","",34],[11,"emit_f32","","",34],[11,"emit_char","","",34],[11,"emit_str","","",34],[11,"emit_enum","","",34],[11,"emit_enum_variant","","",34],[11,"emit_enum_variant_arg","","",34],[11,"emit_enum_struct_variant","","",34],[11,"emit_enum_struct_variant_field","","",34],[11,"emit_struct","","",34],[11,"emit_struct_field","","",34],[11,"emit_tuple","","",34],[11,"emit_tuple_arg","","",34],[11,"emit_tuple_struct","","",34],[11,"emit_tuple_struct_arg","","",34],[11,"emit_option","","",34],[11,"emit_option_none","","",34],[11,"emit_option_some","","",34],[11,"emit_seq","","",34],[11,"emit_seq_elt","","",34],[11,"emit_map","","",34],[11,"emit_map_elt_key","","",34],[11,"emit_map_elt_val","","",34],[11,"encode","","",26],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",26],[11,"from_str","","Decodes a json value from a string",26],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",26],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",26],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",26],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26],[6,"Output","",""],[11,"index","","",26],[6,"Output","",""],[11,"index","","",26],[11,"fmt","","",31],[11,"clone","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"fmt","","",32],[11,"clone","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"new","","",35],[11,"len","","Returns The number of elements in the Stack.",35],[11,"is_empty","","Returns true if the stack is empty.",35],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35],[11,"is_equal_to","","Compares this stack with an array of StackElements.",35],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35],[11,"top","","Returns the top-most element (if any).",35],[6,"Item","",""],[11,"next","","",36],[11,"new","","Creates the JSON parser.",36],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36],[11,"new","","Create a JSON Builder.",37],[11,"build","","",37],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",38],[6,"Error","",""],[11,"read_nil","","",38],[11,"read_usize","","",38],[11,"read_u8","","",38],[11,"read_u16","","",38],[11,"read_u32","","",38],[11,"read_u64","","",38],[11,"read_isize","","",38],[11,"read_i8","","",38],[11,"read_i16","","",38],[11,"read_i32","","",38],[11,"read_i64","","",38],[11,"read_f32","","",38],[11,"read_f64","","",38],[11,"read_bool","","",38],[11,"read_char","","",38],[11,"read_str","","",38],[11,"read_enum","","",38],[11,"read_enum_variant","","",38],[11,"read_enum_variant_arg","","",38],[11,"read_enum_struct_variant","","",38],[11,"read_enum_struct_variant_field","","",38],[11,"read_struct","","",38],[11,"read_struct_field","","",38],[11,"read_tuple","","",38],[11,"read_tuple_arg","","",38],[11,"read_tuple_struct","","",38],[11,"read_tuple_struct_arg","","",38],[11,"read_option","","",38],[11,"read_seq","","",38],[11,"read_seq_elt","","",38],[11,"read_map","","",38],[11,"read_map_elt_key","","",38],[11,"read_map_elt_val","","",38],[11,"error","","",38],[11,"to_json","","",26],[11,"to_json","collections::string","",0],[11,"to_json","collections::vec","",3],[11,"to_json","collections::btree::map","",13],[11,"to_json","std::collections::hash::map","",15],[11,"to_json","core::option","",4],[11,"fmt","rustc-serialize::json","Encodes a json value into a string",26],[11,"fmt","","Encodes a json value into a string",39],[11,"fmt","","Encodes a json value into a string",40],[11,"indent","","Set the indentation level for the emitted JSON",41],[11,"fmt","","Encodes a json value into a string",41],[6,"Err","",""],[11,"from_str","","",26],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","core::marker","",5],[11,"decode","","",5],[11,"encode","std::path","",6],[11,"encode","","",7],[11,"decode","","",7],[11,"encode","core::cell","",8],[11,"decode","","",8],[11,"encode","","",9],[11,"decode","","",9],[11,"encode","alloc::arc","",10],[11,"decode","","",10],[8,"Decoder","rustc-serialize",""],[16,"Error","rustc-serialize::Decoder",""],[10,"read_nil","rustc-serialize","",42],[10,"read_usize","","",42],[10,"read_u64","","",42],[10,"read_u32","","",42],[10,"read_u16","","",42],[10,"read_u8","","",42],[10,"read_isize","","",42],[10,"read_i64","","",42],[10,"read_i32","","",42],[10,"read_i16","","",42],[10,"read_i8","","",42],[10,"read_bool","","",42],[10,"read_f64","","",42],[10,"read_f32","","",42],[10,"read_char","","",42],[10,"read_str","","",42],[10,"read_enum","","",42],[10,"read_enum_variant","","",42],[10,"read_enum_variant_arg","","",42],[10,"read_enum_struct_variant","","",42],[10,"read_enum_struct_variant_field","","",42],[10,"read_struct","","",42],[10,"read_struct_field","","",42],[10,"read_tuple","","",42],[10,"read_tuple_arg","","",42],[10,"read_tuple_struct","","",42],[10,"read_tuple_struct_arg","","",42],[10,"read_option","","",42],[10,"read_seq","","",42],[10,"read_seq_elt","","",42],[10,"read_map","","",42],[10,"read_map_elt_key","","",42],[10,"read_map_elt_val","","",42],[10,"error","","",42],[8,"Encoder","",""],[16,"Error","rustc-serialize::Encoder",""],[10,"emit_nil","rustc-serialize","",43],[10,"emit_usize","","",43],[10,"emit_u64","","",43],[10,"emit_u32","","",43],[10,"emit_u16","","",43],[10,"emit_u8","","",43],[10,"emit_isize","","",43],[10,"emit_i64","","",43],[10,"emit_i32","","",43],[10,"emit_i16","","",43],[10,"emit_i8","","",43],[10,"emit_bool","","",43],[10,"emit_f64","","",43],[10,"emit_f32","","",43],[10,"emit_char","","",43],[10,"emit_str","","",43],[10,"emit_enum","","",43],[10,"emit_enum_variant","","",43],[10,"emit_enum_variant_arg","","",43],[10,"emit_enum_struct_variant","","",43],[10,"emit_enum_struct_variant_field","","",43],[10,"emit_struct","","",43],[10,"emit_struct_field","","",43],[10,"emit_tuple","","",43],[10,"emit_tuple_arg","","",43],[10,"emit_tuple_struct","","",43],[10,"emit_tuple_struct_arg","","",43],[10,"emit_option","","",43],[10,"emit_option_none","","",43],[10,"emit_option_some","","",43],[10,"emit_seq","","",43],[10,"emit_seq_elt","","",43],[10,"emit_map","","",43],[10,"emit_map_elt_key","","",43],[10,"emit_map_elt_val","","",43],[8,"Decodable","",""],[10,"decode","","",44],[8,"Encodable","",""],[10,"encode","","",45],[8,"DecoderHelpers","",""],[10,"read_to_vec","","",46],[8,"EncoderHelpers","",""],[10,"emit_from_vec","","",47]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['gcc'] = {"items":[[0,"","gcc","A library for build scripts to compile custom C code"],[3,"Config","","Extra configuration to pass to gcc."],[5,"compile_library","","Compile a library from the given set of input C files."],[11,"new","","Construct a new instance of a blank set of configuration.",0],[11,"include","","Add a directory to the `-I` or include path for headers",0],[11,"define","","Specify a `-D` variable with an optional value.",0],[11,"object","","Add an arbitrary object file to link in",0],[11,"flag","","Add an arbitrary flag to the invocation of the compiler",0],[11,"file","","Add a file which will be compiled",0],[11,"compile","","Run the compiler, generating the file `output`",0]],"paths":[[3,"Config"]]};
searchIndex['text_writer'] = {"items":[[0,"","text_writer",""],[3,"Error","","Indicates some kind of error during writing, but does not provide further details."],[6,"Result","","The return type of `TextWriter::write_*` methods."],[8,"TextWriter","","A Unicode write-only stream."],[10,"write_str","","Write a string.",0],[11,"write_char","","Write a code point.",0],[11,"write_fmt","","Make `TextWriter` usable with the `write!` macro.",0],[11,"fmt","","",1],[11,"write_str","collections::string","",2],[11,"write_char","","",2],[11,"write_str","core::fmt","",3],[11,"write_char","","",3]],"paths":[[8,"TextWriter"],[3,"Error"],[3,"String"],[3,"Formatter"]]};
searchIndex['unicase'] = {"items":[[0,"","unicase","# Case"],[3,"UniCase","","Case Insensitive wrapper of strings."],[11,"fmt","","",0],[11,"clone","","",0],[6,"Target","",""],[11,"deref","","",0],[11,"deref_mut","","",0],[11,"as_slice","","",0],[11,"fmt","","",0],[11,"eq","","",0],[11,"eq","","",0],[6,"Err","",""],[11,"from_str","","",0],[11,"hash","","",0]],"paths":[[3,"UniCase"]]};
searchIndex['pkg-config'] = {"items":[[0,"","pkg-config","A build dependency for Cargo libraries to find system artifacts through the\n`pkg-config` utility."],[3,"Config","",""],[3,"Library","",""],[12,"libs","","",0],[12,"link_paths","","",0],[12,"frameworks","","",0],[12,"framework_paths","","",0],[12,"include_paths","","",0],[5,"target_supported","",""],[5,"find_library","","Simple shortcut for using all default options for finding a library."],[11,"clone","","",1],[11,"fmt","","",0],[11,"new","","Creates a new set of configuration options which are all initially set\nto \"blank\".",1],[11,"statik","","Indicate whether the `--static` flag should be passed.",1],[11,"atleast_version","","Indicate that the library must be at least version `vers`.",1],[11,"find","","Run `pkg-config` to find the library `name`.",1]],"paths":[[3,"Library"],[3,"Config"]]};
searchIndex['clock_ticks'] = {"items":[[0,"","clock_ticks",""],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch."],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch."]],"paths":[]};
searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries"],[0,"types","",""],[0,"common","libc::types",""],[0,"c95","libc::types::common",""],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C."],[13,"__variant1","","",0],[13,"__variant2","","",0],[4,"FILE","",""],[4,"fpos_t","",""],[0,"c99","libc::types::common",""],[6,"int8_t","libc::types::common::c99",""],[6,"int16_t","",""],[6,"int32_t","",""],[6,"int64_t","",""],[6,"uint8_t","",""],[6,"uint16_t","",""],[6,"uint32_t","",""],[6,"uint64_t","",""],[0,"posix88","libc::types::common",""],[4,"DIR","libc::types::common::posix88",""],[4,"dirent_t","",""],[0,"os","libc::types",""],[0,"common","libc::types::os",""],[0,"posix01","libc::types::os::common",""],[3,"glob_t","libc::types::os::common::posix01",""],[12,"gl_pathc","","",1],[12,"gl_pathv","","",1],[12,"gl_offs","","",1],[12,"__unused1","","",1],[12,"__unused2","","",1],[12,"__unused3","","",1],[12,"__unused4","","",1],[12,"__unused5","","",1],[3,"timeval","",""],[12,"tv_sec","","",2],[12,"tv_usec","","",2],[3,"timespec","",""],[12,"tv_sec","","",3],[12,"tv_nsec","","",3],[4,"timezone","",""],[6,"pthread_t","",""],[6,"sighandler_t","",""],[0,"bsd44","libc::types::os::common",""],[3,"sockaddr","libc::types::os::common::bsd44",""],[12,"sa_family","","",4],[12,"sa_data","","",4],[3,"sockaddr_storage","",""],[12,"ss_family","","",5],[12,"__ss_align","","",5],[12,"__ss_pad2","","",5],[3,"sockaddr_in","",""],[12,"sin_family","","",6],[12,"sin_port","","",6],[12,"sin_addr","","",6],[12,"sin_zero","","",6],[3,"in_addr","",""],[12,"s_addr","","",7],[3,"sockaddr_in6","",""],[12,"sin6_family","","",8],[12,"sin6_port","","",8],[12,"sin6_flowinfo","","",8],[12,"sin6_addr","","",8],[12,"sin6_scope_id","","",8],[3,"in6_addr","",""],[12,"s6_addr","","",9],[3,"ip_mreq","",""],[12,"imr_multiaddr","","",10],[12,"imr_interface","","",10],[3,"ip6_mreq","",""],[12,"ipv6mr_multiaddr","","",11],[12,"ipv6mr_interface","","",11],[3,"addrinfo","",""],[12,"ai_flags","","",12],[12,"ai_family","","",12],[12,"ai_socktype","","",12],[12,"ai_protocol","","",12],[12,"ai_addrlen","","",12],[12,"ai_addr","","",12],[12,"ai_canonname","","",12],[12,"ai_next","","",12],[3,"sockaddr_un","",""],[12,"sun_family","","",13],[12,"sun_path","","",13],[3,"ifaddrs","",""],[12,"ifa_next","","",14],[12,"ifa_name","","",14],[12,"ifa_flags","","",14],[12,"ifa_addr","","",14],[12,"ifa_netmask","","",14],[12,"ifa_ifu","","",14],[12,"ifa_data","","",14],[6,"socklen_t","",""],[6,"sa_family_t","",""],[6,"in_port_t","",""],[6,"in_addr_t","",""],[0,"arch","libc::types::os",""],[0,"c95","libc::types::os::arch",""],[6,"c_char","libc::types::os::arch::c95",""],[6,"c_schar","",""],[6,"c_uchar","",""],[6,"c_short","",""],[6,"c_ushort","",""],[6,"c_int","",""],[6,"c_uint","",""],[6,"c_long","",""],[6,"c_ulong","",""],[6,"c_float","",""],[6,"c_double","",""],[6,"size_t","",""],[6,"ptrdiff_t","",""],[6,"clock_t","",""],[6,"time_t","",""],[6,"suseconds_t","",""],[6,"wchar_t","",""],[0,"c99","libc::types::os::arch",""],[6,"c_longlong","libc::types::os::arch::c99",""],[6,"c_ulonglong","",""],[6,"intptr_t","",""],[6,"uintptr_t","",""],[6,"intmax_t","",""],[6,"uintmax_t","",""],[0,"posix88","libc::types::os::arch",""],[6,"off_t","libc::types::os::arch::posix88",""],[6,"dev_t","",""],[6,"ino_t","",""],[6,"pid_t","",""],[6,"uid_t","",""],[6,"gid_t","",""],[6,"useconds_t","",""],[6,"mode_t","",""],[6,"ssize_t","",""],[0,"posix01","libc::types::os::arch",""],[3,"stat","libc::types::os::arch::posix01",""],[12,"st_dev","","",15],[12,"st_ino","","",15],[12,"st_nlink","","",15],[12,"st_mode","","",15],[12,"st_uid","","",15],[12,"st_gid","","",15],[12,"__pad0","","",15],[12,"st_rdev","","",15],[12,"st_size","","",15],[12,"st_blksize","","",15],[12,"st_blocks","","",15],[12,"st_atime","","",15],[12,"st_atime_nsec","","",15],[12,"st_mtime","","",15],[12,"st_mtime_nsec","","",15],[12,"st_ctime","","",15],[12,"st_ctime_nsec","","",15],[12,"__unused","","",15],[3,"utimbuf","",""],[12,"actime","","",16],[12,"modtime","","",16],[3,"pthread_attr_t","",""],[12,"__size","","",17],[6,"nlink_t","",""],[6,"blksize_t","",""],[6,"blkcnt_t","",""],[0,"extra","libc::types::os::arch",""],[3,"sockaddr_ll","libc::types::os::arch::extra",""],[12,"sll_family","","",18],[12,"sll_protocol","","",18],[12,"sll_ifindex","","",18],[12,"sll_hatype","","",18],[12,"sll_pkttype","","",18],[12,"sll_halen","","",18],[12,"sll_addr","","",18],[0,"consts","libc",""],[0,"os","libc::consts",""],[0,"c95","libc::consts::os",""],[17,"EXIT_FAILURE","libc::consts::os::c95",""],[17,"EXIT_SUCCESS","",""],[17,"RAND_MAX","",""],[17,"EOF","",""],[17,"SEEK_SET","",""],[17,"SEEK_CUR","",""],[17,"SEEK_END","",""],[17,"_IOFBF","",""],[17,"_IONBF","",""],[17,"_IOLBF","",""],[17,"BUFSIZ","",""],[17,"FOPEN_MAX","",""],[17,"FILENAME_MAX","",""],[17,"L_tmpnam","",""],[17,"TMP_MAX","",""],[0,"posix88","libc::consts::os",""],[17,"O_RDONLY","libc::consts::os::posix88",""],[17,"O_WRONLY","",""],[17,"O_RDWR","",""],[17,"O_APPEND","",""],[17,"O_CREAT","",""],[17,"O_EXCL","",""],[17,"O_TRUNC","",""],[17,"S_IFIFO","",""],[17,"S_IFCHR","",""],[17,"S_IFBLK","",""],[17,"S_IFDIR","",""],[17,"S_IFREG","",""],[17,"S_IFLNK","",""],[17,"S_IFMT","",""],[17,"S_IEXEC","",""],[17,"S_IWRITE","",""],[17,"S_IREAD","",""],[17,"S_IRWXU","",""],[17,"S_IXUSR","",""],[17,"S_IWUSR","",""],[17,"S_IRUSR","",""],[17,"F_OK","",""],[17,"R_OK","",""],[17,"W_OK","",""],[17,"X_OK","",""],[17,"STDIN_FILENO","",""],[17,"STDOUT_FILENO","",""],[17,"STDERR_FILENO","",""],[17,"F_LOCK","",""],[17,"F_TEST","",""],[17,"F_TLOCK","",""],[17,"F_ULOCK","",""],[17,"SIGHUP","",""],[17,"SIGINT","",""],[17,"SIGQUIT","",""],[17,"SIGILL","",""],[17,"SIGABRT","",""],[17,"SIGFPE","",""],[17,"SIGKILL","",""],[17,"SIGSEGV","",""],[17,"SIGPIPE","",""],[17,"SIGALRM","",""],[17,"SIGTERM","",""],[17,"PROT_NONE","",""],[17,"PROT_READ","",""],[17,"PROT_WRITE","",""],[17,"PROT_EXEC","",""],[17,"MAP_FILE","",""],[17,"MAP_SHARED","",""],[17,"MAP_PRIVATE","",""],[17,"MAP_FIXED","",""],[17,"MAP_ANON","",""],[17,"MAP_FAILED","",""],[17,"MCL_CURRENT","",""],[17,"MCL_FUTURE","",""],[17,"MS_ASYNC","",""],[17,"MS_INVALIDATE","",""],[17,"MS_SYNC","",""],[17,"EPERM","",""],[17,"ENOENT","",""],[17,"ESRCH","",""],[17,"EINTR","",""],[17,"EIO","",""],[17,"ENXIO","",""],[17,"E2BIG","",""],[17,"ENOEXEC","",""],[17,"EBADF","",""],[17,"ECHILD","",""],[17,"EAGAIN","",""],[17,"ENOMEM","",""],[17,"EACCES","",""],[17,"EFAULT","",""],[17,"ENOTBLK","",""],[17,"EBUSY","",""],[17,"EEXIST","",""],[17,"EXDEV","",""],[17,"ENODEV","",""],[17,"ENOTDIR","",""],[17,"EISDIR","",""],[17,"EINVAL","",""],[17,"ENFILE","",""],[17,"EMFILE","",""],[17,"ENOTTY","",""],[17,"ETXTBSY","",""],[17,"EFBIG","",""],[17,"ENOSPC","",""],[17,"ESPIPE","",""],[17,"EROFS","",""],[17,"EMLINK","",""],[17,"EPIPE","",""],[17,"EDOM","",""],[17,"ERANGE","",""],[17,"EDEADLK","",""],[17,"ENAMETOOLONG","",""],[17,"ENOLCK","",""],[17,"ENOSYS","",""],[17,"ENOTEMPTY","",""],[17,"ELOOP","",""],[17,"EWOULDBLOCK","",""],[17,"ENOMSG","",""],[17,"EIDRM","",""],[17,"ECHRNG","",""],[17,"EL2NSYNC","",""],[17,"EL3HLT","",""],[17,"EL3RST","",""],[17,"ELNRNG","",""],[17,"EUNATCH","",""],[17,"ENOCSI","",""],[17,"EL2HLT","",""],[17,"EBADE","",""],[17,"EBADR","",""],[17,"EXFULL","",""],[17,"ENOANO","",""],[17,"EBADRQC","",""],[17,"EBADSLT","",""],[17,"EDEADLOCK","",""],[17,"EBFONT","",""],[17,"ENOSTR","",""],[17,"ENODATA","",""],[17,"ETIME","",""],[17,"ENOSR","",""],[17,"ENONET","",""],[17,"ENOPKG","",""],[17,"EREMOTE","",""],[17,"ENOLINK","",""],[17,"EADV","",""],[17,"ESRMNT","",""],[17,"ECOMM","",""],[17,"EPROTO","",""],[17,"EMULTIHOP","",""],[17,"EDOTDOT","",""],[17,"EBADMSG","",""],[17,"EOVERFLOW","",""],[17,"ENOTUNIQ","",""],[17,"EBADFD","",""],[17,"EREMCHG","",""],[17,"ELIBACC","",""],[17,"ELIBBAD","",""],[17,"ELIBSCN","",""],[17,"ELIBMAX","",""],[17,"ELIBEXEC","",""],[17,"EILSEQ","",""],[17,"ERESTART","",""],[17,"ESTRPIPE","",""],[17,"EUSERS","",""],[17,"ENOTSOCK","",""],[17,"EDESTADDRREQ","",""],[17,"EMSGSIZE","",""],[17,"EPROTOTYPE","",""],[17,"ENOPROTOOPT","",""],[17,"EPROTONOSUPPORT","",""],[17,"ESOCKTNOSUPPORT","",""],[17,"EOPNOTSUPP","",""],[17,"EPFNOSUPPORT","",""],[17,"EAFNOSUPPORT","",""],[17,"EADDRINUSE","",""],[17,"EADDRNOTAVAIL","",""],[17,"ENETDOWN","",""],[17,"ENETUNREACH","",""],[17,"ENETRESET","",""],[17,"ECONNABORTED","",""],[17,"ECONNRESET","",""],[17,"ENOBUFS","",""],[17,"EISCONN","",""],[17,"ENOTCONN","",""],[17,"ESHUTDOWN","",""],[17,"ETOOMANYREFS","",""],[17,"ETIMEDOUT","",""],[17,"ECONNREFUSED","",""],[17,"EHOSTDOWN","",""],[17,"EHOSTUNREACH","",""],[17,"EALREADY","",""],[17,"EINPROGRESS","",""],[17,"ESTALE","",""],[17,"EUCLEAN","",""],[17,"ENOTNAM","",""],[17,"ENAVAIL","",""],[17,"EISNAM","",""],[17,"EREMOTEIO","",""],[17,"EDQUOT","",""],[17,"ENOMEDIUM","",""],[17,"EMEDIUMTYPE","",""],[17,"ECANCELED","",""],[17,"ENOKEY","",""],[17,"EKEYEXPIRED","",""],[17,"EKEYREVOKED","",""],[17,"EKEYREJECTED","",""],[17,"EOWNERDEAD","",""],[17,"ENOTRECOVERABLE","",""],[17,"ERFKILL","",""],[17,"EHWPOISON","",""],[0,"posix01","libc::consts::os",""],[17,"F_DUPFD","libc::consts::os::posix01",""],[17,"F_GETFD","",""],[17,"F_SETFD","",""],[17,"F_GETFL","",""],[17,"F_SETFL","",""],[17,"SIGTRAP","",""],[17,"SIGPIPE","",""],[17,"SIG_IGN","",""],[17,"GLOB_ERR","",""],[17,"GLOB_MARK","",""],[17,"GLOB_NOSORT","",""],[17,"GLOB_DOOFFS","",""],[17,"GLOB_NOCHECK","",""],[17,"GLOB_APPEND","",""],[17,"GLOB_NOESCAPE","",""],[17,"GLOB_NOSPACE","",""],[17,"GLOB_ABORTED","",""],[17,"GLOB_NOMATCH","",""],[17,"POSIX_MADV_NORMAL","",""],[17,"POSIX_MADV_RANDOM","",""],[17,"POSIX_MADV_SEQUENTIAL","",""],[17,"POSIX_MADV_WILLNEED","",""],[17,"POSIX_MADV_DONTNEED","",""],[17,"_SC_MQ_PRIO_MAX","",""],[17,"_SC_IOV_MAX","",""],[17,"_SC_GETGR_R_SIZE_MAX","",""],[17,"_SC_GETPW_R_SIZE_MAX","",""],[17,"_SC_LOGIN_NAME_MAX","",""],[17,"_SC_TTY_NAME_MAX","",""],[17,"_SC_THREADS","",""],[17,"_SC_THREAD_SAFE_FUNCTIONS","",""],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","",""],[17,"_SC_THREAD_KEYS_MAX","",""],[17,"_SC_THREAD_STACK_MIN","",""],[17,"_SC_THREAD_THREADS_MAX","",""],[17,"_SC_THREAD_ATTR_STACKADDR","",""],[17,"_SC_THREAD_ATTR_STACKSIZE","",""],[17,"_SC_THREAD_PRIORITY_SCHEDULING","",""],[17,"_SC_THREAD_PRIO_INHERIT","",""],[17,"_SC_THREAD_PRIO_PROTECT","",""],[17,"_SC_THREAD_PROCESS_SHARED","",""],[17,"_SC_ATEXIT_MAX","",""],[17,"_SC_XOPEN_VERSION","",""],[17,"_SC_XOPEN_XCU_VERSION","",""],[17,"_SC_XOPEN_UNIX","",""],[17,"_SC_XOPEN_CRYPT","",""],[17,"_SC_XOPEN_ENH_I18N","",""],[17,"_SC_XOPEN_SHM","",""],[17,"_SC_XOPEN_LEGACY","",""],[17,"_SC_XOPEN_REALTIME","",""],[17,"_SC_XOPEN_REALTIME_THREADS","",""],[17,"PTHREAD_CREATE_JOINABLE","",""],[17,"PTHREAD_CREATE_DETACHED","",""],[17,"PTHREAD_STACK_MIN","",""],[17,"CLOCK_REALTIME","",""],[17,"CLOCK_MONOTONIC","",""],[0,"bsd44","libc::consts::os",""],[17,"MADV_NORMAL","libc::consts::os::bsd44",""],[17,"MADV_RANDOM","",""],[17,"MADV_SEQUENTIAL","",""],[17,"MADV_WILLNEED","",""],[17,"MADV_DONTNEED","",""],[17,"MADV_REMOVE","",""],[17,"MADV_DONTFORK","",""],[17,"MADV_DOFORK","",""],[17,"MADV_MERGEABLE","",""],[17,"MADV_UNMERGEABLE","",""],[17,"MADV_HWPOISON","",""],[17,"IFF_LOOPBACK","",""],[17,"AF_UNIX","",""],[17,"AF_INET","",""],[17,"AF_INET6","",""],[17,"SOCK_STREAM","",""],[17,"SOCK_DGRAM","",""],[17,"SOCK_RAW","",""],[17,"IPPROTO_TCP","",""],[17,"IPPROTO_IP","",""],[17,"IPPROTO_IPV6","",""],[17,"IP_MULTICAST_TTL","",""],[17,"IP_MULTICAST_LOOP","",""],[17,"IP_TTL","",""],[17,"IP_HDRINCL","",""],[17,"IP_ADD_MEMBERSHIP","",""],[17,"IP_DROP_MEMBERSHIP","",""],[17,"IPV6_ADD_MEMBERSHIP","",""],[17,"IPV6_DROP_MEMBERSHIP","",""],[17,"TCP_NODELAY","",""],[17,"SOL_SOCKET","",""],[17,"SO_KEEPALIVE","",""],[17,"SO_BROADCAST","",""],[17,"SO_REUSEADDR","",""],[17,"SO_ERROR","",""],[17,"SHUT_RD","",""],[17,"SHUT_WR","",""],[17,"SHUT_RDWR","",""],[0,"extra","libc::consts::os",""],[17,"AF_PACKET","libc::consts::os::extra",""],[17,"IPPROTO_RAW","",""],[17,"O_RSYNC","",""],[17,"O_DSYNC","",""],[17,"O_NONBLOCK","",""],[17,"O_SYNC","",""],[17,"PROT_GROWSDOWN","",""],[17,"PROT_GROWSUP","",""],[17,"MAP_TYPE","",""],[17,"MAP_ANONYMOUS","",""],[17,"MAP_32BIT","",""],[17,"MAP_GROWSDOWN","",""],[17,"MAP_DENYWRITE","",""],[17,"MAP_EXECUTABLE","",""],[17,"MAP_LOCKED","",""],[17,"MAP_NONRESERVE","",""],[17,"MAP_POPULATE","",""],[17,"MAP_NONBLOCK","",""],[17,"MAP_STACK","",""],[0,"sysconf","libc::consts::os",""],[17,"_SC_ARG_MAX","libc::consts::os::sysconf",""],[17,"_SC_CHILD_MAX","",""],[17,"_SC_CLK_TCK","",""],[17,"_SC_NGROUPS_MAX","",""],[17,"_SC_OPEN_MAX","",""],[17,"_SC_STREAM_MAX","",""],[17,"_SC_TZNAME_MAX","",""],[17,"_SC_JOB_CONTROL","",""],[17,"_SC_SAVED_IDS","",""],[17,"_SC_REALTIME_SIGNALS","",""],[17,"_SC_PRIORITY_SCHEDULING","",""],[17,"_SC_TIMERS","",""],[17,"_SC_ASYNCHRONOUS_IO","",""],[17,"_SC_PRIORITIZED_IO","",""],[17,"_SC_SYNCHRONIZED_IO","",""],[17,"_SC_FSYNC","",""],[17,"_SC_MAPPED_FILES","",""],[17,"_SC_MEMLOCK","",""],[17,"_SC_MEMLOCK_RANGE","",""],[17,"_SC_MEMORY_PROTECTION","",""],[17,"_SC_MESSAGE_PASSING","",""],[17,"_SC_SEMAPHORES","",""],[17,"_SC_SHARED_MEMORY_OBJECTS","",""],[17,"_SC_AIO_LISTIO_MAX","",""],[17,"_SC_AIO_MAX","",""],[17,"_SC_AIO_PRIO_DELTA_MAX","",""],[17,"_SC_DELAYTIMER_MAX","",""],[17,"_SC_MQ_OPEN_MAX","",""],[17,"_SC_VERSION","",""],[17,"_SC_PAGESIZE","",""],[17,"_SC_RTSIG_MAX","",""],[17,"_SC_SEM_NSEMS_MAX","",""],[17,"_SC_SEM_VALUE_MAX","",""],[17,"_SC_SIGQUEUE_MAX","",""],[17,"_SC_TIMER_MAX","",""],[17,"_SC_BC_BASE_MAX","",""],[17,"_SC_BC_DIM_MAX","",""],[17,"_SC_BC_SCALE_MAX","",""],[17,"_SC_BC_STRING_MAX","",""],[17,"_SC_COLL_WEIGHTS_MAX","",""],[17,"_SC_EXPR_NEST_MAX","",""],[17,"_SC_LINE_MAX","",""],[17,"_SC_RE_DUP_MAX","",""],[17,"_SC_2_VERSION","",""],[17,"_SC_2_C_BIND","",""],[17,"_SC_2_C_DEV","",""],[17,"_SC_2_FORT_DEV","",""],[17,"_SC_2_FORT_RUN","",""],[17,"_SC_2_SW_DEV","",""],[17,"_SC_2_LOCALEDEF","",""],[17,"_SC_2_CHAR_TERM","",""],[17,"_SC_2_C_VERSION","",""],[17,"_SC_2_UPE","",""],[17,"_SC_XBS5_ILP32_OFF32","",""],[17,"_SC_XBS5_ILP32_OFFBIG","",""],[17,"_SC_XBS5_LPBIG_OFFBIG","",""],[0,"funcs","libc",""],[0,"c95","libc::funcs",""],[0,"ctype","libc::funcs::c95",""],[5,"isalnum","libc::funcs::c95::ctype",""],[5,"isalpha","",""],[5,"iscntrl","",""],[5,"isdigit","",""],[5,"isgraph","",""],[5,"islower","",""],[5,"isprint","",""],[5,"ispunct","",""],[5,"isspace","",""],[5,"isupper","",""],[5,"isxdigit","",""],[5,"tolower","",""],[5,"toupper","",""],[0,"stdio","libc::funcs::c95",""],[5,"fopen","libc::funcs::c95::stdio",""],[5,"freopen","",""],[5,"fflush","",""],[5,"fclose","",""],[5,"remove","",""],[5,"rename","",""],[5,"tmpfile","",""],[5,"setvbuf","",""],[5,"setbuf","",""],[5,"fgetc","",""],[5,"fgets","",""],[5,"fputc","",""],[5,"fputs","",""],[5,"puts","",""],[5,"ungetc","",""],[5,"fread","",""],[5,"fwrite","",""],[5,"fseek","",""],[5,"ftell","",""],[5,"rewind","",""],[5,"fgetpos","",""],[5,"fsetpos","",""],[5,"feof","",""],[5,"ferror","",""],[5,"perror","",""],[0,"stdlib","libc::funcs::c95",""],[5,"abs","libc::funcs::c95::stdlib",""],[5,"labs","",""],[5,"atof","",""],[5,"atoi","",""],[5,"strtod","",""],[5,"strtol","",""],[5,"strtoul","",""],[5,"calloc","",""],[5,"malloc","",""],[5,"realloc","",""],[5,"free","",""],[5,"exit","","Exits the running program in a possibly dangerous manner."],[5,"_exit","",""],[5,"atexit","",""],[5,"system","",""],[5,"getenv","",""],[5,"rand","",""],[5,"srand","",""],[0,"string","libc::funcs::c95",""],[5,"strcpy","libc::funcs::c95::string",""],[5,"strncpy","",""],[5,"strcat","",""],[5,"strncat","",""],[5,"strcmp","",""],[5,"strncmp","",""],[5,"strcoll","",""],[5,"strchr","",""],[5,"strrchr","",""],[5,"strspn","",""],[5,"strcspn","",""],[5,"strpbrk","",""],[5,"strstr","",""],[5,"strlen","",""],[5,"strerror","",""],[5,"strtok","",""],[5,"strxfrm","",""],[5,"wcslen","",""],[5,"memcmp","",""],[5,"memchr","",""],[0,"posix88","libc::funcs",""],[0,"stat_","libc::funcs::posix88",""],[5,"chmod","libc::funcs::posix88::stat_",""],[5,"fchmod","",""],[5,"fstat","",""],[5,"mkdir","",""],[5,"mkfifo","",""],[5,"stat","",""],[0,"stdio","libc::funcs::posix88",""],[5,"popen","libc::funcs::posix88::stdio",""],[5,"pclose","",""],[5,"fdopen","",""],[5,"fileno","",""],[0,"fcntl","libc::funcs::posix88",""],[5,"open","libc::funcs::posix88::fcntl",""],[5,"creat","",""],[5,"fcntl","",""],[0,"dirent","libc::funcs::posix88",""],[5,"opendir","libc::funcs::posix88::dirent",""],[5,"readdir_r","",""],[5,"closedir","",""],[5,"rewinddir","",""],[5,"seekdir","",""],[5,"telldir","",""],[0,"unistd","libc::funcs::posix88",""],[5,"access","libc::funcs::posix88::unistd",""],[5,"alarm","",""],[5,"chdir","",""],[5,"chown","",""],[5,"close","",""],[5,"dup","",""],[5,"dup2","",""],[5,"execv","",""],[5,"execve","",""],[5,"execvp","",""],[5,"fork","",""],[5,"fpathconf","",""],[5,"getcwd","",""],[5,"getegid","",""],[5,"geteuid","",""],[5,"getgid","",""],[5,"getgroups","",""],[5,"getlogin","",""],[5,"getopt","",""],[5,"getpgrp","",""],[5,"getpid","",""],[5,"getppid","",""],[5,"getuid","",""],[5,"getsid","",""],[5,"isatty","",""],[5,"link","",""],[5,"lseek","",""],[5,"pathconf","",""],[5,"pause","",""],[5,"pipe","",""],[5,"read","",""],[5,"rmdir","",""],[5,"setgid","",""],[5,"setpgid","",""],[5,"setsid","",""],[5,"setuid","",""],[5,"sleep","",""],[5,"usleep","",""],[5,"nanosleep","",""],[5,"sysconf","",""],[5,"tcgetpgrp","",""],[5,"ttyname","",""],[5,"unlink","",""],[5,"write","",""],[5,"pread","",""],[5,"pwrite","",""],[5,"utime","",""],[17,"_PC_NAME_MAX","",""],[0,"signal","libc::funcs::posix88",""],[5,"kill","libc::funcs::posix88::signal",""],[0,"mman","libc::funcs::posix88",""],[5,"mlock","libc::funcs::posix88::mman",""],[5,"munlock","",""],[5,"mlockall","",""],[5,"munlockall","",""],[5,"mmap","",""],[5,"munmap","",""],[5,"mprotect","",""],[5,"msync","",""],[5,"shm_open","",""],[5,"shm_unlink","",""],[0,"net","libc::funcs::posix88",""],[5,"if_nametoindex","libc::funcs::posix88::net",""],[0,"posix01","libc::funcs",""],[0,"stat_","libc::funcs::posix01",""],[5,"lstat","libc::funcs::posix01::stat_",""],[0,"unistd","libc::funcs::posix01",""],[5,"readlink","libc::funcs::posix01::unistd",""],[5,"fsync","",""],[5,"fdatasync","",""],[5,"setenv","",""],[5,"unsetenv","",""],[5,"putenv","",""],[5,"symlink","",""],[5,"ftruncate","",""],[0,"signal","libc::funcs::posix01",""],[5,"signal","libc::funcs::posix01::signal",""],[0,"glob","libc::funcs::posix01",""],[5,"glob","libc::funcs::posix01::glob",""],[5,"globfree","",""],[0,"mman","libc::funcs::posix01",""],[5,"posix_madvise","libc::funcs::posix01::mman",""],[0,"bsd43","libc::funcs",""],[5,"socket","libc::funcs::bsd43",""],[5,"connect","",""],[5,"bind","",""],[5,"listen","",""],[5,"accept","",""],[5,"getpeername","",""],[5,"getsockname","",""],[5,"setsockopt","",""],[5,"recv","",""],[5,"send","",""],[5,"recvfrom","",""],[5,"sendto","",""],[5,"getifaddrs","",""],[5,"freeifaddrs","",""],[5,"shutdown","",""],[0,"bsd44","libc::funcs",""],[5,"getdtablesize","libc::funcs::bsd44",""],[5,"ioctl","",""],[5,"madvise","",""],[5,"mincore","",""]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};
searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator."],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs."]],"paths":[]};
searchIndex['encoding_index_tests'] = {"items":[[0,"","encoding_index_tests","Macros and utilities for testing indices."],[14,"single_byte_tests!","","Makes a common test suite for single-byte indices."],[14,"multi_byte_tests!","","Makes a common test suite for multi-byte indices."],[14,"multi_byte_range_tests!","","Makes a common test suite for multi-byte range indices."]],"paths":[]};
searchIndex['plugins'] = {"items":[[0,"","plugins","Servo's compiler plugin/macro crate"],[5,"plugin_registrar","",""],[0,"jstraceable","","Handles the auto-deriving for `#[jstraceable]`"],[5,"expand_dom_struct","plugins::jstraceable",""],[5,"expand_jstraceable","","Provides the hook to expand `#[jstraceable]` into an implementation of `JSTraceable`"],[0,"reflector","plugins","Autogenerates implementations of Reflectable on DOM structs"],[5,"expand_reflector","plugins::reflector",""],[0,"lints","plugins",""],[0,"ban","plugins::lints",""],[3,"BanPass","plugins::lints::ban","Lint for banning various unsafe types"],[11,"get_lints","","",0],[11,"check_ty","","",0],[0,"inheritance_integrity","plugins::lints",""],[3,"InheritancePass","plugins::lints::inheritance_integrity","Lint for ensuring proper layout of DOM structs"],[11,"get_lints","","",1],[11,"check_struct_def","","",1],[0,"privatize","plugins::lints",""],[3,"PrivatizePass","plugins::lints::privatize","Lint for keeping DOM fields private"],[11,"get_lints","","",2],[11,"check_struct_def","","",2],[0,"str_to_string","plugins::lints",""],[3,"StrToStringPass","plugins::lints::str_to_string","Prefer str.to_owned() over str.to_string()"],[11,"get_lints","","",3],[11,"check_expr","","",3],[0,"transmute_type","plugins::lints",""],[3,"TransmutePass","plugins::lints::transmute_type","Lint for auditing transmutes"],[11,"get_lints","","",4],[11,"check_expr","","",4],[0,"unrooted_must_root","plugins::lints",""],[3,"UnrootedPass","plugins::lints::unrooted_must_root","Lint for ensuring safe usage of unrooted pointers"],[11,"get_lints","","",5],[11,"check_struct_def","","All structs containing #[must_root] types must be #[must_root] themselves",5],[11,"check_variant","","All enums containing #[must_root] types must be #[must_root] themselves",5],[11,"check_fn","","Function arguments that are #[must_root] types are not allowed",5],[11,"check_stmt","","",5],[0,"utils","plugins","Utilities for writing plugins"],[5,"match_ty_unwrap","plugins::utils","Matches a type with a provided string, and returns its type parameters if successful"],[5,"match_lang_ty","","Checks if a type has a #[servo_lang = \"str\"] attribute"],[5,"unsafe_context","",""],[0,"casing","plugins",""],[5,"expand_lower","plugins::casing",""],[5,"expand_upper","",""]],"paths":[[3,"BanPass"],[3,"InheritancePass"],[3,"PrivatizePass"],[3,"StrToStringPass"],[3,"TransmutePass"],[3,"UnrootedPass"]]};
searchIndex['regex'] = {"items":[[0,"","regex","This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst case performance. The specific syntax supported is\ndocumented further down."],[3,"Error","","Error corresponds to something that can go wrong while parsing\na regular expression."],[12,"pos","","The *approximate* character index of where the error occurred.",0],[12,"msg","","A message describing the error.",0],[3,"Captures","","Captures represents a group of captured strings for a single match."],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression."],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression."],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression."],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string."],[3,"NoExpand","","NoExpand indicates literal string replacement."],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match."],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match."],[4,"Regex","","A compiled regular expression"],[5,"quote","","Escapes all regular expression meta characters in `text`."],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given."],[11,"fmt","","",0],[11,"fmt","","",0],[11,"clone","","",1],[11,"fmt","","Shows the original regular expression.",1],[11,"fmt","","Shows the original regular expression.",1],[11,"new","","Compiles a dynamic regular expression. Once compiled, it can be\nused repeatedly to search, split or replace text in a string.",1],[11,"is_match","","Returns true if and only if the regex matches the string given.",1],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",1],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",1],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",1],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",1],[11,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.",1],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",1],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",1],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",1],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",1],[11,"as_str","","Returns the original string of this regex.",1],[11,"reg_replace","","",2],[11,"next","","",3],[11,"next","","",4],[11,"pos","","Returns the start and end positions of the Nth capture group.\nReturns `None` if `i` is not a valid capture group or if the capture\ngroup did not match anything.\nThe positions returned are *always* byte indices with respect to the\noriginal string matched.",5],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",5],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",5],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",5],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",5],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",5],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",5],[11,"len","","Returns the number of captured groups.",5],[11,"is_empty","","Returns if there are no captured groups.",5],[11,"next","","",6],[11,"next","","",7],[11,"next","","",8],[11,"next","","",9],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string."],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",10]],"paths":[[3,"Error"],[4,"Regex"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex['mac'] = {"items":[[0,"","mac","# mac"],[0,"test","","Macros for writing test suites."],[0,"mem","","Macros for low-level memory manipulation."],[0,"format","","Macros for string formatting."],[0,"syntax_ext","","Macros useful when writing procedural syntax extensions."],[0,"matches","","Pattern Matching macros."],[0,"inspect","","Inspect Macros"],[0,"cfg","","Macros for conditional compilation."],[14,"test_eq!","","Generate a test function `$name` which asserts that `$left` and `$right`\nare equal."],[14,"addrs_of!","","Make a tuple of the addresses of some of a struct's fields."],[14,"format_if!","","Conditionally perform string formatting."],[14,"ext_bail!","","Call `span_err` on an `ExtCtxt` and return `DummyResult::any`."],[14,"ext_bail_if!","","`ext_bail!` if the condition `$e` is true."],[14,"ext_expect!","","Unwrap the `Option` `$e`, or `ext_bail!`."],[14,"matches!","","Returns true if an expression matches a pattern."],[14,"inspect!","","Evaluates an expression, prints a stringified version of the expression\nalong with the evaluated value, and then returns that value."],[14,"match_cfg!","","Compile-time matching on config variables."],[14,"if_cfg!","","Compile-time conditional expression."],[14,"unwrap_or_return!","","Unwraps an `Option` or returns from the function with the specified return\nvalue."],[14,"do_while!","","Do-while loop."]],"paths":[]};
searchIndex['matches'] = {"items":[[0,"","matches",""],[14,"matches!","",""],[14,"_tt_as_expr_hack!","","Work around \"error: unexpected token: `an interpolated tt`\", whatever that means."]],"paths":[]};
searchIndex['egl'] = {"items":[[0,"","egl",""],[0,"egl","",""],[5,"GetError","egl::egl",""],[5,"GetDisplay","",""],[5,"Initialize","",""],[5,"Terminate","",""],[5,"QueryString","",""],[5,"GetConfigs","",""],[5,"ChooseConfig","",""],[5,"GetConfigAttrib","",""],[5,"CreateWindowSurface","",""],[5,"CreatePbufferSurface","",""],[5,"CreatePixmapSurface","",""],[5,"DestroySurface","",""],[5,"QuerySurface","",""],[5,"BindAPI","",""],[5,"QueryAPI","",""],[5,"WaitClient","",""],[5,"ReleaseThread","",""],[5,"CreatePbufferFromClientBuffer","",""],[5,"SurfaceAttrib","",""],[5,"BindTexImage","",""],[5,"ReleaseTexImage","",""],[5,"SwapInterval","",""],[5,"CreateContext","",""],[5,"DestroyContext","",""],[5,"MakeCurrent","",""],[5,"GetCurrentContext","",""],[5,"GetCurrentSurface","",""],[5,"GetCurrentDisplay","",""],[5,"QueryContext","",""],[5,"WaitGL","",""],[5,"WaitNative","",""],[5,"SwapBuffers","",""],[5,"CopyBuffers","",""],[6,"khronos_int32_t","",""],[6,"khronos_uint32_t","",""],[6,"khronos_int64_t","",""],[6,"khronos_uint64_t","",""],[6,"khronos_int8_t","",""],[6,"khronos_uint8_t","",""],[6,"khronos_int16_t","",""],[6,"khronos_uint16_t","",""],[6,"khronos_intptr_t","",""],[6,"khronos_uintptr_t","",""],[6,"khronos_ssize_t","",""],[6,"khronos_usize_t","",""],[6,"khronos_float_t","",""],[6,"khronos_utime_nanoseconds_t","",""],[6,"khronos_stime_nanoseconds_t","",""],[6,"ANativeWindow","",""],[6,"egl_native_pixmap_t","",""],[6,"EGLNativeWindowType","",""],[6,"EGLNativePixmapType","",""],[6,"EGLNativeDisplayType","",""],[6,"NativeDisplayType","",""],[6,"NativePixmapType","",""],[6,"NativeWindowType","",""],[6,"EGLint","",""],[6,"EGLBoolean","",""],[6,"EGLenum","",""],[6,"EGLConfig","",""],[6,"EGLContext","",""],[6,"EGLDisplay","",""],[6,"EGLSurface","",""],[6,"EGLClientBuffer","",""],[6,"__eglMustCastToProperFunctionPointerType","",""],[6,"status_t","",""],[7,"EGL_CONTEXT_CLIENT_VERSION","",""],[7,"EGL_NO_CONTEXT","",""],[7,"EGL_DEFAULT_DISPLAY","",""],[7,"EGL_NONE","",""],[7,"EGL_NO_DISPLAY","",""],[7,"EGL_TRUE","",""],[7,"EGL_FALSE","",""],[7,"EGL_NO_SURFACE","",""],[7,"EGL_SURFACE_TYPE","",""],[7,"EGL_WINDOW_BIT","",""],[7,"EGL_RENDERABLE_TYPE","",""],[7,"EGL_OPENGL_ES2_BIT","",""],[7,"EGL_HEIGHT","",""],[7,"EGL_WIDTH","",""],[7,"EGL_BUFFER_SIZE","",""],[7,"EGL_DEPTH_SIZE","",""],[7,"EGL_ALPHA_SIZE","",""],[7,"EGL_BLUE_SIZE","",""],[7,"EGL_GREEN_SIZE","",""],[7,"EGL_RED_SIZE","",""],[7,"EGL_DRAW","",""],[7,"EGL_CONTEXT_MAJOR_VERSION_KHR","",""],[7,"EGL_CONTEXT_MINOR_VERSION_KHR","",""],[7,"EGL_CONTEXT_FLAGS_KHR","",""],[7,"EGL_OPENGL_ES3_BIT_KHR","",""],[7,"EGL_EXTENSIONS","",""],[0,"eglext","egl",""],[5,"CreateImageKHR","egl::eglext",""],[5,"DestroyImageKHR","",""],[6,"EGLImageKHR","",""],[7,"EGL_NATIVE_BUFFER_ANDROID","",""],[7,"EGL_KHR_image_pixmap","",""],[7,"EGL_KHR_image_base","",""],[7,"EGL_KHR_image","",""],[7,"EGL_NATIVE_PIXMAP_KHR","",""],[7,"EGL_MATCH_FORMAT_KHR","",""],[7,"EGL_FORMAT_RGB_565_EXACT_KHR","",""],[7,"EGL_FORMAT_RGB_565_KHR","",""],[7,"EGL_FORMAT_RGBA_8888_EXACT_KHR","",""],[7,"EGL_FORMAT_RGBA_8888_KHR","",""],[7,"EGL_MAP_PRESERVE_PIXELS_KHR","",""],[7,"EGL_LOCK_USAGE_HINT_KHR","",""],[7,"EGL_IMAGE_PRESERVED_KHR","",""],[7,"EGL_GL_TEXTURE_2D_KHR","",""],[7,"EGL_GL_TEXTURE_LEVEL_KHR","",""],[7,"EGL_BITMAP_POINTER_KHR","",""],[7,"EGL_BITMAP_PITCH_KHR","",""],[7,"EGL_BITMAP_ORIGIN_KHR","",""],[7,"EGL_BITMAP_PIXEL_RED_OFFSET_KHR","",""],[7,"EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR","",""],[7,"EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR","",""],[7,"EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR","",""],[7,"EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR","",""]],"paths":[]};
searchIndex['rustc_lint'] = {"items":[[0,"","rustc_lint","Lints in the Rust compiler."],[0,"lint","","Lints, aka compiler warnings."],[11,"name_lower","rustc::lint","Get the lint's name, with ASCII letters converted to lowercase.",0],[11,"fmt","rustc_back::svh","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"new","","",1],[11,"as_str","","",1],[11,"calculate","","",1],[11,"fmt","","",1],[11,"hash","rustc_back::svh::svh_visitor","",2],[11,"hash","","",3],[11,"hash","","",4],[11,"get_content","syntax::ast","",5],[11,"get_content","","",6],[11,"visit_mac","rustc_back::svh::svh_visitor","",7],[11,"visit_struct_def","","",7],[11,"visit_variant","","",7],[11,"visit_opt_lifetime_ref","","",7],[11,"visit_ident","","",7],[11,"visit_lifetime_ref","","",7],[11,"visit_lifetime_def","","",7],[11,"visit_expr","","",7],[11,"visit_stmt","","",7],[11,"visit_foreign_item","","",7],[11,"visit_item","","",7],[11,"visit_mod","","",7],[11,"visit_decl","","",7],[11,"visit_ty","","",7],[11,"visit_generics","","",7],[11,"visit_fn","","",7],[11,"visit_ty_method","","",7],[11,"visit_trait_item","","",7],[11,"visit_struct_field","","",7],[11,"visit_explicit_self","","",7],[11,"visit_path","","",7],[11,"visit_block","","",7],[11,"visit_pat","","",7],[11,"visit_local","","",7],[11,"visit_arm","","",7],[11,"open","rustc_back::archive","Opens an existing static archive",8],[11,"remove_file","","Removes a file from this archive",8],[11,"files","","Lists all files in an archive",8],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",8],[11,"create","","Create a new static archive, ready for adding files.",9],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",9],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",9],[11,"add_file","","Adds an arbitrary file to this archive",9],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",9],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",9],[11,"tr_id","rustc::middle::astencode","Translates an internal id, meaning a node id that is known to refer to some part of the\nitem currently being inlined, such as a local variable or argument.  All naked node-ids\nthat appear in types have this property, since if something might refer to an external item\nwe would use a def-id to allow for the possibility that the item resides in another crate.",10],[11,"tr_def_id","","Translates an EXTERNAL def-id, converting the crate number from the one used in the encoded\ndata to the current crate numbers..  By external, I mean that it be translated to a\nreference to the item in its original crate, as opposed to being translated to a reference\nto the inlined version of the item.  This is typically, but not always, what you want,\nbecause most def-ids refer to external things like types or other fns that may or may not\nbe inlined.  Note that even when the inlined function is referencing itself recursively, we\nwould want `tr_def_id` for that reference--- conceptually the function calls the original,\nnon-inlined version, and trans deals with linking that recursive call to the inlined copy.",10],[11,"tr_intern_def_id","","Translates an INTERNAL def-id, meaning a def-id that is\nknown to refer to some part of the item currently being\ninlined.  In that case, we want to convert the def-id to\nrefer to the current crate and to the new, inlined node-id.",10],[11,"tr_span","","Translates a `Span` from an extern crate to the corresponding `Span`\nwithin the local crate's codemap. `creader::import_codemap()` will\nalready have allocated any additionally needed FileMaps in the local\ncodemap as a side-effect of creating the crate_metadata's\n`codemap_import_info`.",10],[11,"tr_intern","syntax::ast","",11],[11,"tr","","",11],[11,"tr","core::option","",12],[11,"tr","syntax::codemap","",13],[11,"fold_block","rustc::middle::astencode","",14],[11,"tr","rustc::middle::def","",15],[11,"tr","rustc::middle::ty","",16],[11,"tr","","",17],[11,"tr","rustc::middle::region","",18],[11,"tr","","",19],[11,"tr","rustc::middle::ty","",20],[11,"read_freevar_entry","rbml::reader","",21],[11,"read_capture_mode","","",21],[11,"tr","rustc::middle::ty","",22],[11,"tr","","",23],[11,"tr","","",24],[11,"read_method_callee","rbml::reader","",21],[11,"tr","rustc::middle::ty","",25],[11,"read_vec_per_param_space","rbml::reader","",21],[11,"read_vtable_res_with_key","","",21],[11,"read_vtable_res","","",21],[11,"read_vtable_param_res","","",21],[11,"read_vtable_origin","","",21],[11,"ty_str_ctxt","rustc::metadata::encoder","",26],[11,"emit_closure_type","rbml::writer","",27],[11,"emit_method_origin","","",27],[11,"emit_ty","","",27],[11,"emit_tys","","",27],[11,"emit_trait_ref","","",27],[11,"emit_type_param_def","","",27],[11,"emit_predicate","","",27],[11,"emit_type_scheme","","",27],[11,"emit_existential_bounds","","",27],[11,"emit_builtin_bounds","","",27],[11,"emit_substs","","",27],[11,"emit_auto_adjustment","","",27],[11,"emit_autoref","","",27],[11,"emit_auto_deref_ref","","",27],[11,"emit_unsize_kind","","",27],[11,"tag","","",27],[11,"id","","",27],[11,"visit_id","rustc::middle::astencode","",28],[11,"as_int","rbml","",29],[11,"opt_child","","",29],[11,"read_ty_nodcx","rbml::reader","",21],[11,"read_tys_nodcx","","",21],[11,"read_substs_nodcx","","",21],[11,"read_method_origin","","",21],[11,"read_ty","","",21],[11,"read_tys","","",21],[11,"read_trait_ref","","",21],[11,"read_poly_trait_ref","","",21],[11,"read_type_param_def","","",21],[11,"read_predicate","","",21],[11,"read_type_scheme","","",21],[11,"read_existential_bounds","","",21],[11,"read_substs","","",21],[11,"read_auto_adjustment","","",21],[11,"read_auto_deref_ref","","",21],[11,"read_autoref","","",21],[11,"read_unsize_kind","","",21],[11,"read_closure_kind","","",21],[11,"read_closure_ty","","",21],[11,"convert_def_id","","Converts a def-id that appears in a type.  The correct\ntranslation will depend on what kind of def-id this is.\nThis is a subtle point: type definitions are not\ninlined into the current crate, so if the def-id names\na nominal type or type alias, then it should be\ntranslated to refer to the source crate.",21],[11,"graph_id","rustc::middle::cfg::graphviz","",30],[11,"node_id","","",30],[11,"node_label","","",30],[11,"edge_label","","",30],[11,"nodes","","",30],[11,"edges","","",30],[11,"source","","",30],[11,"target","","",30],[11,"eq","rustc::middle::cfg","",31],[11,"ne","","",31],[11,"id","","",31],[11,"new","","",32],[11,"node_is_reachable","","",32],[11,"hash","rustc::middle::check_const","",33],[11,"cmp","","",33],[11,"partial_cmp","","",33],[11,"lt","","",33],[11,"le","","",33],[11,"gt","","",33],[11,"ge","","",33],[11,"clone","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"empty","","Returns an empty set of flags.",33],[11,"all","","Returns the set containing all flags.",33],[11,"bits","","Returns the raw value of the flags currently stored.",33],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33],[11,"is_empty","","Returns `true` if no flags are currently stored.",33],[11,"is_all","","Returns `true` if all flags are currently set.",33],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33],[11,"insert","","Inserts the specified flags in-place.",33],[11,"remove","","Removes the specified flags in-place.",33],[11,"toggle","","Toggles the specified flags in-place.",33],[6,"Output","rustc_lint::lint",""],[11,"bitor","rustc::middle::check_const","Returns the union of the two sets of flags.",33],[6,"Output","rustc_lint::lint",""],[11,"bitxor","rustc::middle::check_const","Returns the left flags, but with all the right flags toggled.",33],[6,"Output","rustc_lint::lint",""],[11,"bitand","rustc::middle::check_const","Returns the intersection between the two sets of flags.",33],[6,"Output","rustc_lint::lint",""],[11,"sub","rustc::middle::check_const","Returns the set difference of the two sets of flags.",33],[6,"Output","rustc_lint::lint",""],[11,"not","rustc::middle::check_const","Returns the complement of this set of flags.",33],[11,"eq","","",34],[11,"ne","","",34],[11,"visit_item","","",35],[11,"visit_fn","","",35],[11,"visit_pat","","",35],[11,"visit_expr","","",35],[11,"consume","","",35],[11,"borrow","","",35],[11,"decl_without_init","","",35],[11,"mutate","","",35],[11,"matched_pat","","",35],[11,"consume_pat","","",35],[11,"visit_item","rustc::middle::check_static_recursion","",36],[11,"visit_item","","",37],[11,"visit_expr","","",37],[11,"eq","rustc::middle::check_loop","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"visit_item","","",39],[11,"visit_expr","","",39],[11,"fmt","rustc::middle::check_match","",40],[11,"from_iter","","",40],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"eq","","",42],[11,"ne","","",42],[11,"clone","","",42],[11,"visit_expr","","",43],[11,"visit_local","","",43],[11,"visit_fn","","",43],[11,"new","","",44],[11,"visit_id","","",45],[11,"fold_pat","","",44],[11,"matched_pat","","",46],[11,"consume","","",46],[11,"consume_pat","","",46],[11,"borrow","","",46],[11,"decl_without_init","","",46],[11,"mutate","","",46],[11,"visit_pat","","",47],[11,"visit_fn","rustc::middle::check_rvalues","",48],[11,"consume","","",49],[11,"matched_pat","","",49],[11,"consume_pat","","",49],[11,"borrow","","",49],[11,"decl_without_init","","",49],[11,"mutate","","",49],[11,"eq","rustc::middle::const_eval","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"clone","","",51],[11,"clone","","",52],[11,"description","","",51],[11,"fmt","rustc::middle::dataflow","",53],[11,"clone","","",54],[11,"pre","","",54],[11,"new","","",54],[11,"add_gen","","Indicates that `id` generates `bit`",54],[11,"add_kill","","Indicates that `id` kills `bit`",54],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",54],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",54],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",54],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",54],[11,"propagate","","Performs the data flow analysis.",54],[11,"join","","",55],[11,"join","","",56],[11,"visit_struct_def","rustc::middle::dead","",57],[11,"visit_expr","","",57],[11,"visit_pat","","",57],[11,"visit_path","","",57],[11,"visit_item","","",57],[11,"visit_item","","",58],[11,"visit_fn","","",58],[11,"visit_item","","",59],[11,"visit_foreign_item","","",59],[11,"visit_fn","","",59],[11,"visit_struct_field","","",59],[11,"visit_trait_item","","",59],[11,"fmt","rustc::middle::def","",15],[11,"hash","","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"fmt","","",60],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",60],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",60],[11,"fmt","","",61],[11,"hash","","",61],[11,"decode","","",61],[11,"encode","","",61],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[11,"map","","",61],[11,"local_node_id","","",15],[11,"def_id","","",15],[11,"variant_def_ids","","",15],[11,"eq","rustc::middle::effect","",62],[11,"ne","","",62],[11,"visit_fn","","",63],[11,"visit_block","","",63],[11,"visit_expr","","",63],[11,"visit_item","rustc::middle::entry","",64],[11,"fmt","rustc::middle::expr_use_visitor","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"fmt","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"fmt","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"fmt","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"fmt","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"fmt","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"new","","",71],[11,"walk_fn","","",71],[11,"consume_expr","","",71],[11,"walk_expr","","",71],[11,"hash","rustc::middle::fast_reject","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"fmt","rustc::middle::graph","",73],[11,"fmt","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"fmt","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"fmt","","",76],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",74],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",75],[11,"new","","",77],[11,"with_capacity","","",77],[11,"all_nodes","","",77],[11,"all_edges","","",77],[11,"next_node_index","","",77],[11,"add_node","","",77],[11,"mut_node_data","","",77],[11,"node_data","","",77],[11,"node","","",77],[11,"next_edge_index","","",77],[11,"add_edge","","",77],[11,"mut_edge_data","","",77],[11,"edge_data","","",77],[11,"edge","","",77],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",77],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",77],[11,"each_node","","Iterates over all edges defined in the graph.",77],[11,"each_edge","","Iterates over all edges defined in the graph",77],[11,"each_outgoing_edge","","Iterates over all outgoing edges from the node `from`",77],[11,"each_incoming_edge","","Iterates over all incoming edges to the node `target`",77],[11,"each_adjacent_edge","","Iterates over all edges adjacent to the node `node`\nin the direction `dir` (either `Outgoing` or `Incoming)",77],[11,"iterate_until_fixed_point","","",77],[11,"depth_traverse","","",77],[6,"Item","rustc_lint::lint",""],[11,"next","rustc::middle::graph","",78],[11,"source","","",73],[11,"target","","",73],[11,"visit_fn","rustc::middle::intrinsicck","",79],[11,"visit_expr","","",79],[11,"repr","rustc::middle::ty","",80],[11,"tag","rustc::middle::infer::bivariate","",81],[11,"fields","","",81],[11,"tys_with_variance","","",81],[11,"regions_with_variance","","",81],[11,"regions","","",81],[11,"mts","","",81],[11,"unsafeties","","",81],[11,"builtin_bounds","","",81],[11,"tys","","",81],[11,"binders","","",81],[11,"combine","alloc::rc","",82],[11,"combine","rustc::middle::ty","",83],[11,"combine","","",84],[11,"combine","","",85],[11,"clone","rustc::middle::infer::combine","",86],[11,"switch_expected","","",86],[11,"instantiate","","",86],[11,"tcx","","",87],[11,"fold_ty","","",87],[11,"fold_region","","",87],[11,"tag","rustc::middle::infer::equate","",88],[11,"fields","","",88],[11,"tys_with_variance","","",88],[11,"regions_with_variance","","",88],[11,"regions","","",88],[11,"mts","","",88],[11,"unsafeties","","",88],[11,"builtin_bounds","","",88],[11,"tys","","",88],[11,"binders","","",88],[11,"report_region_errors","rustc::middle::infer","",89],[11,"process_errors","","",89],[11,"report_type_error","","",89],[11,"report_and_explain_type_error","","",89],[11,"values_str","","Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\nerror.",89],[11,"expected_found_str","","",89],[11,"report_generic_bound_failure","","",89],[11,"report_concrete_failure","","",89],[11,"report_sub_sup_conflict","","",89],[11,"report_sup_sup_conflict","","",89],[11,"report_processed_errors","","",89],[11,"give_suggestion","","",89],[11,"give_expl_lifetime_param","","",89],[11,"report_inference_failure","","",89],[11,"note_region_origin","","",89],[11,"resolve","alloc::rc","",82],[11,"contains_error","","",82],[11,"resolve","rustc::middle::ty","",90],[11,"contains_error","","",90],[11,"tag","rustc::middle::infer::glb","",91],[11,"fields","","",91],[11,"tys_with_variance","","",91],[11,"regions_with_variance","","",91],[11,"mts","","",91],[11,"unsafeties","","",91],[11,"builtin_bounds","","",91],[11,"regions","","",91],[11,"tys","","",91],[11,"binders","","",91],[11,"tainted_regions","rustc::middle::infer","",89],[11,"region_vars_confined_to_snapshot","","Returns the set of region variables that do not affect any\ntypes/regions which existed before `snapshot` was\nstarted. This is used in the sub/lub/glb computations. The\nidea here is that when we are computing lub/glb of two\nregions, we sometimes create intermediate region variables.\nThose region variables may touch some of the skolemized or\nother \"forbidden\" regions we created to replace bound\nregions, but they don't really represent an \"external\"\nconstraint.",89],[11,"relate_bound","rustc::middle::infer::lub","",92],[11,"relate_bound","rustc::middle::infer::glb","",91],[11,"tag","rustc::middle::infer::lub","",92],[11,"fields","","",92],[11,"tys_with_variance","","",92],[11,"regions_with_variance","","",92],[11,"mts","","",92],[11,"unsafeties","","",92],[11,"builtin_bounds","","",92],[11,"regions","","",92],[11,"tys","","",92],[11,"binders","","",92],[11,"fmt","rustc::middle::infer::region_inference::graphviz","",93],[11,"eq","","",93],[11,"ne","","",93],[11,"hash","","",93],[11,"clone","","",93],[11,"fmt","","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[11,"graph_id","","",95],[11,"node_id","","",95],[11,"node_label","","",95],[11,"edge_label","","",95],[11,"nodes","","",95],[11,"edges","","",95],[11,"source","","",95],[11,"target","","",95],[11,"fmt","rustc::middle::infer::region_inference","",96],[11,"hash","","",96],[11,"eq","","",96],[11,"ne","","",96],[11,"clone","","",96],[11,"eq","","",97],[11,"ne","","",97],[11,"fmt","","",97],[11,"clone","","",97],[11,"hash","","",98],[11,"eq","","",98],[11,"ne","","",98],[11,"eq","","",99],[11,"ne","","",99],[11,"eq","","",100],[11,"ne","","",100],[11,"fmt","","",101],[11,"clone","","",101],[11,"fmt","","",102],[11,"clone","","",102],[11,"contains","","",102],[11,"push","","",102],[11,"fmt","","",103],[11,"new","","",104],[11,"start_snapshot","","",104],[11,"commit","","",104],[11,"rollback_to","","",104],[11,"num_vars","","",104],[11,"new_region_var","","",104],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto \"escape\" out into error messages or the code at large.",104],[11,"new_bound","","",104],[11,"add_given","","",104],[11,"make_eqregion","","",104],[11,"make_subregion","","",104],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",104],[11,"lub_regions","","",104],[11,"glb_regions","","",104],[11,"resolve_var","","",104],[11,"combine_vars","","",104],[11,"vars_created_since_snapshot","","",104],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",104],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",104],[11,"fmt","","",105],[11,"eq","","",105],[11,"ne","","",105],[11,"repr","","",96],[11,"repr","","",106],[11,"repr","","",107],[11,"repr","","",108],[11,"repr","","",97],[11,"user_string","","",97],[11,"to_ty","","",97],[11,"new","rustc::middle::infer::resolve","",109],[11,"tcx","","",109],[11,"fold_ty","","",109],[11,"tcx","","",110],[11,"fold_ty","","",110],[11,"fold_region","","",110],[11,"new","rustc::middle::infer::freshen","",111],[11,"tcx","","",111],[11,"fold_region","","",111],[11,"fold_ty","","",111],[11,"tag","rustc::middle::infer::sub","",112],[11,"fields","","",112],[11,"tys_with_variance","","",112],[11,"regions_with_variance","","",112],[11,"regions","","",112],[11,"mts","","",112],[11,"unsafeties","","",112],[11,"builtin_bounds","","",112],[11,"tys","","",112],[11,"binders","","",112],[11,"fmt","rustc::middle::infer::type_variable","",113],[11,"eq","","",113],[11,"ne","","",113],[11,"new","","",114],[11,"var_diverges","","",114],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",114],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",114],[11,"new_var","","",114],[11,"probe","","",114],[11,"replace_if_possible","","",114],[11,"snapshot","","",114],[11,"rollback_to","","",114],[11,"commit","","",114],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",114],[6,"Value","rustc_lint::lint",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::type_variable","",115],[11,"fmt","rustc::middle::infer::unify","",116],[11,"clone","","",116],[11,"eq","","",116],[11,"ne","","",116],[11,"new","","",117],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a \"LIFO\" (stack) order.",117],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",117],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",117],[11,"new_key","","",117],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path\ncompression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure",117],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! Also, we must be in the\nmiddle of a snapshot.",117],[11,"unify","","Either redirects node_a to node_b or vice versa, depending on the relative rank. Returns\nthe new root and rank. You should then update the value of the new root to something\nsuitable.",117],[6,"Value","rustc_lint::lint",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::unify","",118],[11,"simple_vars","rustc::middle::infer","Unifies two simple keys. Because simple keys do not have any subtyping relationships, if\nboth keys have already been associated with a value, then those two values must be the\nsame.",89],[11,"simple_var_t","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",89],[11,"probe_var","","",89],[6,"Value","rustc_lint::lint",""],[11,"index","rustc::middle::ty","",119],[11,"from_index","","",119],[11,"unification_table","","",119],[11,"tag","","",119],[11,"to_type","","",120],[11,"to_type_err","","",120],[6,"Value","rustc_lint::lint",""],[11,"index","rustc::middle::ty","",121],[11,"from_index","","",121],[11,"unification_table","","",121],[11,"tag","","",121],[11,"to_type","syntax::ast","",122],[11,"to_type_err","","",122],[11,"fmt","rustc::middle::infer","",123],[11,"clone","","",123],[11,"fmt","","",124],[11,"clone","","",124],[11,"fmt","","",125],[11,"clone","","",125],[11,"fmt","","",126],[11,"clone","","",126],[11,"fmt","","",127],[11,"clone","","",127],[11,"fmt","","",128],[11,"clone","","",128],[11,"fmt","","",129],[11,"then","core::result","",130],[11,"to_ures","","",130],[11,"compare","","",130],[11,"freshen","rustc::middle::infer","",89],[11,"type_var_diverges","","",89],[11,"freshener","","",89],[11,"type_is_unconstrained_numeric","","",89],[11,"combine_fields","","",89],[11,"equate","","",89],[11,"sub","","",89],[11,"lub","","",89],[11,"commit_unconditionally","","Execute `f` and commit the bindings",89],[11,"commit_if_ok","","Execute `f` and commit the bindings if successful",89],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",89],[11,"try","","Execute `f`, unroll bindings on panic",89],[11,"probe","","Execute `f` then unroll any bindings it creates",89],[11,"add_given","","",89],[11,"sub_types","","",89],[11,"eq_types","","",89],[11,"sub_trait_refs","","",89],[11,"sub_poly_trait_refs","","",89],[11,"skolemize_late_bound_regions","","See `higher_ranked::skolemize_late_bound_regions`",89],[11,"leak_check","","See `higher_ranked::leak_check`",89],[11,"plug_leaks","","See `higher_ranked::plug_leaks`",89],[11,"equality_predicate","","",89],[11,"region_outlives_predicate","","",89],[11,"next_ty_var_id","","",89],[11,"next_ty_var","","",89],[11,"next_diverging_ty_var","","",89],[11,"next_ty_vars","","",89],[11,"next_int_var_id","","",89],[11,"next_float_var_id","","",89],[11,"next_region_var","","",89],[11,"region_vars_for_defs","","",89],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",89],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",89],[11,"fresh_bound_region","","",89],[11,"resolve_regions_and_report_errors","","",89],[11,"ty_to_string","","",89],[11,"tys_to_string","","",89],[11,"trait_ref_to_string","","",89],[11,"shallow_resolve","","",89],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",89],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",89],[11,"type_error_message_str","","",89],[11,"type_error_message_str_with_expected","","",89],[11,"type_error_message","","",89],[11,"report_mismatched_types","","",89],[11,"replace_late_bound_regions_with_fresh_var","","",89],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",89],[11,"can_equate","","",89],[11,"span","","",125],[11,"types","","",125],[11,"dummy","","",125],[11,"repr","","",125],[11,"span","","",123],[11,"repr","","",123],[11,"span","","",126],[11,"repr","","",126],[11,"span","","",128],[11,"repr","","",128],[11,"hash","rustc::middle::lang_items","",131],[11,"eq","","",131],[11,"ne","","",131],[11,"from_i64","","",131],[11,"from_u64","","",131],[11,"new","","",132],[11,"items","","",132],[11,"item_name","","",132],[11,"require","","",132],[11,"from_builtin_kind","","",132],[11,"to_builtin_kind","","",132],[11,"fn_trait_kind","","",132],[11,"send_trait","","",132],[11,"sized_trait","","",132],[11,"copy_trait","","",132],[11,"sync_trait","","",132],[11,"drop_trait","","",132],[11,"add_trait","","",132],[11,"sub_trait","","",132],[11,"mul_trait","","",132],[11,"div_trait","","",132],[11,"rem_trait","","",132],[11,"neg_trait","","",132],[11,"not_trait","","",132],[11,"bitxor_trait","","",132],[11,"bitand_trait","","",132],[11,"bitor_trait","","",132],[11,"shl_trait","","",132],[11,"shr_trait","","",132],[11,"index_trait","","",132],[11,"index_mut_trait","","",132],[11,"range_struct","","",132],[11,"range_from_struct","","",132],[11,"range_to_struct","","",132],[11,"range_full_struct","","",132],[11,"unsafe_cell_type","","",132],[11,"deref_trait","","",132],[11,"deref_mut_trait","","",132],[11,"fn_trait","","",132],[11,"fn_mut_trait","","",132],[11,"fn_once_trait","","",132],[11,"eq_trait","","",132],[11,"ord_trait","","",132],[11,"str_eq_fn","","",132],[11,"panic_fn","","",132],[11,"panic_bounds_check_fn","","",132],[11,"panic_fmt","","",132],[11,"exchange_malloc_fn","","",132],[11,"exchange_free_fn","","",132],[11,"strdup_uniq_fn","","",132],[11,"start_fn","","",132],[11,"ty_desc","","",132],[11,"opaque","","",132],[11,"eh_personality","","",132],[11,"exchange_heap","","",132],[11,"owned_box","","",132],[11,"phantom_fn","","",132],[11,"phantom_data","","",132],[11,"covariant_type","","",132],[11,"contravariant_type","","",132],[11,"invariant_type","","",132],[11,"covariant_lifetime","","",132],[11,"contravariant_lifetime","","",132],[11,"invariant_lifetime","","",132],[11,"no_copy_bound","","",132],[11,"managed_bound","","",132],[11,"non_zero","","",132],[11,"stack_exhausted","","",132],[11,"debug_trait","","",132],[11,"visit_item","","",133],[11,"new","","",133],[11,"collect_item","","",133],[11,"collect_local_language_items","","",133],[11,"collect_external_language_items","","",133],[11,"collect","","",133],[11,"eq","rustc::middle::liveness","",134],[11,"ne","","",134],[11,"eq","","",135],[11,"ne","","",135],[11,"clone","","",135],[11,"fmt","","",136],[11,"eq","","",136],[11,"ne","","",136],[11,"visit_fn","","",137],[11,"visit_local","","",137],[11,"visit_expr","","",137],[11,"visit_arm","","",137],[11,"fmt","","",135],[11,"fmt","","",134],[11,"fmt","","",138],[11,"fmt","","",139],[11,"visit_fn","","",140],[11,"visit_local","","",140],[11,"visit_expr","","",140],[11,"visit_arm","","",140],[11,"clone","","",141],[11,"fmt","rustc::middle::mem_categorization","",142],[11,"eq","","",142],[11,"ne","","",142],[11,"clone","","",142],[11,"fmt","","",143],[11,"eq","","",143],[11,"ne","","",143],[11,"clone","","",143],[11,"fmt","","",144],[11,"hash","","",144],[11,"eq","","",144],[11,"ne","","",144],[11,"clone","","",144],[11,"fmt","","",145],[11,"hash","","",145],[11,"eq","","",145],[11,"ne","","",145],[11,"clone","","",145],[11,"fmt","","",146],[11,"hash","","",146],[11,"eq","","",146],[11,"ne","","",146],[11,"clone","","",146],[11,"fmt","","",147],[11,"hash","","",147],[11,"eq","","",147],[11,"ne","","",147],[11,"clone","","",147],[11,"fmt","","",148],[11,"hash","","",148],[11,"eq","","",148],[11,"ne","","",148],[11,"clone","","",148],[11,"fmt","","",149],[11,"hash","","",149],[11,"eq","","",149],[11,"ne","","",149],[11,"clone","","",149],[11,"fmt","","",150],[11,"eq","","",150],[11,"ne","","",150],[11,"clone","","",150],[11,"fmt","","",151],[11,"eq","","",151],[11,"ne","","",151],[11,"clone","","",151],[11,"id","syntax::ast","",152],[11,"span","","",152],[11,"id","","",153],[11,"span","","",153],[11,"from_mutbl","rustc::middle::mem_categorization","",149],[11,"from_borrow_kind","","",149],[11,"from_pointer_kind","","",149],[11,"inherit","","",149],[11,"is_mutable","","",149],[11,"is_immutable","","",149],[11,"to_user_str","","",149],[11,"new","","",154],[11,"cat_expr","","",154],[11,"cat_expr_autoderefd","","",154],[11,"cat_expr_unadjusted","","",154],[11,"cat_def","","",154],[11,"cat_rvalue_node","","",154],[11,"cat_rvalue","","",154],[11,"cat_field","","",154],[11,"cat_tup_field","","",154],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",154],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",154],[11,"cat_imm_interior","","",154],[11,"cat_downcast","","",154],[11,"cat_pattern","","",154],[11,"guarantor","","Returns `self` after stripping away any owned pointer derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",151],[11,"freely_aliasable","","Returns `Some(_)` if this lvalue represents a freely aliasable pointer type.",151],[11,"upvar","","",151],[11,"descriptive_string","","",151],[11,"repr","","",151],[11,"repr","","",142],[11,"repr","","",144],[11,"repr","","",145],[11,"repr","rustc::middle::ty","",155],[11,"repr","rustc::middle::mem_categorization","",143],[11,"user_string","","",143],[11,"fmt","rustc::middle::privacy","",156],[11,"fmt","","",157],[11,"fmt","","",158],[11,"eq","","",158],[11,"ne","","",158],[11,"or","","",156],[11,"visit_expr","rustc::middle::reachable","",159],[11,"visit_item","","",159],[11,"fmt","rustc::middle::region","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"hash","","",18],[11,"cmp","","",18],[11,"partial_cmp","","",18],[11,"lt","","",18],[11,"le","","",18],[11,"gt","","",18],[11,"ge","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"fmt","","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"hash","","",19],[11,"cmp","","",19],[11,"partial_cmp","","",19],[11,"lt","","",19],[11,"le","","",19],[11,"gt","","",19],[11,"ge","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"new","","",19],[11,"to_code_extent","","",19],[11,"fmt","","",160],[11,"decode","","",160],[11,"encode","","",160],[11,"hash","","",160],[11,"cmp","","",160],[11,"partial_cmp","","",160],[11,"lt","","",160],[11,"le","","",160],[11,"gt","","",160],[11,"ge","","",160],[11,"eq","","",160],[11,"ne","","",160],[11,"clone","","",160],[11,"from_node_id","","Creates a scope that represents the dynamic extent associated\nwith `node_id`.",18],[11,"node_id","","Returns a node id associated with this scope.",18],[11,"map_id","","Maps this scope to a potentially new one according to the\nNodeId transformer `f_id`.",18],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",18],[11,"fmt","","",161],[11,"eq","","",161],[11,"ne","","",161],[11,"fmt","","",162],[11,"eq","","",162],[11,"ne","","",162],[11,"fmt","","",163],[11,"eq","","",163],[11,"ne","","",163],[11,"fmt","","",164],[11,"each_encl_scope","","",165],[11,"each_var_scope","","",165],[11,"each_encl_free_region","","",165],[11,"each_rvalue_scope","","",165],[11,"each_terminating_scope","","",165],[11,"relate_free_regions","","",165],[11,"record_encl_scope","","",165],[11,"record_var_scope","","",165],[11,"record_rvalue_scope","","",165],[11,"mark_as_terminating_scope","","Records that a scope is a TERMINATING SCOPE. Whenever we create automatic temporaries --\ne.g. by an expression like `a().f` -- they will be freed within the innermost terminating\nscope.",165],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",165],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",165],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",165],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",165],[11,"var_region","","Returns the lifetime of the variable `id`.",165],[11,"scopes_intersect","","",165],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",165],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `free_region_map`.  Note that\nit is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n(that is, the user can give two different names to the same lifetime).",165],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",165],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",165],[11,"visit_block","","",166],[11,"visit_item","","",166],[11,"visit_fn","","",166],[11,"visit_arm","","",166],[11,"visit_pat","","",166],[11,"visit_stmt","","",166],[11,"visit_expr","","",166],[11,"visit_local","","",166],[11,"fmt","rustc::middle::resolve_lifetime","",167],[11,"decode","","",167],[11,"encode","","",167],[11,"hash","","",167],[11,"eq","","",167],[11,"ne","","",167],[11,"clone","","",167],[11,"visit_item","","",168],[11,"visit_fn","","",168],[11,"visit_ty","","",168],[11,"visit_ty_method","","",168],[11,"visit_block","","",168],[11,"visit_lifetime_ref","","",168],[11,"visit_generics","","",168],[11,"visit_poly_trait_ref","","",168],[11,"fmt","","",169],[11,"visit_item","rustc::middle::stability","",170],[11,"visit_fn","","",170],[11,"visit_trait_item","","",170],[11,"visit_variant","","",170],[11,"visit_struct_field","","",170],[11,"visit_foreign_item","","",170],[11,"build","","Construct the stability index for a crate being compiled.",171],[11,"new","","",171],[11,"visit_item","","",172],[11,"visit_expr","","",172],[11,"visit_path","","",172],[11,"visit_pat","","",172],[11,"fmt","rustc::middle::subst","",173],[11,"hash","","",173],[11,"eq","","",173],[11,"ne","","",173],[11,"clone","","",173],[11,"fmt","","",174],[11,"hash","","",174],[11,"eq","","",174],[11,"ne","","",174],[11,"clone","","",174],[11,"new","","",173],[11,"new_type","","",173],[11,"new_trait","","",173],[11,"erased","","",173],[11,"empty","","",173],[11,"trans_empty","","",173],[11,"is_noop","","",173],[11,"type_for_def","","",173],[11,"has_regions_escaping_depth","","",173],[11,"self_ty","","",173],[11,"with_self_ty","","",173],[11,"erase_regions","","",173],[11,"regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",173],[11,"mut_regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",173],[11,"with_method","","",173],[11,"is_erased","","",174],[11,"fmt","","",175],[11,"decode","","",175],[11,"encode","","",175],[11,"hash","","",175],[11,"clone","","",175],[11,"eq","","",175],[11,"ne","","",175],[11,"cmp","","",175],[11,"partial_cmp","","",175],[11,"lt","","",175],[11,"le","","",175],[11,"gt","","",175],[11,"ge","","",175],[11,"all","","",175],[11,"to_uint","","",175],[11,"from_uint","","",175],[11,"decode","","",176],[11,"encode","","",176],[11,"hash","","",176],[11,"clone","","",176],[11,"eq","","",176],[11,"ne","","",176],[11,"fmt","","",176],[11,"empty","","",176],[11,"params_from_type","","",176],[11,"new","","`t` is the type space.\n`s` is the self space.\n`a` is the assoc space.\n`f` is the fn space.",176],[11,"push","","Appends `value` to the vector associated with `space`.",176],[11,"extend","","Appends `values` to the vector associated with `space`.",176],[11,"pop","","",176],[11,"truncate","","",176],[11,"replace","","",176],[11,"get_self","","",176],[11,"len","","",176],[11,"is_empty_in","","",176],[11,"get_slice","","",176],[11,"get_mut_slice","","",176],[11,"opt_get","","",176],[11,"get","","",176],[11,"iter","","",176],[11,"into_iter","","",176],[11,"iter_enumerated","","",176],[11,"as_slice","","",176],[11,"into_vec","","",176],[11,"all_vecs","","",176],[11,"all","","",176],[11,"any","","",176],[11,"is_empty","","",176],[11,"map","","",176],[11,"map_enumerated","","",176],[11,"map_move","","",176],[11,"split","","",176],[11,"with_vec","","",176],[11,"clone","","",177],[6,"Item","rustc_lint::lint",""],[11,"next","rustc::middle::subst","",177],[6,"Item","rustc_lint::lint",""],[6,"IntoIter","",""],[11,"into_iter","rustc::middle::subst","",176],[6,"Item","rustc_lint::lint",""],[6,"IntoIter","",""],[11,"tcx","rustc::middle::subst","",178],[11,"enter_region_binder","","",178],[11,"exit_region_binder","","",178],[11,"fold_region","","",178],[11,"fold_ty","","",178],[11,"clone","rustc::middle::traits::fulfill","",179],[11,"new","","",180],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `<SomeType as SomeTrait>::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we'll unify `$0` with\n`projection_ty` again.",180],[11,"register_builtin_bound","","",180],[11,"register_region_obligation","","",180],[11,"register_predicate_obligation","","",180],[11,"region_obligations","","",180],[11,"select_all_or_error","","",180],[11,"select_new_obligations","","Attempts to select obligations that were registered since the call to a selection routine.\nThis is used by the type checker to eagerly attempt to resolve obligations in hopes of\ngaining type information. It'd be equally valid to use `select_where_possible` but it\nresults in `O(n^2)` performance (#18208).",180],[11,"select_where_possible","","",180],[11,"pending_obligations","","",180],[11,"repr","","",179],[11,"clone","rustc::middle::traits::project","",181],[11,"eq","","",182],[11,"ne","","",182],[11,"tcx","","",183],[11,"fold_ty","","",183],[11,"with","","",184],[11,"repr","","",185],[11,"repr","","",182],[11,"fold_with","","",184],[11,"repr","","",184],[11,"fmt","rustc::middle::traits::object_safety","",186],[11,"clone","","",186],[11,"repr","","",187],[11,"clone","rustc::middle::traits::select","",188],[11,"fmt","","",189],[11,"clone","","",190],[11,"fmt","","",190],[11,"eq","","",190],[11,"ne","","",190],[11,"fmt","","",191],[11,"new","","",192],[11,"intercrate","","",192],[11,"infcx","","",192],[11,"tcx","","",192],[11,"param_env","","",192],[11,"closure_typer","","",192],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",192],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",192],[11,"evaluate_impl","","Evaluates whether the impl with id `impl_def_id` could be applied to the self type\n`obligation_self_ty`. This can be used either for trait or inherent impls.",192],[11,"repr","","",190],[11,"new","","",188],[6,"Item","rustc_lint::lint",""],[11,"next","core::option","",12],[11,"repr","rustc::middle::traits::select","",193],[11,"may_apply","","",194],[11,"filter_to_traits","rustc::middle::traits::util","",195],[6,"Item","rustc_lint::lint",""],[11,"next","rustc::middle::traits::util","",195],[6,"Item","rustc_lint::lint",""],[11,"next","rustc::middle::traits::util","",196],[11,"fmt","rustc::middle::traits","",197],[11,"fmt","","",198],[11,"repr","","",199],[11,"repr","","",200],[11,"repr","","",197],[11,"repr","","",201],[11,"repr","","",202],[11,"repr","","",198],[11,"repr","","",203],[11,"repr","","",204],[11,"repr","","",205],[11,"fmt","","",205],[11,"repr","rustc::middle::traits::project","",181],[11,"fmt","","",181],[11,"eq","rustc::middle::traits","",199],[11,"ne","","",199],[11,"clone","","",199],[11,"eq","","",206],[11,"ne","","",206],[11,"clone","","",206],[11,"eq","","",207],[11,"ne","","",207],[11,"clone","","",207],[11,"eq","","",208],[11,"ne","","",208],[11,"clone","","",208],[11,"fmt","","",203],[11,"clone","","",203],[11,"clone","","",205],[11,"clone","","",200],[11,"fmt","","",200],[11,"eq","","",197],[11,"ne","","",197],[11,"clone","","",197],[11,"clone","","",202],[11,"fmt","","",202],[11,"clone","","",201],[11,"fmt","","",201],[11,"clone","","",198],[11,"eq","","",198],[11,"ne","","",198],[11,"new","","",199],[11,"misc","","",199],[11,"with","","",199],[11,"new","","",206],[11,"misc","","",206],[11,"dummy","","",206],[11,"iter_nested","","",200],[11,"map_nested","","",200],[11,"map_move_nested","","",200],[11,"iter_nested","","",197],[11,"map_nested","","",197],[11,"map_move_nested","","",197],[11,"iter_nested","","",202],[11,"map_nested","","",202],[11,"map_move_nested","","",202],[11,"iter_nested","","",201],[11,"map_nested","","",201],[11,"map_move_nested","","",201],[11,"is_overflow","","",204],[11,"hash","rustc::middle::ty","",209],[11,"eq","","",209],[11,"ne","","",209],[11,"clone","","",209],[11,"fmt","","",210],[11,"clone","","",210],[11,"id","","",210],[11,"fmt","","",211],[11,"clone","","",211],[11,"def_id","","",211],[11,"name","","",211],[11,"container","","",211],[11,"as_opt_method","","",211],[11,"fmt","","",212],[11,"clone","","",212],[11,"def_id","","",212],[11,"fmt","","",213],[11,"clone","","",213],[11,"new","","",213],[11,"container_id","","",213],[11,"fmt","","",214],[11,"clone","","",214],[11,"fmt","","",215],[11,"hash","","",215],[11,"eq","","",215],[11,"ne","","",215],[11,"clone","","",215],[11,"fmt","","",216],[11,"clone","","",216],[11,"hash","","",217],[11,"eq","","",217],[11,"ne","","",217],[11,"encode","","",218],[11,"decode","","",218],[11,"eq","","",218],[11,"ne","","",218],[11,"clone","","",218],[11,"fmt","","",219],[11,"encode","","",219],[11,"decode","","",219],[11,"eq","","",219],[11,"ne","","",219],[11,"clone","","",219],[11,"fmt","","",220],[11,"clone","","",220],[11,"fmt","","",221],[11,"eq","","",221],[11,"ne","","",221],[11,"clone","","",221],[11,"fmt","","",222],[11,"clone","","",222],[11,"fmt","","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"clone","","",223],[11,"fmt","","",224],[11,"partial_cmp","","",224],[11,"lt","","",224],[11,"le","","",224],[11,"gt","","",224],[11,"ge","","",224],[11,"eq","","",224],[11,"ne","","",224],[11,"decode","","",224],[11,"encode","","",224],[11,"clone","","",224],[11,"fmt","","",25],[11,"clone","","",25],[11,"fmt","","",225],[11,"clone","","",225],[11,"fmt","","",226],[11,"clone","","",226],[11,"clone","","",227],[11,"fmt","","",228],[11,"hash","","",228],[11,"eq","","",228],[11,"ne","","",228],[11,"clone","","",228],[11,"decode","","",229],[11,"encode","","",229],[11,"fmt","","",229],[11,"hash","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"clone","","",229],[11,"expr","","",228],[11,"autoobject","","",228],[11,"autoderef","","",228],[11,"clone","","",230],[11,"new","","",231],[11,"hash","","",232],[11,"cmp","","",232],[11,"partial_cmp","","",232],[11,"lt","","",232],[11,"le","","",232],[11,"gt","","",232],[11,"ge","","",232],[11,"clone","","",232],[11,"eq","","",232],[11,"ne","","",232],[11,"empty","","Returns an empty set of flags.",232],[11,"all","","Returns the set containing all flags.",232],[11,"bits","","Returns the raw value of the flags currently stored.",232],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",232],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",232],[11,"is_empty","","Returns `true` if no flags are currently stored.",232],[11,"is_all","","Returns `true` if all flags are currently set.",232],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",232],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",232],[11,"insert","","Inserts the specified flags in-place.",232],[11,"remove","","Removes the specified flags in-place.",232],[11,"toggle","","Toggles the specified flags in-place.",232],[6,"Output","rustc_lint::lint",""],[11,"bitor","rustc::middle::ty","Returns the union of the two sets of flags.",232],[6,"Output","rustc_lint::lint",""],[11,"bitxor","rustc::middle::ty","Returns the left flags, but with all the right flags toggled.",232],[6,"Output","rustc_lint::lint",""],[11,"bitand","rustc::middle::ty","Returns the intersection between the two sets of flags.",232],[6,"Output","rustc_lint::lint",""],[11,"sub","rustc::middle::ty","Returns the set difference of the two sets of flags.",232],[6,"Output","rustc_lint::lint",""],[11,"not","rustc::middle::ty","Returns the complement of this set of flags.",232],[11,"print_debug_stats","","",233],[11,"fmt","","",234],[11,"fmt","","",232],[11,"eq","","",234],[11,"hash","","",234],[11,"eq","","",235],[11,"hash","","",235],[11,"borrow","","",235],[11,"fmt","","",236],[11,"hash","","",236],[11,"eq","","",236],[11,"ne","","",236],[11,"clone","","",236],[11,"fmt","","",237],[11,"hash","","",237],[11,"eq","","",237],[11,"ne","","",237],[11,"clone","","",237],[11,"fmt","","",238],[11,"hash","","",238],[11,"eq","","",238],[11,"ne","","",238],[11,"clone","","",238],[11,"diverges","","",238],[11,"unwrap","","",238],[11,"diverges","","",90],[11,"hash","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"clone","","",85],[11,"inputs","","",90],[11,"input","","",90],[11,"output","","",90],[11,"variadic","","",90],[11,"fmt","","",239],[11,"hash","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"clone","","",239],[11,"fmt","","",240],[11,"decode","","",240],[11,"encode","","",240],[11,"hash","","",240],[11,"eq","","",240],[11,"ne","","",240],[11,"clone","","",240],[11,"fmt","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"hash","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",241],[11,"hash","","",241],[11,"eq","","",241],[11,"ne","","",241],[11,"clone","","",241],[11,"decode","","",242],[11,"encode","","",242],[11,"fmt","","",242],[11,"hash","","",242],[11,"eq","","",242],[11,"ne","","",242],[11,"clone","","",242],[11,"fmt","","",24],[11,"decode","","",24],[11,"encode","","",24],[11,"clone","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"fmt","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"clone","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"is_bound","","",16],[11,"escapes_depth","","",16],[11,"fmt","","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"hash","","",17],[11,"cmp","","",17],[11,"partial_cmp","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"fmt","","",20],[11,"decode","","",20],[11,"encode","","",20],[11,"hash","","",20],[11,"cmp","","",20],[11,"partial_cmp","","",20],[11,"lt","","",20],[11,"le","","",20],[11,"gt","","",20],[11,"ge","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"fmt","","",243],[11,"hash","","",243],[11,"eq","","",243],[11,"ne","","",243],[11,"clone","","",243],[11,"fmt","","",244],[11,"hash","","",244],[11,"eq","","",244],[11,"ne","","",244],[11,"clone","","",244],[11,"principal_def_id","","",244],[11,"principal_trait_ref_with_self_ty","","Object types don't have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",244],[11,"projection_bounds_with_self_ty","","",244],[11,"fmt","","",83],[11,"hash","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"clone","","",83],[11,"self_ty","","",90],[11,"def_id","","",90],[11,"substs","","",90],[11,"input_types","","",90],[11,"to_poly_trait_predicate","","",90],[11,"fmt","","",90],[11,"hash","","",90],[11,"eq","","",90],[11,"ne","","",90],[11,"clone","","",90],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a\nrisky thing to do because it's easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",90],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"fmt","","",245],[11,"clone","","",245],[11,"fmt","","",246],[11,"clone","","",246],[11,"fmt","","",247],[11,"clone","","",247],[11,"fmt","","",248],[11,"clone","","",248],[11,"hash","","",248],[11,"eq","","",248],[11,"ne","","",248],[11,"fmt","","",249],[11,"clone","","",249],[11,"hash","","",249],[11,"eq","","",249],[11,"ne","","",249],[11,"fmt","","",250],[11,"hash","","",250],[11,"decode","","",250],[11,"eq","","",250],[11,"ne","","",250],[11,"encode","","",250],[11,"clone","","",250],[11,"to_usize","","",250],[11,"from_usize","","",250],[11,"hash","","",251],[11,"eq","","",251],[11,"ne","","",251],[11,"clone","","",251],[11,"hash","","",119],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"hash","","",121],[11,"eq","","",121],[11,"ne","","",121],[11,"clone","","",121],[11,"hash","","",252],[11,"decode","","",252],[11,"encode","","",252],[11,"eq","","",252],[11,"ne","","",252],[11,"clone","","",252],[11,"hash","","",253],[11,"eq","","",253],[11,"ne","","",253],[11,"clone","","",253],[11,"fmt","","",254],[11,"hash","","",254],[11,"eq","","",254],[11,"ne","","",254],[11,"decode","","",254],[11,"encode","","",254],[11,"clone","","",254],[11,"fmt","","",255],[11,"hash","","",255],[11,"decode","","",255],[11,"encode","","",255],[11,"clone","","",255],[11,"eq","","",255],[11,"ne","","",255],[11,"fmt","","",251],[11,"fmt","","",119],[11,"fmt","","",121],[11,"fmt","","",252],[11,"fmt","","",85],[11,"fmt","","",253],[11,"fmt","","",120],[11,"fmt","","",256],[11,"clone","","",256],[11,"fmt","","",257],[11,"clone","","",257],[11,"fmt","","",258],[11,"clone","","",258],[11,"decode","","",258],[11,"encode","","",258],[11,"to_early_bound_region","","",258],[11,"fmt","","",259],[11,"clone","","",259],[11,"empty","","",259],[11,"is_empty","","",259],[11,"has_type_params","","",259],[11,"has_region_params","","",259],[11,"fmt","","",260],[11,"clone","","",260],[11,"empty","","",260],[11,"instantiate","","",260],[11,"instantiate_supertrait","","",260],[11,"fmt","","",261],[11,"hash","","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"clone","","",261],[11,"subst_supertrait","","Performs a substituion suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",261],[11,"fmt","","",262],[11,"hash","","",262],[11,"eq","","",262],[11,"ne","","",262],[11,"clone","","",262],[11,"def_id","","",262],[11,"input_types","","",262],[11,"self_ty","","",262],[11,"def_id","","",90],[11,"fmt","","",263],[11,"hash","","",263],[11,"eq","","",263],[11,"ne","","",263],[11,"clone","","",263],[11,"fmt","","",264],[11,"hash","","",264],[11,"eq","","",264],[11,"ne","","",264],[11,"clone","","",264],[11,"fmt","","",84],[11,"hash","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"clone","","",84],[11,"item_name","","",90],[11,"sort_key","","",90],[11,"fmt","","",265],[11,"hash","","",265],[11,"eq","","",265],[11,"ne","","",265],[11,"clone","","",265],[11,"sort_key","","",265],[11,"to_poly_trait_ref","alloc::rc","",82],[11,"to_poly_trait_ref","rustc::middle::ty","",90],[11,"to_poly_trait_ref","","",90],[11,"as_predicate","alloc::rc","",82],[11,"as_predicate","rustc::middle::ty","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",261],[11,"has_escaping_regions","","",261],[11,"to_opt_poly_trait_ref","","",261],[11,"fmt","","",266],[11,"clone","","",266],[11,"empty","","",266],[11,"has_escaping_regions","","",266],[11,"is_empty","","",266],[11,"new","","",83],[11,"self_ty","","",83],[11,"input_types","","",83],[11,"clone","","",267],[11,"with_caller_bounds","","",267],[11,"for_item","","",267],[11,"fmt","","",268],[11,"clone","","",268],[11,"clone","","",269],[11,"decode","","",155],[11,"encode","","",155],[11,"fmt","","",155],[11,"eq","","",155],[11,"ne","","",155],[11,"clone","","",155],[11,"trait_did","","",155],[11,"mk_substs","","",233],[11,"mk_bare_fn","","",233],[11,"mk_region","","",233],[11,"closure_kind","","",233],[11,"closure_type","","",233],[11,"type_parameter_def","","",233],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",234],[11,"walk_children","","Iterator that walks types reachable from `self`, in\ndepth-first order. Note that this is a shallow walk. For\nexample:",234],[11,"as_opt_param_ty","","",234],[11,"is_param","","",234],[11,"new","","",239],[11,"for_self","","",239],[11,"for_def","","",239],[11,"to_ty","","",239],[11,"is_self","","",239],[11,"empty","","",269],[11,"is_noop","","",269],[11,"empty","","",248],[11,"clone","","",270],[11,"when","","",270],[11,"intersects","","",270],[11,"owns_managed","","",270],[11,"owns_owned","","",270],[11,"is_sized","","",270],[11,"interior_param","","",270],[11,"interior_unsafe","","",270],[11,"interior_unsized","","",270],[11,"needs_drop","","",270],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",270],[11,"reference","","Includes only those bits that still apply when indirected through a reference (`&`)",270],[11,"managed_pointer","","Includes only those bits that still apply when indirected through a managed pointer (`@`)",270],[11,"unsafe_pointer","","Includes only those bits that still apply when indirected through an unsafe pointer (`*`)",270],[11,"union","","",270],[11,"has_dtor","","",270],[6,"Output","rustc_lint::lint",""],[11,"bitor","rustc::middle::ty","",270],[6,"Output","rustc_lint::lint",""],[11,"bitand","rustc::middle::ty","",270],[6,"Output","rustc_lint::lint",""],[11,"sub","rustc::middle::ty","",270],[11,"fmt","","",270],[11,"fmt","","",271],[11,"eq","","",271],[11,"ne","","",271],[11,"cmp","","",271],[11,"partial_cmp","","",271],[11,"lt","","",271],[11,"le","","",271],[11,"gt","","",271],[11,"ge","","",271],[11,"repr","","",247],[11,"clone","","",272],[11,"from_ast_variant","","Creates a new VariantInfo from the corresponding ast representation.",272],[11,"is_present","","",273],[11,"has_drop_flag","","",273],[11,"clone","","",274],[11,"to_string","","",219],[11,"from_mutbl","","",242],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",242],[11,"to_user_str","","",242],[11,"is_method_call","","",233],[11,"upvar_capture","","",233],[11,"node_ty","","",267],[11,"expr_ty_adjusted","","",267],[11,"node_method_ty","","",267],[11,"node_method_origin","","",267],[11,"adjustments","","",267],[11,"is_method_call","","",267],[11,"temporary_scope","","",267],[11,"upvar_capture","","",267],[11,"type_moves_by_default","","",267],[11,"param_env","","",267],[11,"closure_kind","","",267],[11,"closure_type","","",267],[11,"closure_upvars","","",267],[11,"fmt","","",275],[11,"eq","","",275],[11,"ne","","",275],[11,"clone","","",275],[11,"decode","","",22],[11,"encode","","",22],[11,"clone","","",22],[11,"is_identity","","",220],[11,"is_identity","","",222],[11,"new","","",240],[11,"shifted","","",240],[11,"repr","","",220],[11,"repr","","",221],[11,"repr","","",222],[11,"repr","","",223],[11,"repr","","",244],[11,"repr","","",261],[11,"repr","","",230],[11,"has_regions_escaping_depth","rustc::middle::subst","",173],[11,"has_regions_escaping_depth","","",176],[11,"has_regions_escaping_depth","rustc::middle::ty","",268],[11,"has_regions_escaping_depth","","",16],[11,"has_regions_escaping_depth","","",260],[11,"has_regions_escaping_depth","","",261],[11,"has_regions_escaping_depth","","",83],[11,"has_regions_escaping_depth","rustc::middle::subst","",174],[11,"has_regions_escaping_depth","rustc::middle::ty","",90],[11,"has_regions_escaping_depth","","",263],[11,"has_regions_escaping_depth","","",262],[11,"has_regions_escaping_depth","","",264],[11,"has_regions_escaping_depth","","",84],[11,"has_regions_escaping_depth","","",265],[11,"repr","","",84],[11,"has_projection_types","collections::vec","",276],[11,"has_projection_types","rustc::middle::subst","",176],[11,"has_projection_types","rustc::middle::ty","",237],[11,"has_projection_types","","",274],[11,"has_projection_types","","",266],[11,"has_projection_types","","",261],[11,"has_projection_types","","",262],[11,"has_projection_types","","",263],[11,"has_projection_types","","",16],[11,"has_projection_types","","",264],[11,"has_projection_types","","",84],[11,"has_projection_types","","",265],[11,"has_projection_types","","",83],[11,"has_projection_types","rustc::middle::subst","",173],[11,"has_projection_types","core::option","",12],[11,"has_projection_types","alloc::rc","",82],[11,"has_projection_types","alloc::boxed","",277],[11,"has_projection_types","rustc::middle::ty","",90],[11,"has_projection_types","","",238],[11,"has_projection_types","","",85],[11,"has_projection_types","","",209],[11,"has_projection_types","","",236],[11,"references_error","","",90],[11,"references_error","alloc::rc","",82],[11,"references_error","rustc::middle::ty","",262],[11,"references_error","","",84],[11,"references_error","","",83],[11,"references_error","","",261],[11,"references_error","","",264],[11,"references_error","","",263],[11,"references_error","","",16],[11,"repr","","",237],[11,"repr","","",274],[11,"repr","","",209],[11,"repr","","",267],[11,"repr","","",256],[11,"fold_with","core::option","",12],[11,"fold_with","alloc::rc","",82],[11,"fold_with","alloc::boxed","",277],[11,"fold_with","collections::vec","",276],[11,"fold_with","rustc::middle::ty","",90],[11,"fold_with","syntax::owned_slice","",278],[11,"fold_with","rustc::middle::subst","",176],[11,"fold_with","rustc::middle::ty","",236],[11,"fold_with","","",237],[11,"fold_with","","",215],[11,"fold_with","","",238],[11,"fold_with","","",85],[11,"fold_with","","",83],[11,"fold_with","","",209],[11,"fold_with","","",16],[11,"fold_with","rustc::middle::subst","",173],[11,"fold_with","rustc::middle::ty","",269],[11,"fold_with","","",223],[11,"fold_with","","",25],[11,"fold_with","","",230],[11,"fold_with","collections::enum_set","",279],[11,"fold_with","rustc::middle::ty","",249],[11,"fold_with","","",248],[11,"fold_with","","",257],[11,"fold_with","","",256],[11,"fold_with","","",258],[11,"fold_with","","",259],[11,"fold_with","","",260],[11,"fold_with","","",261],[11,"fold_with","","",84],[11,"fold_with","","",265],[11,"fold_with","","",266],[11,"fold_with","","",221],[11,"fold_with","rustc::middle::traits","",199],[11,"fold_with","","",197],[11,"fold_with","","",202],[11,"fold_with","","",201],[11,"fold_with","","",200],[11,"fold_with","","",198],[11,"fold_with","rustc::middle::ty","",263],[11,"fold_with","","",262],[11,"fold_with","","",264],[11,"fold_with","","",274],[11,"fold_with","","",267],[11,"tcx","rustc::middle::ty_fold","",280],[11,"fold_ty","","",280],[11,"new","","",281],[11,"tcx","","",281],[11,"enter_region_binder","","",281],[11,"exit_region_binder","","",281],[11,"fold_region","","",281],[11,"tcx","","",282],[11,"fold_region","","",282],[11,"new","rustc::middle::ty_walk","",283],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",283],[6,"Item","rustc_lint::lint",""],[11,"next","rustc::middle::ty_walk","",283],[11,"visit_foreign_item","rustc::middle::weak_lang_items","",284],[11,"from_i64","rustc::metadata::common","",285],[11,"from_u64","","",285],[11,"eq","","",285],[11,"ne","","",285],[11,"fmt","","",286],[11,"clone","","",286],[11,"fmt","rustc::metadata::tydecode","",287],[11,"clone","rustc::metadata::encoder","",288],[11,"visit_expr","","",289],[11,"visit_item","","",289],[11,"visit_foreign_item","","",289],[11,"visit_item","","",290],[11,"eq","rustc::metadata::decoder","",291],[11,"ne","","",291],[11,"fmt","","",292],[11,"clone","","",292],[11,"clone","","",293],[11,"visit_item","rustc::metadata::creader","",294],[11,"as_slice","","",295],[11,"new","","",294],[11,"read_crates","","",294],[11,"read_exported_macros","","Read exported macros.",294],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",294],[11,"clone","rustc::metadata::cstore","",296],[11,"eq","","",296],[11,"ne","","",296],[11,"fmt","","",296],[11,"from_i64","","",297],[11,"from_u64","","",297],[11,"eq","","",297],[11,"ne","","",297],[11,"clone","","",297],[11,"clone","","",298],[11,"eq","","",298],[11,"ne","","",298],[11,"new","","",299],[11,"next_crate_num","","",299],[11,"get_crate_data","","",299],[11,"get_crate_hash","","",299],[11,"set_crate_data","","",299],[11,"iter_crate_data","","",299],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",299],[11,"add_used_crate_source","","",299],[11,"get_used_crate_source","","",299],[11,"reset","","",299],[11,"get_used_crates","","",299],[11,"add_used_library","","",299],[11,"get_used_libraries","","",299],[11,"add_used_link_args","","",299],[11,"get_used_link_args","","",299],[11,"add_extern_mod_stmt_cnum","","",299],[11,"find_extern_mod_stmt_cnum","","",299],[11,"data","","",300],[11,"name","","",300],[11,"hash","","",300],[11,"as_slice","","",301],[11,"maybe_load_library_crate","rustc::metadata::loader","",302],[11,"load_library_crate","","",302],[11,"report_load_errs","","",302],[11,"as_slice","","",303],[11,"for_each_lib_search_path","rustc::metadata::filesearch","",304],[11,"get_lib_path","","",304],[11,"search","","",304],[11,"new","","",304],[11,"get_dylib_search_paths","","",304],[11,"get_tools_search_paths","","",304],[11,"visit_item","rustc::metadata::macro_import","",305],[11,"visit_mac","","",305],[11,"eq","rustc::session::config","",306],[11,"ne","","",306],[11,"clone","","",306],[11,"eq","","",307],[11,"ne","","",307],[11,"clone","","",307],[11,"cmp","","",308],[11,"partial_cmp","","",308],[11,"lt","","",308],[11,"le","","",308],[11,"gt","","",308],[11,"ge","","",308],[11,"eq","","",308],[11,"ne","","",308],[11,"clone","","",308],[11,"clone","","",309],[11,"clone","","",310],[11,"eq","","",311],[11,"ne","","",311],[11,"clone","","",311],[11,"filestem","","",312],[11,"clone","","",313],[11,"path","","",313],[11,"temp_path","","",313],[11,"with_extension","","",313],[11,"filestem","","",313],[11,"eq","","",314],[11,"ne","","",314],[11,"fmt","","",315],[11,"hash","","",315],[11,"cmp","","",315],[11,"clone","","",315],[11,"partial_cmp","","",315],[11,"lt","","",315],[11,"le","","",315],[11,"gt","","",315],[11,"ge","","",315],[11,"eq","","",315],[11,"ne","","",315],[11,"clone","","",316],[11,"is_empty","","",316],[11,"clone","","",317],[11,"clone","","",318],[11,"fmt","","",319],[11,"eq","","",319],[11,"ne","","",319],[11,"clone","","",319],[11,"eq","","",320],[11,"ne","","",320],[11,"clone","","",320],[11,"is_stable","","",320],[11,"fmt","","",315],[11,"fmt","rustc::session::search_paths","",321],[11,"clone","","",321],[11,"fmt","","",322],[11,"clone","","",322],[11,"eq","","",322],[11,"ne","","",322],[11,"new","","",321],[11,"add_path","","",321],[11,"iter","","",321],[6,"Item","rustc_lint::lint",""],[11,"next","rustc::session::search_paths","",323],[11,"span_fatal","rustc::session","",324],[11,"span_fatal_with_code","","",324],[11,"fatal","","",324],[11,"span_err","","",324],[11,"span_err_with_code","","",324],[11,"err","","",324],[11,"err_count","","",324],[11,"has_errors","","",324],[11,"abort_if_errors","","",324],[11,"span_warn","","",324],[11,"span_warn_with_code","","",324],[11,"warn","","",324],[11,"opt_span_warn","","",324],[11,"span_note","","",324],[11,"span_end_note","","",324],[11,"span_help","","",324],[11,"fileline_note","","",324],[11,"fileline_help","","",324],[11,"note","","",324],[11,"help","","",324],[11,"opt_span_bug","","",324],[11,"span_bug","","",324],[11,"bug","","",324],[11,"span_unimpl","","",324],[11,"unimpl","","",324],[11,"add_lint","","",324],[11,"next_node_id","","",324],[11,"reserve_node_ids","","",324],[11,"diagnostic","","",324],[11,"codemap","","",324],[11,"impossible_case","","",324],[11,"verbose","","",324],[11,"time_passes","","",324],[11,"count_llvm_insns","","",324],[11,"count_type_sizes","","",324],[11,"time_llvm_passes","","",324],[11,"trans_stats","","",324],[11,"meta_stats","","",324],[11,"asm_comments","","",324],[11,"no_verify","","",324],[11,"borrowck_stats","","",324],[11,"print_llvm_passes","","",324],[11,"lto","","",324],[11,"no_landing_pads","","",324],[11,"unstable_options","","",324],[11,"print_enum_sizes","","",324],[11,"sysroot","","",324],[11,"target_filesearch","","",324],[11,"host_filesearch","","",324],[11,"args","rustc::plugin::registry","Get the plugin's arguments, if any.",325],[11,"register_syntax_extension","","Register a syntax extension of any kind.",325],[11,"register_macro","","Register a macro of the usual kind.",325],[11,"register_lint_pass","","Register a compiler lint pass.",325],[11,"register_lint_group","","Register a lint group.",325],[11,"visit_item","rustc::plugin::build","",326],[11,"fmt","rustc::lint","",0],[11,"clone","","",327],[11,"eq","","",327],[11,"hash","","",327],[11,"of","","Get the `LintId` for a `Lint`.",327],[11,"as_str","","Get the name of the lint.",327],[11,"fmt","","",328],[11,"cmp","","",328],[11,"partial_cmp","","",328],[11,"lt","","",328],[11,"le","","",328],[11,"gt","","",328],[11,"ge","","",328],[11,"eq","","",328],[11,"ne","","",328],[11,"clone","","",328],[11,"as_str","","Convert a level to a lower-case string.",328],[11,"from_str","","Convert a lower-case string to a level.",328],[11,"eq","","",329],[11,"ne","","",329],[11,"clone","","",329],[11,"get_lints","rustc::lint::builtin","",330],[11,"new","rustc::lint::context","",331],[11,"get_lints","","",331],[11,"get_lint_groups","","",331],[11,"register_pass","","",331],[11,"register_group","","",331],[11,"register_renamed","","",331],[11,"process_command_line","","",331],[11,"sess","","Get the overall compiler `Session` object.",332],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",332],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",332],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",332],[11,"visit_item","","",332],[11,"visit_foreign_item","","",332],[11,"visit_pat","","",332],[11,"visit_expr","","",332],[11,"visit_stmt","","",332],[11,"visit_fn","","",332],[11,"visit_ty_method","","",332],[11,"visit_struct_def","","",332],[11,"visit_struct_field","","",332],[11,"visit_variant","","",332],[11,"visit_ty","","",332],[11,"visit_ident","","",332],[11,"visit_mod","","",332],[11,"visit_local","","",332],[11,"visit_block","","",332],[11,"visit_arm","","",332],[11,"visit_decl","","",332],[11,"visit_expr_post","","",332],[11,"visit_generics","","",332],[11,"visit_trait_item","","",332],[11,"visit_opt_lifetime_ref","","",332],[11,"visit_lifetime_ref","","",332],[11,"visit_lifetime_def","","",332],[11,"visit_explicit_self","","",332],[11,"visit_mac","","",332],[11,"visit_path","","",332],[11,"visit_attribute","","",332],[11,"visit_id","","",332],[11,"get_lints","","",333],[11,"check_item","","",333],[11,"fmt","rustc::util::common","",334],[11,"clone","","",334],[11,"drop","","",335],[11,"visit_expr","","",336],[11,"visit_expr","","",337],[11,"repr","core::option","",12],[11,"repr","syntax::ptr","",338],[11,"repr","core::result","",130],[11,"repr","alloc::rc","",82],[11,"repr","alloc::boxed","",277],[11,"repr","syntax::owned_slice","",278],[11,"repr","collections::vec","",276],[11,"user_string","","",276],[11,"repr","rustc::middle::def","",15],[11,"user_string","rustc::middle::ty","",244],[11,"repr","","",257],[11,"repr","","",258],[11,"repr","","",234],[11,"repr","","",215],[11,"repr","rustc::middle::subst","",173],[11,"repr","","",176],[11,"repr","rustc::middle::ty","",269],[11,"repr","rustc::middle::subst","",174],[11,"repr","collections::enum_set","",279],[11,"repr","rustc::middle::ty","",248],[11,"repr","","",83],[11,"repr","","",339],[11,"repr","syntax::ast","",340],[11,"repr","","",152],[11,"repr","","",341],[11,"user_string","","",341],[11,"repr","","",342],[11,"repr","","",343],[11,"repr","","",344],[11,"repr","syntax::codemap","",345],[11,"repr","syntax::ast","",153],[11,"repr","rustc::middle::ty","",20],[11,"repr","","",16],[11,"user_string","","",16],[11,"repr","","",17],[11,"repr","rustc::middle::region","",18],[11,"repr","","",19],[11,"repr","syntax::ast","",11],[11,"repr","rustc::middle::ty","",268],[11,"repr","","",259],[11,"repr","","",260],[11,"repr","","",266],[11,"repr","","",218],[11,"repr","","",219],[11,"repr","","",213],[11,"repr","syntax::ast","",6],[11,"user_string","","",6],[11,"repr","","",5],[11,"repr","","",346],[11,"repr","","",347],[11,"repr","rustc::middle::ty","",236],[11,"repr","","",85],[11,"repr","","",238],[11,"repr","","",227],[11,"repr","","",25],[11,"repr","","",225],[11,"repr","","",226],[11,"repr","","",250],[11,"user_string","","",250],[11,"repr","syntax::codemap","",13],[11,"user_string","alloc::rc","",82],[11,"user_string","rustc::middle::ty","",248],[11,"repr","","",249],[11,"user_string","collections::enum_set","",279],[11,"user_string","rustc::middle::ty","",90],[11,"user_string","","",83],[11,"user_string","syntax::ast","",5],[11,"repr","syntax::abi","",348],[11,"user_string","","",348],[11,"repr","rustc::middle::ty","",241],[11,"repr","syntax::ast","",349],[11,"repr","rustc::middle::ty","",242],[11,"repr","","",23],[11,"repr","","",24],[11,"repr","","",119],[11,"repr","","",121],[11,"repr","","",252],[11,"repr","","",251],[11,"repr","","",120],[11,"repr","syntax::ast","",350],[11,"repr","","",351],[11,"repr","","",122],[11,"repr","rustc::middle::ty","",275],[11,"user_string","","",239],[11,"repr","","",239],[11,"repr","","",90],[11,"repr","std::collections::hash::map","",352],[11,"repr","rustc::middle::ty","",264],[11,"user_string","","",264],[11,"repr","","",263],[11,"user_string","","",263],[11,"repr","","",262],[11,"user_string","","",262],[11,"user_string","","",84],[11,"repr","","",265],[11,"user_string","","",265],[11,"user_string","","",261],[11,"default","rustc::util::nodemap","",353],[11,"write","","",353],[11,"finish","","",353],[11,"new","rustc::util::snapshot_vec","",354],[11,"record","","",354],[11,"push","","",354],[11,"get","","",354],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",354],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",354],[11,"start_snapshot","","",354],[11,"actions_since_snapshot","","",354],[11,"rollback_to","","",354],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",354],[11,"input","rustc_back::sha2","",355],[11,"reset","","",355],[11,"zero_until","","",355],[11,"next","","",355],[11,"full_buffer","","",355],[11,"position","","",355],[11,"remaining","","",355],[11,"size","","",355],[11,"new","","Construct a new instance of a SHA-256 digest.",356],[11,"input","","",356],[11,"result","","",356],[11,"reset","","",356],[11,"output_bits","","",356],[11,"open","rustc_llvm::archive_ro","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",357],[11,"read","","Reads a file in the archive",357],[11,"drop","","",357],[11,"describe","rustc_llvm::diagnostic","",358],[11,"unpack","","",359],[11,"eq","rustc_llvm","",360],[11,"ne","","",360],[11,"fmt","","",361],[11,"hash","","",362],[11,"cmp","","",362],[11,"partial_cmp","","",362],[11,"lt","","",362],[11,"le","","",362],[11,"gt","","",362],[11,"ge","","",362],[11,"clone","","",362],[11,"eq","","",362],[11,"ne","","",362],[11,"empty","","Returns an empty set of flags.",362],[11,"all","","Returns the set containing all flags.",362],[11,"bits","","Returns the raw value of the flags currently stored.",362],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",362],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",362],[11,"is_empty","","Returns `true` if no flags are currently stored.",362],[11,"is_all","","Returns `true` if all flags are currently set.",362],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",362],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",362],[11,"insert","","Inserts the specified flags in-place.",362],[11,"remove","","Removes the specified flags in-place.",362],[11,"toggle","","Toggles the specified flags in-place.",362],[6,"Output","rustc_lint::lint",""],[11,"bitor","rustc_llvm","Returns the union of the two sets of flags.",362],[6,"Output","rustc_lint::lint",""],[11,"bitxor","rustc_llvm","Returns the left flags, but with all the right flags toggled.",362],[6,"Output","rustc_lint::lint",""],[11,"bitand","rustc_llvm","Returns the intersection between the two sets of flags.",362],[6,"Output","rustc_lint::lint",""],[11,"sub","rustc_llvm","Returns the set difference of the two sets of flags.",362],[6,"Output","rustc_lint::lint",""],[11,"not","rustc_llvm","Returns the complement of this set of flags.",362],[11,"apply_llfn","","",362],[11,"apply_callsite","","",362],[11,"apply_llfn","","",363],[11,"apply_callsite","","",363],[11,"apply_llfn","","",364],[11,"apply_callsite","","",364],[11,"new","","",365],[11,"arg","","",365],[11,"ret","","",365],[11,"apply_llfn","","",365],[11,"apply_callsite","","",365],[11,"fmt","","",366],[11,"eq","","",366],[11,"ne","","",366],[11,"clone","","",367],[11,"eq","","",367],[11,"ne","","",367],[11,"eq","","",368],[11,"ne","","",368],[11,"drop","","",369],[11,"new","","",370],[11,"drop","","",370],[11,"drop","","",371],[3,"Lint","rustc_lint::lint","Specification of a single lint."],[12,"name","","A string identifier for the lint.",0],[12,"default_level","","Default level for the lint.",0],[12,"desc","","Description of the lint or the issue it detects.",0],[6,"LintArray","",""],[8,"LintPass","","Trait for types providing lint checks."],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",372],[10,"check_crate","","",372],[10,"check_ident","","",372],[10,"check_mod","","",372],[10,"check_foreign_item","","",372],[10,"check_item","","",372],[10,"check_local","","",372],[10,"check_block","","",372],[10,"check_stmt","","",372],[10,"check_arm","","",372],[10,"check_pat","","",372],[10,"check_decl","","",372],[10,"check_expr","","",372],[10,"check_expr_post","","",372],[10,"check_ty","","",372],[10,"check_generics","","",372],[10,"check_fn","","",372],[10,"check_ty_method","","",372],[10,"check_trait_item","","",372],[10,"check_struct_def","","",372],[10,"check_struct_def_post","","",372],[10,"check_struct_field","","",372],[10,"check_variant","","",372],[10,"check_variant_post","","",372],[10,"check_opt_lifetime_ref","","",372],[10,"check_lifetime_ref","","",372],[10,"check_lifetime_def","","",372],[10,"check_explicit_self","","",372],[10,"check_mac","","",372],[10,"check_path","","",372],[10,"check_attribute","","",372],[10,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",372],[10,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",372],[6,"LintPassObject","",""],[3,"LintId","","Identifies a lint known to the compiler."],[4,"Level","","Setting for how to handle a lint."],[13,"Allow","","",328],[13,"Warn","","",328],[13,"Deny","","",328],[13,"Forbid","","",328],[4,"LintSource","","How a lint level was set."],[13,"Default","","Lint is at the default level as declared\nin rustc or a plugin.",329],[13,"Node","","Lint level was set by an attribute.",329],[13,"CommandLine","","Lint level was set by a command-line flag.",329],[13,"ReleaseChannel","","Lint level was set by the release channel.",329],[6,"LevelSource","",""],[0,"builtin","","Some lints that are built in to the compiler."],[7,"UNUSED_IMPORTS","rustc_lint::lint::builtin",""],[7,"UNUSED_EXTERN_CRATES","",""],[7,"UNUSED_QUALIFICATIONS","",""],[7,"UNKNOWN_LINTS","",""],[7,"UNUSED_VARIABLES","",""],[7,"UNUSED_ASSIGNMENTS","",""],[7,"DEAD_CODE","",""],[7,"UNREACHABLE_CODE","",""],[7,"WARNINGS","",""],[7,"UNUSED_FEATURES","",""],[7,"STABLE_FEATURES","",""],[7,"UNKNOWN_CRATE_TYPES","",""],[7,"VARIANT_SIZE_DIFFERENCES","",""],[7,"FAT_PTR_TRANSMUTES","",""],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s\nwhich are used by other parts of the compiler."],[5,"check_crate","rustc_lint::lint","Perform lint checking on a crate."],[3,"Context","","Context for lint checking."],[12,"tcx","","Type context we're checking in.",332],[12,"krate","","The crate being checked.",332],[12,"exported_items","","Items exported from the crate being checked.",332],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint\nattributes. Writing this as an iterator is an enormous mess."],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all)\naccording to `level`."],[3,"GatherNodeLevels","",""],[3,"LintStore","","Information about the registered lints."],[0,"metadata","rustc_lint",""],[0,"common","rustc_lint::metadata",""],[17,"tag_items","rustc_lint::metadata::common",""],[17,"tag_paths_data_name","",""],[17,"tag_def_id","",""],[17,"tag_items_data","",""],[17,"tag_items_data_item","",""],[17,"tag_items_data_item_family","",""],[17,"tag_items_data_item_type","",""],[17,"tag_items_data_item_symbol","",""],[17,"tag_items_data_item_variant","",""],[17,"tag_items_data_parent_item","",""],[17,"tag_items_data_item_is_tuple_struct_ctor","",""],[17,"tag_index","",""],[17,"tag_index_buckets","",""],[17,"tag_index_buckets_bucket","",""],[17,"tag_index_buckets_bucket_elt","",""],[17,"tag_index_table","",""],[17,"tag_meta_item_name_value","",""],[17,"tag_meta_item_name","",""],[17,"tag_meta_item_value","",""],[17,"tag_attributes","",""],[17,"tag_attribute","",""],[17,"tag_meta_item_word","",""],[17,"tag_meta_item_list","",""],[17,"tag_crate_deps","",""],[17,"tag_crate_dep","",""],[17,"tag_crate_hash","",""],[17,"tag_crate_crate_name","",""],[17,"tag_crate_dep_crate_name","",""],[17,"tag_crate_dep_hash","",""],[17,"tag_mod_impl","",""],[17,"tag_item_trait_item","",""],[17,"tag_item_trait_ref","",""],[17,"tag_disr_val","",""],[17,"tag_path","",""],[17,"tag_path_len","",""],[17,"tag_path_elem_mod","",""],[17,"tag_path_elem_name","",""],[17,"tag_item_field","",""],[17,"tag_item_field_origin","",""],[17,"tag_item_variances","",""],[17,"tag_item_impl_item","",""],[17,"tag_item_trait_method_explicit_self","",""],[17,"tag_items_data_item_reexport","",""],[17,"tag_items_data_item_reexport_def_id","",""],[17,"tag_items_data_item_reexport_name","",""],[4,"astencode_tag","",""],[13,"tag_ast","","",285],[13,"tag_tree","","",285],[13,"tag_id_range","","",285],[13,"tag_table","","",285],[13,"tag_table_def","","",285],[13,"tag_table_node_type","","",285],[13,"tag_table_item_subst","","",285],[13,"tag_table_freevars","","",285],[13,"tag_table_tcache","","",285],[13,"tag_table_param_defs","","",285],[13,"tag_table_mutbl","","",285],[13,"tag_table_last_use","","",285],[13,"tag_table_spill","","",285],[13,"tag_table_method_map","","",285],[13,"tag_table_vtable_map","","",285],[13,"tag_table_adjustments","","",285],[13,"tag_table_moves_map","","",285],[13,"tag_table_capture_map","","",285],[13,"tag_table_closure_tys","","",285],[13,"tag_table_closure_kinds","","",285],[13,"tag_table_upvar_capture_map","","",285],[13,"tag_table_capture_modes","","",285],[13,"tag_table_object_cast_map","","",285],[13,"tag_table_const_qualif","","",285],[17,"tag_item_trait_item_sort","",""],[17,"tag_item_trait_parent_sort","",""],[17,"tag_item_impl_type_basename","",""],[17,"tag_crate_triple","",""],[17,"tag_dylib_dependency_formats","",""],[17,"tag_lang_items","",""],[17,"tag_lang_items_item","",""],[17,"tag_lang_items_item_id","",""],[17,"tag_lang_items_item_node_id","",""],[17,"tag_lang_items_missing","",""],[17,"tag_item_unnamed_field","",""],[17,"tag_items_data_item_visibility","",""],[17,"tag_item_method_tps","",""],[17,"tag_item_method_fty","",""],[17,"tag_mod_child","",""],[17,"tag_misc_info","",""],[17,"tag_misc_info_crate_items","",""],[17,"tag_item_method_provided_source","",""],[17,"tag_item_impl_vtables","",""],[17,"tag_impls","",""],[17,"tag_impls_impl","",""],[17,"tag_items_data_item_inherent_impl","",""],[17,"tag_items_data_item_extension_impl","",""],[17,"tag_native_libraries","",""],[17,"tag_native_libraries_lib","",""],[17,"tag_native_libraries_name","",""],[17,"tag_native_libraries_kind","",""],[17,"tag_plugin_registrar_fn","",""],[17,"tag_method_argument_names","",""],[17,"tag_method_argument_name","",""],[17,"tag_reachable_extern_fns","",""],[17,"tag_reachable_extern_fn_id","",""],[17,"tag_items_data_item_stability","",""],[17,"tag_items_data_item_repr","",""],[3,"LinkMeta","",""],[12,"crate_name","","",286],[12,"crate_hash","","",286],[17,"tag_struct_fields","",""],[17,"tag_struct_field","",""],[17,"tag_struct_field_id","",""],[17,"tag_attribute_is_sugared_doc","",""],[17,"tag_items_data_region","",""],[17,"tag_region_param_def","",""],[17,"tag_region_param_def_ident","",""],[17,"tag_region_param_def_def_id","",""],[17,"tag_region_param_def_space","",""],[17,"tag_region_param_def_index","",""],[17,"tag_type_param_def","",""],[17,"tag_item_generics","",""],[17,"tag_method_ty_generics","",""],[17,"tag_predicate","",""],[17,"tag_predicate_space","",""],[17,"tag_predicate_data","",""],[17,"tag_unsafety","",""],[17,"tag_associated_type_names","",""],[17,"tag_associated_type_name","",""],[17,"tag_polarity","",""],[17,"tag_macro_defs","",""],[17,"tag_macro_def","",""],[17,"tag_macro_def_body","",""],[17,"tag_paren_sugar","",""],[17,"tag_codemap","",""],[17,"tag_codemap_filemap","",""],[17,"tag_item_super_predicates","",""],[17,"tag_defaulted_trait","",""],[0,"tyencode","rustc_lint::metadata",""],[3,"ctxt","rustc_lint::metadata::tyencode",""],[12,"diag","","",373],[12,"ds","","",373],[12,"tcx","","",373],[12,"abbrevs","","",373],[3,"ty_abbrev","",""],[6,"abbrev_map","",""],[5,"enc_ty","",""],[5,"enc_substs","",""],[5,"enc_region","",""],[5,"enc_trait_ref","",""],[5,"enc_bare_fn_ty","",""],[5,"enc_closure_ty","",""],[5,"enc_builtin_bounds","",""],[5,"enc_existential_bounds","",""],[5,"enc_bounds","",""],[5,"enc_region_bounds","",""],[5,"enc_type_param_def","",""],[5,"enc_predicate","",""],[0,"tydecode","rustc_lint::metadata",""],[4,"DefIdSource","rustc_lint::metadata::tydecode",""],[13,"NominalType","","",287],[13,"TypeWithId","","",287],[13,"TypeParameter","","",287],[13,"RegionParameter","","",287],[13,"ClosureSource","","",287],[3,"PState","",""],[5,"parse_ident","",""],[5,"parse_name","",""],[5,"parse_state_from_data","",""],[5,"parse_ty_closure_data","",""],[5,"parse_ty_data","",""],[5,"parse_region_data","",""],[5,"parse_bare_fn_ty_data","",""],[5,"parse_trait_ref_data","",""],[5,"parse_substs_data","",""],[5,"parse_bounds_data","",""],[5,"parse_existential_bounds_data","",""],[5,"parse_builtin_bounds_data","",""],[5,"parse_def_id","",""],[5,"parse_predicate_data","",""],[5,"parse_predicate","",""],[5,"parse_type_param_def_data","",""],[0,"encoder","rustc_lint::metadata",""],[4,"InlinedItemRef","rustc_lint::metadata::encoder","A borrowed version of `ast::InlinedItem`."],[13,"IIItemRef","","",374],[13,"IITraitItemRef","","",374],[13,"IIImplItemRef","","",374],[13,"IIForeignRef","","",374],[6,"EncodeInlinedItem","",""],[3,"EncodeParams","",""],[12,"diag","","",375],[12,"tcx","","",375],[12,"reexports","","",375],[12,"item_symbols","","",375],[12,"link_meta","","",375],[12,"cstore","","",375],[12,"encode_inlined_item","","",375],[12,"reachable","","",375],[3,"EncodeContext","",""],[12,"diag","","",26],[12,"tcx","","",26],[12,"reexports","","",26],[12,"item_symbols","","",26],[12,"link_meta","","",26],[12,"cstore","","",26],[12,"encode_inlined_item","","",26],[12,"type_abbrevs","","",26],[12,"reachable","","",26],[5,"encode_def_id","",""],[5,"def_to_string","",""],[5,"write_closure_type","",""],[5,"write_type","",""],[5,"write_trait_ref","",""],[5,"write_region","",""],[17,"metadata_encoding_version","",""],[5,"encode_metadata","",""],[5,"encoded_ty","",""],[0,"decoder","rustc_lint::metadata",""],[6,"Cmd","rustc_lint::metadata::decoder",""],[5,"maybe_find_item","",""],[5,"item_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_type","",""],[5,"get_stability","",""],[5,"get_repr_attrs","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_symbol","",""],[4,"DefLike","",""],[13,"DlDef","","",292],[13,"DlImpl","","",292],[13,"DlField","","",292],[5,"each_lang_item","","Iterates over the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over all the top-level crate items."],[5,"get_item_path","",""],[6,"DecodeInlinedItem","",""],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns the def IDs of all the items in the given implementation."],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_impl_or_trait_item","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_tuple_struct_definition_if_ctor","","If node_id is the constructor of a tuple struct, retrieve the NodeId of\nthe actual type definition, otherwise, return None"],[5,"get_item_attrs","",""],[5,"get_struct_field_attrs","",""],[5,"get_struct_fields","",""],[5,"get_crate_attributes","",""],[3,"CrateDep","",""],[12,"cnum","","",293],[12,"name","","",293],[12,"hash","","",293],[5,"get_crate_deps","",""],[5,"maybe_get_crate_hash","",""],[5,"get_crate_hash","",""],[5,"maybe_get_crate_name","",""],[5,"get_crate_triple","",""],[5,"get_crate_name","",""],[5,"list_crate_metadata","",""],[5,"translate_def_id","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","",""],[5,"get_native_libraries","",""],[5,"get_plugin_registrar_fn","",""],[5,"each_exported_macro","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[5,"get_imported_filemaps","",""],[0,"creader","rustc_lint::metadata","Validates all used crates and extern libraries and loads their metadata"],[3,"CrateReader","rustc_lint::metadata::creader",""],[5,"validate_crate_name","",""],[0,"cstore","rustc_lint::metadata",""],[6,"cnum_map","rustc_lint::metadata::cstore",""],[4,"MetadataBlob","",""],[13,"MetadataVec","","",301],[13,"MetadataArchive","","",301],[3,"ImportedFileMap","","Holds information about a codemap::FileMap imported from another crate.\nSee creader::import_codemap() for more information."],[12,"original_start_pos","","This FileMap's byte-offset within the codemap of its original crate",376],[12,"original_end_pos","","The end of this FileMap within the codemap of its original crate",376],[12,"translated_filemap","","The imported FileMap's representation within the local codemap",376],[3,"crate_metadata","",""],[12,"name","","",300],[12,"data","","",300],[12,"cnum_map","","",300],[12,"cnum","","",300],[12,"codemap_import_info","","",300],[12,"span","","",300],[4,"LinkagePreference","",""],[13,"RequireDynamic","","",296],[13,"RequireStatic","","",296],[4,"NativeLibraryKind","",""],[13,"NativeStatic","","",297],[13,"NativeFramework","","",297],[13,"NativeUnknown","","",297],[3,"CrateSource","",""],[12,"dylib","","",298],[12,"rlib","","",298],[12,"cnum","","",298],[3,"CStore","",""],[12,"intr","","",299],[0,"csearch","rustc_lint::metadata",""],[3,"MethodInfo","rustc_lint::metadata::csearch",""],[12,"name","","",377],[12,"def_id","","",377],[12,"vis","","",377],[5,"get_symbol","",""],[5,"each_lang_item","","Iterates over all the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over each top-level crate item."],[5,"get_item_path","",""],[4,"FoundAst","",""],[13,"Found","","",378],[13,"FoundParent","","",378],[13,"NotFound","","",378],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns information about the given implementation."],[5,"get_impl_or_trait_item","",""],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_item_attrs","",""],[5,"get_struct_fields","",""],[5,"get_struct_field_attrs","",""],[5,"get_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_field_type","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_native_libraries","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), returns the ID of\nthe trait that the method belongs to. Otherwise, returns `None`."],[5,"get_tuple_struct_definition_if_ctor","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"get_stability","",""],[5,"is_staged_api","",""],[5,"get_repr_attrs","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[0,"loader","rustc_lint::metadata","Finds crate binaries and loads their metadata"],[3,"CrateMismatch","rustc_lint::metadata::loader",""],[3,"Context","",""],[12,"sess","","",302],[12,"span","","",302],[12,"ident","","",302],[12,"crate_name","","",302],[12,"hash","","",302],[12,"target","","",302],[12,"triple","","",302],[12,"filesearch","","",302],[12,"root","","",302],[12,"rejected_via_hash","","",302],[12,"rejected_via_triple","","",302],[12,"rejected_via_kind","","",302],[12,"should_match_name","","",302],[3,"Library","",""],[12,"dylib","","",379],[12,"rlib","","",379],[12,"metadata","","",379],[3,"ArchiveMetadata","",""],[3,"CratePaths","",""],[12,"ident","","",380],[12,"dylib","","",380],[12,"rlib","","",380],[5,"note_crate_name","",""],[5,"meta_section_name","",""],[5,"read_meta_section_name","",""],[5,"list_file_metadata","",""],[0,"filesearch","rustc_lint::metadata",""],[4,"FileMatch","rustc_lint::metadata::filesearch",""],[13,"FileMatches","","",381],[13,"FileDoesntMatch","","",381],[3,"FileSearch","",""],[12,"sysroot","","",304],[12,"search_paths","","",304],[12,"triple","","",304],[12,"kind","","",304],[5,"relative_target_lib_path","",""],[5,"get_or_default_sysroot","",""],[5,"get_rust_path","","Returns RUST_PATH as a string, without default paths added"],[5,"rust_path","","Returns the value of RUST_PATH, as a list\nof Paths. Includes default entries for, if they exist:\n$HOME/.rust\nDIR/.rust for any DIR that's the current working directory\nor an ancestor of it"],[5,"rustlibdir","",""],[0,"macro_import","rustc_lint::metadata","Used by `rustc` when loading a crate with exported macros."],[5,"read_macro_defs","rustc_lint::metadata::macro_import","Read exported macros."],[6,"MacroSelection","",""],[0,"middle","rustc_lint",""],[0,"astconv_util","rustc_lint::middle","This module contains a simple utility routine\nused by both `typeck` and `const_eval`.\nAlmost certainly this could (and should) be refactored out of existence."],[17,"NO_REGIONS","rustc_lint::middle::astconv_util",""],[17,"NO_TPS","",""],[5,"check_path_args","",""],[5,"prim_ty_to_ty","",""],[5,"ast_ty_to_prim_ty","",""],[0,"astencode","rustc_lint::middle",""],[5,"encode_inlined_item","rustc_lint::middle::astencode",""],[5,"decode_inlined_item","","Decodes an item from its AST in the cdata's metadata and adds it to the\nast-map."],[5,"encode_closure_kind","",""],[8,"vtable_decoder_helpers","",""],[10,"read_vec_per_param_space","","",382],[10,"read_vtable_res_with_key","","",382],[10,"read_vtable_res","","",382],[10,"read_vtable_param_res","","",382],[10,"read_vtable_origin","","",382],[0,"cfg","rustc_lint::middle","Module that constructs a control-flow graph representing an item.\nUses `Graph` as the underlying representation."],[0,"graphviz","rustc_lint::middle::cfg",""],[6,"Node","rustc_lint::middle::cfg::graphviz",""],[6,"Edge","",""],[3,"LabelledCFG","",""],[12,"ast_map","","",30],[12,"cfg","","",30],[12,"name","","",30],[12,"labelled_edges","","`labelled_edges` controls whether we emit labels on the edges",30],[3,"CFG","rustc_lint::middle::cfg",""],[12,"graph","","",32],[12,"entry","","",32],[12,"exit","","",32],[4,"CFGNodeData","",""],[13,"AST","","",31],[13,"Entry","","",31],[13,"Exit","","",31],[13,"Dummy","","",31],[13,"Unreachable","","",31],[3,"CFGEdgeData","",""],[12,"exiting_scopes","","",383],[6,"CFGIndex","",""],[6,"CFGGraph","",""],[6,"CFGNode","",""],[6,"CFGEdge","",""],[0,"check_const","rustc_lint::middle",""],[3,"ConstQualif","rustc_lint::middle::check_const",""],[17,"PURE_CONST","",""],[17,"MUTABLE_MEM","",""],[17,"NEEDS_DROP","",""],[17,"PREFER_IN_PLACE","",""],[17,"NON_ZERO_SIZED","",""],[17,"HAS_STATIC_BORROWS","",""],[17,"NOT_CONST","",""],[17,"NON_STATIC_BORROWS","",""],[5,"check_crate","",""],[0,"check_static_recursion","rustc_lint::middle",""],[5,"check_crate","rustc_lint::middle::check_static_recursion",""],[5,"check_item_recursion","",""],[0,"check_loop","rustc_lint::middle",""],[5,"check_crate","rustc_lint::middle::check_loop",""],[0,"check_match","rustc_lint::middle",""],[17,"DUMMY_WILD_PAT","rustc_lint::middle::check_match",""],[3,"MatchCheckCtxt","",""],[12,"tcx","","",43],[12,"param_env","","",43],[4,"Constructor","",""],[13,"Single","","The constructor of all patterns that don't vary by constructor,\ne.g. struct patterns and fixed-length arrays.",41],[13,"Variant","","Enum variants.",41],[13,"ConstantValue","","Literal values.",41],[13,"ConstantRange","","Ranges of literal values (2..5).",41],[13,"Slice","","Array patterns of length n.",41],[13,"SliceWithSubslice","","Array patterns with a subslice.",41],[5,"check_crate","",""],[3,"StaticInliner","",""],[12,"tcx","","",44],[12,"failed","","",44],[12,"renaming_map","","",44],[5,"constructor_arity","","This computes the arity of a constructor. The arity of a constructor\nis how many subpattern patterns of that constructor should be expanded to."],[5,"specialize","","This is the main specialization step. It expands the first pattern in the given row\ninto `arity` patterns based on the constructor. For most patterns, the step is trivial,\nfor instance tuple patterns are flattened and box patterns expand into their inner pattern."],[0,"check_rvalues","rustc_lint::middle",""],[5,"check_crate","rustc_lint::middle::check_rvalues",""],[0,"const_eval","rustc_lint::middle",""],[5,"lookup_const_by_id","rustc_lint::middle::const_eval",""],[4,"const_val","",""],[13,"const_float","","",50],[13,"const_int","","",50],[13,"const_uint","","",50],[13,"const_str","","",50],[13,"const_binary","","",50],[13,"const_bool","","",50],[5,"const_expr_to_pat","",""],[5,"eval_const_expr","",""],[3,"ConstEvalErr","",""],[12,"span","","",51],[12,"kind","","",51],[4,"ErrKind","",""],[13,"CannotCast","","",52],[13,"CannotCastTo","","",52],[13,"InvalidOpForBools","","",52],[13,"InvalidOpForFloats","","",52],[13,"InvalidOpForIntUint","","",52],[13,"InvalidOpForUintInt","","",52],[13,"NegateOnString","","",52],[13,"NegateOnBoolean","","",52],[13,"NegateOnBinary","","",52],[13,"NotOnFloat","","",52],[13,"NotOnString","","",52],[13,"NotOnBinary","","",52],[13,"AddiWithOverflow","","",52],[13,"SubiWithOverflow","","",52],[13,"MuliWithOverflow","","",52],[13,"AdduWithOverflow","","",52],[13,"SubuWithOverflow","","",52],[13,"MuluWithOverflow","","",52],[13,"DivideByZero","","",52],[13,"DivideWithOverflow","","",52],[13,"ModuloByZero","","",52],[13,"ModuloWithOverflow","","",52],[13,"MissingStructField","","",52],[13,"NonConstPath","","",52],[13,"NonConstStruct","","",52],[13,"TupleIndexOutOfBounds","","",52],[13,"MiscBinaryOp","","",52],[13,"MiscCatchAll","","",52],[5,"eval_const_expr_partial","",""],[5,"compare_const_vals","",""],[5,"compare_lit_exprs","",""],[0,"dataflow","rustc_lint::middle","A module for propagating forward dataflow information. The analysis\nassumes that the items to be propagated can be represented as bits\nand thus uses bitvectors. Your job is simply to specify the so-called\nGEN and KILL bits for each expression."],[4,"EntryOrExit","rustc_lint::middle::dataflow",""],[13,"Entry","","",53],[13,"Exit","","",53],[3,"DataFlowContext","",""],[8,"BitwiseOperator","",""],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",384],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used."],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",385],[0,"dead","rustc_lint::middle",""],[5,"check_crate","rustc_lint::middle::dead",""],[0,"def","rustc_lint::middle",""],[4,"Def","rustc_lint::middle::def",""],[13,"DefFn","","",15],[13,"DefSelfTy","","",15],[13,"DefMod","","",15],[13,"DefForeignMod","","",15],[13,"DefStatic","","",15],[13,"DefConst","","",15],[13,"DefLocal","","",15],[13,"DefVariant","","",15],[13,"DefTy","","",15],[13,"DefAssociatedTy","","",15],[13,"DefTrait","","",15],[13,"DefPrimTy","","",15],[13,"DefTyParam","","",15],[13,"DefUse","","",15],[13,"DefUpvar","","",15],[13,"DefStruct","","Note that if it's a tuple struct's definition, the node id of the ast::DefId\nmay either refer to the item definition's id or the StructDef.ctor_id.",15],[13,"DefRegion","","",15],[13,"DefLabel","","",15],[13,"DefMethod","","",15],[3,"PathResolution","","The result of resolving a path.\nBefore type checking completes, `depth` represents the number of\ntrailing segments which are yet unresolved. Afterwards, if there\nwere no errors, all paths should be fully resolved, with `depth`\nset to `0` and `base_def` representing the final resolution."],[12,"base_def","","",60],[12,"last_private","","",60],[12,"depth","","",60],[6,"DefMap","",""],[6,"ExportMap","",""],[3,"Export","",""],[12,"name","","",386],[12,"def_id","","",386],[4,"MethodProvenance","",""],[13,"FromTrait","","",61],[13,"FromImpl","","",61],[0,"dependency_format","rustc_lint::middle","Resolution of mixing rlibs and dylibs"],[6,"DependencyList","rustc_lint::middle::dependency_format",""],[6,"Dependencies","",""],[5,"calculate","",""],[0,"effect","rustc_lint::middle","Enforces the Rust effect system. Currently there is just one effect,\n`unsafe`."],[5,"check_crate","rustc_lint::middle::effect",""],[0,"entry","rustc_lint::middle",""],[5,"find_entry_point","rustc_lint::middle::entry",""],[0,"expr_use_visitor","rustc_lint::middle","A different sort of visitor for walking fn bodies.  Unlike the\nnormal visitor, which just walks the entire body in one shot, the\n`ExprUseVisitor` determines how expressions are being used."],[8,"Delegate","rustc_lint::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when\nemploying the ExprUseVisitor."],[10,"consume","","",387],[10,"matched_pat","","",387],[10,"consume_pat","","",387],[10,"borrow","","",387],[10,"decl_without_init","","",387],[10,"mutate","","",387],[4,"LoanCause","",""],[13,"ClosureCapture","","",65],[13,"AddrOf","","",65],[13,"AutoRef","","",65],[13,"RefBinding","","",65],[13,"OverloadedOperator","","",65],[13,"ClosureInvocation","","",65],[13,"ForLoop","","",65],[13,"MatchDiscriminant","","",65],[4,"ConsumeMode","",""],[13,"Copy","","",66],[13,"Move","","",66],[4,"MoveReason","",""],[13,"DirectRefMove","","",67],[13,"PatBindingMove","","",67],[13,"CaptureMove","","",67],[4,"MatchMode","",""],[13,"NonBindingMatch","","",68],[13,"BorrowingMatch","","",68],[13,"CopyingMatch","","",68],[13,"MovingMatch","","",68],[4,"MutateMode","",""],[13,"Init","","",70],[13,"JustWrite","","",70],[13,"WriteAndRead","","",70],[3,"ExprUseVisitor","",""],[0,"fast_reject","rustc_lint::middle",""],[4,"SimplifiedType","rustc_lint::middle::fast_reject","See `simplify_type"],[13,"BoolSimplifiedType","","",72],[13,"CharSimplifiedType","","",72],[13,"IntSimplifiedType","","",72],[13,"UintSimplifiedType","","",72],[13,"FloatSimplifiedType","","",72],[13,"EnumSimplifiedType","","",72],[13,"StrSimplifiedType","","",72],[13,"VecSimplifiedType","","",72],[13,"PtrSimplifiedType","","",72],[13,"TupleSimplifiedType","","",72],[13,"TraitSimplifiedType","","",72],[13,"StructSimplifiedType","","",72],[13,"ClosureSimplifiedType","","",72],[13,"FunctionSimplifiedType","","",72],[13,"ParameterSimplifiedType","","",72],[5,"simplify_type","","Tries to simplify a type by dropping type parameters, deref'ing away any reference types, etc.\nThe idea is to get something simple that we can use to quickly decide if two types could unify\nduring method lookup."],[0,"graph","rustc_lint::middle","A graph module for use in dataflow, region resolution, and elsewhere."],[3,"Graph","rustc_lint::middle::graph",""],[3,"Node","",""],[12,"data","","",388],[3,"Edge","",""],[12,"data","","",73],[3,"NodeIndex","",""],[17,"InvalidNodeIndex","",""],[3,"EdgeIndex","",""],[17,"InvalidEdgeIndex","",""],[3,"Direction","",""],[17,"Outgoing","",""],[17,"Incoming","",""],[3,"DepthFirstTraversal","",""],[5,"each_edge_index","",""],[0,"intrinsicck","rustc_lint::middle",""],[5,"check_crate","rustc_lint::middle::intrinsicck",""],[0,"infer","rustc_lint::middle","See the Book for more information."],[0,"bivariate","rustc_lint::middle::infer","Applies the \"bivariance relationship\" to two types and/or regions.\nIf (A,B) are bivariant then either A <: B or B <: A. It occurs\nwhen type/lifetime parameters are unconstrained. Usually this is\nan error, but we permit it in the specific case where a type\nparameter is constrained in a where-clause via an associated type."],[3,"Bivariate","rustc_lint::middle::infer::bivariate",""],[5,"Bivariate","",""],[0,"combine","rustc_lint::middle::infer",""],[8,"Combine","rustc_lint::middle::infer::combine",""],[10,"tcx","","",389],[10,"tag","","",389],[10,"fields","","",389],[10,"infcx","","",389],[10,"a_is_expected","","",389],[10,"trace","","",389],[10,"equate","","",389],[10,"bivariate","","",389],[10,"sub","","",389],[10,"lub","","",389],[10,"glb","","",389],[10,"mts","","",389],[10,"tys_with_variance","","",389],[10,"tys","","",389],[10,"regions_with_variance","","",389],[10,"regions","","",389],[10,"substs","","",389],[10,"substs_variances","","",389],[10,"bare_fn_tys","","",389],[10,"fn_sigs","","",389],[10,"args","","",389],[10,"unsafeties","","",389],[10,"abi","","",389],[10,"projection_tys","","",389],[10,"projection_predicates","","",389],[10,"projection_bounds","","",389],[10,"existential_bounds","","",389],[10,"builtin_bounds","","",389],[10,"trait_refs","","",389],[10,"binders","","",389],[8,"Combineable","",""],[10,"combine","","",390],[3,"CombineFields","",""],[12,"infcx","","",86],[12,"a_is_expected","","",86],[12,"trace","","",86],[5,"expected_found","",""],[5,"super_tys","",""],[0,"equate","rustc_lint::middle::infer",""],[3,"Equate","rustc_lint::middle::infer::equate",""],[5,"Equate","",""],[0,"error_reporting","rustc_lint::middle::infer","Error Reporting Code for the inference engine"],[8,"ErrorReporting","rustc_lint::middle::infer::error_reporting",""],[10,"report_region_errors","","",391],[10,"process_errors","","",391],[10,"report_type_error","","",391],[10,"report_and_explain_type_error","","",391],[10,"values_str","","",391],[10,"expected_found_str","","",391],[10,"report_concrete_failure","","",391],[10,"report_generic_bound_failure","","",391],[10,"report_sub_sup_conflict","","",391],[10,"report_sup_sup_conflict","","",391],[10,"report_processed_errors","","",391],[10,"give_suggestion","","",391],[8,"Resolvable","",""],[10,"resolve","","",392],[10,"contains_error","","",392],[0,"glb","rustc_lint::middle::infer",""],[3,"Glb","rustc_lint::middle::infer::glb","\"Greatest lower bound\" (common subtype)"],[5,"Glb","",""],[0,"lattice","rustc_lint::middle::infer","# Lattice Variables"],[8,"LatticeDir","rustc_lint::middle::infer::lattice",""],[10,"relate_bound","","",393],[5,"super_lattice_tys","",""],[0,"lub","rustc_lint::middle::infer",""],[3,"Lub","rustc_lint::middle::infer::lub","\"Least upper bound\" (common supertype)"],[5,"Lub","",""],[0,"region_inference","rustc_lint::middle::infer","See README.md"],[4,"Constraint","rustc_lint::middle::infer::region_inference",""],[13,"ConstrainVarSubVar","","",96],[13,"ConstrainRegSubVar","","",96],[13,"ConstrainVarSubReg","","",96],[4,"Verify","",""],[13,"VerifyRegSubReg","","",106],[13,"VerifyGenericBound","","",106],[4,"GenericKind","",""],[13,"Param","","",97],[13,"Projection","","",97],[3,"TwoRegions","",""],[4,"UndoLogEntry","",""],[13,"OpenSnapshot","","",99],[13,"CommitedSnapshot","","",99],[13,"AddVar","","",99],[13,"AddConstraint","","",99],[13,"AddVerify","","",99],[13,"AddGiven","","",99],[13,"AddCombination","","",99],[4,"CombineMapType","",""],[13,"Lub","","",100],[13,"Glb","","",100],[4,"RegionResolutionError","",""],[13,"ConcreteFailure","","`ConcreteFailure(o, a, b)`:",101],[13,"GenericBoundFailure","","`GenericBoundFailure(p, s, a, bs)",101],[13,"SubSupConflict","","`SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:",101],[13,"SupSupConflict","","`SupSupConflict(v, origin1, r1, origin2, r2)`:",101],[13,"ProcessedErrors","","For subsets of `ConcreteFailure` and `SubSupConflict`, we can derive\nmore specific errors message by suggesting to the user where they\nshould put a lifetime. In those cases we process and put those errors\ninto `ProcessedErrors` before we do any reporting.",101],[3,"SameRegions","","SameRegions is used to group regions that we think are the same and would\nlike to indicate so to the user.\nFor example, the following function\n```\nstruct Foo { bar: int }\nfn foo2<'a, 'b>(x: &'a Foo) -> &'b int {\n   &x.bar\n}\n```\nwould report an error because we expect 'a and 'b to match, and so we group\n'a and 'b together inside a SameRegions struct"],[12,"scope_id","","",102],[12,"regions","","",102],[6,"CombineMap","",""],[3,"RegionVarBindings","",""],[3,"RegionSnapshot","",""],[4,"VarValue","",""],[13,"NoValue","","",107],[13,"Value","","",107],[13,"ErrorValue","","",107],[0,"resolve","rustc_lint::middle::infer",""],[3,"OpportunisticTypeResolver","rustc_lint::middle::infer::resolve","The opportunistic type resolver can be used at any time. It simply replaces\ntype variables that have been unified with the things they have\nbeen unified with (similar to `shallow_resolve`, but deep). This is\nuseful for printing messages etc but also required at various\npoints for correctness."],[5,"fully_resolve","","Full type resolution replaces all type and region variables with\ntheir concrete results. If any variable cannot be replaced (never unified, etc)\nthen an `Err` result is returned."],[0,"sub","rustc_lint::middle::infer",""],[3,"Sub","rustc_lint::middle::infer::sub","\"Greatest lower bound\" (common subtype)"],[5,"Sub","",""],[0,"type_variable","rustc_lint::middle::infer",""],[3,"TypeVariableTable","rustc_lint::middle::infer::type_variable",""],[3,"Snapshot","",""],[4,"RelationDir","",""],[13,"SubtypeOf","","",113],[13,"SupertypeOf","","",113],[13,"EqTo","","",113],[13,"BiTo","","",113],[0,"unify","rustc_lint::middle::infer",""],[8,"UnifyKey","rustc_lint::middle::infer::unify","This trait is implemented by any type that can serve as a type\nvariable. We call such variables *unification keys*. For example,\nthis trait is implemented by `IntVid`, which represents integral\nvariables."],[16,"Value","rustc_lint::middle::infer::unify::UnifyKey",""],[10,"index","rustc_lint::middle::infer::unify","",394],[10,"from_index","","",394],[10,"unification_table","","",394],[10,"tag","","",394],[8,"UnifyValue","","Trait for valid types that a type variable can be set to. Note that\nthis is typically not the end type that the value will take on, but\nrather an `Option` wrapper (where `None` represents a variable\nwhose value is not yet set)."],[4,"VarValue","","Value of a unification key. We implement Tarjan's union-find\nalgorithm: when two keys are unified, one of them is converted\ninto a \"redirect\" pointing at the other. These redirects form a\nDAG: the roots of the DAG (nodes that are not redirected) are each\nassociated with a value of type `V` and a rank. The rank is used\nto keep the DAG relatively balanced, which helps keep the running\ntime of the algorithm under control. For more information, see\n<http://en.wikipedia.org/wiki/Disjoint-set_data_structure>."],[13,"Redirect","","",116],[13,"Root","","",116],[3,"UnificationTable","","Table of unification keys and their values."],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes\nmade during the snapshot may either be *committed* or *rolled back*."],[3,"Node","","Internal type used to represent the result of a `get()` operation.\nConveys the current root and value of the key."],[12,"key","","",395],[12,"value","","",395],[12,"rank","","",395],[3,"Delegate","",""],[8,"SimplyUnifiable","","Indicates a type that does not have any kind of subtyping\nrelationship."],[10,"to_type","","",396],[10,"to_type_err","","",396],[5,"err","",""],[8,"InferCtxtMethodsForSimplyUnifiableTypes","",""],[10,"simple_vars","","",397],[10,"simple_var_t","","",397],[10,"probe_var","","",397],[6,"Bound","rustc_lint::middle::infer",""],[6,"cres","",""],[6,"ures","",""],[6,"fres","",""],[3,"InferCtxt","",""],[12,"tcx","","",89],[6,"SkolemizationMap","",""],[4,"TypeOrigin","","Why did we require that the two types be related?"],[13,"Misc","","",123],[13,"MethodCompatCheck","","",123],[13,"ExprAssignable","","",123],[13,"RelateTraitRefs","","",123],[13,"RelateSelfType","","",123],[13,"RelateOutputImplTypes","","",123],[13,"MatchExpressionArm","","",123],[13,"IfExpression","","",123],[13,"IfExpressionWithNoElse","","",123],[13,"RangeExpression","","",123],[13,"EquatePredicate","","",123],[4,"ValuePairs","","See `error_reporting.rs` for more details"],[13,"Types","","",124],[13,"TraitRefs","","",124],[13,"PolyTraitRefs","","",124],[3,"TypeTrace","","The trace designates the path through inference that we took to\nencounter an error or subtyping constraint."],[4,"SubregionOrigin","","The origin of a `r1 <= r2` constraint."],[13,"Subtype","","",126],[13,"InfStackClosure","","",126],[13,"InvokeClosure","","",126],[13,"DerefPointer","","",126],[13,"FreeVariable","","",126],[13,"IndexSlice","","",126],[13,"RelateObjectBound","","",126],[13,"RelateParamBound","","",126],[13,"RelateRegionParamBound","","",126],[13,"RelateDefaultParamBound","","",126],[13,"Reborrow","","",126],[13,"ReborrowUpvar","","",126],[13,"ReferenceOutlivesReferent","","",126],[13,"ExprTypeIsNotInScope","","",126],[13,"BindingTypeIsNotValidAtDecl","","",126],[13,"CallRcvr","","",126],[13,"CallArg","","",126],[13,"CallReturn","","",126],[13,"Operand","","",126],[13,"AddrOf","","",126],[13,"AutoBorrow","","",126],[13,"SafeDestructor","","",126],[4,"LateBoundRegionConversionTime","","Times when we replace late-bound regions with variables:"],[13,"FnCall","","when a fn is called",127],[13,"HigherRankedType","","when two higher-ranked types are compared",127],[13,"AssocTypeProjection","","when projecting an associated type",127],[4,"RegionVariableOrigin","","Reasons to create a region inference variable"],[13,"MiscVariable","","",128],[13,"PatternRegion","","",128],[13,"AddrOfRegion","","",128],[13,"Autoref","","",128],[13,"Coercion","","",128],[13,"EarlyBoundRegion","","",128],[13,"LateBoundRegion","","",128],[13,"UpvarRegion","","",128],[13,"BoundRegionInCoherence","","",128],[4,"fixup_err","",""],[13,"unresolved_int_ty","","",129],[13,"unresolved_float_ty","","",129],[13,"unresolved_ty","","",129],[5,"fixup_err_to_string","",""],[5,"new_infer_ctxt","",""],[5,"common_supertype","","Computes the least upper-bound of `a` and `b`. If this is not possible, reports an error and\nreturns ty::err."],[5,"mk_subty","",""],[5,"can_mk_subty","",""],[5,"can_mk_eqty","",""],[5,"mk_subr","",""],[5,"mk_eqty","",""],[5,"mk_sub_poly_trait_refs","",""],[5,"uok","",""],[3,"CombinedSnapshot","",""],[4,"IntVarValue","",""],[13,"IntType","","",120],[13,"UintType","","",120],[3,"TypeFreshener","",""],[4,"GenericKind","",""],[13,"Param","","",97],[13,"Projection","","",97],[0,"lang_items","rustc_lint::middle",""],[4,"LangItem","rustc_lint::middle::lang_items",""],[13,"SendTraitLangItem","","",131],[13,"SizedTraitLangItem","","",131],[13,"CopyTraitLangItem","","",131],[13,"SyncTraitLangItem","","",131],[13,"DropTraitLangItem","","",131],[13,"AddTraitLangItem","","",131],[13,"SubTraitLangItem","","",131],[13,"MulTraitLangItem","","",131],[13,"DivTraitLangItem","","",131],[13,"RemTraitLangItem","","",131],[13,"NegTraitLangItem","","",131],[13,"NotTraitLangItem","","",131],[13,"BitXorTraitLangItem","","",131],[13,"BitAndTraitLangItem","","",131],[13,"BitOrTraitLangItem","","",131],[13,"ShlTraitLangItem","","",131],[13,"ShrTraitLangItem","","",131],[13,"IndexTraitLangItem","","",131],[13,"IndexMutTraitLangItem","","",131],[13,"RangeStructLangItem","","",131],[13,"RangeFromStructLangItem","","",131],[13,"RangeToStructLangItem","","",131],[13,"RangeFullStructLangItem","","",131],[13,"UnsafeCellTypeLangItem","","",131],[13,"DerefTraitLangItem","","",131],[13,"DerefMutTraitLangItem","","",131],[13,"FnTraitLangItem","","",131],[13,"FnMutTraitLangItem","","",131],[13,"FnOnceTraitLangItem","","",131],[13,"EqTraitLangItem","","",131],[13,"OrdTraitLangItem","","",131],[13,"StrEqFnLangItem","","",131],[13,"PanicFnLangItem","","",131],[13,"PanicBoundsCheckFnLangItem","","",131],[13,"PanicFmtLangItem","","",131],[13,"ExchangeMallocFnLangItem","","",131],[13,"ExchangeFreeFnLangItem","","",131],[13,"StrDupUniqFnLangItem","","",131],[13,"StartFnLangItem","","",131],[13,"TyDescStructLangItem","","",131],[13,"OpaqueStructLangItem","","",131],[13,"EhPersonalityLangItem","","",131],[13,"ExchangeHeapLangItem","","",131],[13,"OwnedBoxLangItem","","",131],[13,"PhantomFnItem","","",131],[13,"PhantomDataItem","","",131],[13,"CovariantTypeItem","","",131],[13,"ContravariantTypeItem","","",131],[13,"InvariantTypeItem","","",131],[13,"CovariantLifetimeItem","","",131],[13,"ContravariantLifetimeItem","","",131],[13,"InvariantLifetimeItem","","",131],[13,"NoCopyItem","","",131],[13,"ManagedItem","","",131],[13,"NonZeroItem","","",131],[13,"StackExhaustedLangItem","","",131],[13,"DebugTraitLangItem","","",131],[3,"LanguageItems","",""],[12,"items","","",132],[12,"missing","","",132],[5,"extract","",""],[5,"collect_language_items","",""],[0,"liveness","rustc_lint::middle","A classic liveness analysis based on dataflow over the AST.  Computes,\nfor each local variable in a function, whether that variable is live\nat a given point.  Program execution points are identified by their\nid."],[5,"check_crate","rustc_lint::middle::liveness",""],[0,"mem_categorization","rustc_lint::middle","# Categorization"],[4,"categorization","rustc_lint::middle::mem_categorization",""],[13,"cat_rvalue","","",142],[13,"cat_static_item","","",142],[13,"cat_upvar","","",142],[13,"cat_local","","",142],[13,"cat_deref","","",142],[13,"cat_interior","","",142],[13,"cat_downcast","","",142],[3,"Upvar","",""],[12,"id","","",143],[12,"kind","","",143],[4,"PointerKind","",""],[13,"Unique","","`Box<T>`",144],[13,"BorrowedPtr","","`&T`",144],[13,"UnsafePtr","","`*T`",144],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",144],[4,"InteriorKind","",""],[13,"InteriorField","","",145],[13,"InteriorElement","","",145],[4,"FieldName","",""],[13,"NamedField","","",146],[13,"PositionalField","","",146],[4,"InteriorOffsetKind","",""],[13,"Index","","",147],[13,"Pattern","","",147],[4,"ElementKind","",""],[13,"VecElement","","",148],[13,"OtherElement","","",148],[4,"MutabilityCategory","",""],[13,"McImmutable","","",149],[13,"McDeclared","","",149],[13,"McInherited","","",149],[4,"Note","",""],[13,"NoteClosureEnv","","",150],[13,"NoteUpvarRef","","",150],[13,"NoteNone","","",150],[3,"cmt_","",""],[12,"id","","",151],[12,"span","","",151],[12,"cat","","",151],[12,"mutbl","","",151],[12,"ty","","",151],[12,"note","","",151],[6,"cmt","",""],[4,"deref_kind","",""],[13,"deref_ptr","","",398],[13,"deref_interior","","",398],[8,"ast_node","",""],[10,"id","","",399],[10,"span","","",399],[3,"MemCategorizationContext","",""],[6,"McResult","",""],[8,"Typer","","The `Typer` trait provides the interface for the mem-categorization\nmodule to the results of the type check. It can be used to query\nthe type assigned to an expression node, to inquire after adjustments,\nand so on."],[10,"node_ty","","",400],[10,"expr_ty_adjusted","","",400],[10,"type_moves_by_default","","",400],[10,"node_method_ty","","",400],[10,"node_method_origin","","",400],[10,"adjustments","","",400],[10,"is_method_call","","",400],[10,"temporary_scope","","",400],[10,"upvar_capture","","",400],[4,"InteriorSafety","",""],[13,"InteriorUnsafe","","",401],[13,"InteriorSafe","","",401],[4,"AliasableReason","",""],[13,"AliasableBorrowed","","",402],[13,"AliasableClosure","","",402],[13,"AliasableOther","","",402],[13,"AliasableStatic","","",402],[13,"AliasableStaticMut","","",402],[5,"ptr_sigil","",""],[0,"pat_util","rustc_lint::middle",""],[6,"PatIdMap","rustc_lint::middle::pat_util",""],[5,"pat_id_map","",""],[5,"pat_is_refutable","",""],[5,"pat_is_variant_or_struct","",""],[5,"pat_is_const","",""],[5,"pat_is_binding","",""],[5,"pat_is_binding_or_wild","",""],[5,"pat_bindings","","Call `it` on every \"binding\" in a pattern, e.g., on `a` in\n`match foo() { Some(a) => (), None => () }`"],[5,"pat_contains_bindings","","Checks if the pattern contains any patterns that bind something to\nan ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`."],[5,"pat_contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to\nan ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,"],[5,"simple_identifier","",""],[5,"def_to_path","",""],[0,"privacy","rustc_lint::middle","A pass that checks to make sure private fields and methods aren't used\noutside their scopes. This pass will also generate a set of exported items\nwhich are available for use externally when compiled as a library."],[6,"ExportedItems","rustc_lint::middle::privacy",""],[6,"ExternalExports","",""],[6,"PublicItems","",""],[4,"LastPrivate","",""],[13,"LastMod","","",156],[13,"LastImport","","",156],[12,"value_priv","rustc_lint::middle::privacy::LastPrivate","",156],[12,"value_used","","",156],[12,"type_priv","","",156],[12,"type_used","","",156],[4,"PrivateDep","rustc_lint::middle::privacy",""],[13,"AllPublic","","",157],[13,"DependsOn","","",157],[4,"ImportUse","",""],[13,"Unused","","",158],[13,"Used","","",158],[0,"reachable","rustc_lint::middle",""],[5,"find_reachable","rustc_lint::middle::reachable",""],[0,"region","rustc_lint::middle","This file actually contains two passes related to regions.  The first\npass builds up the `scope_map`, which describes the parent links in\nthe region hierarchy.  The second pass infers which types must be\nregion parameterized."],[4,"CodeExtent","rustc_lint::middle::region","CodeExtent represents a statically-describable extent that can be\nused to bound the lifetime/region for values."],[13,"Misc","","",18],[13,"DestructionScope","","",18],[13,"Remainder","","",18],[3,"DestructionScopeData","","extent of destructors for temporaries of node-id"],[12,"node_id","","",19],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced\nby `block.stmts[first_statement_index]`. Such subscopes represent\na suffix of the block. Note that each subscope does not include\nthe initializer expression, if any, for the statement indexed by\n`first_statement_index`."],[12,"block","","",160],[12,"first_statement_index","","",160],[3,"RegionMaps","","The region maps encode information about region relationships."],[3,"Context","",""],[5,"resolve_crate","",""],[5,"resolve_inlined_item","",""],[0,"recursion_limit","rustc_lint::middle",""],[5,"update_recursion_limit","rustc_lint::middle::recursion_limit",""],[0,"resolve_lifetime","rustc_lint::middle","Name resolution for lifetimes."],[4,"DefRegion","rustc_lint::middle::resolve_lifetime",""],[13,"DefStaticRegion","","",167],[13,"DefEarlyBoundRegion","","",167],[13,"DefLateBoundRegion","","",167],[13,"DefFreeRegion","","",167],[6,"NamedRegionMap","",""],[5,"krate","",""],[5,"early_bound_lifetimes","",""],[0,"stability","rustc_lint::middle","A pass that annotates every item and method with its stability level,\npropagating default levels lexically from parent to children ast nodes."],[3,"Index","rustc_lint::middle::stability","A stability index, giving the stability level for items and methods."],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled\nfeatures and possibly prints errors. Returns a list of all\nfeatures used."],[5,"check_item","","Helper for discovering nodes to check for stability"],[5,"check_expr","","Helper for discovering nodes to check for stability"],[5,"check_path","",""],[5,"check_pat","",""],[5,"lookup","","Lookup the stability for a node, loading external crate\nmetadata as necessary."],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that\nwere expected to be library features), and the list of features used from\nlibraries, identify activated features that don't exist and error about them."],[0,"subst","rustc_lint::middle",""],[3,"Substs","rustc_lint::middle::subst","A substitution mapping type/region parameters to new values. We\nidentify each in-scope parameter by an *index* and a *parameter\nspace* (which indices where the parameter is defined; see\n`ParamSpace`)."],[12,"types","","",173],[12,"regions","","",173],[4,"RegionSubsts","","Represents the values to use when substituting lifetime parameters.\nIf the value is `ErasedRegions`, then this subst is occurring during\ntrans, and all region parameters will be replaced with `ty::ReStatic`."],[13,"ErasedRegions","","",174],[13,"NonerasedRegions","","",174],[4,"ParamSpace","",""],[13,"TypeSpace","","",175],[13,"SelfSpace","","",175],[13,"FnSpace","","",175],[3,"VecPerParamSpace","","Vector of things sorted by param space. Used to keep\nthe set of things declared on the type, self, or method\ndistinct."],[3,"SeparateVecsPerParamSpace","","The `split` function converts one `VecPerParamSpace` into this\n`SeparateVecsPerParamSpace` structure."],[12,"types","","",403],[12,"selfs","","",403],[12,"fns","","",403],[3,"EnumeratedItems","",""],[8,"Subst","",""],[10,"subst","","",404],[10,"subst_spanned","","",404],[0,"traits","rustc_lint::middle","Trait Resolution. See the Book for more."],[3,"Obligation","rustc_lint::middle::traits","An `Obligation` represents some trait reference (e.g. `int:Eq`) for\nwhich the vtable must be found.  The process of finding a vtable is\ncalled \"resolving\" the `Obligation`. This process consists of\neither identifying an `impl` (e.g., `impl Eq for int`) that\nprovides the required vtable, or else finding a bound that is in\nscope. The eventual result is usually a `Selection` (defined below)."],[12,"cause","","",199],[12,"recursion_depth","","",199],[12,"predicate","","",199],[6,"PredicateObligation","",""],[6,"TraitObligation","",""],[3,"ObligationCause","","Why did we incur this obligation? Used for error reporting."],[12,"span","","",206],[12,"body_id","","",206],[12,"code","","",206],[4,"ObligationCauseCode","",""],[13,"MiscObligation","","Not well classified or should be obvious from span.",207],[13,"ItemObligation","","In an impl of trait X for type Y, type Y must\nalso implement all supertraits of X.",207],[13,"ObjectCastObligation","","Obligation incurred due to an object cast.",207],[13,"AssignmentLhsSized","","Various cases where expressions must be sized/copy/etc:",207],[13,"StructInitializerSized","","",207],[13,"VariableType","","",207],[13,"ReturnType","","",207],[13,"RepeatVec","","",207],[13,"ClosureCapture","","",207],[13,"FieldSized","","",207],[13,"ObjectSized","","",207],[13,"SharedStatic","","",207],[13,"BuiltinDerivedObligation","","",207],[13,"ImplDerivedObligation","","",207],[13,"CompareImplMethodObligation","","",207],[3,"DerivedObligationCause","",""],[6,"Obligations","",""],[6,"PredicateObligations","",""],[6,"TraitObligations","",""],[6,"Selection","",""],[4,"SelectionError","",""],[13,"Unimplemented","","",203],[13,"Overflow","","",203],[13,"OutputTypeParameterMismatch","","",203],[3,"FulfillmentError","",""],[12,"obligation","","",204],[12,"code","","",204],[4,"FulfillmentErrorCode","",""],[13,"CodeSelectionError","","",205],[13,"CodeProjectionError","","",205],[13,"CodeAmbiguity","","",205],[6,"SelectionResult","",""],[4,"Vtable","","Given the successful resolution of an obligation, the `Vtable`\nindicates where the vtable comes from. Note that while we call this\na \"vtable\", it does not necessarily indicate dynamic dispatch at\nruntime. `Vtable` instances just tell the compiler where to find\nmethods, but in generic code those methods are typically statically\ndispatched -- only when an object is constructed is a `Vtable`\ninstance reified into an actual vtable."],[13,"VtableImpl","","Vtable identifying a particular impl.",200],[13,"VtableDefaultImpl","","Vtable for default trait implementations\nThis carries the information and nested obligations with regards\nto a default implementation for a trait `Trait`. The nested obligations\nensure the trait implementation holds for all the constituent types.",200],[13,"VtableParam","","Successful resolution to an obligation provided by the caller\nfor some type parameter. The `Vec<N>` represents the\nobligations incurred from normalizing the where-clause (if\nany).",200],[13,"VtableObject","","Virtual calls through an object",200],[13,"VtableBuiltin","","Successful resolution for a builtin trait.",200],[13,"VtableClosure","","Vtable automatically generated for a closure. The def ID is the ID\nof the closure expression. This is a `VtableImpl` in spirit, but the\nimpl is generated by the compiler and does not appear in the source.",200],[13,"VtableFnPointer","","Same as above, but for a fn pointer type with the given signature.",200],[3,"VtableImplData","","Identifies a particular impl in the source, along with a set of\nsubstitutions from the impl's type/lifetime parameters. The\n`nested` vector corresponds to the nested obligations attached to\nthe impl's type parameters."],[12,"impl_def_id","","",197],[12,"substs","","",197],[12,"nested","","",197],[3,"VtableDefaultImplData","",""],[12,"trait_def_id","","",202],[12,"nested","","",202],[3,"VtableBuiltinData","",""],[12,"nested","","",201],[3,"VtableObjectData","","A vtable for some object-safe trait `Foo` automatically derived\nfor the object type `Foo`."],[12,"object_ty","","the object type `Foo`.",198],[12,"upcast_trait_ref","","`Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.",198],[5,"predicates_for_generics","","Creates predicate obligations from the generic bounds."],[5,"evaluate_builtin_bound","","Determines whether the type `ty` is known to meet `bound` and\nreturns true if so. Returns false if `ty` either does not meet\n`bound` or is not known to meet bound (note that this is\nconservative towards *no impl*, which is the opposite of the\n`evaluate` methods)."],[5,"type_known_to_meet_builtin_bound","",""],[5,"normalize_param_env_or_error","","Normalizes the parameter environment, reporting errors if they occur."],[5,"fully_normalize","",""],[5,"normalize","","Normalizes any associated type projections in `value`, replacing\nthem with a fully resolved type where possible. The return value\ncombines the normalized result and any additional obligations that\nwere incurred as result."],[4,"ObjectSafetyViolation","",""],[13,"SizedSelf","","Self : Sized declared on the trait",187],[13,"SupertraitSelf","","Supertrait reference references `Self` an in illegal location\n(e.g. `trait Foo : Bar<Self>`)",187],[13,"Method","","Method has something illegal",187],[5,"report_fulfillment_errors","",""],[5,"suggest_new_overflow_limit","",""],[5,"overlapping_impls","","True if there exist types that satisfy both of the two given impls."],[5,"get_vtable_index_of_object_method","","Given an object of type `object_trait_ref`, returns the index of\nthe method `n_method` found in the trait `trait_def_id` (which\nshould be a supertrait of `object_trait_ref`) within the vtable\nfor `object_trait_ref`."],[5,"transitive_bounds","",""],[4,"MethodMatchResult","",""],[13,"MethodMatched","","",194],[13,"MethodAmbiguous","","",194],[13,"MethodDidNotMatch","","",194],[5,"is_object_safe","",""],[3,"SelectionContext","",""],[3,"FulfillmentContext","","The fulfillment context is used to drive trait resolution.  It\nconsists of a list of obligations that must be (eventually)\nsatisfied. The job is to track which are satisfied, which yielded\nerrors, and which are still pending. At any point, users can call\n`select_where_possible`, and the fulfilment context will try to do\nselection, retaining only those obligations that remain\nambiguous. This may be helpful in pushing type inference\nalong. Once all type inference constraints have been generated, the\nmethod `select_all_or_error` can be used to report any remaining\nambiguous cases as errors."],[4,"OrphanCheckErr","",""],[13,"NoLocalInputType","","",405],[13,"UncoveredTy","","",405],[3,"MismatchedProjectionTypes","",""],[12,"err","","",181],[5,"supertraits","",""],[3,"RegionObligation","",""],[12,"sub_region","","",179],[12,"sup_type","","",179],[12,"cause","","",179],[5,"upcast","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait."],[5,"trait_ref_for_builtin_bound","",""],[4,"MethodMatchedData","",""],[13,"PreciseMethodMatch","","",189],[13,"CoerciveMethodMatch","","",189],[5,"object_safety_violations","",""],[6,"Supertraits","",""],[5,"elaborate_predicates","",""],[5,"orphan_check","","Checks the coherence orphan rules. `impl_def_id` should be the\ndef-id of a trait impl. To pass, either the trait must be local, or else\ntwo conditions must be satisfied:"],[3,"Normalized","",""],[12,"value","","",184],[12,"obligations","","",184],[4,"MethodViolationCode","","Reasons a method might not be object-safe."],[13,"StaticMethod","","e.g., `fn foo()`",186],[13,"ReferencesSelf","","e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`",186],[13,"Generic","","e.g., `fn foo<A>()`",186],[3,"SelectionCache","",""],[0,"ty","rustc_lint::middle",""],[6,"Disr","rustc_lint::middle::ty",""],[17,"INITIAL_DISCRIMINANT_VALUE","",""],[3,"CrateAnalysis","","The complete set of all analyses described in this module. This is\nproduced by the driver and fed to trans and later passes."],[12,"export_map","","",406],[12,"exported_items","","",406],[12,"public_items","","",406],[12,"ty_cx","","",406],[12,"reachable","","",406],[12,"name","","",406],[12,"glob_map","","",406],[3,"field","",""],[12,"name","","",209],[12,"mt","","",209],[4,"ImplOrTraitItemContainer","",""],[13,"TraitContainer","","",210],[13,"ImplContainer","","",210],[4,"ImplOrTraitItem","",""],[13,"MethodTraitItem","","",211],[13,"TypeTraitItem","","",211],[4,"ImplOrTraitItemId","",""],[13,"MethodTraitItemId","","",212],[13,"TypeTraitItemId","","",212],[3,"Method","",""],[12,"name","","",213],[12,"generics","","",213],[12,"predicates","","",213],[12,"fty","","",213],[12,"explicit_self","","",213],[12,"vis","","",213],[12,"def_id","","",213],[12,"container","","",213],[12,"provided_source","","",213],[3,"AssociatedType","",""],[12,"name","","",214],[12,"vis","","",214],[12,"def_id","","",214],[12,"container","","",214],[3,"mt","",""],[12,"ty","","",215],[12,"mutbl","","",215],[3,"field_ty","",""],[12,"name","","",216],[12,"id","","",216],[12,"vis","","",216],[12,"origin","","",216],[3,"creader_cache_key","",""],[12,"cnum","","",217],[12,"pos","","",217],[12,"len","","",217],[3,"ItemVariances","",""],[12,"types","","",218],[12,"regions","","",218],[4,"Variance","",""],[13,"Covariant","","",219],[13,"Invariant","","",219],[13,"Contravariant","","",219],[13,"Bivariant","","",219],[4,"AutoAdjustment","",""],[13,"AdjustReifyFnPointer","","",220],[13,"AdjustDerefRef","","",220],[4,"UnsizeKind","",""],[13,"UnsizeLength","","",221],[13,"UnsizeStruct","","",221],[13,"UnsizeVtable","","",221],[3,"AutoDerefRef","",""],[12,"autoderefs","","",222],[12,"autoref","","",222],[4,"AutoRef","",""],[13,"AutoPtr","","Convert from T to &T\nThe third field allows us to wrap other AutoRef adjustments.",223],[13,"AutoUnsize","","Convert [T, ..n] to [T] (or similar, depending on the kind)",223],[13,"AutoUnsizeUniq","","Convert Box<[T, ..n]> to Box<[T]> or something similar in a Box.\nWith DST and Box a library type, this should be replaced by UnsizeStruct.",223],[13,"AutoUnsafe","","Convert from T to *T\nValue to thin pointer\nThe second field allows us to wrap other AutoRef adjustments.",223],[5,"adjusted_object_region","",""],[5,"adjust_is_object","",""],[5,"type_of_adjust","",""],[3,"param_index","",""],[12,"space","","",224],[12,"index","","",224],[4,"MethodOrigin","",""],[13,"MethodStatic","","",25],[13,"MethodStaticClosure","","",25],[13,"MethodTypeParam","","",25],[13,"MethodTraitObject","","",25],[3,"MethodParam","",""],[12,"trait_ref","","",225],[12,"method_num","","",225],[12,"impl_def_id","","The impl for the trait from which the method comes. This\nshould only be used for certain linting/heuristic purposes\nsince there is no guarantee that this is Some in every\nsituation that it could/should be.",225],[3,"MethodObject","",""],[12,"trait_ref","","",226],[12,"object_trait_id","","",226],[12,"method_num","","",226],[12,"vtable_index","","",226],[3,"MethodCallee","",""],[12,"origin","","",227],[12,"ty","","",227],[12,"substs","","",227],[3,"MethodCall","","With method calls, we store some extra information in\nside tables (i.e method_map). We use\nMethodCall as a key to index into these tables instead of\njust directly using the expression's NodeId. The reason\nfor this being that we may apply adjustments (coercions)\nwith the resulting expression also needing to use the\nside tables. The problem with this is that we don't\nassign a separate NodeId to this new expression\nand so it would clash with the base expression if both\nneeded to add to the side tables. Thus to disambiguate\nwe also keep track of whether there's an adjustment in\nour key."],[12,"expr_id","","",228],[12,"adjustment","","",228],[4,"ExprAdjustment","",""],[13,"NoAdjustment","","",229],[13,"AutoDeref","","",229],[13,"AutoObject","","",229],[6,"MethodMap","",""],[6,"vtable_param_res","",""],[6,"vtable_res","",""],[4,"vtable_origin","",""],[13,"vtable_static","","",230],[13,"vtable_param","","",230],[13,"vtable_closure","","",230],[13,"vtable_error","","",230],[6,"ObjectCastMap","",""],[3,"TransmuteRestriction","","A restriction that certain types must be the same size. The use of\n`transmute` gives rise to these restrictions. These generally\ncannot be checked until trans; therefore, each call to `transmute`\nwill push one or more such restriction into the\n`transmute_restrictions` vector during `intrinsicck`. They are\nthen checked during `trans` by the fn `check_intrinsics`."],[12,"span","","The span whence the restriction comes.",80],[12,"original_from","","The type being transmuted from.",80],[12,"original_to","","The type being transmuted to.",80],[12,"substituted_from","","The type being transmuted from, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",80],[12,"substituted_to","","The type being transmuted to, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",80],[12,"id","","NodeId of the transmute intrinsic.",80],[3,"CtxtArenas","","Internal storage"],[3,"CommonTypes","",""],[12,"bool","","",407],[12,"char","","",407],[12,"int","","",407],[12,"i8","","",407],[12,"i16","","",407],[12,"i32","","",407],[12,"i64","","",407],[12,"uint","","",407],[12,"u8","","",407],[12,"u16","","",407],[12,"u32","","",407],[12,"u64","","",407],[12,"f32","","",407],[12,"f64","","",407],[12,"err","","",407],[3,"ctxt","","The data structure to keep track of all the information that typechecker\ngenerates so that so that it can be reused and doesn't have to be redone\nlater on."],[12,"types","","Common types, pre-interned for your convenience.",233],[12,"sess","","",233],[12,"def_map","","",233],[12,"named_region_map","","",233],[12,"region_maps","","",233],[12,"node_types","","Stores the types for various nodes in the AST.  Note that this table\nis not guaranteed to be populated until after typeck.  See\ntypeck::check::fn_ctxt for details.",233],[12,"item_substs","","Stores the type parameters which were substituted to obtain the type\nof this node.  This only applies to nodes that refer to entities\nparameterized by type parameters, such as generic fns, types, or\nother items.",233],[12,"impl_or_trait_items","","Maps from a trait item to the trait item \"descriptor\"",233],[12,"trait_item_def_ids","","Maps from a trait def-id to a list of the def-ids of its trait items",233],[12,"trait_items_cache","","A cache for the trait_items() routine",233],[12,"impl_trait_cache","","",233],[12,"impl_trait_refs","","",233],[12,"trait_defs","","",233],[12,"predicates","","Maps from the def-id of an item (trait/struct/enum/fn) to its\nassociated predicates.",233],[12,"super_predicates","","Maps from the def-id of a trait to the list of\nsuper-predicates. This is a subset of the full list of\npredicates. We store these in a separate map because we must\nevaluate them even during type conversion, often before the\nfull predicates are available (note that supertraits have\nadditional acyclicity requirements).",233],[12,"object_cast_map","","Maps from node-id of a trait object cast (like `foo as\nBox<Trait>`) to the trait reference.",233],[12,"map","","",233],[12,"intrinsic_defs","","",233],[12,"freevars","","",233],[12,"tcache","","",233],[12,"rcache","","",233],[12,"short_names_cache","","",233],[12,"tc_cache","","",233],[12,"ast_ty_to_ty_cache","","",233],[12,"enum_var_cache","","",233],[12,"ty_param_defs","","",233],[12,"adjustments","","",233],[12,"normalized_cache","","",233],[12,"lang_items","","",233],[12,"provided_method_sources","","A mapping of fake provided method def_ids to the default implementation",233],[12,"struct_fields","","",233],[12,"item_variance_map","","Maps from def-id of a type or region parameter to its\n(inferred) variance.",233],[12,"variance_computed","","True if the variance has been computed yet; false otherwise.",233],[12,"destructor_for_type","","A mapping from the def ID of an enum or struct type to the def ID\nof the method that implements its destructor. If the type is not\npresent in this map, it does not have a destructor. This map is\npopulated during the coherence phase of typechecking.",233],[12,"destructors","","A method will be in this list if and only if it is a destructor.",233],[12,"trait_impls","","Maps a trait onto a list of impls of that trait.",233],[12,"inherent_impls","","Maps a DefId of a type to a list of its inherent impls.\nContains implementations of methods that are inherent to a type.\nMethods in these implementations don't need to be exported.",233],[12,"impl_items","","Maps a DefId of an impl to a list of its items.\nNote that this contains all of the impls that we know about,\nincluding ones in other crates. It's not clear that this is the best\nway to do it.",233],[12,"used_unsafe","","Set of used unsafe nodes (functions or blocks). Unsafe nodes not\npresent in this set can be warned about.",233],[12,"used_mut_nodes","","Set of nodes which mark locals as mutable which end up getting used at\nsome point. Local variable definitions not in this set can be warned\nabout.",233],[12,"populated_external_types","","The set of external nominal types whose implementations have been read.\nThis is used for lazy resolution of methods.",233],[12,"populated_external_traits","","The set of external traits whose implementations have been read. This\nis used for lazy resolution of traits.",233],[12,"upvar_capture_map","","Borrows",233],[12,"extern_const_statics","","These two caches are used by const_eval when decoding external statics\nand variants that are found.",233],[12,"extern_const_variants","","",233],[12,"method_map","","",233],[12,"dependency_formats","","",233],[12,"closure_kinds","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",233],[12,"closure_tys","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",233],[12,"node_lint_levels","","",233],[12,"transmute_restrictions","","The types that must be asserted to be the same size for `transmute`\nto be valid. We gather up these restrictions in the intrinsicck pass\nand check them in trans.",233],[12,"stability","","Maps any item's def-id to its stability index.",233],[12,"associated_types","","Maps def IDs to true if and only if they're associated types.",233],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that do not have to do with the parameters in scope.",233],[12,"repr_hint_cache","","Caches the representation hints for struct definitions.",233],[12,"type_impls_copy_cache","","Caches whether types are known to impl Copy. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",233],[12,"type_impls_sized_cache","","Caches whether types are known to impl Sized. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",233],[12,"object_safety_cache","","Caches whether traits are object safe",233],[12,"const_qualif_map","","Maps Expr NodeId's to their constant qualification.",233],[3,"TypeFlags","",""],[17,"NO_TYPE_FLAGS","",""],[17,"HAS_PARAMS","",""],[17,"HAS_SELF","",""],[17,"HAS_TY_INFER","",""],[17,"HAS_RE_INFER","",""],[17,"HAS_RE_LATE_BOUND","",""],[17,"HAS_REGIONS","",""],[17,"HAS_TY_ERR","",""],[17,"HAS_PROJECTION","",""],[17,"NEEDS_SUBST","",""],[3,"TyS","",""],[12,"sty","","",234],[12,"flags","","",234],[6,"Ty","",""],[3,"InternedTy","","An entry in the type interner."],[5,"type_has_params","",""],[5,"type_has_self","",""],[5,"type_has_ty_infer","",""],[5,"type_needs_infer","",""],[5,"type_has_projection","",""],[5,"type_has_late_bound_regions","",""],[5,"type_has_escaping_regions","","An \"escaping region\" is a bound region whose binder is not part of `t`."],[5,"type_escapes_depth","",""],[3,"BareFnTy","",""],[12,"unsafety","","",236],[12,"abi","","",236],[12,"sig","","",236],[3,"ClosureTy","",""],[12,"unsafety","","",237],[12,"abi","","",237],[12,"sig","","",237],[4,"FnOutput","",""],[13,"FnConverging","","",238],[13,"FnDiverging","","",238],[6,"PolyFnOutput","",""],[3,"FnSig","","Signature of a function type, which I have arbitrarily\ndecided to use to refer to the input/output types."],[12,"inputs","","",85],[12,"output","","",85],[12,"variadic","","",85],[6,"PolyFnSig","",""],[3,"ParamTy","",""],[12,"space","","",239],[12,"idx","","",239],[12,"name","","",239],[3,"DebruijnIndex","","A [De Bruijn index][dbi] is a standard means of representing\nregions (and perhaps later types) in a higher-ranked setting. In\nparticular, imagine a type like this:"],[12,"depth","","",240],[4,"Region","","Representation of regions:"],[13,"ReEarlyBound","","",16],[13,"ReLateBound","","",16],[13,"ReFree","","When checking a function body, the types of all arguments and so forth\nthat refer to bound region parameters are modified to refer to free\nregion parameters.",16],[13,"ReScope","","A concrete region naming some statically determined extent\n(e.g. an expression or sequence of statements) within the\ncurrent function.",16],[13,"ReStatic","","Static data that has an \"infinite\" lifetime. Top in the region lattice.",16],[13,"ReInfer","","A region variable.  Should not exist after typeck.",16],[13,"ReEmpty","","Empty lifetime is for data that is never accessed.\nBottom in the region lattice. We treat ReEmpty somewhat\nspecially; at least right now, we do not generate instances of\nit during the GLB computations, but rather\ngenerate an error instead. This is to improve error messages.\nThe only way to get an instance of ReEmpty is to have a region\nvariable with no constraints.",16],[3,"UpvarId","","Upvars do not get their own node-id. Instead, we use the pair of\nthe original var id (that is, the root variable that is referenced\nby the upvar) and the id of the closure expression."],[12,"var_id","","",241],[12,"closure_expr_id","","",241],[4,"BorrowKind","",""],[13,"ImmBorrow","","Data must be immutable and is aliasable.",242],[13,"UniqueImmBorrow","","Data must be immutable but not aliasable.  This kind of borrow\ncannot currently be expressed by the user and is used only in\nimplicit closure bindings. It is needed when you the closure\nis borrowing or mutating a mutable referent, e.g.:",242],[13,"MutBorrow","","Data is mutable and not aliasable.",242],[4,"UpvarCapture","","Information describing the capture of an upvar. This is computed\nduring `typeck`, specifically by `regionck`."],[13,"ByValue","","Upvar is captured by value. This is always true when the\nclosure is labeled `move`, but can also be true in other cases\ndepending on inference.",24],[13,"ByRef","","Upvar is captured by reference.",24],[3,"UpvarBorrow","",""],[12,"kind","","The kind of borrow: by-ref upvars have access to shared\nimmutable borrows, which are not part of the normal language\nsyntax.",23],[12,"region","","Region of the resulting reference.",23],[6,"UpvarCaptureMap","",""],[3,"FreeRegion","","A \"free\" region `fr` can be interpreted as \"some region\nat least as big as the scope `fr.scope`\"."],[12,"scope","","",17],[12,"bound_region","","",17],[4,"BoundRegion","",""],[13,"BrAnon","","An anonymous region parameter for a given fn (&T)",20],[13,"BrNamed","","Named region parameters for functions (a in &'a T)",20],[13,"BrFresh","","Fresh bound identifiers created during GLB computations.",20],[13,"BrEnv","","",20],[4,"sty","",""],[13,"ty_bool","","",243],[13,"ty_char","","",243],[13,"ty_int","","",243],[13,"ty_uint","","",243],[13,"ty_float","","",243],[13,"ty_enum","","Substs here, possibly against intuition, *may* contain `ty_param`s.\nThat is, even after substitution it is possible that there are type\nvariables. This happens when the `ty_enum` corresponds to an enum\ndefinition and not a concrete use of it. To get the correct `ty_enum`\nfrom the tcx, use the `NodeId` from the `ast::Ty` and look it up in\nthe `ast_ty_to_ty_cache`. This is probably true for `ty_struct` as\nwell.",243],[13,"ty_uniq","","",243],[13,"ty_str","","",243],[13,"ty_vec","","",243],[13,"ty_ptr","","",243],[13,"ty_rptr","","",243],[13,"ty_bare_fn","","",243],[13,"ty_trait","","",243],[13,"ty_struct","","",243],[13,"ty_closure","","",243],[13,"ty_tup","","",243],[13,"ty_projection","","",243],[13,"ty_param","","",243],[13,"ty_infer","","",243],[13,"ty_err","","",243],[3,"TyTrait","",""],[12,"principal","","",244],[12,"bounds","","",244],[3,"TraitRef","","A complete reference to a trait. These take numerous guises in syntax,\nbut perhaps the most recognizable form is in a where clause:"],[12,"def_id","","",83],[12,"substs","","",83],[6,"PolyTraitRef","",""],[3,"Binder","","Binder is a binder for higher-ranked lifetimes. It is part of the\ncompiler's representation for things like `for<'a> Fn(&'a int)`\n(which would be represented by the type `PolyTraitRef ==\nBinder<TraitRef>`). Note that when we skolemize, instantiate,\nerase, or otherwise \"discharge\" these bound regions, we change the\ntype from `Binder<T>` to just `T` (see\ne.g. `liberate_late_bound_regions`)."],[4,"IntVarValue","",""],[13,"IntType","","",120],[13,"UintType","","",120],[4,"terr_vstore_kind","",""],[13,"terr_vec","","",245],[13,"terr_str","","",245],[13,"terr_fn","","",245],[13,"terr_trait","","",245],[3,"expected_found","",""],[12,"expected","","",246],[12,"found","","",246],[4,"type_err","",""],[13,"terr_mismatch","","",247],[13,"terr_unsafety_mismatch","","",247],[13,"terr_abi_mismatch","","",247],[13,"terr_mutability","","",247],[13,"terr_box_mutability","","",247],[13,"terr_ptr_mutability","","",247],[13,"terr_ref_mutability","","",247],[13,"terr_vec_mutability","","",247],[13,"terr_tuple_size","","",247],[13,"terr_fixed_array_size","","",247],[13,"terr_ty_param_size","","",247],[13,"terr_arg_count","","",247],[13,"terr_regions_does_not_outlive","","",247],[13,"terr_regions_not_same","","",247],[13,"terr_regions_no_overlap","","",247],[13,"terr_regions_insufficiently_polymorphic","","",247],[13,"terr_regions_overly_polymorphic","","",247],[13,"terr_sorts","","",247],[13,"terr_integer_as_char","","",247],[13,"terr_int_mismatch","","",247],[13,"terr_float_mismatch","","",247],[13,"terr_traits","","",247],[13,"terr_builtin_bounds","","",247],[13,"terr_variadic_mismatch","","",247],[13,"terr_cyclic_ty","","",247],[13,"terr_convergence_mismatch","","",247],[13,"terr_projection_name_mismatched","","",247],[13,"terr_projection_bounds_length","","",247],[3,"ParamBounds","","Bounds suitable for a named type parameter like `A` in `fn foo<A>`\nas well as the existential type parameter in an object type."],[12,"region_bounds","","",248],[12,"builtin_bounds","","",248],[12,"trait_bounds","","",248],[12,"projection_bounds","","",248],[3,"ExistentialBounds","","Bounds suitable for an existentially quantified type parameter\nsuch as those that appear in object types or closure types. The\nmajor difference between this case and `ParamBounds` is that\ngeneral purpose trait bounds are omitted and there must be\n*exactly one* region."],[12,"region_bound","","",249],[12,"builtin_bounds","","",249],[12,"projection_bounds","","",249],[6,"BuiltinBounds","",""],[4,"BuiltinBound","",""],[13,"BoundSend","","",250],[13,"BoundSized","","",250],[13,"BoundCopy","","",250],[13,"BoundSync","","",250],[5,"empty_builtin_bounds","",""],[5,"all_builtin_bounds","",""],[5,"region_existential_bound","","An existential bound that does not implement any traits."],[3,"TyVid","",""],[12,"index","","",251],[3,"IntVid","",""],[12,"index","","",119],[3,"FloatVid","",""],[12,"index","","",121],[3,"RegionVid","",""],[12,"index","","",252],[4,"InferTy","",""],[13,"TyVar","","",253],[13,"IntVar","","",253],[13,"FloatVar","","",253],[13,"FreshTy","","A `FreshTy` is one that is generated as a replacement for an\nunbound type variable. This is convenient for caching etc. See\n`middle::infer::freshen` for more details.",253],[13,"FreshIntTy","","",253],[4,"UnconstrainedNumeric","",""],[13,"UnconstrainedFloat","","",254],[13,"UnconstrainedInt","","",254],[13,"Neither","","",254],[4,"InferRegion","",""],[13,"ReVar","","",255],[13,"ReSkolemized","","",255],[4,"ObjectLifetimeDefault","","Default region to use for the bound of objects that are\nsupplied as the value for this type parameter. This is derived\nfrom `T:'a` annotations appearing in the type definition.  If\nthis is `None`, then the default is inherited from the\nsurrounding context. See RFC #599 for details."],[13,"Ambiguous","","Require an explicit annotation. Occurs when multiple\n`T:'a` constraints are found.",256],[13,"Specific","","Use the given region as the default.",256],[3,"TypeParameterDef","",""],[12,"name","","",257],[12,"def_id","","",257],[12,"space","","",257],[12,"index","","",257],[12,"default","","",257],[12,"object_lifetime_default","","",257],[3,"RegionParameterDef","",""],[12,"name","","",258],[12,"def_id","","",258],[12,"space","","",258],[12,"index","","",258],[12,"bounds","","",258],[3,"Generics","","Information about the formal type/lifetime parameters associated\nwith an item or method. Analogous to ast::Generics."],[12,"types","","",259],[12,"regions","","",259],[3,"GenericPredicates","","Bounds on generics."],[12,"predicates","","",260],[4,"Predicate","",""],[13,"Trait","","Corresponds to `where Foo : Bar<A,B,C>`. `Foo` here would be\nthe `Self` type of the trait reference and `A`, `B`, and `C`\nwould be the parameters in the `TypeSpace`.",261],[13,"Equate","","where `T1 == T2`.",261],[13,"RegionOutlives","","where 'a : 'b",261],[13,"TypeOutlives","","where T : 'a",261],[13,"Projection","","where <T as TraitRef>::Name == X, approximately.\nSee `ProjectionPredicate` struct for details.",261],[3,"TraitPredicate","",""],[12,"trait_ref","","",262],[6,"PolyTraitPredicate","",""],[3,"EquatePredicate","",""],[6,"PolyEquatePredicate","",""],[3,"OutlivesPredicate","",""],[6,"PolyOutlivesPredicate","",""],[6,"PolyRegionOutlivesPredicate","",""],[6,"PolyTypeOutlivesPredicate","",""],[3,"ProjectionPredicate","","This kind of predicate has no *direct* correspondent in the\nsyntax, but it roughly corresponds to the syntactic forms:"],[12,"projection_ty","","",84],[12,"ty","","",84],[6,"PolyProjectionPredicate","",""],[3,"ProjectionTy","","Represents the projection of an associated type. In explicit UFCS\nform this would be written `<T as Trait<..>>::N`."],[12,"trait_ref","","The trait reference `T as Trait<..>`.",265],[12,"item_name","","The name `N` of the associated type.",265],[8,"ToPolyTraitRef","",""],[10,"to_poly_trait_ref","","",408],[8,"AsPredicate","",""],[10,"as_predicate","","",409],[3,"InstantiatedPredicates","","Represents the bounds declared on a particular set of type\nparameters.  Should eventually be generalized into a flag list of\nwhere clauses.  You can obtain a `InstantiatedPredicates` list from a\n`GenericPredicates` by using the `instantiate` method. Note that this method\nreflects an important semantic invariant of `InstantiatedPredicates`: while\nthe `GenericPredicates` are expressed in terms of the bound type\nparameters of the impl/trait/whatever, an `InstantiatedPredicates` instance\nrepresented a set of bounds for some particular instantiation,\nmeaning that the generic parameters have been substituted with\ntheir values."],[12,"predicates","","",266],[3,"ParameterEnvironment","","When type checking, we use the `ParameterEnvironment` to track\ndetails about the type/lifetime parameters that are in scope.\nIt primarily stores the bounds information."],[12,"tcx","","",267],[12,"free_substs","","See `construct_free_substs` for details.",267],[12,"implicit_region_bound","","Each type parameter has an implicit region bound that\nindicates it must outlive at least the function body (the user\nmay specify stronger requirements). This field indicates the\nregion of the callee.",267],[12,"caller_bounds","","Obligations that the caller must satisfy. This is basically\nthe set of bounds on the in-scope type parameters, translated\ninto Obligations.",267],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that have to do with the parameters in scope.",267],[3,"TypeScheme","","A \"type scheme\", in ML terminology, is a type combined with some\nset of generic types that the type is, well, generic over. In Rust\nterms, it is the \"type\" of a fn item or struct -- this type will\ninclude various generic parameters that must be substituted when\nthe item/struct is referenced. That is called converting the type\nscheme to a monotype."],[12,"generics","","",268],[12,"ty","","",268],[3,"TraitDef","","As `TypeScheme` but for a trait ref."],[12,"unsafety","","",339],[12,"paren_sugar","","If `true`, then this trait had the `#[rustc_paren_sugar]`\nattribute, indicating that it should be used with `Foo()`\nsugar. This is a temporary thing -- eventually any trait wil\nbe usable with the sugar (or without it).",339],[12,"generics","","Generic type definitions. Note that `Self` is listed in here\nas having a single bound, the trait itself (e.g., in the trait\n`Eq`, there is a single bound `Self : Eq`). This is so that\ndefault methods get to assume that the `Self` parameters\nimplements the trait.",339],[12,"trait_ref","","",339],[12,"associated_type_names","","A list of the associated types defined in this trait. Useful\nfor resolving `X::Foo` type markers.",339],[3,"ItemSubsts","","Records the substitutions used to translate the polytype for an\nitem into the monotype of an item reference."],[12,"substs","","",269],[4,"ClosureKind","",""],[13,"FnClosureKind","","",155],[13,"FnMutClosureKind","","",155],[13,"FnOnceClosureKind","","",155],[8,"ClosureTyper","",""],[10,"tcx","","",410],[10,"param_env","","",410],[10,"closure_kind","","Is this a `Fn`, `FnMut` or `FnOnce` closure? During typeck,\nreturns `None` if the kind of this closure has not yet been\ninferred.",410],[10,"closure_type","","Returns the argument/return types of this closure.",410],[10,"closure_upvars","","Returns the set of all upvars and their transformed\ntypes. During typeck, maybe return `None` if the upvar types\nhave not yet been inferred.",410],[5,"mk_ctxt","",""],[5,"mk_t","",""],[5,"mk_mach_int","",""],[5,"mk_mach_uint","",""],[5,"mk_mach_float","",""],[5,"mk_str","",""],[5,"mk_str_slice","",""],[5,"mk_enum","",""],[5,"mk_uniq","",""],[5,"mk_ptr","",""],[5,"mk_rptr","",""],[5,"mk_mut_rptr","",""],[5,"mk_imm_rptr","",""],[5,"mk_mut_ptr","",""],[5,"mk_imm_ptr","",""],[5,"mk_nil_ptr","",""],[5,"mk_vec","",""],[5,"mk_slice","",""],[5,"mk_tup","",""],[5,"mk_nil","",""],[5,"mk_bare_fn","",""],[5,"mk_ctor_fn","",""],[5,"mk_trait","",""],[5,"sort_bounds_list","",""],[5,"mk_projection","",""],[5,"mk_struct","",""],[5,"mk_closure","",""],[5,"mk_var","",""],[5,"mk_int_var","",""],[5,"mk_float_var","",""],[5,"mk_infer","",""],[5,"mk_param","",""],[5,"mk_self_type","",""],[5,"mk_param_from_def","",""],[5,"walk_ty","",""],[5,"maybe_walk_ty","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored."],[5,"fold_ty","",""],[5,"type_is_nil","",""],[5,"type_is_error","",""],[5,"type_needs_subst","",""],[5,"trait_ref_contains_error","",""],[5,"type_is_ty_var","",""],[5,"type_is_bool","",""],[5,"type_is_self","",""],[5,"type_is_vec","",""],[5,"type_is_structural","",""],[5,"type_is_simd","",""],[5,"sequence_element_type","",""],[5,"simd_type","",""],[5,"simd_size","",""],[5,"type_is_region_ptr","",""],[5,"type_is_unsafe_ptr","",""],[5,"type_is_unique","",""],[5,"type_is_scalar","",""],[5,"type_is_floating_point","","Returns true if this type is a floating point type and false otherwise."],[3,"TypeContents","","Type contents is how the type checker reasons about kinds.\nThey track what kinds of things are found within a type.  You can\nthink of them as kind of an \"anti-kind\".  They track the kinds of values\nand thinks that are contained in types.  Having a larger contents for\na type tends to rule that type *out* from various kinds.  For example,\na type that contains a reference is not sendable."],[12,"bits","","",270],[5,"type_interior_is_unsafe","",""],[5,"type_contents","",""],[5,"type_moves_by_default","",""],[5,"type_is_sized","",""],[5,"is_ffi_safe","",""],[5,"is_instantiable","",""],[4,"Representability","","Describes whether a type is representable. For types that are not\nrepresentable, 'SelfRecursive' and 'ContainsRecursive' are used to\ndistinguish between types that are recursive with themselves and types that\ncontain a different recursive type. These cases can therefore be treated\ndifferently when reporting errors."],[13,"Representable","","",271],[13,"ContainsRecursive","","",271],[13,"SelfRecursive","","",271],[5,"is_type_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums."],[5,"type_is_trait","",""],[5,"type_trait_info","",""],[5,"type_is_integral","",""],[5,"type_is_fresh","",""],[5,"type_is_uint","",""],[5,"type_is_char","",""],[5,"type_is_bare_fn","",""],[5,"type_is_bare_fn_item","",""],[5,"type_is_fp","",""],[5,"type_is_numeric","",""],[5,"type_is_signed","",""],[5,"type_is_machine","",""],[5,"type_is_c_like_enum","",""],[5,"deref","",""],[5,"type_content","",""],[5,"index","",""],[5,"array_element_ty","",""],[5,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum."],[5,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id."],[5,"impl_id_to_trait_ref","",""],[5,"node_id_to_type","",""],[5,"node_id_to_type_opt","",""],[5,"node_id_item_substs","",""],[5,"fn_is_variadic","",""],[5,"ty_fn_sig","",""],[5,"ty_fn_abi","","Returns the ABI of the given function."],[5,"ty_fn_args","",""],[5,"ty_fn_ret","",""],[5,"is_fn_ty","",""],[5,"ty_region","",""],[5,"free_region_from_def","",""],[5,"pat_ty","",""],[5,"pat_ty_opt","",""],[5,"expr_ty","",""],[5,"expr_ty_opt","",""],[5,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression."],[5,"expr_span","",""],[5,"local_var_name_str","",""],[5,"adjust_ty","","See `expr_ty_adjusted`"],[5,"adjust_ty_for_autoref","",""],[5,"unsize_ty","",""],[5,"resolve_expr","",""],[5,"expr_is_lval","",""],[4,"ExprKind","","We categorize expressions into three kinds.  The distinction between\nlvalue/rvalue is fundamental to the language.  The distinction between the\ntwo kinds of rvalues is an artifact of trans which reflects how we will\ngenerate code for that kind of expression.  See trans/expr.rs for more\ninformation."],[13,"LvalueExpr","","",411],[13,"RvalueDpsExpr","","",411],[13,"RvalueDatumExpr","","",411],[13,"RvalueStmtExpr","","",411],[5,"expr_kind","",""],[5,"stmt_node_id","",""],[5,"field_idx_strict","",""],[5,"impl_or_trait_item_idx","",""],[5,"ty_sort_string","",""],[5,"type_err_to_str","","Explains the source of a type err in a short, human readable way. This is meant to be placed\nin parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\nafterwards to present additional details, particularly when it comes to lifetime-related\nerrors."],[5,"note_and_explain_type_err","",""],[5,"provided_source","",""],[5,"provided_trait_methods","",""],[5,"trait_item","",""],[5,"trait_items","",""],[5,"trait_impl_polarity","",""],[5,"impl_or_trait_item","",""],[5,"is_associated_type","","Returns true if the given ID refers to an associated type and false if it\nrefers to anything else."],[5,"associated_type_parameter_index","","Returns the parameter index that the given associated type corresponds to."],[5,"trait_item_def_ids","",""],[5,"impl_trait_ref","",""],[5,"trait_ref_to_def_id","",""],[5,"try_add_builtin_trait","","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait."],[5,"ty_to_def_id","",""],[3,"VariantInfo","",""],[12,"args","","",272],[12,"arg_names","","",272],[12,"ctor_ty","","",272],[12,"name","","",272],[12,"id","","",272],[12,"disr_val","","",272],[12,"vis","","",272],[5,"substd_enum_variants","",""],[5,"item_path_str","",""],[4,"DtorKind","",""],[13,"NoDtor","","",273],[13,"TraitDtor","","",273],[5,"ty_dtor","",""],[5,"has_dtor","",""],[5,"with_path","",""],[5,"enum_is_univariant","",""],[5,"type_is_empty","",""],[5,"enum_variants","",""],[5,"enum_variant_with_id","",""],[5,"lookup_item_type","",""],[5,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref."],[5,"lookup_predicates","","Given the did of an item, returns its full set of predicates."],[5,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates."],[5,"predicates","",""],[5,"get_attrs","","Get the attributes of a definition."],[5,"has_attr","","Determine whether an item is annotated with an attribute"],[5,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`"],[5,"lookup_simd","","Determine whether an item is annotated with `#[simd]`"],[5,"lookup_repr_hints","","Obtain the representation annotation for a struct definition."],[5,"lookup_field_type","",""],[5,"lookup_struct_fields","",""],[5,"is_tuple_struct","",""],[5,"struct_fields","",""],[5,"tup_fields","",""],[3,"ClosureUpvar","",""],[12,"def","","",274],[12,"span","","",274],[12,"ty","","",274],[5,"closure_upvars","",""],[5,"is_binopable","",""],[5,"eval_repeat_count","",""],[5,"each_bound_trait_and_supertraits","",""],[5,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice."],[5,"get_tydesc_ty","",""],[5,"item_variances","",""],[5,"trait_has_default_impl","",""],[5,"record_trait_has_default_impl","","Records a trait-to-implementation mapping."],[5,"record_trait_implementation","","Records a trait-to-implementation mapping."],[5,"populate_implementations_for_type_if_necessary","","Populates the type context with all the implementations for the given type\nif necessary."],[5,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary."],[5,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`."],[5,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`."],[5,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`."],[5,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`."],[5,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it's calculated within. This is used by the `type_id` intrinsic."],[5,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope."],[5,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe \"outer\" view of a type or method to the \"inner\" view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions."],[5,"construct_parameter_environment","","See `ParameterEnvironment` struct def'n for details"],[4,"ExplicitSelfCategory","","The category of explicit self."],[13,"StaticExplicitSelfCategory","","",275],[13,"ByValueExplicitSelfCategory","","",275],[13,"ByReferenceExplicitSelfCategory","","",275],[13,"ByBoxExplicitSelfCategory","","",275],[5,"accumulate_lifetimes_in_type","","Pushes all the lifetimes in the given type onto the given list. A\n\"lifetime in a type\" is a lifetime specified by a reference or a lifetime\nin a list of type substitutions. This does *not* traverse into nominal\ntypes, nor does it resolve fictitious types."],[3,"Freevar","","A free variable referred to in a function."],[12,"def","","The variable being accessed free.",22],[12,"span","","",22],[6,"FreevarMap","",""],[6,"CaptureModeMap","",""],[6,"TraitMap","",""],[6,"GlobMap","",""],[5,"with_freevars","",""],[5,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`."],[5,"count_late_bound_regions","",""],[5,"binds_late_bound_regions","",""],[5,"no_late_bound_regions","",""],[5,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `'static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required."],[5,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation."],[5,"replace_late_bound_regions","","Replaces the late-bound-regions in `value` that are bound by `value`."],[5,"make_substs_for_receiver_types","","Substitutes the values for the receiver's type parameters\nthat are found in method, leaving the method's type parameters\nintact."],[4,"CopyImplementationError","",""],[13,"FieldDoesNotImplementCopy","","",412],[13,"VariantDoesNotImplementCopy","","",412],[13,"TypeIsStructural","","",412],[13,"TypeHasDestructor","","",412],[5,"can_type_implement_copy","",""],[8,"RegionEscape","",""],[10,"has_escaping_regions","","",413],[10,"has_regions_escaping_depth","","",413],[8,"HasProjectionTypes","",""],[10,"has_projection_types","","",414],[8,"ReferencesError","",""],[10,"references_error","","",415],[0,"ty_fold","rustc_lint::middle","Generalized type folding mechanism. The setup is a bit convoluted\nbut allows for convenient usage. Let T be an instance of some\n\"foldable type\" (one which implements `TypeFoldable`) and F be an\ninstance of a \"folder\" (a type which implements `TypeFolder`). Then\nthe setup is intended to be:"],[8,"TypeFoldable","rustc_lint::middle::ty_fold","The TypeFoldable trait is implemented for every type that can be folded.\nBasically, every type that has a corresponding method in TypeFolder."],[10,"fold_with","","",416],[8,"TypeFolder","","The TypeFolder trait defines the actual *folding*. There is a\nmethod defined for every foldable type. Each of these has a\ndefault implementation that does an \"identity\" fold. Within each\nidentity fold, it should invoke `foo.fold_with(self)` to fold each\nsub-item."],[10,"tcx","","",417],[10,"enter_region_binder","","Invoked by the `super_*` routines when we enter a region\nbinding level (for example, when entering a function\nsignature). This is used by clients that want to track the\nDebruijn index nesting level.",417],[10,"exit_region_binder","","Invoked by the `super_*` routines when we exit a region\nbinding level. This is used by clients that want to\ntrack the Debruijn index nesting level.",417],[10,"fold_binder","","",417],[10,"fold_ty","","",417],[10,"fold_mt","","",417],[10,"fold_trait_ref","","",417],[10,"fold_substs","","",417],[10,"fold_fn_sig","","",417],[10,"fold_output","","",417],[10,"fold_bare_fn_ty","","",417],[10,"fold_closure_ty","","",417],[10,"fold_region","","",417],[10,"fold_existential_bounds","","",417],[10,"fold_autoref","","",417],[10,"fold_item_substs","","",417],[5,"super_fold_binder","",""],[5,"super_fold_ty","",""],[5,"super_fold_substs","",""],[5,"super_fold_fn_sig","",""],[5,"super_fold_output","",""],[5,"super_fold_bare_fn_ty","",""],[5,"super_fold_closure_ty","",""],[5,"super_fold_trait_ref","",""],[5,"super_fold_mt","",""],[5,"super_fold_existential_bounds","",""],[5,"super_fold_autoref","",""],[5,"super_fold_item_substs","",""],[3,"BottomUpFolder","",""],[12,"tcx","","",280],[12,"fldop","","",280],[3,"RegionFolder","","Folds over the substructure of a type, visiting its component\ntypes and all regions that occur *free* within it."],[5,"collect_regions","",""],[5,"fold_regions","",""],[3,"RegionEraser","",""],[5,"erase_regions","",""],[5,"shift_region","",""],[5,"shift_regions","",""],[0,"ty_walk","rustc_lint::middle","An iterator over the type substructure."],[3,"TypeWalker","rustc_lint::middle::ty_walk",""],[0,"weak_lang_items","rustc_lint::middle","Validity checking for weak lang items"],[5,"check_crate","rustc_lint::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the\nlanguage items required by this crate, but not defined yet."],[5,"link_name","",""],[0,"session","rustc_lint",""],[0,"config","rustc_lint::session","Contains infrastructure for configuring the compiler, including parsing\ncommand line options."],[3,"Config","rustc_lint::session::config",""],[12,"target","","",418],[12,"int_type","","",418],[12,"uint_type","","",418],[4,"OptLevel","",""],[13,"No","","",306],[13,"Less","","",306],[13,"Default","","",306],[13,"Aggressive","","",306],[4,"DebugInfoLevel","",""],[13,"NoDebugInfo","","",307],[13,"LimitedDebugInfo","","",307],[13,"FullDebugInfo","","",307],[4,"OutputType","",""],[13,"OutputTypeBitcode","","",308],[13,"OutputTypeAssembly","","",308],[13,"OutputTypeLlvmAssembly","","",308],[13,"OutputTypeObject","","",308],[13,"OutputTypeExe","","",308],[13,"OutputTypeDepInfo","","",308],[3,"Options","",""],[12,"crate_types","","",309],[12,"gc","","",309],[12,"optimize","","",309],[12,"debug_assertions","","",309],[12,"debuginfo","","",309],[12,"lint_opts","","",309],[12,"describe_lints","","",309],[12,"output_types","","",309],[12,"search_paths","","",309],[12,"libs","","",309],[12,"maybe_sysroot","","",309],[12,"target_triple","","",309],[12,"cfg","","",309],[12,"test","","",309],[12,"parse_only","","",309],[12,"no_trans","","",309],[12,"treat_err_as_bug","","",309],[12,"no_analysis","","",309],[12,"debugging_opts","","",309],[12,"write_dependency_info","","Whether to write dependency files. It's (enabled, optional filename).",309],[12,"prints","","",309],[12,"cg","","",309],[12,"color","","",309],[12,"show_span","","",309],[12,"externs","","",309],[12,"crate_name","","",309],[12,"alt_std_name","","An optional name to use as the crate for std during std injection,\nwritten `extern crate std = \"name\"`. Default to \"std\". Used by\nout-of-tree drivers.",309],[12,"unstable_features","","Indicates how the compiler should treat unstable features",309],[4,"UnstableFeatures","",""],[13,"Disallow","","Hard errors for unstable features are active, as on\nbeta/stable channels.",310],[13,"Default","","Use the default lint levels",310],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time\nduring the build that feature-related lints are set to warn or above\nbecause the build turns on warnings-as-errors and uses lots of unstable\nfeatures. As a result, this this is always required for building Rust\nitself.",310],[4,"PrintRequest","",""],[13,"FileNames","","",311],[13,"Sysroot","","",311],[13,"CrateName","","",311],[4,"Input","",""],[13,"File","","Load source from file",312],[13,"Str","","The string is the source",312],[3,"OutputFilenames","",""],[12,"out_directory","","",313],[12,"out_filestem","","",313],[12,"single_output_file","","",313],[12,"extra","","",313],[5,"host_triple","",""],[5,"basic_options","","Some reasonable defaults"],[4,"EntryFnType","",""],[13,"EntryMain","","",314],[13,"EntryStart","","",314],[13,"EntryNone","","",314],[4,"CrateType","",""],[13,"CrateTypeExecutable","","",315],[13,"CrateTypeDylib","","",315],[13,"CrateTypeRlib","","",315],[13,"CrateTypeStaticlib","","",315],[4,"Passes","",""],[13,"SomePasses","","",316],[13,"AllPasses","","",316],[3,"CodegenOptions","",""],[12,"ar","","",317],[12,"linker","","",317],[12,"link_args","","",317],[12,"lto","","",317],[12,"target_cpu","","",317],[12,"target_feature","","",317],[12,"passes","","",317],[12,"llvm_args","","",317],[12,"save_temps","","",317],[12,"rpath","","",317],[12,"no_prepopulate_passes","","",317],[12,"no_vectorize_loops","","",317],[12,"no_vectorize_slp","","",317],[12,"soft_float","","",317],[12,"prefer_dynamic","","",317],[12,"no_integrated_as","","",317],[12,"no_redzone","","",317],[12,"relocation_model","","",317],[12,"code_model","","",317],[12,"metadata","","",317],[12,"extra_filename","","",317],[12,"codegen_units","","",317],[12,"remark","","",317],[12,"no_stack_check","","",317],[12,"debuginfo","","",317],[12,"opt_level","","",317],[12,"debug_assertions","","",317],[5,"basic_codegen_options","",""],[5,"build_codegen_options","",""],[6,"CodegenSetter","",""],[17,"CG_OPTIONS","",""],[3,"DebuggingOptions","",""],[12,"verbose","","",318],[12,"time_passes","","",318],[12,"count_llvm_insns","","",318],[12,"time_llvm_passes","","",318],[12,"trans_stats","","",318],[12,"asm_comments","","",318],[12,"no_verify","","",318],[12,"borrowck_stats","","",318],[12,"no_landing_pads","","",318],[12,"debug_llvm","","",318],[12,"count_type_sizes","","",318],[12,"meta_stats","","",318],[12,"print_link_args","","",318],[12,"gc","","",318],[12,"print_llvm_passes","","",318],[12,"ast_json","","",318],[12,"ast_json_noexpand","","",318],[12,"ls","","",318],[12,"save_analysis","","",318],[12,"print_move_fragments","","",318],[12,"flowgraph_print_loans","","",318],[12,"flowgraph_print_moves","","",318],[12,"flowgraph_print_assigns","","",318],[12,"flowgraph_print_all","","",318],[12,"print_region_graph","","",318],[12,"parse_only","","",318],[12,"no_trans","","",318],[12,"treat_err_as_bug","","",318],[12,"no_analysis","","",318],[12,"extra_plugins","","",318],[12,"unstable_options","","",318],[12,"print_enum_sizes","","",318],[12,"force_overflow_checks","","",318],[5,"basic_debugging_options","",""],[5,"build_debugging_options","",""],[6,"DebuggingSetter","",""],[17,"DB_OPTIONS","",""],[5,"default_lib_output","",""],[5,"default_configuration","",""],[5,"append_configuration","",""],[5,"build_configuration","",""],[5,"build_target_config","",""],[5,"short_optgroups","","Returns the \"short\" subset of the stable rustc command line options."],[5,"optgroups","","Returns all of the stable rustc command line options."],[4,"OptionStability","",""],[13,"Stable","","",319],[13,"Unstable","","",319],[3,"RustcOptGroup","",""],[12,"opt_group","","",320],[12,"stability","","",320],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options,\nincluding metadata for each option, such as whether the option is\npart of the stable long-term interface for rustc."],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for\neach option, such as whether the option is part of the stable\nlong-term interface for rustc."],[5,"parse_cfgspecs","",""],[5,"build_session_options","",""],[5,"get_unstable_features_setting","",""],[5,"parse_crate_types_from_list","",""],[0,"search_paths","rustc_lint::session",""],[3,"SearchPaths","rustc_lint::session::search_paths",""],[3,"Iter","",""],[4,"PathKind","",""],[13,"Native","","",322],[13,"Crate","","",322],[13,"Dependency","","",322],[13,"Framework","","",322],[13,"ExternFlag","","",322],[13,"All","","",322],[3,"Session","rustc_lint::session",""],[12,"target","","",324],[12,"host","","",324],[12,"opts","","",324],[12,"cstore","","",324],[12,"parse_sess","","",324],[12,"entry_fn","","",324],[12,"entry_type","","",324],[12,"plugin_registrar_fn","","",324],[12,"default_sysroot","","",324],[12,"local_crate_source_file","","",324],[12,"working_dir","","",324],[12,"lint_store","","",324],[12,"lints","","",324],[12,"crate_types","","",324],[12,"crate_metadata","","",324],[12,"features","","",324],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive\noperations such as auto-dereference and monomorphization.",324],[12,"can_print_warnings","","",324],[5,"build_session","",""],[5,"build_session_","",""],[5,"expect","",""],[5,"early_error","",""],[5,"early_warn","",""],[0,"util","rustc_lint",""],[0,"common","rustc_lint::util",""],[17,"FN_OUTPUT_NAME","rustc_lint::util::common",""],[3,"ErrorReported","",""],[5,"time","",""],[5,"indent","",""],[3,"Indenter","",""],[5,"indenter","",""],[5,"loop_query","",""],[5,"block_query","",""],[5,"can_reach","","K: Eq + Hash<S>, V, S, H: Hasher<S>"],[5,"memoized","","Memoizes a one-argument closure using the given RefCell containing\na type implementing MutableMap to serve as a cache."],[5,"path2cstr","",""],[0,"ppaux","rustc_lint::util",""],[8,"Repr","rustc_lint::util::ppaux","Produces a string suitable for debugging output."],[10,"repr","","",419],[8,"UserString","","Produces a string suitable for showing to the user."],[10,"user_string","","",420],[5,"note_and_explain_region","",""],[5,"explain_region_and_span","",""],[5,"bound_region_ptr_to_string","",""],[5,"bound_region_to_string","",""],[5,"region_ptr_to_string","",""],[5,"region_to_string","",""],[5,"mutability_to_string","",""],[5,"mt_to_string","",""],[5,"vec_map_to_string","",""],[5,"ty_to_string","",""],[5,"explicit_self_category_to_str","",""],[5,"parameterized","",""],[5,"ty_to_short_str","",""],[0,"nodemap","rustc_lint::util","An efficient hash map for node IDs"],[6,"FnvHashMap","rustc_lint::util::nodemap",""],[6,"FnvHashSet","",""],[6,"NodeMap","",""],[6,"DefIdMap","",""],[6,"NodeSet","",""],[6,"DefIdSet","",""],[5,"FnvHashMap","",""],[5,"FnvHashSet","",""],[5,"NodeMap","",""],[5,"DefIdMap","",""],[5,"NodeSet","",""],[5,"DefIdSet","",""],[3,"FnvHasher","","A speedy hash algorithm for node ids and def ids. The hashmap in\nlibcollections by default uses SipHash which isn't quite as speedy as we\nwant. In the compiler we're not really worried about DOS attempts, so we\njust default to a non-cryptographic hash."],[0,"snapshot_vec","rustc_lint::util","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits\nyou to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either\nto rollback to the start of the snapshot or commit those changes."],[4,"UndoLog","rustc_lint::util::snapshot_vec",""],[13,"OpenSnapshot","","Indicates where a snapshot started.",421],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",421],[13,"NewElem","","New variable with given index was created.",421],[13,"SetElem","","Variable with given index was changed *from* the given value.",421],[13,"Other","","Extensible set of actions",421],[3,"SnapshotVec","",""],[3,"Snapshot","",""],[8,"SnapshotVecDelegate","",""],[16,"Value","rustc_lint::util::snapshot_vec::SnapshotVecDelegate",""],[16,"Undo","",""],[10,"reverse","rustc_lint::util::snapshot_vec","",422],[0,"lev_distance","rustc_lint::util",""],[5,"lev_distance","rustc_lint::util::lev_distance",""],[0,"fs","rustc_lint::util",""],[5,"realpath","rustc_lint::util::fs","Returns an absolute path in the filesystem that `path` points to. The\nreturned path does not contain any symlinks in its hierarchy."],[0,"sha2","rustc_lint::util","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant."],[8,"Digest","rustc_lint::util::sha2","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions."],[10,"input","","Provide message data.",423],[10,"result","","Retrieve the digest result. This method may be called multiple times.",423],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",423],[10,"output_bits","","Get the output size in bits.",423],[10,"input_str","","Convenience function that feeds a string into a digest.",423],[10,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",423],[10,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",423],[11,"new_in","rustc_back::tempdir","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",424],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",424],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",424],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",424],[11,"close","","Close and remove the temporary directory",424],[11,"drop","","",424],[11,"to_string","rustc_back::target::apple_ios_base","",425],[11,"fmt","rustc_back::target","",426],[11,"clone","","",426],[11,"fmt","","",427],[11,"clone","","",427],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for\ncompilation, will certainly not work.",427],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",426],[11,"from_json","","Load a target descriptor from a JSON object.",426],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",426],[3,"Sha256","rustc_lint::util::sha2","The SHA-256 hash algorithm"],[5,"register_builtins","rustc_lint","Tell the `LintStore` about all the built-in lints (the ones\ndefined in this crate and the ones defined in\n`rustc::lint::builtin`)."]],"paths":[[3,"Lint"],[3,"Svh"],[4,"SawAbiComponent"],[4,"SawExprComponent"],[4,"SawStmtComponent"],[3,"Ident"],[3,"Name"],[3,"StrictVersionHashVisitor"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"DecodeContext"],[3,"DefId"],[4,"Option"],[3,"Span"],[3,"NestedItemsDropper"],[4,"Def"],[4,"Region"],[3,"FreeRegion"],[4,"CodeExtent"],[3,"DestructionScopeData"],[4,"BoundRegion"],[3,"Decoder"],[3,"Freevar"],[3,"UpvarBorrow"],[4,"UpvarCapture"],[4,"MethodOrigin"],[3,"EncodeContext"],[3,"Encoder"],[3,"SideTableEncodingIdVisitor"],[3,"Doc"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFG"],[3,"ConstQualif"],[4,"Mode"],[3,"CheckCrateVisitor"],[3,"CheckCrateVisitor"],[3,"CheckItemRecursionVisitor"],[4,"Context"],[3,"CheckLoopVisitor"],[3,"Matrix"],[4,"Constructor"],[4,"Usefulness"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[3,"RenamingRecorder"],[3,"MutationChecker"],[3,"AtBindingPatternVisitor"],[3,"RvalueContext"],[3,"RvalueContextDelegate"],[4,"const_val"],[3,"ConstEvalErr"],[4,"ErrKind"],[4,"EntryOrExit"],[3,"DataFlowContext"],[3,"Union"],[3,"Subtract"],[3,"MarkSymbolVisitor"],[3,"LifeSeeder"],[3,"DeadVisitor"],[3,"PathResolution"],[4,"MethodProvenance"],[4,"UnsafeContext"],[3,"EffectCheckVisitor"],[3,"EntryContext"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"TrackMatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"SimplifiedType"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"DepthFirstTraversal"],[3,"IntrinsicCheckingVisitor"],[3,"TransmuteRestriction"],[3,"Bivariate"],[3,"Rc"],[3,"TraitRef"],[3,"ProjectionPredicate"],[3,"FnSig"],[3,"CombineFields"],[3,"Generalizer"],[3,"Equate"],[3,"InferCtxt"],[3,"Binder"],[3,"Glb"],[3,"Lub"],[4,"Node"],[4,"Edge"],[3,"ConstraintGraph"],[4,"Constraint"],[4,"GenericKind"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[3,"SameRegions"],[3,"RegionSnapshot"],[3,"RegionVarBindings"],[4,"Classification"],[4,"Verify"],[4,"VarValue"],[3,"RegionAndOrigin"],[3,"OpportunisticTypeResolver"],[3,"FullTypeResolver"],[3,"TypeFreshener"],[3,"Sub"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"Delegate"],[4,"VarValue"],[3,"UnificationTable"],[3,"Delegate"],[3,"IntVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"fixup_err"],[4,"Result"],[4,"LangItem"],[3,"LanguageItems"],[3,"LanguageItemCollector"],[3,"Variable"],[3,"LiveNode"],[4,"LiveNodeKind"],[3,"IrMaps"],[3,"LocalInfo"],[4,"VarKind"],[3,"Liveness"],[3,"Users"],[4,"categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[3,"Expr"],[3,"Pat"],[3,"MemCategorizationContext"],[4,"ClosureKind"],[4,"LastPrivate"],[4,"PrivateDep"],[4,"ImportUse"],[3,"ReachableContext"],[3,"BlockRemainder"],[4,"InnermostDeclaringBlock"],[3,"DeclaringStatementContext"],[4,"InnermostEnclosingExpr"],[3,"Context"],[3,"RegionMaps"],[3,"RegionResolutionVisitor"],[4,"DefRegion"],[3,"LifetimeContext"],[4,"ScopeChain"],[3,"Annotator"],[3,"Index"],[3,"Checker"],[3,"Substs"],[4,"RegionSubsts"],[4,"ParamSpace"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"SubstFolder"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"MismatchedProjectionTypes"],[4,"ProjectionTyCandidate"],[3,"AssociatedTypeNormalizer"],[3,"Normalized"],[4,"ProjectionTyError"],[4,"MethodViolationCode"],[4,"ObjectSafetyViolation"],[3,"SelectionCache"],[4,"MethodMatchedData"],[4,"SelectionCandidate"],[4,"EvaluationResult"],[3,"SelectionContext"],[3,"TraitObligationStack"],[4,"MethodMatchResult"],[3,"Elaborator"],[3,"FilterToTraits"],[3,"VtableImplData"],[3,"VtableObjectData"],[3,"Obligation"],[4,"Vtable"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[4,"SelectionError"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[3,"field"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[3,"Method"],[3,"AssociatedType"],[3,"mt"],[3,"field_ty"],[3,"creader_cache_key"],[3,"ItemVariances"],[4,"Variance"],[4,"AutoAdjustment"],[4,"UnsizeKind"],[3,"AutoDerefRef"],[4,"AutoRef"],[3,"param_index"],[3,"MethodParam"],[3,"MethodObject"],[3,"MethodCallee"],[3,"MethodCall"],[4,"ExprAdjustment"],[4,"vtable_origin"],[3,"CtxtArenas"],[3,"TypeFlags"],[3,"ctxt"],[3,"TyS"],[3,"InternedTy"],[3,"BareFnTy"],[3,"ClosureTy"],[4,"FnOutput"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"UpvarId"],[4,"BorrowKind"],[4,"sty"],[3,"TyTrait"],[4,"terr_vstore_kind"],[3,"expected_found"],[4,"type_err"],[3,"ParamBounds"],[3,"ExistentialBounds"],[4,"BuiltinBound"],[3,"TyVid"],[3,"RegionVid"],[4,"InferTy"],[4,"UnconstrainedNumeric"],[4,"InferRegion"],[4,"ObjectLifetimeDefault"],[3,"TypeParameterDef"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[4,"Predicate"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionTy"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"ItemSubsts"],[3,"TypeContents"],[4,"Representability"],[3,"VariantInfo"],[4,"DtorKind"],[3,"ClosureUpvar"],[4,"ExplicitSelfCategory"],[3,"Vec"],[3,"Box"],[3,"OwnedSlice"],[3,"EnumSet"],[3,"BottomUpFolder"],[3,"RegionFolder"],[3,"RegionEraser"],[3,"TypeWalker"],[3,"Context"],[4,"astencode_tag"],[3,"LinkMeta"],[4,"DefIdSource"],[3,"entry"],[3,"EncodeVisitor"],[3,"ImplVisitor"],[4,"Family"],[4,"DefLike"],[3,"CrateDep"],[3,"CrateReader"],[4,"PMDSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"CrateSource"],[3,"CStore"],[3,"crate_metadata"],[4,"MetadataBlob"],[3,"Context"],[3,"ArchiveMetadata"],[3,"FileSearch"],[3,"MacroLoader"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[3,"Options"],[4,"UnstableFeatures"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"Registry"],[3,"RegistrarFinder"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"Context"],[3,"GatherNodeLevels"],[3,"ErrorReported"],[3,"Indenter"],[3,"LoopQueryVisitor"],[3,"BlockQueryVisitor"],[3,"P"],[3,"TraitDef"],[4,"TraitItem"],[3,"Path"],[3,"Ty"],[3,"Item"],[3,"Lifetime"],[3,"Spanned"],[4,"ExplicitSelf_"],[4,"Visibility"],[4,"Abi"],[4,"Mutability"],[4,"IntTy"],[4,"UintTy"],[3,"HashMap"],[3,"FnvHasher"],[3,"SnapshotVec"],[3,"FixedBuffer64"],[3,"Sha256"],[3,"ArchiveRO"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"CallConv"],[4,"DiagnosticSeverity"],[3,"Attribute"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[3,"AttrBuilder"],[4,"TypeKind"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[8,"LintPass"],[3,"ctxt"],[4,"InlinedItemRef"],[3,"EncodeParams"],[3,"ImportedFileMap"],[3,"MethodInfo"],[4,"FoundAst"],[3,"Library"],[3,"CratePaths"],[4,"FileMatch"],[8,"vtable_decoder_helpers"],[3,"CFGEdgeData"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[3,"Export"],[8,"Delegate"],[3,"Node"],[8,"Combine"],[8,"Combineable"],[8,"ErrorReporting"],[8,"Resolvable"],[8,"LatticeDir"],[8,"UnifyKey"],[3,"Node"],[8,"SimplyUnifiable"],[8,"InferCtxtMethodsForSimplyUnifiableTypes"],[4,"deref_kind"],[8,"ast_node"],[8,"Typer"],[4,"InteriorSafety"],[4,"AliasableReason"],[3,"SeparateVecsPerParamSpace"],[8,"Subst"],[4,"OrphanCheckErr"],[3,"CrateAnalysis"],[3,"CommonTypes"],[8,"ToPolyTraitRef"],[8,"AsPredicate"],[8,"ClosureTyper"],[4,"ExprKind"],[4,"CopyImplementationError"],[8,"RegionEscape"],[8,"HasProjectionTypes"],[8,"ReferencesError"],[8,"TypeFoldable"],[8,"TypeFolder"],[3,"Config"],[8,"Repr"],[8,"UserString"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[8,"Digest"],[3,"TempDir"],[4,"Arch"],[3,"Target"],[3,"TargetOptions"]]};
searchIndex['rustc_privacy'] = {"items":[[0,"","rustc_privacy",""],[5,"check_crate","",""]],"paths":[]};
searchIndex['syntax'] = {"items":[[0,"","syntax","The Rust parser and macro expander."],[0,"util","",""],[0,"interner","syntax::util","An \"interner\" is a data structure that associates values with usize tags and\nallows bidirectional lookup; i.e. given a value, one can easily find the\ntype, and vice versa."],[3,"Interner","syntax::util::interner",""],[3,"RcStr","",""],[3,"StrInterner","","A StrInterner differs from Interner<String> in that it accepts\n&str rather than RcStr, resulting in less allocation."],[11,"new","","",0],[11,"prefill","","",0],[11,"intern","","",0],[11,"gensym","","",0],[11,"get","","",0],[11,"len","","",0],[11,"find","","",0],[11,"clear","","",0],[11,"partial_cmp","","",1],[11,"lt","","",1],[11,"le","","",1],[11,"gt","","",1],[11,"ge","","",1],[11,"hash","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"new","","",1],[11,"cmp","","",1],[11,"fmt","","",1],[11,"fmt","","",1],[11,"borrow","","",1],[6,"Target","",""],[11,"deref","","",1],[11,"new","","",2],[11,"prefill","","",2],[11,"intern","","",2],[11,"gensym","","",2],[11,"gensym_copy","","Create a gensym with the same name as an existing\nentry.",2],[11,"get","","",2],[11,"len","","",2],[11,"find","","",2],[11,"clear","","",2],[11,"reset","","",2],[0,"small_vector","syntax::util",""],[3,"SmallVector","syntax::util::small_vector","A vector type optimized for cases where the size is almost always 0 or 1"],[3,"IntoIter","",""],[11,"from_iter","","",3],[11,"extend","","",3],[11,"zero","","",3],[11,"one","","",3],[11,"many","","",3],[11,"as_slice","","",3],[11,"push","","",3],[11,"push_all","","",3],[11,"get","","",3],[11,"expect_one","","",3],[11,"move_iter","","Deprecated: use `into_iter`.",3],[11,"into_iter","","",3],[11,"len","","",3],[11,"is_empty","","",3],[6,"Item","",""],[11,"next","","",4],[11,"size_hint","","",4],[11,"move_map","","",3],[0,"diagnostics","syntax",""],[0,"plugin","syntax::diagnostics",""],[5,"expand_diagnostic_used","syntax::diagnostics::plugin",""],[5,"expand_register_diagnostic","",""],[5,"expand_build_diagnostic_array","",""],[0,"registry","syntax::diagnostics",""],[3,"Registry","syntax::diagnostics::registry",""],[11,"clone","","",5],[11,"new","","",5],[11,"find_description","","",5],[0,"syntax","syntax",""],[0,"abi","",""],[3,"AbiData","syntax::abi",""],[4,"Os","",""],[13,"OsWindows","","",6],[13,"OsMacos","","",6],[13,"OsLinux","","",6],[13,"OsAndroid","","",6],[13,"OsFreebsd","","",6],[13,"OsiOS","","",6],[13,"OsDragonfly","","",6],[13,"OsBitrig","","",6],[13,"OsOpenbsd","","",6],[4,"Abi","",""],[13,"Cdecl","","",7],[13,"Stdcall","","",7],[13,"Fastcall","","",7],[13,"Aapcs","","",7],[13,"Win64","","",7],[13,"Rust","","",7],[13,"C","","",7],[13,"System","","",7],[13,"RustIntrinsic","","",7],[13,"RustCall","","",7],[4,"Architecture","",""],[13,"X86","","",8],[13,"X86_64","","",8],[13,"Arm","","",8],[13,"Mips","","",8],[13,"Mipsel","","",8],[4,"AbiArchitecture","",""],[13,"RustArch","","Not a real ABI (e.g., intrinsic)",9],[13,"AllArch","","An ABI that specifies cross-platform defaults (e.g., \"C\")",9],[13,"Archs","","Multiple architectures (bitset)",9],[5,"lookup","","Returns the ABI with the given name (if any)."],[5,"all_names","",""],[11,"fmt","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"fmt","","",7],[11,"clone","","",7],[11,"decode","","",7],[11,"encode","","",7],[11,"hash","","",7],[11,"eq","","",7],[11,"ne","","",7],[11,"fmt","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"index","","",7],[11,"data","","",7],[11,"name","","",7],[11,"fmt","","",7],[11,"fmt","","",6],[0,"ast","syntax",""],[3,"Ident","syntax::ast","An identifier contains a Name (index into the interner\ntable) and a SyntaxContext to track renaming and\nmacro expansion per Flatt et al., \"Macros\nThat Work Together\""],[12,"name","","",10],[12,"ctxt","","",10],[3,"Name","","A name is a part of an identifier, representing a string or gensym. It's\nthe result of interning."],[3,"Lifetime","",""],[12,"id","","",11],[12,"span","","",11],[12,"name","","",11],[3,"LifetimeDef","",""],[12,"lifetime","","",12],[12,"bounds","","",12],[3,"Path","","A \"Path\" is essentially Rust's notion of a name; for instance:\nstd::cmp::PartialEq  .  It's represented as a sequence of identifiers,\nalong with a bunch of supporting information."],[12,"span","","",13],[12,"global","","A `::foo` path, is relative to the crate root rather than current\nmodule (like paths in an import).",13],[12,"segments","","The segments in the path: the things separated by `::`.",13],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of\ntypes."],[12,"identifier","","The identifier portion of this path segment.",14],[12,"parameters","","Type/lifetime parameters attached to this path. They come in\ntwo flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that\nthis is more than just simple syntactic sugar; the use of\nparens affects the region binding rules, so we preserve the\ndistinction.",14],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`"],[12,"lifetimes","","The lifetime parameters for this path segment.",15],[12,"types","","The type parameters for this path segment, if present.",15],[12,"bindings","","Bindings (equality constraints) on associated types, if present.\nE.g., `Foo<A=Bar>`.",15],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`"],[12,"span","","Overall span",16],[12,"inputs","","`(A,B)`",16],[12,"output","","`C`",16],[3,"DefId","",""],[12,"krate","","",17],[12,"node","","",17],[3,"TyParam","",""],[12,"ident","","",18],[12,"id","","",18],[12,"bounds","","",18],[12,"default","","",18],[12,"span","","",18],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration\nof a function, enum, trait, etc."],[12,"lifetimes","","",19],[12,"ty_params","","",19],[12,"where_clause","","",19],[3,"WhereClause","",""],[12,"id","","",20],[12,"predicates","","",20],[3,"WhereBoundPredicate","",""],[12,"span","","",21],[12,"bound_lifetimes","","",21],[12,"bounded_ty","","",21],[12,"bounds","","",21],[3,"WhereRegionPredicate","",""],[12,"span","","",22],[12,"lifetime","","",22],[12,"bounds","","",22],[3,"WhereEqPredicate","",""],[12,"id","","",23],[12,"span","","",23],[12,"path","","",23],[12,"ty","","",23],[3,"Crate","",""],[12,"module","","",24],[12,"attrs","","",24],[12,"config","","",24],[12,"span","","",24],[12,"exported_macros","","",24],[3,"Block","",""],[12,"stmts","","",25],[12,"expr","","",25],[12,"id","","",25],[12,"rules","","",25],[12,"span","","",25],[3,"Pat","",""],[12,"id","","",26],[12,"node","","",26],[12,"span","","",26],[3,"FieldPat","",""],[12,"ident","","",27],[12,"pat","","",27],[12,"is_shorthand","","",27],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`"],[12,"pat","","",28],[12,"ty","","",28],[12,"init","","",28],[12,"id","","",28],[12,"span","","",28],[12,"source","","",28],[3,"Arm","","represents one arm of a 'match'"],[12,"attrs","","",29],[12,"pats","","",29],[12,"guard","","",29],[12,"body","","",29],[3,"Field","",""],[12,"ident","","",30],[12,"expr","","",30],[12,"span","","",30],[3,"Expr","",""],[12,"id","","",31],[12,"node","","",31],[12,"span","","",31],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual\npath, including the trait and the associated item, is stored\nsepparately. `position` represents the index of the associated\nitem qualified with this Self type."],[12,"ty","","",32],[12,"position","","",32],[3,"Delimited","","A delimited sequence of token trees"],[12,"delim","","The type of delimiter",33],[12,"open_span","","The span covering the opening delimiter",33],[12,"tts","","The delimited sequence of token trees",33],[12,"close_span","","The span covering the closing delimiter",33],[3,"SequenceRepetition","","A sequence of token treesee"],[12,"tts","","The sequence of token trees",34],[12,"separator","","The optional separator",34],[12,"op","","Whether the sequence can be repeated zero (*), or one or more times (+)",34],[12,"num_captures","","The number of `MatchNt`s that appear in the sequence (and subsequences)",34],[3,"MutTy","",""],[12,"ty","","",35],[12,"mutbl","","",35],[3,"TypeField","",""],[12,"ident","","",36],[12,"mt","","",36],[12,"span","","",36],[3,"TypeMethod","","Represents a required method in a trait declaration,\none without a default implementation"],[12,"ident","","",37],[12,"attrs","","",37],[12,"unsafety","","",37],[12,"abi","","",37],[12,"decl","","",37],[12,"generics","","",37],[12,"explicit_self","","",37],[12,"id","","",37],[12,"span","","",37],[12,"vis","","",37],[3,"AssociatedType","",""],[12,"attrs","","",38],[12,"ty_param","","",38],[3,"Typedef","",""],[12,"id","","",39],[12,"span","","",39],[12,"ident","","",39],[12,"vis","","",39],[12,"attrs","","",39],[12,"typ","","",39],[3,"TypeBinding","",""],[12,"id","","",40],[12,"ident","","",40],[12,"ty","","",40],[12,"span","","",40],[3,"Ty","",""],[12,"id","","",41],[12,"node","","",41],[12,"span","","",41],[3,"BareFnTy","",""],[12,"unsafety","","",42],[12,"abi","","",42],[12,"lifetimes","","",42],[12,"decl","","",42],[3,"InlineAsm","",""],[12,"asm","","",43],[12,"asm_str_style","","",43],[12,"outputs","","",43],[12,"inputs","","",43],[12,"clobbers","","",43],[12,"volatile","","",43],[12,"alignstack","","",43],[12,"dialect","","",43],[12,"expn_id","","",43],[3,"Arg","","represents an argument in a function header"],[12,"ty","","",44],[12,"pat","","",44],[12,"id","","",44],[3,"FnDecl","","represents the header (not the body) of a function declaration"],[12,"inputs","","",45],[12,"output","","",45],[12,"variadic","","",45],[3,"Method","",""],[12,"attrs","","",46],[12,"id","","",46],[12,"span","","",46],[12,"node","","",46],[3,"Mod","",""],[12,"inner","","A span from the first token past `{` to the last token until `}`.\nFor `mod foo;`, the inner span ranges from the first token\nto the last token in the external file.",47],[12,"items","","",47],[3,"ForeignMod","",""],[12,"abi","","",48],[12,"items","","",48],[3,"VariantArg","",""],[12,"ty","","",49],[12,"id","","",49],[3,"EnumDef","",""],[12,"variants","","",50],[3,"Variant_","",""],[12,"name","","",51],[12,"attrs","","",51],[12,"kind","","",51],[12,"id","","",51],[12,"disr_expr","","",51],[12,"vis","","",51],[3,"AttrId","",""],[3,"Attribute_","","Doc-comments are promoted to attributes that have is_sugared_doc = true"],[12,"id","","",52],[12,"style","","",52],[12,"value","","",52],[12,"is_sugared_doc","","",52],[3,"TraitRef","","TraitRef's appear in impls.\nresolve maps each TraitRef's ref_id to its defining trait; that's all\nthat the ref_id is for. The impl_id maps to the \"self type\" of this impl.\nIf this impl is an ItemImpl, the impl_id is redundant (it could be the\nsame as the impl's node id)."],[12,"path","","",53],[12,"ref_id","","",53],[3,"PolyTraitRef","",""],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",54],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",54],[12,"span","","",54],[3,"StructField_","",""],[12,"kind","","",55],[12,"id","","",55],[12,"ty","","",55],[12,"attrs","","",55],[3,"StructDef","",""],[12,"fields","","Fields, not including ctor",56],[12,"ctor_id","","ID of the constructor. This is only used for tuple- or enum-like\nstructs.",56],[3,"Item","",""],[12,"ident","","",57],[12,"attrs","","",57],[12,"id","","",57],[12,"node","","",57],[12,"vis","","",57],[12,"span","","",57],[3,"ForeignItem","",""],[12,"ident","","",58],[12,"attrs","","",58],[12,"node","","",58],[12,"id","","",58],[12,"span","","",58],[12,"vis","","",58],[3,"MacroDef","","A macro definition, in this crate or imported from another."],[12,"ident","","",59],[12,"attrs","","",59],[12,"id","","",59],[12,"span","","",59],[12,"imported_from","","",59],[12,"export","","",59],[12,"use_locally","","",59],[12,"allow_internal_unstable","","",59],[12,"body","","",59],[4,"PathParameters","",""],[13,"AngleBracketedParameters","","",60],[13,"ParenthesizedParameters","","",60],[4,"TyParamBound","","The AST represents all type param bounds as types.\ntypeck::collect::compute_bounds matches these against\nthe \"special\" built-in traits (see middle::lang_items) and\ndetects Copy, Send and Sync."],[13,"TraitTyParamBound","","",61],[13,"RegionTyParamBound","","",61],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the\nmodifier is `Maybe`. Negative bounds should also be handled here."],[13,"None","","",62],[13,"Maybe","","",62],[4,"WherePredicate","",""],[13,"BoundPredicate","","",63],[13,"RegionPredicate","","",63],[13,"EqPredicate","","",63],[4,"MetaItem_","",""],[13,"MetaWord","","",64],[13,"MetaList","","",64],[13,"MetaNameValue","","",64],[4,"BindingMode","",""],[13,"BindByRef","","",65],[13,"BindByValue","","",65],[4,"PatWildKind","",""],[13,"PatWildSingle","","Represents the wildcard pattern `_`",66],[13,"PatWildMulti","","Represents the wildcard pattern `..`",66],[4,"Pat_","",""],[13,"PatWild","","Represents a wildcard pattern (either `_` or `..`)",67],[13,"PatIdent","","A PatIdent may either be a new bound variable,\nor a nullary enum (in which case the third field\nis None).\nIn the nullary enum case, the parser can't determine\nwhich it is. The resolver determines this, and\nrecords this pattern's NodeId in an auxiliary\nset (of \"PatIdents that refer to nullary enums\")",67],[13,"PatEnum","","\"None\" means a * pattern where we don't bind the fields to names.",67],[13,"PatStruct","","",67],[13,"PatTup","","",67],[13,"PatBox","","",67],[13,"PatRegion","","",67],[13,"PatLit","","",67],[13,"PatRange","","",67],[13,"PatVec","","[a, b, ..i, y, z] is represented as:\nPatVec(box [a, b], Some(i), box [y, z])",67],[13,"PatMac","","",67],[4,"Mutability","",""],[13,"MutMutable","","",68],[13,"MutImmutable","","",68],[4,"BinOp_","",""],[13,"BiAdd","","",69],[13,"BiSub","","",69],[13,"BiMul","","",69],[13,"BiDiv","","",69],[13,"BiRem","","",69],[13,"BiAnd","","",69],[13,"BiOr","","",69],[13,"BiBitXor","","",69],[13,"BiBitAnd","","",69],[13,"BiBitOr","","",69],[13,"BiShl","","",69],[13,"BiShr","","",69],[13,"BiEq","","",69],[13,"BiLt","","",69],[13,"BiLe","","",69],[13,"BiNe","","",69],[13,"BiGe","","",69],[13,"BiGt","","",69],[4,"UnOp","",""],[13,"UnUniq","","",70],[13,"UnDeref","","",70],[13,"UnNot","","",70],[13,"UnNeg","","",70],[4,"Stmt_","",""],[13,"StmtDecl","","Could be an item or a local (let) binding:",71],[13,"StmtExpr","","Expr without trailing semi-colon (must have unit type):",71],[13,"StmtSemi","","Expr with trailing semi-colon (may have any type):",71],[13,"StmtMac","","",71],[4,"MacStmtStyle","",""],[13,"MacStmtWithSemicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };`\n`foo!(...);`, `foo![...];`",72],[13,"MacStmtWithBraces","","The macro statement had braces; e.g. foo! { ... }",72],[13,"MacStmtWithoutBraces","","The macro statement had parentheses or brackets and no semicolon; e.g.\n`foo!(...)`. All of these will end up being converted into macro\nexpressions.",72],[4,"LocalSource","","Where a local declaration came from: either a true `let ... =\n...;`, or one desugared from the pattern of a for loop."],[13,"LocalLet","","",73],[13,"LocalFor","","",73],[4,"Decl_","",""],[13,"DeclLocal","","A local (let) binding:",74],[13,"DeclItem","","An item binding:",74],[4,"BlockCheckMode","",""],[13,"DefaultBlock","","",75],[13,"UnsafeBlock","","",75],[4,"UnsafeSource","",""],[13,"CompilerGenerated","","",76],[13,"UserProvided","","",76],[4,"Expr_","",""],[13,"ExprBox","","First expr is the place; second expr is the value.",77],[13,"ExprVec","","",77],[13,"ExprCall","","",77],[13,"ExprMethodCall","","",77],[13,"ExprTup","","",77],[13,"ExprBinary","","",77],[13,"ExprUnary","","",77],[13,"ExprLit","","",77],[13,"ExprCast","","",77],[13,"ExprIf","","",77],[13,"ExprIfLet","","",77],[13,"ExprWhile","","",77],[13,"ExprWhileLet","","",77],[13,"ExprForLoop","","",77],[13,"ExprLoop","","",77],[13,"ExprMatch","","",77],[13,"ExprClosure","","",77],[13,"ExprBlock","","",77],[13,"ExprAssign","","",77],[13,"ExprAssignOp","","",77],[13,"ExprField","","",77],[13,"ExprTupField","","",77],[13,"ExprIndex","","",77],[13,"ExprRange","","",77],[13,"ExprPath","","Variable reference, possibly containing `::` and/or type\nparameters, e.g. foo::bar::<baz>. Optionally \"qualified\",\ne.g. `<Vec<T> as SomeTrait>::SomeType`.",77],[13,"ExprAddrOf","","",77],[13,"ExprBreak","","",77],[13,"ExprAgain","","",77],[13,"ExprRet","","",77],[13,"ExprInlineAsm","","",77],[13,"ExprMac","","",77],[13,"ExprStruct","","A struct literal expression.",77],[13,"ExprRepeat","","A vector literal constructed from one repeated element.",77],[13,"ExprParen","","No-op: used solely so we can pretty-print faithfully",77],[4,"MatchSource","",""],[13,"Normal","","",78],[13,"IfLetDesugar","","",78],[12,"contains_else_clause","syntax::ast::MatchSource","",78],[13,"WhileLetDesugar","syntax::ast","",78],[13,"ForLoopDesugar","","",78],[4,"CaptureClause","",""],[13,"CaptureByValue","","",79],[13,"CaptureByRef","","",79],[4,"KleeneOp","","A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\nfor token sequences."],[13,"ZeroOrMore","","",80],[13,"OneOrMore","","",80],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it\n parses the arguments to the invocation as a token-tree. This is a very\n loose structure, such that all sorts of different AST-fragments can\n be passed to syntax extensions using a uniform type."],[13,"TtToken","","A single token",81],[13,"TtDelimited","","A delimited sequence of token trees",81],[13,"TtSequence","","A kleene-style repetition sequence with a span",81],[4,"Mac_","","Represents a macro invocation. The Path indicates which macro\nis being invoked, and the vector of token-trees contains the source\nof the macro invocation.\nThere's only one flavor, now, so this could presumably be simplified."],[13,"MacInvocTT","","",82],[4,"StrStyle","",""],[13,"CookedStr","","",83],[13,"RawStr","","",83],[4,"Sign","",""],[13,"Minus","","",84],[13,"Plus","","",84],[4,"LitIntType","",""],[13,"SignedIntLit","","",85],[13,"UnsignedIntLit","","",85],[13,"UnsuffixedIntLit","","",85],[4,"Lit_","",""],[13,"LitStr","","",86],[13,"LitBinary","","",86],[13,"LitByte","","",86],[13,"LitChar","","",86],[13,"LitInt","","",86],[13,"LitFloat","","",86],[13,"LitFloatUnsuffixed","","",86],[13,"LitBool","","",86],[4,"TraitItem","","Represents a method declaration in a trait declaration, possibly including\na default implementation A trait method is either required (meaning it\ndoesn't have an implementation, just a signature) or provided (meaning it\nhas a default implementation)."],[13,"RequiredMethod","","",87],[13,"ProvidedMethod","","",87],[13,"TypeTraitItem","","",87],[4,"ImplItem","",""],[13,"MethodImplItem","","",88],[13,"TypeImplItem","","",88],[4,"IntTy","",""],[13,"TyIs","","",89],[13,"TyI8","","",89],[13,"TyI16","","",89],[13,"TyI32","","",89],[13,"TyI64","","",89],[4,"UintTy","",""],[13,"TyUs","","",90],[13,"TyU8","","",90],[13,"TyU16","","",90],[13,"TyU32","","",90],[13,"TyU64","","",90],[4,"FloatTy","",""],[13,"TyF32","","",91],[13,"TyF64","","",91],[4,"PrimTy","","Not represented directly in the AST, referred to by name through a ty_path."],[13,"TyInt","","",92],[13,"TyUint","","",92],[13,"TyFloat","","",92],[13,"TyStr","","",92],[13,"TyBool","","",92],[13,"TyChar","","",92],[4,"Ty_","","The different kinds of types recognized by the compiler"],[13,"TyVec","","",93],[13,"TyFixedLengthVec","","A fixed length array (`[T; n]`)",93],[13,"TyPtr","","A raw pointer (`*const T` or `*mut T`)",93],[13,"TyRptr","","A reference (`&'a T` or `&'a mut T`)",93],[13,"TyBareFn","","A bare function (e.g. `fn(usize) -> bool`)",93],[13,"TyTup","","A tuple (`(A, B, C, D,...)`)",93],[13,"TyPath","","A path (`module::module::...::Type`), optionally\n\"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",93],[13,"TyObjectSum","","Something like `A+B`. Note that `B` must always be a path.",93],[13,"TyPolyTraitRef","","A type like `for<'a> Foo<&'a Bar>`",93],[13,"TyParen","","No-op; kept solely so that we can pretty-print faithfully",93],[13,"TyTypeof","","Unused for now",93],[13,"TyInfer","","TyInfer means the type should be inferred instead of it having been\nspecified. This can appear anywhere in a type.",93],[4,"AsmDialect","",""],[13,"AsmAtt","","",94],[13,"AsmIntel","","",94],[4,"Unsafety","",""],[13,"Unsafe","","",95],[13,"Normal","","",95],[4,"ImplPolarity","",""],[13,"Positive","","impl Trait for Type",96],[13,"Negative","","impl !Trait for Type",96],[4,"FunctionRetTy","",""],[13,"NoReturn","","Functions with return type ! that always\nraise an error or exit (i.e. never return to the caller)",97],[13,"DefaultReturn","","Return type is not specified. Functions default to () and\nclosures default to inference. Span points to where return\ntype would be inserted.",97],[13,"Return","","Everything else",97],[4,"ExplicitSelf_","","Represents the kind of 'self' associated with a method"],[13,"SelfStatic","","No self",98],[13,"SelfValue","","`self`",98],[13,"SelfRegion","","`&'lt self`, `&'lt mut self`",98],[13,"SelfExplicit","","`self: TYPE`",98],[4,"Method_","",""],[13,"MethDecl","","Represents a method declaration",99],[13,"MethMac","","Represents a macro in method position",99],[4,"VariantKind","",""],[13,"TupleVariantKind","","",100],[13,"StructVariantKind","","",100],[4,"PathListItem_","",""],[13,"PathListIdent","","",101],[12,"name","syntax::ast::PathListItem_","",101],[12,"id","","",101],[13,"PathListMod","syntax::ast","",101],[12,"id","syntax::ast::PathListItem_","",101],[4,"ViewPath_","syntax::ast",""],[13,"ViewPathSimple","","`foo::bar::baz as quux`",102],[13,"ViewPathGlob","","`foo::bar::*`",102],[13,"ViewPathList","","`foo::bar::{a,b,c}`",102],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that\nare contained as statements within items. These two cases need to be\ndistinguished for pretty-printing."],[13,"AttrOuter","","",103],[13,"AttrInner","","",103],[4,"Visibility","",""],[13,"Public","","",104],[13,"Inherited","","",104],[4,"StructFieldKind","",""],[13,"NamedField","","",105],[13,"UnnamedField","","Element of a tuple-like struct",105],[4,"Item_","",""],[13,"ItemExternCrate","","",106],[13,"ItemUse","","",106],[13,"ItemStatic","","",106],[13,"ItemConst","","",106],[13,"ItemFn","","",106],[13,"ItemMod","","",106],[13,"ItemForeignMod","","",106],[13,"ItemTy","","",106],[13,"ItemEnum","","",106],[13,"ItemStruct","","",106],[13,"ItemTrait","","Represents a Trait Declaration",106],[13,"ItemDefaultImpl","","",106],[13,"ItemImpl","","",106],[13,"ItemMac","","A macro invocation (which includes macro definition)",106],[4,"ForeignItem_","",""],[13,"ForeignItemFn","","",107],[13,"ForeignItemStatic","","",107],[4,"InlinedItem","","The data we save and restore about an inlined item or method.  This is not\npart of the AST that we parse from a file, but it becomes part of the tree\nthat we trans."],[13,"IIItem","","",108],[13,"IITraitItem","","",108],[13,"IIImplItem","","",108],[13,"IIForeign","","",108],[6,"SyntaxContext","","A SyntaxContext represents a chain of macro-expandings\nand renamings. Each macro expansion corresponds to\na fresh usize"],[6,"Mrk","","A mark represents a unique id associated with a macro expansion"],[6,"FnIdent","","Function name (not all functions have names)"],[6,"CrateNum","",""],[6,"NodeId","",""],[6,"TyParamBounds","",""],[6,"CrateConfig","","The set of MetaItems that define the compilation environment of the crate,\nused to drive conditional compilation"],[6,"MetaItem","",""],[6,"BinOp","",""],[6,"Stmt","",""],[6,"Decl","",""],[6,"SpannedIdent","",""],[6,"Mac","",""],[6,"Lit","",""],[6,"ExplicitSelf","",""],[6,"Variant","",""],[6,"PathListItem","",""],[6,"ViewPath","",""],[6,"Attribute","","Meta-data associated with an item"],[6,"StructField","",""],[17,"EMPTY_CTXT","",""],[17,"ILLEGAL_CTXT","",""],[17,"LOCAL_CRATE","","Item definitions in the currently-compiled crate would have the CrateNum\nLOCAL_CRATE in their DefId."],[17,"CRATE_NODE_ID","",""],[17,"DUMMY_NODE_ID","","When parsing and doing expansions, we initially give all AST nodes this AST\nnode value. Then later, in the renumber pass, we renumber them to have\nsmall, positive ids."],[11,"cmp","","",10],[11,"partial_cmp","","",10],[11,"lt","","",10],[11,"le","","",10],[11,"gt","","",10],[11,"ge","","",10],[11,"hash","","",10],[11,"clone","","",10],[11,"new","","Construct an identifier with the given name and an empty context:",10],[11,"as_str","","",10],[11,"encode_with_hygiene","","",10],[11,"fmt","","",10],[11,"fmt","","",10],[11,"fmt","","",109],[11,"fmt","","",109],[11,"eq","","",10],[11,"ne","","",10],[11,"clone","","",109],[11,"decode","","",109],[11,"encode","","",109],[11,"hash","","",109],[11,"partial_cmp","","",109],[11,"lt","","",109],[11,"le","","",109],[11,"gt","","",109],[11,"ge","","",109],[11,"eq","","",109],[11,"ne","","",109],[11,"cmp","","",109],[11,"as_str","","",109],[11,"usize","","",109],[11,"ident","","",109],[11,"encode","","",10],[11,"decode","","",10],[11,"fmt","","",11],[11,"hash","","",11],[11,"decode","","",11],[11,"encode","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"clone","","",11],[11,"fmt","","",12],[11,"hash","","",12],[11,"decode","","",12],[11,"encode","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"clone","","",12],[11,"fmt","","",13],[11,"hash","","",13],[11,"decode","","",13],[11,"encode","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"fmt","","",14],[11,"hash","","",14],[11,"decode","","",14],[11,"encode","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"clone","","",14],[11,"fmt","","",60],[11,"hash","","",60],[11,"decode","","",60],[11,"encode","","",60],[11,"eq","","",60],[11,"ne","","",60],[11,"clone","","",60],[11,"none","","",60],[11,"is_empty","","",60],[11,"has_lifetimes","","",60],[11,"has_types","","",60],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",60],[11,"lifetimes","","",60],[11,"bindings","","",60],[11,"fmt","","",15],[11,"hash","","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"fmt","","",16],[11,"hash","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",17],[11,"hash","","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"partial_cmp","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"cmp","","",17],[11,"clone","","",17],[11,"local_id","","Read the node id, asserting that this def-id is krate-local.",17],[11,"fmt","","",61],[11,"hash","","",61],[11,"decode","","",61],[11,"encode","","",61],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[11,"fmt","","",62],[11,"hash","","",62],[11,"decode","","",62],[11,"encode","","",62],[11,"eq","","",62],[11,"ne","","",62],[11,"clone","","",62],[11,"fmt","","",18],[11,"hash","","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"fmt","","",19],[11,"hash","","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"is_parameterized","","",19],[11,"is_lt_parameterized","","",19],[11,"is_type_parameterized","","",19],[11,"fmt","","",20],[11,"hash","","",20],[11,"decode","","",20],[11,"encode","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"fmt","","",63],[11,"hash","","",63],[11,"decode","","",63],[11,"encode","","",63],[11,"eq","","",63],[11,"ne","","",63],[11,"clone","","",63],[11,"fmt","","",21],[11,"hash","","",21],[11,"decode","","",21],[11,"encode","","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"clone","","",21],[11,"fmt","","",22],[11,"hash","","",22],[11,"decode","","",22],[11,"encode","","",22],[11,"eq","","",22],[11,"ne","","",22],[11,"clone","","",22],[11,"fmt","","",23],[11,"hash","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"clone","","",23],[11,"fmt","","",24],[11,"hash","","",24],[11,"decode","","",24],[11,"encode","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"clone","","",24],[11,"fmt","","",64],[11,"hash","","",64],[11,"decode","","",64],[11,"encode","","",64],[11,"clone","","",64],[11,"eq","","",64],[11,"fmt","","",25],[11,"hash","","",25],[11,"decode","","",25],[11,"encode","","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"clone","","",25],[11,"fmt","","",26],[11,"hash","","",26],[11,"decode","","",26],[11,"encode","","",26],[11,"eq","","",26],[11,"ne","","",26],[11,"clone","","",26],[11,"fmt","","",27],[11,"hash","","",27],[11,"decode","","",27],[11,"encode","","",27],[11,"eq","","",27],[11,"ne","","",27],[11,"clone","","",27],[11,"fmt","","",65],[11,"hash","","",65],[11,"decode","","",65],[11,"encode","","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"clone","","",65],[11,"fmt","","",66],[11,"hash","","",66],[11,"decode","","",66],[11,"encode","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"clone","","",66],[11,"fmt","","",67],[11,"hash","","",67],[11,"decode","","",67],[11,"encode","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"clone","","",67],[11,"fmt","","",68],[11,"hash","","",68],[11,"decode","","",68],[11,"encode","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"clone","","",68],[11,"fmt","","",69],[11,"hash","","",69],[11,"decode","","",69],[11,"encode","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"clone","","",69],[11,"fmt","","",70],[11,"hash","","",70],[11,"decode","","",70],[11,"encode","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"clone","","",70],[11,"fmt","","",71],[11,"hash","","",71],[11,"decode","","",71],[11,"encode","","",71],[11,"eq","","",71],[11,"ne","","",71],[11,"clone","","",71],[11,"fmt","","",72],[11,"hash","","",72],[11,"decode","","",72],[11,"encode","","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"fmt","","",73],[11,"hash","","",73],[11,"decode","","",73],[11,"encode","","",73],[11,"eq","","",73],[11,"ne","","",73],[11,"clone","","",73],[11,"fmt","","",28],[11,"hash","","",28],[11,"decode","","",28],[11,"encode","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"fmt","","",74],[11,"hash","","",74],[11,"decode","","",74],[11,"encode","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"fmt","","",29],[11,"hash","","",29],[11,"decode","","",29],[11,"encode","","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"fmt","","",30],[11,"hash","","",30],[11,"decode","","",30],[11,"encode","","",30],[11,"eq","","",30],[11,"ne","","",30],[11,"clone","","",30],[11,"fmt","","",75],[11,"hash","","",75],[11,"decode","","",75],[11,"encode","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"clone","","",75],[11,"fmt","","",76],[11,"hash","","",76],[11,"decode","","",76],[11,"encode","","",76],[11,"eq","","",76],[11,"ne","","",76],[11,"clone","","",76],[11,"fmt","","",31],[11,"hash","","",31],[11,"decode","","",31],[11,"encode","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"clone","","",31],[11,"fmt","","",77],[11,"hash","","",77],[11,"decode","","",77],[11,"encode","","",77],[11,"eq","","",77],[11,"ne","","",77],[11,"clone","","",77],[11,"fmt","","",32],[11,"hash","","",32],[11,"decode","","",32],[11,"encode","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"clone","","",32],[11,"fmt","","",78],[11,"hash","","",78],[11,"decode","","",78],[11,"encode","","",78],[11,"eq","","",78],[11,"ne","","",78],[11,"clone","","",78],[11,"fmt","","",79],[11,"hash","","",79],[11,"decode","","",79],[11,"encode","","",79],[11,"eq","","",79],[11,"ne","","",79],[11,"clone","","",79],[11,"fmt","","",33],[11,"hash","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"clone","","",33],[11,"open_token","","Returns the opening delimiter as a token.",33],[11,"close_token","","Returns the closing delimiter as a token.",33],[11,"open_tt","","Returns the opening delimiter as a token tree.",33],[11,"close_tt","","Returns the closing delimiter as a token tree.",33],[11,"fmt","","",34],[11,"hash","","",34],[11,"decode","","",34],[11,"encode","","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"clone","","",34],[11,"fmt","","",80],[11,"hash","","",80],[11,"decode","","",80],[11,"encode","","",80],[11,"eq","","",80],[11,"ne","","",80],[11,"clone","","",80],[11,"fmt","","",81],[11,"hash","","",81],[11,"decode","","",81],[11,"encode","","",81],[11,"eq","","",81],[11,"ne","","",81],[11,"clone","","",81],[11,"len","","",81],[11,"get_tt","","",81],[11,"get_span","","Returns the `Span` corresponding to this token tree.",81],[11,"parse","","Use this token tree as a matcher to parse given tts.",81],[11,"fmt","","",82],[11,"hash","","",82],[11,"decode","","",82],[11,"encode","","",82],[11,"eq","","",82],[11,"ne","","",82],[11,"clone","","",82],[11,"fmt","","",83],[11,"hash","","",83],[11,"decode","","",83],[11,"encode","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"clone","","",83],[11,"fmt","","",84],[11,"hash","","",84],[11,"decode","","",84],[11,"encode","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"clone","","",84],[11,"new","","",84],[11,"fmt","","",85],[11,"hash","","",85],[11,"decode","","",85],[11,"encode","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"clone","","",85],[11,"suffix_len","","",85],[11,"fmt","","",86],[11,"hash","","",86],[11,"decode","","",86],[11,"encode","","",86],[11,"eq","","",86],[11,"ne","","",86],[11,"clone","","",86],[11,"fmt","","",35],[11,"hash","","",35],[11,"decode","","",35],[11,"encode","","",35],[11,"eq","","",35],[11,"ne","","",35],[11,"clone","","",35],[11,"fmt","","",36],[11,"hash","","",36],[11,"decode","","",36],[11,"encode","","",36],[11,"eq","","",36],[11,"ne","","",36],[11,"clone","","",36],[11,"fmt","","",37],[11,"hash","","",37],[11,"decode","","",37],[11,"encode","","",37],[11,"eq","","",37],[11,"ne","","",37],[11,"clone","","",37],[11,"fmt","","",87],[11,"hash","","",87],[11,"decode","","",87],[11,"encode","","",87],[11,"eq","","",87],[11,"ne","","",87],[11,"clone","","",87],[11,"fmt","","",88],[11,"hash","","",88],[11,"decode","","",88],[11,"encode","","",88],[11,"eq","","",88],[11,"ne","","",88],[11,"clone","","",88],[11,"fmt","","",38],[11,"hash","","",38],[11,"decode","","",38],[11,"encode","","",38],[11,"eq","","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"fmt","","",39],[11,"hash","","",39],[11,"decode","","",39],[11,"encode","","",39],[11,"eq","","",39],[11,"ne","","",39],[11,"clone","","",39],[11,"hash","","",89],[11,"decode","","",89],[11,"encode","","",89],[11,"clone","","",89],[11,"eq","","",89],[11,"fmt","","",89],[11,"fmt","","",89],[11,"suffix_len","","",89],[11,"hash","","",90],[11,"decode","","",90],[11,"encode","","",90],[11,"clone","","",90],[11,"eq","","",90],[11,"suffix_len","","",90],[11,"fmt","","",90],[11,"fmt","","",90],[11,"hash","","",91],[11,"decode","","",91],[11,"encode","","",91],[11,"eq","","",91],[11,"ne","","",91],[11,"clone","","",91],[11,"fmt","","",91],[11,"fmt","","",91],[11,"suffix_len","","",91],[11,"fmt","","",40],[11,"hash","","",40],[11,"decode","","",40],[11,"encode","","",40],[11,"eq","","",40],[11,"ne","","",40],[11,"clone","","",40],[11,"fmt","","",41],[11,"hash","","",41],[11,"decode","","",41],[11,"encode","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"fmt","","",92],[11,"hash","","",92],[11,"decode","","",92],[11,"encode","","",92],[11,"eq","","",92],[11,"ne","","",92],[11,"clone","","",92],[11,"fmt","","",42],[11,"hash","","",42],[11,"decode","","",42],[11,"encode","","",42],[11,"eq","","",42],[11,"ne","","",42],[11,"clone","","",42],[11,"fmt","","",93],[11,"hash","","",93],[11,"decode","","",93],[11,"encode","","",93],[11,"eq","","",93],[11,"ne","","",93],[11,"clone","","",93],[11,"fmt","","",94],[11,"hash","","",94],[11,"decode","","",94],[11,"encode","","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[11,"fmt","","",43],[11,"hash","","",43],[11,"decode","","",43],[11,"encode","","",43],[11,"eq","","",43],[11,"ne","","",43],[11,"clone","","",43],[11,"fmt","","",44],[11,"hash","","",44],[11,"decode","","",44],[11,"encode","","",44],[11,"eq","","",44],[11,"ne","","",44],[11,"clone","","",44],[11,"new_self","","",44],[11,"fmt","","",45],[11,"hash","","",45],[11,"decode","","",45],[11,"encode","","",45],[11,"eq","","",45],[11,"ne","","",45],[11,"clone","","",45],[11,"fmt","","",95],[11,"hash","","",95],[11,"decode","","",95],[11,"encode","","",95],[11,"eq","","",95],[11,"ne","","",95],[11,"clone","","",95],[11,"fmt","","",95],[11,"hash","","",96],[11,"decode","","",96],[11,"encode","","",96],[11,"eq","","",96],[11,"ne","","",96],[11,"clone","","",96],[11,"fmt","","",96],[11,"fmt","","",97],[11,"hash","","",97],[11,"decode","","",97],[11,"encode","","",97],[11,"eq","","",97],[11,"ne","","",97],[11,"clone","","",97],[11,"span","","",97],[11,"fmt","","",98],[11,"hash","","",98],[11,"decode","","",98],[11,"encode","","",98],[11,"eq","","",98],[11,"ne","","",98],[11,"clone","","",98],[11,"fmt","","",46],[11,"hash","","",46],[11,"decode","","",46],[11,"encode","","",46],[11,"eq","","",46],[11,"ne","","",46],[11,"clone","","",46],[11,"fmt","","",99],[11,"hash","","",99],[11,"decode","","",99],[11,"encode","","",99],[11,"eq","","",99],[11,"ne","","",99],[11,"clone","","",99],[11,"fmt","","",47],[11,"hash","","",47],[11,"decode","","",47],[11,"encode","","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"clone","","",47],[11,"fmt","","",48],[11,"hash","","",48],[11,"decode","","",48],[11,"encode","","",48],[11,"eq","","",48],[11,"ne","","",48],[11,"clone","","",48],[11,"fmt","","",49],[11,"hash","","",49],[11,"decode","","",49],[11,"encode","","",49],[11,"eq","","",49],[11,"ne","","",49],[11,"clone","","",49],[11,"fmt","","",100],[11,"hash","","",100],[11,"decode","","",100],[11,"encode","","",100],[11,"eq","","",100],[11,"ne","","",100],[11,"clone","","",100],[11,"fmt","","",50],[11,"hash","","",50],[11,"decode","","",50],[11,"encode","","",50],[11,"eq","","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"fmt","","",51],[11,"hash","","",51],[11,"decode","","",51],[11,"encode","","",51],[11,"eq","","",51],[11,"ne","","",51],[11,"clone","","",51],[11,"fmt","","",101],[11,"hash","","",101],[11,"decode","","",101],[11,"encode","","",101],[11,"eq","","",101],[11,"ne","","",101],[11,"clone","","",101],[11,"id","","",101],[11,"fmt","","",102],[11,"hash","","",102],[11,"decode","","",102],[11,"encode","","",102],[11,"eq","","",102],[11,"ne","","",102],[11,"clone","","",102],[11,"fmt","","",103],[11,"hash","","",103],[11,"decode","","",103],[11,"encode","","",103],[11,"eq","","",103],[11,"ne","","",103],[11,"clone","","",103],[11,"fmt","","",110],[11,"hash","","",110],[11,"decode","","",110],[11,"encode","","",110],[11,"eq","","",110],[11,"ne","","",110],[11,"clone","","",110],[11,"fmt","","",52],[11,"hash","","",52],[11,"decode","","",52],[11,"encode","","",52],[11,"eq","","",52],[11,"ne","","",52],[11,"clone","","",52],[11,"fmt","","",53],[11,"hash","","",53],[11,"decode","","",53],[11,"encode","","",53],[11,"eq","","",53],[11,"ne","","",53],[11,"clone","","",53],[11,"fmt","","",54],[11,"hash","","",54],[11,"decode","","",54],[11,"encode","","",54],[11,"eq","","",54],[11,"ne","","",54],[11,"clone","","",54],[11,"fmt","","",104],[11,"hash","","",104],[11,"decode","","",104],[11,"encode","","",104],[11,"eq","","",104],[11,"ne","","",104],[11,"clone","","",104],[11,"inherit_from","","",104],[11,"fmt","","",55],[11,"hash","","",55],[11,"decode","","",55],[11,"encode","","",55],[11,"eq","","",55],[11,"ne","","",55],[11,"clone","","",55],[11,"ident","","",55],[11,"fmt","","",105],[11,"hash","","",105],[11,"decode","","",105],[11,"encode","","",105],[11,"eq","","",105],[11,"ne","","",105],[11,"clone","","",105],[11,"is_unnamed","","",105],[11,"fmt","","",56],[11,"hash","","",56],[11,"decode","","",56],[11,"encode","","",56],[11,"eq","","",56],[11,"ne","","",56],[11,"clone","","",56],[11,"fmt","","",57],[11,"hash","","",57],[11,"decode","","",57],[11,"encode","","",57],[11,"eq","","",57],[11,"ne","","",57],[11,"clone","","",57],[11,"fmt","","",106],[11,"hash","","",106],[11,"decode","","",106],[11,"encode","","",106],[11,"eq","","",106],[11,"ne","","",106],[11,"clone","","",106],[11,"descriptive_variant","","",106],[11,"fmt","","",58],[11,"hash","","",58],[11,"decode","","",58],[11,"encode","","",58],[11,"eq","","",58],[11,"ne","","",58],[11,"clone","","",58],[11,"fmt","","",107],[11,"hash","","",107],[11,"decode","","",107],[11,"encode","","",107],[11,"eq","","",107],[11,"ne","","",107],[11,"clone","","",107],[11,"descriptive_variant","","",107],[11,"fmt","","",108],[11,"hash","","",108],[11,"decode","","",108],[11,"encode","","",108],[11,"eq","","",108],[11,"ne","","",108],[11,"clone","","",108],[11,"fmt","","",59],[11,"hash","","",59],[11,"decode","","",59],[11,"encode","","",59],[11,"eq","","",59],[11,"ne","","",59],[11,"clone","","",59],[0,"ast_map","syntax",""],[3,"Forest","syntax::ast_map","Stores a crate and any number of inlined items from other crates."],[3,"Map","","Represents a mapping from Node IDs to AST elements and their parent\nNode IDs"],[3,"NodesMatchingSuffix","",""],[4,"PathElem","",""],[13,"PathMod","","",111],[13,"PathName","","",111],[4,"Node","",""],[13,"NodeItem","","",112],[13,"NodeForeignItem","","",112],[13,"NodeTraitItem","","",112],[13,"NodeImplItem","","",112],[13,"NodeVariant","","",112],[13,"NodeExpr","","",112],[13,"NodeStmt","","",112],[13,"NodeArg","","",112],[13,"NodeLocal","","",112],[13,"NodePat","","",112],[13,"NodeBlock","","",112],[13,"NodeStructCtor","","NodeStructCtor represents a tuple struct.",112],[13,"NodeLifetime","","",112],[5,"path_to_string","",""],[5,"map_crate","",""],[5,"map_decoded_item","","Used for items loaded from external crate that are being inlined into this\ncrate.  The `path` should be the path to the item but should not include\nthe item itself."],[0,"blocks","","This module provides a simplified abstraction for working with\ncode blocks identified by their integer node-id.  In particular,\nit captures a common set of attributes that all \"function-like\nthings\" (represented by `FnLike` instances) share.  For example,\nall `FnLike` instances have a type signature (be it explicit or\ninferred).  And all `FnLike` instances have a body, i.e. the code\nthat is run when the function-like thing it represents is invoked."],[3,"FnLikeNode","syntax::ast_map::blocks","An FnLikeNode is a Node that is like a fn, in that it has a decl\nand a body (as well as a NodeId, a span, etc)."],[3,"FnParts","","Components shared by fn-like things (fn items, methods, closures)."],[12,"decl","","",113],[12,"body","","",113],[12,"kind","","",113],[12,"span","","",113],[12,"id","","",113],[4,"Code","","Carries either an FnLikeNode or a Block, as these are the two\nconstructs that correspond to \"code\" (as in, something from which\nwe can construct a control-flow graph)."],[13,"FnLikeCode","","",114],[13,"BlockCode","","",114],[8,"MaybeFnLike","","MaybeFnLike wraps a method that indicates if an object\ncorresponds to some FnLikeNode."],[10,"is_fn_like","","",115],[11,"is_fn_like","syntax::ast","",57],[11,"is_fn_like","","",87],[11,"is_fn_like","","",31],[11,"id","syntax::ast_map::blocks","",114],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Block node input.",114],[11,"to_fn_parts","","",116],[11,"body","","",116],[11,"decl","","",116],[11,"span","","",116],[11,"id","","",116],[11,"kind","","",116],[6,"PathElems","syntax::ast_map","The type of the iterator used by with_path."],[8,"FoldOps","",""],[11,"new_id","","",117],[11,"new_def_id","","",117],[11,"new_span","","",117],[8,"NodePrinter","",""],[10,"print_node","","",118],[11,"fmt","","",111],[11,"eq","","",111],[11,"ne","","",111],[11,"clone","","",111],[11,"name","","",111],[11,"fmt","","",111],[11,"fmt","","",112],[11,"new","","",119],[11,"krate","","",119],[11,"krate","","",120],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot\nbe found.",120],[11,"find","","Retrieve the Node corresponding to `id`, returning None if\ncannot be found.",120],[11,"get_parent","","Retrieve the parent NodeId for `id`, or `id` itself if no\nparent is registered in this map.",120],[11,"get_parent_did","","",120],[11,"get_foreign_abi","","",120],[11,"get_foreign_vis","","",120],[11,"expect_item","","",120],[11,"expect_struct","","",120],[11,"expect_variant","","",120],[11,"expect_foreign_item","","",120],[11,"expect_expr","","",120],[11,"get_path_elem","","returns the name associated with the given NodeId's AST",120],[11,"with_path","","",120],[11,"path_to_string","","",120],[11,"with_attrs","","Given a node ID and a closure, apply the closure to the array\nof attributes associated with the AST corresponding to the Node ID",120],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id's with paths that\nmatch `parts`.  (Requires `parts` is non-empty.)",120],[11,"opt_span","","",120],[11,"span","","",120],[11,"def_id_span","","",120],[11,"node_to_string","","",120],[11,"node_to_user_string","","",120],[6,"Item","",""],[11,"next","","",121],[0,"ast_util","syntax",""],[3,"IdRange","syntax::ast_util",""],[12,"min","","",122],[12,"max","","",122],[3,"IdVisitor","","A visitor that applies its operation to all of the node IDs\nin a visitable thing."],[12,"operation","","",123],[12,"pass_through_items","","",123],[12,"visited_outermost","","",123],[5,"path_name_i","",""],[5,"local_def","",""],[5,"is_local","",""],[5,"stmt_id","",""],[5,"binop_to_string","",""],[5,"lazy_binop","",""],[5,"is_shift_binop","",""],[5,"is_comparison_binop","",""],[5,"is_by_value_binop","","Returns `true` if the binary operator takes its arguments by value"],[5,"is_symmetric_binop","","Returns `true` if the binary operator is symmetric in the sense that LHS\nand RHS must have the same type. So the type of LHS can serve as an hint\nfor the type of RHS and vice versa."],[5,"is_by_value_unop","","Returns `true` if the unary operator takes its argument by value"],[5,"unop_to_string","",""],[5,"is_path","",""],[5,"int_ty_to_string","","Get a string representation of a signed int type, with its value.\nWe want to avoid \"45int\" and \"-3int\" in favor of \"45\" and \"-3\""],[5,"int_ty_max","",""],[5,"uint_ty_to_string","","Get a string representation of an unsigned int type, with its value.\nWe want to avoid \"42u\" in favor of \"42us\". \"42uint\" is right out."],[5,"uint_ty_max","",""],[5,"float_ty_to_string","",""],[5,"ident_to_path","",""],[5,"path_to_ident","",""],[5,"ident_to_pat","",""],[5,"name_to_dummy_lifetime","",""],[5,"impl_pretty_name","","Generate a \"pretty\" name for an `impl` from its type and trait.\nThis is designed so that symbols of `impl`'d methods give some\nhint of where they came from, (previously they would all just be\nlisted as `__extensions__::method_name::hash`, with no indication\nof the type)."],[5,"trait_method_to_ty_method","",""],[5,"trait_item_to_ty_method","","extract a TypeMethod from a TraitItem. if the TraitItem is\na default, pull out the useful fields to make a TypeMethod"],[5,"split_trait_methods","",""],[5,"struct_field_visibility","",""],[5,"operator_prec","","Maps a binary operator to its precedence"],[5,"empty_generics","",""],[5,"visit_ids_for_inlined_item","",""],[5,"compute_id_range_for_inlined_item","",""],[5,"compute_id_range_for_fn_body","","Computes the id range for a single fn body, ignoring nested items."],[5,"walk_pat","",""],[5,"struct_def_is_tuple_like","","Returns true if the given struct def is tuple-like; i.e. that its fields\nare unnamed."],[5,"pat_is_ident","","Returns true if the given pattern consists solely of an identifier\nand false otherwise."],[5,"path_name_eq","",""],[5,"segments_name_eq","",""],[5,"lit_is_str","","Returns true if this literal is a string and false otherwise."],[17,"AS_PREC","","Precedence of the `as` operator, which is a binary operator\nnot appearing in the prior table."],[8,"IdVisitingOperation","",""],[10,"visit_id","","",124],[8,"PostExpansionMethod","","Macro invocations are guaranteed not to occur after expansion is complete.\nExtracting fields of a method requires a dynamic check to make sure that it's\nnot a macro invocation. This check is guaranteed to succeed, assuming\nthat the invocations are indeed gone."],[10,"pe_ident","","",125],[10,"pe_generics","","",125],[10,"pe_abi","","",125],[10,"pe_explicit_self","","",125],[10,"pe_unsafety","","",125],[10,"pe_fn_decl","","",125],[10,"pe_body","","",125],[10,"pe_vis","","",125],[11,"fmt","","",122],[11,"decode","","",122],[11,"encode","","",122],[11,"max","","",122],[11,"empty","","",122],[11,"add","","",122],[11,"visit_mod","","",123],[11,"visit_foreign_item","","",123],[11,"visit_item","","",123],[11,"visit_local","","",123],[11,"visit_block","","",123],[11,"visit_stmt","","",123],[11,"visit_pat","","",123],[11,"visit_expr","","",123],[11,"visit_ty","","",123],[11,"visit_generics","","",123],[11,"visit_fn","","",123],[11,"visit_struct_field","","",123],[11,"visit_struct_def","","",123],[11,"visit_trait_item","","",123],[11,"visit_lifetime_ref","","",123],[11,"visit_lifetime_def","","",123],[11,"visit_trait_ref","","",123],[11,"pe_ident","syntax::ast","",46],[11,"pe_generics","","",46],[11,"pe_abi","","",46],[11,"pe_explicit_self","","",46],[11,"pe_unsafety","","",46],[11,"pe_fn_decl","","",46],[11,"pe_body","","",46],[11,"pe_vis","","",46],[0,"attr","syntax",""],[3,"Stability","syntax::attr","Represents the #[deprecated] and friends attributes."],[12,"level","","",126],[12,"feature","","",126],[12,"since","","",126],[12,"deprecated_since","","",126],[12,"reason","","",126],[4,"InlineAttr","",""],[13,"None","","",127],[13,"Hint","","",127],[13,"Always","","",127],[13,"Never","","",127],[4,"StabilityLevel","","The available stability levels."],[13,"Unstable","","",128],[13,"Stable","","",128],[4,"ReprAttr","",""],[13,"ReprAny","","",129],[13,"ReprInt","","",129],[13,"ReprExtern","","",129],[13,"ReprPacked","","",129],[4,"IntType","",""],[13,"SignedInt","","",130],[13,"UnsignedInt","","",130],[5,"mark_used","",""],[5,"is_used","",""],[5,"mk_name_value_item_str","",""],[5,"mk_name_value_item","",""],[5,"mk_list_item","",""],[5,"mk_word_item","",""],[5,"mk_attr_id","",""],[5,"mk_attr_inner","","Returns an inner attribute with the given value."],[5,"mk_attr_outer","","Returns an outer attribute with the given value."],[5,"mk_sugared_doc_attr","",""],[5,"contains","","Check if `needle` occurs in `haystack` by a structural\ncomparison. This is slightly subtle, and relies on ignoring the\nspan included in the `==` comparison a plain MetaItem."],[5,"contains_name","",""],[5,"first_attr_value_str_by_name","",""],[5,"last_meta_item_value_str_by_name","",""],[5,"sort_meta_items","",""],[5,"find_crate_name","",""],[5,"find_inline_attr","","Determine what `#[inline]` attribute is present in `attrs`, if any."],[5,"requests_inline","","True if `#[inline]` or `#[inline(always)]` is present in `attrs`."],[5,"cfg_matches","","Tests if a cfg-pattern matches the cfg set"],[5,"find_stability","","Find the first stability attribute. `None` if none exists."],[5,"require_unique_names","",""],[5,"find_repr_attrs","","Parse #[repr(...)] forms."],[8,"AttrMetaMethods","",""],[11,"check_name","","",131],[10,"name","","Retrieve the name of the meta item, e.g. `foo` in `#[foo]`,\n`#[foo=\"bar\"]` and `#[foo(bar)]`",131],[10,"value_str","","Gets the string value if self is a MetaNameValue variant\ncontaining a string, otherwise None.",131],[10,"meta_item_list","","Gets a list of inner meta items from a list MetaItem type.",131],[10,"span","","",131],[8,"AttributeMethods","",""],[10,"meta","","",132],[10,"with_desugared_doc","","",132],[11,"check_name","","",133],[11,"name","","",133],[11,"value_str","","",133],[11,"meta_item_list","","",133],[11,"span","","",133],[11,"name","","",134],[11,"value_str","","",134],[11,"meta_item_list","","",134],[11,"span","","",134],[11,"meta","","Extract the MetaItem from inside this Attribute.",133],[11,"with_desugared_doc","","Convert self to a normal #[doc=\"foo\"] comment, if it is a\ncomment like `///` or `/** */`. (Returns self unchanged for\nnon-sugared doc attributes.)",133],[11,"eq","","",127],[11,"ne","","",127],[11,"fmt","","",126],[11,"clone","","",126],[11,"decode","","",126],[11,"encode","","",126],[11,"fmt","","",128],[11,"clone","","",128],[11,"partial_cmp","","",128],[11,"lt","","",128],[11,"le","","",128],[11,"gt","","",128],[11,"ge","","",128],[11,"eq","","",128],[11,"ne","","",128],[11,"decode","","",128],[11,"encode","","",128],[11,"fmt","","",128],[11,"decode","","",129],[11,"encode","","",129],[11,"fmt","","",129],[11,"eq","","",129],[11,"ne","","",129],[11,"is_ffi_safe","","",129],[11,"decode","","",130],[11,"encode","","",130],[11,"fmt","","",130],[11,"eq","","",130],[11,"ne","","",130],[11,"hash","","",130],[11,"is_signed","","",130],[0,"codemap","syntax","The CodeMap tracks all the source code used within a single crate, mapping\nfrom integer byte positions to the original source code location. Each bit\nof source parsed during crate parsing (typically files, in-memory strings,\nor various bits of macro expansion) cover a continuous range of bytes in the\nCodeMap and are represented by FileMaps. Byte positions are stored in\n`spans` and used pervasively in the compiler. They are absolute positions\nwithin the CodeMap, which upon request can be converted to line and column\ninformation, source code snippets, etc."],[3,"BytePos","syntax::codemap","A byte offset. Keep this small (currently 32-bits), as AST contains\na lot of them."],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset\nis not equivalent to a character offset. The CodeMap will convert BytePos\nvalues to CharPos values as necessary."],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans\nare *absolute* positions from the beginning of the codemap, not positions\nrelative to FileMaps. Methods on the CodeMap can be used to relate spans back\nto the original source."],[12,"lo","","",135],[12,"hi","","",135],[12,"expn_id","","Information about where the macro came from, if this piece of\ncode was created by a macro expansion.",135],[3,"Spanned","",""],[12,"node","","",136],[12,"span","","",136],[3,"Loc","","A source code location used for error reporting"],[12,"file","","Information about the original source",137],[12,"line","","The (1-based) line number",137],[12,"col","","The (0-based) column offset",137],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj"],[12,"filename","","",138],[12,"line","","",138],[12,"col","","",138],[12,"file","","",138],[3,"FileMapAndLine","",""],[12,"fm","","",139],[12,"line","","",139],[3,"FileMapAndBytePos","",""],[12,"fm","","",140],[12,"pos","","",140],[3,"NameAndSpan","",""],[12,"name","","The name of the macro that was invoked to create the thing\nwith this Span.",141],[12,"format","","The format with which the macro was invoked.",141],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated\nfeatures internally without forcing the whole crate to opt-in\nto them.",141],[12,"span","","The span of the macro definition itself. The macro may not\nhave a sensible definition span (e.g. something defined\ncompletely inside libsyntax) in which case this is None.",141],[3,"ExpnInfo","","Extra information for tracking macro expansion of spans"],[12,"call_site","","The location of the actual macro invocation, e.g. `let x =\nfoo!();`",142],[12,"callee","","Information about the macro and its definition.",142],[3,"ExpnId","",""],[3,"FileLines","",""],[12,"file","","",143],[12,"lines","","",143],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap"],[12,"pos","","The absolute offset of the character in the CodeMap",144],[12,"bytes","","The number of bytes, >=2",144],[3,"FileMap","","A single source in the CodeMap"],[12,"name","","The name of the file that the source came from, source that doesn't\noriginate from files has names between angle brackets by convention,\ne.g. `<anon>`",145],[12,"src","","The complete source code",145],[12,"start_pos","","The start position of this source in the CodeMap",145],[12,"end_pos","","The end position of this source in the CodeMap",145],[12,"lines","","Locations of lines beginnings in the source code",145],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",145],[3,"CodeMap","",""],[12,"files","","",146],[3,"DistinctSources","",""],[3,"MalformedCodemapPositions","",""],[4,"MacroFormat","","The syntax with which a macro was invoked."],[13,"MacroAttribute","","e.g. #[derive(...)] <item>",147],[13,"MacroBang","","e.g. `format!()`",147],[4,"SpanSnippetError","",""],[13,"IllFormedSpan","","",148],[13,"DistinctSources","","",148],[13,"MalformedForCodemap","","",148],[13,"SourceNotAvailable","","",148],[12,"filename","syntax::codemap::SpanSnippetError","",148],[5,"spanned","syntax::codemap",""],[5,"respan","",""],[5,"dummy_spanned","",""],[5,"mk_sp","",""],[5,"original_sp","","Return the span itself if it doesn't come from a macro expansion,\notherwise return the call site span up to the `enclosing_sp` by\nfollowing the `expn_info` chain."],[6,"FileName","",""],[17,"DUMMY_SP","",""],[17,"COMMAND_LINE_SP","",""],[17,"NO_EXPANSION","",""],[17,"COMMAND_LINE_EXPN","",""],[8,"Pos","",""],[10,"from_usize","","",149],[10,"to_usize","","",149],[11,"fmt","","",150],[11,"partial_cmp","","",150],[11,"lt","","",150],[11,"le","","",150],[11,"gt","","",150],[11,"ge","","",150],[11,"hash","","",150],[11,"eq","","",150],[11,"ne","","",150],[11,"clone","","",150],[11,"fmt","","",151],[11,"partial_cmp","","",151],[11,"lt","","",151],[11,"le","","",151],[11,"gt","","",151],[11,"ge","","",151],[11,"hash","","",151],[11,"eq","","",151],[11,"ne","","",151],[11,"from_usize","","",150],[11,"to_usize","","",150],[6,"Output","",""],[11,"add","","",150],[6,"Output","",""],[11,"sub","","",150],[11,"encode","","",150],[11,"decode","","",150],[11,"from_usize","","",151],[11,"to_usize","","",151],[6,"Output","",""],[11,"add","","",151],[6,"Output","",""],[11,"sub","","",151],[11,"hash","","",135],[11,"fmt","","",135],[11,"clone","","",135],[11,"fmt","","",136],[11,"hash","","",136],[11,"decode","","",136],[11,"encode","","",136],[11,"eq","","",136],[11,"ne","","",136],[11,"clone","","",136],[11,"eq","","",135],[11,"ne","","",135],[11,"encode","","",135],[11,"decode","","",135],[11,"fmt","","",147],[11,"hash","","",147],[11,"clone","","",147],[11,"fmt","","",141],[11,"hash","","",141],[11,"clone","","",141],[11,"fmt","","",142],[11,"hash","","",142],[11,"decode","","",152],[11,"encode","","",152],[11,"hash","","",152],[11,"fmt","","",152],[11,"clone","","",152],[11,"eq","","",152],[11,"ne","","",152],[11,"from_llvm_cookie","","",152],[11,"to_llvm_cookie","","",152],[11,"eq","","",144],[11,"ne","","",144],[11,"decode","","",144],[11,"encode","","",144],[11,"encode","","",145],[11,"decode","","",145],[11,"next_line","","EFFECT: register a start-of-line offset in the\ntable of line-beginnings.\nUNCHECKED INVARIANT: these offsets must be added in the right\norder and must be in the right places; there is shared knowledge\nabout what ends a line between this file and parse.rs\nWARNING: pos param here is the offset relative to start of CodeMap,\nand CodeMap will append a newline when adding a filemap without a newline at the end,\nso the safe way to call this is with value calculated as\nfilemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",145],[11,"get_line","","get a line from the list of pre-computed line-beginnings\n",145],[11,"record_multibyte_char","","",145],[11,"is_real_file","","",145],[11,"is_imported","","",145],[11,"new","","",146],[11,"new_filemap","","",146],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external\ncrate. The source code of such an \"imported filemap\" is not available,\nbut we still know enough to generate accurate debuginfo location\ninformation for things inlined from other crates.",146],[11,"mk_substr_filename","","",146],[11,"lookup_char_pos","","Lookup source information about a BytePos",146],[11,"lookup_char_pos_adj","","",146],[11,"span_to_string","","",146],[11,"span_to_filename","","",146],[11,"span_to_lines","","",146],[11,"span_to_snippet","","",146],[11,"get_filemap","","",146],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",146],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap and above.",146],[11,"record_expansion","","",146],[11,"with_expn_info","","",146],[11,"span_allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable]\nitems can be used (that is, a macro marked with\n`#[allow_internal_unstable]`).",146],[11,"fmt","","",148],[11,"eq","","",148],[11,"ne","","",148],[11,"clone","","",148],[11,"fmt","","",153],[11,"eq","","",153],[11,"ne","","",153],[11,"clone","","",153],[11,"fmt","","",154],[11,"eq","","",154],[11,"ne","","",154],[11,"clone","","",154],[0,"config","syntax",""],[5,"strip_unconfigured_items","syntax::config",""],[5,"strip_items","",""],[0,"diagnostic","syntax",""],[3,"FatalError","syntax::diagnostic","This structure is used to signify that a task has panicked with a fatal error\nfrom the diagnostics. You can use this with the `Any` trait to figure out\nhow a rustc task died (if so desired)."],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug`\nor `.span_bug` rather than a failed assertion, etc."],[3,"SpanHandler","","A span-handler is like a handler but also\naccepts span information for source-location\nreporting."],[12,"handler","","",155],[12,"cm","","",155],[3,"Handler","","A handler deals with errors; certain errors\n(fatal, bug, unimpl) may cause immediate exit,\nothers log errors for later reporting."],[12,"can_emit_warnings","","",156],[3,"EmitterWriter","",""],[4,"RenderSpan","",""],[13,"FullSpan","","A FullSpan renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary of\nthe source code covered by the span.",157],[13,"FileLine","","A FileLine renders with just a line for the message prefixed\nby file:linenum.",157],[4,"ColorConfig","",""],[13,"Auto","","",158],[13,"Always","","",158],[13,"Never","","",158],[4,"Level","",""],[13,"Bug","","",159],[13,"Fatal","","",159],[13,"Error","","",159],[13,"Warning","","",159],[13,"Note","","",159],[13,"Help","","",159],[5,"mk_span_handler","",""],[5,"default_handler","",""],[5,"mk_handler","",""],[5,"expect","",""],[8,"Emitter","",""],[10,"emit","","",160],[10,"custom_emit","","",160],[11,"clone","","",157],[11,"clone","","",158],[11,"span_fatal","","",155],[11,"span_fatal_with_code","","",155],[11,"span_err","","",155],[11,"span_err_with_code","","",155],[11,"span_warn","","",155],[11,"span_warn_with_code","","",155],[11,"span_note","","",155],[11,"span_end_note","","",155],[11,"span_help","","",155],[11,"fileline_note","","",155],[11,"fileline_help","","",155],[11,"span_bug","","",155],[11,"span_unimpl","","",155],[11,"handler","","",155],[11,"fatal","","",156],[11,"err","","",156],[11,"bump_err_count","","",156],[11,"err_count","","",156],[11,"has_errors","","",156],[11,"abort_if_errors","","",156],[11,"warn","","",156],[11,"note","","",156],[11,"help","","",156],[11,"bug","","",156],[11,"unimpl","","",156],[11,"emit","","",156],[11,"emit_with_code","","",156],[11,"custom_emit","","",156],[11,"fmt","","",159],[11,"clone","","",159],[11,"eq","","",159],[11,"ne","","",159],[11,"fmt","","",159],[11,"stderr","","",161],[11,"new","","",161],[11,"emit","","",161],[11,"custom_emit","","",161],[0,"feature_gate","syntax","Feature gating"],[3,"Features","syntax::feature_gate","A set of features to be used by later passes."],[12,"unboxed_closures","","",162],[12,"rustc_diagnostic_macros","","",162],[12,"visible_private_types","","",162],[12,"allow_quote","","",162],[12,"allow_asm","","",162],[12,"allow_log_syntax","","",162],[12,"allow_concat_idents","","",162],[12,"allow_trace_macros","","",162],[12,"allow_internal_unstable","","",162],[12,"allow_custom_derive","","",162],[12,"old_orphan_check","","",162],[12,"simd_ffi","","",162],[12,"unmarked_api","","",162],[12,"declared_stable_lang_features","","spans of #![feature] attrs for stable language features. for error reporting",162],[12,"declared_lib_features","","#![feature] attrs for non-language (library) features",162],[4,"AttributeType","",""],[13,"Normal","","Normal, builtin attribute that is consumed\nby the compiler before the unused_attribute check",163],[13,"Whitelisted","","Builtin attribute that may not be consumed by the compiler\nbefore the unused_attribute check. These attributes\nwill be ignored by the unused_attribute lint",163],[13,"Gated","","Is gated by a given feature gate and reason\nThese get whitelisted too",163],[13,"CrateLevel","","Builtin attribute that is only allowed at the crate level",163],[5,"emit_feature_err","",""],[5,"emit_feature_warn","",""],[5,"check_crate_macros","",""],[5,"check_crate","",""],[17,"KNOWN_ATTRIBUTES","",""],[17,"EXPLAIN_ASM","",""],[17,"EXPLAIN_LOG_SYNTAX","",""],[17,"EXPLAIN_CONCAT_IDENTS","",""],[17,"EXPLAIN_TRACE_MACROS","",""],[17,"EXPLAIN_ALLOW_INTERNAL_UNSTABLE","",""],[17,"EXPLAIN_CUSTOM_DERIVE","",""],[11,"fmt","","",163],[11,"eq","","",163],[11,"ne","","",163],[11,"new","","",162],[0,"fold","syntax","A Folder represents an AST->AST fold; it accepts an AST piece,\nand returns a piece of the same type. So, for instance, macro\nexpansion is a Folder that walks over an AST and produces another\nAST."],[5,"noop_fold_meta_items","syntax::fold",""],[5,"noop_fold_view_path","",""],[5,"fold_attrs","",""],[5,"noop_fold_arm","",""],[5,"noop_fold_decl","",""],[5,"noop_fold_ty_binding","",""],[5,"noop_fold_ty","",""],[5,"noop_fold_foreign_mod","",""],[5,"noop_fold_variant","",""],[5,"noop_fold_ident","",""],[5,"noop_fold_usize","",""],[5,"noop_fold_path","",""],[5,"noop_fold_path_parameters","",""],[5,"noop_fold_angle_bracketed_parameter_data","",""],[5,"noop_fold_parenthesized_parameter_data","",""],[5,"noop_fold_local","",""],[5,"noop_fold_attribute","",""],[5,"noop_fold_explicit_self_underscore","",""],[5,"noop_fold_explicit_self","",""],[5,"noop_fold_mac","",""],[5,"noop_fold_meta_item","",""],[5,"noop_fold_arg","",""],[5,"noop_fold_tt","",""],[5,"noop_fold_tts","",""],[5,"noop_fold_token","",""],[5,"noop_fold_interpolated","","apply folder to elements of interpolated nodes"],[5,"noop_fold_fn_decl","",""],[5,"noop_fold_ty_param_bound","",""],[5,"noop_fold_ty_param","",""],[5,"noop_fold_ty_params","",""],[5,"noop_fold_lifetime","",""],[5,"noop_fold_lifetime_def","",""],[5,"noop_fold_lifetimes","",""],[5,"noop_fold_lifetime_defs","",""],[5,"noop_fold_opt_lifetime","",""],[5,"noop_fold_generics","",""],[5,"noop_fold_where_clause","",""],[5,"noop_fold_where_predicate","",""],[5,"noop_fold_typedef","",""],[5,"noop_fold_associated_type","",""],[5,"noop_fold_struct_def","",""],[5,"noop_fold_trait_ref","",""],[5,"noop_fold_poly_trait_ref","",""],[5,"noop_fold_struct_field","",""],[5,"noop_fold_field","",""],[5,"noop_fold_mt","",""],[5,"noop_fold_opt_bounds","",""],[5,"noop_fold_block","",""],[5,"noop_fold_item_underscore","",""],[5,"noop_fold_trait_item","",""],[5,"noop_fold_impl_item","",""],[5,"noop_fold_type_method","",""],[5,"noop_fold_mod","",""],[5,"noop_fold_crate","",""],[5,"noop_fold_item","",""],[5,"noop_fold_item_simple","",""],[5,"noop_fold_foreign_item","",""],[5,"noop_fold_method","",""],[5,"noop_fold_pat","",""],[5,"noop_fold_expr","",""],[5,"noop_fold_stmt","",""],[8,"MoveMap","",""],[10,"move_map","","",164],[8,"Folder","",""],[11,"fold_crate","","",165],[11,"fold_meta_items","","",165],[11,"fold_meta_item","","",165],[11,"fold_view_path","","",165],[11,"fold_foreign_item","","",165],[11,"fold_item","","",165],[11,"fold_item_simple","","",165],[11,"fold_struct_field","","",165],[11,"fold_item_underscore","","",165],[11,"fold_trait_item","","",165],[11,"fold_impl_item","","",165],[11,"fold_fn_decl","","",165],[11,"fold_type_method","","",165],[11,"fold_method","","",165],[11,"fold_block","","",165],[11,"fold_stmt","","",165],[11,"fold_arm","","",165],[11,"fold_pat","","",165],[11,"fold_decl","","",165],[11,"fold_expr","","",165],[11,"fold_ty","","",165],[11,"fold_ty_binding","","",165],[11,"fold_mod","","",165],[11,"fold_foreign_mod","","",165],[11,"fold_variant","","",165],[11,"fold_ident","","",165],[11,"fold_usize","","",165],[11,"fold_path","","",165],[11,"fold_path_parameters","","",165],[11,"fold_angle_bracketed_parameter_data","","",165],[11,"fold_parenthesized_parameter_data","","",165],[11,"fold_local","","",165],[11,"fold_mac","","",165],[11,"fold_explicit_self","","",165],[11,"fold_explicit_self_underscore","","",165],[11,"fold_lifetime","","",165],[11,"fold_lifetime_def","","",165],[11,"fold_attribute","","",165],[11,"fold_arg","","",165],[11,"fold_generics","","",165],[11,"fold_trait_ref","","",165],[11,"fold_poly_trait_ref","","",165],[11,"fold_struct_def","","",165],[11,"fold_lifetimes","","",165],[11,"fold_lifetime_defs","","",165],[11,"fold_ty_param","","",165],[11,"fold_ty_params","","",165],[11,"fold_tt","","",165],[11,"fold_tts","","",165],[11,"fold_token","","",165],[11,"fold_interpolated","","",165],[11,"fold_opt_lifetime","","",165],[11,"fold_variant_arg","","",165],[11,"fold_opt_bounds","","",165],[11,"fold_bounds","","",165],[11,"fold_ty_param_bound","","",165],[11,"fold_mt","","",165],[11,"fold_field","","",165],[11,"fold_where_clause","","",165],[11,"fold_where_predicate","","",165],[11,"fold_typedef","","",165],[11,"fold_associated_type","","",165],[11,"new_id","","",165],[11,"new_span","","",165],[11,"move_map","collections::vec","",166],[0,"owned_slice","syntax",""],[3,"OwnedSlice","syntax::owned_slice","A non-growable owned slice. This is a separate type to allow the\nrepresentation to change."],[11,"cmp","","",167],[11,"partial_cmp","","",167],[11,"lt","","",167],[11,"le","","",167],[11,"gt","","",167],[11,"ge","","",167],[11,"eq","","",167],[11,"ne","","",167],[11,"hash","","",167],[11,"fmt","","",167],[11,"empty","","",167],[11,"from_vec","","",167],[11,"into_vec","","",167],[11,"as_slice","","",167],[11,"move_iter","","",167],[11,"map","","",167],[6,"Target","",""],[11,"deref","","",167],[11,"default","","",167],[11,"clone","","",167],[11,"from_iter","","",167],[11,"encode","","",167],[11,"decode","","",167],[0,"parse","syntax","The main parser interface"],[3,"ParseSess","syntax::parse","Info about a parsing session."],[12,"span_diagnostic","","",168],[12,"node_id","","",168],[5,"new_parse_sess","",""],[5,"new_parse_sess_special_handler","",""],[5,"parse_crate_from_file","",""],[5,"parse_crate_attrs_from_file","",""],[5,"parse_crate_from_source_str","",""],[5,"parse_crate_attrs_from_source_str","",""],[5,"parse_expr_from_source_str","",""],[5,"parse_item_from_source_str","",""],[5,"parse_meta_from_source_str","",""],[5,"parse_stmt_from_source_str","",""],[5,"parse_tts_from_source_str","",""],[5,"new_parser_from_source_str","",""],[5,"new_parser_from_file","","Create a new parser, handling errors as appropriate\nif the file doesn't exist"],[5,"new_sub_parser_from_file","","Given a session, a crate config, a path, and a span, add\nthe file at the given path to the codemap, and return a parser.\nOn an error, use the given span as the source of the problem."],[5,"filemap_to_parser","","Given a filemap and config, return a parser"],[5,"new_parser_from_tts","",""],[5,"file_to_filemap","","Given a session and a path and an optional span (for error reporting),\nadd the path to the session's codemap and return the new filemap."],[5,"string_to_filemap","","Given a session and a string, add the string to\nthe session's codemap and return the new filemap"],[5,"filemap_to_tts","","Given a filemap, produce a sequence of token-trees"],[5,"tts_to_parser","","Given tts and cfg, produce a parser"],[5,"maybe_aborted","","Abort if necessary"],[5,"char_lit","","Parse a string representing a character literal into its final form.\nRather than just accepting/rejecting a given literal, unescapes it as\nwell. Can take any slice prefixed by a character escape. Returns the\ncharacter and the number of characters consumed."],[5,"str_lit","","Parse a string representing a string literal into its final form. Does\nunescaping."],[5,"raw_str_lit","","Parse a string representing a raw string literal into its final form. The\nonly operation this does is convert embedded CRLF into a single LF."],[5,"float_lit","",""],[5,"byte_lit","","Parse a string representing a byte literal into its final form. Similar to `char_lit`"],[5,"binary_lit","",""],[5,"integer_lit","",""],[0,"parser","",""],[3,"Restrictions","syntax::parse::parser",""],[3,"Parser","",""],[12,"sess","","",169],[12,"token","","the current token:",169],[12,"span","","the span of the current token:",169],[12,"last_span","","the span of the prior token:",169],[12,"cfg","","",169],[12,"last_token","","the previous token or None (only stashed sometimes).",169],[12,"buffer","","",169],[12,"buffer_start","","",169],[12,"buffer_end","","",169],[12,"tokens_consumed","","",169],[12,"restrictions","","",169],[12,"quote_depth","","",169],[12,"reader","","",169],[12,"interner","","",169],[12,"obsolete_set","","The set of seen errors about obsolete syntax. Used to suppress\nextra detail when the same error is seen twice",169],[12,"mod_path_stack","","Used to determine the path to externally loaded source files",169],[12,"open_braces","","Stack of spans of open delimiters. Used for error message.",169],[12,"owns_directory","","Flag if this parser \"owns\" the directory that it is currently parsing\nin. This will affect how nested files are looked up.",169],[12,"root_module_name","","Name of the root module this parser originated from. If `None`, then the\nname is not known. This does not change while the parser is descending\ninto modules, and sub-parsers have new values for this name.",169],[12,"expected_tokens","","",169],[4,"PathParsingMode","","How to parse a path. There are four different kinds of paths, all of which\nare parsed somewhat differently."],[13,"NoTypesAllowed","","A path with no type parameters; e.g. `foo::bar::Baz`",170],[13,"LifetimeAndTypesWithoutColons","","A path with a lifetime and type parameters, with no double colons\nbefore the type parameters; e.g. `foo::bar<'a>::Baz<T>`",170],[13,"LifetimeAndTypesWithColons","","A path with a lifetime and type parameters with double colons before\nthe type parameters; e.g. `foo::bar::<'a>::Baz::<T>`",170],[4,"BoundParsingMode","","How to parse a bound, whether to allow bound modifiers such as `?`."],[13,"Bare","","",171],[13,"Modified","","",171],[4,"TokenType","",""],[13,"Token","","",172],[13,"Keyword","","",172],[13,"Operator","","",172],[17,"UNRESTRICTED","",""],[17,"RESTRICTION_STMT_EXPR","",""],[17,"RESTRICTION_NO_BAR_OP","",""],[17,"RESTRICTION_NO_STRUCT_LITERAL","",""],[11,"hash","","",173],[11,"cmp","","",173],[11,"partial_cmp","","",173],[11,"lt","","",173],[11,"le","","",173],[11,"gt","","",173],[11,"ge","","",173],[11,"clone","","",173],[11,"eq","","",173],[11,"ne","","",173],[11,"empty","","Returns an empty set of flags.",173],[11,"all","","Returns the set containing all flags.",173],[11,"bits","","Returns the raw value of the flags currently stored.",173],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",173],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",173],[11,"is_empty","","Returns `true` if no flags are currently stored.",173],[11,"is_all","","Returns `true` if all flags are currently set.",173],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",173],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",173],[11,"insert","","Inserts the specified flags in-place.",173],[11,"remove","","Removes the specified flags in-place.",173],[11,"toggle","","Toggles the specified flags in-place.",173],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",173],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",173],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",173],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",173],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",173],[11,"eq","","",170],[11,"ne","","",170],[11,"eq","","",171],[11,"ne","","",171],[11,"clone","","",172],[11,"eq","","",172],[11,"ne","","",172],[11,"new","","",169],[11,"token_to_string","","Convert a token to a string using self's reader",169],[11,"this_token_to_string","","Convert the current token to a string using self's reader",169],[11,"unexpected_last","","",169],[11,"unexpected","","",169],[11,"expect","","Expect and consume the token t. Signal an error if\nthe next token is not t.",169],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible,\nthen consume it; if inedible, then return without consuming\nanything.  Signal a fatal error if next token is unexpected.",169],[11,"check_for_erroneous_unit_struct_expecting","","Check for erroneous `ident { }`; if matches, signal error and\nrecover (without consuming any expected input token).  Returns\ntrue if and only if input was consumed for recovery.",169],[11,"commit_expr","","Commit to parsing a complete expression `e` expected to be\nfollowed by some token from the set edible + inedible.  Recover\nfrom anticipated input errors, discarding erroneous characters.",169],[11,"commit_expr_expecting","","",169],[11,"commit_stmt","","Commit to parsing a complete statement `s`, which expects to be\nfollowed by some token from the set edible + inedible.  Check\nfor recoverable input errors, discarding erroneous characters.",169],[11,"commit_stmt_expecting","","",169],[11,"parse_ident","","",169],[11,"parse_ident_or_self_type","","",169],[11,"parse_path_list_item","","",169],[11,"check","","Check if the next token is `tok`, and return `true` if so.",169],[11,"eat","","Consume token 'tok' if it exists. Returns true if the given\ntoken was present, false otherwise.",169],[11,"check_keyword","","",169],[11,"eat_keyword","","If the next token is the given keyword, eat it and return\ntrue. Otherwise, return false.",169],[11,"eat_keyword_noexpect","","",169],[11,"expect_keyword","","If the given word is not a keyword, signal an error.\nIf the next token is not the given word, signal an error.\nOtherwise, eat it.",169],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",169],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",169],[11,"expect_no_suffix","","",169],[11,"expect_gt","","Expect and consume a GT. if a >> is seen, replace it\nwith a single > and continue. If a GT is not seen,\nsignal an error.",169],[11,"parse_seq_to_before_gt_or_return","","",169],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by '<' and '>', stopping\nbefore the '>'.",169],[11,"parse_seq_to_gt","","",169],[11,"parse_seq_to_gt_or_return","","",169],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",169],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",169],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",169],[11,"parse_enum_variant_seq","","Parse a sequence parameter of enum variant. For consistency purposes,\nthese should not be empty.",169],[11,"parse_seq","","",169],[11,"bump","","Advance the parser by one token",169],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",169],[11,"replace_token","","EFFECT: replace the current token and span with the given one",169],[11,"buffer_length","","",169],[11,"look_ahead","","",169],[11,"fatal","","",169],[11,"span_fatal","","",169],[11,"span_fatal_help","","",169],[11,"span_note","","",169],[11,"span_help","","",169],[11,"fileline_help","","",169],[11,"bug","","",169],[11,"warn","","",169],[11,"span_warn","","",169],[11,"span_err","","",169],[11,"span_bug","","",169],[11,"abort_if_errors","","",169],[11,"id_to_interned_str","","",169],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function\ntype?",169],[11,"token_is_closure_keyword","","Is the current token one of the keywords that signals a closure type?",169],[11,"get_lifetime","","",169],[11,"parse_for_in_type","","",169],[11,"parse_ty_path","","",169],[11,"parse_ty_bare_fn","","parse a TyBareFn type:",169],[11,"parse_proc_type","","Parses a procedure type (`proc`). The initial `proc` keyword must\nalready have been parsed.",169],[11,"parse_obsolete_closure_kind","","Parses an obsolete closure kind (`&:`, `&mut:`, or `:`).",169],[11,"parse_ty_bare_fn_or_ty_closure","","",169],[11,"parse_ty_closure","","Parse a TyClosure type",169],[11,"parse_unsafety","","",169],[11,"parse_trait_items","","Parse the items in a trait declaration",169],[11,"parse_mt","","Parse a possibly mutable type",169],[11,"parse_ret_ty","","Parse optional return type [ -> TY ] in function decl",169],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",169],[11,"parse_ty","","Parse a type.",169],[11,"parse_borrowed_pointee","","",169],[11,"parse_ptr","","",169],[11,"is_named_argument","","",169],[11,"parse_arg_general","","This version of parse arg doesn't necessarily require\nidentifier names.",169],[11,"parse_arg","","Parse a single function argument",169],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",169],[11,"maybe_parse_fixed_length_of_vec","","",169],[11,"lit_from_token","","Matches token_lit = LIT_INTEGER | ...",169],[11,"parse_lit","","Matches lit = true | false | token_lit",169],[11,"parse_literal_maybe_minus","","matches '-' lit | lit",169],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the\nmode. The `mode` parameter determines whether lifetimes, types, and/or\nbounds are permitted and whether `::` must precede type parameter\ngroups.",169],[11,"parse_path_segments_without_colons","","Examples:\n- `a::b<T,U>::c<V,W>`\n- `a::b<T,U>::c(V) -> W`\n- `a::b<T,U>::c(V)`",169],[11,"parse_path_segments_with_colons","","Examples:\n- `a::b::<T,U>::c`",169],[11,"parse_path_segments_without_types","","Examples:\n- `a::b::c`",169],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",169],[11,"parse_lifetime","","Parses a single lifetime\nMatches lifetime = LIFETIME",169],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { ',' lifetime_defs } ]` where `lifetime_def  =\nlifetime [':' lifetimes]`",169],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty\none too, but putting that in there messes up the grammar....",169],[11,"parse_mutability","","Parse mutability declaration (mut/const/imm)",169],[11,"parse_field","","Parse ident COLON expr",169],[11,"mk_expr","","",169],[11,"mk_unary","","",169],[11,"mk_binary","","",169],[11,"mk_call","","",169],[11,"mk_index","","",169],[11,"mk_range","","",169],[11,"mk_field","","",169],[11,"mk_tup_field","","",169],[11,"mk_assign_op","","",169],[11,"mk_mac_expr","","",169],[11,"mk_lit_u32","","",169],[11,"parse_bottom_expr","","At the bottom (top?) of the precedence hierarchy,\nparse things like parenthesized exprs,\nmacros, return, etc.",169],[11,"parse_block_expr","","Parse a block or unsafe block",169],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",169],[11,"parse_dot_or_call_expr_with","","",169],[11,"check_unknown_macro_variable","","",169],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style\nrepetition token (+ or *).",169],[11,"parse_token_tree","","parse a single token tree from the input.",169],[11,"parse_all_token_trees","","",169],[11,"parse_prefix_expr","","Parse a prefix-operator expr",169],[11,"parse_binops","","Parse an expression of binops",169],[11,"parse_more_binops","","Parse an expression of binops of at least min_prec precedence",169],[11,"parse_assign_expr","","Parse an assignment expression....\nactually, this seems to be the main entry point for\nparsing an arbitrary expression.",169],[11,"parse_assign_expr_with","","",169],[11,"parse_if_expr","","Parse an 'if' or 'if let' expression ('if' token already eaten)",169],[11,"parse_if_let_expr","","Parse an 'if let' expression ('if' token already eaten)",169],[11,"parse_lambda_expr","","",169],[11,"parse_else_expr","","",169],[11,"parse_for_expr","","Parse a 'for' .. 'in' expression ('for' token already eaten)",169],[11,"parse_while_expr","","Parse a 'while' or 'while let' expression ('while' token already eaten)",169],[11,"parse_while_let_expr","","Parse a 'while let' expression ('while' token already eaten)",169],[11,"parse_loop_expr","","",169],[11,"parse_arm","","",169],[11,"parse_expr","","Parse an expression",169],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",169],[11,"parse_pat","","Parse a pattern.",169],[11,"parse_stmt","","Parse a statement. may include decl.\nPrecondition: any attributes are parsed already",169],[11,"parse_block","","Parse a block. No inner attrs are allowed.",169],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where\nclauses are not parsed here, and must be added later via\n`parse_where_clause()`.",169],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",169],[11,"parse_method_with_outer_attributes","","Parse a method in a trait impl",169],[11,"parse_method","","Parse a method in a trait impl, starting with `attrs` attributes.",169],[11,"parse_record_struct_body","","",169],[11,"parse_tuple_struct_body","","",169],[11,"parse_single_struct_field","","Parse a structure field declaration",169],[11,"parse_item_with_outer_attributes","","",169],[11,"parse_item","","",169],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main\nentry point for the parser.",169],[11,"parse_optional_str","","",169],[11,"parse_str","","",169],[0,"lexer","syntax::parse",""],[3,"TokenAndSpan","syntax::parse::lexer",""],[12,"tok","","",174],[12,"sp","","",174],[3,"StringReader","",""],[12,"span_diagnostic","","",175],[12,"pos","","The absolute offset within the codemap of the next character to read",175],[12,"last_pos","","The absolute offset within the codemap of the last character read(curr)",175],[12,"col","","The column of the next character to read",175],[12,"curr","","The last character to be read",175],[12,"filemap","","",175],[12,"peek_tok","","",175],[12,"peek_span","","",175],[5,"make_reader_with_embedded_idents","",""],[5,"is_whitespace","",""],[5,"is_doc_comment","",""],[5,"is_block_doc_comment","",""],[0,"comments","",""],[3,"Comment","syntax::parse::lexer::comments",""],[12,"style","","",176],[12,"lines","","",176],[12,"pos","","",176],[3,"Literal","",""],[12,"lit","","",177],[12,"pos","","",177],[4,"CommentStyle","",""],[13,"Isolated","","No code on either side of each line of the comment",178],[13,"Trailing","","Code exists to the left of the comment",178],[13,"Mixed","","Code before /* foo */ and after the comment",178],[13,"BlankLine","","Just a manual blank line \"\\n\\n\", for layout",178],[5,"is_doc_comment","",""],[5,"doc_comment_style","",""],[5,"strip_doc_comment_decoration","",""],[5,"gather_comments_and_literals","",""],[11,"eq","","",178],[11,"ne","","",178],[11,"clone","","",178],[11,"clone","","",176],[11,"clone","","",177],[8,"Reader","syntax::parse::lexer",""],[10,"is_eof","","",179],[10,"next_token","","",179],[10,"fatal","","Report a fatal error with the current span.",179],[10,"err","","Report a non-fatal error with the current span.",179],[10,"peek","","",179],[11,"real_token","","Get a token the parser cares about.",179],[11,"fmt","","",174],[11,"eq","","",174],[11,"ne","","",174],[11,"clone","","",174],[11,"is_eof","","",175],[11,"next_token","","Return the next token. EFFECT: advances the string_reader.",175],[11,"fatal","","",175],[11,"err","","",175],[11,"peek","","",175],[11,"new_raw","","For comments.rs, which hackily pokes into pos and curr",175],[11,"new","","",175],[11,"curr_is","","",175],[11,"fatal_span","","Report a fatal lexical error with a given span.",175],[11,"err_span","","Report a lexical error with a given span.",175],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start`\nup to but excluding `self.last_pos`, meaning the slice does not include\nthe character `self.curr`.",175],[11,"name_from","","Create a Name from a given offset to the current offset, each\nadjusted 1 towards each other (assumes that on either side there is a\nsingle-byte delimiter).",175],[11,"name_from_to","","As name_from, with an explicit endpoint.",175],[11,"bump","","Advance the StringReader by one character. If a newline is\ndiscovered, add it to the FileMap's list of line start offsets.",175],[11,"nextch","","",175],[11,"nextch_is","","",175],[11,"nextnextch","","",175],[11,"nextnextch_is","","",175],[0,"token","syntax::parse",""],[3,"InternedString","syntax::parse::token","Represents a string stored in the task-local interner. Because the\ninterner lives for the life of the task, this can be safely treated as an\nimmortal string, as long as it never crosses between tasks."],[4,"BinOpToken","",""],[13,"Plus","","",180],[13,"Minus","","",180],[13,"Star","","",180],[13,"Slash","","",180],[13,"Percent","","",180],[13,"Caret","","",180],[13,"And","","",180],[13,"Or","","",180],[13,"Shl","","",180],[13,"Shr","","",180],[4,"DelimToken","","A delimiter token"],[13,"Paren","","A round parenthesis: `(` or `)`",181],[13,"Bracket","","A square bracket: `[` or `]`",181],[13,"Brace","","A curly brace: `{` or `}`",181],[4,"IdentStyle","",""],[13,"ModName","","`::` follows the identifier with no whitespace in-between.",182],[13,"Plain","","",182],[4,"SpecialMacroVar","",""],[13,"CrateMacroVar","","`$crate` will be filled in with the name of the crate a macro was\nimported from, if any.",183],[4,"Lit","",""],[13,"Byte","","",184],[13,"Char","","",184],[13,"Integer","","",184],[13,"Float","","",184],[13,"Str_","","",184],[13,"StrRaw","","",184],[13,"Binary","","",184],[13,"BinaryRaw","","",184],[4,"Token","",""],[13,"Eq","","",185],[13,"Lt","","",185],[13,"Le","","",185],[13,"EqEq","","",185],[13,"Ne","","",185],[13,"Ge","","",185],[13,"Gt","","",185],[13,"AndAnd","","",185],[13,"OrOr","","",185],[13,"Not","","",185],[13,"Tilde","","",185],[13,"BinOp","","",185],[13,"BinOpEq","","",185],[13,"At","","",185],[13,"Dot","","",185],[13,"DotDot","","",185],[13,"DotDotDot","","",185],[13,"Comma","","",185],[13,"Semi","","",185],[13,"Colon","","",185],[13,"ModSep","","",185],[13,"RArrow","","",185],[13,"LArrow","","",185],[13,"FatArrow","","",185],[13,"Pound","","",185],[13,"Dollar","","",185],[13,"Question","","",185],[13,"OpenDelim","","An opening delimiter, eg. `{`",185],[13,"CloseDelim","","A closing delimiter, eg. `}`",185],[13,"Literal","","",185],[13,"Ident","","",185],[13,"Underscore","","",185],[13,"Lifetime","","",185],[13,"Interpolated","","",185],[13,"DocComment","","Doc comment",185],[13,"MatchNt","","Parse a nonterminal (name to bind, name of NT, styles of their idents)",185],[13,"SubstNt","","A syntactic variable that will be filled in by macro expansion.",185],[13,"SpecialVarNt","","A macro variable with special meaning.",185],[13,"Whitespace","","Whitespace",185],[13,"Comment","","Comment",185],[13,"Shebang","","",185],[13,"Eof","","",185],[4,"Nonterminal","","For interpolation during macro expansion."],[13,"NtItem","","",186],[13,"NtBlock","","",186],[13,"NtStmt","","",186],[13,"NtPat","","",186],[13,"NtExpr","","",186],[13,"NtTy","","",186],[13,"NtIdent","","",186],[13,"NtMeta","","Stuff inside brackets for attributes",186],[13,"NtPath","","",186],[13,"NtTT","","",186],[5,"get_ident_interner","",""],[5,"reset_ident_interner","","Reset the ident interner to its initial state."],[5,"get_name","","Returns the string contents of a name, using the task-local interner."],[5,"get_ident","","Returns the string contents of an identifier, using the task-local\ninterner."],[5,"intern_and_get_ident","","Interns and returns the string contents of an identifier, using the\ntask-local interner."],[5,"intern","","Maps a string to its interned representation."],[5,"gensym","","gensym's a new usize, using the current interner."],[5,"str_to_ident","","Maps a string to an identifier with an empty syntax context."],[5,"gensym_ident","","Maps a string to a gensym'ed identifier."],[5,"fresh_name","",""],[5,"fresh_mark","",""],[0,"special_idents","",""],[17,"invalid","syntax::parse::token::special_idents",""],[17,"self_","",""],[17,"statik","",""],[17,"super_","",""],[17,"static_lifetime","",""],[17,"tt","",""],[17,"matchers","",""],[17,"clownshoe_abi","",""],[17,"opaque","",""],[17,"unnamed_field","",""],[17,"type_self","",""],[17,"prelude_import","",""],[0,"special_names","syntax::parse::token",""],[17,"invalid","syntax::parse::token::special_names",""],[17,"self_","",""],[17,"statik","",""],[17,"super_","",""],[17,"static_lifetime","",""],[17,"tt","",""],[17,"matchers","",""],[17,"clownshoe_abi","",""],[17,"opaque","",""],[17,"unnamed_field","",""],[17,"type_self","",""],[17,"prelude_import","",""],[0,"keywords","syntax::parse::token","All the valid words that have meaning in the Rust language."],[4,"Keyword","syntax::parse::token::keywords",""],[13,"As","","",187],[13,"Break","","",187],[13,"Crate","","",187],[13,"Else","","",187],[13,"Enum","","",187],[13,"Extern","","",187],[13,"False","","",187],[13,"Fn","","",187],[13,"For","","",187],[13,"If","","",187],[13,"Impl","","",187],[13,"In","","",187],[13,"Let","","",187],[13,"Loop","","",187],[13,"Match","","",187],[13,"Mod","","",187],[13,"Move","","",187],[13,"Mut","","",187],[13,"Pub","","",187],[13,"Ref","","",187],[13,"Return","","",187],[13,"Static","","",187],[13,"SelfValue","","",187],[13,"SelfType","","",187],[13,"Struct","","",187],[13,"Super","","",187],[13,"True","","",187],[13,"Trait","","",187],[13,"Type","","",187],[13,"Unsafe","","",187],[13,"Use","","",187],[13,"Virtual","","",187],[13,"While","","",187],[13,"Continue","","",187],[13,"Proc","","",187],[13,"Box","","",187],[13,"Const","","",187],[13,"Where","","",187],[13,"Alignof","","",187],[13,"Become","","",187],[13,"Offsetof","","",187],[13,"Priv","","",187],[13,"Pure","","",187],[13,"Sizeof","","",187],[13,"Typeof","","",187],[13,"Unsized","","",187],[13,"Yield","","",187],[13,"Do","","",187],[13,"Abstract","","",187],[13,"Final","","",187],[13,"Override","","",187],[13,"Macro","","",187],[11,"eq","","",187],[11,"ne","","",187],[11,"clone","","",187],[11,"to_name","","",187],[6,"IdentInterner","syntax::parse::token",""],[17,"SELF_KEYWORD_NAME","",""],[17,"SELF_KEYWORD_NAME_NUM","",""],[11,"fmt","","",180],[11,"hash","","",180],[11,"eq","","",180],[11,"ne","","",180],[11,"decode","","",180],[11,"encode","","",180],[11,"clone","","",180],[11,"fmt","","",181],[11,"hash","","",181],[11,"eq","","",181],[11,"ne","","",181],[11,"decode","","",181],[11,"encode","","",181],[11,"clone","","",181],[11,"fmt","","",182],[11,"hash","","",182],[11,"eq","","",182],[11,"ne","","",182],[11,"decode","","",182],[11,"encode","","",182],[11,"clone","","",182],[11,"fmt","","",183],[11,"hash","","",183],[11,"eq","","",183],[11,"ne","","",183],[11,"decode","","",183],[11,"encode","","",183],[11,"clone","","",183],[11,"as_str","","",183],[11,"fmt","","",184],[11,"hash","","",184],[11,"eq","","",184],[11,"ne","","",184],[11,"decode","","",184],[11,"encode","","",184],[11,"clone","","",184],[11,"short_name","","",184],[11,"fmt","","",185],[11,"hash","","",185],[11,"eq","","",185],[11,"ne","","",185],[11,"decode","","",185],[11,"encode","","",185],[11,"clone","","",185],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",185],[11,"is_lit","","Returns `true` if the token is any literal",185],[11,"is_ident","","Returns `true` if the token is an identifier.",185],[11,"is_path","","Returns `true` if the token is an interpolated path.",185],[11,"is_plain_ident","","Returns `true` if the token is a path that is not followed by a `::`\ntoken.",185],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",185],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",185],[11,"to_binop","","Maps a token to its corresponding binary operator.",185],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",185],[11,"is_keyword_allow_following_colon","","",185],[11,"is_any_keyword","","Returns `true` if the token is either a special identifier, or a strict\nor reserved keyword.",185],[11,"is_strict_keyword","","Returns `true` if the token may not appear as an identifier.",185],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword that has been reserved for\npossible future use.",185],[11,"mtwt_eq","","Hygienic identifier equality comparison.",185],[11,"hash","","",186],[11,"eq","","",186],[11,"ne","","",186],[11,"decode","","",186],[11,"encode","","",186],[11,"clone","","",186],[11,"fmt","","",186],[11,"cmp","","",188],[11,"partial_cmp","","",188],[11,"lt","","",188],[11,"le","","",188],[11,"gt","","",188],[11,"ge","","",188],[11,"hash","","",188],[11,"eq","","",188],[11,"ne","","",188],[11,"clone","","",188],[11,"new","","",188],[6,"Target","",""],[11,"deref","","",188],[11,"container_as_bytes","","",188],[11,"fmt","","",188],[11,"fmt","","",188],[11,"eq","","",188],[11,"ne","","",188],[11,"decode","","",188],[11,"encode","","",188],[0,"attr","syntax::parse",""],[8,"ParserAttr","syntax::parse::attr","A parser that can parse attributes."],[10,"parse_outer_attributes","","",189],[10,"parse_attribute","","",189],[10,"parse_inner_attrs_and_next","","",189],[10,"parse_meta_item","","",189],[10,"parse_meta_seq","","",189],[10,"parse_optional_meta","","",189],[11,"parse_outer_attributes","syntax::parse::parser","Parse attributes that appear before an item",169],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",169],[11,"parse_inner_attrs_and_next","","Parse attributes that appear after the opening of an item. These should\nbe preceded by an exclamation mark, but we accept and warn about one\nterminated by a semicolon. In addition to a vector of inner attributes,\nthis function also returns a vector that may contain the first outer\nattribute of the next item (since we can't know whether the attribute\nis an inner attribute of the containing item or an outer attribute of\nthe first contained item until we see the semi).\nmatches inner_attrs* outer_attr?\nyou can make the 'next' field an Option, but the result is going to be\nmore useful as a vector.",169],[11,"parse_meta_item","","matches meta_item = IDENT\n| IDENT = lit\n| IDENT meta_seq",169],[11,"parse_meta_seq","","matches meta_seq = ( COMMASEP(meta_item) )",169],[11,"parse_optional_meta","","",169],[0,"common","syntax::parse","Common routines shared by parser mods"],[3,"SeqSep","syntax::parse::common","SeqSep : a sequence separator (token)\nand whether a trailing separator is allowed."],[12,"sep","","",190],[12,"trailing_sep_allowed","","",190],[5,"seq_sep_trailing_allowed","",""],[5,"seq_sep_none","",""],[0,"classify","syntax::parse","Routines the parser uses to classify AST nodes"],[5,"expr_requires_semi_to_be_stmt","syntax::parse::classify","Does this expression require a semicolon to be treated\nas a statement? The negation of this: 'can this expression\nbe used as a statement without a semicolon' -- is used\nas an early-bail-out in the parser so that, for instance,\n    if true {...} else {...}\n     |x| 5\nisn't parsed as (if true {...} else {...} | x) | 5"],[5,"expr_is_simple_block","",""],[5,"stmt_ends_with_semi","","this statement requires a semicolon after it.\nnote that in one case (stmt_semi), we've already\nseen the semicolon, and thus don't need another."],[0,"obsolete","syntax::parse","Support for parsing unsupported, old syntaxes, for the purpose of reporting errors. Parsing of\nthese syntaxes is tested by compile-test/obsolete-syntax.rs."],[4,"ObsoleteSyntax","syntax::parse::obsolete","The specific types of unsupported syntax"],[13,"Sized","","",191],[13,"ForSized","","",191],[13,"ProcType","","",191],[13,"ProcExpr","","",191],[13,"ClosureType","","",191],[13,"ClosureKind","","",191],[13,"EmptyIndex","","",191],[8,"ParserObsoleteMethods","",""],[10,"obsolete","","Reports an obsolete syntax non-fatal error.",192],[10,"obsolete_expr","","Reports an obsolete syntax non-fatal error, and returns\na placeholder expression",192],[10,"report","","",192],[10,"is_obsolete_ident","","",192],[10,"eat_obsolete_ident","","",192],[11,"hash","","",191],[11,"eq","","",191],[11,"ne","","",191],[11,"obsolete","syntax::parse::parser","Reports an obsolete syntax non-fatal error.",169],[11,"obsolete_expr","","Reports an obsolete syntax non-fatal error, and returns\na placeholder expression",169],[11,"report","","",169],[11,"is_obsolete_ident","","",169],[11,"eat_obsolete_ident","","",169],[0,"with_hygiene","syntax::parse",""],[5,"parse_tts_from_source_str","syntax::parse::with_hygiene",""],[11,"next_node_id","syntax::parse","",168],[11,"reserve_node_ids","","",168],[0,"ptr","syntax","The AST pointer"],[3,"P","syntax::ptr","An owned smart pointer."],[5,"P","","Construct a `P<T>` from a `T` value."],[11,"and_then","","Move out of the pointer.\nIntended for chaining transformations not covered by `map`.",193],[11,"map","","Transform the inner value, consuming `self` and producing a new `P<T>`.",193],[6,"Target","",""],[11,"deref","","",193],[11,"clone","","",193],[11,"eq","","",193],[11,"fmt","","",193],[11,"fmt","","",193],[11,"hash","","",193],[11,"decode","","",193],[11,"encode","","",193],[0,"show_span","syntax","Span debugger"],[5,"run","syntax::show_span",""],[0,"std_inject","syntax",""],[5,"maybe_inject_crates_ref","syntax::std_inject",""],[5,"maybe_inject_prelude","",""],[5,"use_std","",""],[0,"test","syntax",""],[5,"modify_for_testing","syntax::test",""],[0,"visit","syntax","AST walker. Each overridden visit method has full control over what\nhappens with its node, it can do its own traversal of the node's children,\ncall `visit::walk_*` to apply the default traversal algorithm, or prevent\ndeeper traversal by doing nothing."],[4,"FnKind","syntax::visit",""],[13,"FkItemFn","","fn foo() or extern \"Abi\" fn foo()",194],[13,"FkMethod","","fn foo(&self)",194],[13,"FkFnBlock","","|x, y| ...\nproc(x, y) ...",194],[5,"walk_inlined_item","",""],[5,"walk_crate","",""],[5,"walk_mod","",""],[5,"walk_local","",""],[5,"walk_lifetime_def","",""],[5,"walk_lifetime_bound","",""],[5,"walk_lifetime_ref","",""],[5,"walk_explicit_self","",""],[5,"walk_poly_trait_ref","","Like with walk_method_helper this doesn't correspond to a method\nin Visitor, and so it gets a _helper suffix."],[5,"walk_trait_ref","","Like with walk_method_helper this doesn't correspond to a method\nin Visitor, and so it gets a _helper suffix."],[5,"walk_item","",""],[5,"walk_enum_def","",""],[5,"walk_variant","",""],[5,"skip_ty","",""],[5,"walk_ty_opt","",""],[5,"walk_ty","",""],[5,"walk_lifetime_decls_helper","",""],[5,"walk_path","",""],[5,"walk_path_segment","",""],[5,"walk_path_parameters","",""],[5,"walk_assoc_type_binding","",""],[5,"walk_pat","",""],[5,"walk_foreign_item","",""],[5,"walk_ty_param_bounds_helper","",""],[5,"walk_ty_param_bound","",""],[5,"walk_ty_param","",""],[5,"walk_generics","",""],[5,"walk_fn_ret_ty","",""],[5,"walk_fn_decl","",""],[5,"walk_method_helper","",""],[5,"walk_fn","",""],[5,"walk_ty_method","",""],[5,"walk_trait_item","",""],[5,"walk_struct_def","",""],[5,"walk_struct_field","",""],[5,"walk_block","",""],[5,"walk_stmt","",""],[5,"walk_decl","",""],[5,"walk_expr_opt","",""],[5,"walk_exprs","",""],[5,"walk_mac","",""],[5,"walk_expr","",""],[5,"walk_arm","",""],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially\noverridden.  Each method's default implementation recursively visits\nthe substructure of the input via the corresponding `walk` method;\ne.g. the `visit_mod` method by default calls `visit::walk_mod`."],[11,"visit_name","","",195],[11,"visit_ident","","",195],[11,"visit_mod","","",195],[11,"visit_foreign_item","","",195],[11,"visit_item","","",195],[11,"visit_local","","",195],[11,"visit_block","","",195],[11,"visit_stmt","","",195],[11,"visit_arm","","",195],[11,"visit_pat","","",195],[11,"visit_decl","","",195],[11,"visit_expr","","",195],[11,"visit_expr_post","","",195],[11,"visit_ty","","",195],[11,"visit_generics","","",195],[11,"visit_fn","","",195],[11,"visit_ty_method","","",195],[11,"visit_trait_item","","",195],[11,"visit_trait_ref","","",195],[11,"visit_ty_param_bound","","",195],[11,"visit_poly_trait_ref","","",195],[11,"visit_struct_def","","",195],[11,"visit_struct_field","","",195],[11,"visit_variant","","",195],[11,"visit_opt_lifetime_ref","","Visits an optional reference to a lifetime. The `span` is the span of some surrounding\nreference should opt_lifetime be None.",195],[11,"visit_lifetime_bound","","",195],[11,"visit_lifetime_ref","","",195],[11,"visit_lifetime_def","","",195],[11,"visit_explicit_self","","",195],[11,"visit_mac","","",195],[11,"visit_path","","",195],[11,"visit_path_segment","","",195],[11,"visit_path_parameters","","",195],[11,"visit_assoc_type_binding","","",195],[11,"visit_attribute","","",195],[0,"print","syntax",""],[0,"pp","syntax::print","This pretty-printer is a direct reimplementation of Philip Karlton's\nMesa pretty-printer, as described in appendix A of"],[3,"BreakToken","syntax::print::pp",""],[3,"BeginToken","",""],[3,"PrintStackElem","",""],[3,"Printer","","In case you do not have the paper, here is an explanation of what's going\non."],[12,"out","","",196],[4,"Breaks","",""],[13,"Consistent","","",197],[13,"Inconsistent","","",197],[4,"Token","",""],[13,"String","","",198],[13,"Break","","",198],[13,"Begin","","",198],[13,"End","","",198],[13,"Eof","","",198],[4,"PrintStackBreak","",""],[13,"Fits","","",199],[13,"Broken","","",199],[5,"tok_str","",""],[5,"buf_str","",""],[5,"mk_printer","",""],[5,"rbox","",""],[5,"ibox","",""],[5,"cbox","",""],[5,"break_offset","",""],[5,"end","",""],[5,"eof","",""],[5,"word","",""],[5,"huge_word","",""],[5,"zero_word","",""],[5,"spaces","",""],[5,"zerobreak","",""],[5,"space","",""],[5,"hardbreak","",""],[5,"hardbreak_tok_offset","",""],[5,"hardbreak_tok","",""],[11,"eq","","",197],[11,"ne","","",197],[11,"clone","","",197],[11,"clone","","",200],[11,"clone","","",201],[11,"clone","","",198],[11,"is_eof","","",198],[11,"is_hardbreak_tok","","",198],[11,"last_token","","",196],[11,"replace_last_token","","",196],[11,"pretty_print","","",196],[11,"check_stream","","",196],[11,"scan_push","","",196],[11,"scan_pop","","",196],[11,"scan_top","","",196],[11,"scan_pop_bottom","","",196],[11,"advance_right","","",196],[11,"advance_left","","",196],[11,"check_stack","","",196],[11,"print_newline","","",196],[11,"indent","","",196],[11,"get_top","","",196],[11,"print_str","","",196],[11,"print","","",196],[0,"pprust","syntax::print",""],[3,"NoAnn","syntax::print::pprust",""],[3,"CurrentCommentAndLiteral","",""],[3,"State","",""],[12,"s","","",202],[4,"AnnNode","",""],[13,"NodeIdent","","",203],[13,"NodeName","","",203],[13,"NodeBlock","","",203],[13,"NodeItem","","",203],[13,"NodeExpr","","",203],[13,"NodePat","","",203],[5,"rust_printer","",""],[5,"rust_printer_annotated","",""],[5,"print_crate","","Requires you to pass an input filename and reader so that\nit can scan the input text for comments and literals to\ncopy forward."],[5,"to_string","",""],[5,"binop_to_string","",""],[5,"token_to_string","",""],[5,"ty_to_string","",""],[5,"bounds_to_string","",""],[5,"pat_to_string","",""],[5,"arm_to_string","",""],[5,"expr_to_string","",""],[5,"lifetime_to_string","",""],[5,"tt_to_string","",""],[5,"tts_to_string","",""],[5,"stmt_to_string","",""],[5,"item_to_string","",""],[5,"generics_to_string","",""],[5,"ty_method_to_string","",""],[5,"method_to_string","",""],[5,"fn_block_to_string","",""],[5,"path_to_string","",""],[5,"ident_to_string","",""],[5,"fun_to_string","",""],[5,"block_to_string","",""],[5,"meta_item_to_string","",""],[5,"attribute_to_string","",""],[5,"lit_to_string","",""],[5,"explicit_self_to_string","",""],[5,"variant_to_string","",""],[5,"arg_to_string","",""],[5,"mac_to_string","",""],[5,"visibility_qualified","",""],[0,"with_hygiene","",""],[5,"to_string_hyg","syntax::print::pprust::with_hygiene",""],[5,"ty_to_string","",""],[5,"bounds_to_string","",""],[5,"pat_to_string","",""],[5,"arm_to_string","",""],[5,"expr_to_string","",""],[5,"lifetime_to_string","",""],[5,"tt_to_string","",""],[5,"tts_to_string","",""],[5,"stmt_to_string","",""],[5,"item_to_string","",""],[5,"generics_to_string","",""],[5,"ty_method_to_string","",""],[5,"method_to_string","",""],[5,"fn_block_to_string","",""],[5,"path_to_string","",""],[5,"ident_to_string","",""],[5,"fun_to_string","",""],[5,"block_to_string","",""],[5,"meta_item_to_string","",""],[5,"attribute_to_string","",""],[5,"lit_to_string","",""],[5,"explicit_self_to_string","",""],[5,"variant_to_string","",""],[5,"arg_to_string","",""],[5,"mac_to_string","",""],[17,"indent_unit","syntax::print::pprust",""],[17,"default_columns","",""],[8,"PpAnn","",""],[11,"pre","","",204],[11,"post","","",204],[11,"new_from_input","","",202],[11,"new","","",202],[11,"ibox","","",202],[11,"end","","",202],[11,"cbox","","",202],[11,"rbox","","",202],[11,"nbsp","","",202],[11,"word_nbsp","","",202],[11,"word_space","","",202],[11,"popen","","",202],[11,"pclose","","",202],[11,"head","","",202],[11,"bopen","","",202],[11,"bclose_","","",202],[11,"bclose_maybe_open","","",202],[11,"bclose","","",202],[11,"is_begin","","",202],[11,"is_end","","",202],[11,"is_bol","","",202],[11,"in_cbox","","",202],[11,"hardbreak_if_not_bol","","",202],[11,"space_if_not_bol","","",202],[11,"break_offset_if_not_bol","","",202],[11,"synth_comment","","",202],[11,"commasep","","",202],[11,"commasep_cmnt","","",202],[11,"commasep_exprs","","",202],[11,"print_mod","","",202],[11,"print_foreign_mod","","",202],[11,"print_opt_lifetime","","",202],[11,"print_type","","",202],[11,"print_foreign_item","","",202],[11,"print_item","","Pretty-print an item",202],[11,"print_enum_def","","",202],[11,"print_variants","","",202],[11,"print_visibility","","",202],[11,"print_struct","","",202],[11,"print_tt","","This doesn't deserve to be called \"pretty\" printing, but it should be\nmeaning-preserving. A quick hack that might help would be to look at the\nspans embedded in the TTs to decide where to put spaces and newlines.\nBut it'd be better to parse these according to the grammar of the\nappropriate macro, transcribe back into the grammar we just parsed from,\nand then pretty-print the resulting AST nodes (so, e.g., we print\nexpression arguments as expressions). It can be done! I think.",202],[11,"print_tts","","",202],[11,"print_variant","","",202],[11,"print_ty_method","","",202],[11,"print_trait_method","","",202],[11,"print_impl_item","","",202],[11,"print_method","","",202],[11,"print_outer_attributes","","",202],[11,"print_inner_attributes","","",202],[11,"print_attribute","","",202],[11,"print_stmt","","",202],[11,"print_block","","",202],[11,"print_block_unclosed","","",202],[11,"print_block_unclosed_indent","","",202],[11,"print_block_with_attrs","","",202],[11,"print_block_maybe_unclosed","","",202],[11,"print_if","","",202],[11,"print_if_let","","",202],[11,"print_mac","","",202],[11,"print_expr_maybe_paren","","",202],[11,"print_expr","","",202],[11,"print_local_decl","","",202],[11,"print_decl","","",202],[11,"print_ident","","",202],[11,"print_usize","","",202],[11,"print_name","","",202],[11,"print_for_decl","","",202],[11,"print_pat","","",202],[11,"print_fn","","",202],[11,"print_fn_args","","",202],[11,"print_fn_args_and_ret","","",202],[11,"print_fn_block_args","","",202],[11,"print_capture_clause","","",202],[11,"print_bounds","","",202],[11,"print_lifetime","","",202],[11,"print_lifetime_def","","",202],[11,"print_generics","","",202],[11,"print_ty_param","","",202],[11,"print_where_clause","","",202],[11,"print_meta_item","","",202],[11,"print_view_path","","",202],[11,"print_mutability","","",202],[11,"print_mt","","",202],[11,"print_arg","","",202],[11,"print_fn_output","","",202],[11,"print_ty_fn","","",202],[11,"maybe_print_trailing_comment","","",202],[11,"print_remaining_comments","","",202],[11,"print_literal","","",202],[11,"next_lit","","",202],[11,"maybe_print_comment","","",202],[11,"print_comment","","",202],[11,"print_string","","",202],[11,"next_comment","","",202],[11,"print_opt_unsafety","","",202],[11,"print_opt_abi_and_extern_if_nondefault","","",202],[11,"print_extern_opt_abi","","",202],[11,"print_fn_header_info","","",202],[11,"print_unsafety","","",202],[0,"ext","syntax",""],[0,"asm","syntax::ext",""],[5,"expand_asm","syntax::ext::asm",""],[0,"base","syntax::ext",""],[3,"MacEager","syntax::ext::base","`MacResult` implementation for the common case where you've already\nbuilt each form of AST that you might return."],[12,"expr","","",205],[12,"pat","","",205],[12,"items","","",205],[12,"methods","","",205],[12,"stmt","","",205],[3,"DummyResult","","Fill-in macro expansion result, to allow compilation to continue\nafter hitting errors."],[3,"BlockInfo","",""],[12,"macros_escape","","Should macros escape from this scope?",206],[12,"pending_renames","","What are the pending renames?",206],[3,"ExtCtxt","","One of these is made during expansion and incrementally updated as we go;\nwhen a macro expansion occurs, the resulting nodes have the backtrace()\n-> expn_info of their expansion context stored into their span."],[12,"parse_sess","","",207],[12,"cfg","","",207],[12,"backtrace","","",207],[12,"ecfg","","",207],[12,"use_std","","",207],[12,"mod_path","","",207],[12,"trace_mac","","",207],[12,"exported_macros","","",207],[12,"syntax_env","","",207],[12,"recursion_count","","",207],[3,"SyntaxEnv","","In order to have some notion of scoping for macros,\nwe want to implement the notion of a transformation\nenvironment."],[4,"Annotatable","",""],[13,"Item","","",208],[13,"TraitItem","","",208],[13,"ImplItem","","",208],[4,"SyntaxExtension","","An enum representing the different kinds of syntax extensions."],[13,"Decorator","","A syntax extension that is attached to an item and creates new items\nbased upon it.",209],[13,"Modifier","","A syntax extension that is attached to an item and modifies it\nin-place.",209],[13,"MultiModifier","","A syntax extension that is attached to an item and modifies it\nin-place. More flexible version than Modifier.",209],[13,"NormalTT","","A normal, function-like syntax extension.",209],[13,"IdentTT","","A function-like syntax extension that has an extra ident before\nthe block.\n",209],[13,"MacroRulesTT","","Represents `macro_rules!` itself.",209],[5,"expr_to_string","","Extract a string literal from the macro expanded version of `expr`,\nemitting `err_msg` if `expr` is not a string literal. This does not stop\ncompilation on error, merely emits a non-fatal error and returns None."],[5,"check_zero_tts","","Non-fatally assert that `tts` is empty. Note that this function\nreturns even when `tts` is non-empty, macros that *need* to stop\ncompilation should call\n`cx.parse_sess.span_diagnostic.abort_if_errors()` (this should be\ndone as rarely as possible)."],[5,"get_single_str_from_tts","","Extract the string literal from the first token of `tts`. If this\nis not a string literal, emit an error and return None."],[5,"get_exprs_from_tts","","Extract comma-separated expressions from `tts`. If there is a\nparsing error, emit a non-fatal error and return None."],[6,"MacroExpanderFn","",""],[6,"IdentMacroExpanderFn","",""],[6,"NamedSyntaxExtension","",""],[8,"ItemDecorator","",""],[10,"expand","","",210],[8,"ItemModifier","",""],[10,"expand","","",211],[8,"MultiItemModifier","",""],[10,"expand","","",212],[8,"TTMacroExpander","","Represents a thing that maps token trees to Macro Results"],[10,"expand","","",213],[8,"IdentMacroExpander","",""],[10,"expand","","",214],[8,"MacResult","","The result of a macro expansion. The return values of the various\nmethods are spliced into the AST at the callsite of the macro."],[11,"make_expr","","Create an expression.",215],[11,"make_items","","Create zero or more items.",215],[11,"make_methods","","Create zero or more methods.",215],[11,"make_pat","","Create a pattern.",215],[11,"make_stmt","","Create a statement.",215],[11,"clone","","",208],[11,"fmt","","",208],[11,"attrs","","",208],[11,"fold_attrs","","",208],[11,"expect_item","","",208],[11,"expect_trait_item","","",208],[11,"expect_impl_item","","",208],[11,"default","","",205],[11,"expr","","",205],[11,"pat","","",205],[11,"items","","",205],[11,"methods","","",205],[11,"stmt","","",205],[11,"make_expr","","",205],[11,"make_items","","",205],[11,"make_methods","","",205],[11,"make_stmt","","",205],[11,"make_pat","","",205],[11,"any","","Create a default MacResult that can be anything.",216],[11,"expr","","Create a default MacResult that can only be an expression.",216],[11,"raw_expr","","A plain dummy expression.",216],[11,"raw_pat","","A plain dummy pattern.",216],[11,"make_expr","","",216],[11,"make_pat","","",216],[11,"make_items","","",216],[11,"make_methods","","",216],[11,"make_stmt","","",216],[11,"new","","",206],[11,"new","","",207],[11,"expand_expr","","",207],[11,"expander","","Returns a `Folder` for deeply expanding all macros in a AST node.",207],[11,"new_parser_from_tts","","",207],[11,"codemap","","",207],[11,"parse_sess","","",207],[11,"cfg","","",207],[11,"call_site","","",207],[11,"print_backtrace","","",207],[11,"backtrace","","",207],[11,"original_span","","",207],[11,"original_span_in_file","","",207],[11,"mod_push","","",207],[11,"mod_pop","","",207],[11,"mod_path","","",207],[11,"bt_push","","",207],[11,"bt_pop","","",207],[11,"insert_macro","","",207],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",207],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping\ncompilation.",207],[11,"span_warn","","",207],[11,"span_unimpl","","",207],[11,"span_bug","","",207],[11,"span_note","","",207],[11,"span_help","","",207],[11,"fileline_help","","",207],[11,"bug","","",207],[11,"trace_macros","","",207],[11,"set_trace_macros","","",207],[11,"ident_of","","",207],[11,"ident_of_std","","",207],[11,"name_of","","",207],[11,"push_frame","","",217],[11,"pop_frame","","",217],[11,"find","","",217],[11,"insert","","",217],[11,"info","","",217],[0,"build","syntax::ext",""],[8,"AstBuilder","syntax::ext::build",""],[10,"path","","",218],[10,"path_ident","","",218],[10,"path_global","","",218],[10,"path_all","","",218],[10,"qpath","","",218],[10,"qpath_all","","",218],[10,"ty_mt","","",218],[10,"ty","","",218],[10,"ty_path","","",218],[10,"ty_sum","","",218],[10,"ty_ident","","",218],[10,"ty_rptr","","",218],[10,"ty_ptr","","",218],[10,"ty_option","","",218],[10,"ty_infer","","",218],[10,"ty_vars","","",218],[10,"ty_vars_global","","",218],[10,"ty_field_imm","","",218],[10,"typaram","","",218],[10,"trait_ref","","",218],[10,"poly_trait_ref","","",218],[10,"typarambound","","",218],[10,"lifetime","","",218],[10,"lifetime_def","","",218],[10,"stmt_expr","","",218],[10,"stmt_let","","",218],[10,"stmt_let_typed","","",218],[10,"stmt_item","","",218],[10,"block","","",218],[10,"block_expr","","",218],[10,"block_all","","",218],[10,"expr","","",218],[10,"expr_path","","",218],[10,"expr_qpath","","",218],[10,"expr_ident","","",218],[10,"expr_self","","",218],[10,"expr_binary","","",218],[10,"expr_deref","","",218],[10,"expr_unary","","",218],[10,"expr_addr_of","","",218],[10,"expr_mut_addr_of","","",218],[10,"expr_field_access","","",218],[10,"expr_tup_field_access","","",218],[10,"expr_call","","",218],[10,"expr_call_ident","","",218],[10,"expr_call_global","","",218],[10,"expr_method_call","","",218],[10,"expr_block","","",218],[10,"expr_cast","","",218],[10,"field_imm","","",218],[10,"expr_struct","","",218],[10,"expr_struct_ident","","",218],[10,"expr_lit","","",218],[10,"expr_usize","","",218],[10,"expr_int","","",218],[10,"expr_u8","","",218],[10,"expr_u32","","",218],[10,"expr_bool","","",218],[10,"expr_vec","","",218],[10,"expr_vec_ng","","",218],[10,"expr_vec_slice","","",218],[10,"expr_str","","",218],[10,"expr_some","","",218],[10,"expr_none","","",218],[10,"expr_break","","",218],[10,"expr_tuple","","",218],[10,"expr_fail","","",218],[10,"expr_unreachable","","",218],[10,"expr_ok","","",218],[10,"expr_err","","",218],[10,"expr_try","","",218],[10,"pat","","",218],[10,"pat_wild","","",218],[10,"pat_lit","","",218],[10,"pat_ident","","",218],[10,"pat_ident_binding_mode","","",218],[10,"pat_enum","","",218],[10,"pat_struct","","",218],[10,"pat_tuple","","",218],[10,"pat_some","","",218],[10,"pat_none","","",218],[10,"pat_ok","","",218],[10,"pat_err","","",218],[10,"arm","","",218],[10,"arm_unreachable","","",218],[10,"expr_match","","",218],[10,"expr_if","","",218],[10,"expr_loop","","",218],[10,"lambda_fn_decl","","",218],[10,"lambda","","",218],[10,"lambda0","","",218],[10,"lambda1","","",218],[10,"lambda_expr","","",218],[10,"lambda_expr_0","","",218],[10,"lambda_expr_1","","",218],[10,"lambda_stmts","","",218],[10,"lambda_stmts_0","","",218],[10,"lambda_stmts_1","","",218],[10,"item","","",218],[10,"arg","","",218],[10,"fn_decl","","",218],[10,"item_fn_poly","","",218],[10,"item_fn","","",218],[10,"variant","","",218],[10,"item_enum_poly","","",218],[10,"item_enum","","",218],[10,"item_struct_poly","","",218],[10,"item_struct","","",218],[10,"item_mod","","",218],[10,"item_static","","",218],[10,"item_const","","",218],[10,"item_ty_poly","","",218],[10,"item_ty","","",218],[10,"attribute","","",218],[10,"meta_word","","",218],[10,"meta_list","","",218],[10,"meta_name_value","","",218],[10,"item_use","","",218],[10,"item_use_simple","","",218],[10,"item_use_simple_","","",218],[10,"item_use_list","","",218],[10,"item_use_glob","","",218],[11,"path","syntax::ext::base","",207],[11,"path_ident","","",207],[11,"path_global","","",207],[11,"path_all","","",207],[11,"qpath","","Constructs a qualified path.",207],[11,"qpath_all","","Constructs a qualified path.",207],[11,"ty_mt","","",207],[11,"ty","","",207],[11,"ty_path","","",207],[11,"ty_sum","","",207],[11,"ty_ident","","",207],[11,"ty_rptr","","",207],[11,"ty_ptr","","",207],[11,"ty_option","","",207],[11,"ty_field_imm","","",207],[11,"ty_infer","","",207],[11,"typaram","","",207],[11,"ty_vars","","",207],[11,"ty_vars_global","","",207],[11,"trait_ref","","",207],[11,"poly_trait_ref","","",207],[11,"typarambound","","",207],[11,"lifetime","","",207],[11,"lifetime_def","","",207],[11,"stmt_expr","","",207],[11,"stmt_let","","",207],[11,"stmt_let_typed","","",207],[11,"block","","",207],[11,"stmt_item","","",207],[11,"block_expr","","",207],[11,"block_all","","",207],[11,"expr","","",207],[11,"expr_path","","",207],[11,"expr_qpath","","Constructs a QPath expression.",207],[11,"expr_ident","","",207],[11,"expr_self","","",207],[11,"expr_binary","","",207],[11,"expr_deref","","",207],[11,"expr_unary","","",207],[11,"expr_field_access","","",207],[11,"expr_tup_field_access","","",207],[11,"expr_addr_of","","",207],[11,"expr_mut_addr_of","","",207],[11,"expr_call","","",207],[11,"expr_call_ident","","",207],[11,"expr_call_global","","",207],[11,"expr_method_call","","",207],[11,"expr_block","","",207],[11,"field_imm","","",207],[11,"expr_struct","","",207],[11,"expr_struct_ident","","",207],[11,"expr_lit","","",207],[11,"expr_usize","","",207],[11,"expr_int","","",207],[11,"expr_u32","","",207],[11,"expr_u8","","",207],[11,"expr_bool","","",207],[11,"expr_vec","","",207],[11,"expr_vec_ng","","",207],[11,"expr_vec_slice","","",207],[11,"expr_str","","",207],[11,"expr_cast","","",207],[11,"expr_some","","",207],[11,"expr_none","","",207],[11,"expr_break","","",207],[11,"expr_tuple","","",207],[11,"expr_fail","","",207],[11,"expr_unreachable","","",207],[11,"expr_ok","","",207],[11,"expr_err","","",207],[11,"expr_try","","",207],[11,"pat","","",207],[11,"pat_wild","","",207],[11,"pat_lit","","",207],[11,"pat_ident","","",207],[11,"pat_ident_binding_mode","","",207],[11,"pat_enum","","",207],[11,"pat_struct","","",207],[11,"pat_tuple","","",207],[11,"pat_some","","",207],[11,"pat_none","","",207],[11,"pat_ok","","",207],[11,"pat_err","","",207],[11,"arm","","",207],[11,"arm_unreachable","","",207],[11,"expr_match","","",207],[11,"expr_if","","",207],[11,"expr_loop","","",207],[11,"lambda_fn_decl","","",207],[11,"lambda","","",207],[11,"lambda0","","",207],[11,"lambda1","","",207],[11,"lambda_expr","","",207],[11,"lambda_expr_0","","",207],[11,"lambda_expr_1","","",207],[11,"lambda_stmts","","",207],[11,"lambda_stmts_0","","",207],[11,"lambda_stmts_1","","",207],[11,"arg","","",207],[11,"fn_decl","","",207],[11,"item","","",207],[11,"item_fn_poly","","",207],[11,"item_fn","","",207],[11,"variant","","",207],[11,"item_enum_poly","","",207],[11,"item_enum","","",207],[11,"item_struct","","",207],[11,"item_struct_poly","","",207],[11,"item_mod","","",207],[11,"item_static","","",207],[11,"item_const","","",207],[11,"item_ty_poly","","",207],[11,"item_ty","","",207],[11,"attribute","","",207],[11,"meta_word","","",207],[11,"meta_list","","",207],[11,"meta_name_value","","",207],[11,"item_use","","",207],[11,"item_use_simple","","",207],[11,"item_use_simple_","","",207],[11,"item_use_list","","",207],[11,"item_use_glob","","",207],[0,"cfg","syntax::ext",""],[5,"expand_cfg","syntax::ext::cfg",""],[0,"concat","syntax::ext",""],[5,"expand_syntax_ext","syntax::ext::concat",""],[0,"concat_idents","syntax::ext",""],[5,"expand_syntax_ext","syntax::ext::concat_idents",""],[0,"deriving","syntax::ext","The compiler code necessary to implement the `#[derive]` extensions."],[5,"register_all","syntax::ext::deriving",""],[0,"bounds","",""],[5,"expand_deriving_unsafe_bound","syntax::ext::deriving::bounds",""],[5,"expand_deriving_copy","",""],[0,"clone","syntax::ext::deriving",""],[5,"expand_deriving_clone","syntax::ext::deriving::clone",""],[0,"encodable","syntax::ext::deriving","The compiler code necessary to implement the `#[derive(Encodable)]`\n(and `Decodable`, in decodable.rs) extension.  The idea here is that\ntype-defining items may be tagged with `#[derive(Encodable, Decodable)]`."],[5,"expand_deriving_rustc_encodable","syntax::ext::deriving::encodable",""],[5,"expand_deriving_encodable","",""],[0,"decodable","syntax::ext::deriving","The compiler code necessary for `#[derive(Decodable)]`. See encodable.rs for more."],[5,"expand_deriving_rustc_decodable","syntax::ext::deriving::decodable",""],[5,"expand_deriving_decodable","",""],[0,"hash","syntax::ext::deriving",""],[5,"expand_deriving_hash","syntax::ext::deriving::hash",""],[0,"rand","syntax::ext::deriving",""],[5,"expand_deriving_rand","syntax::ext::deriving::rand",""],[0,"show","syntax::ext::deriving",""],[5,"expand_deriving_show","syntax::ext::deriving::show",""],[0,"default","syntax::ext::deriving",""],[5,"expand_deriving_default","syntax::ext::deriving::default",""],[0,"primitive","syntax::ext::deriving",""],[5,"expand_deriving_from_primitive","syntax::ext::deriving::primitive",""],[0,"eq","syntax::ext::deriving",""],[5,"expand_deriving_eq","syntax::ext::deriving::eq",""],[0,"totaleq","syntax::ext::deriving",""],[5,"expand_deriving_totaleq","syntax::ext::deriving::totaleq",""],[0,"ord","syntax::ext::deriving",""],[4,"OrderingOp","syntax::ext::deriving::ord",""],[13,"PartialCmpOp","","",219],[13,"LtOp","","",219],[13,"LeOp","","",219],[13,"GtOp","","",219],[13,"GeOp","","",219],[5,"expand_deriving_ord","",""],[5,"some_ordering_collapsed","",""],[5,"cs_partial_cmp","",""],[0,"totalord","syntax::ext::deriving",""],[5,"expand_deriving_totalord","syntax::ext::deriving::totalord",""],[5,"ordering_collapsed","",""],[5,"cs_cmp","",""],[0,"generic","syntax::ext::deriving","Some code that abstracts away much of the boilerplate of writing\n`derive` instances for traits. Among other things it manages getting\naccess to the fields of the 4 different sorts of structs and enum\nvariants, as well as creating the method and impl ast instances."],[3,"TraitDef","syntax::ext::deriving::generic",""],[12,"span","","The span for the current #[derive(Foo)] header.",220],[12,"attributes","","",220],[12,"path","","Path of the trait, including any type parameters",220],[12,"additional_bounds","","Additional bounds required of any type parameters of the type,\nother than the current trait",220],[12,"generics","","Any extra lifetimes and/or bounds, e.g. `D: serialize::Decoder`",220],[12,"methods","","",220],[12,"associated_types","","",220],[3,"MethodDef","",""],[12,"name","","name of the method",221],[12,"generics","","List of generics, e.g. `R: rand::Rng`",221],[12,"explicit_self","","Whether there is a self argument (outer Option) i.e. whether\nthis is a static function, and whether it is a pointer (inner\nOption)",221],[12,"args","","Arguments other than the self argument",221],[12,"ret_ty","","Return type",221],[12,"attributes","","",221],[12,"combine_substructure","","",221],[3,"Substructure","","All the data about the data structure/method being derived upon."],[12,"type_ident","","ident of self",222],[12,"method_ident","","ident of the method",222],[12,"self_args","","dereferenced access to any `Self_` or `Ptr(Self_, _)` arguments",222],[12,"nonself_args","","verbatim access to any other arguments",222],[12,"fields","","",222],[3,"FieldInfo","","Summary of the relevant parts of a struct/enum field."],[12,"span","","",223],[12,"name","","None for tuple structs/normal enum variants, Some for normal\nstructs/struct enum variants.",223],[12,"self_","","The expression corresponding to this field of `self`\n(specifically, a reference to it).",223],[12,"other","","The expressions corresponding to references to this field in\nthe other `Self` arguments.",223],[4,"StaticFields","","Fields for a static method"],[13,"Unnamed","","Tuple structs/enum variants like this.",224],[13,"Named","","Normal structs/struct variants.",224],[4,"SubstructureFields","","A summary of the possible sets of fields."],[13,"Struct","","",225],[13,"EnumMatching","","Matching variants of the enum: variant index, ast::Variant,\nfields: the field name is only non-`None` in the case of a struct\nvariant.",225],[13,"EnumNonMatchingCollapsed","","Non-matching variants of the enum, but with all state hidden from\nthe consequent code.  The first component holds `Ident`s for all of\nthe `Self` arguments; the second component is a slice of all of the\nvariants for the enum itself, and the third component is a list of\n`Ident`s bound to the variant index values for each of the actual\ninput `Self` arguments.",225],[13,"StaticStruct","","A static method where `Self` is a struct.",225],[13,"StaticEnum","","A static method where `Self` is an enum.",225],[5,"combine_substructure","",""],[5,"cs_fold","","Fold the fields. `use_foldl` controls whether this is done\nleft-to-right (`true`) or right-to-left (`false`)."],[5,"cs_same_method","","Call the method that is being derived on all the fields, and then\nprocess the collected results. i.e."],[5,"cs_same_method_fold","","Fold together the results of calling the derived method on all the\nfields. `use_foldl` controls whether this is done left-to-right\n(`true`) or right-to-left (`false`)."],[5,"cs_binop","","Use a given binop to combine the result of calling the derived method\non all the fields."],[5,"cs_or","","cs_binop with binop == or"],[5,"cs_and","","cs_binop with binop == and"],[0,"ty","","A mini version of ast::Ty, which is easier to use, and features an explicit `Self` type to use\nwhen specifying impls to be derived."],[3,"Path","syntax::ext::deriving::generic::ty","A path, e.g. `::std::option::Option::<i32>` (global). Has support\nfor type parameters and a lifetime."],[12,"path","","",226],[12,"lifetime","","",226],[12,"params","","",226],[12,"global","","",226],[3,"LifetimeBounds","","Lifetimes and bounds on type parameters"],[12,"lifetimes","","",227],[12,"bounds","","",227],[4,"PtrTy","","The types of pointers"],[13,"Borrowed","","&'lifetime mut",228],[13,"Raw","","*mut",228],[4,"Ty","","A type. Supports pointers, Self, and literals"],[13,"Self_","","",229],[13,"Ptr","","&/Box/ Ty",229],[13,"Literal","","mod::mod::Type<[lifetime], [Params...]>, including a plain type\nparameter, and things like `i32`",229],[13,"Tuple","","includes unit",229],[5,"borrowed_ptrty","",""],[5,"borrowed","",""],[5,"borrowed_explicit_self","",""],[5,"borrowed_self","",""],[5,"nil_ty","",""],[5,"get_explicit_self","",""],[11,"clone","","",228],[11,"clone","","",226],[11,"new","","",226],[11,"new_local","","",226],[11,"new_","","",226],[11,"to_ty","","",226],[11,"to_path","","",226],[11,"clone","","",229],[11,"to_ty","","",229],[11,"to_path","","",229],[11,"clone","","",227],[11,"empty","","",227],[11,"to_generics","","",227],[6,"CombineSubstructureFunc","syntax::ext::deriving::generic","Combine the values of all the fields together. The last argument is\nall the fields of all the structures."],[6,"EnumNonMatchCollapsedFunc","","Deal with non-matching enum variants.  The tuple is a list of\nidentifiers (one for each `Self` argument, which could be any of the\nvariants since they have been collapsed together) and the identifiers\nholding the variant index value for each of the `Self` arguments.  The\nlast argument is all the non-`Self` args of the method being derived."],[11,"expand","","",220],[0,"env","syntax::ext",""],[5,"expand_option_env","syntax::ext::env",""],[5,"expand_env","",""],[0,"expand","syntax::ext",""],[3,"IdentRenamer","syntax::ext::expand","A tree-folder that applies every rename in its (mutable) list\nto every identifier, including both bindings and varrefs\n(and lots of things that will turn out to be neither)"],[3,"PatIdentRenamer","","A tree-folder that applies every rename in its list to\nthe idents that are in PatIdent patterns. This is more narrowly\nfocused than IdentRenamer, and is needed for FnDecl,\nwhere we want to rename the args but not the fn name or the generics etc."],[3,"MacroExpander","","A tree-folder that performs macro expansion"],[12,"cx","","",230],[3,"ExpansionConfig","",""],[12,"crate_name","","",231],[12,"features","","",231],[12,"recursion_limit","","",231],[5,"expand_type","",""],[5,"expand_expr","",""],[5,"expand_item","",""],[5,"expand_item_mac","",""],[5,"expand_block","",""],[5,"expand_block_elts","",""],[5,"expand_crate","",""],[5,"check_for_macros","","Check that there are no macro invocations left in the AST:"],[11,"fold_ident","","",232],[11,"fold_mac","","",232],[11,"fold_pat","","",233],[11,"fold_mac","","",233],[11,"new","","",230],[11,"fold_expr","","",230],[11,"fold_pat","","",230],[11,"fold_item","","",230],[11,"fold_item_underscore","","",230],[11,"fold_stmt","","",230],[11,"fold_block","","",230],[11,"fold_arm","","",230],[11,"fold_trait_item","","",230],[11,"fold_impl_item","","",230],[11,"fold_method","","",230],[11,"fold_ty","","",230],[11,"new_span","","",230],[11,"default","","",231],[11,"enable_quotes","","",231],[11,"enable_asm","","",231],[11,"enable_log_syntax","","",231],[11,"enable_concat_idents","","",231],[11,"enable_trace_macros","","",231],[11,"enable_allow_internal_unstable","","",231],[11,"enable_custom_derive","","",231],[0,"format","syntax::ext",""],[5,"expand_format_args","syntax::ext::format",""],[5,"expand_preparsed_format_args","","Take the various parts of `format_args!(efmt, args..., name=names...)`\nand construct the appropriate formatting expression."],[0,"log_syntax","syntax::ext",""],[5,"expand_syntax_ext","syntax::ext::log_syntax",""],[0,"mtwt","syntax::ext","Machinery for hygienic macros, as described in the MTWT[1] paper."],[3,"SCTable","syntax::ext::mtwt","The SCTable contains a table of SyntaxContext_'s. It\nrepresents a flattened tree structure, to avoid having\nmanaged pointers everywhere (that caused an ICE).\nthe mark_memo and rename_memo fields are side-tables\nthat ensure that adding the same mark to the same context\ngives you back the same context as before. This shouldn't\nchange the semantics--everything here is immutable--but\nit should cut down on memory use *a lot*; applying a mark\nto a tree containing 50 identifiers would otherwise generate\n50 new contexts"],[4,"SyntaxContext_","",""],[13,"EmptyCtxt","","",234],[13,"Mark","","",234],[13,"Rename","","flattening the name and syntaxcontext into the rename...\nHIDDEN INVARIANTS:\n1) the first name in a Rename node\ncan only be a programmer-supplied name.\n2) Every Rename node with a given Name in the\n\"to\" slot must have the same name and context\nin the \"from\" slot. In essence, they're all\npointers to a single \"rename\" event node.",234],[13,"IllegalCtxt","","actually, IllegalCtxt may not be necessary.",234],[5,"apply_mark","","Extend a syntax context with a given mark"],[5,"apply_rename","","Extend a syntax context with a given rename"],[5,"apply_renames","","Apply a list of renamings to a context"],[5,"with_sctable","","Fetch the SCTable from TLS, create one if it doesn't yet exist."],[5,"display_sctable","","Print out an SCTable for debugging"],[5,"clear_tables","","Clear the tables from TLD to reclaim memory."],[5,"reset_tables","","Reset the tables to their initial state"],[5,"resolve","","Resolve a syntax object to a name, per MTWT."],[5,"marksof","","Compute the marks associated with a syntax context."],[5,"outer_mark","","Return the outer mark for a context with a mark at the outside.\nFAILS when outside is not a mark."],[6,"RenameList","","A list of ident->name renamings"],[11,"fmt","","",234],[11,"hash","","",234],[11,"decode","","",234],[11,"encode","","",234],[11,"eq","","",234],[11,"ne","","",234],[0,"quote","syntax::ext",""],[5,"expand_quote_tokens","syntax::ext::quote",""],[5,"expand_quote_expr","",""],[5,"expand_quote_item","",""],[5,"expand_quote_pat","",""],[5,"expand_quote_arm","",""],[5,"expand_quote_ty","",""],[5,"expand_quote_method","",""],[5,"expand_quote_stmt","",""],[5,"expand_quote_attr","",""],[5,"expand_quote_matcher","",""],[0,"rt","","Quasiquoting works via token trees."],[8,"ToTokens","syntax::ext::quote::rt",""],[10,"to_tokens","","",235],[8,"ToSource","",""],[10,"to_source","","",236],[8,"ExtParseUtils","",""],[10,"parse_item","","",237],[10,"parse_expr","","",237],[10,"parse_stmt","","",237],[10,"parse_tts","","",237],[11,"to_tokens","syntax::ast","",81],[11,"to_tokens","collections::vec","",166],[11,"to_tokens","syntax::codemap","",136],[11,"to_tokens","core::option","",238],[11,"to_source","syntax::ast","",10],[11,"to_source","","",41],[11,"to_source","","",25],[11,"to_source","","",44],[11,"to_source","","",19],[11,"to_source","syntax::ptr","",193],[11,"to_source","","",193],[11,"to_source","","",193],[11,"to_source","","",193],[11,"to_source","","",193],[11,"to_source","syntax::ast","",29],[11,"to_source","","",52],[11,"to_tokens","","",10],[11,"to_tokens","syntax::ptr","",193],[11,"to_tokens","","",193],[11,"to_tokens","syntax::ast","",29],[11,"to_tokens","syntax::ptr","",193],[11,"to_tokens","syntax::ast","",41],[11,"to_tokens","","",19],[11,"to_tokens","syntax::ptr","",193],[11,"to_tokens","","",193],[11,"to_tokens","syntax::ast","",25],[11,"to_tokens","","",44],[11,"to_tokens","","",52],[11,"parse_item","syntax::ext::base","",207],[11,"parse_stmt","","",207],[11,"parse_expr","","",207],[11,"parse_tts","","",207],[0,"source_util","syntax::ext",""],[5,"expand_line","syntax::ext::source_util","line!(): expands to the current line number"],[5,"expand_column","",""],[5,"expand_file","","file!(): expands to the current filename */\nThe filemap (`loc.file`) contains a bunch more information we could spit\nout if we wanted."],[5,"expand_stringify","",""],[5,"expand_mod","",""],[5,"expand_include","","include! : parse the given file as an expr\nThis is generally a bad idea because it's going to behave\nunhygienically."],[5,"expand_include_str","",""],[5,"expand_include_bytes","",""],[0,"trace_macros","syntax::ext",""],[5,"expand_trace_macros","syntax::ext::trace_macros",""],[0,"tt","syntax::ext",""],[0,"transcribe","syntax::ext::tt",""],[3,"TtReader","syntax::ext::tt::transcribe",""],[12,"sp_diag","","",239],[12,"cur_tok","","",239],[12,"cur_span","","",239],[12,"desugar_doc_comments","","Transform doc comments. Only useful in macro invocations",239],[5,"new_tt_reader","","This can do Macro-By-Example transcription. On the other hand, if\n`src` contains no `TtSequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n(and should) be None."],[5,"new_tt_reader_with_doc_flag","","The extra `desugar_doc_comments` flag enables reading doc comments\nlike any other attribute which consists of `meta` and surrounding #[ ] tokens."],[5,"tt_next_token","","Return the next token from the TtReader.\nEFFECT: advances the reader's token field"],[11,"clone","","",239],[0,"macro_parser","syntax::ext::tt","This is an Earley-like parser, without support for in-grammar nonterminals,\nonly by calling out to the main rust parser for named nonterminals (which it\ncommits to fully when it hits one in a grammar). This means that there are no\ncompleter or predictor rules, and therefore no need to store one column per\ntoken: instead, there's a set of current Earley items and a set of next\nones. Instead of NTs, we have a special case for Kleene star. The big-O, in\npathological cases, is worse than traditional Earley parsing, but it's an\neasier fit for Macro-by-Example-style rules, and I think the overhead is\nlower. (In order to prevent the pathological case, we'd need to lazily\nconstruct the resulting `NamedMatch`es at the very end. It'd be a pain,\nand require more memory to keep around old items, but it would also save\noverhead)"],[3,"MatcherPos","syntax::ext::tt::macro_parser",""],[4,"NamedMatch","","NamedMatch is a pattern-match result for a single token::MATCH_NONTERMINAL:\nso it is associated with a single ident in a parse, and all\n`MatchedNonterminal`s in the NamedMatch have the same nonterminal type\n(expr, item, etc). Each leaf in a single NamedMatch corresponds to a\nsingle token::MATCH_NONTERMINAL in the TokenTree that produced it."],[13,"MatchedSeq","","",240],[13,"MatchedNonterminal","","",240],[4,"ParseResult","",""],[13,"Success","","",241],[13,"Failure","","",241],[13,"Error","","",241],[5,"count_names","",""],[5,"initial_matcher_pos","",""],[5,"nameize","",""],[5,"parse_or_else","",""],[5,"token_name_eq","","Perform a token equality check, ignoring syntax context (that is, an\nunhygienic comparison)"],[5,"parse","",""],[5,"parse_nt","",""],[6,"NamedParseResult","",""],[6,"PositionalParseResult","",""],[11,"clone","","",242],[0,"macro_rules","syntax::ext::tt",""],[5,"compile","syntax::ext::tt::macro_rules","Converts a `macro_rules!` invocation into a syntax extension."],[14,"register_diagnostic!","syntax",""],[14,"span_fatal!","",""],[14,"span_err!","",""],[14,"span_warn!","",""],[14,"span_note!","",""],[14,"span_help!","",""],[14,"fileline_help!","",""],[14,"register_diagnostics!","",""],[14,"register_long_diagnostics!","",""],[11,"print_node","syntax::print::pprust","",202],[11,"name","syntax::ptr","",193],[11,"value_str","","",193],[11,"meta_item_list","","",193],[11,"span","","",193],[11,"move_map","syntax::owned_slice","",167],[11,"is_eof","syntax::ext::tt::transcribe","",239],[11,"next_token","","",239],[11,"fatal","","",239],[11,"err","","",239],[11,"peek","","",239]],"paths":[[3,"Interner"],[3,"RcStr"],[3,"StrInterner"],[3,"SmallVector"],[3,"IntoIter"],[3,"Registry"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[4,"AbiArchitecture"],[3,"Ident"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"DefId"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"Expr"],[3,"QSelf"],[3,"Delimited"],[3,"SequenceRepetition"],[3,"MutTy"],[3,"TypeField"],[3,"TypeMethod"],[3,"AssociatedType"],[3,"Typedef"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Method"],[3,"Mod"],[3,"ForeignMod"],[3,"VariantArg"],[3,"EnumDef"],[3,"Variant_"],[3,"Attribute_"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField_"],[3,"StructDef"],[3,"Item"],[3,"ForeignItem"],[3,"MacroDef"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"WherePredicate"],[4,"MetaItem_"],[4,"BindingMode"],[4,"PatWildKind"],[4,"Pat_"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[4,"MacStmtStyle"],[4,"LocalSource"],[4,"Decl_"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"Expr_"],[4,"MatchSource"],[4,"CaptureClause"],[4,"KleeneOp"],[4,"TokenTree"],[4,"Mac_"],[4,"StrStyle"],[4,"Sign"],[4,"LitIntType"],[4,"Lit_"],[4,"TraitItem"],[4,"ImplItem"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[4,"PrimTy"],[4,"Ty_"],[4,"AsmDialect"],[4,"Unsafety"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ExplicitSelf_"],[4,"Method_"],[4,"VariantKind"],[4,"PathListItem_"],[4,"ViewPath_"],[4,"AttrStyle"],[4,"Visibility"],[4,"StructFieldKind"],[4,"Item_"],[4,"ForeignItem_"],[4,"InlinedItem"],[3,"Name"],[3,"AttrId"],[4,"PathElem"],[4,"Node"],[3,"FnParts"],[4,"Code"],[8,"MaybeFnLike"],[3,"FnLikeNode"],[8,"FoldOps"],[8,"NodePrinter"],[3,"Forest"],[3,"Map"],[3,"NodesMatchingSuffix"],[3,"IdRange"],[3,"IdVisitor"],[8,"IdVisitingOperation"],[8,"PostExpansionMethod"],[3,"Stability"],[4,"InlineAttr"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[8,"AttrMetaMethods"],[8,"AttributeMethods"],[6,"Attribute"],[6,"MetaItem"],[3,"Span"],[3,"Spanned"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"FileLines"],[3,"MultiByteChar"],[3,"FileMap"],[3,"CodeMap"],[4,"MacroFormat"],[4,"SpanSnippetError"],[8,"Pos"],[3,"BytePos"],[3,"CharPos"],[3,"ExpnId"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[3,"SpanHandler"],[3,"Handler"],[4,"RenderSpan"],[4,"ColorConfig"],[4,"Level"],[8,"Emitter"],[3,"EmitterWriter"],[3,"Features"],[4,"AttributeType"],[8,"MoveMap"],[8,"Folder"],[3,"Vec"],[3,"OwnedSlice"],[3,"ParseSess"],[3,"Parser"],[4,"PathParsingMode"],[4,"BoundParsingMode"],[4,"TokenType"],[3,"Restrictions"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"Comment"],[3,"Literal"],[4,"CommentStyle"],[8,"Reader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"IdentStyle"],[4,"SpecialMacroVar"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[4,"Keyword"],[3,"InternedString"],[8,"ParserAttr"],[3,"SeqSep"],[4,"ObsoleteSyntax"],[8,"ParserObsoleteMethods"],[3,"P"],[4,"FnKind"],[8,"Visitor"],[3,"Printer"],[4,"Breaks"],[4,"Token"],[4,"PrintStackBreak"],[3,"BreakToken"],[3,"BeginToken"],[3,"State"],[4,"AnnNode"],[8,"PpAnn"],[3,"MacEager"],[3,"BlockInfo"],[3,"ExtCtxt"],[4,"Annotatable"],[4,"SyntaxExtension"],[8,"ItemDecorator"],[8,"ItemModifier"],[8,"MultiItemModifier"],[8,"TTMacroExpander"],[8,"IdentMacroExpander"],[8,"MacResult"],[3,"DummyResult"],[3,"SyntaxEnv"],[8,"AstBuilder"],[4,"OrderingOp"],[3,"TraitDef"],[3,"MethodDef"],[3,"Substructure"],[3,"FieldInfo"],[4,"StaticFields"],[4,"SubstructureFields"],[3,"Path"],[3,"LifetimeBounds"],[4,"PtrTy"],[4,"Ty"],[3,"MacroExpander"],[3,"ExpansionConfig"],[3,"IdentRenamer"],[3,"PatIdentRenamer"],[4,"SyntaxContext_"],[8,"ToTokens"],[8,"ToSource"],[8,"ExtParseUtils"],[4,"Option"],[3,"TtReader"],[4,"NamedMatch"],[4,"ParseResult"],[3,"MatcherPos"]]};
searchIndex['rustc_driver'] = {"items":[[0,"","rustc_driver","The Rust compiler."],[0,"diagnostic","",""],[11,"new","syntax::util::interner","",0],[11,"prefill","","",0],[11,"intern","","",0],[11,"gensym","","",0],[11,"get","","",0],[11,"len","","",0],[11,"find","","",0],[11,"clear","","",0],[11,"partial_cmp","","",1],[11,"lt","","",1],[11,"le","","",1],[11,"gt","","",1],[11,"ge","","",1],[11,"hash","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"new","","",1],[11,"cmp","","",1],[11,"fmt","","",1],[11,"fmt","","",1],[11,"borrow","","",1],[6,"Target","rustc_driver::diagnostic",""],[11,"deref","syntax::util::interner","",1],[11,"new","","",2],[11,"prefill","","",2],[11,"intern","","",2],[11,"gensym","","",2],[11,"gensym_copy","","Create a gensym with the same name as an existing\nentry.",2],[11,"get","","",2],[11,"len","","",2],[11,"find","","",2],[11,"clear","","",2],[11,"reset","","",2],[11,"from_iter","syntax::util::small_vector","",3],[11,"extend","","",3],[11,"zero","","",3],[11,"one","","",3],[11,"many","","",3],[11,"as_slice","","",3],[11,"push","","",3],[11,"push_all","","",3],[11,"get","","",3],[11,"expect_one","","",3],[11,"move_iter","","Deprecated: use `into_iter`.",3],[11,"into_iter","","",3],[11,"len","","",3],[11,"is_empty","","",3],[6,"Item","rustc_driver::diagnostic",""],[11,"next","syntax::util::small_vector","",4],[11,"size_hint","","",4],[11,"move_map","","",3],[11,"clone","syntax::diagnostics::registry","",5],[11,"new","","",5],[11,"find_description","","",5],[11,"hash","syntax::parse::parser","",6],[11,"cmp","","",6],[11,"partial_cmp","","",6],[11,"lt","","",6],[11,"le","","",6],[11,"gt","","",6],[11,"ge","","",6],[11,"clone","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"empty","","Returns an empty set of flags.",6],[11,"all","","Returns the set containing all flags.",6],[11,"bits","","Returns the raw value of the flags currently stored.",6],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",6],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",6],[11,"is_empty","","Returns `true` if no flags are currently stored.",6],[11,"is_all","","Returns `true` if all flags are currently set.",6],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6],[11,"insert","","Inserts the specified flags in-place.",6],[11,"remove","","Removes the specified flags in-place.",6],[11,"toggle","","Toggles the specified flags in-place.",6],[6,"Output","rustc_driver::diagnostic",""],[11,"bitor","syntax::parse::parser","Returns the union of the two sets of flags.",6],[6,"Output","rustc_driver::diagnostic",""],[11,"bitxor","syntax::parse::parser","Returns the left flags, but with all the right flags toggled.",6],[6,"Output","rustc_driver::diagnostic",""],[11,"bitand","syntax::parse::parser","Returns the intersection between the two sets of flags.",6],[6,"Output","rustc_driver::diagnostic",""],[11,"sub","syntax::parse::parser","Returns the set difference of the two sets of flags.",6],[6,"Output","rustc_driver::diagnostic",""],[11,"not","syntax::parse::parser","Returns the complement of this set of flags.",6],[11,"eq","","",7],[11,"ne","","",7],[11,"eq","","",8],[11,"ne","","",8],[11,"clone","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"new","","",10],[11,"token_to_string","","Convert a token to a string using self's reader",10],[11,"this_token_to_string","","Convert the current token to a string using self's reader",10],[11,"unexpected_last","","",10],[11,"unexpected","","",10],[11,"expect","","Expect and consume the token t. Signal an error if\nthe next token is not t.",10],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible,\nthen consume it; if inedible, then return without consuming\nanything.  Signal a fatal error if next token is unexpected.",10],[11,"check_for_erroneous_unit_struct_expecting","","Check for erroneous `ident { }`; if matches, signal error and\nrecover (without consuming any expected input token).  Returns\ntrue if and only if input was consumed for recovery.",10],[11,"commit_expr","","Commit to parsing a complete expression `e` expected to be\nfollowed by some token from the set edible + inedible.  Recover\nfrom anticipated input errors, discarding erroneous characters.",10],[11,"commit_expr_expecting","","",10],[11,"commit_stmt","","Commit to parsing a complete statement `s`, which expects to be\nfollowed by some token from the set edible + inedible.  Check\nfor recoverable input errors, discarding erroneous characters.",10],[11,"commit_stmt_expecting","","",10],[11,"parse_ident","","",10],[11,"parse_ident_or_self_type","","",10],[11,"parse_path_list_item","","",10],[11,"check","","Check if the next token is `tok`, and return `true` if so.",10],[11,"eat","","Consume token 'tok' if it exists. Returns true if the given\ntoken was present, false otherwise.",10],[11,"check_keyword","","",10],[11,"eat_keyword","","If the next token is the given keyword, eat it and return\ntrue. Otherwise, return false.",10],[11,"eat_keyword_noexpect","","",10],[11,"expect_keyword","","If the given word is not a keyword, signal an error.\nIf the next token is not the given word, signal an error.\nOtherwise, eat it.",10],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",10],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",10],[11,"expect_no_suffix","","",10],[11,"expect_gt","","Expect and consume a GT. if a >> is seen, replace it\nwith a single > and continue. If a GT is not seen,\nsignal an error.",10],[11,"parse_seq_to_before_gt_or_return","","",10],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by '<' and '>', stopping\nbefore the '>'.",10],[11,"parse_seq_to_gt","","",10],[11,"parse_seq_to_gt_or_return","","",10],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",10],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",10],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",10],[11,"parse_enum_variant_seq","","Parse a sequence parameter of enum variant. For consistency purposes,\nthese should not be empty.",10],[11,"parse_seq","","",10],[11,"bump","","Advance the parser by one token",10],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",10],[11,"replace_token","","EFFECT: replace the current token and span with the given one",10],[11,"buffer_length","","",10],[11,"look_ahead","","",10],[11,"fatal","","",10],[11,"span_fatal","","",10],[11,"span_fatal_help","","",10],[11,"span_note","","",10],[11,"span_help","","",10],[11,"fileline_help","","",10],[11,"bug","","",10],[11,"warn","","",10],[11,"span_warn","","",10],[11,"span_err","","",10],[11,"span_bug","","",10],[11,"abort_if_errors","","",10],[11,"id_to_interned_str","","",10],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function\ntype?",10],[11,"token_is_closure_keyword","","Is the current token one of the keywords that signals a closure type?",10],[11,"get_lifetime","","",10],[11,"parse_for_in_type","","",10],[11,"parse_ty_path","","",10],[11,"parse_ty_bare_fn","","parse a TyBareFn type:",10],[11,"parse_proc_type","","Parses a procedure type (`proc`). The initial `proc` keyword must\nalready have been parsed.",10],[11,"parse_obsolete_closure_kind","","Parses an obsolete closure kind (`&:`, `&mut:`, or `:`).",10],[11,"parse_ty_bare_fn_or_ty_closure","","",10],[11,"parse_ty_closure","","Parse a TyClosure type",10],[11,"parse_unsafety","","",10],[11,"parse_trait_items","","Parse the items in a trait declaration",10],[11,"parse_mt","","Parse a possibly mutable type",10],[11,"parse_ret_ty","","Parse optional return type [ -> TY ] in function decl",10],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",10],[11,"parse_ty","","Parse a type.",10],[11,"parse_borrowed_pointee","","",10],[11,"parse_ptr","","",10],[11,"is_named_argument","","",10],[11,"parse_arg_general","","This version of parse arg doesn't necessarily require\nidentifier names.",10],[11,"parse_arg","","Parse a single function argument",10],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",10],[11,"maybe_parse_fixed_length_of_vec","","",10],[11,"lit_from_token","","Matches token_lit = LIT_INTEGER | ...",10],[11,"parse_lit","","Matches lit = true | false | token_lit",10],[11,"parse_literal_maybe_minus","","matches '-' lit | lit",10],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the\nmode. The `mode` parameter determines whether lifetimes, types, and/or\nbounds are permitted and whether `::` must precede type parameter\ngroups.",10],[11,"parse_path_segments_without_colons","","Examples:\n- `a::b<T,U>::c<V,W>`\n- `a::b<T,U>::c(V) -> W`\n- `a::b<T,U>::c(V)`",10],[11,"parse_path_segments_with_colons","","Examples:\n- `a::b::<T,U>::c`",10],[11,"parse_path_segments_without_types","","Examples:\n- `a::b::c`",10],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",10],[11,"parse_lifetime","","Parses a single lifetime\nMatches lifetime = LIFETIME",10],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { ',' lifetime_defs } ]` where `lifetime_def  =\nlifetime [':' lifetimes]`",10],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty\none too, but putting that in there messes up the grammar....",10],[11,"parse_mutability","","Parse mutability declaration (mut/const/imm)",10],[11,"parse_field","","Parse ident COLON expr",10],[11,"mk_expr","","",10],[11,"mk_unary","","",10],[11,"mk_binary","","",10],[11,"mk_call","","",10],[11,"mk_index","","",10],[11,"mk_range","","",10],[11,"mk_field","","",10],[11,"mk_tup_field","","",10],[11,"mk_assign_op","","",10],[11,"mk_mac_expr","","",10],[11,"mk_lit_u32","","",10],[11,"parse_bottom_expr","","At the bottom (top?) of the precedence hierarchy,\nparse things like parenthesized exprs,\nmacros, return, etc.",10],[11,"parse_block_expr","","Parse a block or unsafe block",10],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",10],[11,"parse_dot_or_call_expr_with","","",10],[11,"check_unknown_macro_variable","","",10],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style\nrepetition token (+ or *).",10],[11,"parse_token_tree","","parse a single token tree from the input.",10],[11,"parse_all_token_trees","","",10],[11,"parse_prefix_expr","","Parse a prefix-operator expr",10],[11,"parse_binops","","Parse an expression of binops",10],[11,"parse_more_binops","","Parse an expression of binops of at least min_prec precedence",10],[11,"parse_assign_expr","","Parse an assignment expression....\nactually, this seems to be the main entry point for\nparsing an arbitrary expression.",10],[11,"parse_assign_expr_with","","",10],[11,"parse_if_expr","","Parse an 'if' or 'if let' expression ('if' token already eaten)",10],[11,"parse_if_let_expr","","Parse an 'if let' expression ('if' token already eaten)",10],[11,"parse_lambda_expr","","",10],[11,"parse_else_expr","","",10],[11,"parse_for_expr","","Parse a 'for' .. 'in' expression ('for' token already eaten)",10],[11,"parse_while_expr","","Parse a 'while' or 'while let' expression ('while' token already eaten)",10],[11,"parse_while_let_expr","","Parse a 'while let' expression ('while' token already eaten)",10],[11,"parse_loop_expr","","",10],[11,"parse_arm","","",10],[11,"parse_expr","","Parse an expression",10],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",10],[11,"parse_pat","","Parse a pattern.",10],[11,"parse_stmt","","Parse a statement. may include decl.\nPrecondition: any attributes are parsed already",10],[11,"parse_block","","Parse a block. No inner attrs are allowed.",10],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where\nclauses are not parsed here, and must be added later via\n`parse_where_clause()`.",10],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",10],[11,"parse_method_with_outer_attributes","","Parse a method in a trait impl",10],[11,"parse_method","","Parse a method in a trait impl, starting with `attrs` attributes.",10],[11,"parse_record_struct_body","","",10],[11,"parse_tuple_struct_body","","",10],[11,"parse_single_struct_field","","Parse a structure field declaration",10],[11,"parse_item_with_outer_attributes","","",10],[11,"parse_item","","",10],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main\nentry point for the parser.",10],[11,"parse_optional_str","","",10],[11,"parse_str","","",10],[11,"eq","syntax::parse::lexer::comments","",11],[11,"ne","","",11],[11,"clone","","",11],[11,"clone","","",12],[11,"clone","","",13],[11,"fmt","syntax::parse::lexer","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"clone","","",14],[11,"is_eof","","",15],[11,"next_token","","Return the next token. EFFECT: advances the string_reader.",15],[11,"fatal","","",15],[11,"err","","",15],[11,"peek","","",15],[11,"is_eof","syntax::ext::tt::transcribe","",16],[11,"next_token","","",16],[11,"fatal","","",16],[11,"err","","",16],[11,"peek","","",16],[11,"new_raw","syntax::parse::lexer","For comments.rs, which hackily pokes into pos and curr",15],[11,"new","","",15],[11,"curr_is","","",15],[11,"fatal_span","","Report a fatal lexical error with a given span.",15],[11,"err_span","","Report a lexical error with a given span.",15],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start`\nup to but excluding `self.last_pos`, meaning the slice does not include\nthe character `self.curr`.",15],[11,"name_from","","Create a Name from a given offset to the current offset, each\nadjusted 1 towards each other (assumes that on either side there is a\nsingle-byte delimiter).",15],[11,"name_from_to","","As name_from, with an explicit endpoint.",15],[11,"bump","","Advance the StringReader by one character. If a newline is\ndiscovered, add it to the FileMap's list of line start offsets.",15],[11,"nextch","","",15],[11,"nextch_is","","",15],[11,"nextnextch","","",15],[11,"nextnextch_is","","",15],[11,"fmt","syntax::parse::token","",17],[11,"hash","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"clone","","",17],[11,"fmt","","",18],[11,"hash","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"clone","","",18],[11,"fmt","","",19],[11,"hash","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"clone","","",19],[11,"fmt","","",20],[11,"hash","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"decode","","",20],[11,"encode","","",20],[11,"clone","","",20],[11,"as_str","","",20],[11,"fmt","","",21],[11,"hash","","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"decode","","",21],[11,"encode","","",21],[11,"clone","","",21],[11,"short_name","","",21],[11,"fmt","","",22],[11,"hash","","",22],[11,"eq","","",22],[11,"ne","","",22],[11,"decode","","",22],[11,"encode","","",22],[11,"clone","","",22],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",22],[11,"is_lit","","Returns `true` if the token is any literal",22],[11,"is_ident","","Returns `true` if the token is an identifier.",22],[11,"is_path","","Returns `true` if the token is an interpolated path.",22],[11,"is_plain_ident","","Returns `true` if the token is a path that is not followed by a `::`\ntoken.",22],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",22],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",22],[11,"to_binop","","Maps a token to its corresponding binary operator.",22],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",22],[11,"is_keyword_allow_following_colon","","",22],[11,"is_any_keyword","","Returns `true` if the token is either a special identifier, or a strict\nor reserved keyword.",22],[11,"is_strict_keyword","","Returns `true` if the token may not appear as an identifier.",22],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword that has been reserved for\npossible future use.",22],[11,"mtwt_eq","","Hygienic identifier equality comparison.",22],[11,"hash","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"clone","","",23],[11,"fmt","","",23],[11,"eq","syntax::parse::token::keywords","",24],[11,"ne","","",24],[11,"clone","","",24],[11,"to_name","","",24],[11,"cmp","syntax::parse::token","",25],[11,"partial_cmp","","",25],[11,"lt","","",25],[11,"le","","",25],[11,"gt","","",25],[11,"ge","","",25],[11,"hash","","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"clone","","",25],[11,"new","","",25],[6,"Target","rustc_driver::diagnostic",""],[11,"deref","syntax::parse::token","",25],[11,"container_as_bytes","","",25],[11,"fmt","","",25],[11,"fmt","","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"decode","","",25],[11,"encode","","",25],[11,"parse_outer_attributes","syntax::parse::parser","Parse attributes that appear before an item",10],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",10],[11,"parse_inner_attrs_and_next","","Parse attributes that appear after the opening of an item. These should\nbe preceded by an exclamation mark, but we accept and warn about one\nterminated by a semicolon. In addition to a vector of inner attributes,\nthis function also returns a vector that may contain the first outer\nattribute of the next item (since we can't know whether the attribute\nis an inner attribute of the containing item or an outer attribute of\nthe first contained item until we see the semi).\nmatches inner_attrs* outer_attr?\nyou can make the 'next' field an Option, but the result is going to be\nmore useful as a vector.",10],[11,"parse_meta_item","","matches meta_item = IDENT\n| IDENT = lit\n| IDENT meta_seq",10],[11,"parse_meta_seq","","matches meta_seq = ( COMMASEP(meta_item) )",10],[11,"parse_optional_meta","","",10],[11,"hash","syntax::parse::obsolete","",26],[11,"eq","","",26],[11,"ne","","",26],[11,"obsolete","syntax::parse::parser","Reports an obsolete syntax non-fatal error.",10],[11,"obsolete_expr","","Reports an obsolete syntax non-fatal error, and returns\na placeholder expression",10],[11,"report","","",10],[11,"is_obsolete_ident","","",10],[11,"eat_obsolete_ident","","",10],[11,"next_node_id","syntax::parse","",27],[11,"reserve_node_ids","","",27],[11,"cmp","syntax::ast","",28],[11,"partial_cmp","","",28],[11,"lt","","",28],[11,"le","","",28],[11,"gt","","",28],[11,"ge","","",28],[11,"hash","","",28],[11,"clone","","",28],[11,"new","","Construct an identifier with the given name and an empty context:",28],[11,"as_str","","",28],[11,"encode_with_hygiene","","",28],[11,"fmt","","",28],[11,"fmt","","",28],[11,"fmt","","",29],[11,"fmt","","",29],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",29],[11,"decode","","",29],[11,"encode","","",29],[11,"hash","","",29],[11,"partial_cmp","","",29],[11,"lt","","",29],[11,"le","","",29],[11,"gt","","",29],[11,"ge","","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"cmp","","",29],[11,"as_str","","",29],[11,"usize","","",29],[11,"ident","","",29],[11,"encode","","",28],[11,"decode","","",28],[11,"fmt","","",30],[11,"hash","","",30],[11,"decode","","",30],[11,"encode","","",30],[11,"eq","","",30],[11,"ne","","",30],[11,"clone","","",30],[11,"fmt","","",31],[11,"hash","","",31],[11,"decode","","",31],[11,"encode","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"clone","","",31],[11,"fmt","","",32],[11,"hash","","",32],[11,"decode","","",32],[11,"encode","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"clone","","",32],[11,"fmt","","",33],[11,"hash","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"clone","","",33],[11,"fmt","","",34],[11,"hash","","",34],[11,"decode","","",34],[11,"encode","","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"clone","","",34],[11,"none","","",34],[11,"is_empty","","",34],[11,"has_lifetimes","","",34],[11,"has_types","","",34],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",34],[11,"lifetimes","","",34],[11,"bindings","","",34],[11,"fmt","","",35],[11,"hash","","",35],[11,"decode","","",35],[11,"encode","","",35],[11,"eq","","",35],[11,"ne","","",35],[11,"clone","","",35],[11,"fmt","","",36],[11,"hash","","",36],[11,"decode","","",36],[11,"encode","","",36],[11,"eq","","",36],[11,"ne","","",36],[11,"clone","","",36],[11,"fmt","","",37],[11,"hash","","",37],[11,"decode","","",37],[11,"encode","","",37],[11,"eq","","",37],[11,"ne","","",37],[11,"partial_cmp","","",37],[11,"lt","","",37],[11,"le","","",37],[11,"gt","","",37],[11,"ge","","",37],[11,"cmp","","",37],[11,"clone","","",37],[11,"local_id","","Read the node id, asserting that this def-id is krate-local.",37],[11,"fmt","","",38],[11,"hash","","",38],[11,"decode","","",38],[11,"encode","","",38],[11,"eq","","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"fmt","","",39],[11,"hash","","",39],[11,"decode","","",39],[11,"encode","","",39],[11,"eq","","",39],[11,"ne","","",39],[11,"clone","","",39],[11,"fmt","","",40],[11,"hash","","",40],[11,"decode","","",40],[11,"encode","","",40],[11,"eq","","",40],[11,"ne","","",40],[11,"clone","","",40],[11,"fmt","","",41],[11,"hash","","",41],[11,"decode","","",41],[11,"encode","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"is_parameterized","","",41],[11,"is_lt_parameterized","","",41],[11,"is_type_parameterized","","",41],[11,"fmt","","",42],[11,"hash","","",42],[11,"decode","","",42],[11,"encode","","",42],[11,"eq","","",42],[11,"ne","","",42],[11,"clone","","",42],[11,"fmt","","",43],[11,"hash","","",43],[11,"decode","","",43],[11,"encode","","",43],[11,"eq","","",43],[11,"ne","","",43],[11,"clone","","",43],[11,"fmt","","",44],[11,"hash","","",44],[11,"decode","","",44],[11,"encode","","",44],[11,"eq","","",44],[11,"ne","","",44],[11,"clone","","",44],[11,"fmt","","",45],[11,"hash","","",45],[11,"decode","","",45],[11,"encode","","",45],[11,"eq","","",45],[11,"ne","","",45],[11,"clone","","",45],[11,"fmt","","",46],[11,"hash","","",46],[11,"decode","","",46],[11,"encode","","",46],[11,"eq","","",46],[11,"ne","","",46],[11,"clone","","",46],[11,"fmt","","",47],[11,"hash","","",47],[11,"decode","","",47],[11,"encode","","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"clone","","",47],[11,"fmt","","",48],[11,"hash","","",48],[11,"decode","","",48],[11,"encode","","",48],[11,"clone","","",48],[11,"eq","","",48],[11,"fmt","","",49],[11,"hash","","",49],[11,"decode","","",49],[11,"encode","","",49],[11,"eq","","",49],[11,"ne","","",49],[11,"clone","","",49],[11,"fmt","","",50],[11,"hash","","",50],[11,"decode","","",50],[11,"encode","","",50],[11,"eq","","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"fmt","","",51],[11,"hash","","",51],[11,"decode","","",51],[11,"encode","","",51],[11,"eq","","",51],[11,"ne","","",51],[11,"clone","","",51],[11,"fmt","","",52],[11,"hash","","",52],[11,"decode","","",52],[11,"encode","","",52],[11,"eq","","",52],[11,"ne","","",52],[11,"clone","","",52],[11,"fmt","","",53],[11,"hash","","",53],[11,"decode","","",53],[11,"encode","","",53],[11,"eq","","",53],[11,"ne","","",53],[11,"clone","","",53],[11,"fmt","","",54],[11,"hash","","",54],[11,"decode","","",54],[11,"encode","","",54],[11,"eq","","",54],[11,"ne","","",54],[11,"clone","","",54],[11,"fmt","","",55],[11,"hash","","",55],[11,"decode","","",55],[11,"encode","","",55],[11,"eq","","",55],[11,"ne","","",55],[11,"clone","","",55],[11,"fmt","","",56],[11,"hash","","",56],[11,"decode","","",56],[11,"encode","","",56],[11,"eq","","",56],[11,"ne","","",56],[11,"clone","","",56],[11,"fmt","","",57],[11,"hash","","",57],[11,"decode","","",57],[11,"encode","","",57],[11,"eq","","",57],[11,"ne","","",57],[11,"clone","","",57],[11,"fmt","","",58],[11,"hash","","",58],[11,"decode","","",58],[11,"encode","","",58],[11,"eq","","",58],[11,"ne","","",58],[11,"clone","","",58],[11,"fmt","","",59],[11,"hash","","",59],[11,"decode","","",59],[11,"encode","","",59],[11,"eq","","",59],[11,"ne","","",59],[11,"clone","","",59],[11,"fmt","","",60],[11,"hash","","",60],[11,"decode","","",60],[11,"encode","","",60],[11,"eq","","",60],[11,"ne","","",60],[11,"clone","","",60],[11,"fmt","","",61],[11,"hash","","",61],[11,"decode","","",61],[11,"encode","","",61],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[11,"fmt","","",62],[11,"hash","","",62],[11,"decode","","",62],[11,"encode","","",62],[11,"eq","","",62],[11,"ne","","",62],[11,"clone","","",62],[11,"fmt","","",63],[11,"hash","","",63],[11,"decode","","",63],[11,"encode","","",63],[11,"eq","","",63],[11,"ne","","",63],[11,"clone","","",63],[11,"fmt","","",64],[11,"hash","","",64],[11,"decode","","",64],[11,"encode","","",64],[11,"eq","","",64],[11,"ne","","",64],[11,"clone","","",64],[11,"fmt","","",65],[11,"hash","","",65],[11,"decode","","",65],[11,"encode","","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"clone","","",65],[11,"fmt","","",66],[11,"hash","","",66],[11,"decode","","",66],[11,"encode","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"clone","","",66],[11,"fmt","","",67],[11,"hash","","",67],[11,"decode","","",67],[11,"encode","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"clone","","",67],[11,"fmt","","",68],[11,"hash","","",68],[11,"decode","","",68],[11,"encode","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"clone","","",68],[11,"fmt","","",69],[11,"hash","","",69],[11,"decode","","",69],[11,"encode","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"clone","","",69],[11,"fmt","","",70],[11,"hash","","",70],[11,"decode","","",70],[11,"encode","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"clone","","",70],[11,"fmt","","",71],[11,"hash","","",71],[11,"decode","","",71],[11,"encode","","",71],[11,"eq","","",71],[11,"ne","","",71],[11,"clone","","",71],[11,"fmt","","",72],[11,"hash","","",72],[11,"decode","","",72],[11,"encode","","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"open_token","","Returns the opening delimiter as a token.",72],[11,"close_token","","Returns the closing delimiter as a token.",72],[11,"open_tt","","Returns the opening delimiter as a token tree.",72],[11,"close_tt","","Returns the closing delimiter as a token tree.",72],[11,"fmt","","",73],[11,"hash","","",73],[11,"decode","","",73],[11,"encode","","",73],[11,"eq","","",73],[11,"ne","","",73],[11,"clone","","",73],[11,"fmt","","",74],[11,"hash","","",74],[11,"decode","","",74],[11,"encode","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"fmt","","",75],[11,"hash","","",75],[11,"decode","","",75],[11,"encode","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"clone","","",75],[11,"len","","",75],[11,"get_tt","","",75],[11,"get_span","","Returns the `Span` corresponding to this token tree.",75],[11,"parse","","Use this token tree as a matcher to parse given tts.",75],[11,"fmt","","",76],[11,"hash","","",76],[11,"decode","","",76],[11,"encode","","",76],[11,"eq","","",76],[11,"ne","","",76],[11,"clone","","",76],[11,"fmt","","",77],[11,"hash","","",77],[11,"decode","","",77],[11,"encode","","",77],[11,"eq","","",77],[11,"ne","","",77],[11,"clone","","",77],[11,"fmt","","",78],[11,"hash","","",78],[11,"decode","","",78],[11,"encode","","",78],[11,"eq","","",78],[11,"ne","","",78],[11,"clone","","",78],[11,"new","","",78],[11,"fmt","","",79],[11,"hash","","",79],[11,"decode","","",79],[11,"encode","","",79],[11,"eq","","",79],[11,"ne","","",79],[11,"clone","","",79],[11,"suffix_len","","",79],[11,"fmt","","",80],[11,"hash","","",80],[11,"decode","","",80],[11,"encode","","",80],[11,"eq","","",80],[11,"ne","","",80],[11,"clone","","",80],[11,"fmt","","",81],[11,"hash","","",81],[11,"decode","","",81],[11,"encode","","",81],[11,"eq","","",81],[11,"ne","","",81],[11,"clone","","",81],[11,"fmt","","",82],[11,"hash","","",82],[11,"decode","","",82],[11,"encode","","",82],[11,"eq","","",82],[11,"ne","","",82],[11,"clone","","",82],[11,"fmt","","",83],[11,"hash","","",83],[11,"decode","","",83],[11,"encode","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"clone","","",83],[11,"fmt","","",84],[11,"hash","","",84],[11,"decode","","",84],[11,"encode","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"clone","","",84],[11,"fmt","","",85],[11,"hash","","",85],[11,"decode","","",85],[11,"encode","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"clone","","",85],[11,"fmt","","",86],[11,"hash","","",86],[11,"decode","","",86],[11,"encode","","",86],[11,"eq","","",86],[11,"ne","","",86],[11,"clone","","",86],[11,"fmt","","",87],[11,"hash","","",87],[11,"decode","","",87],[11,"encode","","",87],[11,"eq","","",87],[11,"ne","","",87],[11,"clone","","",87],[11,"hash","","",88],[11,"decode","","",88],[11,"encode","","",88],[11,"clone","","",88],[11,"eq","","",88],[11,"fmt","","",88],[11,"fmt","","",88],[11,"suffix_len","","",88],[11,"hash","","",89],[11,"decode","","",89],[11,"encode","","",89],[11,"clone","","",89],[11,"eq","","",89],[11,"suffix_len","","",89],[11,"fmt","","",89],[11,"fmt","","",89],[11,"hash","","",90],[11,"decode","","",90],[11,"encode","","",90],[11,"eq","","",90],[11,"ne","","",90],[11,"clone","","",90],[11,"fmt","","",90],[11,"fmt","","",90],[11,"suffix_len","","",90],[11,"fmt","","",91],[11,"hash","","",91],[11,"decode","","",91],[11,"encode","","",91],[11,"eq","","",91],[11,"ne","","",91],[11,"clone","","",91],[11,"fmt","","",92],[11,"hash","","",92],[11,"decode","","",92],[11,"encode","","",92],[11,"eq","","",92],[11,"ne","","",92],[11,"clone","","",92],[11,"fmt","","",93],[11,"hash","","",93],[11,"decode","","",93],[11,"encode","","",93],[11,"eq","","",93],[11,"ne","","",93],[11,"clone","","",93],[11,"fmt","","",94],[11,"hash","","",94],[11,"decode","","",94],[11,"encode","","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[11,"fmt","","",95],[11,"hash","","",95],[11,"decode","","",95],[11,"encode","","",95],[11,"eq","","",95],[11,"ne","","",95],[11,"clone","","",95],[11,"fmt","","",96],[11,"hash","","",96],[11,"decode","","",96],[11,"encode","","",96],[11,"eq","","",96],[11,"ne","","",96],[11,"clone","","",96],[11,"fmt","","",97],[11,"hash","","",97],[11,"decode","","",97],[11,"encode","","",97],[11,"eq","","",97],[11,"ne","","",97],[11,"clone","","",97],[11,"fmt","","",98],[11,"hash","","",98],[11,"decode","","",98],[11,"encode","","",98],[11,"eq","","",98],[11,"ne","","",98],[11,"clone","","",98],[11,"new_self","","",98],[11,"fmt","","",99],[11,"hash","","",99],[11,"decode","","",99],[11,"encode","","",99],[11,"eq","","",99],[11,"ne","","",99],[11,"clone","","",99],[11,"fmt","","",100],[11,"hash","","",100],[11,"decode","","",100],[11,"encode","","",100],[11,"eq","","",100],[11,"ne","","",100],[11,"clone","","",100],[11,"fmt","","",100],[11,"hash","","",101],[11,"decode","","",101],[11,"encode","","",101],[11,"eq","","",101],[11,"ne","","",101],[11,"clone","","",101],[11,"fmt","","",101],[11,"fmt","","",102],[11,"hash","","",102],[11,"decode","","",102],[11,"encode","","",102],[11,"eq","","",102],[11,"ne","","",102],[11,"clone","","",102],[11,"span","","",102],[11,"fmt","","",103],[11,"hash","","",103],[11,"decode","","",103],[11,"encode","","",103],[11,"eq","","",103],[11,"ne","","",103],[11,"clone","","",103],[11,"fmt","","",104],[11,"hash","","",104],[11,"decode","","",104],[11,"encode","","",104],[11,"eq","","",104],[11,"ne","","",104],[11,"clone","","",104],[11,"fmt","","",105],[11,"hash","","",105],[11,"decode","","",105],[11,"encode","","",105],[11,"eq","","",105],[11,"ne","","",105],[11,"clone","","",105],[11,"fmt","","",106],[11,"hash","","",106],[11,"decode","","",106],[11,"encode","","",106],[11,"eq","","",106],[11,"ne","","",106],[11,"clone","","",106],[11,"fmt","","",107],[11,"hash","","",107],[11,"decode","","",107],[11,"encode","","",107],[11,"eq","","",107],[11,"ne","","",107],[11,"clone","","",107],[11,"fmt","","",108],[11,"hash","","",108],[11,"decode","","",108],[11,"encode","","",108],[11,"eq","","",108],[11,"ne","","",108],[11,"clone","","",108],[11,"fmt","","",109],[11,"hash","","",109],[11,"decode","","",109],[11,"encode","","",109],[11,"eq","","",109],[11,"ne","","",109],[11,"clone","","",109],[11,"fmt","","",110],[11,"hash","","",110],[11,"decode","","",110],[11,"encode","","",110],[11,"eq","","",110],[11,"ne","","",110],[11,"clone","","",110],[11,"fmt","","",111],[11,"hash","","",111],[11,"decode","","",111],[11,"encode","","",111],[11,"eq","","",111],[11,"ne","","",111],[11,"clone","","",111],[11,"fmt","","",112],[11,"hash","","",112],[11,"decode","","",112],[11,"encode","","",112],[11,"eq","","",112],[11,"ne","","",112],[11,"clone","","",112],[11,"id","","",112],[11,"fmt","","",113],[11,"hash","","",113],[11,"decode","","",113],[11,"encode","","",113],[11,"eq","","",113],[11,"ne","","",113],[11,"clone","","",113],[11,"fmt","","",114],[11,"hash","","",114],[11,"decode","","",114],[11,"encode","","",114],[11,"eq","","",114],[11,"ne","","",114],[11,"clone","","",114],[11,"fmt","","",115],[11,"hash","","",115],[11,"decode","","",115],[11,"encode","","",115],[11,"eq","","",115],[11,"ne","","",115],[11,"clone","","",115],[11,"fmt","","",116],[11,"hash","","",116],[11,"decode","","",116],[11,"encode","","",116],[11,"eq","","",116],[11,"ne","","",116],[11,"clone","","",116],[11,"fmt","","",117],[11,"hash","","",117],[11,"decode","","",117],[11,"encode","","",117],[11,"eq","","",117],[11,"ne","","",117],[11,"clone","","",117],[11,"fmt","","",118],[11,"hash","","",118],[11,"decode","","",118],[11,"encode","","",118],[11,"eq","","",118],[11,"ne","","",118],[11,"clone","","",118],[11,"fmt","","",119],[11,"hash","","",119],[11,"decode","","",119],[11,"encode","","",119],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"inherit_from","","",119],[11,"fmt","","",120],[11,"hash","","",120],[11,"decode","","",120],[11,"encode","","",120],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"ident","","",120],[11,"fmt","","",121],[11,"hash","","",121],[11,"decode","","",121],[11,"encode","","",121],[11,"eq","","",121],[11,"ne","","",121],[11,"clone","","",121],[11,"is_unnamed","","",121],[11,"fmt","","",122],[11,"hash","","",122],[11,"decode","","",122],[11,"encode","","",122],[11,"eq","","",122],[11,"ne","","",122],[11,"clone","","",122],[11,"fmt","","",123],[11,"hash","","",123],[11,"decode","","",123],[11,"encode","","",123],[11,"eq","","",123],[11,"ne","","",123],[11,"clone","","",123],[11,"fmt","","",124],[11,"hash","","",124],[11,"decode","","",124],[11,"encode","","",124],[11,"eq","","",124],[11,"ne","","",124],[11,"clone","","",124],[11,"descriptive_variant","","",124],[11,"fmt","","",125],[11,"hash","","",125],[11,"decode","","",125],[11,"encode","","",125],[11,"eq","","",125],[11,"ne","","",125],[11,"clone","","",125],[11,"fmt","","",126],[11,"hash","","",126],[11,"decode","","",126],[11,"encode","","",126],[11,"eq","","",126],[11,"ne","","",126],[11,"clone","","",126],[11,"descriptive_variant","","",126],[11,"fmt","","",127],[11,"hash","","",127],[11,"decode","","",127],[11,"encode","","",127],[11,"eq","","",127],[11,"ne","","",127],[11,"clone","","",127],[11,"fmt","","",128],[11,"hash","","",128],[11,"decode","","",128],[11,"encode","","",128],[11,"eq","","",128],[11,"ne","","",128],[11,"clone","","",128],[11,"clone","syntax::ext::base","",129],[11,"fmt","","",129],[11,"attrs","","",129],[11,"fold_attrs","","",129],[11,"expect_item","","",129],[11,"expect_trait_item","","",129],[11,"expect_impl_item","","",129],[11,"default","","",130],[11,"expr","","",130],[11,"pat","","",130],[11,"items","","",130],[11,"methods","","",130],[11,"stmt","","",130],[11,"make_expr","","",130],[11,"make_items","","",130],[11,"make_methods","","",130],[11,"make_stmt","","",130],[11,"make_pat","","",130],[11,"any","","Create a default MacResult that can be anything.",131],[11,"expr","","Create a default MacResult that can only be an expression.",131],[11,"raw_expr","","A plain dummy expression.",131],[11,"raw_pat","","A plain dummy pattern.",131],[11,"make_expr","","",131],[11,"make_pat","","",131],[11,"make_items","","",131],[11,"make_methods","","",131],[11,"make_stmt","","",131],[11,"new","","",132],[11,"new","","",133],[11,"expand_expr","","",133],[11,"expander","","Returns a `Folder` for deeply expanding all macros in a AST node.",133],[11,"new_parser_from_tts","","",133],[11,"codemap","","",133],[11,"parse_sess","","",133],[11,"cfg","","",133],[11,"call_site","","",133],[11,"print_backtrace","","",133],[11,"backtrace","","",133],[11,"original_span","","",133],[11,"original_span_in_file","","",133],[11,"mod_push","","",133],[11,"mod_pop","","",133],[11,"mod_path","","",133],[11,"bt_push","","",133],[11,"bt_pop","","",133],[11,"insert_macro","","",133],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",133],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping\ncompilation.",133],[11,"span_warn","","",133],[11,"span_unimpl","","",133],[11,"span_bug","","",133],[11,"span_note","","",133],[11,"span_help","","",133],[11,"fileline_help","","",133],[11,"bug","","",133],[11,"trace_macros","","",133],[11,"set_trace_macros","","",133],[11,"ident_of","","",133],[11,"ident_of_std","","",133],[11,"name_of","","",133],[11,"push_frame","","",134],[11,"pop_frame","","",134],[11,"find","","",134],[11,"insert","","",134],[11,"info","","",134],[11,"path","","",133],[11,"path_ident","","",133],[11,"path_global","","",133],[11,"path_all","","",133],[11,"qpath","","Constructs a qualified path.",133],[11,"qpath_all","","Constructs a qualified path.",133],[11,"ty_mt","","",133],[11,"ty","","",133],[11,"ty_path","","",133],[11,"ty_sum","","",133],[11,"ty_ident","","",133],[11,"ty_rptr","","",133],[11,"ty_ptr","","",133],[11,"ty_option","","",133],[11,"ty_field_imm","","",133],[11,"ty_infer","","",133],[11,"typaram","","",133],[11,"ty_vars","","",133],[11,"ty_vars_global","","",133],[11,"trait_ref","","",133],[11,"poly_trait_ref","","",133],[11,"typarambound","","",133],[11,"lifetime","","",133],[11,"lifetime_def","","",133],[11,"stmt_expr","","",133],[11,"stmt_let","","",133],[11,"stmt_let_typed","","",133],[11,"block","","",133],[11,"stmt_item","","",133],[11,"block_expr","","",133],[11,"block_all","","",133],[11,"expr","","",133],[11,"expr_path","","",133],[11,"expr_qpath","","Constructs a QPath expression.",133],[11,"expr_ident","","",133],[11,"expr_self","","",133],[11,"expr_binary","","",133],[11,"expr_deref","","",133],[11,"expr_unary","","",133],[11,"expr_field_access","","",133],[11,"expr_tup_field_access","","",133],[11,"expr_addr_of","","",133],[11,"expr_mut_addr_of","","",133],[11,"expr_call","","",133],[11,"expr_call_ident","","",133],[11,"expr_call_global","","",133],[11,"expr_method_call","","",133],[11,"expr_block","","",133],[11,"field_imm","","",133],[11,"expr_struct","","",133],[11,"expr_struct_ident","","",133],[11,"expr_lit","","",133],[11,"expr_usize","","",133],[11,"expr_int","","",133],[11,"expr_u32","","",133],[11,"expr_u8","","",133],[11,"expr_bool","","",133],[11,"expr_vec","","",133],[11,"expr_vec_ng","","",133],[11,"expr_vec_slice","","",133],[11,"expr_str","","",133],[11,"expr_cast","","",133],[11,"expr_some","","",133],[11,"expr_none","","",133],[11,"expr_break","","",133],[11,"expr_tuple","","",133],[11,"expr_fail","","",133],[11,"expr_unreachable","","",133],[11,"expr_ok","","",133],[11,"expr_err","","",133],[11,"expr_try","","",133],[11,"pat","","",133],[11,"pat_wild","","",133],[11,"pat_lit","","",133],[11,"pat_ident","","",133],[11,"pat_ident_binding_mode","","",133],[11,"pat_enum","","",133],[11,"pat_struct","","",133],[11,"pat_tuple","","",133],[11,"pat_some","","",133],[11,"pat_none","","",133],[11,"pat_ok","","",133],[11,"pat_err","","",133],[11,"arm","","",133],[11,"arm_unreachable","","",133],[11,"expr_match","","",133],[11,"expr_if","","",133],[11,"expr_loop","","",133],[11,"lambda_fn_decl","","",133],[11,"lambda","","",133],[11,"lambda0","","",133],[11,"lambda1","","",133],[11,"lambda_expr","","",133],[11,"lambda_expr_0","","",133],[11,"lambda_expr_1","","",133],[11,"lambda_stmts","","",133],[11,"lambda_stmts_0","","",133],[11,"lambda_stmts_1","","",133],[11,"arg","","",133],[11,"fn_decl","","",133],[11,"item","","",133],[11,"item_fn_poly","","",133],[11,"item_fn","","",133],[11,"variant","","",133],[11,"item_enum_poly","","",133],[11,"item_enum","","",133],[11,"item_struct","","",133],[11,"item_struct_poly","","",133],[11,"item_mod","","",133],[11,"item_static","","",133],[11,"item_const","","",133],[11,"item_ty_poly","","",133],[11,"item_ty","","",133],[11,"attribute","","",133],[11,"meta_word","","",133],[11,"meta_list","","",133],[11,"meta_name_value","","",133],[11,"item_use","","",133],[11,"item_use_simple","","",133],[11,"item_use_simple_","","",133],[11,"item_use_list","","",133],[11,"item_use_glob","","",133],[11,"clone","syntax::ext::deriving::generic::ty","",135],[11,"clone","","",136],[11,"new","","",136],[11,"new_local","","",136],[11,"new_","","",136],[11,"to_ty","","",136],[11,"to_path","","",136],[11,"clone","","",137],[11,"to_ty","","",137],[11,"to_path","","",137],[11,"clone","","",138],[11,"empty","","",138],[11,"to_generics","","",138],[11,"expand","syntax::ext::deriving::generic","",139],[11,"eq","","",140],[11,"ne","","",140],[11,"clone","syntax::ext::expand","",141],[11,"visit_pat","","",141],[11,"fold_ident","","",142],[11,"fold_mac","","",142],[11,"fold_pat","","",143],[11,"fold_mac","","",143],[11,"new","","",144],[11,"fold_expr","","",144],[11,"fold_pat","","",144],[11,"fold_item","","",144],[11,"fold_item_underscore","","",144],[11,"fold_stmt","","",144],[11,"fold_block","","",144],[11,"fold_arm","","",144],[11,"fold_trait_item","","",144],[11,"fold_impl_item","","",144],[11,"fold_method","","",144],[11,"fold_ty","","",144],[11,"new_span","","",144],[11,"default","","",145],[11,"enable_quotes","","",145],[11,"enable_asm","","",145],[11,"enable_log_syntax","","",145],[11,"enable_concat_idents","","",145],[11,"enable_trace_macros","","",145],[11,"enable_allow_internal_unstable","","",145],[11,"enable_custom_derive","","",145],[11,"fold_ident","","",146],[11,"fold_mac","","",146],[11,"visit_mac","","",147],[11,"eq","syntax::ext::format","",148],[11,"ne","","",148],[11,"fmt","syntax::ext::mtwt","",149],[11,"hash","","",149],[11,"decode","","",149],[11,"encode","","",149],[11,"eq","","",149],[11,"ne","","",149],[11,"to_tokens","syntax::ast","",75],[11,"to_tokens","collections::vec","",150],[11,"to_tokens","syntax::codemap","",151],[11,"to_tokens","core::option","",152],[11,"to_source","syntax::ast","",28],[11,"to_source_with_hygiene","","",28],[11,"to_source","","",92],[11,"to_source_with_hygiene","","",92],[11,"to_source","","",49],[11,"to_source_with_hygiene","","",49],[11,"to_source","","",98],[11,"to_source_with_hygiene","","",98],[11,"to_source","","",41],[11,"to_source_with_hygiene","","",41],[11,"to_source","syntax::ptr","",153],[11,"to_source_with_hygiene","","",153],[11,"to_source","","",153],[11,"to_source_with_hygiene","","",153],[11,"to_source","","",153],[11,"to_source_with_hygiene","","",153],[11,"to_source","","",153],[11,"to_source_with_hygiene","","",153],[11,"to_source","","",153],[11,"to_source_with_hygiene","","",153],[11,"to_source","syntax::ast","",63],[11,"to_source_with_hygiene","","",63],[11,"to_source","","",116],[11,"to_source_with_hygiene","","",116],[11,"to_tokens","","",28],[11,"to_tokens","syntax::ptr","",153],[11,"to_tokens","","",153],[11,"to_tokens","syntax::ast","",63],[11,"to_tokens","syntax::ptr","",153],[11,"to_tokens","syntax::ast","",92],[11,"to_tokens","","",41],[11,"to_tokens","syntax::ptr","",153],[11,"to_tokens","","",153],[11,"to_tokens","syntax::ast","",49],[11,"to_tokens","","",98],[11,"to_tokens","","",116],[11,"parse_item","syntax::ext::base","",133],[11,"parse_stmt","","",133],[11,"parse_expr","","",133],[11,"parse_tts","","",133],[11,"parse_tts_with_hygiene","","",133],[11,"clone","syntax::ext::tt::transcribe","",154],[11,"clone","","",16],[11,"clone","","",155],[6,"Output","rustc_driver::diagnostic",""],[11,"add","syntax::ext::tt::transcribe","",155],[11,"clone","syntax::ext::tt::macro_parser","",156],[11,"clone","","",157],[11,"clone","","",158],[11,"make_expr","syntax::ext::tt::macro_rules","",159],[11,"make_pat","","",159],[11,"make_items","","",159],[11,"make_methods","","",159],[11,"make_stmt","","",159],[11,"expand","","",160],[11,"fmt","syntax::abi","",161],[11,"eq","","",161],[11,"ne","","",161],[11,"fmt","","",162],[11,"clone","","",162],[11,"decode","","",162],[11,"encode","","",162],[11,"hash","","",162],[11,"eq","","",162],[11,"ne","","",162],[11,"fmt","","",163],[11,"eq","","",163],[11,"ne","","",163],[11,"index","","",162],[11,"data","","",162],[11,"name","","",162],[11,"fmt","","",162],[11,"fmt","","",161],[11,"is_fn_like","syntax::ast","",123],[11,"is_fn_like","","",84],[11,"is_fn_like","","",67],[11,"id","syntax::ast_map::blocks","",164],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Block node input.",164],[11,"to_fn_parts","","",165],[11,"body","","",165],[11,"decl","","",165],[11,"span","","",165],[11,"id","","",165],[11,"kind","","",165],[11,"fmt","syntax::ast_map","",166],[11,"eq","","",166],[11,"ne","","",166],[11,"clone","","",166],[11,"name","","",166],[11,"fmt","","",166],[11,"clone","","",167],[6,"Item","rustc_driver::diagnostic",""],[11,"next","core::option","",152],[11,"fmt","syntax::ast_map","",168],[11,"fmt","","",169],[11,"clone","","",169],[11,"fmt","","",170],[11,"new","","",171],[11,"krate","","",171],[11,"krate","","",172],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot\nbe found.",172],[11,"find","","Retrieve the Node corresponding to `id`, returning None if\ncannot be found.",172],[11,"get_parent","","Retrieve the parent NodeId for `id`, or `id` itself if no\nparent is registered in this map.",172],[11,"get_parent_did","","",172],[11,"get_foreign_abi","","",172],[11,"get_foreign_vis","","",172],[11,"expect_item","","",172],[11,"expect_struct","","",172],[11,"expect_variant","","",172],[11,"expect_foreign_item","","",172],[11,"expect_expr","","",172],[11,"get_path_elem","","returns the name associated with the given NodeId's AST",172],[11,"with_path","","",172],[11,"path_to_string","","",172],[11,"with_attrs","","Given a node ID and a closure, apply the closure to the array\nof attributes associated with the AST corresponding to the Node ID",172],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id's with paths that\nmatch `parts`.  (Requires `parts` is non-empty.)",172],[11,"opt_span","","",172],[11,"span","","",172],[11,"def_id_span","","",172],[11,"node_to_string","","",172],[11,"node_to_user_string","","",172],[6,"Item","rustc_driver::diagnostic",""],[11,"next","syntax::ast_map","",173],[11,"name","syntax::codemap","",151],[11,"name","syntax::ast","",123],[11,"name","","",125],[11,"name","","",111],[11,"name","","",84],[11,"name","","",85],[11,"name","","",104],[11,"new_id","syntax::ast_map","",174],[11,"new_span","","",174],[11,"visit_item","","",175],[11,"visit_pat","","",175],[11,"visit_expr","","",175],[11,"visit_stmt","","",175],[11,"visit_ty_method","","",175],[11,"visit_fn","","",175],[11,"visit_ty","","",175],[11,"visit_block","","",175],[11,"visit_lifetime_ref","","",175],[11,"visit_lifetime_def","","",175],[11,"print_node","syntax::print::pprust","",176],[11,"fmt","syntax::ast_util","",177],[11,"decode","","",177],[11,"encode","","",177],[11,"max","","",177],[11,"empty","","",177],[11,"add","","",177],[11,"visit_mod","","",178],[11,"visit_foreign_item","","",178],[11,"visit_item","","",178],[11,"visit_local","","",178],[11,"visit_block","","",178],[11,"visit_stmt","","",178],[11,"visit_pat","","",178],[11,"visit_expr","","",178],[11,"visit_ty","","",178],[11,"visit_generics","","",178],[11,"visit_fn","","",178],[11,"visit_struct_field","","",178],[11,"visit_struct_def","","",178],[11,"visit_trait_item","","",178],[11,"visit_lifetime_ref","","",178],[11,"visit_lifetime_def","","",178],[11,"visit_trait_ref","","",178],[11,"visit_id","","",179],[11,"pe_ident","syntax::ast","",104],[11,"pe_generics","","",104],[11,"pe_abi","","",104],[11,"pe_explicit_self","","",104],[11,"pe_unsafety","","",104],[11,"pe_fn_decl","","",104],[11,"pe_body","","",104],[11,"pe_vis","","",104],[11,"check_name","syntax::codemap","",151],[11,"name","","",151],[11,"value_str","","",151],[11,"meta_item_list","","",151],[11,"span","","",151],[11,"name","","",151],[11,"value_str","","",151],[11,"meta_item_list","","",151],[11,"span","","",151],[11,"name","syntax::ptr","",153],[11,"value_str","","",153],[11,"meta_item_list","","",153],[11,"span","","",153],[11,"meta","syntax::codemap","Extract the MetaItem from inside this Attribute.",151],[11,"with_desugared_doc","","Convert self to a normal #[doc=\"foo\"] comment, if it is a\ncomment like `///` or `/** */`. (Returns self unchanged for\nnon-sugared doc attributes.)",151],[11,"eq","syntax::attr","",180],[11,"ne","","",180],[11,"fmt","","",181],[11,"clone","","",181],[11,"decode","","",181],[11,"encode","","",181],[11,"fmt","","",182],[11,"clone","","",182],[11,"partial_cmp","","",182],[11,"lt","","",182],[11,"le","","",182],[11,"gt","","",182],[11,"ge","","",182],[11,"eq","","",182],[11,"ne","","",182],[11,"decode","","",182],[11,"encode","","",182],[11,"fmt","","",182],[11,"decode","","",183],[11,"encode","","",183],[11,"fmt","","",183],[11,"eq","","",183],[11,"ne","","",183],[11,"is_ffi_safe","","",183],[11,"decode","","",184],[11,"encode","","",184],[11,"fmt","","",184],[11,"eq","","",184],[11,"ne","","",184],[11,"hash","","",184],[11,"is_signed","","",184],[11,"fmt","syntax::codemap","",185],[11,"partial_cmp","","",185],[11,"lt","","",185],[11,"le","","",185],[11,"gt","","",185],[11,"ge","","",185],[11,"hash","","",185],[11,"eq","","",185],[11,"ne","","",185],[11,"clone","","",185],[11,"fmt","","",186],[11,"partial_cmp","","",186],[11,"lt","","",186],[11,"le","","",186],[11,"gt","","",186],[11,"ge","","",186],[11,"hash","","",186],[11,"eq","","",186],[11,"ne","","",186],[11,"from_usize","","",185],[11,"to_usize","","",185],[6,"Output","rustc_driver::diagnostic",""],[11,"add","syntax::codemap","",185],[6,"Output","rustc_driver::diagnostic",""],[11,"sub","syntax::codemap","",185],[11,"encode","","",185],[11,"decode","","",185],[11,"from_usize","","",186],[11,"to_usize","","",186],[6,"Output","rustc_driver::diagnostic",""],[11,"add","syntax::codemap","",186],[6,"Output","rustc_driver::diagnostic",""],[11,"sub","syntax::codemap","",186],[11,"hash","","",187],[11,"fmt","","",187],[11,"clone","","",187],[11,"fmt","","",151],[11,"hash","","",151],[11,"decode","","",151],[11,"encode","","",151],[11,"eq","","",151],[11,"ne","","",151],[11,"clone","","",151],[11,"eq","","",187],[11,"ne","","",187],[11,"encode","","",187],[11,"decode","","",187],[11,"fmt","","",188],[11,"hash","","",188],[11,"clone","","",188],[11,"fmt","","",189],[11,"hash","","",189],[11,"clone","","",189],[11,"fmt","","",190],[11,"hash","","",190],[11,"decode","","",191],[11,"encode","","",191],[11,"hash","","",191],[11,"fmt","","",191],[11,"clone","","",191],[11,"eq","","",191],[11,"ne","","",191],[11,"from_llvm_cookie","","",191],[11,"to_llvm_cookie","","",191],[11,"eq","","",192],[11,"ne","","",192],[11,"decode","","",192],[11,"encode","","",192],[11,"encode","","",193],[11,"decode","","",193],[11,"next_line","","EFFECT: register a start-of-line offset in the\ntable of line-beginnings.\nUNCHECKED INVARIANT: these offsets must be added in the right\norder and must be in the right places; there is shared knowledge\nabout what ends a line between this file and parse.rs\nWARNING: pos param here is the offset relative to start of CodeMap,\nand CodeMap will append a newline when adding a filemap without a newline at the end,\nso the safe way to call this is with value calculated as\nfilemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",193],[11,"get_line","","get a line from the list of pre-computed line-beginnings\n",193],[11,"record_multibyte_char","","",193],[11,"is_real_file","","",193],[11,"is_imported","","",193],[11,"new","","",194],[11,"new_filemap","","",194],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external\ncrate. The source code of such an \"imported filemap\" is not available,\nbut we still know enough to generate accurate debuginfo location\ninformation for things inlined from other crates.",194],[11,"mk_substr_filename","","",194],[11,"lookup_char_pos","","Lookup source information about a BytePos",194],[11,"lookup_char_pos_adj","","",194],[11,"span_to_string","","",194],[11,"span_to_filename","","",194],[11,"span_to_lines","","",194],[11,"span_to_snippet","","",194],[11,"get_filemap","","",194],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",194],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap and above.",194],[11,"record_expansion","","",194],[11,"with_expn_info","","",194],[11,"span_allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable]\nitems can be used (that is, a macro marked with\n`#[allow_internal_unstable]`).",194],[11,"fmt","","",195],[11,"eq","","",195],[11,"ne","","",195],[11,"clone","","",195],[11,"fmt","","",196],[11,"eq","","",196],[11,"ne","","",196],[11,"clone","","",196],[11,"fmt","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"clone","","",197],[11,"fold_mod","syntax::config","",198],[11,"fold_block","","",198],[11,"fold_foreign_mod","","",198],[11,"fold_item_underscore","","",198],[11,"fold_expr","","",198],[11,"fold_mac","","",198],[11,"fold_item","","",198],[11,"fold_attribute","","",199],[11,"fold_mac","","",199],[11,"clone","syntax::diagnostic","",200],[11,"clone","","",201],[11,"span_fatal","","",202],[11,"span_fatal_with_code","","",202],[11,"span_err","","",202],[11,"span_err_with_code","","",202],[11,"span_warn","","",202],[11,"span_warn_with_code","","",202],[11,"span_note","","",202],[11,"span_end_note","","",202],[11,"span_help","","",202],[11,"fileline_note","","",202],[11,"fileline_help","","",202],[11,"span_bug","","",202],[11,"span_unimpl","","",202],[11,"handler","","",202],[11,"fatal","","",203],[11,"err","","",203],[11,"bump_err_count","","",203],[11,"err_count","","",203],[11,"has_errors","","",203],[11,"abort_if_errors","","",203],[11,"warn","","",203],[11,"note","","",203],[11,"help","","",203],[11,"bug","","",203],[11,"unimpl","","",203],[11,"emit","","",203],[11,"emit_with_code","","",203],[11,"custom_emit","","",203],[11,"fmt","","",204],[11,"clone","","",204],[11,"eq","","",204],[11,"ne","","",204],[11,"fmt","","",204],[11,"stderr","","",205],[11,"new","","",205],[11,"write_all","","",206],[11,"emit","","",205],[11,"custom_emit","","",205],[11,"fmt","syntax::feature_gate","",207],[11,"eq","","",207],[11,"ne","","",207],[11,"new","","",208],[11,"visit_mac","","",209],[11,"visit_attribute","","",209],[11,"visit_attribute","","",210],[11,"visit_name","","",210],[11,"visit_item","","",210],[11,"visit_foreign_item","","",210],[11,"visit_ty","","",210],[11,"visit_expr","","",210],[11,"visit_pat","","",210],[11,"visit_fn","","",210],[11,"move_map","collections::vec","",150],[11,"move_map","syntax::owned_slice","",211],[11,"cmp","","",211],[11,"partial_cmp","","",211],[11,"lt","","",211],[11,"le","","",211],[11,"gt","","",211],[11,"ge","","",211],[11,"eq","","",211],[11,"ne","","",211],[11,"hash","","",211],[11,"fmt","","",211],[11,"empty","","",211],[11,"from_vec","","",211],[11,"into_vec","","",211],[11,"as_slice","","",211],[11,"move_iter","","",211],[11,"map","","",211],[6,"Target","rustc_driver::diagnostic",""],[11,"deref","syntax::owned_slice","",211],[11,"default","","",211],[11,"clone","","",211],[11,"from_iter","","",211],[11,"encode","","",211],[11,"decode","","",211],[11,"and_then","syntax::ptr","Move out of the pointer.\nIntended for chaining transformations not covered by `map`.",153],[11,"map","","Transform the inner value, consuming `self` and producing a new `P<T>`.",153],[6,"Target","rustc_driver::diagnostic",""],[11,"deref","syntax::ptr","",153],[11,"clone","","",153],[11,"eq","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"hash","","",153],[11,"decode","","",153],[11,"encode","","",153],[6,"Err","rustc_driver::diagnostic",""],[11,"from_str","syntax::show_span","",212],[11,"visit_expr","","",213],[11,"visit_pat","","",213],[11,"visit_ty","","",213],[11,"visit_mac","","",213],[11,"fold_crate","syntax::std_inject","",214],[11,"fold_crate","","",215],[11,"fold_item","","",215],[11,"fold_mod","","",215],[11,"fold_crate","syntax::test","",216],[11,"fold_item","","",216],[11,"fold_mod","","",216],[11,"eq","","",217],[11,"ne","","",217],[11,"eq","syntax::print::pp","",218],[11,"ne","","",218],[11,"clone","","",218],[11,"clone","","",219],[11,"clone","","",220],[11,"clone","","",221],[11,"is_eof","","",221],[11,"is_hardbreak_tok","","",221],[11,"last_token","","",222],[11,"replace_last_token","","",222],[11,"pretty_print","","",222],[11,"check_stream","","",222],[11,"scan_push","","",222],[11,"scan_pop","","",222],[11,"scan_top","","",222],[11,"scan_pop_bottom","","",222],[11,"advance_right","","",222],[11,"advance_left","","",222],[11,"check_stack","","",222],[11,"print_newline","","",222],[11,"indent","","",222],[11,"get_top","","",222],[11,"print_str","","",222],[11,"print","","",222],[11,"new_from_input","syntax::print::pprust","",176],[11,"new","","",176],[11,"ibox","","",176],[11,"end","","",176],[11,"cbox","","",176],[11,"rbox","","",176],[11,"nbsp","","",176],[11,"word_nbsp","","",176],[11,"word_space","","",176],[11,"popen","","",176],[11,"pclose","","",176],[11,"head","","",176],[11,"bopen","","",176],[11,"bclose_","","",176],[11,"bclose_maybe_open","","",176],[11,"bclose","","",176],[11,"is_begin","","",176],[11,"is_end","","",176],[11,"is_bol","","",176],[11,"in_cbox","","",176],[11,"hardbreak_if_not_bol","","",176],[11,"space_if_not_bol","","",176],[11,"break_offset_if_not_bol","","",176],[11,"synth_comment","","",176],[11,"commasep","","",176],[11,"commasep_cmnt","","",176],[11,"commasep_exprs","","",176],[11,"print_mod","","",176],[11,"print_foreign_mod","","",176],[11,"print_opt_lifetime","","",176],[11,"print_type","","",176],[11,"print_foreign_item","","",176],[11,"print_item","","Pretty-print an item",176],[11,"print_enum_def","","",176],[11,"print_variants","","",176],[11,"print_visibility","","",176],[11,"print_struct","","",176],[11,"print_tt","","This doesn't deserve to be called \"pretty\" printing, but it should be\nmeaning-preserving. A quick hack that might help would be to look at the\nspans embedded in the TTs to decide where to put spaces and newlines.\nBut it'd be better to parse these according to the grammar of the\nappropriate macro, transcribe back into the grammar we just parsed from,\nand then pretty-print the resulting AST nodes (so, e.g., we print\nexpression arguments as expressions). It can be done! I think.",176],[11,"print_tts","","",176],[11,"print_variant","","",176],[11,"print_ty_method","","",176],[11,"print_trait_method","","",176],[11,"print_impl_item","","",176],[11,"print_method","","",176],[11,"print_outer_attributes","","",176],[11,"print_inner_attributes","","",176],[11,"print_attribute","","",176],[11,"print_stmt","","",176],[11,"print_block","","",176],[11,"print_block_unclosed","","",176],[11,"print_block_unclosed_indent","","",176],[11,"print_block_with_attrs","","",176],[11,"print_block_maybe_unclosed","","",176],[11,"print_if","","",176],[11,"print_if_let","","",176],[11,"print_mac","","",176],[11,"print_expr_maybe_paren","","",176],[11,"print_expr","","",176],[11,"print_local_decl","","",176],[11,"print_decl","","",176],[11,"print_ident","","",176],[11,"print_usize","","",176],[11,"print_name","","",176],[11,"print_for_decl","","",176],[11,"print_pat","","",176],[11,"print_fn","","",176],[11,"print_fn_args","","",176],[11,"print_fn_args_and_ret","","",176],[11,"print_fn_block_args","","",176],[11,"print_capture_clause","","",176],[11,"print_bounds","","",176],[11,"print_lifetime","","",176],[11,"print_lifetime_def","","",176],[11,"print_generics","","",176],[11,"print_ty_param","","",176],[11,"print_where_clause","","",176],[11,"print_meta_item","","",176],[11,"print_view_path","","",176],[11,"print_mutability","","",176],[11,"print_mt","","",176],[11,"print_arg","","",176],[11,"print_fn_output","","",176],[11,"print_ty_fn","","",176],[11,"maybe_print_trailing_comment","","",176],[11,"print_remaining_comments","","",176],[11,"print_literal","","",176],[11,"next_lit","","",176],[11,"maybe_print_comment","","",176],[11,"print_comment","","",176],[11,"print_string","","",176],[11,"next_comment","","",176],[11,"print_opt_unsafety","","",176],[11,"print_opt_abi_and_extern_if_nondefault","","",176],[11,"print_extern_opt_abi","","",176],[11,"print_fn_header_info","","",176],[11,"print_unsafety","","",176],[4,"RenderSpan","rustc_driver::diagnostic",""],[13,"FullSpan","","A FullSpan renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary of\nthe source code covered by the span.",200],[13,"FileLine","","A FileLine renders with just a line for the message prefixed\nby file:linenum.",200],[4,"ColorConfig","",""],[13,"Auto","","",201],[13,"Always","","",201],[13,"Never","","",201],[8,"Emitter","",""],[10,"emit","","",223],[10,"custom_emit","","",223],[3,"FatalError","","This structure is used to signify that a task has panicked with a fatal error\nfrom the diagnostics. You can use this with the `Any` trait to figure out\nhow a rustc task died (if so desired)."],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug`\nor `.span_bug` rather than a failed assertion, etc."],[3,"SpanHandler","","A span-handler is like a handler but also\naccepts span information for source-location\nreporting."],[12,"handler","","",202],[12,"cm","","",202],[3,"Handler","","A handler deals with errors; certain errors\n(fatal, bug, unimpl) may cause immediate exit,\nothers log errors for later reporting."],[12,"can_emit_warnings","","",203],[5,"mk_span_handler","",""],[5,"default_handler","",""],[5,"mk_handler","",""],[4,"Level","",""],[13,"Bug","","",204],[13,"Fatal","","",204],[13,"Error","","",204],[13,"Warning","","",204],[13,"Note","","",204],[13,"Help","","",204],[3,"EmitterWriter","",""],[5,"expect","",""],[3,"RustcDefaultCalls","rustc_driver",""],[4,"Compilation","",""],[13,"Stop","","",224],[13,"Continue","","",224],[5,"run","",""],[5,"run_compiler","",""],[5,"release_str","","Returns a version string such as \"0.12.0-dev\"."],[5,"commit_hash_str","","Returns the full SHA1 hash of HEAD of the Git repo from which rustc was built."],[5,"commit_date_str","","Returns the \"commit date\" of HEAD of the Git repo from which rustc was built as a static string."],[5,"build_date_str","",""],[5,"version","","Prints version information and returns None on success or an error\nmessage on panic."],[5,"handle_options","","Process command line options. Emits messages as appropriate. If compilation\nshould continue, returns a getopts::Matches object parsed from args, otherwise\nreturns None."],[5,"monitor","","Run a procedure which will detect panics in the compiler and print nicer\nerror messages rather than just failing the test."],[5,"diagnostics_registry","",""],[5,"main","",""],[0,"driver","",""],[3,"CompileController","rustc_driver::driver","CompileController is used to customise compilation, it allows compilation to\nbe stopped and/or to call arbitrary code at various points in compilation.\nIt also allows for various flags to be set to influence what information gets\ncollected during compilation."],[12,"after_parse","","",225],[12,"after_expand","","",225],[12,"after_write_deps","","",225],[12,"after_analysis","","",225],[12,"after_llvm","","",225],[12,"make_glob_map","","",225],[3,"PhaseController","",""],[12,"stop","","",226],[12,"callback","","",226],[3,"CompileState","","State that is passed to a callback. What state is available depends on when\nduring compilation the callback is made. See the various constructor methods\n(`state_*`) in the impl to see which data is provided for any given entry point."],[12,"input","","",227],[12,"session","","",227],[12,"cfg","","",227],[12,"krate","","",227],[12,"crate_name","","",227],[12,"output_filenames","","",227],[12,"out_dir","","",227],[12,"expanded_crate","","",227],[12,"ast_map","","",227],[12,"analysis","","",227],[12,"tcx","","",227],[12,"trans","","",227],[5,"compile_input","",""],[5,"anon_src","","The name used for source code that doesn't originate in a file\n(e.g. source from stdin or a string)"],[5,"source_name","",""],[5,"phase_1_parse_input","",""],[5,"phase_2_configure_and_expand","","Run the \"early phases\" of the compiler: initial `cfg` processing,\nloading compiler plugins (including those from `addl_plugins`),\nsyntax expansion, secondary `cfg` expansion, synthesis of a test\nharness if one is to be provided and injection of a dependency on the\nstandard library and prelude."],[5,"assign_node_ids_and_map","",""],[5,"phase_3_run_analysis_passes","","Run the resolution, typechecking, region checking and other\nmiscellaneous analysis passes on the crate. Return various\nstructures carrying the results of the analysis."],[5,"phase_4_translate_to_llvm","","Run the translation phase to LLVM, after which the AST and analysis can\nbe discarded."],[5,"phase_5_run_llvm_passes","","Run LLVM itself, producing a bitcode file, assembly file or object file\nas a side effect."],[5,"phase_6_link_output","","Run the linker on any artifacts that resulted from the LLVM run.\nThis should produce either a finished executable or library."],[5,"collect_crate_types","",""],[5,"collect_crate_metadata","",""],[5,"build_output_filenames","",""],[11,"basic","","",225],[11,"basic","","",226],[0,"pretty","rustc_driver","The various pretty print routines."],[4,"PpSourceMode","rustc_driver::pretty",""],[13,"PpmNormal","","",228],[13,"PpmEveryBodyLoops","","",228],[13,"PpmExpanded","","",228],[13,"PpmTyped","","",228],[13,"PpmIdentified","","",228],[13,"PpmExpandedIdentified","","",228],[13,"PpmExpandedHygiene","","",228],[4,"PpFlowGraphMode","",""],[13,"Default","","",229],[13,"UnlabelledEdges","","Drops the labels from the edges in the flowgraph output. This\nis mostly for use in the --xpretty flowgraph run-make tests,\nsince the labels are largely uninteresting in those cases and\nhave become a pain to maintain.",229],[4,"PpMode","",""],[13,"PpmSource","","",230],[13,"PpmFlowGraph","","",230],[4,"UserIdentifiedItem","",""],[13,"ItemViaNode","","",231],[13,"ItemViaPath","","",231],[5,"parse_pretty","",""],[5,"pretty_print_input","",""],[11,"fmt","","",228],[11,"eq","","",228],[11,"ne","","",228],[11,"fmt","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"fmt","","",230],[11,"eq","","",230],[11,"ne","","",230],[11,"fmt","","",231],[11,"clone","","",231],[6,"Err","",""],[11,"from_str","","",231],[8,"CompilerCalls","rustc_driver",""],[10,"early_callback","","",232],[10,"late_callback","","",232],[11,"some_input","","",232],[10,"no_input","","",232],[11,"parse_pretty","","",232],[10,"build_controller","","",232],[11,"eq","","",224],[11,"ne","","",224],[11,"fmt","","",224],[11,"and_then","","",224],[11,"early_callback","","",233],[11,"no_input","","",233],[11,"parse_pretty","","",233],[11,"late_callback","","",233],[11,"build_controller","","",233],[11,"list_metadata","","",233]],"paths":[[3,"Interner"],[3,"RcStr"],[3,"StrInterner"],[3,"SmallVector"],[3,"IntoIter"],[3,"Registry"],[3,"Restrictions"],[4,"PathParsingMode"],[4,"BoundParsingMode"],[4,"TokenType"],[3,"Parser"],[4,"CommentStyle"],[3,"Comment"],[3,"Literal"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"TtReader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"IdentStyle"],[4,"SpecialMacroVar"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[4,"Keyword"],[3,"InternedString"],[4,"ObsoleteSyntax"],[3,"ParseSess"],[3,"Ident"],[3,"Name"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[4,"PathParameters"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"DefId"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[4,"WherePredicate"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[4,"MetaItem_"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"PatWildKind"],[4,"Pat_"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[4,"MacStmtStyle"],[4,"LocalSource"],[3,"Local"],[4,"Decl_"],[3,"Arm"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[3,"Expr"],[4,"Expr_"],[3,"QSelf"],[4,"MatchSource"],[4,"CaptureClause"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[4,"TokenTree"],[4,"Mac_"],[4,"StrStyle"],[4,"Sign"],[4,"LitIntType"],[4,"Lit_"],[3,"MutTy"],[3,"TypeField"],[3,"TypeMethod"],[4,"TraitItem"],[4,"ImplItem"],[3,"AssociatedType"],[3,"Typedef"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[3,"TypeBinding"],[3,"Ty"],[4,"PrimTy"],[3,"BareFnTy"],[4,"Ty_"],[4,"AsmDialect"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[4,"Unsafety"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ExplicitSelf_"],[3,"Method"],[4,"Method_"],[3,"Mod"],[3,"ForeignMod"],[3,"VariantArg"],[4,"VariantKind"],[3,"EnumDef"],[3,"Variant_"],[4,"PathListItem_"],[4,"ViewPath_"],[4,"AttrStyle"],[3,"AttrId"],[3,"Attribute_"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"Visibility"],[3,"StructField_"],[4,"StructFieldKind"],[3,"StructDef"],[3,"Item"],[4,"Item_"],[3,"ForeignItem"],[4,"ForeignItem_"],[4,"InlinedItem"],[3,"MacroDef"],[4,"Annotatable"],[3,"MacEager"],[3,"DummyResult"],[3,"BlockInfo"],[3,"ExtCtxt"],[3,"SyntaxEnv"],[4,"PtrTy"],[3,"Path"],[4,"Ty"],[3,"LifetimeBounds"],[3,"TraitDef"],[4,"StructType"],[3,"PatIdentFinder"],[3,"IdentRenamer"],[3,"PatIdentRenamer"],[3,"MacroExpander"],[3,"ExpansionConfig"],[3,"Marker"],[3,"MacroExterminator"],[4,"ArgumentType"],[4,"SyntaxContext_"],[3,"Vec"],[3,"Spanned"],[4,"Option"],[3,"P"],[3,"TtFrame"],[4,"LockstepIterSize"],[4,"TokenTreeOrTokenTreeVec"],[3,"MatcherTtFrame"],[3,"MatcherPos"],[3,"ParserAnyMacro"],[3,"MacroRulesMacroExpander"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[4,"Code"],[3,"FnLikeNode"],[4,"PathElem"],[3,"LinkedPathNode"],[4,"Node"],[4,"MapEntry"],[3,"InlinedParent"],[3,"Forest"],[3,"Map"],[3,"NodesMatchingSuffix"],[3,"IdAndSpanUpdater"],[3,"NodeCollector"],[3,"State"],[3,"IdRange"],[3,"IdVisitor"],[3,"IdRangeComputingVisitor"],[4,"InlineAttr"],[3,"Stability"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[3,"BytePos"],[3,"CharPos"],[3,"Span"],[4,"MacroFormat"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"ExpnId"],[3,"MultiByteChar"],[3,"FileMap"],[3,"CodeMap"],[4,"SpanSnippetError"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[3,"Context"],[3,"CfgAttrFolder"],[4,"RenderSpan"],[4,"ColorConfig"],[3,"SpanHandler"],[3,"Handler"],[4,"Level"],[3,"EmitterWriter"],[4,"Destination"],[4,"AttributeType"],[3,"Features"],[3,"MacroVisitor"],[3,"PostExpansionVisitor"],[3,"OwnedSlice"],[4,"Mode"],[3,"ShowSpanVisitor"],[3,"StandardLibraryInjector"],[3,"PreludeInjector"],[3,"TestHarnessGenerator"],[4,"HasTestSignature"],[4,"Breaks"],[3,"BreakToken"],[3,"BeginToken"],[4,"Token"],[3,"Printer"],[8,"Emitter"],[4,"Compilation"],[3,"CompileController"],[3,"PhaseController"],[3,"CompileState"],[4,"PpSourceMode"],[4,"PpFlowGraphMode"],[4,"PpMode"],[4,"UserIdentifiedItem"],[8,"CompilerCalls"],[3,"RustcDefaultCalls"]]};
searchIndex['rustc_typeck'] = {"items":[[0,"","rustc_typeck","typeck.rs, an introduction"],[0,"lint","","Lints, aka compiler warnings."],[11,"name_lower","rustc::lint","Get the lint's name, with ASCII letters converted to lowercase.",0],[11,"fmt","rustc_back::svh","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"new","","",1],[11,"as_str","","",1],[11,"calculate","","",1],[11,"fmt","","",1],[11,"hash","rustc_back::svh::svh_visitor","",2],[11,"hash","","",3],[11,"hash","","",4],[11,"get_content","syntax::ast","",5],[11,"get_content","","",6],[11,"visit_mac","rustc_back::svh::svh_visitor","",7],[11,"visit_struct_def","","",7],[11,"visit_variant","","",7],[11,"visit_opt_lifetime_ref","","",7],[11,"visit_ident","","",7],[11,"visit_lifetime_ref","","",7],[11,"visit_lifetime_def","","",7],[11,"visit_expr","","",7],[11,"visit_stmt","","",7],[11,"visit_foreign_item","","",7],[11,"visit_item","","",7],[11,"visit_mod","","",7],[11,"visit_decl","","",7],[11,"visit_ty","","",7],[11,"visit_generics","","",7],[11,"visit_fn","","",7],[11,"visit_ty_method","","",7],[11,"visit_trait_item","","",7],[11,"visit_struct_field","","",7],[11,"visit_explicit_self","","",7],[11,"visit_path","","",7],[11,"visit_block","","",7],[11,"visit_pat","","",7],[11,"visit_local","","",7],[11,"visit_arm","","",7],[11,"open","rustc_back::archive","Opens an existing static archive",8],[11,"remove_file","","Removes a file from this archive",8],[11,"files","","Lists all files in an archive",8],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",8],[11,"create","","Create a new static archive, ready for adding files.",9],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",9],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",9],[11,"add_file","","Adds an arbitrary file to this archive",9],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",9],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",9],[11,"tr_id","rustc::middle::astencode","Translates an internal id, meaning a node id that is known to refer to some part of the\nitem currently being inlined, such as a local variable or argument.  All naked node-ids\nthat appear in types have this property, since if something might refer to an external item\nwe would use a def-id to allow for the possibility that the item resides in another crate.",10],[11,"tr_def_id","","Translates an EXTERNAL def-id, converting the crate number from the one used in the encoded\ndata to the current crate numbers..  By external, I mean that it be translated to a\nreference to the item in its original crate, as opposed to being translated to a reference\nto the inlined version of the item.  This is typically, but not always, what you want,\nbecause most def-ids refer to external things like types or other fns that may or may not\nbe inlined.  Note that even when the inlined function is referencing itself recursively, we\nwould want `tr_def_id` for that reference--- conceptually the function calls the original,\nnon-inlined version, and trans deals with linking that recursive call to the inlined copy.",10],[11,"tr_intern_def_id","","Translates an INTERNAL def-id, meaning a def-id that is\nknown to refer to some part of the item currently being\ninlined.  In that case, we want to convert the def-id to\nrefer to the current crate and to the new, inlined node-id.",10],[11,"tr_span","","Translates a `Span` from an extern crate to the corresponding `Span`\nwithin the local crate's codemap. `creader::import_codemap()` will\nalready have allocated any additionally needed FileMaps in the local\ncodemap as a side-effect of creating the crate_metadata's\n`codemap_import_info`.",10],[11,"tr_intern","syntax::ast","",11],[11,"tr","","",11],[11,"tr","core::option","",12],[11,"tr","syntax::codemap","",13],[11,"fold_block","rustc::middle::astencode","",14],[11,"tr","rustc::middle::def","",15],[11,"tr","rustc::middle::ty","",16],[11,"tr","","",17],[11,"tr","rustc::middle::region","",18],[11,"tr","","",19],[11,"tr","rustc::middle::ty","",20],[11,"read_freevar_entry","rbml::reader","",21],[11,"read_capture_mode","","",21],[11,"tr","rustc::middle::ty","",22],[11,"tr","","",23],[11,"tr","","",24],[11,"read_method_callee","rbml::reader","",21],[11,"tr","rustc::middle::ty","",25],[11,"read_vec_per_param_space","rbml::reader","",21],[11,"read_vtable_res_with_key","","",21],[11,"read_vtable_res","","",21],[11,"read_vtable_param_res","","",21],[11,"read_vtable_origin","","",21],[11,"ty_str_ctxt","rustc::metadata::encoder","",26],[11,"emit_closure_type","rbml::writer","",27],[11,"emit_method_origin","","",27],[11,"emit_ty","","",27],[11,"emit_tys","","",27],[11,"emit_trait_ref","","",27],[11,"emit_type_param_def","","",27],[11,"emit_predicate","","",27],[11,"emit_type_scheme","","",27],[11,"emit_existential_bounds","","",27],[11,"emit_builtin_bounds","","",27],[11,"emit_substs","","",27],[11,"emit_auto_adjustment","","",27],[11,"emit_autoref","","",27],[11,"emit_auto_deref_ref","","",27],[11,"emit_unsize_kind","","",27],[11,"tag","","",27],[11,"id","","",27],[11,"visit_id","rustc::middle::astencode","",28],[11,"as_int","rbml","",29],[11,"opt_child","","",29],[11,"read_ty_nodcx","rbml::reader","",21],[11,"read_tys_nodcx","","",21],[11,"read_substs_nodcx","","",21],[11,"read_method_origin","","",21],[11,"read_ty","","",21],[11,"read_tys","","",21],[11,"read_trait_ref","","",21],[11,"read_poly_trait_ref","","",21],[11,"read_type_param_def","","",21],[11,"read_predicate","","",21],[11,"read_type_scheme","","",21],[11,"read_existential_bounds","","",21],[11,"read_substs","","",21],[11,"read_auto_adjustment","","",21],[11,"read_auto_deref_ref","","",21],[11,"read_autoref","","",21],[11,"read_unsize_kind","","",21],[11,"read_closure_kind","","",21],[11,"read_closure_ty","","",21],[11,"convert_def_id","","Converts a def-id that appears in a type.  The correct\ntranslation will depend on what kind of def-id this is.\nThis is a subtle point: type definitions are not\ninlined into the current crate, so if the def-id names\na nominal type or type alias, then it should be\ntranslated to refer to the source crate.",21],[11,"graph_id","rustc::middle::cfg::graphviz","",30],[11,"node_id","","",30],[11,"node_label","","",30],[11,"edge_label","","",30],[11,"nodes","","",30],[11,"edges","","",30],[11,"source","","",30],[11,"target","","",30],[11,"eq","rustc::middle::cfg","",31],[11,"ne","","",31],[11,"id","","",31],[11,"new","","",32],[11,"node_is_reachable","","",32],[11,"hash","rustc::middle::check_const","",33],[11,"cmp","","",33],[11,"partial_cmp","","",33],[11,"lt","","",33],[11,"le","","",33],[11,"gt","","",33],[11,"ge","","",33],[11,"clone","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"empty","","Returns an empty set of flags.",33],[11,"all","","Returns the set containing all flags.",33],[11,"bits","","Returns the raw value of the flags currently stored.",33],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33],[11,"is_empty","","Returns `true` if no flags are currently stored.",33],[11,"is_all","","Returns `true` if all flags are currently set.",33],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33],[11,"insert","","Inserts the specified flags in-place.",33],[11,"remove","","Removes the specified flags in-place.",33],[11,"toggle","","Toggles the specified flags in-place.",33],[6,"Output","rustc_typeck::lint",""],[11,"bitor","rustc::middle::check_const","Returns the union of the two sets of flags.",33],[6,"Output","rustc_typeck::lint",""],[11,"bitxor","rustc::middle::check_const","Returns the left flags, but with all the right flags toggled.",33],[6,"Output","rustc_typeck::lint",""],[11,"bitand","rustc::middle::check_const","Returns the intersection between the two sets of flags.",33],[6,"Output","rustc_typeck::lint",""],[11,"sub","rustc::middle::check_const","Returns the set difference of the two sets of flags.",33],[6,"Output","rustc_typeck::lint",""],[11,"not","rustc::middle::check_const","Returns the complement of this set of flags.",33],[11,"eq","","",34],[11,"ne","","",34],[11,"visit_item","","",35],[11,"visit_fn","","",35],[11,"visit_pat","","",35],[11,"visit_expr","","",35],[11,"consume","","",35],[11,"borrow","","",35],[11,"decl_without_init","","",35],[11,"mutate","","",35],[11,"matched_pat","","",35],[11,"consume_pat","","",35],[11,"visit_item","rustc::middle::check_static_recursion","",36],[11,"visit_item","","",37],[11,"visit_expr","","",37],[11,"eq","rustc::middle::check_loop","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"visit_item","","",39],[11,"visit_expr","","",39],[11,"fmt","rustc::middle::check_match","",40],[11,"from_iter","","",40],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"eq","","",42],[11,"ne","","",42],[11,"clone","","",42],[11,"visit_expr","","",43],[11,"visit_local","","",43],[11,"visit_fn","","",43],[11,"new","","",44],[11,"visit_id","","",45],[11,"fold_pat","","",44],[11,"matched_pat","","",46],[11,"consume","","",46],[11,"consume_pat","","",46],[11,"borrow","","",46],[11,"decl_without_init","","",46],[11,"mutate","","",46],[11,"visit_pat","","",47],[11,"visit_fn","rustc::middle::check_rvalues","",48],[11,"consume","","",49],[11,"matched_pat","","",49],[11,"consume_pat","","",49],[11,"borrow","","",49],[11,"decl_without_init","","",49],[11,"mutate","","",49],[11,"eq","rustc::middle::const_eval","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"clone","","",51],[11,"clone","","",52],[11,"description","","",51],[11,"fmt","rustc::middle::dataflow","",53],[11,"clone","","",54],[11,"pre","","",54],[11,"new","","",54],[11,"add_gen","","Indicates that `id` generates `bit`",54],[11,"add_kill","","Indicates that `id` kills `bit`",54],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",54],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",54],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",54],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",54],[11,"propagate","","Performs the data flow analysis.",54],[11,"join","","",55],[11,"join","","",56],[11,"visit_struct_def","rustc::middle::dead","",57],[11,"visit_expr","","",57],[11,"visit_pat","","",57],[11,"visit_path","","",57],[11,"visit_item","","",57],[11,"visit_item","","",58],[11,"visit_fn","","",58],[11,"visit_item","","",59],[11,"visit_foreign_item","","",59],[11,"visit_fn","","",59],[11,"visit_struct_field","","",59],[11,"visit_trait_item","","",59],[11,"fmt","rustc::middle::def","",15],[11,"hash","","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"fmt","","",60],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",60],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",60],[11,"fmt","","",61],[11,"hash","","",61],[11,"decode","","",61],[11,"encode","","",61],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[11,"map","","",61],[11,"local_node_id","","",15],[11,"def_id","","",15],[11,"variant_def_ids","","",15],[11,"eq","rustc::middle::effect","",62],[11,"ne","","",62],[11,"visit_fn","","",63],[11,"visit_block","","",63],[11,"visit_expr","","",63],[11,"visit_item","rustc::middle::entry","",64],[11,"fmt","rustc::middle::expr_use_visitor","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"fmt","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"fmt","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"fmt","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"fmt","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"fmt","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"new","","",71],[11,"walk_fn","","",71],[11,"consume_expr","","",71],[11,"walk_expr","","",71],[11,"hash","rustc::middle::fast_reject","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"fmt","rustc::middle::graph","",73],[11,"fmt","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"fmt","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"fmt","","",76],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",74],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",75],[11,"new","","",77],[11,"with_capacity","","",77],[11,"all_nodes","","",77],[11,"all_edges","","",77],[11,"next_node_index","","",77],[11,"add_node","","",77],[11,"mut_node_data","","",77],[11,"node_data","","",77],[11,"node","","",77],[11,"next_edge_index","","",77],[11,"add_edge","","",77],[11,"mut_edge_data","","",77],[11,"edge_data","","",77],[11,"edge","","",77],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",77],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",77],[11,"each_node","","Iterates over all edges defined in the graph.",77],[11,"each_edge","","Iterates over all edges defined in the graph",77],[11,"each_outgoing_edge","","Iterates over all outgoing edges from the node `from`",77],[11,"each_incoming_edge","","Iterates over all incoming edges to the node `target`",77],[11,"each_adjacent_edge","","Iterates over all edges adjacent to the node `node`\nin the direction `dir` (either `Outgoing` or `Incoming)",77],[11,"iterate_until_fixed_point","","",77],[11,"depth_traverse","","",77],[6,"Item","rustc_typeck::lint",""],[11,"next","rustc::middle::graph","",78],[11,"source","","",73],[11,"target","","",73],[11,"visit_fn","rustc::middle::intrinsicck","",79],[11,"visit_expr","","",79],[11,"repr","rustc::middle::ty","",80],[11,"tag","rustc::middle::infer::bivariate","",81],[11,"fields","","",81],[11,"tys_with_variance","","",81],[11,"regions_with_variance","","",81],[11,"regions","","",81],[11,"mts","","",81],[11,"unsafeties","","",81],[11,"builtin_bounds","","",81],[11,"tys","","",81],[11,"binders","","",81],[11,"combine","alloc::rc","",82],[11,"combine","rustc::middle::ty","",83],[11,"combine","","",84],[11,"combine","","",85],[11,"clone","rustc::middle::infer::combine","",86],[11,"switch_expected","","",86],[11,"instantiate","","",86],[11,"tcx","","",87],[11,"fold_ty","","",87],[11,"fold_region","","",87],[11,"tag","rustc::middle::infer::equate","",88],[11,"fields","","",88],[11,"tys_with_variance","","",88],[11,"regions_with_variance","","",88],[11,"regions","","",88],[11,"mts","","",88],[11,"unsafeties","","",88],[11,"builtin_bounds","","",88],[11,"tys","","",88],[11,"binders","","",88],[11,"report_region_errors","rustc::middle::infer","",89],[11,"process_errors","","",89],[11,"report_type_error","","",89],[11,"report_and_explain_type_error","","",89],[11,"values_str","","Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\nerror.",89],[11,"expected_found_str","","",89],[11,"report_generic_bound_failure","","",89],[11,"report_concrete_failure","","",89],[11,"report_sub_sup_conflict","","",89],[11,"report_sup_sup_conflict","","",89],[11,"report_processed_errors","","",89],[11,"give_suggestion","","",89],[11,"give_expl_lifetime_param","","",89],[11,"report_inference_failure","","",89],[11,"note_region_origin","","",89],[11,"resolve","alloc::rc","",82],[11,"contains_error","","",82],[11,"resolve","rustc::middle::ty","",90],[11,"contains_error","","",90],[11,"tag","rustc::middle::infer::glb","",91],[11,"fields","","",91],[11,"tys_with_variance","","",91],[11,"regions_with_variance","","",91],[11,"mts","","",91],[11,"unsafeties","","",91],[11,"builtin_bounds","","",91],[11,"regions","","",91],[11,"tys","","",91],[11,"binders","","",91],[11,"tainted_regions","rustc::middle::infer","",89],[11,"region_vars_confined_to_snapshot","","Returns the set of region variables that do not affect any\ntypes/regions which existed before `snapshot` was\nstarted. This is used in the sub/lub/glb computations. The\nidea here is that when we are computing lub/glb of two\nregions, we sometimes create intermediate region variables.\nThose region variables may touch some of the skolemized or\nother \"forbidden\" regions we created to replace bound\nregions, but they don't really represent an \"external\"\nconstraint.",89],[11,"relate_bound","rustc::middle::infer::lub","",92],[11,"relate_bound","rustc::middle::infer::glb","",91],[11,"tag","rustc::middle::infer::lub","",92],[11,"fields","","",92],[11,"tys_with_variance","","",92],[11,"regions_with_variance","","",92],[11,"mts","","",92],[11,"unsafeties","","",92],[11,"builtin_bounds","","",92],[11,"regions","","",92],[11,"tys","","",92],[11,"binders","","",92],[11,"fmt","rustc::middle::infer::region_inference::graphviz","",93],[11,"eq","","",93],[11,"ne","","",93],[11,"hash","","",93],[11,"clone","","",93],[11,"fmt","","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[11,"graph_id","","",95],[11,"node_id","","",95],[11,"node_label","","",95],[11,"edge_label","","",95],[11,"nodes","","",95],[11,"edges","","",95],[11,"source","","",95],[11,"target","","",95],[11,"fmt","rustc::middle::infer::region_inference","",96],[11,"hash","","",96],[11,"eq","","",96],[11,"ne","","",96],[11,"clone","","",96],[11,"eq","","",97],[11,"ne","","",97],[11,"fmt","","",97],[11,"clone","","",97],[11,"hash","","",98],[11,"eq","","",98],[11,"ne","","",98],[11,"eq","","",99],[11,"ne","","",99],[11,"eq","","",100],[11,"ne","","",100],[11,"fmt","","",101],[11,"clone","","",101],[11,"fmt","","",102],[11,"clone","","",102],[11,"contains","","",102],[11,"push","","",102],[11,"fmt","","",103],[11,"new","","",104],[11,"start_snapshot","","",104],[11,"commit","","",104],[11,"rollback_to","","",104],[11,"num_vars","","",104],[11,"new_region_var","","",104],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto \"escape\" out into error messages or the code at large.",104],[11,"new_bound","","",104],[11,"add_given","","",104],[11,"make_eqregion","","",104],[11,"make_subregion","","",104],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",104],[11,"lub_regions","","",104],[11,"glb_regions","","",104],[11,"resolve_var","","",104],[11,"combine_vars","","",104],[11,"vars_created_since_snapshot","","",104],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",104],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",104],[11,"fmt","","",105],[11,"eq","","",105],[11,"ne","","",105],[11,"repr","","",96],[11,"repr","","",106],[11,"repr","","",107],[11,"repr","","",108],[11,"repr","","",97],[11,"user_string","","",97],[11,"to_ty","","",97],[11,"new","rustc::middle::infer::resolve","",109],[11,"tcx","","",109],[11,"fold_ty","","",109],[11,"tcx","","",110],[11,"fold_ty","","",110],[11,"fold_region","","",110],[11,"new","rustc::middle::infer::freshen","",111],[11,"tcx","","",111],[11,"fold_region","","",111],[11,"fold_ty","","",111],[11,"tag","rustc::middle::infer::sub","",112],[11,"fields","","",112],[11,"tys_with_variance","","",112],[11,"regions_with_variance","","",112],[11,"regions","","",112],[11,"mts","","",112],[11,"unsafeties","","",112],[11,"builtin_bounds","","",112],[11,"tys","","",112],[11,"binders","","",112],[11,"fmt","rustc::middle::infer::type_variable","",113],[11,"eq","","",113],[11,"ne","","",113],[11,"new","","",114],[11,"var_diverges","","",114],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",114],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",114],[11,"new_var","","",114],[11,"probe","","",114],[11,"replace_if_possible","","",114],[11,"snapshot","","",114],[11,"rollback_to","","",114],[11,"commit","","",114],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",114],[6,"Value","rustc_typeck::lint",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::type_variable","",115],[11,"fmt","rustc::middle::infer::unify","",116],[11,"clone","","",116],[11,"eq","","",116],[11,"ne","","",116],[11,"new","","",117],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a \"LIFO\" (stack) order.",117],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",117],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",117],[11,"new_key","","",117],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path\ncompression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure",117],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! Also, we must be in the\nmiddle of a snapshot.",117],[11,"unify","","Either redirects node_a to node_b or vice versa, depending on the relative rank. Returns\nthe new root and rank. You should then update the value of the new root to something\nsuitable.",117],[6,"Value","rustc_typeck::lint",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::unify","",118],[11,"simple_vars","rustc::middle::infer","Unifies two simple keys. Because simple keys do not have any subtyping relationships, if\nboth keys have already been associated with a value, then those two values must be the\nsame.",89],[11,"simple_var_t","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",89],[11,"probe_var","","",89],[6,"Value","rustc_typeck::lint",""],[11,"index","rustc::middle::ty","",119],[11,"from_index","","",119],[11,"unification_table","","",119],[11,"tag","","",119],[11,"to_type","","",120],[11,"to_type_err","","",120],[6,"Value","rustc_typeck::lint",""],[11,"index","rustc::middle::ty","",121],[11,"from_index","","",121],[11,"unification_table","","",121],[11,"tag","","",121],[11,"to_type","syntax::ast","",122],[11,"to_type_err","","",122],[11,"fmt","rustc::middle::infer","",123],[11,"clone","","",123],[11,"fmt","","",124],[11,"clone","","",124],[11,"fmt","","",125],[11,"clone","","",125],[11,"fmt","","",126],[11,"clone","","",126],[11,"fmt","","",127],[11,"clone","","",127],[11,"fmt","","",128],[11,"clone","","",128],[11,"fmt","","",129],[11,"then","core::result","",130],[11,"to_ures","","",130],[11,"compare","","",130],[11,"freshen","rustc::middle::infer","",89],[11,"type_var_diverges","","",89],[11,"freshener","","",89],[11,"type_is_unconstrained_numeric","","",89],[11,"combine_fields","","",89],[11,"equate","","",89],[11,"sub","","",89],[11,"lub","","",89],[11,"commit_unconditionally","","Execute `f` and commit the bindings",89],[11,"commit_if_ok","","Execute `f` and commit the bindings if successful",89],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",89],[11,"try","","Execute `f`, unroll bindings on panic",89],[11,"probe","","Execute `f` then unroll any bindings it creates",89],[11,"add_given","","",89],[11,"sub_types","","",89],[11,"eq_types","","",89],[11,"sub_trait_refs","","",89],[11,"sub_poly_trait_refs","","",89],[11,"skolemize_late_bound_regions","","See `higher_ranked::skolemize_late_bound_regions`",89],[11,"leak_check","","See `higher_ranked::leak_check`",89],[11,"plug_leaks","","See `higher_ranked::plug_leaks`",89],[11,"equality_predicate","","",89],[11,"region_outlives_predicate","","",89],[11,"next_ty_var_id","","",89],[11,"next_ty_var","","",89],[11,"next_diverging_ty_var","","",89],[11,"next_ty_vars","","",89],[11,"next_int_var_id","","",89],[11,"next_float_var_id","","",89],[11,"next_region_var","","",89],[11,"region_vars_for_defs","","",89],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",89],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",89],[11,"fresh_bound_region","","",89],[11,"resolve_regions_and_report_errors","","",89],[11,"ty_to_string","","",89],[11,"tys_to_string","","",89],[11,"trait_ref_to_string","","",89],[11,"shallow_resolve","","",89],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",89],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",89],[11,"type_error_message_str","","",89],[11,"type_error_message_str_with_expected","","",89],[11,"type_error_message","","",89],[11,"report_mismatched_types","","",89],[11,"replace_late_bound_regions_with_fresh_var","","",89],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",89],[11,"can_equate","","",89],[11,"span","","",125],[11,"types","","",125],[11,"dummy","","",125],[11,"repr","","",125],[11,"span","","",123],[11,"repr","","",123],[11,"span","","",126],[11,"repr","","",126],[11,"span","","",128],[11,"repr","","",128],[11,"hash","rustc::middle::lang_items","",131],[11,"eq","","",131],[11,"ne","","",131],[11,"from_i64","","",131],[11,"from_u64","","",131],[11,"new","","",132],[11,"items","","",132],[11,"item_name","","",132],[11,"require","","",132],[11,"from_builtin_kind","","",132],[11,"to_builtin_kind","","",132],[11,"fn_trait_kind","","",132],[11,"send_trait","","",132],[11,"sized_trait","","",132],[11,"copy_trait","","",132],[11,"sync_trait","","",132],[11,"drop_trait","","",132],[11,"add_trait","","",132],[11,"sub_trait","","",132],[11,"mul_trait","","",132],[11,"div_trait","","",132],[11,"rem_trait","","",132],[11,"neg_trait","","",132],[11,"not_trait","","",132],[11,"bitxor_trait","","",132],[11,"bitand_trait","","",132],[11,"bitor_trait","","",132],[11,"shl_trait","","",132],[11,"shr_trait","","",132],[11,"index_trait","","",132],[11,"index_mut_trait","","",132],[11,"range_struct","","",132],[11,"range_from_struct","","",132],[11,"range_to_struct","","",132],[11,"range_full_struct","","",132],[11,"unsafe_cell_type","","",132],[11,"deref_trait","","",132],[11,"deref_mut_trait","","",132],[11,"fn_trait","","",132],[11,"fn_mut_trait","","",132],[11,"fn_once_trait","","",132],[11,"eq_trait","","",132],[11,"ord_trait","","",132],[11,"str_eq_fn","","",132],[11,"panic_fn","","",132],[11,"panic_bounds_check_fn","","",132],[11,"panic_fmt","","",132],[11,"exchange_malloc_fn","","",132],[11,"exchange_free_fn","","",132],[11,"strdup_uniq_fn","","",132],[11,"start_fn","","",132],[11,"ty_desc","","",132],[11,"opaque","","",132],[11,"eh_personality","","",132],[11,"exchange_heap","","",132],[11,"owned_box","","",132],[11,"phantom_fn","","",132],[11,"phantom_data","","",132],[11,"covariant_type","","",132],[11,"contravariant_type","","",132],[11,"invariant_type","","",132],[11,"covariant_lifetime","","",132],[11,"contravariant_lifetime","","",132],[11,"invariant_lifetime","","",132],[11,"no_copy_bound","","",132],[11,"managed_bound","","",132],[11,"non_zero","","",132],[11,"stack_exhausted","","",132],[11,"debug_trait","","",132],[11,"visit_item","","",133],[11,"new","","",133],[11,"collect_item","","",133],[11,"collect_local_language_items","","",133],[11,"collect_external_language_items","","",133],[11,"collect","","",133],[11,"eq","rustc::middle::liveness","",134],[11,"ne","","",134],[11,"eq","","",135],[11,"ne","","",135],[11,"clone","","",135],[11,"fmt","","",136],[11,"eq","","",136],[11,"ne","","",136],[11,"visit_fn","","",137],[11,"visit_local","","",137],[11,"visit_expr","","",137],[11,"visit_arm","","",137],[11,"fmt","","",135],[11,"fmt","","",134],[11,"fmt","","",138],[11,"fmt","","",139],[11,"visit_fn","","",140],[11,"visit_local","","",140],[11,"visit_expr","","",140],[11,"visit_arm","","",140],[11,"clone","","",141],[11,"fmt","rustc::middle::mem_categorization","",142],[11,"eq","","",142],[11,"ne","","",142],[11,"clone","","",142],[11,"fmt","","",143],[11,"eq","","",143],[11,"ne","","",143],[11,"clone","","",143],[11,"fmt","","",144],[11,"hash","","",144],[11,"eq","","",144],[11,"ne","","",144],[11,"clone","","",144],[11,"fmt","","",145],[11,"hash","","",145],[11,"eq","","",145],[11,"ne","","",145],[11,"clone","","",145],[11,"fmt","","",146],[11,"hash","","",146],[11,"eq","","",146],[11,"ne","","",146],[11,"clone","","",146],[11,"fmt","","",147],[11,"hash","","",147],[11,"eq","","",147],[11,"ne","","",147],[11,"clone","","",147],[11,"fmt","","",148],[11,"hash","","",148],[11,"eq","","",148],[11,"ne","","",148],[11,"clone","","",148],[11,"fmt","","",149],[11,"hash","","",149],[11,"eq","","",149],[11,"ne","","",149],[11,"clone","","",149],[11,"fmt","","",150],[11,"eq","","",150],[11,"ne","","",150],[11,"clone","","",150],[11,"fmt","","",151],[11,"eq","","",151],[11,"ne","","",151],[11,"clone","","",151],[11,"id","syntax::ast","",152],[11,"span","","",152],[11,"id","","",153],[11,"span","","",153],[11,"from_mutbl","rustc::middle::mem_categorization","",149],[11,"from_borrow_kind","","",149],[11,"from_pointer_kind","","",149],[11,"inherit","","",149],[11,"is_mutable","","",149],[11,"is_immutable","","",149],[11,"to_user_str","","",149],[11,"new","","",154],[11,"cat_expr","","",154],[11,"cat_expr_autoderefd","","",154],[11,"cat_expr_unadjusted","","",154],[11,"cat_def","","",154],[11,"cat_rvalue_node","","",154],[11,"cat_rvalue","","",154],[11,"cat_field","","",154],[11,"cat_tup_field","","",154],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",154],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",154],[11,"cat_imm_interior","","",154],[11,"cat_downcast","","",154],[11,"cat_pattern","","",154],[11,"guarantor","","Returns `self` after stripping away any owned pointer derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",151],[11,"freely_aliasable","","Returns `Some(_)` if this lvalue represents a freely aliasable pointer type.",151],[11,"upvar","","",151],[11,"descriptive_string","","",151],[11,"repr","","",151],[11,"repr","","",142],[11,"repr","","",144],[11,"repr","","",145],[11,"repr","rustc::middle::ty","",155],[11,"repr","rustc::middle::mem_categorization","",143],[11,"user_string","","",143],[11,"fmt","rustc::middle::privacy","",156],[11,"fmt","","",157],[11,"fmt","","",158],[11,"eq","","",158],[11,"ne","","",158],[11,"or","","",156],[11,"visit_expr","rustc::middle::reachable","",159],[11,"visit_item","","",159],[11,"fmt","rustc::middle::region","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"hash","","",18],[11,"cmp","","",18],[11,"partial_cmp","","",18],[11,"lt","","",18],[11,"le","","",18],[11,"gt","","",18],[11,"ge","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"fmt","","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"hash","","",19],[11,"cmp","","",19],[11,"partial_cmp","","",19],[11,"lt","","",19],[11,"le","","",19],[11,"gt","","",19],[11,"ge","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"new","","",19],[11,"to_code_extent","","",19],[11,"fmt","","",160],[11,"decode","","",160],[11,"encode","","",160],[11,"hash","","",160],[11,"cmp","","",160],[11,"partial_cmp","","",160],[11,"lt","","",160],[11,"le","","",160],[11,"gt","","",160],[11,"ge","","",160],[11,"eq","","",160],[11,"ne","","",160],[11,"clone","","",160],[11,"from_node_id","","Creates a scope that represents the dynamic extent associated\nwith `node_id`.",18],[11,"node_id","","Returns a node id associated with this scope.",18],[11,"map_id","","Maps this scope to a potentially new one according to the\nNodeId transformer `f_id`.",18],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",18],[11,"fmt","","",161],[11,"eq","","",161],[11,"ne","","",161],[11,"fmt","","",162],[11,"eq","","",162],[11,"ne","","",162],[11,"fmt","","",163],[11,"eq","","",163],[11,"ne","","",163],[11,"fmt","","",164],[11,"each_encl_scope","","",165],[11,"each_var_scope","","",165],[11,"each_encl_free_region","","",165],[11,"each_rvalue_scope","","",165],[11,"each_terminating_scope","","",165],[11,"relate_free_regions","","",165],[11,"record_encl_scope","","",165],[11,"record_var_scope","","",165],[11,"record_rvalue_scope","","",165],[11,"mark_as_terminating_scope","","Records that a scope is a TERMINATING SCOPE. Whenever we create automatic temporaries --\ne.g. by an expression like `a().f` -- they will be freed within the innermost terminating\nscope.",165],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",165],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",165],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",165],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",165],[11,"var_region","","Returns the lifetime of the variable `id`.",165],[11,"scopes_intersect","","",165],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",165],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `free_region_map`.  Note that\nit is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n(that is, the user can give two different names to the same lifetime).",165],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",165],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",165],[11,"visit_block","","",166],[11,"visit_item","","",166],[11,"visit_fn","","",166],[11,"visit_arm","","",166],[11,"visit_pat","","",166],[11,"visit_stmt","","",166],[11,"visit_expr","","",166],[11,"visit_local","","",166],[11,"fmt","rustc::middle::resolve_lifetime","",167],[11,"decode","","",167],[11,"encode","","",167],[11,"hash","","",167],[11,"eq","","",167],[11,"ne","","",167],[11,"clone","","",167],[11,"visit_item","","",168],[11,"visit_fn","","",168],[11,"visit_ty","","",168],[11,"visit_ty_method","","",168],[11,"visit_block","","",168],[11,"visit_lifetime_ref","","",168],[11,"visit_generics","","",168],[11,"visit_poly_trait_ref","","",168],[11,"fmt","","",169],[11,"visit_item","rustc::middle::stability","",170],[11,"visit_fn","","",170],[11,"visit_trait_item","","",170],[11,"visit_variant","","",170],[11,"visit_struct_field","","",170],[11,"visit_foreign_item","","",170],[11,"build","","Construct the stability index for a crate being compiled.",171],[11,"new","","",171],[11,"visit_item","","",172],[11,"visit_expr","","",172],[11,"visit_path","","",172],[11,"visit_pat","","",172],[11,"fmt","rustc::middle::subst","",173],[11,"hash","","",173],[11,"eq","","",173],[11,"ne","","",173],[11,"clone","","",173],[11,"fmt","","",174],[11,"hash","","",174],[11,"eq","","",174],[11,"ne","","",174],[11,"clone","","",174],[11,"new","","",173],[11,"new_type","","",173],[11,"new_trait","","",173],[11,"erased","","",173],[11,"empty","","",173],[11,"trans_empty","","",173],[11,"is_noop","","",173],[11,"type_for_def","","",173],[11,"has_regions_escaping_depth","","",173],[11,"self_ty","","",173],[11,"with_self_ty","","",173],[11,"erase_regions","","",173],[11,"regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",173],[11,"mut_regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",173],[11,"with_method","","",173],[11,"is_erased","","",174],[11,"fmt","","",175],[11,"decode","","",175],[11,"encode","","",175],[11,"hash","","",175],[11,"clone","","",175],[11,"eq","","",175],[11,"ne","","",175],[11,"cmp","","",175],[11,"partial_cmp","","",175],[11,"lt","","",175],[11,"le","","",175],[11,"gt","","",175],[11,"ge","","",175],[11,"all","","",175],[11,"to_uint","","",175],[11,"from_uint","","",175],[11,"decode","","",176],[11,"encode","","",176],[11,"hash","","",176],[11,"clone","","",176],[11,"eq","","",176],[11,"ne","","",176],[11,"fmt","","",176],[11,"empty","","",176],[11,"params_from_type","","",176],[11,"new","","`t` is the type space.\n`s` is the self space.\n`a` is the assoc space.\n`f` is the fn space.",176],[11,"push","","Appends `value` to the vector associated with `space`.",176],[11,"extend","","Appends `values` to the vector associated with `space`.",176],[11,"pop","","",176],[11,"truncate","","",176],[11,"replace","","",176],[11,"get_self","","",176],[11,"len","","",176],[11,"is_empty_in","","",176],[11,"get_slice","","",176],[11,"get_mut_slice","","",176],[11,"opt_get","","",176],[11,"get","","",176],[11,"iter","","",176],[11,"into_iter","","",176],[11,"iter_enumerated","","",176],[11,"as_slice","","",176],[11,"into_vec","","",176],[11,"all_vecs","","",176],[11,"all","","",176],[11,"any","","",176],[11,"is_empty","","",176],[11,"map","","",176],[11,"map_enumerated","","",176],[11,"map_move","","",176],[11,"split","","",176],[11,"with_vec","","",176],[11,"clone","","",177],[6,"Item","rustc_typeck::lint",""],[11,"next","rustc::middle::subst","",177],[6,"Item","rustc_typeck::lint",""],[6,"IntoIter","",""],[11,"into_iter","rustc::middle::subst","",176],[6,"Item","rustc_typeck::lint",""],[6,"IntoIter","",""],[11,"tcx","rustc::middle::subst","",178],[11,"enter_region_binder","","",178],[11,"exit_region_binder","","",178],[11,"fold_region","","",178],[11,"fold_ty","","",178],[11,"clone","rustc::middle::traits::fulfill","",179],[11,"new","","",180],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `<SomeType as SomeTrait>::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we'll unify `$0` with\n`projection_ty` again.",180],[11,"register_builtin_bound","","",180],[11,"register_region_obligation","","",180],[11,"register_predicate_obligation","","",180],[11,"region_obligations","","",180],[11,"select_all_or_error","","",180],[11,"select_new_obligations","","Attempts to select obligations that were registered since the call to a selection routine.\nThis is used by the type checker to eagerly attempt to resolve obligations in hopes of\ngaining type information. It'd be equally valid to use `select_where_possible` but it\nresults in `O(n^2)` performance (#18208).",180],[11,"select_where_possible","","",180],[11,"pending_obligations","","",180],[11,"repr","","",179],[11,"clone","rustc::middle::traits::project","",181],[11,"eq","","",182],[11,"ne","","",182],[11,"tcx","","",183],[11,"fold_ty","","",183],[11,"with","","",184],[11,"repr","","",185],[11,"repr","","",182],[11,"fold_with","","",184],[11,"repr","","",184],[11,"fmt","rustc::middle::traits::object_safety","",186],[11,"clone","","",186],[11,"repr","","",187],[11,"clone","rustc::middle::traits::select","",188],[11,"fmt","","",189],[11,"clone","","",190],[11,"fmt","","",190],[11,"eq","","",190],[11,"ne","","",190],[11,"fmt","","",191],[11,"new","","",192],[11,"intercrate","","",192],[11,"infcx","","",192],[11,"tcx","","",192],[11,"param_env","","",192],[11,"closure_typer","","",192],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",192],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",192],[11,"evaluate_impl","","Evaluates whether the impl with id `impl_def_id` could be applied to the self type\n`obligation_self_ty`. This can be used either for trait or inherent impls.",192],[11,"repr","","",190],[11,"new","","",188],[6,"Item","rustc_typeck::lint",""],[11,"next","core::option","",12],[11,"repr","rustc::middle::traits::select","",193],[11,"may_apply","","",194],[11,"filter_to_traits","rustc::middle::traits::util","",195],[6,"Item","rustc_typeck::lint",""],[11,"next","rustc::middle::traits::util","",195],[6,"Item","rustc_typeck::lint",""],[11,"next","rustc::middle::traits::util","",196],[11,"fmt","rustc::middle::traits","",197],[11,"fmt","","",198],[11,"repr","","",199],[11,"repr","","",200],[11,"repr","","",197],[11,"repr","","",201],[11,"repr","","",202],[11,"repr","","",198],[11,"repr","","",203],[11,"repr","","",204],[11,"repr","","",205],[11,"fmt","","",205],[11,"repr","rustc::middle::traits::project","",181],[11,"fmt","","",181],[11,"eq","rustc::middle::traits","",199],[11,"ne","","",199],[11,"clone","","",199],[11,"eq","","",206],[11,"ne","","",206],[11,"clone","","",206],[11,"eq","","",207],[11,"ne","","",207],[11,"clone","","",207],[11,"eq","","",208],[11,"ne","","",208],[11,"clone","","",208],[11,"fmt","","",203],[11,"clone","","",203],[11,"clone","","",205],[11,"clone","","",200],[11,"fmt","","",200],[11,"eq","","",197],[11,"ne","","",197],[11,"clone","","",197],[11,"clone","","",202],[11,"fmt","","",202],[11,"clone","","",201],[11,"fmt","","",201],[11,"clone","","",198],[11,"eq","","",198],[11,"ne","","",198],[11,"new","","",199],[11,"misc","","",199],[11,"with","","",199],[11,"new","","",206],[11,"misc","","",206],[11,"dummy","","",206],[11,"iter_nested","","",200],[11,"map_nested","","",200],[11,"map_move_nested","","",200],[11,"iter_nested","","",197],[11,"map_nested","","",197],[11,"map_move_nested","","",197],[11,"iter_nested","","",202],[11,"map_nested","","",202],[11,"map_move_nested","","",202],[11,"iter_nested","","",201],[11,"map_nested","","",201],[11,"map_move_nested","","",201],[11,"is_overflow","","",204],[11,"hash","rustc::middle::ty","",209],[11,"eq","","",209],[11,"ne","","",209],[11,"clone","","",209],[11,"fmt","","",210],[11,"clone","","",210],[11,"id","","",210],[11,"fmt","","",211],[11,"clone","","",211],[11,"def_id","","",211],[11,"name","","",211],[11,"container","","",211],[11,"as_opt_method","","",211],[11,"fmt","","",212],[11,"clone","","",212],[11,"def_id","","",212],[11,"fmt","","",213],[11,"clone","","",213],[11,"new","","",213],[11,"container_id","","",213],[11,"fmt","","",214],[11,"clone","","",214],[11,"fmt","","",215],[11,"hash","","",215],[11,"eq","","",215],[11,"ne","","",215],[11,"clone","","",215],[11,"fmt","","",216],[11,"clone","","",216],[11,"hash","","",217],[11,"eq","","",217],[11,"ne","","",217],[11,"encode","","",218],[11,"decode","","",218],[11,"eq","","",218],[11,"ne","","",218],[11,"clone","","",218],[11,"fmt","","",219],[11,"encode","","",219],[11,"decode","","",219],[11,"eq","","",219],[11,"ne","","",219],[11,"clone","","",219],[11,"fmt","","",220],[11,"clone","","",220],[11,"fmt","","",221],[11,"eq","","",221],[11,"ne","","",221],[11,"clone","","",221],[11,"fmt","","",222],[11,"clone","","",222],[11,"fmt","","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"clone","","",223],[11,"fmt","","",224],[11,"partial_cmp","","",224],[11,"lt","","",224],[11,"le","","",224],[11,"gt","","",224],[11,"ge","","",224],[11,"eq","","",224],[11,"ne","","",224],[11,"decode","","",224],[11,"encode","","",224],[11,"clone","","",224],[11,"fmt","","",25],[11,"clone","","",25],[11,"fmt","","",225],[11,"clone","","",225],[11,"fmt","","",226],[11,"clone","","",226],[11,"clone","","",227],[11,"fmt","","",228],[11,"hash","","",228],[11,"eq","","",228],[11,"ne","","",228],[11,"clone","","",228],[11,"decode","","",229],[11,"encode","","",229],[11,"fmt","","",229],[11,"hash","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"clone","","",229],[11,"expr","","",228],[11,"autoobject","","",228],[11,"autoderef","","",228],[11,"clone","","",230],[11,"new","","",231],[11,"hash","","",232],[11,"cmp","","",232],[11,"partial_cmp","","",232],[11,"lt","","",232],[11,"le","","",232],[11,"gt","","",232],[11,"ge","","",232],[11,"clone","","",232],[11,"eq","","",232],[11,"ne","","",232],[11,"empty","","Returns an empty set of flags.",232],[11,"all","","Returns the set containing all flags.",232],[11,"bits","","Returns the raw value of the flags currently stored.",232],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",232],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",232],[11,"is_empty","","Returns `true` if no flags are currently stored.",232],[11,"is_all","","Returns `true` if all flags are currently set.",232],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",232],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",232],[11,"insert","","Inserts the specified flags in-place.",232],[11,"remove","","Removes the specified flags in-place.",232],[11,"toggle","","Toggles the specified flags in-place.",232],[6,"Output","rustc_typeck::lint",""],[11,"bitor","rustc::middle::ty","Returns the union of the two sets of flags.",232],[6,"Output","rustc_typeck::lint",""],[11,"bitxor","rustc::middle::ty","Returns the left flags, but with all the right flags toggled.",232],[6,"Output","rustc_typeck::lint",""],[11,"bitand","rustc::middle::ty","Returns the intersection between the two sets of flags.",232],[6,"Output","rustc_typeck::lint",""],[11,"sub","rustc::middle::ty","Returns the set difference of the two sets of flags.",232],[6,"Output","rustc_typeck::lint",""],[11,"not","rustc::middle::ty","Returns the complement of this set of flags.",232],[11,"print_debug_stats","","",233],[11,"fmt","","",234],[11,"fmt","","",232],[11,"eq","","",234],[11,"hash","","",234],[11,"eq","","",235],[11,"hash","","",235],[11,"borrow","","",235],[11,"fmt","","",236],[11,"hash","","",236],[11,"eq","","",236],[11,"ne","","",236],[11,"clone","","",236],[11,"fmt","","",237],[11,"hash","","",237],[11,"eq","","",237],[11,"ne","","",237],[11,"clone","","",237],[11,"fmt","","",238],[11,"hash","","",238],[11,"eq","","",238],[11,"ne","","",238],[11,"clone","","",238],[11,"diverges","","",238],[11,"unwrap","","",238],[11,"diverges","","",90],[11,"hash","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"clone","","",85],[11,"inputs","","",90],[11,"input","","",90],[11,"output","","",90],[11,"variadic","","",90],[11,"fmt","","",239],[11,"hash","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"clone","","",239],[11,"fmt","","",240],[11,"decode","","",240],[11,"encode","","",240],[11,"hash","","",240],[11,"eq","","",240],[11,"ne","","",240],[11,"clone","","",240],[11,"fmt","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"hash","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",241],[11,"hash","","",241],[11,"eq","","",241],[11,"ne","","",241],[11,"clone","","",241],[11,"decode","","",242],[11,"encode","","",242],[11,"fmt","","",242],[11,"hash","","",242],[11,"eq","","",242],[11,"ne","","",242],[11,"clone","","",242],[11,"fmt","","",24],[11,"decode","","",24],[11,"encode","","",24],[11,"clone","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"fmt","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"clone","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"is_bound","","",16],[11,"escapes_depth","","",16],[11,"fmt","","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"hash","","",17],[11,"cmp","","",17],[11,"partial_cmp","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"fmt","","",20],[11,"decode","","",20],[11,"encode","","",20],[11,"hash","","",20],[11,"cmp","","",20],[11,"partial_cmp","","",20],[11,"lt","","",20],[11,"le","","",20],[11,"gt","","",20],[11,"ge","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"fmt","","",243],[11,"hash","","",243],[11,"eq","","",243],[11,"ne","","",243],[11,"clone","","",243],[11,"fmt","","",244],[11,"hash","","",244],[11,"eq","","",244],[11,"ne","","",244],[11,"clone","","",244],[11,"principal_def_id","","",244],[11,"principal_trait_ref_with_self_ty","","Object types don't have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",244],[11,"projection_bounds_with_self_ty","","",244],[11,"fmt","","",83],[11,"hash","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"clone","","",83],[11,"self_ty","","",90],[11,"def_id","","",90],[11,"substs","","",90],[11,"input_types","","",90],[11,"to_poly_trait_predicate","","",90],[11,"fmt","","",90],[11,"hash","","",90],[11,"eq","","",90],[11,"ne","","",90],[11,"clone","","",90],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a\nrisky thing to do because it's easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",90],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"fmt","","",245],[11,"clone","","",245],[11,"fmt","","",246],[11,"clone","","",246],[11,"fmt","","",247],[11,"clone","","",247],[11,"fmt","","",248],[11,"clone","","",248],[11,"hash","","",248],[11,"eq","","",248],[11,"ne","","",248],[11,"fmt","","",249],[11,"clone","","",249],[11,"hash","","",249],[11,"eq","","",249],[11,"ne","","",249],[11,"fmt","","",250],[11,"hash","","",250],[11,"decode","","",250],[11,"eq","","",250],[11,"ne","","",250],[11,"encode","","",250],[11,"clone","","",250],[11,"to_usize","","",250],[11,"from_usize","","",250],[11,"hash","","",251],[11,"eq","","",251],[11,"ne","","",251],[11,"clone","","",251],[11,"hash","","",119],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"hash","","",121],[11,"eq","","",121],[11,"ne","","",121],[11,"clone","","",121],[11,"hash","","",252],[11,"decode","","",252],[11,"encode","","",252],[11,"eq","","",252],[11,"ne","","",252],[11,"clone","","",252],[11,"hash","","",253],[11,"eq","","",253],[11,"ne","","",253],[11,"clone","","",253],[11,"fmt","","",254],[11,"hash","","",254],[11,"eq","","",254],[11,"ne","","",254],[11,"decode","","",254],[11,"encode","","",254],[11,"clone","","",254],[11,"fmt","","",255],[11,"hash","","",255],[11,"decode","","",255],[11,"encode","","",255],[11,"clone","","",255],[11,"eq","","",255],[11,"ne","","",255],[11,"fmt","","",251],[11,"fmt","","",119],[11,"fmt","","",121],[11,"fmt","","",252],[11,"fmt","","",85],[11,"fmt","","",253],[11,"fmt","","",120],[11,"fmt","","",256],[11,"clone","","",256],[11,"fmt","","",257],[11,"clone","","",257],[11,"fmt","","",258],[11,"clone","","",258],[11,"decode","","",258],[11,"encode","","",258],[11,"to_early_bound_region","","",258],[11,"fmt","","",259],[11,"clone","","",259],[11,"empty","","",259],[11,"is_empty","","",259],[11,"has_type_params","","",259],[11,"has_region_params","","",259],[11,"fmt","","",260],[11,"clone","","",260],[11,"empty","","",260],[11,"instantiate","","",260],[11,"instantiate_supertrait","","",260],[11,"fmt","","",261],[11,"hash","","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"clone","","",261],[11,"subst_supertrait","","Performs a substituion suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",261],[11,"fmt","","",262],[11,"hash","","",262],[11,"eq","","",262],[11,"ne","","",262],[11,"clone","","",262],[11,"def_id","","",262],[11,"input_types","","",262],[11,"self_ty","","",262],[11,"def_id","","",90],[11,"fmt","","",263],[11,"hash","","",263],[11,"eq","","",263],[11,"ne","","",263],[11,"clone","","",263],[11,"fmt","","",264],[11,"hash","","",264],[11,"eq","","",264],[11,"ne","","",264],[11,"clone","","",264],[11,"fmt","","",84],[11,"hash","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"clone","","",84],[11,"item_name","","",90],[11,"sort_key","","",90],[11,"fmt","","",265],[11,"hash","","",265],[11,"eq","","",265],[11,"ne","","",265],[11,"clone","","",265],[11,"sort_key","","",265],[11,"to_poly_trait_ref","alloc::rc","",82],[11,"to_poly_trait_ref","rustc::middle::ty","",90],[11,"to_poly_trait_ref","","",90],[11,"as_predicate","alloc::rc","",82],[11,"as_predicate","rustc::middle::ty","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",261],[11,"has_escaping_regions","","",261],[11,"to_opt_poly_trait_ref","","",261],[11,"fmt","","",266],[11,"clone","","",266],[11,"empty","","",266],[11,"has_escaping_regions","","",266],[11,"is_empty","","",266],[11,"new","","",83],[11,"self_ty","","",83],[11,"input_types","","",83],[11,"clone","","",267],[11,"with_caller_bounds","","",267],[11,"for_item","","",267],[11,"fmt","","",268],[11,"clone","","",268],[11,"clone","","",269],[11,"decode","","",155],[11,"encode","","",155],[11,"fmt","","",155],[11,"eq","","",155],[11,"ne","","",155],[11,"clone","","",155],[11,"trait_did","","",155],[11,"mk_substs","","",233],[11,"mk_bare_fn","","",233],[11,"mk_region","","",233],[11,"closure_kind","","",233],[11,"closure_type","","",233],[11,"type_parameter_def","","",233],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",234],[11,"walk_children","","Iterator that walks types reachable from `self`, in\ndepth-first order. Note that this is a shallow walk. For\nexample:",234],[11,"as_opt_param_ty","","",234],[11,"is_param","","",234],[11,"new","","",239],[11,"for_self","","",239],[11,"for_def","","",239],[11,"to_ty","","",239],[11,"is_self","","",239],[11,"empty","","",269],[11,"is_noop","","",269],[11,"empty","","",248],[11,"clone","","",270],[11,"when","","",270],[11,"intersects","","",270],[11,"owns_managed","","",270],[11,"owns_owned","","",270],[11,"is_sized","","",270],[11,"interior_param","","",270],[11,"interior_unsafe","","",270],[11,"interior_unsized","","",270],[11,"needs_drop","","",270],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",270],[11,"reference","","Includes only those bits that still apply when indirected through a reference (`&`)",270],[11,"managed_pointer","","Includes only those bits that still apply when indirected through a managed pointer (`@`)",270],[11,"unsafe_pointer","","Includes only those bits that still apply when indirected through an unsafe pointer (`*`)",270],[11,"union","","",270],[11,"has_dtor","","",270],[6,"Output","rustc_typeck::lint",""],[11,"bitor","rustc::middle::ty","",270],[6,"Output","rustc_typeck::lint",""],[11,"bitand","rustc::middle::ty","",270],[6,"Output","rustc_typeck::lint",""],[11,"sub","rustc::middle::ty","",270],[11,"fmt","","",270],[11,"fmt","","",271],[11,"eq","","",271],[11,"ne","","",271],[11,"cmp","","",271],[11,"partial_cmp","","",271],[11,"lt","","",271],[11,"le","","",271],[11,"gt","","",271],[11,"ge","","",271],[11,"repr","","",247],[11,"clone","","",272],[11,"from_ast_variant","","Creates a new VariantInfo from the corresponding ast representation.",272],[11,"is_present","","",273],[11,"has_drop_flag","","",273],[11,"clone","","",274],[11,"to_string","","",219],[11,"from_mutbl","","",242],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",242],[11,"to_user_str","","",242],[11,"is_method_call","","",233],[11,"upvar_capture","","",233],[11,"node_ty","","",267],[11,"expr_ty_adjusted","","",267],[11,"node_method_ty","","",267],[11,"node_method_origin","","",267],[11,"adjustments","","",267],[11,"is_method_call","","",267],[11,"temporary_scope","","",267],[11,"upvar_capture","","",267],[11,"type_moves_by_default","","",267],[11,"param_env","","",267],[11,"closure_kind","","",267],[11,"closure_type","","",267],[11,"closure_upvars","","",267],[11,"fmt","","",275],[11,"eq","","",275],[11,"ne","","",275],[11,"clone","","",275],[11,"decode","","",22],[11,"encode","","",22],[11,"clone","","",22],[11,"is_identity","","",220],[11,"is_identity","","",222],[11,"new","","",240],[11,"shifted","","",240],[11,"repr","","",220],[11,"repr","","",221],[11,"repr","","",222],[11,"repr","","",223],[11,"repr","","",244],[11,"repr","","",261],[11,"repr","","",230],[11,"has_regions_escaping_depth","rustc::middle::subst","",173],[11,"has_regions_escaping_depth","","",176],[11,"has_regions_escaping_depth","rustc::middle::ty","",268],[11,"has_regions_escaping_depth","","",16],[11,"has_regions_escaping_depth","","",260],[11,"has_regions_escaping_depth","","",261],[11,"has_regions_escaping_depth","","",83],[11,"has_regions_escaping_depth","rustc::middle::subst","",174],[11,"has_regions_escaping_depth","rustc::middle::ty","",90],[11,"has_regions_escaping_depth","","",263],[11,"has_regions_escaping_depth","","",262],[11,"has_regions_escaping_depth","","",264],[11,"has_regions_escaping_depth","","",84],[11,"has_regions_escaping_depth","","",265],[11,"repr","","",84],[11,"has_projection_types","collections::vec","",276],[11,"has_projection_types","rustc::middle::subst","",176],[11,"has_projection_types","rustc::middle::ty","",237],[11,"has_projection_types","","",274],[11,"has_projection_types","","",266],[11,"has_projection_types","","",261],[11,"has_projection_types","","",262],[11,"has_projection_types","","",263],[11,"has_projection_types","","",16],[11,"has_projection_types","","",264],[11,"has_projection_types","","",84],[11,"has_projection_types","","",265],[11,"has_projection_types","","",83],[11,"has_projection_types","rustc::middle::subst","",173],[11,"has_projection_types","core::option","",12],[11,"has_projection_types","alloc::rc","",82],[11,"has_projection_types","alloc::boxed","",277],[11,"has_projection_types","rustc::middle::ty","",90],[11,"has_projection_types","","",238],[11,"has_projection_types","","",85],[11,"has_projection_types","","",209],[11,"has_projection_types","","",236],[11,"references_error","","",90],[11,"references_error","alloc::rc","",82],[11,"references_error","rustc::middle::ty","",262],[11,"references_error","","",84],[11,"references_error","","",83],[11,"references_error","","",261],[11,"references_error","","",264],[11,"references_error","","",263],[11,"references_error","","",16],[11,"repr","","",237],[11,"repr","","",274],[11,"repr","","",209],[11,"repr","","",267],[11,"repr","","",256],[11,"fold_with","core::option","",12],[11,"fold_with","alloc::rc","",82],[11,"fold_with","alloc::boxed","",277],[11,"fold_with","collections::vec","",276],[11,"fold_with","rustc::middle::ty","",90],[11,"fold_with","syntax::owned_slice","",278],[11,"fold_with","rustc::middle::subst","",176],[11,"fold_with","rustc::middle::ty","",236],[11,"fold_with","","",237],[11,"fold_with","","",215],[11,"fold_with","","",238],[11,"fold_with","","",85],[11,"fold_with","","",83],[11,"fold_with","","",209],[11,"fold_with","","",16],[11,"fold_with","rustc::middle::subst","",173],[11,"fold_with","rustc::middle::ty","",269],[11,"fold_with","","",223],[11,"fold_with","","",25],[11,"fold_with","","",230],[11,"fold_with","collections::enum_set","",279],[11,"fold_with","rustc::middle::ty","",249],[11,"fold_with","","",248],[11,"fold_with","","",257],[11,"fold_with","","",256],[11,"fold_with","","",258],[11,"fold_with","","",259],[11,"fold_with","","",260],[11,"fold_with","","",261],[11,"fold_with","","",84],[11,"fold_with","","",265],[11,"fold_with","","",266],[11,"fold_with","","",221],[11,"fold_with","rustc::middle::traits","",199],[11,"fold_with","","",197],[11,"fold_with","","",202],[11,"fold_with","","",201],[11,"fold_with","","",200],[11,"fold_with","","",198],[11,"fold_with","rustc::middle::ty","",263],[11,"fold_with","","",262],[11,"fold_with","","",264],[11,"fold_with","","",274],[11,"fold_with","","",267],[11,"tcx","rustc::middle::ty_fold","",280],[11,"fold_ty","","",280],[11,"new","","",281],[11,"tcx","","",281],[11,"enter_region_binder","","",281],[11,"exit_region_binder","","",281],[11,"fold_region","","",281],[11,"tcx","","",282],[11,"fold_region","","",282],[11,"new","rustc::middle::ty_walk","",283],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",283],[6,"Item","rustc_typeck::lint",""],[11,"next","rustc::middle::ty_walk","",283],[11,"visit_foreign_item","rustc::middle::weak_lang_items","",284],[11,"from_i64","rustc::metadata::common","",285],[11,"from_u64","","",285],[11,"eq","","",285],[11,"ne","","",285],[11,"fmt","","",286],[11,"clone","","",286],[11,"fmt","rustc::metadata::tydecode","",287],[11,"clone","rustc::metadata::encoder","",288],[11,"visit_expr","","",289],[11,"visit_item","","",289],[11,"visit_foreign_item","","",289],[11,"visit_item","","",290],[11,"eq","rustc::metadata::decoder","",291],[11,"ne","","",291],[11,"fmt","","",292],[11,"clone","","",292],[11,"clone","","",293],[11,"visit_item","rustc::metadata::creader","",294],[11,"as_slice","","",295],[11,"new","","",294],[11,"read_crates","","",294],[11,"read_exported_macros","","Read exported macros.",294],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",294],[11,"clone","rustc::metadata::cstore","",296],[11,"eq","","",296],[11,"ne","","",296],[11,"fmt","","",296],[11,"from_i64","","",297],[11,"from_u64","","",297],[11,"eq","","",297],[11,"ne","","",297],[11,"clone","","",297],[11,"clone","","",298],[11,"eq","","",298],[11,"ne","","",298],[11,"new","","",299],[11,"next_crate_num","","",299],[11,"get_crate_data","","",299],[11,"get_crate_hash","","",299],[11,"set_crate_data","","",299],[11,"iter_crate_data","","",299],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",299],[11,"add_used_crate_source","","",299],[11,"get_used_crate_source","","",299],[11,"reset","","",299],[11,"get_used_crates","","",299],[11,"add_used_library","","",299],[11,"get_used_libraries","","",299],[11,"add_used_link_args","","",299],[11,"get_used_link_args","","",299],[11,"add_extern_mod_stmt_cnum","","",299],[11,"find_extern_mod_stmt_cnum","","",299],[11,"data","","",300],[11,"name","","",300],[11,"hash","","",300],[11,"as_slice","","",301],[11,"maybe_load_library_crate","rustc::metadata::loader","",302],[11,"load_library_crate","","",302],[11,"report_load_errs","","",302],[11,"as_slice","","",303],[11,"for_each_lib_search_path","rustc::metadata::filesearch","",304],[11,"get_lib_path","","",304],[11,"search","","",304],[11,"new","","",304],[11,"get_dylib_search_paths","","",304],[11,"get_tools_search_paths","","",304],[11,"visit_item","rustc::metadata::macro_import","",305],[11,"visit_mac","","",305],[11,"eq","rustc::session::config","",306],[11,"ne","","",306],[11,"clone","","",306],[11,"eq","","",307],[11,"ne","","",307],[11,"clone","","",307],[11,"cmp","","",308],[11,"partial_cmp","","",308],[11,"lt","","",308],[11,"le","","",308],[11,"gt","","",308],[11,"ge","","",308],[11,"eq","","",308],[11,"ne","","",308],[11,"clone","","",308],[11,"clone","","",309],[11,"clone","","",310],[11,"eq","","",311],[11,"ne","","",311],[11,"clone","","",311],[11,"filestem","","",312],[11,"clone","","",313],[11,"path","","",313],[11,"temp_path","","",313],[11,"with_extension","","",313],[11,"filestem","","",313],[11,"eq","","",314],[11,"ne","","",314],[11,"fmt","","",315],[11,"hash","","",315],[11,"cmp","","",315],[11,"clone","","",315],[11,"partial_cmp","","",315],[11,"lt","","",315],[11,"le","","",315],[11,"gt","","",315],[11,"ge","","",315],[11,"eq","","",315],[11,"ne","","",315],[11,"clone","","",316],[11,"is_empty","","",316],[11,"clone","","",317],[11,"clone","","",318],[11,"fmt","","",319],[11,"eq","","",319],[11,"ne","","",319],[11,"clone","","",319],[11,"eq","","",320],[11,"ne","","",320],[11,"clone","","",320],[11,"is_stable","","",320],[11,"fmt","","",315],[11,"fmt","rustc::session::search_paths","",321],[11,"clone","","",321],[11,"fmt","","",322],[11,"clone","","",322],[11,"eq","","",322],[11,"ne","","",322],[11,"new","","",321],[11,"add_path","","",321],[11,"iter","","",321],[6,"Item","rustc_typeck::lint",""],[11,"next","rustc::session::search_paths","",323],[11,"span_fatal","rustc::session","",324],[11,"span_fatal_with_code","","",324],[11,"fatal","","",324],[11,"span_err","","",324],[11,"span_err_with_code","","",324],[11,"err","","",324],[11,"err_count","","",324],[11,"has_errors","","",324],[11,"abort_if_errors","","",324],[11,"span_warn","","",324],[11,"span_warn_with_code","","",324],[11,"warn","","",324],[11,"opt_span_warn","","",324],[11,"span_note","","",324],[11,"span_end_note","","",324],[11,"span_help","","",324],[11,"fileline_note","","",324],[11,"fileline_help","","",324],[11,"note","","",324],[11,"help","","",324],[11,"opt_span_bug","","",324],[11,"span_bug","","",324],[11,"bug","","",324],[11,"span_unimpl","","",324],[11,"unimpl","","",324],[11,"add_lint","","",324],[11,"next_node_id","","",324],[11,"reserve_node_ids","","",324],[11,"diagnostic","","",324],[11,"codemap","","",324],[11,"impossible_case","","",324],[11,"verbose","","",324],[11,"time_passes","","",324],[11,"count_llvm_insns","","",324],[11,"count_type_sizes","","",324],[11,"time_llvm_passes","","",324],[11,"trans_stats","","",324],[11,"meta_stats","","",324],[11,"asm_comments","","",324],[11,"no_verify","","",324],[11,"borrowck_stats","","",324],[11,"print_llvm_passes","","",324],[11,"lto","","",324],[11,"no_landing_pads","","",324],[11,"unstable_options","","",324],[11,"print_enum_sizes","","",324],[11,"sysroot","","",324],[11,"target_filesearch","","",324],[11,"host_filesearch","","",324],[11,"args","rustc::plugin::registry","Get the plugin's arguments, if any.",325],[11,"register_syntax_extension","","Register a syntax extension of any kind.",325],[11,"register_macro","","Register a macro of the usual kind.",325],[11,"register_lint_pass","","Register a compiler lint pass.",325],[11,"register_lint_group","","Register a lint group.",325],[11,"visit_item","rustc::plugin::build","",326],[11,"fmt","rustc::lint","",0],[11,"clone","","",327],[11,"eq","","",327],[11,"hash","","",327],[11,"of","","Get the `LintId` for a `Lint`.",327],[11,"as_str","","Get the name of the lint.",327],[11,"fmt","","",328],[11,"cmp","","",328],[11,"partial_cmp","","",328],[11,"lt","","",328],[11,"le","","",328],[11,"gt","","",328],[11,"ge","","",328],[11,"eq","","",328],[11,"ne","","",328],[11,"clone","","",328],[11,"as_str","","Convert a level to a lower-case string.",328],[11,"from_str","","Convert a lower-case string to a level.",328],[11,"eq","","",329],[11,"ne","","",329],[11,"clone","","",329],[11,"get_lints","rustc::lint::builtin","",330],[11,"new","rustc::lint::context","",331],[11,"get_lints","","",331],[11,"get_lint_groups","","",331],[11,"register_pass","","",331],[11,"register_group","","",331],[11,"register_renamed","","",331],[11,"process_command_line","","",331],[11,"sess","","Get the overall compiler `Session` object.",332],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",332],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",332],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",332],[11,"visit_item","","",332],[11,"visit_foreign_item","","",332],[11,"visit_pat","","",332],[11,"visit_expr","","",332],[11,"visit_stmt","","",332],[11,"visit_fn","","",332],[11,"visit_ty_method","","",332],[11,"visit_struct_def","","",332],[11,"visit_struct_field","","",332],[11,"visit_variant","","",332],[11,"visit_ty","","",332],[11,"visit_ident","","",332],[11,"visit_mod","","",332],[11,"visit_local","","",332],[11,"visit_block","","",332],[11,"visit_arm","","",332],[11,"visit_decl","","",332],[11,"visit_expr_post","","",332],[11,"visit_generics","","",332],[11,"visit_trait_item","","",332],[11,"visit_opt_lifetime_ref","","",332],[11,"visit_lifetime_ref","","",332],[11,"visit_lifetime_def","","",332],[11,"visit_explicit_self","","",332],[11,"visit_mac","","",332],[11,"visit_path","","",332],[11,"visit_attribute","","",332],[11,"visit_id","","",332],[11,"get_lints","","",333],[11,"check_item","","",333],[11,"fmt","rustc::util::common","",334],[11,"clone","","",334],[11,"drop","","",335],[11,"visit_expr","","",336],[11,"visit_expr","","",337],[11,"repr","core::option","",12],[11,"repr","syntax::ptr","",338],[11,"repr","core::result","",130],[11,"repr","alloc::rc","",82],[11,"repr","alloc::boxed","",277],[11,"repr","syntax::owned_slice","",278],[11,"repr","collections::vec","",276],[11,"user_string","","",276],[11,"repr","rustc::middle::def","",15],[11,"user_string","rustc::middle::ty","",244],[11,"repr","","",257],[11,"repr","","",258],[11,"repr","","",234],[11,"repr","","",215],[11,"repr","rustc::middle::subst","",173],[11,"repr","","",176],[11,"repr","rustc::middle::ty","",269],[11,"repr","rustc::middle::subst","",174],[11,"repr","collections::enum_set","",279],[11,"repr","rustc::middle::ty","",248],[11,"repr","","",83],[11,"repr","","",339],[11,"repr","syntax::ast","",340],[11,"repr","","",152],[11,"repr","","",341],[11,"user_string","","",341],[11,"repr","","",342],[11,"repr","","",343],[11,"repr","","",344],[11,"repr","syntax::codemap","",345],[11,"repr","syntax::ast","",153],[11,"repr","rustc::middle::ty","",20],[11,"repr","","",16],[11,"user_string","","",16],[11,"repr","","",17],[11,"repr","rustc::middle::region","",18],[11,"repr","","",19],[11,"repr","syntax::ast","",11],[11,"repr","rustc::middle::ty","",268],[11,"repr","","",259],[11,"repr","","",260],[11,"repr","","",266],[11,"repr","","",218],[11,"repr","","",219],[11,"repr","","",213],[11,"repr","syntax::ast","",6],[11,"user_string","","",6],[11,"repr","","",5],[11,"repr","","",346],[11,"repr","","",347],[11,"repr","rustc::middle::ty","",236],[11,"repr","","",85],[11,"repr","","",238],[11,"repr","","",227],[11,"repr","","",25],[11,"repr","","",225],[11,"repr","","",226],[11,"repr","","",250],[11,"user_string","","",250],[11,"repr","syntax::codemap","",13],[11,"user_string","alloc::rc","",82],[11,"user_string","rustc::middle::ty","",248],[11,"repr","","",249],[11,"user_string","collections::enum_set","",279],[11,"user_string","rustc::middle::ty","",90],[11,"user_string","","",83],[11,"user_string","syntax::ast","",5],[11,"repr","syntax::abi","",348],[11,"user_string","","",348],[11,"repr","rustc::middle::ty","",241],[11,"repr","syntax::ast","",349],[11,"repr","rustc::middle::ty","",242],[11,"repr","","",23],[11,"repr","","",24],[11,"repr","","",119],[11,"repr","","",121],[11,"repr","","",252],[11,"repr","","",251],[11,"repr","","",120],[11,"repr","syntax::ast","",350],[11,"repr","","",351],[11,"repr","","",122],[11,"repr","rustc::middle::ty","",275],[11,"user_string","","",239],[11,"repr","","",239],[11,"repr","","",90],[11,"repr","std::collections::hash::map","",352],[11,"repr","rustc::middle::ty","",264],[11,"user_string","","",264],[11,"repr","","",263],[11,"user_string","","",263],[11,"repr","","",262],[11,"user_string","","",262],[11,"user_string","","",84],[11,"repr","","",265],[11,"user_string","","",265],[11,"user_string","","",261],[11,"default","rustc::util::nodemap","",353],[11,"write","","",353],[11,"finish","","",353],[11,"new","rustc::util::snapshot_vec","",354],[11,"record","","",354],[11,"push","","",354],[11,"get","","",354],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",354],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",354],[11,"start_snapshot","","",354],[11,"actions_since_snapshot","","",354],[11,"rollback_to","","",354],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",354],[11,"input","rustc_back::sha2","",355],[11,"reset","","",355],[11,"zero_until","","",355],[11,"next","","",355],[11,"full_buffer","","",355],[11,"position","","",355],[11,"remaining","","",355],[11,"size","","",355],[11,"new","","Construct a new instance of a SHA-256 digest.",356],[11,"input","","",356],[11,"result","","",356],[11,"reset","","",356],[11,"output_bits","","",356],[11,"open","rustc_llvm::archive_ro","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",357],[11,"read","","Reads a file in the archive",357],[11,"drop","","",357],[11,"describe","rustc_llvm::diagnostic","",358],[11,"unpack","","",359],[11,"eq","rustc_llvm","",360],[11,"ne","","",360],[11,"fmt","","",361],[11,"hash","","",362],[11,"cmp","","",362],[11,"partial_cmp","","",362],[11,"lt","","",362],[11,"le","","",362],[11,"gt","","",362],[11,"ge","","",362],[11,"clone","","",362],[11,"eq","","",362],[11,"ne","","",362],[11,"empty","","Returns an empty set of flags.",362],[11,"all","","Returns the set containing all flags.",362],[11,"bits","","Returns the raw value of the flags currently stored.",362],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",362],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",362],[11,"is_empty","","Returns `true` if no flags are currently stored.",362],[11,"is_all","","Returns `true` if all flags are currently set.",362],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",362],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",362],[11,"insert","","Inserts the specified flags in-place.",362],[11,"remove","","Removes the specified flags in-place.",362],[11,"toggle","","Toggles the specified flags in-place.",362],[6,"Output","rustc_typeck::lint",""],[11,"bitor","rustc_llvm","Returns the union of the two sets of flags.",362],[6,"Output","rustc_typeck::lint",""],[11,"bitxor","rustc_llvm","Returns the left flags, but with all the right flags toggled.",362],[6,"Output","rustc_typeck::lint",""],[11,"bitand","rustc_llvm","Returns the intersection between the two sets of flags.",362],[6,"Output","rustc_typeck::lint",""],[11,"sub","rustc_llvm","Returns the set difference of the two sets of flags.",362],[6,"Output","rustc_typeck::lint",""],[11,"not","rustc_llvm","Returns the complement of this set of flags.",362],[11,"apply_llfn","","",362],[11,"apply_callsite","","",362],[11,"apply_llfn","","",363],[11,"apply_callsite","","",363],[11,"apply_llfn","","",364],[11,"apply_callsite","","",364],[11,"new","","",365],[11,"arg","","",365],[11,"ret","","",365],[11,"apply_llfn","","",365],[11,"apply_callsite","","",365],[11,"fmt","","",366],[11,"eq","","",366],[11,"ne","","",366],[11,"clone","","",367],[11,"eq","","",367],[11,"ne","","",367],[11,"eq","","",368],[11,"ne","","",368],[11,"drop","","",369],[11,"new","","",370],[11,"drop","","",370],[11,"drop","","",371],[3,"Lint","rustc_typeck::lint","Specification of a single lint."],[12,"name","","A string identifier for the lint.",0],[12,"default_level","","Default level for the lint.",0],[12,"desc","","Description of the lint or the issue it detects.",0],[6,"LintArray","",""],[8,"LintPass","","Trait for types providing lint checks."],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",372],[10,"check_crate","","",372],[10,"check_ident","","",372],[10,"check_mod","","",372],[10,"check_foreign_item","","",372],[10,"check_item","","",372],[10,"check_local","","",372],[10,"check_block","","",372],[10,"check_stmt","","",372],[10,"check_arm","","",372],[10,"check_pat","","",372],[10,"check_decl","","",372],[10,"check_expr","","",372],[10,"check_expr_post","","",372],[10,"check_ty","","",372],[10,"check_generics","","",372],[10,"check_fn","","",372],[10,"check_ty_method","","",372],[10,"check_trait_item","","",372],[10,"check_struct_def","","",372],[10,"check_struct_def_post","","",372],[10,"check_struct_field","","",372],[10,"check_variant","","",372],[10,"check_variant_post","","",372],[10,"check_opt_lifetime_ref","","",372],[10,"check_lifetime_ref","","",372],[10,"check_lifetime_def","","",372],[10,"check_explicit_self","","",372],[10,"check_mac","","",372],[10,"check_path","","",372],[10,"check_attribute","","",372],[10,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",372],[10,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",372],[6,"LintPassObject","",""],[3,"LintId","","Identifies a lint known to the compiler."],[4,"Level","","Setting for how to handle a lint."],[13,"Allow","","",328],[13,"Warn","","",328],[13,"Deny","","",328],[13,"Forbid","","",328],[4,"LintSource","","How a lint level was set."],[13,"Default","","Lint is at the default level as declared\nin rustc or a plugin.",329],[13,"Node","","Lint level was set by an attribute.",329],[13,"CommandLine","","Lint level was set by a command-line flag.",329],[13,"ReleaseChannel","","Lint level was set by the release channel.",329],[6,"LevelSource","",""],[0,"builtin","","Some lints that are built in to the compiler."],[7,"UNUSED_IMPORTS","rustc_typeck::lint::builtin",""],[7,"UNUSED_EXTERN_CRATES","",""],[7,"UNUSED_QUALIFICATIONS","",""],[7,"UNKNOWN_LINTS","",""],[7,"UNUSED_VARIABLES","",""],[7,"UNUSED_ASSIGNMENTS","",""],[7,"DEAD_CODE","",""],[7,"UNREACHABLE_CODE","",""],[7,"WARNINGS","",""],[7,"UNUSED_FEATURES","",""],[7,"STABLE_FEATURES","",""],[7,"UNKNOWN_CRATE_TYPES","",""],[7,"VARIANT_SIZE_DIFFERENCES","",""],[7,"FAT_PTR_TRANSMUTES","",""],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s\nwhich are used by other parts of the compiler."],[5,"check_crate","rustc_typeck::lint","Perform lint checking on a crate."],[3,"Context","","Context for lint checking."],[12,"tcx","","Type context we're checking in.",332],[12,"krate","","The crate being checked.",332],[12,"exported_items","","Items exported from the crate being checked.",332],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint\nattributes. Writing this as an iterator is an enormous mess."],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all)\naccording to `level`."],[3,"GatherNodeLevels","",""],[3,"LintStore","","Information about the registered lints."],[0,"metadata","rustc_typeck",""],[0,"common","rustc_typeck::metadata",""],[17,"tag_items","rustc_typeck::metadata::common",""],[17,"tag_paths_data_name","",""],[17,"tag_def_id","",""],[17,"tag_items_data","",""],[17,"tag_items_data_item","",""],[17,"tag_items_data_item_family","",""],[17,"tag_items_data_item_type","",""],[17,"tag_items_data_item_symbol","",""],[17,"tag_items_data_item_variant","",""],[17,"tag_items_data_parent_item","",""],[17,"tag_items_data_item_is_tuple_struct_ctor","",""],[17,"tag_index","",""],[17,"tag_index_buckets","",""],[17,"tag_index_buckets_bucket","",""],[17,"tag_index_buckets_bucket_elt","",""],[17,"tag_index_table","",""],[17,"tag_meta_item_name_value","",""],[17,"tag_meta_item_name","",""],[17,"tag_meta_item_value","",""],[17,"tag_attributes","",""],[17,"tag_attribute","",""],[17,"tag_meta_item_word","",""],[17,"tag_meta_item_list","",""],[17,"tag_crate_deps","",""],[17,"tag_crate_dep","",""],[17,"tag_crate_hash","",""],[17,"tag_crate_crate_name","",""],[17,"tag_crate_dep_crate_name","",""],[17,"tag_crate_dep_hash","",""],[17,"tag_mod_impl","",""],[17,"tag_item_trait_item","",""],[17,"tag_item_trait_ref","",""],[17,"tag_disr_val","",""],[17,"tag_path","",""],[17,"tag_path_len","",""],[17,"tag_path_elem_mod","",""],[17,"tag_path_elem_name","",""],[17,"tag_item_field","",""],[17,"tag_item_field_origin","",""],[17,"tag_item_variances","",""],[17,"tag_item_impl_item","",""],[17,"tag_item_trait_method_explicit_self","",""],[17,"tag_items_data_item_reexport","",""],[17,"tag_items_data_item_reexport_def_id","",""],[17,"tag_items_data_item_reexport_name","",""],[4,"astencode_tag","",""],[13,"tag_ast","","",285],[13,"tag_tree","","",285],[13,"tag_id_range","","",285],[13,"tag_table","","",285],[13,"tag_table_def","","",285],[13,"tag_table_node_type","","",285],[13,"tag_table_item_subst","","",285],[13,"tag_table_freevars","","",285],[13,"tag_table_tcache","","",285],[13,"tag_table_param_defs","","",285],[13,"tag_table_mutbl","","",285],[13,"tag_table_last_use","","",285],[13,"tag_table_spill","","",285],[13,"tag_table_method_map","","",285],[13,"tag_table_vtable_map","","",285],[13,"tag_table_adjustments","","",285],[13,"tag_table_moves_map","","",285],[13,"tag_table_capture_map","","",285],[13,"tag_table_closure_tys","","",285],[13,"tag_table_closure_kinds","","",285],[13,"tag_table_upvar_capture_map","","",285],[13,"tag_table_capture_modes","","",285],[13,"tag_table_object_cast_map","","",285],[13,"tag_table_const_qualif","","",285],[17,"tag_item_trait_item_sort","",""],[17,"tag_item_trait_parent_sort","",""],[17,"tag_item_impl_type_basename","",""],[17,"tag_crate_triple","",""],[17,"tag_dylib_dependency_formats","",""],[17,"tag_lang_items","",""],[17,"tag_lang_items_item","",""],[17,"tag_lang_items_item_id","",""],[17,"tag_lang_items_item_node_id","",""],[17,"tag_lang_items_missing","",""],[17,"tag_item_unnamed_field","",""],[17,"tag_items_data_item_visibility","",""],[17,"tag_item_method_tps","",""],[17,"tag_item_method_fty","",""],[17,"tag_mod_child","",""],[17,"tag_misc_info","",""],[17,"tag_misc_info_crate_items","",""],[17,"tag_item_method_provided_source","",""],[17,"tag_item_impl_vtables","",""],[17,"tag_impls","",""],[17,"tag_impls_impl","",""],[17,"tag_items_data_item_inherent_impl","",""],[17,"tag_items_data_item_extension_impl","",""],[17,"tag_native_libraries","",""],[17,"tag_native_libraries_lib","",""],[17,"tag_native_libraries_name","",""],[17,"tag_native_libraries_kind","",""],[17,"tag_plugin_registrar_fn","",""],[17,"tag_method_argument_names","",""],[17,"tag_method_argument_name","",""],[17,"tag_reachable_extern_fns","",""],[17,"tag_reachable_extern_fn_id","",""],[17,"tag_items_data_item_stability","",""],[17,"tag_items_data_item_repr","",""],[3,"LinkMeta","",""],[12,"crate_name","","",286],[12,"crate_hash","","",286],[17,"tag_struct_fields","",""],[17,"tag_struct_field","",""],[17,"tag_struct_field_id","",""],[17,"tag_attribute_is_sugared_doc","",""],[17,"tag_items_data_region","",""],[17,"tag_region_param_def","",""],[17,"tag_region_param_def_ident","",""],[17,"tag_region_param_def_def_id","",""],[17,"tag_region_param_def_space","",""],[17,"tag_region_param_def_index","",""],[17,"tag_type_param_def","",""],[17,"tag_item_generics","",""],[17,"tag_method_ty_generics","",""],[17,"tag_predicate","",""],[17,"tag_predicate_space","",""],[17,"tag_predicate_data","",""],[17,"tag_unsafety","",""],[17,"tag_associated_type_names","",""],[17,"tag_associated_type_name","",""],[17,"tag_polarity","",""],[17,"tag_macro_defs","",""],[17,"tag_macro_def","",""],[17,"tag_macro_def_body","",""],[17,"tag_paren_sugar","",""],[17,"tag_codemap","",""],[17,"tag_codemap_filemap","",""],[17,"tag_item_super_predicates","",""],[17,"tag_defaulted_trait","",""],[0,"tyencode","rustc_typeck::metadata",""],[3,"ctxt","rustc_typeck::metadata::tyencode",""],[12,"diag","","",373],[12,"ds","","",373],[12,"tcx","","",373],[12,"abbrevs","","",373],[3,"ty_abbrev","",""],[6,"abbrev_map","",""],[5,"enc_ty","",""],[5,"enc_substs","",""],[5,"enc_region","",""],[5,"enc_trait_ref","",""],[5,"enc_bare_fn_ty","",""],[5,"enc_closure_ty","",""],[5,"enc_builtin_bounds","",""],[5,"enc_existential_bounds","",""],[5,"enc_bounds","",""],[5,"enc_region_bounds","",""],[5,"enc_type_param_def","",""],[5,"enc_predicate","",""],[0,"tydecode","rustc_typeck::metadata",""],[4,"DefIdSource","rustc_typeck::metadata::tydecode",""],[13,"NominalType","","",287],[13,"TypeWithId","","",287],[13,"TypeParameter","","",287],[13,"RegionParameter","","",287],[13,"ClosureSource","","",287],[3,"PState","",""],[5,"parse_ident","",""],[5,"parse_name","",""],[5,"parse_state_from_data","",""],[5,"parse_ty_closure_data","",""],[5,"parse_ty_data","",""],[5,"parse_region_data","",""],[5,"parse_bare_fn_ty_data","",""],[5,"parse_trait_ref_data","",""],[5,"parse_substs_data","",""],[5,"parse_bounds_data","",""],[5,"parse_existential_bounds_data","",""],[5,"parse_builtin_bounds_data","",""],[5,"parse_def_id","",""],[5,"parse_predicate_data","",""],[5,"parse_predicate","",""],[5,"parse_type_param_def_data","",""],[0,"encoder","rustc_typeck::metadata",""],[4,"InlinedItemRef","rustc_typeck::metadata::encoder","A borrowed version of `ast::InlinedItem`."],[13,"IIItemRef","","",374],[13,"IITraitItemRef","","",374],[13,"IIImplItemRef","","",374],[13,"IIForeignRef","","",374],[6,"EncodeInlinedItem","",""],[3,"EncodeParams","",""],[12,"diag","","",375],[12,"tcx","","",375],[12,"reexports","","",375],[12,"item_symbols","","",375],[12,"link_meta","","",375],[12,"cstore","","",375],[12,"encode_inlined_item","","",375],[12,"reachable","","",375],[3,"EncodeContext","",""],[12,"diag","","",26],[12,"tcx","","",26],[12,"reexports","","",26],[12,"item_symbols","","",26],[12,"link_meta","","",26],[12,"cstore","","",26],[12,"encode_inlined_item","","",26],[12,"type_abbrevs","","",26],[12,"reachable","","",26],[5,"encode_def_id","",""],[5,"def_to_string","",""],[5,"write_closure_type","",""],[5,"write_type","",""],[5,"write_trait_ref","",""],[5,"write_region","",""],[17,"metadata_encoding_version","",""],[5,"encode_metadata","",""],[5,"encoded_ty","",""],[0,"decoder","rustc_typeck::metadata",""],[6,"Cmd","rustc_typeck::metadata::decoder",""],[5,"maybe_find_item","",""],[5,"item_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_type","",""],[5,"get_stability","",""],[5,"get_repr_attrs","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_symbol","",""],[4,"DefLike","",""],[13,"DlDef","","",292],[13,"DlImpl","","",292],[13,"DlField","","",292],[5,"each_lang_item","","Iterates over the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over all the top-level crate items."],[5,"get_item_path","",""],[6,"DecodeInlinedItem","",""],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns the def IDs of all the items in the given implementation."],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_impl_or_trait_item","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_tuple_struct_definition_if_ctor","","If node_id is the constructor of a tuple struct, retrieve the NodeId of\nthe actual type definition, otherwise, return None"],[5,"get_item_attrs","",""],[5,"get_struct_field_attrs","",""],[5,"get_struct_fields","",""],[5,"get_crate_attributes","",""],[3,"CrateDep","",""],[12,"cnum","","",293],[12,"name","","",293],[12,"hash","","",293],[5,"get_crate_deps","",""],[5,"maybe_get_crate_hash","",""],[5,"get_crate_hash","",""],[5,"maybe_get_crate_name","",""],[5,"get_crate_triple","",""],[5,"get_crate_name","",""],[5,"list_crate_metadata","",""],[5,"translate_def_id","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","",""],[5,"get_native_libraries","",""],[5,"get_plugin_registrar_fn","",""],[5,"each_exported_macro","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[5,"get_imported_filemaps","",""],[0,"creader","rustc_typeck::metadata","Validates all used crates and extern libraries and loads their metadata"],[3,"CrateReader","rustc_typeck::metadata::creader",""],[5,"validate_crate_name","",""],[0,"cstore","rustc_typeck::metadata",""],[6,"cnum_map","rustc_typeck::metadata::cstore",""],[4,"MetadataBlob","",""],[13,"MetadataVec","","",301],[13,"MetadataArchive","","",301],[3,"ImportedFileMap","","Holds information about a codemap::FileMap imported from another crate.\nSee creader::import_codemap() for more information."],[12,"original_start_pos","","This FileMap's byte-offset within the codemap of its original crate",376],[12,"original_end_pos","","The end of this FileMap within the codemap of its original crate",376],[12,"translated_filemap","","The imported FileMap's representation within the local codemap",376],[3,"crate_metadata","",""],[12,"name","","",300],[12,"data","","",300],[12,"cnum_map","","",300],[12,"cnum","","",300],[12,"codemap_import_info","","",300],[12,"span","","",300],[4,"LinkagePreference","",""],[13,"RequireDynamic","","",296],[13,"RequireStatic","","",296],[4,"NativeLibraryKind","",""],[13,"NativeStatic","","",297],[13,"NativeFramework","","",297],[13,"NativeUnknown","","",297],[3,"CrateSource","",""],[12,"dylib","","",298],[12,"rlib","","",298],[12,"cnum","","",298],[3,"CStore","",""],[12,"intr","","",299],[0,"csearch","rustc_typeck::metadata",""],[3,"MethodInfo","rustc_typeck::metadata::csearch",""],[12,"name","","",377],[12,"def_id","","",377],[12,"vis","","",377],[5,"get_symbol","",""],[5,"each_lang_item","","Iterates over all the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over each top-level crate item."],[5,"get_item_path","",""],[4,"FoundAst","",""],[13,"Found","","",378],[13,"FoundParent","","",378],[13,"NotFound","","",378],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns information about the given implementation."],[5,"get_impl_or_trait_item","",""],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_item_attrs","",""],[5,"get_struct_fields","",""],[5,"get_struct_field_attrs","",""],[5,"get_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_field_type","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_native_libraries","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), returns the ID of\nthe trait that the method belongs to. Otherwise, returns `None`."],[5,"get_tuple_struct_definition_if_ctor","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"get_stability","",""],[5,"is_staged_api","",""],[5,"get_repr_attrs","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[0,"loader","rustc_typeck::metadata","Finds crate binaries and loads their metadata"],[3,"CrateMismatch","rustc_typeck::metadata::loader",""],[3,"Context","",""],[12,"sess","","",302],[12,"span","","",302],[12,"ident","","",302],[12,"crate_name","","",302],[12,"hash","","",302],[12,"target","","",302],[12,"triple","","",302],[12,"filesearch","","",302],[12,"root","","",302],[12,"rejected_via_hash","","",302],[12,"rejected_via_triple","","",302],[12,"rejected_via_kind","","",302],[12,"should_match_name","","",302],[3,"Library","",""],[12,"dylib","","",379],[12,"rlib","","",379],[12,"metadata","","",379],[3,"ArchiveMetadata","",""],[3,"CratePaths","",""],[12,"ident","","",380],[12,"dylib","","",380],[12,"rlib","","",380],[5,"note_crate_name","",""],[5,"meta_section_name","",""],[5,"read_meta_section_name","",""],[5,"list_file_metadata","",""],[0,"filesearch","rustc_typeck::metadata",""],[4,"FileMatch","rustc_typeck::metadata::filesearch",""],[13,"FileMatches","","",381],[13,"FileDoesntMatch","","",381],[3,"FileSearch","",""],[12,"sysroot","","",304],[12,"search_paths","","",304],[12,"triple","","",304],[12,"kind","","",304],[5,"relative_target_lib_path","",""],[5,"get_or_default_sysroot","",""],[5,"get_rust_path","","Returns RUST_PATH as a string, without default paths added"],[5,"rust_path","","Returns the value of RUST_PATH, as a list\nof Paths. Includes default entries for, if they exist:\n$HOME/.rust\nDIR/.rust for any DIR that's the current working directory\nor an ancestor of it"],[5,"rustlibdir","",""],[0,"macro_import","rustc_typeck::metadata","Used by `rustc` when loading a crate with exported macros."],[5,"read_macro_defs","rustc_typeck::metadata::macro_import","Read exported macros."],[6,"MacroSelection","",""],[0,"middle","rustc_typeck",""],[0,"astconv_util","rustc_typeck::middle","This module contains a simple utility routine\nused by both `typeck` and `const_eval`.\nAlmost certainly this could (and should) be refactored out of existence."],[17,"NO_REGIONS","rustc_typeck::middle::astconv_util",""],[17,"NO_TPS","",""],[5,"check_path_args","",""],[5,"prim_ty_to_ty","",""],[5,"ast_ty_to_prim_ty","",""],[0,"astencode","rustc_typeck::middle",""],[5,"encode_inlined_item","rustc_typeck::middle::astencode",""],[5,"decode_inlined_item","","Decodes an item from its AST in the cdata's metadata and adds it to the\nast-map."],[5,"encode_closure_kind","",""],[8,"vtable_decoder_helpers","",""],[10,"read_vec_per_param_space","","",382],[10,"read_vtable_res_with_key","","",382],[10,"read_vtable_res","","",382],[10,"read_vtable_param_res","","",382],[10,"read_vtable_origin","","",382],[0,"cfg","rustc_typeck::middle","Module that constructs a control-flow graph representing an item.\nUses `Graph` as the underlying representation."],[0,"graphviz","rustc_typeck::middle::cfg",""],[6,"Node","rustc_typeck::middle::cfg::graphviz",""],[6,"Edge","",""],[3,"LabelledCFG","",""],[12,"ast_map","","",30],[12,"cfg","","",30],[12,"name","","",30],[12,"labelled_edges","","`labelled_edges` controls whether we emit labels on the edges",30],[3,"CFG","rustc_typeck::middle::cfg",""],[12,"graph","","",32],[12,"entry","","",32],[12,"exit","","",32],[4,"CFGNodeData","",""],[13,"AST","","",31],[13,"Entry","","",31],[13,"Exit","","",31],[13,"Dummy","","",31],[13,"Unreachable","","",31],[3,"CFGEdgeData","",""],[12,"exiting_scopes","","",383],[6,"CFGIndex","",""],[6,"CFGGraph","",""],[6,"CFGNode","",""],[6,"CFGEdge","",""],[0,"check_const","rustc_typeck::middle",""],[3,"ConstQualif","rustc_typeck::middle::check_const",""],[17,"PURE_CONST","",""],[17,"MUTABLE_MEM","",""],[17,"NEEDS_DROP","",""],[17,"PREFER_IN_PLACE","",""],[17,"NON_ZERO_SIZED","",""],[17,"HAS_STATIC_BORROWS","",""],[17,"NOT_CONST","",""],[17,"NON_STATIC_BORROWS","",""],[5,"check_crate","",""],[0,"check_static_recursion","rustc_typeck::middle",""],[5,"check_crate","rustc_typeck::middle::check_static_recursion",""],[5,"check_item_recursion","",""],[0,"check_loop","rustc_typeck::middle",""],[5,"check_crate","rustc_typeck::middle::check_loop",""],[0,"check_match","rustc_typeck::middle",""],[17,"DUMMY_WILD_PAT","rustc_typeck::middle::check_match",""],[3,"MatchCheckCtxt","",""],[12,"tcx","","",43],[12,"param_env","","",43],[4,"Constructor","",""],[13,"Single","","The constructor of all patterns that don't vary by constructor,\ne.g. struct patterns and fixed-length arrays.",41],[13,"Variant","","Enum variants.",41],[13,"ConstantValue","","Literal values.",41],[13,"ConstantRange","","Ranges of literal values (2..5).",41],[13,"Slice","","Array patterns of length n.",41],[13,"SliceWithSubslice","","Array patterns with a subslice.",41],[5,"check_crate","",""],[3,"StaticInliner","",""],[12,"tcx","","",44],[12,"failed","","",44],[12,"renaming_map","","",44],[5,"constructor_arity","","This computes the arity of a constructor. The arity of a constructor\nis how many subpattern patterns of that constructor should be expanded to."],[5,"specialize","","This is the main specialization step. It expands the first pattern in the given row\ninto `arity` patterns based on the constructor. For most patterns, the step is trivial,\nfor instance tuple patterns are flattened and box patterns expand into their inner pattern."],[0,"check_rvalues","rustc_typeck::middle",""],[5,"check_crate","rustc_typeck::middle::check_rvalues",""],[0,"const_eval","rustc_typeck::middle",""],[5,"lookup_const_by_id","rustc_typeck::middle::const_eval",""],[4,"const_val","",""],[13,"const_float","","",50],[13,"const_int","","",50],[13,"const_uint","","",50],[13,"const_str","","",50],[13,"const_binary","","",50],[13,"const_bool","","",50],[5,"const_expr_to_pat","",""],[5,"eval_const_expr","",""],[3,"ConstEvalErr","",""],[12,"span","","",51],[12,"kind","","",51],[4,"ErrKind","",""],[13,"CannotCast","","",52],[13,"CannotCastTo","","",52],[13,"InvalidOpForBools","","",52],[13,"InvalidOpForFloats","","",52],[13,"InvalidOpForIntUint","","",52],[13,"InvalidOpForUintInt","","",52],[13,"NegateOnString","","",52],[13,"NegateOnBoolean","","",52],[13,"NegateOnBinary","","",52],[13,"NotOnFloat","","",52],[13,"NotOnString","","",52],[13,"NotOnBinary","","",52],[13,"AddiWithOverflow","","",52],[13,"SubiWithOverflow","","",52],[13,"MuliWithOverflow","","",52],[13,"AdduWithOverflow","","",52],[13,"SubuWithOverflow","","",52],[13,"MuluWithOverflow","","",52],[13,"DivideByZero","","",52],[13,"DivideWithOverflow","","",52],[13,"ModuloByZero","","",52],[13,"ModuloWithOverflow","","",52],[13,"MissingStructField","","",52],[13,"NonConstPath","","",52],[13,"NonConstStruct","","",52],[13,"TupleIndexOutOfBounds","","",52],[13,"MiscBinaryOp","","",52],[13,"MiscCatchAll","","",52],[5,"eval_const_expr_partial","",""],[5,"compare_const_vals","",""],[5,"compare_lit_exprs","",""],[0,"dataflow","rustc_typeck::middle","A module for propagating forward dataflow information. The analysis\nassumes that the items to be propagated can be represented as bits\nand thus uses bitvectors. Your job is simply to specify the so-called\nGEN and KILL bits for each expression."],[4,"EntryOrExit","rustc_typeck::middle::dataflow",""],[13,"Entry","","",53],[13,"Exit","","",53],[3,"DataFlowContext","",""],[8,"BitwiseOperator","",""],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",384],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used."],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",385],[0,"dead","rustc_typeck::middle",""],[5,"check_crate","rustc_typeck::middle::dead",""],[0,"def","rustc_typeck::middle",""],[4,"Def","rustc_typeck::middle::def",""],[13,"DefFn","","",15],[13,"DefSelfTy","","",15],[13,"DefMod","","",15],[13,"DefForeignMod","","",15],[13,"DefStatic","","",15],[13,"DefConst","","",15],[13,"DefLocal","","",15],[13,"DefVariant","","",15],[13,"DefTy","","",15],[13,"DefAssociatedTy","","",15],[13,"DefTrait","","",15],[13,"DefPrimTy","","",15],[13,"DefTyParam","","",15],[13,"DefUse","","",15],[13,"DefUpvar","","",15],[13,"DefStruct","","Note that if it's a tuple struct's definition, the node id of the ast::DefId\nmay either refer to the item definition's id or the StructDef.ctor_id.",15],[13,"DefRegion","","",15],[13,"DefLabel","","",15],[13,"DefMethod","","",15],[3,"PathResolution","","The result of resolving a path.\nBefore type checking completes, `depth` represents the number of\ntrailing segments which are yet unresolved. Afterwards, if there\nwere no errors, all paths should be fully resolved, with `depth`\nset to `0` and `base_def` representing the final resolution."],[12,"base_def","","",60],[12,"last_private","","",60],[12,"depth","","",60],[6,"DefMap","",""],[6,"ExportMap","",""],[3,"Export","",""],[12,"name","","",386],[12,"def_id","","",386],[4,"MethodProvenance","",""],[13,"FromTrait","","",61],[13,"FromImpl","","",61],[0,"dependency_format","rustc_typeck::middle","Resolution of mixing rlibs and dylibs"],[6,"DependencyList","rustc_typeck::middle::dependency_format",""],[6,"Dependencies","",""],[5,"calculate","",""],[0,"effect","rustc_typeck::middle","Enforces the Rust effect system. Currently there is just one effect,\n`unsafe`."],[5,"check_crate","rustc_typeck::middle::effect",""],[0,"entry","rustc_typeck::middle",""],[5,"find_entry_point","rustc_typeck::middle::entry",""],[0,"expr_use_visitor","rustc_typeck::middle","A different sort of visitor for walking fn bodies.  Unlike the\nnormal visitor, which just walks the entire body in one shot, the\n`ExprUseVisitor` determines how expressions are being used."],[8,"Delegate","rustc_typeck::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when\nemploying the ExprUseVisitor."],[10,"consume","","",387],[10,"matched_pat","","",387],[10,"consume_pat","","",387],[10,"borrow","","",387],[10,"decl_without_init","","",387],[10,"mutate","","",387],[4,"LoanCause","",""],[13,"ClosureCapture","","",65],[13,"AddrOf","","",65],[13,"AutoRef","","",65],[13,"RefBinding","","",65],[13,"OverloadedOperator","","",65],[13,"ClosureInvocation","","",65],[13,"ForLoop","","",65],[13,"MatchDiscriminant","","",65],[4,"ConsumeMode","",""],[13,"Copy","","",66],[13,"Move","","",66],[4,"MoveReason","",""],[13,"DirectRefMove","","",67],[13,"PatBindingMove","","",67],[13,"CaptureMove","","",67],[4,"MatchMode","",""],[13,"NonBindingMatch","","",68],[13,"BorrowingMatch","","",68],[13,"CopyingMatch","","",68],[13,"MovingMatch","","",68],[4,"MutateMode","",""],[13,"Init","","",70],[13,"JustWrite","","",70],[13,"WriteAndRead","","",70],[3,"ExprUseVisitor","",""],[0,"fast_reject","rustc_typeck::middle",""],[4,"SimplifiedType","rustc_typeck::middle::fast_reject","See `simplify_type"],[13,"BoolSimplifiedType","","",72],[13,"CharSimplifiedType","","",72],[13,"IntSimplifiedType","","",72],[13,"UintSimplifiedType","","",72],[13,"FloatSimplifiedType","","",72],[13,"EnumSimplifiedType","","",72],[13,"StrSimplifiedType","","",72],[13,"VecSimplifiedType","","",72],[13,"PtrSimplifiedType","","",72],[13,"TupleSimplifiedType","","",72],[13,"TraitSimplifiedType","","",72],[13,"StructSimplifiedType","","",72],[13,"ClosureSimplifiedType","","",72],[13,"FunctionSimplifiedType","","",72],[13,"ParameterSimplifiedType","","",72],[5,"simplify_type","","Tries to simplify a type by dropping type parameters, deref'ing away any reference types, etc.\nThe idea is to get something simple that we can use to quickly decide if two types could unify\nduring method lookup."],[0,"graph","rustc_typeck::middle","A graph module for use in dataflow, region resolution, and elsewhere."],[3,"Graph","rustc_typeck::middle::graph",""],[3,"Node","",""],[12,"data","","",388],[3,"Edge","",""],[12,"data","","",73],[3,"NodeIndex","",""],[17,"InvalidNodeIndex","",""],[3,"EdgeIndex","",""],[17,"InvalidEdgeIndex","",""],[3,"Direction","",""],[17,"Outgoing","",""],[17,"Incoming","",""],[3,"DepthFirstTraversal","",""],[5,"each_edge_index","",""],[0,"intrinsicck","rustc_typeck::middle",""],[5,"check_crate","rustc_typeck::middle::intrinsicck",""],[0,"infer","rustc_typeck::middle","See the Book for more information."],[0,"bivariate","rustc_typeck::middle::infer","Applies the \"bivariance relationship\" to two types and/or regions.\nIf (A,B) are bivariant then either A <: B or B <: A. It occurs\nwhen type/lifetime parameters are unconstrained. Usually this is\nan error, but we permit it in the specific case where a type\nparameter is constrained in a where-clause via an associated type."],[3,"Bivariate","rustc_typeck::middle::infer::bivariate",""],[5,"Bivariate","",""],[0,"combine","rustc_typeck::middle::infer",""],[8,"Combine","rustc_typeck::middle::infer::combine",""],[10,"tcx","","",389],[10,"tag","","",389],[10,"fields","","",389],[10,"infcx","","",389],[10,"a_is_expected","","",389],[10,"trace","","",389],[10,"equate","","",389],[10,"bivariate","","",389],[10,"sub","","",389],[10,"lub","","",389],[10,"glb","","",389],[10,"mts","","",389],[10,"tys_with_variance","","",389],[10,"tys","","",389],[10,"regions_with_variance","","",389],[10,"regions","","",389],[10,"substs","","",389],[10,"substs_variances","","",389],[10,"bare_fn_tys","","",389],[10,"fn_sigs","","",389],[10,"args","","",389],[10,"unsafeties","","",389],[10,"abi","","",389],[10,"projection_tys","","",389],[10,"projection_predicates","","",389],[10,"projection_bounds","","",389],[10,"existential_bounds","","",389],[10,"builtin_bounds","","",389],[10,"trait_refs","","",389],[10,"binders","","",389],[8,"Combineable","",""],[10,"combine","","",390],[3,"CombineFields","",""],[12,"infcx","","",86],[12,"a_is_expected","","",86],[12,"trace","","",86],[5,"expected_found","",""],[5,"super_tys","",""],[0,"equate","rustc_typeck::middle::infer",""],[3,"Equate","rustc_typeck::middle::infer::equate",""],[5,"Equate","",""],[0,"error_reporting","rustc_typeck::middle::infer","Error Reporting Code for the inference engine"],[8,"ErrorReporting","rustc_typeck::middle::infer::error_reporting",""],[10,"report_region_errors","","",391],[10,"process_errors","","",391],[10,"report_type_error","","",391],[10,"report_and_explain_type_error","","",391],[10,"values_str","","",391],[10,"expected_found_str","","",391],[10,"report_concrete_failure","","",391],[10,"report_generic_bound_failure","","",391],[10,"report_sub_sup_conflict","","",391],[10,"report_sup_sup_conflict","","",391],[10,"report_processed_errors","","",391],[10,"give_suggestion","","",391],[8,"Resolvable","",""],[10,"resolve","","",392],[10,"contains_error","","",392],[0,"glb","rustc_typeck::middle::infer",""],[3,"Glb","rustc_typeck::middle::infer::glb","\"Greatest lower bound\" (common subtype)"],[5,"Glb","",""],[0,"lattice","rustc_typeck::middle::infer","# Lattice Variables"],[8,"LatticeDir","rustc_typeck::middle::infer::lattice",""],[10,"relate_bound","","",393],[5,"super_lattice_tys","",""],[0,"lub","rustc_typeck::middle::infer",""],[3,"Lub","rustc_typeck::middle::infer::lub","\"Least upper bound\" (common supertype)"],[5,"Lub","",""],[0,"region_inference","rustc_typeck::middle::infer","See README.md"],[4,"Constraint","rustc_typeck::middle::infer::region_inference",""],[13,"ConstrainVarSubVar","","",96],[13,"ConstrainRegSubVar","","",96],[13,"ConstrainVarSubReg","","",96],[4,"Verify","",""],[13,"VerifyRegSubReg","","",106],[13,"VerifyGenericBound","","",106],[4,"GenericKind","",""],[13,"Param","","",97],[13,"Projection","","",97],[3,"TwoRegions","",""],[4,"UndoLogEntry","",""],[13,"OpenSnapshot","","",99],[13,"CommitedSnapshot","","",99],[13,"AddVar","","",99],[13,"AddConstraint","","",99],[13,"AddVerify","","",99],[13,"AddGiven","","",99],[13,"AddCombination","","",99],[4,"CombineMapType","",""],[13,"Lub","","",100],[13,"Glb","","",100],[4,"RegionResolutionError","",""],[13,"ConcreteFailure","","`ConcreteFailure(o, a, b)`:",101],[13,"GenericBoundFailure","","`GenericBoundFailure(p, s, a, bs)",101],[13,"SubSupConflict","","`SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:",101],[13,"SupSupConflict","","`SupSupConflict(v, origin1, r1, origin2, r2)`:",101],[13,"ProcessedErrors","","For subsets of `ConcreteFailure` and `SubSupConflict`, we can derive\nmore specific errors message by suggesting to the user where they\nshould put a lifetime. In those cases we process and put those errors\ninto `ProcessedErrors` before we do any reporting.",101],[3,"SameRegions","","SameRegions is used to group regions that we think are the same and would\nlike to indicate so to the user.\nFor example, the following function\n```\nstruct Foo { bar: int }\nfn foo2<'a, 'b>(x: &'a Foo) -> &'b int {\n   &x.bar\n}\n```\nwould report an error because we expect 'a and 'b to match, and so we group\n'a and 'b together inside a SameRegions struct"],[12,"scope_id","","",102],[12,"regions","","",102],[6,"CombineMap","",""],[3,"RegionVarBindings","",""],[3,"RegionSnapshot","",""],[4,"VarValue","",""],[13,"NoValue","","",107],[13,"Value","","",107],[13,"ErrorValue","","",107],[0,"resolve","rustc_typeck::middle::infer",""],[3,"OpportunisticTypeResolver","rustc_typeck::middle::infer::resolve","The opportunistic type resolver can be used at any time. It simply replaces\ntype variables that have been unified with the things they have\nbeen unified with (similar to `shallow_resolve`, but deep). This is\nuseful for printing messages etc but also required at various\npoints for correctness."],[5,"fully_resolve","","Full type resolution replaces all type and region variables with\ntheir concrete results. If any variable cannot be replaced (never unified, etc)\nthen an `Err` result is returned."],[0,"sub","rustc_typeck::middle::infer",""],[3,"Sub","rustc_typeck::middle::infer::sub","\"Greatest lower bound\" (common subtype)"],[5,"Sub","",""],[0,"type_variable","rustc_typeck::middle::infer",""],[3,"TypeVariableTable","rustc_typeck::middle::infer::type_variable",""],[3,"Snapshot","",""],[4,"RelationDir","",""],[13,"SubtypeOf","","",113],[13,"SupertypeOf","","",113],[13,"EqTo","","",113],[13,"BiTo","","",113],[0,"unify","rustc_typeck::middle::infer",""],[8,"UnifyKey","rustc_typeck::middle::infer::unify","This trait is implemented by any type that can serve as a type\nvariable. We call such variables *unification keys*. For example,\nthis trait is implemented by `IntVid`, which represents integral\nvariables."],[16,"Value","rustc_typeck::middle::infer::unify::UnifyKey",""],[10,"index","rustc_typeck::middle::infer::unify","",394],[10,"from_index","","",394],[10,"unification_table","","",394],[10,"tag","","",394],[8,"UnifyValue","","Trait for valid types that a type variable can be set to. Note that\nthis is typically not the end type that the value will take on, but\nrather an `Option` wrapper (where `None` represents a variable\nwhose value is not yet set)."],[4,"VarValue","","Value of a unification key. We implement Tarjan's union-find\nalgorithm: when two keys are unified, one of them is converted\ninto a \"redirect\" pointing at the other. These redirects form a\nDAG: the roots of the DAG (nodes that are not redirected) are each\nassociated with a value of type `V` and a rank. The rank is used\nto keep the DAG relatively balanced, which helps keep the running\ntime of the algorithm under control. For more information, see\n<http://en.wikipedia.org/wiki/Disjoint-set_data_structure>."],[13,"Redirect","","",116],[13,"Root","","",116],[3,"UnificationTable","","Table of unification keys and their values."],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes\nmade during the snapshot may either be *committed* or *rolled back*."],[3,"Node","","Internal type used to represent the result of a `get()` operation.\nConveys the current root and value of the key."],[12,"key","","",395],[12,"value","","",395],[12,"rank","","",395],[3,"Delegate","",""],[8,"SimplyUnifiable","","Indicates a type that does not have any kind of subtyping\nrelationship."],[10,"to_type","","",396],[10,"to_type_err","","",396],[5,"err","",""],[8,"InferCtxtMethodsForSimplyUnifiableTypes","",""],[10,"simple_vars","","",397],[10,"simple_var_t","","",397],[10,"probe_var","","",397],[6,"Bound","rustc_typeck::middle::infer",""],[6,"cres","",""],[6,"ures","",""],[6,"fres","",""],[3,"InferCtxt","",""],[12,"tcx","","",89],[6,"SkolemizationMap","",""],[4,"TypeOrigin","","Why did we require that the two types be related?"],[13,"Misc","","",123],[13,"MethodCompatCheck","","",123],[13,"ExprAssignable","","",123],[13,"RelateTraitRefs","","",123],[13,"RelateSelfType","","",123],[13,"RelateOutputImplTypes","","",123],[13,"MatchExpressionArm","","",123],[13,"IfExpression","","",123],[13,"IfExpressionWithNoElse","","",123],[13,"RangeExpression","","",123],[13,"EquatePredicate","","",123],[4,"ValuePairs","","See `error_reporting.rs` for more details"],[13,"Types","","",124],[13,"TraitRefs","","",124],[13,"PolyTraitRefs","","",124],[3,"TypeTrace","","The trace designates the path through inference that we took to\nencounter an error or subtyping constraint."],[4,"SubregionOrigin","","The origin of a `r1 <= r2` constraint."],[13,"Subtype","","",126],[13,"InfStackClosure","","",126],[13,"InvokeClosure","","",126],[13,"DerefPointer","","",126],[13,"FreeVariable","","",126],[13,"IndexSlice","","",126],[13,"RelateObjectBound","","",126],[13,"RelateParamBound","","",126],[13,"RelateRegionParamBound","","",126],[13,"RelateDefaultParamBound","","",126],[13,"Reborrow","","",126],[13,"ReborrowUpvar","","",126],[13,"ReferenceOutlivesReferent","","",126],[13,"ExprTypeIsNotInScope","","",126],[13,"BindingTypeIsNotValidAtDecl","","",126],[13,"CallRcvr","","",126],[13,"CallArg","","",126],[13,"CallReturn","","",126],[13,"Operand","","",126],[13,"AddrOf","","",126],[13,"AutoBorrow","","",126],[13,"SafeDestructor","","",126],[4,"LateBoundRegionConversionTime","","Times when we replace late-bound regions with variables:"],[13,"FnCall","","when a fn is called",127],[13,"HigherRankedType","","when two higher-ranked types are compared",127],[13,"AssocTypeProjection","","when projecting an associated type",127],[4,"RegionVariableOrigin","","Reasons to create a region inference variable"],[13,"MiscVariable","","",128],[13,"PatternRegion","","",128],[13,"AddrOfRegion","","",128],[13,"Autoref","","",128],[13,"Coercion","","",128],[13,"EarlyBoundRegion","","",128],[13,"LateBoundRegion","","",128],[13,"UpvarRegion","","",128],[13,"BoundRegionInCoherence","","",128],[4,"fixup_err","",""],[13,"unresolved_int_ty","","",129],[13,"unresolved_float_ty","","",129],[13,"unresolved_ty","","",129],[5,"fixup_err_to_string","",""],[5,"new_infer_ctxt","",""],[5,"common_supertype","","Computes the least upper-bound of `a` and `b`. If this is not possible, reports an error and\nreturns ty::err."],[5,"mk_subty","",""],[5,"can_mk_subty","",""],[5,"can_mk_eqty","",""],[5,"mk_subr","",""],[5,"mk_eqty","",""],[5,"mk_sub_poly_trait_refs","",""],[5,"uok","",""],[3,"CombinedSnapshot","",""],[4,"IntVarValue","",""],[13,"IntType","","",120],[13,"UintType","","",120],[3,"TypeFreshener","",""],[4,"GenericKind","",""],[13,"Param","","",97],[13,"Projection","","",97],[0,"lang_items","rustc_typeck::middle",""],[4,"LangItem","rustc_typeck::middle::lang_items",""],[13,"SendTraitLangItem","","",131],[13,"SizedTraitLangItem","","",131],[13,"CopyTraitLangItem","","",131],[13,"SyncTraitLangItem","","",131],[13,"DropTraitLangItem","","",131],[13,"AddTraitLangItem","","",131],[13,"SubTraitLangItem","","",131],[13,"MulTraitLangItem","","",131],[13,"DivTraitLangItem","","",131],[13,"RemTraitLangItem","","",131],[13,"NegTraitLangItem","","",131],[13,"NotTraitLangItem","","",131],[13,"BitXorTraitLangItem","","",131],[13,"BitAndTraitLangItem","","",131],[13,"BitOrTraitLangItem","","",131],[13,"ShlTraitLangItem","","",131],[13,"ShrTraitLangItem","","",131],[13,"IndexTraitLangItem","","",131],[13,"IndexMutTraitLangItem","","",131],[13,"RangeStructLangItem","","",131],[13,"RangeFromStructLangItem","","",131],[13,"RangeToStructLangItem","","",131],[13,"RangeFullStructLangItem","","",131],[13,"UnsafeCellTypeLangItem","","",131],[13,"DerefTraitLangItem","","",131],[13,"DerefMutTraitLangItem","","",131],[13,"FnTraitLangItem","","",131],[13,"FnMutTraitLangItem","","",131],[13,"FnOnceTraitLangItem","","",131],[13,"EqTraitLangItem","","",131],[13,"OrdTraitLangItem","","",131],[13,"StrEqFnLangItem","","",131],[13,"PanicFnLangItem","","",131],[13,"PanicBoundsCheckFnLangItem","","",131],[13,"PanicFmtLangItem","","",131],[13,"ExchangeMallocFnLangItem","","",131],[13,"ExchangeFreeFnLangItem","","",131],[13,"StrDupUniqFnLangItem","","",131],[13,"StartFnLangItem","","",131],[13,"TyDescStructLangItem","","",131],[13,"OpaqueStructLangItem","","",131],[13,"EhPersonalityLangItem","","",131],[13,"ExchangeHeapLangItem","","",131],[13,"OwnedBoxLangItem","","",131],[13,"PhantomFnItem","","",131],[13,"PhantomDataItem","","",131],[13,"CovariantTypeItem","","",131],[13,"ContravariantTypeItem","","",131],[13,"InvariantTypeItem","","",131],[13,"CovariantLifetimeItem","","",131],[13,"ContravariantLifetimeItem","","",131],[13,"InvariantLifetimeItem","","",131],[13,"NoCopyItem","","",131],[13,"ManagedItem","","",131],[13,"NonZeroItem","","",131],[13,"StackExhaustedLangItem","","",131],[13,"DebugTraitLangItem","","",131],[3,"LanguageItems","",""],[12,"items","","",132],[12,"missing","","",132],[5,"extract","",""],[5,"collect_language_items","",""],[0,"liveness","rustc_typeck::middle","A classic liveness analysis based on dataflow over the AST.  Computes,\nfor each local variable in a function, whether that variable is live\nat a given point.  Program execution points are identified by their\nid."],[5,"check_crate","rustc_typeck::middle::liveness",""],[0,"mem_categorization","rustc_typeck::middle","# Categorization"],[4,"categorization","rustc_typeck::middle::mem_categorization",""],[13,"cat_rvalue","","",142],[13,"cat_static_item","","",142],[13,"cat_upvar","","",142],[13,"cat_local","","",142],[13,"cat_deref","","",142],[13,"cat_interior","","",142],[13,"cat_downcast","","",142],[3,"Upvar","",""],[12,"id","","",143],[12,"kind","","",143],[4,"PointerKind","",""],[13,"Unique","","`Box<T>`",144],[13,"BorrowedPtr","","`&T`",144],[13,"UnsafePtr","","`*T`",144],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",144],[4,"InteriorKind","",""],[13,"InteriorField","","",145],[13,"InteriorElement","","",145],[4,"FieldName","",""],[13,"NamedField","","",146],[13,"PositionalField","","",146],[4,"InteriorOffsetKind","",""],[13,"Index","","",147],[13,"Pattern","","",147],[4,"ElementKind","",""],[13,"VecElement","","",148],[13,"OtherElement","","",148],[4,"MutabilityCategory","",""],[13,"McImmutable","","",149],[13,"McDeclared","","",149],[13,"McInherited","","",149],[4,"Note","",""],[13,"NoteClosureEnv","","",150],[13,"NoteUpvarRef","","",150],[13,"NoteNone","","",150],[3,"cmt_","",""],[12,"id","","",151],[12,"span","","",151],[12,"cat","","",151],[12,"mutbl","","",151],[12,"ty","","",151],[12,"note","","",151],[6,"cmt","",""],[4,"deref_kind","",""],[13,"deref_ptr","","",398],[13,"deref_interior","","",398],[8,"ast_node","",""],[10,"id","","",399],[10,"span","","",399],[3,"MemCategorizationContext","",""],[6,"McResult","",""],[8,"Typer","","The `Typer` trait provides the interface for the mem-categorization\nmodule to the results of the type check. It can be used to query\nthe type assigned to an expression node, to inquire after adjustments,\nand so on."],[10,"node_ty","","",400],[10,"expr_ty_adjusted","","",400],[10,"type_moves_by_default","","",400],[10,"node_method_ty","","",400],[10,"node_method_origin","","",400],[10,"adjustments","","",400],[10,"is_method_call","","",400],[10,"temporary_scope","","",400],[10,"upvar_capture","","",400],[4,"InteriorSafety","",""],[13,"InteriorUnsafe","","",401],[13,"InteriorSafe","","",401],[4,"AliasableReason","",""],[13,"AliasableBorrowed","","",402],[13,"AliasableClosure","","",402],[13,"AliasableOther","","",402],[13,"AliasableStatic","","",402],[13,"AliasableStaticMut","","",402],[5,"ptr_sigil","",""],[0,"pat_util","rustc_typeck::middle",""],[6,"PatIdMap","rustc_typeck::middle::pat_util",""],[5,"pat_id_map","",""],[5,"pat_is_refutable","",""],[5,"pat_is_variant_or_struct","",""],[5,"pat_is_const","",""],[5,"pat_is_binding","",""],[5,"pat_is_binding_or_wild","",""],[5,"pat_bindings","","Call `it` on every \"binding\" in a pattern, e.g., on `a` in\n`match foo() { Some(a) => (), None => () }`"],[5,"pat_contains_bindings","","Checks if the pattern contains any patterns that bind something to\nan ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`."],[5,"pat_contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to\nan ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,"],[5,"simple_identifier","",""],[5,"def_to_path","",""],[0,"privacy","rustc_typeck::middle","A pass that checks to make sure private fields and methods aren't used\noutside their scopes. This pass will also generate a set of exported items\nwhich are available for use externally when compiled as a library."],[6,"ExportedItems","rustc_typeck::middle::privacy",""],[6,"ExternalExports","",""],[6,"PublicItems","",""],[4,"LastPrivate","",""],[13,"LastMod","","",156],[13,"LastImport","","",156],[12,"value_priv","rustc_typeck::middle::privacy::LastPrivate","",156],[12,"value_used","","",156],[12,"type_priv","","",156],[12,"type_used","","",156],[4,"PrivateDep","rustc_typeck::middle::privacy",""],[13,"AllPublic","","",157],[13,"DependsOn","","",157],[4,"ImportUse","",""],[13,"Unused","","",158],[13,"Used","","",158],[0,"reachable","rustc_typeck::middle",""],[5,"find_reachable","rustc_typeck::middle::reachable",""],[0,"region","rustc_typeck::middle","This file actually contains two passes related to regions.  The first\npass builds up the `scope_map`, which describes the parent links in\nthe region hierarchy.  The second pass infers which types must be\nregion parameterized."],[4,"CodeExtent","rustc_typeck::middle::region","CodeExtent represents a statically-describable extent that can be\nused to bound the lifetime/region for values."],[13,"Misc","","",18],[13,"DestructionScope","","",18],[13,"Remainder","","",18],[3,"DestructionScopeData","","extent of destructors for temporaries of node-id"],[12,"node_id","","",19],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced\nby `block.stmts[first_statement_index]`. Such subscopes represent\na suffix of the block. Note that each subscope does not include\nthe initializer expression, if any, for the statement indexed by\n`first_statement_index`."],[12,"block","","",160],[12,"first_statement_index","","",160],[3,"RegionMaps","","The region maps encode information about region relationships."],[3,"Context","",""],[5,"resolve_crate","",""],[5,"resolve_inlined_item","",""],[0,"recursion_limit","rustc_typeck::middle",""],[5,"update_recursion_limit","rustc_typeck::middle::recursion_limit",""],[0,"resolve_lifetime","rustc_typeck::middle","Name resolution for lifetimes."],[4,"DefRegion","rustc_typeck::middle::resolve_lifetime",""],[13,"DefStaticRegion","","",167],[13,"DefEarlyBoundRegion","","",167],[13,"DefLateBoundRegion","","",167],[13,"DefFreeRegion","","",167],[6,"NamedRegionMap","",""],[5,"krate","",""],[5,"early_bound_lifetimes","",""],[0,"stability","rustc_typeck::middle","A pass that annotates every item and method with its stability level,\npropagating default levels lexically from parent to children ast nodes."],[3,"Index","rustc_typeck::middle::stability","A stability index, giving the stability level for items and methods."],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled\nfeatures and possibly prints errors. Returns a list of all\nfeatures used."],[5,"check_item","","Helper for discovering nodes to check for stability"],[5,"check_expr","","Helper for discovering nodes to check for stability"],[5,"check_path","",""],[5,"check_pat","",""],[5,"lookup","","Lookup the stability for a node, loading external crate\nmetadata as necessary."],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that\nwere expected to be library features), and the list of features used from\nlibraries, identify activated features that don't exist and error about them."],[0,"subst","rustc_typeck::middle",""],[3,"Substs","rustc_typeck::middle::subst","A substitution mapping type/region parameters to new values. We\nidentify each in-scope parameter by an *index* and a *parameter\nspace* (which indices where the parameter is defined; see\n`ParamSpace`)."],[12,"types","","",173],[12,"regions","","",173],[4,"RegionSubsts","","Represents the values to use when substituting lifetime parameters.\nIf the value is `ErasedRegions`, then this subst is occurring during\ntrans, and all region parameters will be replaced with `ty::ReStatic`."],[13,"ErasedRegions","","",174],[13,"NonerasedRegions","","",174],[4,"ParamSpace","",""],[13,"TypeSpace","","",175],[13,"SelfSpace","","",175],[13,"FnSpace","","",175],[3,"VecPerParamSpace","","Vector of things sorted by param space. Used to keep\nthe set of things declared on the type, self, or method\ndistinct."],[3,"SeparateVecsPerParamSpace","","The `split` function converts one `VecPerParamSpace` into this\n`SeparateVecsPerParamSpace` structure."],[12,"types","","",403],[12,"selfs","","",403],[12,"fns","","",403],[3,"EnumeratedItems","",""],[8,"Subst","",""],[10,"subst","","",404],[10,"subst_spanned","","",404],[0,"traits","rustc_typeck::middle","Trait Resolution. See the Book for more."],[3,"Obligation","rustc_typeck::middle::traits","An `Obligation` represents some trait reference (e.g. `int:Eq`) for\nwhich the vtable must be found.  The process of finding a vtable is\ncalled \"resolving\" the `Obligation`. This process consists of\neither identifying an `impl` (e.g., `impl Eq for int`) that\nprovides the required vtable, or else finding a bound that is in\nscope. The eventual result is usually a `Selection` (defined below)."],[12,"cause","","",199],[12,"recursion_depth","","",199],[12,"predicate","","",199],[6,"PredicateObligation","",""],[6,"TraitObligation","",""],[3,"ObligationCause","","Why did we incur this obligation? Used for error reporting."],[12,"span","","",206],[12,"body_id","","",206],[12,"code","","",206],[4,"ObligationCauseCode","",""],[13,"MiscObligation","","Not well classified or should be obvious from span.",207],[13,"ItemObligation","","In an impl of trait X for type Y, type Y must\nalso implement all supertraits of X.",207],[13,"ObjectCastObligation","","Obligation incurred due to an object cast.",207],[13,"AssignmentLhsSized","","Various cases where expressions must be sized/copy/etc:",207],[13,"StructInitializerSized","","",207],[13,"VariableType","","",207],[13,"ReturnType","","",207],[13,"RepeatVec","","",207],[13,"ClosureCapture","","",207],[13,"FieldSized","","",207],[13,"ObjectSized","","",207],[13,"SharedStatic","","",207],[13,"BuiltinDerivedObligation","","",207],[13,"ImplDerivedObligation","","",207],[13,"CompareImplMethodObligation","","",207],[3,"DerivedObligationCause","",""],[6,"Obligations","",""],[6,"PredicateObligations","",""],[6,"TraitObligations","",""],[6,"Selection","",""],[4,"SelectionError","",""],[13,"Unimplemented","","",203],[13,"Overflow","","",203],[13,"OutputTypeParameterMismatch","","",203],[3,"FulfillmentError","",""],[12,"obligation","","",204],[12,"code","","",204],[4,"FulfillmentErrorCode","",""],[13,"CodeSelectionError","","",205],[13,"CodeProjectionError","","",205],[13,"CodeAmbiguity","","",205],[6,"SelectionResult","",""],[4,"Vtable","","Given the successful resolution of an obligation, the `Vtable`\nindicates where the vtable comes from. Note that while we call this\na \"vtable\", it does not necessarily indicate dynamic dispatch at\nruntime. `Vtable` instances just tell the compiler where to find\nmethods, but in generic code those methods are typically statically\ndispatched -- only when an object is constructed is a `Vtable`\ninstance reified into an actual vtable."],[13,"VtableImpl","","Vtable identifying a particular impl.",200],[13,"VtableDefaultImpl","","Vtable for default trait implementations\nThis carries the information and nested obligations with regards\nto a default implementation for a trait `Trait`. The nested obligations\nensure the trait implementation holds for all the constituent types.",200],[13,"VtableParam","","Successful resolution to an obligation provided by the caller\nfor some type parameter. The `Vec<N>` represents the\nobligations incurred from normalizing the where-clause (if\nany).",200],[13,"VtableObject","","Virtual calls through an object",200],[13,"VtableBuiltin","","Successful resolution for a builtin trait.",200],[13,"VtableClosure","","Vtable automatically generated for a closure. The def ID is the ID\nof the closure expression. This is a `VtableImpl` in spirit, but the\nimpl is generated by the compiler and does not appear in the source.",200],[13,"VtableFnPointer","","Same as above, but for a fn pointer type with the given signature.",200],[3,"VtableImplData","","Identifies a particular impl in the source, along with a set of\nsubstitutions from the impl's type/lifetime parameters. The\n`nested` vector corresponds to the nested obligations attached to\nthe impl's type parameters."],[12,"impl_def_id","","",197],[12,"substs","","",197],[12,"nested","","",197],[3,"VtableDefaultImplData","",""],[12,"trait_def_id","","",202],[12,"nested","","",202],[3,"VtableBuiltinData","",""],[12,"nested","","",201],[3,"VtableObjectData","","A vtable for some object-safe trait `Foo` automatically derived\nfor the object type `Foo`."],[12,"object_ty","","the object type `Foo`.",198],[12,"upcast_trait_ref","","`Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.",198],[5,"predicates_for_generics","","Creates predicate obligations from the generic bounds."],[5,"evaluate_builtin_bound","","Determines whether the type `ty` is known to meet `bound` and\nreturns true if so. Returns false if `ty` either does not meet\n`bound` or is not known to meet bound (note that this is\nconservative towards *no impl*, which is the opposite of the\n`evaluate` methods)."],[5,"type_known_to_meet_builtin_bound","",""],[5,"normalize_param_env_or_error","","Normalizes the parameter environment, reporting errors if they occur."],[5,"fully_normalize","",""],[5,"normalize","","Normalizes any associated type projections in `value`, replacing\nthem with a fully resolved type where possible. The return value\ncombines the normalized result and any additional obligations that\nwere incurred as result."],[4,"ObjectSafetyViolation","",""],[13,"SizedSelf","","Self : Sized declared on the trait",187],[13,"SupertraitSelf","","Supertrait reference references `Self` an in illegal location\n(e.g. `trait Foo : Bar<Self>`)",187],[13,"Method","","Method has something illegal",187],[5,"report_fulfillment_errors","",""],[5,"suggest_new_overflow_limit","",""],[5,"overlapping_impls","","True if there exist types that satisfy both of the two given impls."],[5,"get_vtable_index_of_object_method","","Given an object of type `object_trait_ref`, returns the index of\nthe method `n_method` found in the trait `trait_def_id` (which\nshould be a supertrait of `object_trait_ref`) within the vtable\nfor `object_trait_ref`."],[5,"transitive_bounds","",""],[4,"MethodMatchResult","",""],[13,"MethodMatched","","",194],[13,"MethodAmbiguous","","",194],[13,"MethodDidNotMatch","","",194],[5,"is_object_safe","",""],[3,"SelectionContext","",""],[3,"FulfillmentContext","","The fulfillment context is used to drive trait resolution.  It\nconsists of a list of obligations that must be (eventually)\nsatisfied. The job is to track which are satisfied, which yielded\nerrors, and which are still pending. At any point, users can call\n`select_where_possible`, and the fulfilment context will try to do\nselection, retaining only those obligations that remain\nambiguous. This may be helpful in pushing type inference\nalong. Once all type inference constraints have been generated, the\nmethod `select_all_or_error` can be used to report any remaining\nambiguous cases as errors."],[4,"OrphanCheckErr","",""],[13,"NoLocalInputType","","",405],[13,"UncoveredTy","","",405],[3,"MismatchedProjectionTypes","",""],[12,"err","","",181],[5,"supertraits","",""],[3,"RegionObligation","",""],[12,"sub_region","","",179],[12,"sup_type","","",179],[12,"cause","","",179],[5,"upcast","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait."],[5,"trait_ref_for_builtin_bound","",""],[4,"MethodMatchedData","",""],[13,"PreciseMethodMatch","","",189],[13,"CoerciveMethodMatch","","",189],[5,"object_safety_violations","",""],[6,"Supertraits","",""],[5,"elaborate_predicates","",""],[5,"orphan_check","","Checks the coherence orphan rules. `impl_def_id` should be the\ndef-id of a trait impl. To pass, either the trait must be local, or else\ntwo conditions must be satisfied:"],[3,"Normalized","",""],[12,"value","","",184],[12,"obligations","","",184],[4,"MethodViolationCode","","Reasons a method might not be object-safe."],[13,"StaticMethod","","e.g., `fn foo()`",186],[13,"ReferencesSelf","","e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`",186],[13,"Generic","","e.g., `fn foo<A>()`",186],[3,"SelectionCache","",""],[0,"ty","rustc_typeck::middle",""],[6,"Disr","rustc_typeck::middle::ty",""],[17,"INITIAL_DISCRIMINANT_VALUE","",""],[3,"CrateAnalysis","","The complete set of all analyses described in this module. This is\nproduced by the driver and fed to trans and later passes."],[12,"export_map","","",406],[12,"exported_items","","",406],[12,"public_items","","",406],[12,"ty_cx","","",406],[12,"reachable","","",406],[12,"name","","",406],[12,"glob_map","","",406],[3,"field","",""],[12,"name","","",209],[12,"mt","","",209],[4,"ImplOrTraitItemContainer","",""],[13,"TraitContainer","","",210],[13,"ImplContainer","","",210],[4,"ImplOrTraitItem","",""],[13,"MethodTraitItem","","",211],[13,"TypeTraitItem","","",211],[4,"ImplOrTraitItemId","",""],[13,"MethodTraitItemId","","",212],[13,"TypeTraitItemId","","",212],[3,"Method","",""],[12,"name","","",213],[12,"generics","","",213],[12,"predicates","","",213],[12,"fty","","",213],[12,"explicit_self","","",213],[12,"vis","","",213],[12,"def_id","","",213],[12,"container","","",213],[12,"provided_source","","",213],[3,"AssociatedType","",""],[12,"name","","",214],[12,"vis","","",214],[12,"def_id","","",214],[12,"container","","",214],[3,"mt","",""],[12,"ty","","",215],[12,"mutbl","","",215],[3,"field_ty","",""],[12,"name","","",216],[12,"id","","",216],[12,"vis","","",216],[12,"origin","","",216],[3,"creader_cache_key","",""],[12,"cnum","","",217],[12,"pos","","",217],[12,"len","","",217],[3,"ItemVariances","",""],[12,"types","","",218],[12,"regions","","",218],[4,"Variance","",""],[13,"Covariant","","",219],[13,"Invariant","","",219],[13,"Contravariant","","",219],[13,"Bivariant","","",219],[4,"AutoAdjustment","",""],[13,"AdjustReifyFnPointer","","",220],[13,"AdjustDerefRef","","",220],[4,"UnsizeKind","",""],[13,"UnsizeLength","","",221],[13,"UnsizeStruct","","",221],[13,"UnsizeVtable","","",221],[3,"AutoDerefRef","",""],[12,"autoderefs","","",222],[12,"autoref","","",222],[4,"AutoRef","",""],[13,"AutoPtr","","Convert from T to &T\nThe third field allows us to wrap other AutoRef adjustments.",223],[13,"AutoUnsize","","Convert [T, ..n] to [T] (or similar, depending on the kind)",223],[13,"AutoUnsizeUniq","","Convert Box<[T, ..n]> to Box<[T]> or something similar in a Box.\nWith DST and Box a library type, this should be replaced by UnsizeStruct.",223],[13,"AutoUnsafe","","Convert from T to *T\nValue to thin pointer\nThe second field allows us to wrap other AutoRef adjustments.",223],[5,"adjusted_object_region","",""],[5,"adjust_is_object","",""],[5,"type_of_adjust","",""],[3,"param_index","",""],[12,"space","","",224],[12,"index","","",224],[4,"MethodOrigin","",""],[13,"MethodStatic","","",25],[13,"MethodStaticClosure","","",25],[13,"MethodTypeParam","","",25],[13,"MethodTraitObject","","",25],[3,"MethodParam","",""],[12,"trait_ref","","",225],[12,"method_num","","",225],[12,"impl_def_id","","The impl for the trait from which the method comes. This\nshould only be used for certain linting/heuristic purposes\nsince there is no guarantee that this is Some in every\nsituation that it could/should be.",225],[3,"MethodObject","",""],[12,"trait_ref","","",226],[12,"object_trait_id","","",226],[12,"method_num","","",226],[12,"vtable_index","","",226],[3,"MethodCallee","",""],[12,"origin","","",227],[12,"ty","","",227],[12,"substs","","",227],[3,"MethodCall","","With method calls, we store some extra information in\nside tables (i.e method_map). We use\nMethodCall as a key to index into these tables instead of\njust directly using the expression's NodeId. The reason\nfor this being that we may apply adjustments (coercions)\nwith the resulting expression also needing to use the\nside tables. The problem with this is that we don't\nassign a separate NodeId to this new expression\nand so it would clash with the base expression if both\nneeded to add to the side tables. Thus to disambiguate\nwe also keep track of whether there's an adjustment in\nour key."],[12,"expr_id","","",228],[12,"adjustment","","",228],[4,"ExprAdjustment","",""],[13,"NoAdjustment","","",229],[13,"AutoDeref","","",229],[13,"AutoObject","","",229],[6,"MethodMap","",""],[6,"vtable_param_res","",""],[6,"vtable_res","",""],[4,"vtable_origin","",""],[13,"vtable_static","","",230],[13,"vtable_param","","",230],[13,"vtable_closure","","",230],[13,"vtable_error","","",230],[6,"ObjectCastMap","",""],[3,"TransmuteRestriction","","A restriction that certain types must be the same size. The use of\n`transmute` gives rise to these restrictions. These generally\ncannot be checked until trans; therefore, each call to `transmute`\nwill push one or more such restriction into the\n`transmute_restrictions` vector during `intrinsicck`. They are\nthen checked during `trans` by the fn `check_intrinsics`."],[12,"span","","The span whence the restriction comes.",80],[12,"original_from","","The type being transmuted from.",80],[12,"original_to","","The type being transmuted to.",80],[12,"substituted_from","","The type being transmuted from, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",80],[12,"substituted_to","","The type being transmuted to, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",80],[12,"id","","NodeId of the transmute intrinsic.",80],[3,"CtxtArenas","","Internal storage"],[3,"CommonTypes","",""],[12,"bool","","",407],[12,"char","","",407],[12,"int","","",407],[12,"i8","","",407],[12,"i16","","",407],[12,"i32","","",407],[12,"i64","","",407],[12,"uint","","",407],[12,"u8","","",407],[12,"u16","","",407],[12,"u32","","",407],[12,"u64","","",407],[12,"f32","","",407],[12,"f64","","",407],[12,"err","","",407],[3,"ctxt","","The data structure to keep track of all the information that typechecker\ngenerates so that so that it can be reused and doesn't have to be redone\nlater on."],[12,"types","","Common types, pre-interned for your convenience.",233],[12,"sess","","",233],[12,"def_map","","",233],[12,"named_region_map","","",233],[12,"region_maps","","",233],[12,"node_types","","Stores the types for various nodes in the AST.  Note that this table\nis not guaranteed to be populated until after typeck.  See\ntypeck::check::fn_ctxt for details.",233],[12,"item_substs","","Stores the type parameters which were substituted to obtain the type\nof this node.  This only applies to nodes that refer to entities\nparameterized by type parameters, such as generic fns, types, or\nother items.",233],[12,"impl_or_trait_items","","Maps from a trait item to the trait item \"descriptor\"",233],[12,"trait_item_def_ids","","Maps from a trait def-id to a list of the def-ids of its trait items",233],[12,"trait_items_cache","","A cache for the trait_items() routine",233],[12,"impl_trait_cache","","",233],[12,"impl_trait_refs","","",233],[12,"trait_defs","","",233],[12,"predicates","","Maps from the def-id of an item (trait/struct/enum/fn) to its\nassociated predicates.",233],[12,"super_predicates","","Maps from the def-id of a trait to the list of\nsuper-predicates. This is a subset of the full list of\npredicates. We store these in a separate map because we must\nevaluate them even during type conversion, often before the\nfull predicates are available (note that supertraits have\nadditional acyclicity requirements).",233],[12,"object_cast_map","","Maps from node-id of a trait object cast (like `foo as\nBox<Trait>`) to the trait reference.",233],[12,"map","","",233],[12,"intrinsic_defs","","",233],[12,"freevars","","",233],[12,"tcache","","",233],[12,"rcache","","",233],[12,"short_names_cache","","",233],[12,"tc_cache","","",233],[12,"ast_ty_to_ty_cache","","",233],[12,"enum_var_cache","","",233],[12,"ty_param_defs","","",233],[12,"adjustments","","",233],[12,"normalized_cache","","",233],[12,"lang_items","","",233],[12,"provided_method_sources","","A mapping of fake provided method def_ids to the default implementation",233],[12,"struct_fields","","",233],[12,"item_variance_map","","Maps from def-id of a type or region parameter to its\n(inferred) variance.",233],[12,"variance_computed","","True if the variance has been computed yet; false otherwise.",233],[12,"destructor_for_type","","A mapping from the def ID of an enum or struct type to the def ID\nof the method that implements its destructor. If the type is not\npresent in this map, it does not have a destructor. This map is\npopulated during the coherence phase of typechecking.",233],[12,"destructors","","A method will be in this list if and only if it is a destructor.",233],[12,"trait_impls","","Maps a trait onto a list of impls of that trait.",233],[12,"inherent_impls","","Maps a DefId of a type to a list of its inherent impls.\nContains implementations of methods that are inherent to a type.\nMethods in these implementations don't need to be exported.",233],[12,"impl_items","","Maps a DefId of an impl to a list of its items.\nNote that this contains all of the impls that we know about,\nincluding ones in other crates. It's not clear that this is the best\nway to do it.",233],[12,"used_unsafe","","Set of used unsafe nodes (functions or blocks). Unsafe nodes not\npresent in this set can be warned about.",233],[12,"used_mut_nodes","","Set of nodes which mark locals as mutable which end up getting used at\nsome point. Local variable definitions not in this set can be warned\nabout.",233],[12,"populated_external_types","","The set of external nominal types whose implementations have been read.\nThis is used for lazy resolution of methods.",233],[12,"populated_external_traits","","The set of external traits whose implementations have been read. This\nis used for lazy resolution of traits.",233],[12,"upvar_capture_map","","Borrows",233],[12,"extern_const_statics","","These two caches are used by const_eval when decoding external statics\nand variants that are found.",233],[12,"extern_const_variants","","",233],[12,"method_map","","",233],[12,"dependency_formats","","",233],[12,"closure_kinds","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",233],[12,"closure_tys","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",233],[12,"node_lint_levels","","",233],[12,"transmute_restrictions","","The types that must be asserted to be the same size for `transmute`\nto be valid. We gather up these restrictions in the intrinsicck pass\nand check them in trans.",233],[12,"stability","","Maps any item's def-id to its stability index.",233],[12,"associated_types","","Maps def IDs to true if and only if they're associated types.",233],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that do not have to do with the parameters in scope.",233],[12,"repr_hint_cache","","Caches the representation hints for struct definitions.",233],[12,"type_impls_copy_cache","","Caches whether types are known to impl Copy. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",233],[12,"type_impls_sized_cache","","Caches whether types are known to impl Sized. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",233],[12,"object_safety_cache","","Caches whether traits are object safe",233],[12,"const_qualif_map","","Maps Expr NodeId's to their constant qualification.",233],[3,"TypeFlags","",""],[17,"NO_TYPE_FLAGS","",""],[17,"HAS_PARAMS","",""],[17,"HAS_SELF","",""],[17,"HAS_TY_INFER","",""],[17,"HAS_RE_INFER","",""],[17,"HAS_RE_LATE_BOUND","",""],[17,"HAS_REGIONS","",""],[17,"HAS_TY_ERR","",""],[17,"HAS_PROJECTION","",""],[17,"NEEDS_SUBST","",""],[3,"TyS","",""],[12,"sty","","",234],[12,"flags","","",234],[6,"Ty","",""],[3,"InternedTy","","An entry in the type interner."],[5,"type_has_params","",""],[5,"type_has_self","",""],[5,"type_has_ty_infer","",""],[5,"type_needs_infer","",""],[5,"type_has_projection","",""],[5,"type_has_late_bound_regions","",""],[5,"type_has_escaping_regions","","An \"escaping region\" is a bound region whose binder is not part of `t`."],[5,"type_escapes_depth","",""],[3,"BareFnTy","",""],[12,"unsafety","","",236],[12,"abi","","",236],[12,"sig","","",236],[3,"ClosureTy","",""],[12,"unsafety","","",237],[12,"abi","","",237],[12,"sig","","",237],[4,"FnOutput","",""],[13,"FnConverging","","",238],[13,"FnDiverging","","",238],[6,"PolyFnOutput","",""],[3,"FnSig","","Signature of a function type, which I have arbitrarily\ndecided to use to refer to the input/output types."],[12,"inputs","","",85],[12,"output","","",85],[12,"variadic","","",85],[6,"PolyFnSig","",""],[3,"ParamTy","",""],[12,"space","","",239],[12,"idx","","",239],[12,"name","","",239],[3,"DebruijnIndex","","A [De Bruijn index][dbi] is a standard means of representing\nregions (and perhaps later types) in a higher-ranked setting. In\nparticular, imagine a type like this:"],[12,"depth","","",240],[4,"Region","","Representation of regions:"],[13,"ReEarlyBound","","",16],[13,"ReLateBound","","",16],[13,"ReFree","","When checking a function body, the types of all arguments and so forth\nthat refer to bound region parameters are modified to refer to free\nregion parameters.",16],[13,"ReScope","","A concrete region naming some statically determined extent\n(e.g. an expression or sequence of statements) within the\ncurrent function.",16],[13,"ReStatic","","Static data that has an \"infinite\" lifetime. Top in the region lattice.",16],[13,"ReInfer","","A region variable.  Should not exist after typeck.",16],[13,"ReEmpty","","Empty lifetime is for data that is never accessed.\nBottom in the region lattice. We treat ReEmpty somewhat\nspecially; at least right now, we do not generate instances of\nit during the GLB computations, but rather\ngenerate an error instead. This is to improve error messages.\nThe only way to get an instance of ReEmpty is to have a region\nvariable with no constraints.",16],[3,"UpvarId","","Upvars do not get their own node-id. Instead, we use the pair of\nthe original var id (that is, the root variable that is referenced\nby the upvar) and the id of the closure expression."],[12,"var_id","","",241],[12,"closure_expr_id","","",241],[4,"BorrowKind","",""],[13,"ImmBorrow","","Data must be immutable and is aliasable.",242],[13,"UniqueImmBorrow","","Data must be immutable but not aliasable.  This kind of borrow\ncannot currently be expressed by the user and is used only in\nimplicit closure bindings. It is needed when you the closure\nis borrowing or mutating a mutable referent, e.g.:",242],[13,"MutBorrow","","Data is mutable and not aliasable.",242],[4,"UpvarCapture","","Information describing the capture of an upvar. This is computed\nduring `typeck`, specifically by `regionck`."],[13,"ByValue","","Upvar is captured by value. This is always true when the\nclosure is labeled `move`, but can also be true in other cases\ndepending on inference.",24],[13,"ByRef","","Upvar is captured by reference.",24],[3,"UpvarBorrow","",""],[12,"kind","","The kind of borrow: by-ref upvars have access to shared\nimmutable borrows, which are not part of the normal language\nsyntax.",23],[12,"region","","Region of the resulting reference.",23],[6,"UpvarCaptureMap","",""],[3,"FreeRegion","","A \"free\" region `fr` can be interpreted as \"some region\nat least as big as the scope `fr.scope`\"."],[12,"scope","","",17],[12,"bound_region","","",17],[4,"BoundRegion","",""],[13,"BrAnon","","An anonymous region parameter for a given fn (&T)",20],[13,"BrNamed","","Named region parameters for functions (a in &'a T)",20],[13,"BrFresh","","Fresh bound identifiers created during GLB computations.",20],[13,"BrEnv","","",20],[4,"sty","",""],[13,"ty_bool","","",243],[13,"ty_char","","",243],[13,"ty_int","","",243],[13,"ty_uint","","",243],[13,"ty_float","","",243],[13,"ty_enum","","Substs here, possibly against intuition, *may* contain `ty_param`s.\nThat is, even after substitution it is possible that there are type\nvariables. This happens when the `ty_enum` corresponds to an enum\ndefinition and not a concrete use of it. To get the correct `ty_enum`\nfrom the tcx, use the `NodeId` from the `ast::Ty` and look it up in\nthe `ast_ty_to_ty_cache`. This is probably true for `ty_struct` as\nwell.",243],[13,"ty_uniq","","",243],[13,"ty_str","","",243],[13,"ty_vec","","",243],[13,"ty_ptr","","",243],[13,"ty_rptr","","",243],[13,"ty_bare_fn","","",243],[13,"ty_trait","","",243],[13,"ty_struct","","",243],[13,"ty_closure","","",243],[13,"ty_tup","","",243],[13,"ty_projection","","",243],[13,"ty_param","","",243],[13,"ty_infer","","",243],[13,"ty_err","","",243],[3,"TyTrait","",""],[12,"principal","","",244],[12,"bounds","","",244],[3,"TraitRef","","A complete reference to a trait. These take numerous guises in syntax,\nbut perhaps the most recognizable form is in a where clause:"],[12,"def_id","","",83],[12,"substs","","",83],[6,"PolyTraitRef","",""],[3,"Binder","","Binder is a binder for higher-ranked lifetimes. It is part of the\ncompiler's representation for things like `for<'a> Fn(&'a int)`\n(which would be represented by the type `PolyTraitRef ==\nBinder<TraitRef>`). Note that when we skolemize, instantiate,\nerase, or otherwise \"discharge\" these bound regions, we change the\ntype from `Binder<T>` to just `T` (see\ne.g. `liberate_late_bound_regions`)."],[4,"IntVarValue","",""],[13,"IntType","","",120],[13,"UintType","","",120],[4,"terr_vstore_kind","",""],[13,"terr_vec","","",245],[13,"terr_str","","",245],[13,"terr_fn","","",245],[13,"terr_trait","","",245],[3,"expected_found","",""],[12,"expected","","",246],[12,"found","","",246],[4,"type_err","",""],[13,"terr_mismatch","","",247],[13,"terr_unsafety_mismatch","","",247],[13,"terr_abi_mismatch","","",247],[13,"terr_mutability","","",247],[13,"terr_box_mutability","","",247],[13,"terr_ptr_mutability","","",247],[13,"terr_ref_mutability","","",247],[13,"terr_vec_mutability","","",247],[13,"terr_tuple_size","","",247],[13,"terr_fixed_array_size","","",247],[13,"terr_ty_param_size","","",247],[13,"terr_arg_count","","",247],[13,"terr_regions_does_not_outlive","","",247],[13,"terr_regions_not_same","","",247],[13,"terr_regions_no_overlap","","",247],[13,"terr_regions_insufficiently_polymorphic","","",247],[13,"terr_regions_overly_polymorphic","","",247],[13,"terr_sorts","","",247],[13,"terr_integer_as_char","","",247],[13,"terr_int_mismatch","","",247],[13,"terr_float_mismatch","","",247],[13,"terr_traits","","",247],[13,"terr_builtin_bounds","","",247],[13,"terr_variadic_mismatch","","",247],[13,"terr_cyclic_ty","","",247],[13,"terr_convergence_mismatch","","",247],[13,"terr_projection_name_mismatched","","",247],[13,"terr_projection_bounds_length","","",247],[3,"ParamBounds","","Bounds suitable for a named type parameter like `A` in `fn foo<A>`\nas well as the existential type parameter in an object type."],[12,"region_bounds","","",248],[12,"builtin_bounds","","",248],[12,"trait_bounds","","",248],[12,"projection_bounds","","",248],[3,"ExistentialBounds","","Bounds suitable for an existentially quantified type parameter\nsuch as those that appear in object types or closure types. The\nmajor difference between this case and `ParamBounds` is that\ngeneral purpose trait bounds are omitted and there must be\n*exactly one* region."],[12,"region_bound","","",249],[12,"builtin_bounds","","",249],[12,"projection_bounds","","",249],[6,"BuiltinBounds","",""],[4,"BuiltinBound","",""],[13,"BoundSend","","",250],[13,"BoundSized","","",250],[13,"BoundCopy","","",250],[13,"BoundSync","","",250],[5,"empty_builtin_bounds","",""],[5,"all_builtin_bounds","",""],[5,"region_existential_bound","","An existential bound that does not implement any traits."],[3,"TyVid","",""],[12,"index","","",251],[3,"IntVid","",""],[12,"index","","",119],[3,"FloatVid","",""],[12,"index","","",121],[3,"RegionVid","",""],[12,"index","","",252],[4,"InferTy","",""],[13,"TyVar","","",253],[13,"IntVar","","",253],[13,"FloatVar","","",253],[13,"FreshTy","","A `FreshTy` is one that is generated as a replacement for an\nunbound type variable. This is convenient for caching etc. See\n`middle::infer::freshen` for more details.",253],[13,"FreshIntTy","","",253],[4,"UnconstrainedNumeric","",""],[13,"UnconstrainedFloat","","",254],[13,"UnconstrainedInt","","",254],[13,"Neither","","",254],[4,"InferRegion","",""],[13,"ReVar","","",255],[13,"ReSkolemized","","",255],[4,"ObjectLifetimeDefault","","Default region to use for the bound of objects that are\nsupplied as the value for this type parameter. This is derived\nfrom `T:'a` annotations appearing in the type definition.  If\nthis is `None`, then the default is inherited from the\nsurrounding context. See RFC #599 for details."],[13,"Ambiguous","","Require an explicit annotation. Occurs when multiple\n`T:'a` constraints are found.",256],[13,"Specific","","Use the given region as the default.",256],[3,"TypeParameterDef","",""],[12,"name","","",257],[12,"def_id","","",257],[12,"space","","",257],[12,"index","","",257],[12,"default","","",257],[12,"object_lifetime_default","","",257],[3,"RegionParameterDef","",""],[12,"name","","",258],[12,"def_id","","",258],[12,"space","","",258],[12,"index","","",258],[12,"bounds","","",258],[3,"Generics","","Information about the formal type/lifetime parameters associated\nwith an item or method. Analogous to ast::Generics."],[12,"types","","",259],[12,"regions","","",259],[3,"GenericPredicates","","Bounds on generics."],[12,"predicates","","",260],[4,"Predicate","",""],[13,"Trait","","Corresponds to `where Foo : Bar<A,B,C>`. `Foo` here would be\nthe `Self` type of the trait reference and `A`, `B`, and `C`\nwould be the parameters in the `TypeSpace`.",261],[13,"Equate","","where `T1 == T2`.",261],[13,"RegionOutlives","","where 'a : 'b",261],[13,"TypeOutlives","","where T : 'a",261],[13,"Projection","","where <T as TraitRef>::Name == X, approximately.\nSee `ProjectionPredicate` struct for details.",261],[3,"TraitPredicate","",""],[12,"trait_ref","","",262],[6,"PolyTraitPredicate","",""],[3,"EquatePredicate","",""],[6,"PolyEquatePredicate","",""],[3,"OutlivesPredicate","",""],[6,"PolyOutlivesPredicate","",""],[6,"PolyRegionOutlivesPredicate","",""],[6,"PolyTypeOutlivesPredicate","",""],[3,"ProjectionPredicate","","This kind of predicate has no *direct* correspondent in the\nsyntax, but it roughly corresponds to the syntactic forms:"],[12,"projection_ty","","",84],[12,"ty","","",84],[6,"PolyProjectionPredicate","",""],[3,"ProjectionTy","","Represents the projection of an associated type. In explicit UFCS\nform this would be written `<T as Trait<..>>::N`."],[12,"trait_ref","","The trait reference `T as Trait<..>`.",265],[12,"item_name","","The name `N` of the associated type.",265],[8,"ToPolyTraitRef","",""],[10,"to_poly_trait_ref","","",408],[8,"AsPredicate","",""],[10,"as_predicate","","",409],[3,"InstantiatedPredicates","","Represents the bounds declared on a particular set of type\nparameters.  Should eventually be generalized into a flag list of\nwhere clauses.  You can obtain a `InstantiatedPredicates` list from a\n`GenericPredicates` by using the `instantiate` method. Note that this method\nreflects an important semantic invariant of `InstantiatedPredicates`: while\nthe `GenericPredicates` are expressed in terms of the bound type\nparameters of the impl/trait/whatever, an `InstantiatedPredicates` instance\nrepresented a set of bounds for some particular instantiation,\nmeaning that the generic parameters have been substituted with\ntheir values."],[12,"predicates","","",266],[3,"ParameterEnvironment","","When type checking, we use the `ParameterEnvironment` to track\ndetails about the type/lifetime parameters that are in scope.\nIt primarily stores the bounds information."],[12,"tcx","","",267],[12,"free_substs","","See `construct_free_substs` for details.",267],[12,"implicit_region_bound","","Each type parameter has an implicit region bound that\nindicates it must outlive at least the function body (the user\nmay specify stronger requirements). This field indicates the\nregion of the callee.",267],[12,"caller_bounds","","Obligations that the caller must satisfy. This is basically\nthe set of bounds on the in-scope type parameters, translated\ninto Obligations.",267],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that have to do with the parameters in scope.",267],[3,"TypeScheme","","A \"type scheme\", in ML terminology, is a type combined with some\nset of generic types that the type is, well, generic over. In Rust\nterms, it is the \"type\" of a fn item or struct -- this type will\ninclude various generic parameters that must be substituted when\nthe item/struct is referenced. That is called converting the type\nscheme to a monotype."],[12,"generics","","",268],[12,"ty","","",268],[3,"TraitDef","","As `TypeScheme` but for a trait ref."],[12,"unsafety","","",339],[12,"paren_sugar","","If `true`, then this trait had the `#[rustc_paren_sugar]`\nattribute, indicating that it should be used with `Foo()`\nsugar. This is a temporary thing -- eventually any trait wil\nbe usable with the sugar (or without it).",339],[12,"generics","","Generic type definitions. Note that `Self` is listed in here\nas having a single bound, the trait itself (e.g., in the trait\n`Eq`, there is a single bound `Self : Eq`). This is so that\ndefault methods get to assume that the `Self` parameters\nimplements the trait.",339],[12,"trait_ref","","",339],[12,"associated_type_names","","A list of the associated types defined in this trait. Useful\nfor resolving `X::Foo` type markers.",339],[3,"ItemSubsts","","Records the substitutions used to translate the polytype for an\nitem into the monotype of an item reference."],[12,"substs","","",269],[4,"ClosureKind","",""],[13,"FnClosureKind","","",155],[13,"FnMutClosureKind","","",155],[13,"FnOnceClosureKind","","",155],[8,"ClosureTyper","",""],[10,"tcx","","",410],[10,"param_env","","",410],[10,"closure_kind","","Is this a `Fn`, `FnMut` or `FnOnce` closure? During typeck,\nreturns `None` if the kind of this closure has not yet been\ninferred.",410],[10,"closure_type","","Returns the argument/return types of this closure.",410],[10,"closure_upvars","","Returns the set of all upvars and their transformed\ntypes. During typeck, maybe return `None` if the upvar types\nhave not yet been inferred.",410],[5,"mk_ctxt","",""],[5,"mk_t","",""],[5,"mk_mach_int","",""],[5,"mk_mach_uint","",""],[5,"mk_mach_float","",""],[5,"mk_str","",""],[5,"mk_str_slice","",""],[5,"mk_enum","",""],[5,"mk_uniq","",""],[5,"mk_ptr","",""],[5,"mk_rptr","",""],[5,"mk_mut_rptr","",""],[5,"mk_imm_rptr","",""],[5,"mk_mut_ptr","",""],[5,"mk_imm_ptr","",""],[5,"mk_nil_ptr","",""],[5,"mk_vec","",""],[5,"mk_slice","",""],[5,"mk_tup","",""],[5,"mk_nil","",""],[5,"mk_bare_fn","",""],[5,"mk_ctor_fn","",""],[5,"mk_trait","",""],[5,"sort_bounds_list","",""],[5,"mk_projection","",""],[5,"mk_struct","",""],[5,"mk_closure","",""],[5,"mk_var","",""],[5,"mk_int_var","",""],[5,"mk_float_var","",""],[5,"mk_infer","",""],[5,"mk_param","",""],[5,"mk_self_type","",""],[5,"mk_param_from_def","",""],[5,"walk_ty","",""],[5,"maybe_walk_ty","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored."],[5,"fold_ty","",""],[5,"type_is_nil","",""],[5,"type_is_error","",""],[5,"type_needs_subst","",""],[5,"trait_ref_contains_error","",""],[5,"type_is_ty_var","",""],[5,"type_is_bool","",""],[5,"type_is_self","",""],[5,"type_is_vec","",""],[5,"type_is_structural","",""],[5,"type_is_simd","",""],[5,"sequence_element_type","",""],[5,"simd_type","",""],[5,"simd_size","",""],[5,"type_is_region_ptr","",""],[5,"type_is_unsafe_ptr","",""],[5,"type_is_unique","",""],[5,"type_is_scalar","",""],[5,"type_is_floating_point","","Returns true if this type is a floating point type and false otherwise."],[3,"TypeContents","","Type contents is how the type checker reasons about kinds.\nThey track what kinds of things are found within a type.  You can\nthink of them as kind of an \"anti-kind\".  They track the kinds of values\nand thinks that are contained in types.  Having a larger contents for\na type tends to rule that type *out* from various kinds.  For example,\na type that contains a reference is not sendable."],[12,"bits","","",270],[5,"type_interior_is_unsafe","",""],[5,"type_contents","",""],[5,"type_moves_by_default","",""],[5,"type_is_sized","",""],[5,"is_ffi_safe","",""],[5,"is_instantiable","",""],[4,"Representability","","Describes whether a type is representable. For types that are not\nrepresentable, 'SelfRecursive' and 'ContainsRecursive' are used to\ndistinguish between types that are recursive with themselves and types that\ncontain a different recursive type. These cases can therefore be treated\ndifferently when reporting errors."],[13,"Representable","","",271],[13,"ContainsRecursive","","",271],[13,"SelfRecursive","","",271],[5,"is_type_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums."],[5,"type_is_trait","",""],[5,"type_trait_info","",""],[5,"type_is_integral","",""],[5,"type_is_fresh","",""],[5,"type_is_uint","",""],[5,"type_is_char","",""],[5,"type_is_bare_fn","",""],[5,"type_is_bare_fn_item","",""],[5,"type_is_fp","",""],[5,"type_is_numeric","",""],[5,"type_is_signed","",""],[5,"type_is_machine","",""],[5,"type_is_c_like_enum","",""],[5,"deref","",""],[5,"type_content","",""],[5,"index","",""],[5,"array_element_ty","",""],[5,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum."],[5,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id."],[5,"impl_id_to_trait_ref","",""],[5,"node_id_to_type","",""],[5,"node_id_to_type_opt","",""],[5,"node_id_item_substs","",""],[5,"fn_is_variadic","",""],[5,"ty_fn_sig","",""],[5,"ty_fn_abi","","Returns the ABI of the given function."],[5,"ty_fn_args","",""],[5,"ty_fn_ret","",""],[5,"is_fn_ty","",""],[5,"ty_region","",""],[5,"free_region_from_def","",""],[5,"pat_ty","",""],[5,"pat_ty_opt","",""],[5,"expr_ty","",""],[5,"expr_ty_opt","",""],[5,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression."],[5,"expr_span","",""],[5,"local_var_name_str","",""],[5,"adjust_ty","","See `expr_ty_adjusted`"],[5,"adjust_ty_for_autoref","",""],[5,"unsize_ty","",""],[5,"resolve_expr","",""],[5,"expr_is_lval","",""],[4,"ExprKind","","We categorize expressions into three kinds.  The distinction between\nlvalue/rvalue is fundamental to the language.  The distinction between the\ntwo kinds of rvalues is an artifact of trans which reflects how we will\ngenerate code for that kind of expression.  See trans/expr.rs for more\ninformation."],[13,"LvalueExpr","","",411],[13,"RvalueDpsExpr","","",411],[13,"RvalueDatumExpr","","",411],[13,"RvalueStmtExpr","","",411],[5,"expr_kind","",""],[5,"stmt_node_id","",""],[5,"field_idx_strict","",""],[5,"impl_or_trait_item_idx","",""],[5,"ty_sort_string","",""],[5,"type_err_to_str","","Explains the source of a type err in a short, human readable way. This is meant to be placed\nin parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\nafterwards to present additional details, particularly when it comes to lifetime-related\nerrors."],[5,"note_and_explain_type_err","",""],[5,"provided_source","",""],[5,"provided_trait_methods","",""],[5,"trait_item","",""],[5,"trait_items","",""],[5,"trait_impl_polarity","",""],[5,"impl_or_trait_item","",""],[5,"is_associated_type","","Returns true if the given ID refers to an associated type and false if it\nrefers to anything else."],[5,"associated_type_parameter_index","","Returns the parameter index that the given associated type corresponds to."],[5,"trait_item_def_ids","",""],[5,"impl_trait_ref","",""],[5,"trait_ref_to_def_id","",""],[5,"try_add_builtin_trait","","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait."],[5,"ty_to_def_id","",""],[3,"VariantInfo","",""],[12,"args","","",272],[12,"arg_names","","",272],[12,"ctor_ty","","",272],[12,"name","","",272],[12,"id","","",272],[12,"disr_val","","",272],[12,"vis","","",272],[5,"substd_enum_variants","",""],[5,"item_path_str","",""],[4,"DtorKind","",""],[13,"NoDtor","","",273],[13,"TraitDtor","","",273],[5,"ty_dtor","",""],[5,"has_dtor","",""],[5,"with_path","",""],[5,"enum_is_univariant","",""],[5,"type_is_empty","",""],[5,"enum_variants","",""],[5,"enum_variant_with_id","",""],[5,"lookup_item_type","",""],[5,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref."],[5,"lookup_predicates","","Given the did of an item, returns its full set of predicates."],[5,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates."],[5,"predicates","",""],[5,"get_attrs","","Get the attributes of a definition."],[5,"has_attr","","Determine whether an item is annotated with an attribute"],[5,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`"],[5,"lookup_simd","","Determine whether an item is annotated with `#[simd]`"],[5,"lookup_repr_hints","","Obtain the representation annotation for a struct definition."],[5,"lookup_field_type","",""],[5,"lookup_struct_fields","",""],[5,"is_tuple_struct","",""],[5,"struct_fields","",""],[5,"tup_fields","",""],[3,"ClosureUpvar","",""],[12,"def","","",274],[12,"span","","",274],[12,"ty","","",274],[5,"closure_upvars","",""],[5,"is_binopable","",""],[5,"eval_repeat_count","",""],[5,"each_bound_trait_and_supertraits","",""],[5,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice."],[5,"get_tydesc_ty","",""],[5,"item_variances","",""],[5,"trait_has_default_impl","",""],[5,"record_trait_has_default_impl","","Records a trait-to-implementation mapping."],[5,"record_trait_implementation","","Records a trait-to-implementation mapping."],[5,"populate_implementations_for_type_if_necessary","","Populates the type context with all the implementations for the given type\nif necessary."],[5,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary."],[5,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`."],[5,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`."],[5,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`."],[5,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`."],[5,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it's calculated within. This is used by the `type_id` intrinsic."],[5,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope."],[5,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe \"outer\" view of a type or method to the \"inner\" view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions."],[5,"construct_parameter_environment","","See `ParameterEnvironment` struct def'n for details"],[4,"ExplicitSelfCategory","","The category of explicit self."],[13,"StaticExplicitSelfCategory","","",275],[13,"ByValueExplicitSelfCategory","","",275],[13,"ByReferenceExplicitSelfCategory","","",275],[13,"ByBoxExplicitSelfCategory","","",275],[5,"accumulate_lifetimes_in_type","","Pushes all the lifetimes in the given type onto the given list. A\n\"lifetime in a type\" is a lifetime specified by a reference or a lifetime\nin a list of type substitutions. This does *not* traverse into nominal\ntypes, nor does it resolve fictitious types."],[3,"Freevar","","A free variable referred to in a function."],[12,"def","","The variable being accessed free.",22],[12,"span","","",22],[6,"FreevarMap","",""],[6,"CaptureModeMap","",""],[6,"TraitMap","",""],[6,"GlobMap","",""],[5,"with_freevars","",""],[5,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`."],[5,"count_late_bound_regions","",""],[5,"binds_late_bound_regions","",""],[5,"no_late_bound_regions","",""],[5,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `'static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required."],[5,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation."],[5,"replace_late_bound_regions","","Replaces the late-bound-regions in `value` that are bound by `value`."],[5,"make_substs_for_receiver_types","","Substitutes the values for the receiver's type parameters\nthat are found in method, leaving the method's type parameters\nintact."],[4,"CopyImplementationError","",""],[13,"FieldDoesNotImplementCopy","","",412],[13,"VariantDoesNotImplementCopy","","",412],[13,"TypeIsStructural","","",412],[13,"TypeHasDestructor","","",412],[5,"can_type_implement_copy","",""],[8,"RegionEscape","",""],[10,"has_escaping_regions","","",413],[10,"has_regions_escaping_depth","","",413],[8,"HasProjectionTypes","",""],[10,"has_projection_types","","",414],[8,"ReferencesError","",""],[10,"references_error","","",415],[0,"ty_fold","rustc_typeck::middle","Generalized type folding mechanism. The setup is a bit convoluted\nbut allows for convenient usage. Let T be an instance of some\n\"foldable type\" (one which implements `TypeFoldable`) and F be an\ninstance of a \"folder\" (a type which implements `TypeFolder`). Then\nthe setup is intended to be:"],[8,"TypeFoldable","rustc_typeck::middle::ty_fold","The TypeFoldable trait is implemented for every type that can be folded.\nBasically, every type that has a corresponding method in TypeFolder."],[10,"fold_with","","",416],[8,"TypeFolder","","The TypeFolder trait defines the actual *folding*. There is a\nmethod defined for every foldable type. Each of these has a\ndefault implementation that does an \"identity\" fold. Within each\nidentity fold, it should invoke `foo.fold_with(self)` to fold each\nsub-item."],[10,"tcx","","",417],[10,"enter_region_binder","","Invoked by the `super_*` routines when we enter a region\nbinding level (for example, when entering a function\nsignature). This is used by clients that want to track the\nDebruijn index nesting level.",417],[10,"exit_region_binder","","Invoked by the `super_*` routines when we exit a region\nbinding level. This is used by clients that want to\ntrack the Debruijn index nesting level.",417],[10,"fold_binder","","",417],[10,"fold_ty","","",417],[10,"fold_mt","","",417],[10,"fold_trait_ref","","",417],[10,"fold_substs","","",417],[10,"fold_fn_sig","","",417],[10,"fold_output","","",417],[10,"fold_bare_fn_ty","","",417],[10,"fold_closure_ty","","",417],[10,"fold_region","","",417],[10,"fold_existential_bounds","","",417],[10,"fold_autoref","","",417],[10,"fold_item_substs","","",417],[5,"super_fold_binder","",""],[5,"super_fold_ty","",""],[5,"super_fold_substs","",""],[5,"super_fold_fn_sig","",""],[5,"super_fold_output","",""],[5,"super_fold_bare_fn_ty","",""],[5,"super_fold_closure_ty","",""],[5,"super_fold_trait_ref","",""],[5,"super_fold_mt","",""],[5,"super_fold_existential_bounds","",""],[5,"super_fold_autoref","",""],[5,"super_fold_item_substs","",""],[3,"BottomUpFolder","",""],[12,"tcx","","",280],[12,"fldop","","",280],[3,"RegionFolder","","Folds over the substructure of a type, visiting its component\ntypes and all regions that occur *free* within it."],[5,"collect_regions","",""],[5,"fold_regions","",""],[3,"RegionEraser","",""],[5,"erase_regions","",""],[5,"shift_region","",""],[5,"shift_regions","",""],[0,"ty_walk","rustc_typeck::middle","An iterator over the type substructure."],[3,"TypeWalker","rustc_typeck::middle::ty_walk",""],[0,"weak_lang_items","rustc_typeck::middle","Validity checking for weak lang items"],[5,"check_crate","rustc_typeck::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the\nlanguage items required by this crate, but not defined yet."],[5,"link_name","",""],[0,"session","rustc_typeck",""],[0,"config","rustc_typeck::session","Contains infrastructure for configuring the compiler, including parsing\ncommand line options."],[3,"Config","rustc_typeck::session::config",""],[12,"target","","",418],[12,"int_type","","",418],[12,"uint_type","","",418],[4,"OptLevel","",""],[13,"No","","",306],[13,"Less","","",306],[13,"Default","","",306],[13,"Aggressive","","",306],[4,"DebugInfoLevel","",""],[13,"NoDebugInfo","","",307],[13,"LimitedDebugInfo","","",307],[13,"FullDebugInfo","","",307],[4,"OutputType","",""],[13,"OutputTypeBitcode","","",308],[13,"OutputTypeAssembly","","",308],[13,"OutputTypeLlvmAssembly","","",308],[13,"OutputTypeObject","","",308],[13,"OutputTypeExe","","",308],[13,"OutputTypeDepInfo","","",308],[3,"Options","",""],[12,"crate_types","","",309],[12,"gc","","",309],[12,"optimize","","",309],[12,"debug_assertions","","",309],[12,"debuginfo","","",309],[12,"lint_opts","","",309],[12,"describe_lints","","",309],[12,"output_types","","",309],[12,"search_paths","","",309],[12,"libs","","",309],[12,"maybe_sysroot","","",309],[12,"target_triple","","",309],[12,"cfg","","",309],[12,"test","","",309],[12,"parse_only","","",309],[12,"no_trans","","",309],[12,"treat_err_as_bug","","",309],[12,"no_analysis","","",309],[12,"debugging_opts","","",309],[12,"write_dependency_info","","Whether to write dependency files. It's (enabled, optional filename).",309],[12,"prints","","",309],[12,"cg","","",309],[12,"color","","",309],[12,"show_span","","",309],[12,"externs","","",309],[12,"crate_name","","",309],[12,"alt_std_name","","An optional name to use as the crate for std during std injection,\nwritten `extern crate std = \"name\"`. Default to \"std\". Used by\nout-of-tree drivers.",309],[12,"unstable_features","","Indicates how the compiler should treat unstable features",309],[4,"UnstableFeatures","",""],[13,"Disallow","","Hard errors for unstable features are active, as on\nbeta/stable channels.",310],[13,"Default","","Use the default lint levels",310],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time\nduring the build that feature-related lints are set to warn or above\nbecause the build turns on warnings-as-errors and uses lots of unstable\nfeatures. As a result, this this is always required for building Rust\nitself.",310],[4,"PrintRequest","",""],[13,"FileNames","","",311],[13,"Sysroot","","",311],[13,"CrateName","","",311],[4,"Input","",""],[13,"File","","Load source from file",312],[13,"Str","","The string is the source",312],[3,"OutputFilenames","",""],[12,"out_directory","","",313],[12,"out_filestem","","",313],[12,"single_output_file","","",313],[12,"extra","","",313],[5,"host_triple","",""],[5,"basic_options","","Some reasonable defaults"],[4,"EntryFnType","",""],[13,"EntryMain","","",314],[13,"EntryStart","","",314],[13,"EntryNone","","",314],[4,"CrateType","",""],[13,"CrateTypeExecutable","","",315],[13,"CrateTypeDylib","","",315],[13,"CrateTypeRlib","","",315],[13,"CrateTypeStaticlib","","",315],[4,"Passes","",""],[13,"SomePasses","","",316],[13,"AllPasses","","",316],[3,"CodegenOptions","",""],[12,"ar","","",317],[12,"linker","","",317],[12,"link_args","","",317],[12,"lto","","",317],[12,"target_cpu","","",317],[12,"target_feature","","",317],[12,"passes","","",317],[12,"llvm_args","","",317],[12,"save_temps","","",317],[12,"rpath","","",317],[12,"no_prepopulate_passes","","",317],[12,"no_vectorize_loops","","",317],[12,"no_vectorize_slp","","",317],[12,"soft_float","","",317],[12,"prefer_dynamic","","",317],[12,"no_integrated_as","","",317],[12,"no_redzone","","",317],[12,"relocation_model","","",317],[12,"code_model","","",317],[12,"metadata","","",317],[12,"extra_filename","","",317],[12,"codegen_units","","",317],[12,"remark","","",317],[12,"no_stack_check","","",317],[12,"debuginfo","","",317],[12,"opt_level","","",317],[12,"debug_assertions","","",317],[5,"basic_codegen_options","",""],[5,"build_codegen_options","",""],[6,"CodegenSetter","",""],[17,"CG_OPTIONS","",""],[3,"DebuggingOptions","",""],[12,"verbose","","",318],[12,"time_passes","","",318],[12,"count_llvm_insns","","",318],[12,"time_llvm_passes","","",318],[12,"trans_stats","","",318],[12,"asm_comments","","",318],[12,"no_verify","","",318],[12,"borrowck_stats","","",318],[12,"no_landing_pads","","",318],[12,"debug_llvm","","",318],[12,"count_type_sizes","","",318],[12,"meta_stats","","",318],[12,"print_link_args","","",318],[12,"gc","","",318],[12,"print_llvm_passes","","",318],[12,"ast_json","","",318],[12,"ast_json_noexpand","","",318],[12,"ls","","",318],[12,"save_analysis","","",318],[12,"print_move_fragments","","",318],[12,"flowgraph_print_loans","","",318],[12,"flowgraph_print_moves","","",318],[12,"flowgraph_print_assigns","","",318],[12,"flowgraph_print_all","","",318],[12,"print_region_graph","","",318],[12,"parse_only","","",318],[12,"no_trans","","",318],[12,"treat_err_as_bug","","",318],[12,"no_analysis","","",318],[12,"extra_plugins","","",318],[12,"unstable_options","","",318],[12,"print_enum_sizes","","",318],[12,"force_overflow_checks","","",318],[5,"basic_debugging_options","",""],[5,"build_debugging_options","",""],[6,"DebuggingSetter","",""],[17,"DB_OPTIONS","",""],[5,"default_lib_output","",""],[5,"default_configuration","",""],[5,"append_configuration","",""],[5,"build_configuration","",""],[5,"build_target_config","",""],[5,"short_optgroups","","Returns the \"short\" subset of the stable rustc command line options."],[5,"optgroups","","Returns all of the stable rustc command line options."],[4,"OptionStability","",""],[13,"Stable","","",319],[13,"Unstable","","",319],[3,"RustcOptGroup","",""],[12,"opt_group","","",320],[12,"stability","","",320],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options,\nincluding metadata for each option, such as whether the option is\npart of the stable long-term interface for rustc."],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for\neach option, such as whether the option is part of the stable\nlong-term interface for rustc."],[5,"parse_cfgspecs","",""],[5,"build_session_options","",""],[5,"get_unstable_features_setting","",""],[5,"parse_crate_types_from_list","",""],[0,"search_paths","rustc_typeck::session",""],[3,"SearchPaths","rustc_typeck::session::search_paths",""],[3,"Iter","",""],[4,"PathKind","",""],[13,"Native","","",322],[13,"Crate","","",322],[13,"Dependency","","",322],[13,"Framework","","",322],[13,"ExternFlag","","",322],[13,"All","","",322],[3,"Session","rustc_typeck::session",""],[12,"target","","",324],[12,"host","","",324],[12,"opts","","",324],[12,"cstore","","",324],[12,"parse_sess","","",324],[12,"entry_fn","","",324],[12,"entry_type","","",324],[12,"plugin_registrar_fn","","",324],[12,"default_sysroot","","",324],[12,"local_crate_source_file","","",324],[12,"working_dir","","",324],[12,"lint_store","","",324],[12,"lints","","",324],[12,"crate_types","","",324],[12,"crate_metadata","","",324],[12,"features","","",324],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive\noperations such as auto-dereference and monomorphization.",324],[12,"can_print_warnings","","",324],[5,"build_session","",""],[5,"build_session_","",""],[5,"expect","",""],[5,"early_error","",""],[5,"early_warn","",""],[0,"util","rustc_typeck",""],[0,"common","rustc_typeck::util",""],[17,"FN_OUTPUT_NAME","rustc_typeck::util::common",""],[3,"ErrorReported","",""],[5,"time","",""],[5,"indent","",""],[3,"Indenter","",""],[5,"indenter","",""],[5,"loop_query","",""],[5,"block_query","",""],[5,"can_reach","","K: Eq + Hash<S>, V, S, H: Hasher<S>"],[5,"memoized","","Memoizes a one-argument closure using the given RefCell containing\na type implementing MutableMap to serve as a cache."],[5,"path2cstr","",""],[0,"ppaux","rustc_typeck::util",""],[8,"Repr","rustc_typeck::util::ppaux","Produces a string suitable for debugging output."],[10,"repr","","",419],[8,"UserString","","Produces a string suitable for showing to the user."],[10,"user_string","","",420],[5,"note_and_explain_region","",""],[5,"explain_region_and_span","",""],[5,"bound_region_ptr_to_string","",""],[5,"bound_region_to_string","",""],[5,"region_ptr_to_string","",""],[5,"region_to_string","",""],[5,"mutability_to_string","",""],[5,"mt_to_string","",""],[5,"vec_map_to_string","",""],[5,"ty_to_string","",""],[5,"explicit_self_category_to_str","",""],[5,"parameterized","",""],[5,"ty_to_short_str","",""],[0,"nodemap","rustc_typeck::util","An efficient hash map for node IDs"],[6,"FnvHashMap","rustc_typeck::util::nodemap",""],[6,"FnvHashSet","",""],[6,"NodeMap","",""],[6,"DefIdMap","",""],[6,"NodeSet","",""],[6,"DefIdSet","",""],[5,"FnvHashMap","",""],[5,"FnvHashSet","",""],[5,"NodeMap","",""],[5,"DefIdMap","",""],[5,"NodeSet","",""],[5,"DefIdSet","",""],[3,"FnvHasher","","A speedy hash algorithm for node ids and def ids. The hashmap in\nlibcollections by default uses SipHash which isn't quite as speedy as we\nwant. In the compiler we're not really worried about DOS attempts, so we\njust default to a non-cryptographic hash."],[0,"snapshot_vec","rustc_typeck::util","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits\nyou to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either\nto rollback to the start of the snapshot or commit those changes."],[4,"UndoLog","rustc_typeck::util::snapshot_vec",""],[13,"OpenSnapshot","","Indicates where a snapshot started.",421],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",421],[13,"NewElem","","New variable with given index was created.",421],[13,"SetElem","","Variable with given index was changed *from* the given value.",421],[13,"Other","","Extensible set of actions",421],[3,"SnapshotVec","",""],[3,"Snapshot","",""],[8,"SnapshotVecDelegate","",""],[16,"Value","rustc_typeck::util::snapshot_vec::SnapshotVecDelegate",""],[16,"Undo","",""],[10,"reverse","rustc_typeck::util::snapshot_vec","",422],[0,"lev_distance","rustc_typeck::util",""],[5,"lev_distance","rustc_typeck::util::lev_distance",""],[0,"fs","rustc_typeck::util",""],[5,"realpath","rustc_typeck::util::fs","Returns an absolute path in the filesystem that `path` points to. The\nreturned path does not contain any symlinks in its hierarchy."],[0,"sha2","rustc_typeck::util","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant."],[8,"Digest","rustc_typeck::util::sha2","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions."],[10,"input","","Provide message data.",423],[10,"result","","Retrieve the digest result. This method may be called multiple times.",423],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",423],[10,"output_bits","","Get the output size in bits.",423],[10,"input_str","","Convenience function that feeds a string into a digest.",423],[10,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",423],[10,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",423],[11,"new_in","rustc_back::tempdir","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",424],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",424],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",424],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",424],[11,"close","","Close and remove the temporary directory",424],[11,"drop","","",424],[11,"to_string","rustc_back::target::apple_ios_base","",425],[11,"fmt","rustc_back::target","",426],[11,"clone","","",426],[11,"fmt","","",427],[11,"clone","","",427],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for\ncompilation, will certainly not work.",427],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",426],[11,"from_json","","Load a target descriptor from a JSON object.",426],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",426],[3,"Sha256","rustc_typeck::util::sha2","The SHA-256 hash algorithm"],[5,"check_crate","rustc_typeck",""],[0,"diagnostics","",""],[7,"DIAGNOSTICS","rustc_typeck::diagnostics",""]],"paths":[[3,"Lint"],[3,"Svh"],[4,"SawAbiComponent"],[4,"SawExprComponent"],[4,"SawStmtComponent"],[3,"Ident"],[3,"Name"],[3,"StrictVersionHashVisitor"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"DecodeContext"],[3,"DefId"],[4,"Option"],[3,"Span"],[3,"NestedItemsDropper"],[4,"Def"],[4,"Region"],[3,"FreeRegion"],[4,"CodeExtent"],[3,"DestructionScopeData"],[4,"BoundRegion"],[3,"Decoder"],[3,"Freevar"],[3,"UpvarBorrow"],[4,"UpvarCapture"],[4,"MethodOrigin"],[3,"EncodeContext"],[3,"Encoder"],[3,"SideTableEncodingIdVisitor"],[3,"Doc"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFG"],[3,"ConstQualif"],[4,"Mode"],[3,"CheckCrateVisitor"],[3,"CheckCrateVisitor"],[3,"CheckItemRecursionVisitor"],[4,"Context"],[3,"CheckLoopVisitor"],[3,"Matrix"],[4,"Constructor"],[4,"Usefulness"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[3,"RenamingRecorder"],[3,"MutationChecker"],[3,"AtBindingPatternVisitor"],[3,"RvalueContext"],[3,"RvalueContextDelegate"],[4,"const_val"],[3,"ConstEvalErr"],[4,"ErrKind"],[4,"EntryOrExit"],[3,"DataFlowContext"],[3,"Union"],[3,"Subtract"],[3,"MarkSymbolVisitor"],[3,"LifeSeeder"],[3,"DeadVisitor"],[3,"PathResolution"],[4,"MethodProvenance"],[4,"UnsafeContext"],[3,"EffectCheckVisitor"],[3,"EntryContext"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"TrackMatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"SimplifiedType"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"DepthFirstTraversal"],[3,"IntrinsicCheckingVisitor"],[3,"TransmuteRestriction"],[3,"Bivariate"],[3,"Rc"],[3,"TraitRef"],[3,"ProjectionPredicate"],[3,"FnSig"],[3,"CombineFields"],[3,"Generalizer"],[3,"Equate"],[3,"InferCtxt"],[3,"Binder"],[3,"Glb"],[3,"Lub"],[4,"Node"],[4,"Edge"],[3,"ConstraintGraph"],[4,"Constraint"],[4,"GenericKind"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[3,"SameRegions"],[3,"RegionSnapshot"],[3,"RegionVarBindings"],[4,"Classification"],[4,"Verify"],[4,"VarValue"],[3,"RegionAndOrigin"],[3,"OpportunisticTypeResolver"],[3,"FullTypeResolver"],[3,"TypeFreshener"],[3,"Sub"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"Delegate"],[4,"VarValue"],[3,"UnificationTable"],[3,"Delegate"],[3,"IntVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"fixup_err"],[4,"Result"],[4,"LangItem"],[3,"LanguageItems"],[3,"LanguageItemCollector"],[3,"Variable"],[3,"LiveNode"],[4,"LiveNodeKind"],[3,"IrMaps"],[3,"LocalInfo"],[4,"VarKind"],[3,"Liveness"],[3,"Users"],[4,"categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[3,"Expr"],[3,"Pat"],[3,"MemCategorizationContext"],[4,"ClosureKind"],[4,"LastPrivate"],[4,"PrivateDep"],[4,"ImportUse"],[3,"ReachableContext"],[3,"BlockRemainder"],[4,"InnermostDeclaringBlock"],[3,"DeclaringStatementContext"],[4,"InnermostEnclosingExpr"],[3,"Context"],[3,"RegionMaps"],[3,"RegionResolutionVisitor"],[4,"DefRegion"],[3,"LifetimeContext"],[4,"ScopeChain"],[3,"Annotator"],[3,"Index"],[3,"Checker"],[3,"Substs"],[4,"RegionSubsts"],[4,"ParamSpace"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"SubstFolder"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"MismatchedProjectionTypes"],[4,"ProjectionTyCandidate"],[3,"AssociatedTypeNormalizer"],[3,"Normalized"],[4,"ProjectionTyError"],[4,"MethodViolationCode"],[4,"ObjectSafetyViolation"],[3,"SelectionCache"],[4,"MethodMatchedData"],[4,"SelectionCandidate"],[4,"EvaluationResult"],[3,"SelectionContext"],[3,"TraitObligationStack"],[4,"MethodMatchResult"],[3,"Elaborator"],[3,"FilterToTraits"],[3,"VtableImplData"],[3,"VtableObjectData"],[3,"Obligation"],[4,"Vtable"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[4,"SelectionError"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[3,"field"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[3,"Method"],[3,"AssociatedType"],[3,"mt"],[3,"field_ty"],[3,"creader_cache_key"],[3,"ItemVariances"],[4,"Variance"],[4,"AutoAdjustment"],[4,"UnsizeKind"],[3,"AutoDerefRef"],[4,"AutoRef"],[3,"param_index"],[3,"MethodParam"],[3,"MethodObject"],[3,"MethodCallee"],[3,"MethodCall"],[4,"ExprAdjustment"],[4,"vtable_origin"],[3,"CtxtArenas"],[3,"TypeFlags"],[3,"ctxt"],[3,"TyS"],[3,"InternedTy"],[3,"BareFnTy"],[3,"ClosureTy"],[4,"FnOutput"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"UpvarId"],[4,"BorrowKind"],[4,"sty"],[3,"TyTrait"],[4,"terr_vstore_kind"],[3,"expected_found"],[4,"type_err"],[3,"ParamBounds"],[3,"ExistentialBounds"],[4,"BuiltinBound"],[3,"TyVid"],[3,"RegionVid"],[4,"InferTy"],[4,"UnconstrainedNumeric"],[4,"InferRegion"],[4,"ObjectLifetimeDefault"],[3,"TypeParameterDef"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[4,"Predicate"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionTy"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"ItemSubsts"],[3,"TypeContents"],[4,"Representability"],[3,"VariantInfo"],[4,"DtorKind"],[3,"ClosureUpvar"],[4,"ExplicitSelfCategory"],[3,"Vec"],[3,"Box"],[3,"OwnedSlice"],[3,"EnumSet"],[3,"BottomUpFolder"],[3,"RegionFolder"],[3,"RegionEraser"],[3,"TypeWalker"],[3,"Context"],[4,"astencode_tag"],[3,"LinkMeta"],[4,"DefIdSource"],[3,"entry"],[3,"EncodeVisitor"],[3,"ImplVisitor"],[4,"Family"],[4,"DefLike"],[3,"CrateDep"],[3,"CrateReader"],[4,"PMDSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"CrateSource"],[3,"CStore"],[3,"crate_metadata"],[4,"MetadataBlob"],[3,"Context"],[3,"ArchiveMetadata"],[3,"FileSearch"],[3,"MacroLoader"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[3,"Options"],[4,"UnstableFeatures"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"Registry"],[3,"RegistrarFinder"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"Context"],[3,"GatherNodeLevels"],[3,"ErrorReported"],[3,"Indenter"],[3,"LoopQueryVisitor"],[3,"BlockQueryVisitor"],[3,"P"],[3,"TraitDef"],[4,"TraitItem"],[3,"Path"],[3,"Ty"],[3,"Item"],[3,"Lifetime"],[3,"Spanned"],[4,"ExplicitSelf_"],[4,"Visibility"],[4,"Abi"],[4,"Mutability"],[4,"IntTy"],[4,"UintTy"],[3,"HashMap"],[3,"FnvHasher"],[3,"SnapshotVec"],[3,"FixedBuffer64"],[3,"Sha256"],[3,"ArchiveRO"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"CallConv"],[4,"DiagnosticSeverity"],[3,"Attribute"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[3,"AttrBuilder"],[4,"TypeKind"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[8,"LintPass"],[3,"ctxt"],[4,"InlinedItemRef"],[3,"EncodeParams"],[3,"ImportedFileMap"],[3,"MethodInfo"],[4,"FoundAst"],[3,"Library"],[3,"CratePaths"],[4,"FileMatch"],[8,"vtable_decoder_helpers"],[3,"CFGEdgeData"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[3,"Export"],[8,"Delegate"],[3,"Node"],[8,"Combine"],[8,"Combineable"],[8,"ErrorReporting"],[8,"Resolvable"],[8,"LatticeDir"],[8,"UnifyKey"],[3,"Node"],[8,"SimplyUnifiable"],[8,"InferCtxtMethodsForSimplyUnifiableTypes"],[4,"deref_kind"],[8,"ast_node"],[8,"Typer"],[4,"InteriorSafety"],[4,"AliasableReason"],[3,"SeparateVecsPerParamSpace"],[8,"Subst"],[4,"OrphanCheckErr"],[3,"CrateAnalysis"],[3,"CommonTypes"],[8,"ToPolyTraitRef"],[8,"AsPredicate"],[8,"ClosureTyper"],[4,"ExprKind"],[4,"CopyImplementationError"],[8,"RegionEscape"],[8,"HasProjectionTypes"],[8,"ReferencesError"],[8,"TypeFoldable"],[8,"TypeFolder"],[3,"Config"],[8,"Repr"],[8,"UserString"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[8,"Digest"],[3,"TempDir"],[4,"Arch"],[3,"Target"],[3,"TargetOptions"]]};
searchIndex['rustc_resolve'] = {"items":[[0,"","rustc_resolve",""],[3,"DefModifiers","",""],[3,"CrateMap","",""],[12,"def_map","","",0],[12,"freevars","","",0],[12,"export_map","","",0],[12,"trait_map","","",0],[12,"external_exports","","",0],[12,"glob_map","","",0],[4,"MakeGlobMap","",""],[13,"Yes","","",1],[13,"No","","",1],[5,"resolve_crate","","Entry point to crate resolution."],[0,"diagnostics","",""],[7,"DIAGNOSTICS","rustc_resolve::diagnostics",""],[17,"PUBLIC","rustc_resolve",""],[17,"IMPORTABLE","",""],[11,"hash","","",2],[11,"cmp","","",2],[11,"partial_cmp","","",2],[11,"lt","","",2],[11,"le","","",2],[11,"gt","","",2],[11,"ge","","",2],[11,"clone","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"fmt","","",2],[11,"empty","","Returns an empty set of flags.",2],[11,"all","","Returns the set containing all flags.",2],[11,"bits","","Returns the raw value of the flags currently stored.",2],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",2],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",2],[11,"is_empty","","Returns `true` if no flags are currently stored.",2],[11,"is_all","","Returns `true` if all flags are currently set.",2],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",2],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",2],[11,"insert","","Inserts the specified flags in-place.",2],[11,"remove","","Removes the specified flags in-place.",2],[11,"toggle","","Toggles the specified flags in-place.",2],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",2],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",2],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",2],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",2],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",2],[11,"eq","","",1],[11,"ne","","",1]],"paths":[[3,"CrateMap"],[4,"MakeGlobMap"],[3,"DefModifiers"]]};
searchIndex['rustc_borrowck'] = {"items":[[0,"","rustc_borrowck",""],[3,"FnPartsWithCFG","","This and a `ty::ctxt` is all you need to run the dataflow analyses\nused in the borrow checker."],[12,"fn_parts","","",0],[12,"cfg","","",0],[5,"check_crate","",""],[5,"build_borrowck_dataflow_data_for_fn","","Accessor for introspective clients inspecting `AnalysisData` and\nthe `BorrowckCtxt` itself , e.g. the flowgraph visualizer."],[11,"from_fn_like","","",0],[0,"graphviz","","This module provides linkage between rustc::middle::graph and\nlibgraphviz traits, specialized to attaching borrowck analysis\ndata to rendered labels."],[11,"fmt","rustc_back::svh","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"new","","",1],[11,"as_str","","",1],[11,"calculate","","",1],[11,"fmt","","",1],[11,"hash","rustc_back::svh::svh_visitor","",2],[11,"hash","","",3],[11,"hash","","",4],[11,"get_content","syntax::ast","",5],[11,"get_content","","",6],[11,"visit_mac","rustc_back::svh::svh_visitor","",7],[11,"visit_struct_def","","",7],[11,"visit_variant","","",7],[11,"visit_opt_lifetime_ref","","",7],[11,"visit_ident","","",7],[11,"visit_lifetime_ref","","",7],[11,"visit_lifetime_def","","",7],[11,"visit_expr","","",7],[11,"visit_stmt","","",7],[11,"visit_foreign_item","","",7],[11,"visit_item","","",7],[11,"visit_mod","","",7],[11,"visit_decl","","",7],[11,"visit_ty","","",7],[11,"visit_generics","","",7],[11,"visit_fn","","",7],[11,"visit_ty_method","","",7],[11,"visit_trait_item","","",7],[11,"visit_struct_field","","",7],[11,"visit_explicit_self","","",7],[11,"visit_path","","",7],[11,"visit_block","","",7],[11,"visit_pat","","",7],[11,"visit_local","","",7],[11,"visit_arm","","",7],[11,"open","rustc_back::archive","Opens an existing static archive",8],[11,"remove_file","","Removes a file from this archive",8],[11,"files","","Lists all files in an archive",8],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",8],[11,"create","","Create a new static archive, ready for adding files.",9],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",9],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",9],[11,"add_file","","Adds an arbitrary file to this archive",9],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",9],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",9],[11,"tr_id","rustc::middle::astencode","Translates an internal id, meaning a node id that is known to refer to some part of the\nitem currently being inlined, such as a local variable or argument.  All naked node-ids\nthat appear in types have this property, since if something might refer to an external item\nwe would use a def-id to allow for the possibility that the item resides in another crate.",10],[11,"tr_def_id","","Translates an EXTERNAL def-id, converting the crate number from the one used in the encoded\ndata to the current crate numbers..  By external, I mean that it be translated to a\nreference to the item in its original crate, as opposed to being translated to a reference\nto the inlined version of the item.  This is typically, but not always, what you want,\nbecause most def-ids refer to external things like types or other fns that may or may not\nbe inlined.  Note that even when the inlined function is referencing itself recursively, we\nwould want `tr_def_id` for that reference--- conceptually the function calls the original,\nnon-inlined version, and trans deals with linking that recursive call to the inlined copy.",10],[11,"tr_intern_def_id","","Translates an INTERNAL def-id, meaning a def-id that is\nknown to refer to some part of the item currently being\ninlined.  In that case, we want to convert the def-id to\nrefer to the current crate and to the new, inlined node-id.",10],[11,"tr_span","","Translates a `Span` from an extern crate to the corresponding `Span`\nwithin the local crate's codemap. `creader::import_codemap()` will\nalready have allocated any additionally needed FileMaps in the local\ncodemap as a side-effect of creating the crate_metadata's\n`codemap_import_info`.",10],[11,"tr_intern","syntax::ast","",11],[11,"tr","","",11],[11,"tr","core::option","",12],[11,"tr","syntax::codemap","",13],[11,"fold_block","rustc::middle::astencode","",14],[11,"tr","rustc::middle::def","",15],[11,"tr","rustc::middle::ty","",16],[11,"tr","","",17],[11,"tr","rustc::middle::region","",18],[11,"tr","","",19],[11,"tr","rustc::middle::ty","",20],[11,"read_freevar_entry","rbml::reader","",21],[11,"read_capture_mode","","",21],[11,"tr","rustc::middle::ty","",22],[11,"tr","","",23],[11,"tr","","",24],[11,"read_method_callee","rbml::reader","",21],[11,"tr","rustc::middle::ty","",25],[11,"read_vec_per_param_space","rbml::reader","",21],[11,"read_vtable_res_with_key","","",21],[11,"read_vtable_res","","",21],[11,"read_vtable_param_res","","",21],[11,"read_vtable_origin","","",21],[11,"ty_str_ctxt","rustc::metadata::encoder","",26],[11,"emit_closure_type","rbml::writer","",27],[11,"emit_method_origin","","",27],[11,"emit_ty","","",27],[11,"emit_tys","","",27],[11,"emit_trait_ref","","",27],[11,"emit_type_param_def","","",27],[11,"emit_predicate","","",27],[11,"emit_type_scheme","","",27],[11,"emit_existential_bounds","","",27],[11,"emit_builtin_bounds","","",27],[11,"emit_substs","","",27],[11,"emit_auto_adjustment","","",27],[11,"emit_autoref","","",27],[11,"emit_auto_deref_ref","","",27],[11,"emit_unsize_kind","","",27],[11,"tag","","",27],[11,"id","","",27],[11,"visit_id","rustc::middle::astencode","",28],[11,"as_int","rbml","",29],[11,"opt_child","","",29],[11,"read_ty_nodcx","rbml::reader","",21],[11,"read_tys_nodcx","","",21],[11,"read_substs_nodcx","","",21],[11,"read_method_origin","","",21],[11,"read_ty","","",21],[11,"read_tys","","",21],[11,"read_trait_ref","","",21],[11,"read_poly_trait_ref","","",21],[11,"read_type_param_def","","",21],[11,"read_predicate","","",21],[11,"read_type_scheme","","",21],[11,"read_existential_bounds","","",21],[11,"read_substs","","",21],[11,"read_auto_adjustment","","",21],[11,"read_auto_deref_ref","","",21],[11,"read_autoref","","",21],[11,"read_unsize_kind","","",21],[11,"read_closure_kind","","",21],[11,"read_closure_ty","","",21],[11,"convert_def_id","","Converts a def-id that appears in a type.  The correct\ntranslation will depend on what kind of def-id this is.\nThis is a subtle point: type definitions are not\ninlined into the current crate, so if the def-id names\na nominal type or type alias, then it should be\ntranslated to refer to the source crate.",21],[11,"graph_id","rustc::middle::cfg::graphviz","",30],[11,"node_id","","",30],[11,"node_label","","",30],[11,"edge_label","","",30],[11,"nodes","","",30],[11,"edges","","",30],[11,"source","","",30],[11,"target","","",30],[11,"eq","rustc::middle::cfg","",31],[11,"ne","","",31],[11,"id","","",31],[11,"new","","",32],[11,"node_is_reachable","","",32],[11,"hash","rustc::middle::check_const","",33],[11,"cmp","","",33],[11,"partial_cmp","","",33],[11,"lt","","",33],[11,"le","","",33],[11,"gt","","",33],[11,"ge","","",33],[11,"clone","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"empty","","Returns an empty set of flags.",33],[11,"all","","Returns the set containing all flags.",33],[11,"bits","","Returns the raw value of the flags currently stored.",33],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33],[11,"is_empty","","Returns `true` if no flags are currently stored.",33],[11,"is_all","","Returns `true` if all flags are currently set.",33],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33],[11,"insert","","Inserts the specified flags in-place.",33],[11,"remove","","Removes the specified flags in-place.",33],[11,"toggle","","Toggles the specified flags in-place.",33],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitor","rustc::middle::check_const","Returns the union of the two sets of flags.",33],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitxor","rustc::middle::check_const","Returns the left flags, but with all the right flags toggled.",33],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitand","rustc::middle::check_const","Returns the intersection between the two sets of flags.",33],[6,"Output","rustc_borrowck::graphviz",""],[11,"sub","rustc::middle::check_const","Returns the set difference of the two sets of flags.",33],[6,"Output","rustc_borrowck::graphviz",""],[11,"not","rustc::middle::check_const","Returns the complement of this set of flags.",33],[11,"eq","","",34],[11,"ne","","",34],[11,"visit_item","","",35],[11,"visit_fn","","",35],[11,"visit_pat","","",35],[11,"visit_expr","","",35],[11,"consume","","",35],[11,"borrow","","",35],[11,"decl_without_init","","",35],[11,"mutate","","",35],[11,"matched_pat","","",35],[11,"consume_pat","","",35],[11,"visit_item","rustc::middle::check_static_recursion","",36],[11,"visit_item","","",37],[11,"visit_expr","","",37],[11,"eq","rustc::middle::check_loop","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"visit_item","","",39],[11,"visit_expr","","",39],[11,"fmt","rustc::middle::check_match","",40],[11,"from_iter","","",40],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"eq","","",42],[11,"ne","","",42],[11,"clone","","",42],[11,"visit_expr","","",43],[11,"visit_local","","",43],[11,"visit_fn","","",43],[11,"new","","",44],[11,"visit_id","","",45],[11,"fold_pat","","",44],[11,"matched_pat","","",46],[11,"consume","","",46],[11,"consume_pat","","",46],[11,"borrow","","",46],[11,"decl_without_init","","",46],[11,"mutate","","",46],[11,"visit_pat","","",47],[11,"visit_fn","rustc::middle::check_rvalues","",48],[11,"consume","","",49],[11,"matched_pat","","",49],[11,"consume_pat","","",49],[11,"borrow","","",49],[11,"decl_without_init","","",49],[11,"mutate","","",49],[11,"eq","rustc::middle::const_eval","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"clone","","",51],[11,"clone","","",52],[11,"description","","",51],[11,"fmt","rustc::middle::dataflow","",53],[11,"clone","","",54],[11,"pre","","",54],[11,"new","","",54],[11,"add_gen","","Indicates that `id` generates `bit`",54],[11,"add_kill","","Indicates that `id` kills `bit`",54],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",54],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",54],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",54],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",54],[11,"propagate","","Performs the data flow analysis.",54],[11,"join","","",55],[11,"join","","",56],[11,"visit_struct_def","rustc::middle::dead","",57],[11,"visit_expr","","",57],[11,"visit_pat","","",57],[11,"visit_path","","",57],[11,"visit_item","","",57],[11,"visit_item","","",58],[11,"visit_fn","","",58],[11,"visit_item","","",59],[11,"visit_foreign_item","","",59],[11,"visit_fn","","",59],[11,"visit_struct_field","","",59],[11,"visit_trait_item","","",59],[11,"fmt","rustc::middle::def","",15],[11,"hash","","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"fmt","","",60],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",60],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",60],[11,"fmt","","",61],[11,"hash","","",61],[11,"decode","","",61],[11,"encode","","",61],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[11,"map","","",61],[11,"local_node_id","","",15],[11,"def_id","","",15],[11,"variant_def_ids","","",15],[11,"eq","rustc::middle::effect","",62],[11,"ne","","",62],[11,"visit_fn","","",63],[11,"visit_block","","",63],[11,"visit_expr","","",63],[11,"visit_item","rustc::middle::entry","",64],[11,"fmt","rustc::middle::expr_use_visitor","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"fmt","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"fmt","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"fmt","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"fmt","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"fmt","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"new","","",71],[11,"walk_fn","","",71],[11,"consume_expr","","",71],[11,"walk_expr","","",71],[11,"hash","rustc::middle::fast_reject","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"fmt","rustc::middle::graph","",73],[11,"fmt","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"fmt","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"fmt","","",76],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",74],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",75],[11,"new","","",77],[11,"with_capacity","","",77],[11,"all_nodes","","",77],[11,"all_edges","","",77],[11,"next_node_index","","",77],[11,"add_node","","",77],[11,"mut_node_data","","",77],[11,"node_data","","",77],[11,"node","","",77],[11,"next_edge_index","","",77],[11,"add_edge","","",77],[11,"mut_edge_data","","",77],[11,"edge_data","","",77],[11,"edge","","",77],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",77],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",77],[11,"each_node","","Iterates over all edges defined in the graph.",77],[11,"each_edge","","Iterates over all edges defined in the graph",77],[11,"each_outgoing_edge","","Iterates over all outgoing edges from the node `from`",77],[11,"each_incoming_edge","","Iterates over all incoming edges to the node `target`",77],[11,"each_adjacent_edge","","Iterates over all edges adjacent to the node `node`\nin the direction `dir` (either `Outgoing` or `Incoming)",77],[11,"iterate_until_fixed_point","","",77],[11,"depth_traverse","","",77],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","rustc::middle::graph","",78],[11,"source","","",73],[11,"target","","",73],[11,"visit_fn","rustc::middle::intrinsicck","",79],[11,"visit_expr","","",79],[11,"repr","rustc::middle::ty","",80],[11,"tag","rustc::middle::infer::bivariate","",81],[11,"fields","","",81],[11,"tys_with_variance","","",81],[11,"regions_with_variance","","",81],[11,"regions","","",81],[11,"mts","","",81],[11,"unsafeties","","",81],[11,"builtin_bounds","","",81],[11,"tys","","",81],[11,"binders","","",81],[11,"combine","alloc::rc","",82],[11,"combine","rustc::middle::ty","",83],[11,"combine","","",84],[11,"combine","","",85],[11,"clone","rustc::middle::infer::combine","",86],[11,"switch_expected","","",86],[11,"instantiate","","",86],[11,"tcx","","",87],[11,"fold_ty","","",87],[11,"fold_region","","",87],[11,"tag","rustc::middle::infer::equate","",88],[11,"fields","","",88],[11,"tys_with_variance","","",88],[11,"regions_with_variance","","",88],[11,"regions","","",88],[11,"mts","","",88],[11,"unsafeties","","",88],[11,"builtin_bounds","","",88],[11,"tys","","",88],[11,"binders","","",88],[11,"report_region_errors","rustc::middle::infer","",89],[11,"process_errors","","",89],[11,"report_type_error","","",89],[11,"report_and_explain_type_error","","",89],[11,"values_str","","Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\nerror.",89],[11,"expected_found_str","","",89],[11,"report_generic_bound_failure","","",89],[11,"report_concrete_failure","","",89],[11,"report_sub_sup_conflict","","",89],[11,"report_sup_sup_conflict","","",89],[11,"report_processed_errors","","",89],[11,"give_suggestion","","",89],[11,"give_expl_lifetime_param","","",89],[11,"report_inference_failure","","",89],[11,"note_region_origin","","",89],[11,"resolve","alloc::rc","",82],[11,"contains_error","","",82],[11,"resolve","rustc::middle::ty","",90],[11,"contains_error","","",90],[11,"tag","rustc::middle::infer::glb","",91],[11,"fields","","",91],[11,"tys_with_variance","","",91],[11,"regions_with_variance","","",91],[11,"mts","","",91],[11,"unsafeties","","",91],[11,"builtin_bounds","","",91],[11,"regions","","",91],[11,"tys","","",91],[11,"binders","","",91],[11,"tainted_regions","rustc::middle::infer","",89],[11,"region_vars_confined_to_snapshot","","Returns the set of region variables that do not affect any\ntypes/regions which existed before `snapshot` was\nstarted. This is used in the sub/lub/glb computations. The\nidea here is that when we are computing lub/glb of two\nregions, we sometimes create intermediate region variables.\nThose region variables may touch some of the skolemized or\nother \"forbidden\" regions we created to replace bound\nregions, but they don't really represent an \"external\"\nconstraint.",89],[11,"relate_bound","rustc::middle::infer::lub","",92],[11,"relate_bound","rustc::middle::infer::glb","",91],[11,"tag","rustc::middle::infer::lub","",92],[11,"fields","","",92],[11,"tys_with_variance","","",92],[11,"regions_with_variance","","",92],[11,"mts","","",92],[11,"unsafeties","","",92],[11,"builtin_bounds","","",92],[11,"regions","","",92],[11,"tys","","",92],[11,"binders","","",92],[11,"fmt","rustc::middle::infer::region_inference::graphviz","",93],[11,"eq","","",93],[11,"ne","","",93],[11,"hash","","",93],[11,"clone","","",93],[11,"fmt","","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[11,"graph_id","","",95],[11,"node_id","","",95],[11,"node_label","","",95],[11,"edge_label","","",95],[11,"nodes","","",95],[11,"edges","","",95],[11,"source","","",95],[11,"target","","",95],[11,"fmt","rustc::middle::infer::region_inference","",96],[11,"hash","","",96],[11,"eq","","",96],[11,"ne","","",96],[11,"clone","","",96],[11,"eq","","",97],[11,"ne","","",97],[11,"fmt","","",97],[11,"clone","","",97],[11,"hash","","",98],[11,"eq","","",98],[11,"ne","","",98],[11,"eq","","",99],[11,"ne","","",99],[11,"eq","","",100],[11,"ne","","",100],[11,"fmt","","",101],[11,"clone","","",101],[11,"fmt","","",102],[11,"clone","","",102],[11,"contains","","",102],[11,"push","","",102],[11,"fmt","","",103],[11,"new","","",104],[11,"start_snapshot","","",104],[11,"commit","","",104],[11,"rollback_to","","",104],[11,"num_vars","","",104],[11,"new_region_var","","",104],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto \"escape\" out into error messages or the code at large.",104],[11,"new_bound","","",104],[11,"add_given","","",104],[11,"make_eqregion","","",104],[11,"make_subregion","","",104],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",104],[11,"lub_regions","","",104],[11,"glb_regions","","",104],[11,"resolve_var","","",104],[11,"combine_vars","","",104],[11,"vars_created_since_snapshot","","",104],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",104],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",104],[11,"fmt","","",105],[11,"eq","","",105],[11,"ne","","",105],[11,"repr","","",96],[11,"repr","","",106],[11,"repr","","",107],[11,"repr","","",108],[11,"repr","","",97],[11,"user_string","","",97],[11,"to_ty","","",97],[11,"new","rustc::middle::infer::resolve","",109],[11,"tcx","","",109],[11,"fold_ty","","",109],[11,"tcx","","",110],[11,"fold_ty","","",110],[11,"fold_region","","",110],[11,"new","rustc::middle::infer::freshen","",111],[11,"tcx","","",111],[11,"fold_region","","",111],[11,"fold_ty","","",111],[11,"tag","rustc::middle::infer::sub","",112],[11,"fields","","",112],[11,"tys_with_variance","","",112],[11,"regions_with_variance","","",112],[11,"regions","","",112],[11,"mts","","",112],[11,"unsafeties","","",112],[11,"builtin_bounds","","",112],[11,"tys","","",112],[11,"binders","","",112],[11,"fmt","rustc::middle::infer::type_variable","",113],[11,"eq","","",113],[11,"ne","","",113],[11,"new","","",114],[11,"var_diverges","","",114],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",114],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",114],[11,"new_var","","",114],[11,"probe","","",114],[11,"replace_if_possible","","",114],[11,"snapshot","","",114],[11,"rollback_to","","",114],[11,"commit","","",114],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",114],[6,"Value","rustc_borrowck::graphviz",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::type_variable","",115],[11,"fmt","rustc::middle::infer::unify","",116],[11,"clone","","",116],[11,"eq","","",116],[11,"ne","","",116],[11,"new","","",117],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a \"LIFO\" (stack) order.",117],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",117],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",117],[11,"new_key","","",117],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path\ncompression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure",117],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! Also, we must be in the\nmiddle of a snapshot.",117],[11,"unify","","Either redirects node_a to node_b or vice versa, depending on the relative rank. Returns\nthe new root and rank. You should then update the value of the new root to something\nsuitable.",117],[6,"Value","rustc_borrowck::graphviz",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::unify","",118],[11,"simple_vars","rustc::middle::infer","Unifies two simple keys. Because simple keys do not have any subtyping relationships, if\nboth keys have already been associated with a value, then those two values must be the\nsame.",89],[11,"simple_var_t","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",89],[11,"probe_var","","",89],[6,"Value","rustc_borrowck::graphviz",""],[11,"index","rustc::middle::ty","",119],[11,"from_index","","",119],[11,"unification_table","","",119],[11,"tag","","",119],[11,"to_type","","",120],[11,"to_type_err","","",120],[6,"Value","rustc_borrowck::graphviz",""],[11,"index","rustc::middle::ty","",121],[11,"from_index","","",121],[11,"unification_table","","",121],[11,"tag","","",121],[11,"to_type","syntax::ast","",122],[11,"to_type_err","","",122],[11,"fmt","rustc::middle::infer","",123],[11,"clone","","",123],[11,"fmt","","",124],[11,"clone","","",124],[11,"fmt","","",125],[11,"clone","","",125],[11,"fmt","","",126],[11,"clone","","",126],[11,"fmt","","",127],[11,"clone","","",127],[11,"fmt","","",128],[11,"clone","","",128],[11,"fmt","","",129],[11,"then","core::result","",130],[11,"to_ures","","",130],[11,"compare","","",130],[11,"freshen","rustc::middle::infer","",89],[11,"type_var_diverges","","",89],[11,"freshener","","",89],[11,"type_is_unconstrained_numeric","","",89],[11,"combine_fields","","",89],[11,"equate","","",89],[11,"sub","","",89],[11,"lub","","",89],[11,"commit_unconditionally","","Execute `f` and commit the bindings",89],[11,"commit_if_ok","","Execute `f` and commit the bindings if successful",89],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",89],[11,"try","","Execute `f`, unroll bindings on panic",89],[11,"probe","","Execute `f` then unroll any bindings it creates",89],[11,"add_given","","",89],[11,"sub_types","","",89],[11,"eq_types","","",89],[11,"sub_trait_refs","","",89],[11,"sub_poly_trait_refs","","",89],[11,"skolemize_late_bound_regions","","See `higher_ranked::skolemize_late_bound_regions`",89],[11,"leak_check","","See `higher_ranked::leak_check`",89],[11,"plug_leaks","","See `higher_ranked::plug_leaks`",89],[11,"equality_predicate","","",89],[11,"region_outlives_predicate","","",89],[11,"next_ty_var_id","","",89],[11,"next_ty_var","","",89],[11,"next_diverging_ty_var","","",89],[11,"next_ty_vars","","",89],[11,"next_int_var_id","","",89],[11,"next_float_var_id","","",89],[11,"next_region_var","","",89],[11,"region_vars_for_defs","","",89],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",89],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",89],[11,"fresh_bound_region","","",89],[11,"resolve_regions_and_report_errors","","",89],[11,"ty_to_string","","",89],[11,"tys_to_string","","",89],[11,"trait_ref_to_string","","",89],[11,"shallow_resolve","","",89],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",89],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",89],[11,"type_error_message_str","","",89],[11,"type_error_message_str_with_expected","","",89],[11,"type_error_message","","",89],[11,"report_mismatched_types","","",89],[11,"replace_late_bound_regions_with_fresh_var","","",89],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",89],[11,"can_equate","","",89],[11,"span","","",125],[11,"types","","",125],[11,"dummy","","",125],[11,"repr","","",125],[11,"span","","",123],[11,"repr","","",123],[11,"span","","",126],[11,"repr","","",126],[11,"span","","",128],[11,"repr","","",128],[11,"hash","rustc::middle::lang_items","",131],[11,"eq","","",131],[11,"ne","","",131],[11,"from_i64","","",131],[11,"from_u64","","",131],[11,"new","","",132],[11,"items","","",132],[11,"item_name","","",132],[11,"require","","",132],[11,"from_builtin_kind","","",132],[11,"to_builtin_kind","","",132],[11,"fn_trait_kind","","",132],[11,"send_trait","","",132],[11,"sized_trait","","",132],[11,"copy_trait","","",132],[11,"sync_trait","","",132],[11,"drop_trait","","",132],[11,"add_trait","","",132],[11,"sub_trait","","",132],[11,"mul_trait","","",132],[11,"div_trait","","",132],[11,"rem_trait","","",132],[11,"neg_trait","","",132],[11,"not_trait","","",132],[11,"bitxor_trait","","",132],[11,"bitand_trait","","",132],[11,"bitor_trait","","",132],[11,"shl_trait","","",132],[11,"shr_trait","","",132],[11,"index_trait","","",132],[11,"index_mut_trait","","",132],[11,"range_struct","","",132],[11,"range_from_struct","","",132],[11,"range_to_struct","","",132],[11,"range_full_struct","","",132],[11,"unsafe_cell_type","","",132],[11,"deref_trait","","",132],[11,"deref_mut_trait","","",132],[11,"fn_trait","","",132],[11,"fn_mut_trait","","",132],[11,"fn_once_trait","","",132],[11,"eq_trait","","",132],[11,"ord_trait","","",132],[11,"str_eq_fn","","",132],[11,"panic_fn","","",132],[11,"panic_bounds_check_fn","","",132],[11,"panic_fmt","","",132],[11,"exchange_malloc_fn","","",132],[11,"exchange_free_fn","","",132],[11,"strdup_uniq_fn","","",132],[11,"start_fn","","",132],[11,"ty_desc","","",132],[11,"opaque","","",132],[11,"eh_personality","","",132],[11,"exchange_heap","","",132],[11,"owned_box","","",132],[11,"phantom_fn","","",132],[11,"phantom_data","","",132],[11,"covariant_type","","",132],[11,"contravariant_type","","",132],[11,"invariant_type","","",132],[11,"covariant_lifetime","","",132],[11,"contravariant_lifetime","","",132],[11,"invariant_lifetime","","",132],[11,"no_copy_bound","","",132],[11,"managed_bound","","",132],[11,"non_zero","","",132],[11,"stack_exhausted","","",132],[11,"debug_trait","","",132],[11,"visit_item","","",133],[11,"new","","",133],[11,"collect_item","","",133],[11,"collect_local_language_items","","",133],[11,"collect_external_language_items","","",133],[11,"collect","","",133],[11,"eq","rustc::middle::liveness","",134],[11,"ne","","",134],[11,"eq","","",135],[11,"ne","","",135],[11,"clone","","",135],[11,"fmt","","",136],[11,"eq","","",136],[11,"ne","","",136],[11,"visit_fn","","",137],[11,"visit_local","","",137],[11,"visit_expr","","",137],[11,"visit_arm","","",137],[11,"fmt","","",135],[11,"fmt","","",134],[11,"fmt","","",138],[11,"fmt","","",139],[11,"visit_fn","","",140],[11,"visit_local","","",140],[11,"visit_expr","","",140],[11,"visit_arm","","",140],[11,"clone","","",141],[11,"fmt","rustc::middle::mem_categorization","",142],[11,"eq","","",142],[11,"ne","","",142],[11,"clone","","",142],[11,"fmt","","",143],[11,"eq","","",143],[11,"ne","","",143],[11,"clone","","",143],[11,"fmt","","",144],[11,"hash","","",144],[11,"eq","","",144],[11,"ne","","",144],[11,"clone","","",144],[11,"fmt","","",145],[11,"hash","","",145],[11,"eq","","",145],[11,"ne","","",145],[11,"clone","","",145],[11,"fmt","","",146],[11,"hash","","",146],[11,"eq","","",146],[11,"ne","","",146],[11,"clone","","",146],[11,"fmt","","",147],[11,"hash","","",147],[11,"eq","","",147],[11,"ne","","",147],[11,"clone","","",147],[11,"fmt","","",148],[11,"hash","","",148],[11,"eq","","",148],[11,"ne","","",148],[11,"clone","","",148],[11,"fmt","","",149],[11,"hash","","",149],[11,"eq","","",149],[11,"ne","","",149],[11,"clone","","",149],[11,"fmt","","",150],[11,"eq","","",150],[11,"ne","","",150],[11,"clone","","",150],[11,"fmt","","",151],[11,"eq","","",151],[11,"ne","","",151],[11,"clone","","",151],[11,"id","syntax::ast","",152],[11,"span","","",152],[11,"id","","",153],[11,"span","","",153],[11,"from_mutbl","rustc::middle::mem_categorization","",149],[11,"from_borrow_kind","","",149],[11,"from_pointer_kind","","",149],[11,"inherit","","",149],[11,"is_mutable","","",149],[11,"is_immutable","","",149],[11,"to_user_str","","",149],[11,"new","","",154],[11,"cat_expr","","",154],[11,"cat_expr_autoderefd","","",154],[11,"cat_expr_unadjusted","","",154],[11,"cat_def","","",154],[11,"cat_rvalue_node","","",154],[11,"cat_rvalue","","",154],[11,"cat_field","","",154],[11,"cat_tup_field","","",154],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",154],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",154],[11,"cat_imm_interior","","",154],[11,"cat_downcast","","",154],[11,"cat_pattern","","",154],[11,"guarantor","","Returns `self` after stripping away any owned pointer derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",151],[11,"freely_aliasable","","Returns `Some(_)` if this lvalue represents a freely aliasable pointer type.",151],[11,"upvar","","",151],[11,"descriptive_string","","",151],[11,"repr","","",151],[11,"repr","","",142],[11,"repr","","",144],[11,"repr","","",145],[11,"repr","rustc::middle::ty","",155],[11,"repr","rustc::middle::mem_categorization","",143],[11,"user_string","","",143],[11,"fmt","rustc::middle::privacy","",156],[11,"fmt","","",157],[11,"fmt","","",158],[11,"eq","","",158],[11,"ne","","",158],[11,"or","","",156],[11,"visit_expr","rustc::middle::reachable","",159],[11,"visit_item","","",159],[11,"fmt","rustc::middle::region","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"hash","","",18],[11,"cmp","","",18],[11,"partial_cmp","","",18],[11,"lt","","",18],[11,"le","","",18],[11,"gt","","",18],[11,"ge","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"fmt","","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"hash","","",19],[11,"cmp","","",19],[11,"partial_cmp","","",19],[11,"lt","","",19],[11,"le","","",19],[11,"gt","","",19],[11,"ge","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"new","","",19],[11,"to_code_extent","","",19],[11,"fmt","","",160],[11,"decode","","",160],[11,"encode","","",160],[11,"hash","","",160],[11,"cmp","","",160],[11,"partial_cmp","","",160],[11,"lt","","",160],[11,"le","","",160],[11,"gt","","",160],[11,"ge","","",160],[11,"eq","","",160],[11,"ne","","",160],[11,"clone","","",160],[11,"from_node_id","","Creates a scope that represents the dynamic extent associated\nwith `node_id`.",18],[11,"node_id","","Returns a node id associated with this scope.",18],[11,"map_id","","Maps this scope to a potentially new one according to the\nNodeId transformer `f_id`.",18],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",18],[11,"fmt","","",161],[11,"eq","","",161],[11,"ne","","",161],[11,"fmt","","",162],[11,"eq","","",162],[11,"ne","","",162],[11,"fmt","","",163],[11,"eq","","",163],[11,"ne","","",163],[11,"fmt","","",164],[11,"each_encl_scope","","",165],[11,"each_var_scope","","",165],[11,"each_encl_free_region","","",165],[11,"each_rvalue_scope","","",165],[11,"each_terminating_scope","","",165],[11,"relate_free_regions","","",165],[11,"record_encl_scope","","",165],[11,"record_var_scope","","",165],[11,"record_rvalue_scope","","",165],[11,"mark_as_terminating_scope","","Records that a scope is a TERMINATING SCOPE. Whenever we create automatic temporaries --\ne.g. by an expression like `a().f` -- they will be freed within the innermost terminating\nscope.",165],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",165],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",165],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",165],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",165],[11,"var_region","","Returns the lifetime of the variable `id`.",165],[11,"scopes_intersect","","",165],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",165],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `free_region_map`.  Note that\nit is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n(that is, the user can give two different names to the same lifetime).",165],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",165],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",165],[11,"visit_block","","",166],[11,"visit_item","","",166],[11,"visit_fn","","",166],[11,"visit_arm","","",166],[11,"visit_pat","","",166],[11,"visit_stmt","","",166],[11,"visit_expr","","",166],[11,"visit_local","","",166],[11,"fmt","rustc::middle::resolve_lifetime","",167],[11,"decode","","",167],[11,"encode","","",167],[11,"hash","","",167],[11,"eq","","",167],[11,"ne","","",167],[11,"clone","","",167],[11,"visit_item","","",168],[11,"visit_fn","","",168],[11,"visit_ty","","",168],[11,"visit_ty_method","","",168],[11,"visit_block","","",168],[11,"visit_lifetime_ref","","",168],[11,"visit_generics","","",168],[11,"visit_poly_trait_ref","","",168],[11,"fmt","","",169],[11,"visit_item","rustc::middle::stability","",170],[11,"visit_fn","","",170],[11,"visit_trait_item","","",170],[11,"visit_variant","","",170],[11,"visit_struct_field","","",170],[11,"visit_foreign_item","","",170],[11,"build","","Construct the stability index for a crate being compiled.",171],[11,"new","","",171],[11,"visit_item","","",172],[11,"visit_expr","","",172],[11,"visit_path","","",172],[11,"visit_pat","","",172],[11,"fmt","rustc::middle::subst","",173],[11,"hash","","",173],[11,"eq","","",173],[11,"ne","","",173],[11,"clone","","",173],[11,"fmt","","",174],[11,"hash","","",174],[11,"eq","","",174],[11,"ne","","",174],[11,"clone","","",174],[11,"new","","",173],[11,"new_type","","",173],[11,"new_trait","","",173],[11,"erased","","",173],[11,"empty","","",173],[11,"trans_empty","","",173],[11,"is_noop","","",173],[11,"type_for_def","","",173],[11,"has_regions_escaping_depth","","",173],[11,"self_ty","","",173],[11,"with_self_ty","","",173],[11,"erase_regions","","",173],[11,"regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",173],[11,"mut_regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",173],[11,"with_method","","",173],[11,"is_erased","","",174],[11,"fmt","","",175],[11,"decode","","",175],[11,"encode","","",175],[11,"hash","","",175],[11,"clone","","",175],[11,"eq","","",175],[11,"ne","","",175],[11,"cmp","","",175],[11,"partial_cmp","","",175],[11,"lt","","",175],[11,"le","","",175],[11,"gt","","",175],[11,"ge","","",175],[11,"all","","",175],[11,"to_uint","","",175],[11,"from_uint","","",175],[11,"decode","","",176],[11,"encode","","",176],[11,"hash","","",176],[11,"clone","","",176],[11,"eq","","",176],[11,"ne","","",176],[11,"fmt","","",176],[11,"empty","","",176],[11,"params_from_type","","",176],[11,"new","","`t` is the type space.\n`s` is the self space.\n`a` is the assoc space.\n`f` is the fn space.",176],[11,"push","","Appends `value` to the vector associated with `space`.",176],[11,"extend","","Appends `values` to the vector associated with `space`.",176],[11,"pop","","",176],[11,"truncate","","",176],[11,"replace","","",176],[11,"get_self","","",176],[11,"len","","",176],[11,"is_empty_in","","",176],[11,"get_slice","","",176],[11,"get_mut_slice","","",176],[11,"opt_get","","",176],[11,"get","","",176],[11,"iter","","",176],[11,"into_iter","","",176],[11,"iter_enumerated","","",176],[11,"as_slice","","",176],[11,"into_vec","","",176],[11,"all_vecs","","",176],[11,"all","","",176],[11,"any","","",176],[11,"is_empty","","",176],[11,"map","","",176],[11,"map_enumerated","","",176],[11,"map_move","","",176],[11,"split","","",176],[11,"with_vec","","",176],[11,"clone","","",177],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","rustc::middle::subst","",177],[6,"Item","rustc_borrowck::graphviz",""],[6,"IntoIter","",""],[11,"into_iter","rustc::middle::subst","",176],[6,"Item","rustc_borrowck::graphviz",""],[6,"IntoIter","",""],[11,"tcx","rustc::middle::subst","",178],[11,"enter_region_binder","","",178],[11,"exit_region_binder","","",178],[11,"fold_region","","",178],[11,"fold_ty","","",178],[11,"clone","rustc::middle::traits::fulfill","",179],[11,"new","","",180],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `<SomeType as SomeTrait>::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we'll unify `$0` with\n`projection_ty` again.",180],[11,"register_builtin_bound","","",180],[11,"register_region_obligation","","",180],[11,"register_predicate_obligation","","",180],[11,"region_obligations","","",180],[11,"select_all_or_error","","",180],[11,"select_new_obligations","","Attempts to select obligations that were registered since the call to a selection routine.\nThis is used by the type checker to eagerly attempt to resolve obligations in hopes of\ngaining type information. It'd be equally valid to use `select_where_possible` but it\nresults in `O(n^2)` performance (#18208).",180],[11,"select_where_possible","","",180],[11,"pending_obligations","","",180],[11,"repr","","",179],[11,"clone","rustc::middle::traits::project","",181],[11,"eq","","",182],[11,"ne","","",182],[11,"tcx","","",183],[11,"fold_ty","","",183],[11,"with","","",184],[11,"repr","","",185],[11,"repr","","",182],[11,"fold_with","","",184],[11,"repr","","",184],[11,"fmt","rustc::middle::traits::object_safety","",186],[11,"clone","","",186],[11,"repr","","",187],[11,"clone","rustc::middle::traits::select","",188],[11,"fmt","","",189],[11,"clone","","",190],[11,"fmt","","",190],[11,"eq","","",190],[11,"ne","","",190],[11,"fmt","","",191],[11,"new","","",192],[11,"intercrate","","",192],[11,"infcx","","",192],[11,"tcx","","",192],[11,"param_env","","",192],[11,"closure_typer","","",192],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",192],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",192],[11,"evaluate_impl","","Evaluates whether the impl with id `impl_def_id` could be applied to the self type\n`obligation_self_ty`. This can be used either for trait or inherent impls.",192],[11,"repr","","",190],[11,"new","","",188],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","core::option","",12],[11,"repr","rustc::middle::traits::select","",193],[11,"may_apply","","",194],[11,"filter_to_traits","rustc::middle::traits::util","",195],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","rustc::middle::traits::util","",195],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","rustc::middle::traits::util","",196],[11,"fmt","rustc::middle::traits","",197],[11,"fmt","","",198],[11,"repr","","",199],[11,"repr","","",200],[11,"repr","","",197],[11,"repr","","",201],[11,"repr","","",202],[11,"repr","","",198],[11,"repr","","",203],[11,"repr","","",204],[11,"repr","","",205],[11,"fmt","","",205],[11,"repr","rustc::middle::traits::project","",181],[11,"fmt","","",181],[11,"eq","rustc::middle::traits","",199],[11,"ne","","",199],[11,"clone","","",199],[11,"eq","","",206],[11,"ne","","",206],[11,"clone","","",206],[11,"eq","","",207],[11,"ne","","",207],[11,"clone","","",207],[11,"eq","","",208],[11,"ne","","",208],[11,"clone","","",208],[11,"fmt","","",203],[11,"clone","","",203],[11,"clone","","",205],[11,"clone","","",200],[11,"fmt","","",200],[11,"eq","","",197],[11,"ne","","",197],[11,"clone","","",197],[11,"clone","","",202],[11,"fmt","","",202],[11,"clone","","",201],[11,"fmt","","",201],[11,"clone","","",198],[11,"eq","","",198],[11,"ne","","",198],[11,"new","","",199],[11,"misc","","",199],[11,"with","","",199],[11,"new","","",206],[11,"misc","","",206],[11,"dummy","","",206],[11,"iter_nested","","",200],[11,"map_nested","","",200],[11,"map_move_nested","","",200],[11,"iter_nested","","",197],[11,"map_nested","","",197],[11,"map_move_nested","","",197],[11,"iter_nested","","",202],[11,"map_nested","","",202],[11,"map_move_nested","","",202],[11,"iter_nested","","",201],[11,"map_nested","","",201],[11,"map_move_nested","","",201],[11,"is_overflow","","",204],[11,"hash","rustc::middle::ty","",209],[11,"eq","","",209],[11,"ne","","",209],[11,"clone","","",209],[11,"fmt","","",210],[11,"clone","","",210],[11,"id","","",210],[11,"fmt","","",211],[11,"clone","","",211],[11,"def_id","","",211],[11,"name","","",211],[11,"container","","",211],[11,"as_opt_method","","",211],[11,"fmt","","",212],[11,"clone","","",212],[11,"def_id","","",212],[11,"fmt","","",213],[11,"clone","","",213],[11,"new","","",213],[11,"container_id","","",213],[11,"fmt","","",214],[11,"clone","","",214],[11,"fmt","","",215],[11,"hash","","",215],[11,"eq","","",215],[11,"ne","","",215],[11,"clone","","",215],[11,"fmt","","",216],[11,"clone","","",216],[11,"hash","","",217],[11,"eq","","",217],[11,"ne","","",217],[11,"encode","","",218],[11,"decode","","",218],[11,"eq","","",218],[11,"ne","","",218],[11,"clone","","",218],[11,"fmt","","",219],[11,"encode","","",219],[11,"decode","","",219],[11,"eq","","",219],[11,"ne","","",219],[11,"clone","","",219],[11,"fmt","","",220],[11,"clone","","",220],[11,"fmt","","",221],[11,"eq","","",221],[11,"ne","","",221],[11,"clone","","",221],[11,"fmt","","",222],[11,"clone","","",222],[11,"fmt","","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"clone","","",223],[11,"fmt","","",224],[11,"partial_cmp","","",224],[11,"lt","","",224],[11,"le","","",224],[11,"gt","","",224],[11,"ge","","",224],[11,"eq","","",224],[11,"ne","","",224],[11,"decode","","",224],[11,"encode","","",224],[11,"clone","","",224],[11,"fmt","","",25],[11,"clone","","",25],[11,"fmt","","",225],[11,"clone","","",225],[11,"fmt","","",226],[11,"clone","","",226],[11,"clone","","",227],[11,"fmt","","",228],[11,"hash","","",228],[11,"eq","","",228],[11,"ne","","",228],[11,"clone","","",228],[11,"decode","","",229],[11,"encode","","",229],[11,"fmt","","",229],[11,"hash","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"clone","","",229],[11,"expr","","",228],[11,"autoobject","","",228],[11,"autoderef","","",228],[11,"clone","","",230],[11,"new","","",231],[11,"hash","","",232],[11,"cmp","","",232],[11,"partial_cmp","","",232],[11,"lt","","",232],[11,"le","","",232],[11,"gt","","",232],[11,"ge","","",232],[11,"clone","","",232],[11,"eq","","",232],[11,"ne","","",232],[11,"empty","","Returns an empty set of flags.",232],[11,"all","","Returns the set containing all flags.",232],[11,"bits","","Returns the raw value of the flags currently stored.",232],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",232],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",232],[11,"is_empty","","Returns `true` if no flags are currently stored.",232],[11,"is_all","","Returns `true` if all flags are currently set.",232],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",232],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",232],[11,"insert","","Inserts the specified flags in-place.",232],[11,"remove","","Removes the specified flags in-place.",232],[11,"toggle","","Toggles the specified flags in-place.",232],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitor","rustc::middle::ty","Returns the union of the two sets of flags.",232],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitxor","rustc::middle::ty","Returns the left flags, but with all the right flags toggled.",232],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitand","rustc::middle::ty","Returns the intersection between the two sets of flags.",232],[6,"Output","rustc_borrowck::graphviz",""],[11,"sub","rustc::middle::ty","Returns the set difference of the two sets of flags.",232],[6,"Output","rustc_borrowck::graphviz",""],[11,"not","rustc::middle::ty","Returns the complement of this set of flags.",232],[11,"print_debug_stats","","",233],[11,"fmt","","",234],[11,"fmt","","",232],[11,"eq","","",234],[11,"hash","","",234],[11,"eq","","",235],[11,"hash","","",235],[11,"borrow","","",235],[11,"fmt","","",236],[11,"hash","","",236],[11,"eq","","",236],[11,"ne","","",236],[11,"clone","","",236],[11,"fmt","","",237],[11,"hash","","",237],[11,"eq","","",237],[11,"ne","","",237],[11,"clone","","",237],[11,"fmt","","",238],[11,"hash","","",238],[11,"eq","","",238],[11,"ne","","",238],[11,"clone","","",238],[11,"diverges","","",238],[11,"unwrap","","",238],[11,"diverges","","",90],[11,"hash","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"clone","","",85],[11,"inputs","","",90],[11,"input","","",90],[11,"output","","",90],[11,"variadic","","",90],[11,"fmt","","",239],[11,"hash","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"clone","","",239],[11,"fmt","","",240],[11,"decode","","",240],[11,"encode","","",240],[11,"hash","","",240],[11,"eq","","",240],[11,"ne","","",240],[11,"clone","","",240],[11,"fmt","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"hash","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",241],[11,"hash","","",241],[11,"eq","","",241],[11,"ne","","",241],[11,"clone","","",241],[11,"decode","","",242],[11,"encode","","",242],[11,"fmt","","",242],[11,"hash","","",242],[11,"eq","","",242],[11,"ne","","",242],[11,"clone","","",242],[11,"fmt","","",24],[11,"decode","","",24],[11,"encode","","",24],[11,"clone","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"fmt","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"clone","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"is_bound","","",16],[11,"escapes_depth","","",16],[11,"fmt","","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"hash","","",17],[11,"cmp","","",17],[11,"partial_cmp","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"fmt","","",20],[11,"decode","","",20],[11,"encode","","",20],[11,"hash","","",20],[11,"cmp","","",20],[11,"partial_cmp","","",20],[11,"lt","","",20],[11,"le","","",20],[11,"gt","","",20],[11,"ge","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"fmt","","",243],[11,"hash","","",243],[11,"eq","","",243],[11,"ne","","",243],[11,"clone","","",243],[11,"fmt","","",244],[11,"hash","","",244],[11,"eq","","",244],[11,"ne","","",244],[11,"clone","","",244],[11,"principal_def_id","","",244],[11,"principal_trait_ref_with_self_ty","","Object types don't have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",244],[11,"projection_bounds_with_self_ty","","",244],[11,"fmt","","",83],[11,"hash","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"clone","","",83],[11,"self_ty","","",90],[11,"def_id","","",90],[11,"substs","","",90],[11,"input_types","","",90],[11,"to_poly_trait_predicate","","",90],[11,"fmt","","",90],[11,"hash","","",90],[11,"eq","","",90],[11,"ne","","",90],[11,"clone","","",90],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a\nrisky thing to do because it's easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",90],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"fmt","","",245],[11,"clone","","",245],[11,"fmt","","",246],[11,"clone","","",246],[11,"fmt","","",247],[11,"clone","","",247],[11,"fmt","","",248],[11,"clone","","",248],[11,"hash","","",248],[11,"eq","","",248],[11,"ne","","",248],[11,"fmt","","",249],[11,"clone","","",249],[11,"hash","","",249],[11,"eq","","",249],[11,"ne","","",249],[11,"fmt","","",250],[11,"hash","","",250],[11,"decode","","",250],[11,"eq","","",250],[11,"ne","","",250],[11,"encode","","",250],[11,"clone","","",250],[11,"to_usize","","",250],[11,"from_usize","","",250],[11,"hash","","",251],[11,"eq","","",251],[11,"ne","","",251],[11,"clone","","",251],[11,"hash","","",119],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"hash","","",121],[11,"eq","","",121],[11,"ne","","",121],[11,"clone","","",121],[11,"hash","","",252],[11,"decode","","",252],[11,"encode","","",252],[11,"eq","","",252],[11,"ne","","",252],[11,"clone","","",252],[11,"hash","","",253],[11,"eq","","",253],[11,"ne","","",253],[11,"clone","","",253],[11,"fmt","","",254],[11,"hash","","",254],[11,"eq","","",254],[11,"ne","","",254],[11,"decode","","",254],[11,"encode","","",254],[11,"clone","","",254],[11,"fmt","","",255],[11,"hash","","",255],[11,"decode","","",255],[11,"encode","","",255],[11,"clone","","",255],[11,"eq","","",255],[11,"ne","","",255],[11,"fmt","","",251],[11,"fmt","","",119],[11,"fmt","","",121],[11,"fmt","","",252],[11,"fmt","","",85],[11,"fmt","","",253],[11,"fmt","","",120],[11,"fmt","","",256],[11,"clone","","",256],[11,"fmt","","",257],[11,"clone","","",257],[11,"fmt","","",258],[11,"clone","","",258],[11,"decode","","",258],[11,"encode","","",258],[11,"to_early_bound_region","","",258],[11,"fmt","","",259],[11,"clone","","",259],[11,"empty","","",259],[11,"is_empty","","",259],[11,"has_type_params","","",259],[11,"has_region_params","","",259],[11,"fmt","","",260],[11,"clone","","",260],[11,"empty","","",260],[11,"instantiate","","",260],[11,"instantiate_supertrait","","",260],[11,"fmt","","",261],[11,"hash","","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"clone","","",261],[11,"subst_supertrait","","Performs a substituion suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",261],[11,"fmt","","",262],[11,"hash","","",262],[11,"eq","","",262],[11,"ne","","",262],[11,"clone","","",262],[11,"def_id","","",262],[11,"input_types","","",262],[11,"self_ty","","",262],[11,"def_id","","",90],[11,"fmt","","",263],[11,"hash","","",263],[11,"eq","","",263],[11,"ne","","",263],[11,"clone","","",263],[11,"fmt","","",264],[11,"hash","","",264],[11,"eq","","",264],[11,"ne","","",264],[11,"clone","","",264],[11,"fmt","","",84],[11,"hash","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"clone","","",84],[11,"item_name","","",90],[11,"sort_key","","",90],[11,"fmt","","",265],[11,"hash","","",265],[11,"eq","","",265],[11,"ne","","",265],[11,"clone","","",265],[11,"sort_key","","",265],[11,"to_poly_trait_ref","alloc::rc","",82],[11,"to_poly_trait_ref","rustc::middle::ty","",90],[11,"to_poly_trait_ref","","",90],[11,"as_predicate","alloc::rc","",82],[11,"as_predicate","rustc::middle::ty","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",261],[11,"has_escaping_regions","","",261],[11,"to_opt_poly_trait_ref","","",261],[11,"fmt","","",266],[11,"clone","","",266],[11,"empty","","",266],[11,"has_escaping_regions","","",266],[11,"is_empty","","",266],[11,"new","","",83],[11,"self_ty","","",83],[11,"input_types","","",83],[11,"clone","","",267],[11,"with_caller_bounds","","",267],[11,"for_item","","",267],[11,"fmt","","",268],[11,"clone","","",268],[11,"clone","","",269],[11,"decode","","",155],[11,"encode","","",155],[11,"fmt","","",155],[11,"eq","","",155],[11,"ne","","",155],[11,"clone","","",155],[11,"trait_did","","",155],[11,"mk_substs","","",233],[11,"mk_bare_fn","","",233],[11,"mk_region","","",233],[11,"closure_kind","","",233],[11,"closure_type","","",233],[11,"type_parameter_def","","",233],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",234],[11,"walk_children","","Iterator that walks types reachable from `self`, in\ndepth-first order. Note that this is a shallow walk. For\nexample:",234],[11,"as_opt_param_ty","","",234],[11,"is_param","","",234],[11,"new","","",239],[11,"for_self","","",239],[11,"for_def","","",239],[11,"to_ty","","",239],[11,"is_self","","",239],[11,"empty","","",269],[11,"is_noop","","",269],[11,"empty","","",248],[11,"clone","","",270],[11,"when","","",270],[11,"intersects","","",270],[11,"owns_managed","","",270],[11,"owns_owned","","",270],[11,"is_sized","","",270],[11,"interior_param","","",270],[11,"interior_unsafe","","",270],[11,"interior_unsized","","",270],[11,"needs_drop","","",270],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",270],[11,"reference","","Includes only those bits that still apply when indirected through a reference (`&`)",270],[11,"managed_pointer","","Includes only those bits that still apply when indirected through a managed pointer (`@`)",270],[11,"unsafe_pointer","","Includes only those bits that still apply when indirected through an unsafe pointer (`*`)",270],[11,"union","","",270],[11,"has_dtor","","",270],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitor","rustc::middle::ty","",270],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitand","rustc::middle::ty","",270],[6,"Output","rustc_borrowck::graphviz",""],[11,"sub","rustc::middle::ty","",270],[11,"fmt","","",270],[11,"fmt","","",271],[11,"eq","","",271],[11,"ne","","",271],[11,"cmp","","",271],[11,"partial_cmp","","",271],[11,"lt","","",271],[11,"le","","",271],[11,"gt","","",271],[11,"ge","","",271],[11,"repr","","",247],[11,"clone","","",272],[11,"from_ast_variant","","Creates a new VariantInfo from the corresponding ast representation.",272],[11,"is_present","","",273],[11,"has_drop_flag","","",273],[11,"clone","","",274],[11,"to_string","","",219],[11,"from_mutbl","","",242],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",242],[11,"to_user_str","","",242],[11,"is_method_call","","",233],[11,"upvar_capture","","",233],[11,"node_ty","","",267],[11,"expr_ty_adjusted","","",267],[11,"node_method_ty","","",267],[11,"node_method_origin","","",267],[11,"adjustments","","",267],[11,"is_method_call","","",267],[11,"temporary_scope","","",267],[11,"upvar_capture","","",267],[11,"type_moves_by_default","","",267],[11,"param_env","","",267],[11,"closure_kind","","",267],[11,"closure_type","","",267],[11,"closure_upvars","","",267],[11,"fmt","","",275],[11,"eq","","",275],[11,"ne","","",275],[11,"clone","","",275],[11,"decode","","",22],[11,"encode","","",22],[11,"clone","","",22],[11,"is_identity","","",220],[11,"is_identity","","",222],[11,"new","","",240],[11,"shifted","","",240],[11,"repr","","",220],[11,"repr","","",221],[11,"repr","","",222],[11,"repr","","",223],[11,"repr","","",244],[11,"repr","","",261],[11,"repr","","",230],[11,"has_regions_escaping_depth","rustc::middle::subst","",173],[11,"has_regions_escaping_depth","","",176],[11,"has_regions_escaping_depth","rustc::middle::ty","",268],[11,"has_regions_escaping_depth","","",16],[11,"has_regions_escaping_depth","","",260],[11,"has_regions_escaping_depth","","",261],[11,"has_regions_escaping_depth","","",83],[11,"has_regions_escaping_depth","rustc::middle::subst","",174],[11,"has_regions_escaping_depth","rustc::middle::ty","",90],[11,"has_regions_escaping_depth","","",263],[11,"has_regions_escaping_depth","","",262],[11,"has_regions_escaping_depth","","",264],[11,"has_regions_escaping_depth","","",84],[11,"has_regions_escaping_depth","","",265],[11,"repr","","",84],[11,"has_projection_types","collections::vec","",276],[11,"has_projection_types","rustc::middle::subst","",176],[11,"has_projection_types","rustc::middle::ty","",237],[11,"has_projection_types","","",274],[11,"has_projection_types","","",266],[11,"has_projection_types","","",261],[11,"has_projection_types","","",262],[11,"has_projection_types","","",263],[11,"has_projection_types","","",16],[11,"has_projection_types","","",264],[11,"has_projection_types","","",84],[11,"has_projection_types","","",265],[11,"has_projection_types","","",83],[11,"has_projection_types","rustc::middle::subst","",173],[11,"has_projection_types","core::option","",12],[11,"has_projection_types","alloc::rc","",82],[11,"has_projection_types","alloc::boxed","",277],[11,"has_projection_types","rustc::middle::ty","",90],[11,"has_projection_types","","",238],[11,"has_projection_types","","",85],[11,"has_projection_types","","",209],[11,"has_projection_types","","",236],[11,"references_error","","",90],[11,"references_error","alloc::rc","",82],[11,"references_error","rustc::middle::ty","",262],[11,"references_error","","",84],[11,"references_error","","",83],[11,"references_error","","",261],[11,"references_error","","",264],[11,"references_error","","",263],[11,"references_error","","",16],[11,"repr","","",237],[11,"repr","","",274],[11,"repr","","",209],[11,"repr","","",267],[11,"repr","","",256],[11,"fold_with","core::option","",12],[11,"fold_with","alloc::rc","",82],[11,"fold_with","alloc::boxed","",277],[11,"fold_with","collections::vec","",276],[11,"fold_with","rustc::middle::ty","",90],[11,"fold_with","syntax::owned_slice","",278],[11,"fold_with","rustc::middle::subst","",176],[11,"fold_with","rustc::middle::ty","",236],[11,"fold_with","","",237],[11,"fold_with","","",215],[11,"fold_with","","",238],[11,"fold_with","","",85],[11,"fold_with","","",83],[11,"fold_with","","",209],[11,"fold_with","","",16],[11,"fold_with","rustc::middle::subst","",173],[11,"fold_with","rustc::middle::ty","",269],[11,"fold_with","","",223],[11,"fold_with","","",25],[11,"fold_with","","",230],[11,"fold_with","collections::enum_set","",279],[11,"fold_with","rustc::middle::ty","",249],[11,"fold_with","","",248],[11,"fold_with","","",257],[11,"fold_with","","",256],[11,"fold_with","","",258],[11,"fold_with","","",259],[11,"fold_with","","",260],[11,"fold_with","","",261],[11,"fold_with","","",84],[11,"fold_with","","",265],[11,"fold_with","","",266],[11,"fold_with","","",221],[11,"fold_with","rustc::middle::traits","",199],[11,"fold_with","","",197],[11,"fold_with","","",202],[11,"fold_with","","",201],[11,"fold_with","","",200],[11,"fold_with","","",198],[11,"fold_with","rustc::middle::ty","",263],[11,"fold_with","","",262],[11,"fold_with","","",264],[11,"fold_with","","",274],[11,"fold_with","","",267],[11,"tcx","rustc::middle::ty_fold","",280],[11,"fold_ty","","",280],[11,"new","","",281],[11,"tcx","","",281],[11,"enter_region_binder","","",281],[11,"exit_region_binder","","",281],[11,"fold_region","","",281],[11,"tcx","","",282],[11,"fold_region","","",282],[11,"new","rustc::middle::ty_walk","",283],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",283],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","rustc::middle::ty_walk","",283],[11,"visit_foreign_item","rustc::middle::weak_lang_items","",284],[11,"from_i64","rustc::metadata::common","",285],[11,"from_u64","","",285],[11,"eq","","",285],[11,"ne","","",285],[11,"fmt","","",286],[11,"clone","","",286],[11,"fmt","rustc::metadata::tydecode","",287],[11,"clone","rustc::metadata::encoder","",288],[11,"visit_expr","","",289],[11,"visit_item","","",289],[11,"visit_foreign_item","","",289],[11,"visit_item","","",290],[11,"eq","rustc::metadata::decoder","",291],[11,"ne","","",291],[11,"fmt","","",292],[11,"clone","","",292],[11,"clone","","",293],[11,"visit_item","rustc::metadata::creader","",294],[11,"as_slice","","",295],[11,"new","","",294],[11,"read_crates","","",294],[11,"read_exported_macros","","Read exported macros.",294],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",294],[11,"clone","rustc::metadata::cstore","",296],[11,"eq","","",296],[11,"ne","","",296],[11,"fmt","","",296],[11,"from_i64","","",297],[11,"from_u64","","",297],[11,"eq","","",297],[11,"ne","","",297],[11,"clone","","",297],[11,"clone","","",298],[11,"eq","","",298],[11,"ne","","",298],[11,"new","","",299],[11,"next_crate_num","","",299],[11,"get_crate_data","","",299],[11,"get_crate_hash","","",299],[11,"set_crate_data","","",299],[11,"iter_crate_data","","",299],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",299],[11,"add_used_crate_source","","",299],[11,"get_used_crate_source","","",299],[11,"reset","","",299],[11,"get_used_crates","","",299],[11,"add_used_library","","",299],[11,"get_used_libraries","","",299],[11,"add_used_link_args","","",299],[11,"get_used_link_args","","",299],[11,"add_extern_mod_stmt_cnum","","",299],[11,"find_extern_mod_stmt_cnum","","",299],[11,"data","","",300],[11,"name","","",300],[11,"hash","","",300],[11,"as_slice","","",301],[11,"maybe_load_library_crate","rustc::metadata::loader","",302],[11,"load_library_crate","","",302],[11,"report_load_errs","","",302],[11,"as_slice","","",303],[11,"for_each_lib_search_path","rustc::metadata::filesearch","",304],[11,"get_lib_path","","",304],[11,"search","","",304],[11,"new","","",304],[11,"get_dylib_search_paths","","",304],[11,"get_tools_search_paths","","",304],[11,"visit_item","rustc::metadata::macro_import","",305],[11,"visit_mac","","",305],[11,"eq","rustc::session::config","",306],[11,"ne","","",306],[11,"clone","","",306],[11,"eq","","",307],[11,"ne","","",307],[11,"clone","","",307],[11,"cmp","","",308],[11,"partial_cmp","","",308],[11,"lt","","",308],[11,"le","","",308],[11,"gt","","",308],[11,"ge","","",308],[11,"eq","","",308],[11,"ne","","",308],[11,"clone","","",308],[11,"clone","","",309],[11,"clone","","",310],[11,"eq","","",311],[11,"ne","","",311],[11,"clone","","",311],[11,"filestem","","",312],[11,"clone","","",313],[11,"path","","",313],[11,"temp_path","","",313],[11,"with_extension","","",313],[11,"filestem","","",313],[11,"eq","","",314],[11,"ne","","",314],[11,"fmt","","",315],[11,"hash","","",315],[11,"cmp","","",315],[11,"clone","","",315],[11,"partial_cmp","","",315],[11,"lt","","",315],[11,"le","","",315],[11,"gt","","",315],[11,"ge","","",315],[11,"eq","","",315],[11,"ne","","",315],[11,"clone","","",316],[11,"is_empty","","",316],[11,"clone","","",317],[11,"clone","","",318],[11,"fmt","","",319],[11,"eq","","",319],[11,"ne","","",319],[11,"clone","","",319],[11,"eq","","",320],[11,"ne","","",320],[11,"clone","","",320],[11,"is_stable","","",320],[11,"fmt","","",315],[11,"fmt","rustc::session::search_paths","",321],[11,"clone","","",321],[11,"fmt","","",322],[11,"clone","","",322],[11,"eq","","",322],[11,"ne","","",322],[11,"new","","",321],[11,"add_path","","",321],[11,"iter","","",321],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","rustc::session::search_paths","",323],[11,"span_fatal","rustc::session","",324],[11,"span_fatal_with_code","","",324],[11,"fatal","","",324],[11,"span_err","","",324],[11,"span_err_with_code","","",324],[11,"err","","",324],[11,"err_count","","",324],[11,"has_errors","","",324],[11,"abort_if_errors","","",324],[11,"span_warn","","",324],[11,"span_warn_with_code","","",324],[11,"warn","","",324],[11,"opt_span_warn","","",324],[11,"span_note","","",324],[11,"span_end_note","","",324],[11,"span_help","","",324],[11,"fileline_note","","",324],[11,"fileline_help","","",324],[11,"note","","",324],[11,"help","","",324],[11,"opt_span_bug","","",324],[11,"span_bug","","",324],[11,"bug","","",324],[11,"span_unimpl","","",324],[11,"unimpl","","",324],[11,"add_lint","","",324],[11,"next_node_id","","",324],[11,"reserve_node_ids","","",324],[11,"diagnostic","","",324],[11,"codemap","","",324],[11,"impossible_case","","",324],[11,"verbose","","",324],[11,"time_passes","","",324],[11,"count_llvm_insns","","",324],[11,"count_type_sizes","","",324],[11,"time_llvm_passes","","",324],[11,"trans_stats","","",324],[11,"meta_stats","","",324],[11,"asm_comments","","",324],[11,"no_verify","","",324],[11,"borrowck_stats","","",324],[11,"print_llvm_passes","","",324],[11,"lto","","",324],[11,"no_landing_pads","","",324],[11,"unstable_options","","",324],[11,"print_enum_sizes","","",324],[11,"sysroot","","",324],[11,"target_filesearch","","",324],[11,"host_filesearch","","",324],[11,"args","rustc::plugin::registry","Get the plugin's arguments, if any.",325],[11,"register_syntax_extension","","Register a syntax extension of any kind.",325],[11,"register_macro","","Register a macro of the usual kind.",325],[11,"register_lint_pass","","Register a compiler lint pass.",325],[11,"register_lint_group","","Register a lint group.",325],[11,"visit_item","rustc::plugin::build","",326],[11,"fmt","rustc::lint","",327],[11,"name_lower","","Get the lint's name, with ASCII letters converted to lowercase.",327],[11,"clone","","",328],[11,"eq","","",328],[11,"hash","","",328],[11,"of","","Get the `LintId` for a `Lint`.",328],[11,"as_str","","Get the name of the lint.",328],[11,"fmt","","",329],[11,"cmp","","",329],[11,"partial_cmp","","",329],[11,"lt","","",329],[11,"le","","",329],[11,"gt","","",329],[11,"ge","","",329],[11,"eq","","",329],[11,"ne","","",329],[11,"clone","","",329],[11,"as_str","","Convert a level to a lower-case string.",329],[11,"from_str","","Convert a lower-case string to a level.",329],[11,"eq","","",330],[11,"ne","","",330],[11,"clone","","",330],[11,"get_lints","rustc::lint::builtin","",331],[11,"new","rustc::lint::context","",332],[11,"get_lints","","",332],[11,"get_lint_groups","","",332],[11,"register_pass","","",332],[11,"register_group","","",332],[11,"register_renamed","","",332],[11,"process_command_line","","",332],[11,"sess","","Get the overall compiler `Session` object.",333],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",333],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",333],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",333],[11,"visit_item","","",333],[11,"visit_foreign_item","","",333],[11,"visit_pat","","",333],[11,"visit_expr","","",333],[11,"visit_stmt","","",333],[11,"visit_fn","","",333],[11,"visit_ty_method","","",333],[11,"visit_struct_def","","",333],[11,"visit_struct_field","","",333],[11,"visit_variant","","",333],[11,"visit_ty","","",333],[11,"visit_ident","","",333],[11,"visit_mod","","",333],[11,"visit_local","","",333],[11,"visit_block","","",333],[11,"visit_arm","","",333],[11,"visit_decl","","",333],[11,"visit_expr_post","","",333],[11,"visit_generics","","",333],[11,"visit_trait_item","","",333],[11,"visit_opt_lifetime_ref","","",333],[11,"visit_lifetime_ref","","",333],[11,"visit_lifetime_def","","",333],[11,"visit_explicit_self","","",333],[11,"visit_mac","","",333],[11,"visit_path","","",333],[11,"visit_attribute","","",333],[11,"visit_id","","",333],[11,"get_lints","","",334],[11,"check_item","","",334],[11,"fmt","rustc::util::common","",335],[11,"clone","","",335],[11,"drop","","",336],[11,"visit_expr","","",337],[11,"visit_expr","","",338],[11,"repr","core::option","",12],[11,"repr","syntax::ptr","",339],[11,"repr","core::result","",130],[11,"repr","alloc::rc","",82],[11,"repr","alloc::boxed","",277],[11,"repr","syntax::owned_slice","",278],[11,"repr","collections::vec","",276],[11,"user_string","","",276],[11,"repr","rustc::middle::def","",15],[11,"user_string","rustc::middle::ty","",244],[11,"repr","","",257],[11,"repr","","",258],[11,"repr","","",234],[11,"repr","","",215],[11,"repr","rustc::middle::subst","",173],[11,"repr","","",176],[11,"repr","rustc::middle::ty","",269],[11,"repr","rustc::middle::subst","",174],[11,"repr","collections::enum_set","",279],[11,"repr","rustc::middle::ty","",248],[11,"repr","","",83],[11,"repr","","",340],[11,"repr","syntax::ast","",341],[11,"repr","","",152],[11,"repr","","",342],[11,"user_string","","",342],[11,"repr","","",343],[11,"repr","","",344],[11,"repr","","",345],[11,"repr","syntax::codemap","",346],[11,"repr","syntax::ast","",153],[11,"repr","rustc::middle::ty","",20],[11,"repr","","",16],[11,"user_string","","",16],[11,"repr","","",17],[11,"repr","rustc::middle::region","",18],[11,"repr","","",19],[11,"repr","syntax::ast","",11],[11,"repr","rustc::middle::ty","",268],[11,"repr","","",259],[11,"repr","","",260],[11,"repr","","",266],[11,"repr","","",218],[11,"repr","","",219],[11,"repr","","",213],[11,"repr","syntax::ast","",6],[11,"user_string","","",6],[11,"repr","","",5],[11,"repr","","",347],[11,"repr","","",348],[11,"repr","rustc::middle::ty","",236],[11,"repr","","",85],[11,"repr","","",238],[11,"repr","","",227],[11,"repr","","",25],[11,"repr","","",225],[11,"repr","","",226],[11,"repr","","",250],[11,"user_string","","",250],[11,"repr","syntax::codemap","",13],[11,"user_string","alloc::rc","",82],[11,"user_string","rustc::middle::ty","",248],[11,"repr","","",249],[11,"user_string","collections::enum_set","",279],[11,"user_string","rustc::middle::ty","",90],[11,"user_string","","",83],[11,"user_string","syntax::ast","",5],[11,"repr","syntax::abi","",349],[11,"user_string","","",349],[11,"repr","rustc::middle::ty","",241],[11,"repr","syntax::ast","",350],[11,"repr","rustc::middle::ty","",242],[11,"repr","","",23],[11,"repr","","",24],[11,"repr","","",119],[11,"repr","","",121],[11,"repr","","",252],[11,"repr","","",251],[11,"repr","","",120],[11,"repr","syntax::ast","",351],[11,"repr","","",352],[11,"repr","","",122],[11,"repr","rustc::middle::ty","",275],[11,"user_string","","",239],[11,"repr","","",239],[11,"repr","","",90],[11,"repr","std::collections::hash::map","",353],[11,"repr","rustc::middle::ty","",264],[11,"user_string","","",264],[11,"repr","","",263],[11,"user_string","","",263],[11,"repr","","",262],[11,"user_string","","",262],[11,"user_string","","",84],[11,"repr","","",265],[11,"user_string","","",265],[11,"user_string","","",261],[11,"default","rustc::util::nodemap","",354],[11,"write","","",354],[11,"finish","","",354],[11,"new","rustc::util::snapshot_vec","",355],[11,"record","","",355],[11,"push","","",355],[11,"get","","",355],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",355],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",355],[11,"start_snapshot","","",355],[11,"actions_since_snapshot","","",355],[11,"rollback_to","","",355],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",355],[11,"input","rustc_back::sha2","",356],[11,"reset","","",356],[11,"zero_until","","",356],[11,"next","","",356],[11,"full_buffer","","",356],[11,"position","","",356],[11,"remaining","","",356],[11,"size","","",356],[11,"new","","Construct a new instance of a SHA-256 digest.",357],[11,"input","","",357],[11,"result","","",357],[11,"reset","","",357],[11,"output_bits","","",357],[11,"open","rustc_llvm::archive_ro","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",358],[11,"read","","Reads a file in the archive",358],[11,"drop","","",358],[11,"describe","rustc_llvm::diagnostic","",359],[11,"unpack","","",360],[11,"eq","rustc_llvm","",361],[11,"ne","","",361],[11,"fmt","","",362],[11,"hash","","",363],[11,"cmp","","",363],[11,"partial_cmp","","",363],[11,"lt","","",363],[11,"le","","",363],[11,"gt","","",363],[11,"ge","","",363],[11,"clone","","",363],[11,"eq","","",363],[11,"ne","","",363],[11,"empty","","Returns an empty set of flags.",363],[11,"all","","Returns the set containing all flags.",363],[11,"bits","","Returns the raw value of the flags currently stored.",363],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",363],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",363],[11,"is_empty","","Returns `true` if no flags are currently stored.",363],[11,"is_all","","Returns `true` if all flags are currently set.",363],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",363],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",363],[11,"insert","","Inserts the specified flags in-place.",363],[11,"remove","","Removes the specified flags in-place.",363],[11,"toggle","","Toggles the specified flags in-place.",363],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitor","rustc_llvm","Returns the union of the two sets of flags.",363],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitxor","rustc_llvm","Returns the left flags, but with all the right flags toggled.",363],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitand","rustc_llvm","Returns the intersection between the two sets of flags.",363],[6,"Output","rustc_borrowck::graphviz",""],[11,"sub","rustc_llvm","Returns the set difference of the two sets of flags.",363],[6,"Output","rustc_borrowck::graphviz",""],[11,"not","rustc_llvm","Returns the complement of this set of flags.",363],[11,"apply_llfn","","",363],[11,"apply_callsite","","",363],[11,"apply_llfn","","",364],[11,"apply_callsite","","",364],[11,"apply_llfn","","",365],[11,"apply_callsite","","",365],[11,"new","","",366],[11,"arg","","",366],[11,"ret","","",366],[11,"apply_llfn","","",366],[11,"apply_callsite","","",366],[11,"fmt","","",367],[11,"eq","","",367],[11,"ne","","",367],[11,"clone","","",368],[11,"eq","","",368],[11,"ne","","",368],[11,"eq","","",369],[11,"ne","","",369],[11,"drop","","",370],[11,"new","","",371],[11,"drop","","",371],[11,"drop","","",372],[6,"Node","rustc_borrowck::graphviz",""],[6,"Edge","",""],[3,"DataflowLabeller","",""],[12,"inner","","",373],[12,"variants","","",373],[12,"borrowck_ctxt","","",373],[12,"analysis_data","","",373],[4,"Variant","",""],[13,"Loans","","",374],[13,"Moves","","",374],[13,"Assigns","","",374],[11,"fmt","","",374],[11,"short_name","","",374],[11,"graph_id","","",373],[11,"node_id","","",373],[11,"node_label","","",373],[11,"edge_label","","",373],[11,"nodes","","",373],[11,"edges","","",373],[11,"source","","",373],[11,"target","","",373]],"paths":[[3,"FnPartsWithCFG"],[3,"Svh"],[4,"SawAbiComponent"],[4,"SawExprComponent"],[4,"SawStmtComponent"],[3,"Ident"],[3,"Name"],[3,"StrictVersionHashVisitor"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"DecodeContext"],[3,"DefId"],[4,"Option"],[3,"Span"],[3,"NestedItemsDropper"],[4,"Def"],[4,"Region"],[3,"FreeRegion"],[4,"CodeExtent"],[3,"DestructionScopeData"],[4,"BoundRegion"],[3,"Decoder"],[3,"Freevar"],[3,"UpvarBorrow"],[4,"UpvarCapture"],[4,"MethodOrigin"],[3,"EncodeContext"],[3,"Encoder"],[3,"SideTableEncodingIdVisitor"],[3,"Doc"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFG"],[3,"ConstQualif"],[4,"Mode"],[3,"CheckCrateVisitor"],[3,"CheckCrateVisitor"],[3,"CheckItemRecursionVisitor"],[4,"Context"],[3,"CheckLoopVisitor"],[3,"Matrix"],[4,"Constructor"],[4,"Usefulness"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[3,"RenamingRecorder"],[3,"MutationChecker"],[3,"AtBindingPatternVisitor"],[3,"RvalueContext"],[3,"RvalueContextDelegate"],[4,"const_val"],[3,"ConstEvalErr"],[4,"ErrKind"],[4,"EntryOrExit"],[3,"DataFlowContext"],[3,"Union"],[3,"Subtract"],[3,"MarkSymbolVisitor"],[3,"LifeSeeder"],[3,"DeadVisitor"],[3,"PathResolution"],[4,"MethodProvenance"],[4,"UnsafeContext"],[3,"EffectCheckVisitor"],[3,"EntryContext"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"TrackMatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"SimplifiedType"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"DepthFirstTraversal"],[3,"IntrinsicCheckingVisitor"],[3,"TransmuteRestriction"],[3,"Bivariate"],[3,"Rc"],[3,"TraitRef"],[3,"ProjectionPredicate"],[3,"FnSig"],[3,"CombineFields"],[3,"Generalizer"],[3,"Equate"],[3,"InferCtxt"],[3,"Binder"],[3,"Glb"],[3,"Lub"],[4,"Node"],[4,"Edge"],[3,"ConstraintGraph"],[4,"Constraint"],[4,"GenericKind"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[3,"SameRegions"],[3,"RegionSnapshot"],[3,"RegionVarBindings"],[4,"Classification"],[4,"Verify"],[4,"VarValue"],[3,"RegionAndOrigin"],[3,"OpportunisticTypeResolver"],[3,"FullTypeResolver"],[3,"TypeFreshener"],[3,"Sub"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"Delegate"],[4,"VarValue"],[3,"UnificationTable"],[3,"Delegate"],[3,"IntVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"fixup_err"],[4,"Result"],[4,"LangItem"],[3,"LanguageItems"],[3,"LanguageItemCollector"],[3,"Variable"],[3,"LiveNode"],[4,"LiveNodeKind"],[3,"IrMaps"],[3,"LocalInfo"],[4,"VarKind"],[3,"Liveness"],[3,"Users"],[4,"categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[3,"Expr"],[3,"Pat"],[3,"MemCategorizationContext"],[4,"ClosureKind"],[4,"LastPrivate"],[4,"PrivateDep"],[4,"ImportUse"],[3,"ReachableContext"],[3,"BlockRemainder"],[4,"InnermostDeclaringBlock"],[3,"DeclaringStatementContext"],[4,"InnermostEnclosingExpr"],[3,"Context"],[3,"RegionMaps"],[3,"RegionResolutionVisitor"],[4,"DefRegion"],[3,"LifetimeContext"],[4,"ScopeChain"],[3,"Annotator"],[3,"Index"],[3,"Checker"],[3,"Substs"],[4,"RegionSubsts"],[4,"ParamSpace"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"SubstFolder"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"MismatchedProjectionTypes"],[4,"ProjectionTyCandidate"],[3,"AssociatedTypeNormalizer"],[3,"Normalized"],[4,"ProjectionTyError"],[4,"MethodViolationCode"],[4,"ObjectSafetyViolation"],[3,"SelectionCache"],[4,"MethodMatchedData"],[4,"SelectionCandidate"],[4,"EvaluationResult"],[3,"SelectionContext"],[3,"TraitObligationStack"],[4,"MethodMatchResult"],[3,"Elaborator"],[3,"FilterToTraits"],[3,"VtableImplData"],[3,"VtableObjectData"],[3,"Obligation"],[4,"Vtable"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[4,"SelectionError"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[3,"field"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[3,"Method"],[3,"AssociatedType"],[3,"mt"],[3,"field_ty"],[3,"creader_cache_key"],[3,"ItemVariances"],[4,"Variance"],[4,"AutoAdjustment"],[4,"UnsizeKind"],[3,"AutoDerefRef"],[4,"AutoRef"],[3,"param_index"],[3,"MethodParam"],[3,"MethodObject"],[3,"MethodCallee"],[3,"MethodCall"],[4,"ExprAdjustment"],[4,"vtable_origin"],[3,"CtxtArenas"],[3,"TypeFlags"],[3,"ctxt"],[3,"TyS"],[3,"InternedTy"],[3,"BareFnTy"],[3,"ClosureTy"],[4,"FnOutput"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"UpvarId"],[4,"BorrowKind"],[4,"sty"],[3,"TyTrait"],[4,"terr_vstore_kind"],[3,"expected_found"],[4,"type_err"],[3,"ParamBounds"],[3,"ExistentialBounds"],[4,"BuiltinBound"],[3,"TyVid"],[3,"RegionVid"],[4,"InferTy"],[4,"UnconstrainedNumeric"],[4,"InferRegion"],[4,"ObjectLifetimeDefault"],[3,"TypeParameterDef"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[4,"Predicate"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionTy"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"ItemSubsts"],[3,"TypeContents"],[4,"Representability"],[3,"VariantInfo"],[4,"DtorKind"],[3,"ClosureUpvar"],[4,"ExplicitSelfCategory"],[3,"Vec"],[3,"Box"],[3,"OwnedSlice"],[3,"EnumSet"],[3,"BottomUpFolder"],[3,"RegionFolder"],[3,"RegionEraser"],[3,"TypeWalker"],[3,"Context"],[4,"astencode_tag"],[3,"LinkMeta"],[4,"DefIdSource"],[3,"entry"],[3,"EncodeVisitor"],[3,"ImplVisitor"],[4,"Family"],[4,"DefLike"],[3,"CrateDep"],[3,"CrateReader"],[4,"PMDSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"CrateSource"],[3,"CStore"],[3,"crate_metadata"],[4,"MetadataBlob"],[3,"Context"],[3,"ArchiveMetadata"],[3,"FileSearch"],[3,"MacroLoader"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[3,"Options"],[4,"UnstableFeatures"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"Registry"],[3,"RegistrarFinder"],[3,"Lint"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"Context"],[3,"GatherNodeLevels"],[3,"ErrorReported"],[3,"Indenter"],[3,"LoopQueryVisitor"],[3,"BlockQueryVisitor"],[3,"P"],[3,"TraitDef"],[4,"TraitItem"],[3,"Path"],[3,"Ty"],[3,"Item"],[3,"Lifetime"],[3,"Spanned"],[4,"ExplicitSelf_"],[4,"Visibility"],[4,"Abi"],[4,"Mutability"],[4,"IntTy"],[4,"UintTy"],[3,"HashMap"],[3,"FnvHasher"],[3,"SnapshotVec"],[3,"FixedBuffer64"],[3,"Sha256"],[3,"ArchiveRO"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"CallConv"],[4,"DiagnosticSeverity"],[3,"Attribute"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[3,"AttrBuilder"],[4,"TypeKind"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[3,"DataflowLabeller"],[4,"Variant"]]};
searchIndex['rustc_trans'] = {"items":[[0,"","rustc_trans","The Rust compiler."],[0,"session","",""],[0,"config","rustc_trans::session","Contains infrastructure for configuring the compiler, including parsing\ncommand line options."],[11,"fmt","rustc_back::svh","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"clone","","",0],[11,"new","","",0],[11,"as_str","","",0],[11,"calculate","","",0],[11,"fmt","","",0],[11,"hash","rustc_back::svh::svh_visitor","",1],[11,"hash","","",2],[11,"hash","","",3],[11,"get_content","syntax::ast","",4],[11,"get_content","","",5],[11,"visit_mac","rustc_back::svh::svh_visitor","",6],[11,"visit_struct_def","","",6],[11,"visit_variant","","",6],[11,"visit_opt_lifetime_ref","","",6],[11,"visit_ident","","",6],[11,"visit_lifetime_ref","","",6],[11,"visit_lifetime_def","","",6],[11,"visit_expr","","",6],[11,"visit_stmt","","",6],[11,"visit_foreign_item","","",6],[11,"visit_item","","",6],[11,"visit_mod","","",6],[11,"visit_decl","","",6],[11,"visit_ty","","",6],[11,"visit_generics","","",6],[11,"visit_fn","","",6],[11,"visit_ty_method","","",6],[11,"visit_trait_item","","",6],[11,"visit_struct_field","","",6],[11,"visit_explicit_self","","",6],[11,"visit_path","","",6],[11,"visit_block","","",6],[11,"visit_pat","","",6],[11,"visit_local","","",6],[11,"visit_arm","","",6],[11,"open","rustc_back::archive","Opens an existing static archive",7],[11,"remove_file","","Removes a file from this archive",7],[11,"files","","Lists all files in an archive",7],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",7],[11,"create","","Create a new static archive, ready for adding files.",8],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",8],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",8],[11,"add_file","","Adds an arbitrary file to this archive",8],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",8],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",8],[11,"tr_id","rustc::middle::astencode","Translates an internal id, meaning a node id that is known to refer to some part of the\nitem currently being inlined, such as a local variable or argument.  All naked node-ids\nthat appear in types have this property, since if something might refer to an external item\nwe would use a def-id to allow for the possibility that the item resides in another crate.",9],[11,"tr_def_id","","Translates an EXTERNAL def-id, converting the crate number from the one used in the encoded\ndata to the current crate numbers..  By external, I mean that it be translated to a\nreference to the item in its original crate, as opposed to being translated to a reference\nto the inlined version of the item.  This is typically, but not always, what you want,\nbecause most def-ids refer to external things like types or other fns that may or may not\nbe inlined.  Note that even when the inlined function is referencing itself recursively, we\nwould want `tr_def_id` for that reference--- conceptually the function calls the original,\nnon-inlined version, and trans deals with linking that recursive call to the inlined copy.",9],[11,"tr_intern_def_id","","Translates an INTERNAL def-id, meaning a def-id that is\nknown to refer to some part of the item currently being\ninlined.  In that case, we want to convert the def-id to\nrefer to the current crate and to the new, inlined node-id.",9],[11,"tr_span","","Translates a `Span` from an extern crate to the corresponding `Span`\nwithin the local crate's codemap. `creader::import_codemap()` will\nalready have allocated any additionally needed FileMaps in the local\ncodemap as a side-effect of creating the crate_metadata's\n`codemap_import_info`.",9],[11,"tr_intern","syntax::ast","",10],[11,"tr","","",10],[11,"tr","core::option","",11],[11,"tr","syntax::codemap","",12],[11,"fold_block","rustc::middle::astencode","",13],[11,"tr","rustc::middle::def","",14],[11,"tr","rustc::middle::ty","",15],[11,"tr","","",16],[11,"tr","rustc::middle::region","",17],[11,"tr","","",18],[11,"tr","rustc::middle::ty","",19],[11,"read_freevar_entry","rbml::reader","",20],[11,"read_capture_mode","","",20],[11,"tr","rustc::middle::ty","",21],[11,"tr","","",22],[11,"tr","","",23],[11,"read_method_callee","rbml::reader","",20],[11,"tr","rustc::middle::ty","",24],[11,"read_vec_per_param_space","rbml::reader","",20],[11,"read_vtable_res_with_key","","",20],[11,"read_vtable_res","","",20],[11,"read_vtable_param_res","","",20],[11,"read_vtable_origin","","",20],[11,"ty_str_ctxt","rustc::metadata::encoder","",25],[11,"emit_closure_type","rbml::writer","",26],[11,"emit_method_origin","","",26],[11,"emit_ty","","",26],[11,"emit_tys","","",26],[11,"emit_trait_ref","","",26],[11,"emit_type_param_def","","",26],[11,"emit_predicate","","",26],[11,"emit_type_scheme","","",26],[11,"emit_existential_bounds","","",26],[11,"emit_builtin_bounds","","",26],[11,"emit_substs","","",26],[11,"emit_auto_adjustment","","",26],[11,"emit_autoref","","",26],[11,"emit_auto_deref_ref","","",26],[11,"emit_unsize_kind","","",26],[11,"tag","","",26],[11,"id","","",26],[11,"visit_id","rustc::middle::astencode","",27],[11,"as_int","rbml","",28],[11,"opt_child","","",28],[11,"read_ty_nodcx","rbml::reader","",20],[11,"read_tys_nodcx","","",20],[11,"read_substs_nodcx","","",20],[11,"read_method_origin","","",20],[11,"read_ty","","",20],[11,"read_tys","","",20],[11,"read_trait_ref","","",20],[11,"read_poly_trait_ref","","",20],[11,"read_type_param_def","","",20],[11,"read_predicate","","",20],[11,"read_type_scheme","","",20],[11,"read_existential_bounds","","",20],[11,"read_substs","","",20],[11,"read_auto_adjustment","","",20],[11,"read_auto_deref_ref","","",20],[11,"read_autoref","","",20],[11,"read_unsize_kind","","",20],[11,"read_closure_kind","","",20],[11,"read_closure_ty","","",20],[11,"convert_def_id","","Converts a def-id that appears in a type.  The correct\ntranslation will depend on what kind of def-id this is.\nThis is a subtle point: type definitions are not\ninlined into the current crate, so if the def-id names\na nominal type or type alias, then it should be\ntranslated to refer to the source crate.",20],[11,"graph_id","rustc::middle::cfg::graphviz","",29],[11,"node_id","","",29],[11,"node_label","","",29],[11,"edge_label","","",29],[11,"nodes","","",29],[11,"edges","","",29],[11,"source","","",29],[11,"target","","",29],[11,"eq","rustc::middle::cfg","",30],[11,"ne","","",30],[11,"id","","",30],[11,"new","","",31],[11,"node_is_reachable","","",31],[11,"hash","rustc::middle::check_const","",32],[11,"cmp","","",32],[11,"partial_cmp","","",32],[11,"lt","","",32],[11,"le","","",32],[11,"gt","","",32],[11,"ge","","",32],[11,"clone","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"decode","","",32],[11,"encode","","",32],[11,"empty","","Returns an empty set of flags.",32],[11,"all","","Returns the set containing all flags.",32],[11,"bits","","Returns the raw value of the flags currently stored.",32],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",32],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",32],[11,"is_empty","","Returns `true` if no flags are currently stored.",32],[11,"is_all","","Returns `true` if all flags are currently set.",32],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32],[11,"insert","","Inserts the specified flags in-place.",32],[11,"remove","","Removes the specified flags in-place.",32],[11,"toggle","","Toggles the specified flags in-place.",32],[6,"Output","rustc_trans::session::config",""],[11,"bitor","rustc::middle::check_const","Returns the union of the two sets of flags.",32],[6,"Output","rustc_trans::session::config",""],[11,"bitxor","rustc::middle::check_const","Returns the left flags, but with all the right flags toggled.",32],[6,"Output","rustc_trans::session::config",""],[11,"bitand","rustc::middle::check_const","Returns the intersection between the two sets of flags.",32],[6,"Output","rustc_trans::session::config",""],[11,"sub","rustc::middle::check_const","Returns the set difference of the two sets of flags.",32],[6,"Output","rustc_trans::session::config",""],[11,"not","rustc::middle::check_const","Returns the complement of this set of flags.",32],[11,"eq","","",33],[11,"ne","","",33],[11,"visit_item","","",34],[11,"visit_fn","","",34],[11,"visit_pat","","",34],[11,"visit_expr","","",34],[11,"consume","","",34],[11,"borrow","","",34],[11,"decl_without_init","","",34],[11,"mutate","","",34],[11,"matched_pat","","",34],[11,"consume_pat","","",34],[11,"visit_item","rustc::middle::check_static_recursion","",35],[11,"visit_item","","",36],[11,"visit_expr","","",36],[11,"eq","rustc::middle::check_loop","",37],[11,"ne","","",37],[11,"clone","","",37],[11,"visit_item","","",38],[11,"visit_expr","","",38],[11,"fmt","rustc::middle::check_match","",39],[11,"from_iter","","",39],[11,"eq","","",40],[11,"ne","","",40],[11,"clone","","",40],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"visit_expr","","",42],[11,"visit_local","","",42],[11,"visit_fn","","",42],[11,"new","","",43],[11,"visit_id","","",44],[11,"fold_pat","","",43],[11,"matched_pat","","",45],[11,"consume","","",45],[11,"consume_pat","","",45],[11,"borrow","","",45],[11,"decl_without_init","","",45],[11,"mutate","","",45],[11,"visit_pat","","",46],[11,"visit_fn","rustc::middle::check_rvalues","",47],[11,"consume","","",48],[11,"matched_pat","","",48],[11,"consume_pat","","",48],[11,"borrow","","",48],[11,"decl_without_init","","",48],[11,"mutate","","",48],[11,"eq","rustc::middle::const_eval","",49],[11,"ne","","",49],[11,"clone","","",49],[11,"clone","","",50],[11,"clone","","",51],[11,"description","","",50],[11,"fmt","rustc::middle::dataflow","",52],[11,"clone","","",53],[11,"pre","","",53],[11,"new","","",53],[11,"add_gen","","Indicates that `id` generates `bit`",53],[11,"add_kill","","Indicates that `id` kills `bit`",53],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",53],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",53],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",53],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",53],[11,"propagate","","Performs the data flow analysis.",53],[11,"join","","",54],[11,"join","","",55],[11,"visit_struct_def","rustc::middle::dead","",56],[11,"visit_expr","","",56],[11,"visit_pat","","",56],[11,"visit_path","","",56],[11,"visit_item","","",56],[11,"visit_item","","",57],[11,"visit_fn","","",57],[11,"visit_item","","",58],[11,"visit_foreign_item","","",58],[11,"visit_fn","","",58],[11,"visit_struct_field","","",58],[11,"visit_trait_item","","",58],[11,"fmt","rustc::middle::def","",14],[11,"hash","","",14],[11,"decode","","",14],[11,"encode","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"clone","","",14],[11,"fmt","","",59],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",59],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",59],[11,"fmt","","",60],[11,"hash","","",60],[11,"decode","","",60],[11,"encode","","",60],[11,"eq","","",60],[11,"ne","","",60],[11,"clone","","",60],[11,"map","","",60],[11,"local_node_id","","",14],[11,"def_id","","",14],[11,"variant_def_ids","","",14],[11,"eq","rustc::middle::effect","",61],[11,"ne","","",61],[11,"visit_fn","","",62],[11,"visit_block","","",62],[11,"visit_expr","","",62],[11,"visit_item","rustc::middle::entry","",63],[11,"fmt","rustc::middle::expr_use_visitor","",64],[11,"eq","","",64],[11,"ne","","",64],[11,"fmt","","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"fmt","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"fmt","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"fmt","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"fmt","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"new","","",70],[11,"walk_fn","","",70],[11,"consume_expr","","",70],[11,"walk_expr","","",70],[11,"hash","rustc::middle::fast_reject","",71],[11,"eq","","",71],[11,"ne","","",71],[11,"clone","","",71],[11,"fmt","rustc::middle::graph","",72],[11,"fmt","","",73],[11,"eq","","",73],[11,"ne","","",73],[11,"clone","","",73],[11,"fmt","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"fmt","","",75],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",73],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",74],[11,"new","","",76],[11,"with_capacity","","",76],[11,"all_nodes","","",76],[11,"all_edges","","",76],[11,"next_node_index","","",76],[11,"add_node","","",76],[11,"mut_node_data","","",76],[11,"node_data","","",76],[11,"node","","",76],[11,"next_edge_index","","",76],[11,"add_edge","","",76],[11,"mut_edge_data","","",76],[11,"edge_data","","",76],[11,"edge","","",76],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",76],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",76],[11,"each_node","","Iterates over all edges defined in the graph.",76],[11,"each_edge","","Iterates over all edges defined in the graph",76],[11,"each_outgoing_edge","","Iterates over all outgoing edges from the node `from`",76],[11,"each_incoming_edge","","Iterates over all incoming edges to the node `target`",76],[11,"each_adjacent_edge","","Iterates over all edges adjacent to the node `node`\nin the direction `dir` (either `Outgoing` or `Incoming)",76],[11,"iterate_until_fixed_point","","",76],[11,"depth_traverse","","",76],[6,"Item","rustc_trans::session::config",""],[11,"next","rustc::middle::graph","",77],[11,"source","","",72],[11,"target","","",72],[11,"visit_fn","rustc::middle::intrinsicck","",78],[11,"visit_expr","","",78],[11,"repr","rustc::middle::ty","",79],[11,"tag","rustc::middle::infer::bivariate","",80],[11,"fields","","",80],[11,"tys_with_variance","","",80],[11,"regions_with_variance","","",80],[11,"regions","","",80],[11,"mts","","",80],[11,"unsafeties","","",80],[11,"builtin_bounds","","",80],[11,"tys","","",80],[11,"binders","","",80],[11,"combine","alloc::rc","",81],[11,"combine","rustc::middle::ty","",82],[11,"combine","","",83],[11,"combine","","",84],[11,"clone","rustc::middle::infer::combine","",85],[11,"switch_expected","","",85],[11,"instantiate","","",85],[11,"tcx","","",86],[11,"fold_ty","","",86],[11,"fold_region","","",86],[11,"tag","rustc::middle::infer::equate","",87],[11,"fields","","",87],[11,"tys_with_variance","","",87],[11,"regions_with_variance","","",87],[11,"regions","","",87],[11,"mts","","",87],[11,"unsafeties","","",87],[11,"builtin_bounds","","",87],[11,"tys","","",87],[11,"binders","","",87],[11,"report_region_errors","rustc::middle::infer","",88],[11,"process_errors","","",88],[11,"report_type_error","","",88],[11,"report_and_explain_type_error","","",88],[11,"values_str","","Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\nerror.",88],[11,"expected_found_str","","",88],[11,"report_generic_bound_failure","","",88],[11,"report_concrete_failure","","",88],[11,"report_sub_sup_conflict","","",88],[11,"report_sup_sup_conflict","","",88],[11,"report_processed_errors","","",88],[11,"give_suggestion","","",88],[11,"give_expl_lifetime_param","","",88],[11,"report_inference_failure","","",88],[11,"note_region_origin","","",88],[11,"resolve","alloc::rc","",81],[11,"contains_error","","",81],[11,"resolve","rustc::middle::ty","",89],[11,"contains_error","","",89],[11,"tag","rustc::middle::infer::glb","",90],[11,"fields","","",90],[11,"tys_with_variance","","",90],[11,"regions_with_variance","","",90],[11,"mts","","",90],[11,"unsafeties","","",90],[11,"builtin_bounds","","",90],[11,"regions","","",90],[11,"tys","","",90],[11,"binders","","",90],[11,"tainted_regions","rustc::middle::infer","",88],[11,"region_vars_confined_to_snapshot","","Returns the set of region variables that do not affect any\ntypes/regions which existed before `snapshot` was\nstarted. This is used in the sub/lub/glb computations. The\nidea here is that when we are computing lub/glb of two\nregions, we sometimes create intermediate region variables.\nThose region variables may touch some of the skolemized or\nother \"forbidden\" regions we created to replace bound\nregions, but they don't really represent an \"external\"\nconstraint.",88],[11,"relate_bound","rustc::middle::infer::lub","",91],[11,"relate_bound","rustc::middle::infer::glb","",90],[11,"tag","rustc::middle::infer::lub","",91],[11,"fields","","",91],[11,"tys_with_variance","","",91],[11,"regions_with_variance","","",91],[11,"mts","","",91],[11,"unsafeties","","",91],[11,"builtin_bounds","","",91],[11,"regions","","",91],[11,"tys","","",91],[11,"binders","","",91],[11,"fmt","rustc::middle::infer::region_inference::graphviz","",92],[11,"eq","","",92],[11,"ne","","",92],[11,"hash","","",92],[11,"clone","","",92],[11,"fmt","","",93],[11,"eq","","",93],[11,"ne","","",93],[11,"clone","","",93],[11,"graph_id","","",94],[11,"node_id","","",94],[11,"node_label","","",94],[11,"edge_label","","",94],[11,"nodes","","",94],[11,"edges","","",94],[11,"source","","",94],[11,"target","","",94],[11,"fmt","rustc::middle::infer::region_inference","",95],[11,"hash","","",95],[11,"eq","","",95],[11,"ne","","",95],[11,"clone","","",95],[11,"eq","","",96],[11,"ne","","",96],[11,"fmt","","",96],[11,"clone","","",96],[11,"hash","","",97],[11,"eq","","",97],[11,"ne","","",97],[11,"eq","","",98],[11,"ne","","",98],[11,"eq","","",99],[11,"ne","","",99],[11,"fmt","","",100],[11,"clone","","",100],[11,"fmt","","",101],[11,"clone","","",101],[11,"contains","","",101],[11,"push","","",101],[11,"fmt","","",102],[11,"new","","",103],[11,"start_snapshot","","",103],[11,"commit","","",103],[11,"rollback_to","","",103],[11,"num_vars","","",103],[11,"new_region_var","","",103],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto \"escape\" out into error messages or the code at large.",103],[11,"new_bound","","",103],[11,"add_given","","",103],[11,"make_eqregion","","",103],[11,"make_subregion","","",103],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",103],[11,"lub_regions","","",103],[11,"glb_regions","","",103],[11,"resolve_var","","",103],[11,"combine_vars","","",103],[11,"vars_created_since_snapshot","","",103],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",103],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",103],[11,"fmt","","",104],[11,"eq","","",104],[11,"ne","","",104],[11,"repr","","",95],[11,"repr","","",105],[11,"repr","","",106],[11,"repr","","",107],[11,"repr","","",96],[11,"user_string","","",96],[11,"to_ty","","",96],[11,"new","rustc::middle::infer::resolve","",108],[11,"tcx","","",108],[11,"fold_ty","","",108],[11,"tcx","","",109],[11,"fold_ty","","",109],[11,"fold_region","","",109],[11,"new","rustc::middle::infer::freshen","",110],[11,"tcx","","",110],[11,"fold_region","","",110],[11,"fold_ty","","",110],[11,"tag","rustc::middle::infer::sub","",111],[11,"fields","","",111],[11,"tys_with_variance","","",111],[11,"regions_with_variance","","",111],[11,"regions","","",111],[11,"mts","","",111],[11,"unsafeties","","",111],[11,"builtin_bounds","","",111],[11,"tys","","",111],[11,"binders","","",111],[11,"fmt","rustc::middle::infer::type_variable","",112],[11,"eq","","",112],[11,"ne","","",112],[11,"new","","",113],[11,"var_diverges","","",113],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",113],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",113],[11,"new_var","","",113],[11,"probe","","",113],[11,"replace_if_possible","","",113],[11,"snapshot","","",113],[11,"rollback_to","","",113],[11,"commit","","",113],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",113],[6,"Value","rustc_trans::session::config",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::type_variable","",114],[11,"fmt","rustc::middle::infer::unify","",115],[11,"clone","","",115],[11,"eq","","",115],[11,"ne","","",115],[11,"new","","",116],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a \"LIFO\" (stack) order.",116],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",116],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",116],[11,"new_key","","",116],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path\ncompression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure",116],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! Also, we must be in the\nmiddle of a snapshot.",116],[11,"unify","","Either redirects node_a to node_b or vice versa, depending on the relative rank. Returns\nthe new root and rank. You should then update the value of the new root to something\nsuitable.",116],[6,"Value","rustc_trans::session::config",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::unify","",117],[11,"simple_vars","rustc::middle::infer","Unifies two simple keys. Because simple keys do not have any subtyping relationships, if\nboth keys have already been associated with a value, then those two values must be the\nsame.",88],[11,"simple_var_t","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",88],[11,"probe_var","","",88],[6,"Value","rustc_trans::session::config",""],[11,"index","rustc::middle::ty","",118],[11,"from_index","","",118],[11,"unification_table","","",118],[11,"tag","","",118],[11,"to_type","","",119],[11,"to_type_err","","",119],[6,"Value","rustc_trans::session::config",""],[11,"index","rustc::middle::ty","",120],[11,"from_index","","",120],[11,"unification_table","","",120],[11,"tag","","",120],[11,"to_type","syntax::ast","",121],[11,"to_type_err","","",121],[11,"fmt","rustc::middle::infer","",122],[11,"clone","","",122],[11,"fmt","","",123],[11,"clone","","",123],[11,"fmt","","",124],[11,"clone","","",124],[11,"fmt","","",125],[11,"clone","","",125],[11,"fmt","","",126],[11,"clone","","",126],[11,"fmt","","",127],[11,"clone","","",127],[11,"fmt","","",128],[11,"then","core::result","",129],[11,"to_ures","","",129],[11,"compare","","",129],[11,"freshen","rustc::middle::infer","",88],[11,"type_var_diverges","","",88],[11,"freshener","","",88],[11,"type_is_unconstrained_numeric","","",88],[11,"combine_fields","","",88],[11,"equate","","",88],[11,"sub","","",88],[11,"lub","","",88],[11,"commit_unconditionally","","Execute `f` and commit the bindings",88],[11,"commit_if_ok","","Execute `f` and commit the bindings if successful",88],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",88],[11,"try","","Execute `f`, unroll bindings on panic",88],[11,"probe","","Execute `f` then unroll any bindings it creates",88],[11,"add_given","","",88],[11,"sub_types","","",88],[11,"eq_types","","",88],[11,"sub_trait_refs","","",88],[11,"sub_poly_trait_refs","","",88],[11,"skolemize_late_bound_regions","","See `higher_ranked::skolemize_late_bound_regions`",88],[11,"leak_check","","See `higher_ranked::leak_check`",88],[11,"plug_leaks","","See `higher_ranked::plug_leaks`",88],[11,"equality_predicate","","",88],[11,"region_outlives_predicate","","",88],[11,"next_ty_var_id","","",88],[11,"next_ty_var","","",88],[11,"next_diverging_ty_var","","",88],[11,"next_ty_vars","","",88],[11,"next_int_var_id","","",88],[11,"next_float_var_id","","",88],[11,"next_region_var","","",88],[11,"region_vars_for_defs","","",88],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",88],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",88],[11,"fresh_bound_region","","",88],[11,"resolve_regions_and_report_errors","","",88],[11,"ty_to_string","","",88],[11,"tys_to_string","","",88],[11,"trait_ref_to_string","","",88],[11,"shallow_resolve","","",88],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",88],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",88],[11,"type_error_message_str","","",88],[11,"type_error_message_str_with_expected","","",88],[11,"type_error_message","","",88],[11,"report_mismatched_types","","",88],[11,"replace_late_bound_regions_with_fresh_var","","",88],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",88],[11,"can_equate","","",88],[11,"span","","",124],[11,"types","","",124],[11,"dummy","","",124],[11,"repr","","",124],[11,"span","","",122],[11,"repr","","",122],[11,"span","","",125],[11,"repr","","",125],[11,"span","","",127],[11,"repr","","",127],[11,"hash","rustc::middle::lang_items","",130],[11,"eq","","",130],[11,"ne","","",130],[11,"from_i64","","",130],[11,"from_u64","","",130],[11,"new","","",131],[11,"items","","",131],[11,"item_name","","",131],[11,"require","","",131],[11,"from_builtin_kind","","",131],[11,"to_builtin_kind","","",131],[11,"fn_trait_kind","","",131],[11,"send_trait","","",131],[11,"sized_trait","","",131],[11,"copy_trait","","",131],[11,"sync_trait","","",131],[11,"drop_trait","","",131],[11,"add_trait","","",131],[11,"sub_trait","","",131],[11,"mul_trait","","",131],[11,"div_trait","","",131],[11,"rem_trait","","",131],[11,"neg_trait","","",131],[11,"not_trait","","",131],[11,"bitxor_trait","","",131],[11,"bitand_trait","","",131],[11,"bitor_trait","","",131],[11,"shl_trait","","",131],[11,"shr_trait","","",131],[11,"index_trait","","",131],[11,"index_mut_trait","","",131],[11,"range_struct","","",131],[11,"range_from_struct","","",131],[11,"range_to_struct","","",131],[11,"range_full_struct","","",131],[11,"unsafe_cell_type","","",131],[11,"deref_trait","","",131],[11,"deref_mut_trait","","",131],[11,"fn_trait","","",131],[11,"fn_mut_trait","","",131],[11,"fn_once_trait","","",131],[11,"eq_trait","","",131],[11,"ord_trait","","",131],[11,"str_eq_fn","","",131],[11,"panic_fn","","",131],[11,"panic_bounds_check_fn","","",131],[11,"panic_fmt","","",131],[11,"exchange_malloc_fn","","",131],[11,"exchange_free_fn","","",131],[11,"strdup_uniq_fn","","",131],[11,"start_fn","","",131],[11,"ty_desc","","",131],[11,"opaque","","",131],[11,"eh_personality","","",131],[11,"exchange_heap","","",131],[11,"owned_box","","",131],[11,"phantom_fn","","",131],[11,"phantom_data","","",131],[11,"covariant_type","","",131],[11,"contravariant_type","","",131],[11,"invariant_type","","",131],[11,"covariant_lifetime","","",131],[11,"contravariant_lifetime","","",131],[11,"invariant_lifetime","","",131],[11,"no_copy_bound","","",131],[11,"managed_bound","","",131],[11,"non_zero","","",131],[11,"stack_exhausted","","",131],[11,"debug_trait","","",131],[11,"visit_item","","",132],[11,"new","","",132],[11,"collect_item","","",132],[11,"collect_local_language_items","","",132],[11,"collect_external_language_items","","",132],[11,"collect","","",132],[11,"eq","rustc::middle::liveness","",133],[11,"ne","","",133],[11,"eq","","",134],[11,"ne","","",134],[11,"clone","","",134],[11,"fmt","","",135],[11,"eq","","",135],[11,"ne","","",135],[11,"visit_fn","","",136],[11,"visit_local","","",136],[11,"visit_expr","","",136],[11,"visit_arm","","",136],[11,"fmt","","",134],[11,"fmt","","",133],[11,"fmt","","",137],[11,"fmt","","",138],[11,"visit_fn","","",139],[11,"visit_local","","",139],[11,"visit_expr","","",139],[11,"visit_arm","","",139],[11,"clone","","",140],[11,"fmt","rustc::middle::mem_categorization","",141],[11,"eq","","",141],[11,"ne","","",141],[11,"clone","","",141],[11,"fmt","","",142],[11,"eq","","",142],[11,"ne","","",142],[11,"clone","","",142],[11,"fmt","","",143],[11,"hash","","",143],[11,"eq","","",143],[11,"ne","","",143],[11,"clone","","",143],[11,"fmt","","",144],[11,"hash","","",144],[11,"eq","","",144],[11,"ne","","",144],[11,"clone","","",144],[11,"fmt","","",145],[11,"hash","","",145],[11,"eq","","",145],[11,"ne","","",145],[11,"clone","","",145],[11,"fmt","","",146],[11,"hash","","",146],[11,"eq","","",146],[11,"ne","","",146],[11,"clone","","",146],[11,"fmt","","",147],[11,"hash","","",147],[11,"eq","","",147],[11,"ne","","",147],[11,"clone","","",147],[11,"fmt","","",148],[11,"hash","","",148],[11,"eq","","",148],[11,"ne","","",148],[11,"clone","","",148],[11,"fmt","","",149],[11,"eq","","",149],[11,"ne","","",149],[11,"clone","","",149],[11,"fmt","","",150],[11,"eq","","",150],[11,"ne","","",150],[11,"clone","","",150],[11,"id","syntax::ast","",151],[11,"span","","",151],[11,"id","","",152],[11,"span","","",152],[11,"from_mutbl","rustc::middle::mem_categorization","",148],[11,"from_borrow_kind","","",148],[11,"from_pointer_kind","","",148],[11,"inherit","","",148],[11,"is_mutable","","",148],[11,"is_immutable","","",148],[11,"to_user_str","","",148],[11,"new","","",153],[11,"cat_expr","","",153],[11,"cat_expr_autoderefd","","",153],[11,"cat_expr_unadjusted","","",153],[11,"cat_def","","",153],[11,"cat_rvalue_node","","",153],[11,"cat_rvalue","","",153],[11,"cat_field","","",153],[11,"cat_tup_field","","",153],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",153],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",153],[11,"cat_imm_interior","","",153],[11,"cat_downcast","","",153],[11,"cat_pattern","","",153],[11,"guarantor","","Returns `self` after stripping away any owned pointer derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",150],[11,"freely_aliasable","","Returns `Some(_)` if this lvalue represents a freely aliasable pointer type.",150],[11,"upvar","","",150],[11,"descriptive_string","","",150],[11,"repr","","",150],[11,"repr","","",141],[11,"repr","","",143],[11,"repr","","",144],[11,"repr","rustc::middle::ty","",154],[11,"repr","rustc::middle::mem_categorization","",142],[11,"user_string","","",142],[11,"fmt","rustc::middle::privacy","",155],[11,"fmt","","",156],[11,"fmt","","",157],[11,"eq","","",157],[11,"ne","","",157],[11,"or","","",155],[11,"visit_expr","rustc::middle::reachable","",158],[11,"visit_item","","",158],[11,"fmt","rustc::middle::region","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"hash","","",17],[11,"cmp","","",17],[11,"partial_cmp","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"fmt","","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"hash","","",18],[11,"cmp","","",18],[11,"partial_cmp","","",18],[11,"lt","","",18],[11,"le","","",18],[11,"gt","","",18],[11,"ge","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"new","","",18],[11,"to_code_extent","","",18],[11,"fmt","","",159],[11,"decode","","",159],[11,"encode","","",159],[11,"hash","","",159],[11,"cmp","","",159],[11,"partial_cmp","","",159],[11,"lt","","",159],[11,"le","","",159],[11,"gt","","",159],[11,"ge","","",159],[11,"eq","","",159],[11,"ne","","",159],[11,"clone","","",159],[11,"from_node_id","","Creates a scope that represents the dynamic extent associated\nwith `node_id`.",17],[11,"node_id","","Returns a node id associated with this scope.",17],[11,"map_id","","Maps this scope to a potentially new one according to the\nNodeId transformer `f_id`.",17],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",17],[11,"fmt","","",160],[11,"eq","","",160],[11,"ne","","",160],[11,"fmt","","",161],[11,"eq","","",161],[11,"ne","","",161],[11,"fmt","","",162],[11,"eq","","",162],[11,"ne","","",162],[11,"fmt","","",163],[11,"each_encl_scope","","",164],[11,"each_var_scope","","",164],[11,"each_encl_free_region","","",164],[11,"each_rvalue_scope","","",164],[11,"each_terminating_scope","","",164],[11,"relate_free_regions","","",164],[11,"record_encl_scope","","",164],[11,"record_var_scope","","",164],[11,"record_rvalue_scope","","",164],[11,"mark_as_terminating_scope","","Records that a scope is a TERMINATING SCOPE. Whenever we create automatic temporaries --\ne.g. by an expression like `a().f` -- they will be freed within the innermost terminating\nscope.",164],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",164],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",164],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",164],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",164],[11,"var_region","","Returns the lifetime of the variable `id`.",164],[11,"scopes_intersect","","",164],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",164],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `free_region_map`.  Note that\nit is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n(that is, the user can give two different names to the same lifetime).",164],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",164],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",164],[11,"visit_block","","",165],[11,"visit_item","","",165],[11,"visit_fn","","",165],[11,"visit_arm","","",165],[11,"visit_pat","","",165],[11,"visit_stmt","","",165],[11,"visit_expr","","",165],[11,"visit_local","","",165],[11,"fmt","rustc::middle::resolve_lifetime","",166],[11,"decode","","",166],[11,"encode","","",166],[11,"hash","","",166],[11,"eq","","",166],[11,"ne","","",166],[11,"clone","","",166],[11,"visit_item","","",167],[11,"visit_fn","","",167],[11,"visit_ty","","",167],[11,"visit_ty_method","","",167],[11,"visit_block","","",167],[11,"visit_lifetime_ref","","",167],[11,"visit_generics","","",167],[11,"visit_poly_trait_ref","","",167],[11,"fmt","","",168],[11,"visit_item","rustc::middle::stability","",169],[11,"visit_fn","","",169],[11,"visit_trait_item","","",169],[11,"visit_variant","","",169],[11,"visit_struct_field","","",169],[11,"visit_foreign_item","","",169],[11,"build","","Construct the stability index for a crate being compiled.",170],[11,"new","","",170],[11,"visit_item","","",171],[11,"visit_expr","","",171],[11,"visit_path","","",171],[11,"visit_pat","","",171],[11,"fmt","rustc::middle::subst","",172],[11,"hash","","",172],[11,"eq","","",172],[11,"ne","","",172],[11,"clone","","",172],[11,"fmt","","",173],[11,"hash","","",173],[11,"eq","","",173],[11,"ne","","",173],[11,"clone","","",173],[11,"new","","",172],[11,"new_type","","",172],[11,"new_trait","","",172],[11,"erased","","",172],[11,"empty","","",172],[11,"trans_empty","","",172],[11,"is_noop","","",172],[11,"type_for_def","","",172],[11,"has_regions_escaping_depth","","",172],[11,"self_ty","","",172],[11,"with_self_ty","","",172],[11,"erase_regions","","",172],[11,"regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",172],[11,"mut_regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",172],[11,"with_method","","",172],[11,"is_erased","","",173],[11,"fmt","","",174],[11,"decode","","",174],[11,"encode","","",174],[11,"hash","","",174],[11,"clone","","",174],[11,"eq","","",174],[11,"ne","","",174],[11,"cmp","","",174],[11,"partial_cmp","","",174],[11,"lt","","",174],[11,"le","","",174],[11,"gt","","",174],[11,"ge","","",174],[11,"all","","",174],[11,"to_uint","","",174],[11,"from_uint","","",174],[11,"decode","","",175],[11,"encode","","",175],[11,"hash","","",175],[11,"clone","","",175],[11,"eq","","",175],[11,"ne","","",175],[11,"fmt","","",175],[11,"empty","","",175],[11,"params_from_type","","",175],[11,"new","","`t` is the type space.\n`s` is the self space.\n`a` is the assoc space.\n`f` is the fn space.",175],[11,"push","","Appends `value` to the vector associated with `space`.",175],[11,"extend","","Appends `values` to the vector associated with `space`.",175],[11,"pop","","",175],[11,"truncate","","",175],[11,"replace","","",175],[11,"get_self","","",175],[11,"len","","",175],[11,"is_empty_in","","",175],[11,"get_slice","","",175],[11,"get_mut_slice","","",175],[11,"opt_get","","",175],[11,"get","","",175],[11,"iter","","",175],[11,"into_iter","","",175],[11,"iter_enumerated","","",175],[11,"as_slice","","",175],[11,"into_vec","","",175],[11,"all_vecs","","",175],[11,"all","","",175],[11,"any","","",175],[11,"is_empty","","",175],[11,"map","","",175],[11,"map_enumerated","","",175],[11,"map_move","","",175],[11,"split","","",175],[11,"with_vec","","",175],[11,"clone","","",176],[6,"Item","rustc_trans::session::config",""],[11,"next","rustc::middle::subst","",176],[6,"Item","rustc_trans::session::config",""],[6,"IntoIter","",""],[11,"into_iter","rustc::middle::subst","",175],[6,"Item","rustc_trans::session::config",""],[6,"IntoIter","",""],[11,"tcx","rustc::middle::subst","",177],[11,"enter_region_binder","","",177],[11,"exit_region_binder","","",177],[11,"fold_region","","",177],[11,"fold_ty","","",177],[11,"clone","rustc::middle::traits::fulfill","",178],[11,"new","","",179],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `<SomeType as SomeTrait>::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we'll unify `$0` with\n`projection_ty` again.",179],[11,"register_builtin_bound","","",179],[11,"register_region_obligation","","",179],[11,"register_predicate_obligation","","",179],[11,"region_obligations","","",179],[11,"select_all_or_error","","",179],[11,"select_new_obligations","","Attempts to select obligations that were registered since the call to a selection routine.\nThis is used by the type checker to eagerly attempt to resolve obligations in hopes of\ngaining type information. It'd be equally valid to use `select_where_possible` but it\nresults in `O(n^2)` performance (#18208).",179],[11,"select_where_possible","","",179],[11,"pending_obligations","","",179],[11,"repr","","",178],[11,"clone","rustc::middle::traits::project","",180],[11,"eq","","",181],[11,"ne","","",181],[11,"tcx","","",182],[11,"fold_ty","","",182],[11,"with","","",183],[11,"repr","","",184],[11,"repr","","",181],[11,"fold_with","","",183],[11,"repr","","",183],[11,"fmt","rustc::middle::traits::object_safety","",185],[11,"clone","","",185],[11,"repr","","",186],[11,"clone","rustc::middle::traits::select","",187],[11,"fmt","","",188],[11,"clone","","",189],[11,"fmt","","",189],[11,"eq","","",189],[11,"ne","","",189],[11,"fmt","","",190],[11,"new","","",191],[11,"intercrate","","",191],[11,"infcx","","",191],[11,"tcx","","",191],[11,"param_env","","",191],[11,"closure_typer","","",191],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",191],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",191],[11,"evaluate_impl","","Evaluates whether the impl with id `impl_def_id` could be applied to the self type\n`obligation_self_ty`. This can be used either for trait or inherent impls.",191],[11,"repr","","",189],[11,"new","","",187],[6,"Item","rustc_trans::session::config",""],[11,"next","core::option","",11],[11,"repr","rustc::middle::traits::select","",192],[11,"may_apply","","",193],[11,"filter_to_traits","rustc::middle::traits::util","",194],[6,"Item","rustc_trans::session::config",""],[11,"next","rustc::middle::traits::util","",194],[6,"Item","rustc_trans::session::config",""],[11,"next","rustc::middle::traits::util","",195],[11,"fmt","rustc::middle::traits","",196],[11,"fmt","","",197],[11,"repr","","",198],[11,"repr","","",199],[11,"repr","","",196],[11,"repr","","",200],[11,"repr","","",201],[11,"repr","","",197],[11,"repr","","",202],[11,"repr","","",203],[11,"repr","","",204],[11,"fmt","","",204],[11,"repr","rustc::middle::traits::project","",180],[11,"fmt","","",180],[11,"eq","rustc::middle::traits","",198],[11,"ne","","",198],[11,"clone","","",198],[11,"eq","","",205],[11,"ne","","",205],[11,"clone","","",205],[11,"eq","","",206],[11,"ne","","",206],[11,"clone","","",206],[11,"eq","","",207],[11,"ne","","",207],[11,"clone","","",207],[11,"fmt","","",202],[11,"clone","","",202],[11,"clone","","",204],[11,"clone","","",199],[11,"fmt","","",199],[11,"eq","","",196],[11,"ne","","",196],[11,"clone","","",196],[11,"clone","","",201],[11,"fmt","","",201],[11,"clone","","",200],[11,"fmt","","",200],[11,"clone","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"new","","",198],[11,"misc","","",198],[11,"with","","",198],[11,"new","","",205],[11,"misc","","",205],[11,"dummy","","",205],[11,"iter_nested","","",199],[11,"map_nested","","",199],[11,"map_move_nested","","",199],[11,"iter_nested","","",196],[11,"map_nested","","",196],[11,"map_move_nested","","",196],[11,"iter_nested","","",201],[11,"map_nested","","",201],[11,"map_move_nested","","",201],[11,"iter_nested","","",200],[11,"map_nested","","",200],[11,"map_move_nested","","",200],[11,"is_overflow","","",203],[11,"hash","rustc::middle::ty","",208],[11,"eq","","",208],[11,"ne","","",208],[11,"clone","","",208],[11,"fmt","","",209],[11,"clone","","",209],[11,"id","","",209],[11,"fmt","","",210],[11,"clone","","",210],[11,"def_id","","",210],[11,"name","","",210],[11,"container","","",210],[11,"as_opt_method","","",210],[11,"fmt","","",211],[11,"clone","","",211],[11,"def_id","","",211],[11,"fmt","","",212],[11,"clone","","",212],[11,"new","","",212],[11,"container_id","","",212],[11,"fmt","","",213],[11,"clone","","",213],[11,"fmt","","",214],[11,"hash","","",214],[11,"eq","","",214],[11,"ne","","",214],[11,"clone","","",214],[11,"fmt","","",215],[11,"clone","","",215],[11,"hash","","",216],[11,"eq","","",216],[11,"ne","","",216],[11,"encode","","",217],[11,"decode","","",217],[11,"eq","","",217],[11,"ne","","",217],[11,"clone","","",217],[11,"fmt","","",218],[11,"encode","","",218],[11,"decode","","",218],[11,"eq","","",218],[11,"ne","","",218],[11,"clone","","",218],[11,"fmt","","",219],[11,"clone","","",219],[11,"fmt","","",220],[11,"eq","","",220],[11,"ne","","",220],[11,"clone","","",220],[11,"fmt","","",221],[11,"clone","","",221],[11,"fmt","","",222],[11,"eq","","",222],[11,"ne","","",222],[11,"clone","","",222],[11,"fmt","","",223],[11,"partial_cmp","","",223],[11,"lt","","",223],[11,"le","","",223],[11,"gt","","",223],[11,"ge","","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"decode","","",223],[11,"encode","","",223],[11,"clone","","",223],[11,"fmt","","",24],[11,"clone","","",24],[11,"fmt","","",224],[11,"clone","","",224],[11,"fmt","","",225],[11,"clone","","",225],[11,"clone","","",226],[11,"fmt","","",227],[11,"hash","","",227],[11,"eq","","",227],[11,"ne","","",227],[11,"clone","","",227],[11,"decode","","",228],[11,"encode","","",228],[11,"fmt","","",228],[11,"hash","","",228],[11,"eq","","",228],[11,"ne","","",228],[11,"clone","","",228],[11,"expr","","",227],[11,"autoobject","","",227],[11,"autoderef","","",227],[11,"clone","","",229],[11,"new","","",230],[11,"hash","","",231],[11,"cmp","","",231],[11,"partial_cmp","","",231],[11,"lt","","",231],[11,"le","","",231],[11,"gt","","",231],[11,"ge","","",231],[11,"clone","","",231],[11,"eq","","",231],[11,"ne","","",231],[11,"empty","","Returns an empty set of flags.",231],[11,"all","","Returns the set containing all flags.",231],[11,"bits","","Returns the raw value of the flags currently stored.",231],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",231],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",231],[11,"is_empty","","Returns `true` if no flags are currently stored.",231],[11,"is_all","","Returns `true` if all flags are currently set.",231],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",231],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",231],[11,"insert","","Inserts the specified flags in-place.",231],[11,"remove","","Removes the specified flags in-place.",231],[11,"toggle","","Toggles the specified flags in-place.",231],[6,"Output","rustc_trans::session::config",""],[11,"bitor","rustc::middle::ty","Returns the union of the two sets of flags.",231],[6,"Output","rustc_trans::session::config",""],[11,"bitxor","rustc::middle::ty","Returns the left flags, but with all the right flags toggled.",231],[6,"Output","rustc_trans::session::config",""],[11,"bitand","rustc::middle::ty","Returns the intersection between the two sets of flags.",231],[6,"Output","rustc_trans::session::config",""],[11,"sub","rustc::middle::ty","Returns the set difference of the two sets of flags.",231],[6,"Output","rustc_trans::session::config",""],[11,"not","rustc::middle::ty","Returns the complement of this set of flags.",231],[11,"print_debug_stats","","",232],[11,"fmt","","",233],[11,"fmt","","",231],[11,"eq","","",233],[11,"hash","","",233],[11,"eq","","",234],[11,"hash","","",234],[11,"borrow","","",234],[11,"fmt","","",235],[11,"hash","","",235],[11,"eq","","",235],[11,"ne","","",235],[11,"clone","","",235],[11,"fmt","","",236],[11,"hash","","",236],[11,"eq","","",236],[11,"ne","","",236],[11,"clone","","",236],[11,"fmt","","",237],[11,"hash","","",237],[11,"eq","","",237],[11,"ne","","",237],[11,"clone","","",237],[11,"diverges","","",237],[11,"unwrap","","",237],[11,"diverges","","",89],[11,"hash","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"clone","","",84],[11,"inputs","","",89],[11,"input","","",89],[11,"output","","",89],[11,"variadic","","",89],[11,"fmt","","",238],[11,"hash","","",238],[11,"eq","","",238],[11,"ne","","",238],[11,"clone","","",238],[11,"fmt","","",239],[11,"decode","","",239],[11,"encode","","",239],[11,"hash","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"clone","","",239],[11,"fmt","","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"hash","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"fmt","","",240],[11,"hash","","",240],[11,"eq","","",240],[11,"ne","","",240],[11,"clone","","",240],[11,"decode","","",241],[11,"encode","","",241],[11,"fmt","","",241],[11,"hash","","",241],[11,"eq","","",241],[11,"ne","","",241],[11,"clone","","",241],[11,"fmt","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"clone","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"fmt","","",22],[11,"decode","","",22],[11,"encode","","",22],[11,"clone","","",22],[11,"eq","","",22],[11,"ne","","",22],[11,"is_bound","","",15],[11,"escapes_depth","","",15],[11,"fmt","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"hash","","",16],[11,"cmp","","",16],[11,"partial_cmp","","",16],[11,"lt","","",16],[11,"le","","",16],[11,"gt","","",16],[11,"ge","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"hash","","",19],[11,"cmp","","",19],[11,"partial_cmp","","",19],[11,"lt","","",19],[11,"le","","",19],[11,"gt","","",19],[11,"ge","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"fmt","","",242],[11,"hash","","",242],[11,"eq","","",242],[11,"ne","","",242],[11,"clone","","",242],[11,"fmt","","",243],[11,"hash","","",243],[11,"eq","","",243],[11,"ne","","",243],[11,"clone","","",243],[11,"principal_def_id","","",243],[11,"principal_trait_ref_with_self_ty","","Object types don't have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",243],[11,"projection_bounds_with_self_ty","","",243],[11,"fmt","","",82],[11,"hash","","",82],[11,"eq","","",82],[11,"ne","","",82],[11,"clone","","",82],[11,"self_ty","","",89],[11,"def_id","","",89],[11,"substs","","",89],[11,"input_types","","",89],[11,"to_poly_trait_predicate","","",89],[11,"fmt","","",89],[11,"hash","","",89],[11,"eq","","",89],[11,"ne","","",89],[11,"clone","","",89],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a\nrisky thing to do because it's easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",89],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"fmt","","",244],[11,"clone","","",244],[11,"fmt","","",245],[11,"clone","","",245],[11,"fmt","","",246],[11,"clone","","",246],[11,"fmt","","",247],[11,"clone","","",247],[11,"hash","","",247],[11,"eq","","",247],[11,"ne","","",247],[11,"fmt","","",248],[11,"clone","","",248],[11,"hash","","",248],[11,"eq","","",248],[11,"ne","","",248],[11,"fmt","","",249],[11,"hash","","",249],[11,"decode","","",249],[11,"eq","","",249],[11,"ne","","",249],[11,"encode","","",249],[11,"clone","","",249],[11,"to_usize","","",249],[11,"from_usize","","",249],[11,"hash","","",250],[11,"eq","","",250],[11,"ne","","",250],[11,"clone","","",250],[11,"hash","","",118],[11,"eq","","",118],[11,"ne","","",118],[11,"clone","","",118],[11,"hash","","",120],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"hash","","",251],[11,"decode","","",251],[11,"encode","","",251],[11,"eq","","",251],[11,"ne","","",251],[11,"clone","","",251],[11,"hash","","",252],[11,"eq","","",252],[11,"ne","","",252],[11,"clone","","",252],[11,"fmt","","",253],[11,"hash","","",253],[11,"eq","","",253],[11,"ne","","",253],[11,"decode","","",253],[11,"encode","","",253],[11,"clone","","",253],[11,"fmt","","",254],[11,"hash","","",254],[11,"decode","","",254],[11,"encode","","",254],[11,"clone","","",254],[11,"eq","","",254],[11,"ne","","",254],[11,"fmt","","",250],[11,"fmt","","",118],[11,"fmt","","",120],[11,"fmt","","",251],[11,"fmt","","",84],[11,"fmt","","",252],[11,"fmt","","",119],[11,"fmt","","",255],[11,"clone","","",255],[11,"fmt","","",256],[11,"clone","","",256],[11,"fmt","","",257],[11,"clone","","",257],[11,"decode","","",257],[11,"encode","","",257],[11,"to_early_bound_region","","",257],[11,"fmt","","",258],[11,"clone","","",258],[11,"empty","","",258],[11,"is_empty","","",258],[11,"has_type_params","","",258],[11,"has_region_params","","",258],[11,"fmt","","",259],[11,"clone","","",259],[11,"empty","","",259],[11,"instantiate","","",259],[11,"instantiate_supertrait","","",259],[11,"fmt","","",260],[11,"hash","","",260],[11,"eq","","",260],[11,"ne","","",260],[11,"clone","","",260],[11,"subst_supertrait","","Performs a substituion suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",260],[11,"fmt","","",261],[11,"hash","","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"clone","","",261],[11,"def_id","","",261],[11,"input_types","","",261],[11,"self_ty","","",261],[11,"def_id","","",89],[11,"fmt","","",262],[11,"hash","","",262],[11,"eq","","",262],[11,"ne","","",262],[11,"clone","","",262],[11,"fmt","","",263],[11,"hash","","",263],[11,"eq","","",263],[11,"ne","","",263],[11,"clone","","",263],[11,"fmt","","",83],[11,"hash","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"clone","","",83],[11,"item_name","","",89],[11,"sort_key","","",89],[11,"fmt","","",264],[11,"hash","","",264],[11,"eq","","",264],[11,"ne","","",264],[11,"clone","","",264],[11,"sort_key","","",264],[11,"to_poly_trait_ref","alloc::rc","",81],[11,"to_poly_trait_ref","rustc::middle::ty","",89],[11,"to_poly_trait_ref","","",89],[11,"as_predicate","alloc::rc","",81],[11,"as_predicate","rustc::middle::ty","",89],[11,"as_predicate","","",89],[11,"as_predicate","","",89],[11,"as_predicate","","",89],[11,"as_predicate","","",89],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",260],[11,"has_escaping_regions","","",260],[11,"to_opt_poly_trait_ref","","",260],[11,"fmt","","",265],[11,"clone","","",265],[11,"empty","","",265],[11,"has_escaping_regions","","",265],[11,"is_empty","","",265],[11,"new","","",82],[11,"self_ty","","",82],[11,"input_types","","",82],[11,"clone","","",266],[11,"with_caller_bounds","","",266],[11,"for_item","","",266],[11,"fmt","","",267],[11,"clone","","",267],[11,"clone","","",268],[11,"decode","","",154],[11,"encode","","",154],[11,"fmt","","",154],[11,"eq","","",154],[11,"ne","","",154],[11,"clone","","",154],[11,"trait_did","","",154],[11,"mk_substs","","",232],[11,"mk_bare_fn","","",232],[11,"mk_region","","",232],[11,"closure_kind","","",232],[11,"closure_type","","",232],[11,"type_parameter_def","","",232],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",233],[11,"walk_children","","Iterator that walks types reachable from `self`, in\ndepth-first order. Note that this is a shallow walk. For\nexample:",233],[11,"as_opt_param_ty","","",233],[11,"is_param","","",233],[11,"new","","",238],[11,"for_self","","",238],[11,"for_def","","",238],[11,"to_ty","","",238],[11,"is_self","","",238],[11,"empty","","",268],[11,"is_noop","","",268],[11,"empty","","",247],[11,"clone","","",269],[11,"when","","",269],[11,"intersects","","",269],[11,"owns_managed","","",269],[11,"owns_owned","","",269],[11,"is_sized","","",269],[11,"interior_param","","",269],[11,"interior_unsafe","","",269],[11,"interior_unsized","","",269],[11,"needs_drop","","",269],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",269],[11,"reference","","Includes only those bits that still apply when indirected through a reference (`&`)",269],[11,"managed_pointer","","Includes only those bits that still apply when indirected through a managed pointer (`@`)",269],[11,"unsafe_pointer","","Includes only those bits that still apply when indirected through an unsafe pointer (`*`)",269],[11,"union","","",269],[11,"has_dtor","","",269],[6,"Output","rustc_trans::session::config",""],[11,"bitor","rustc::middle::ty","",269],[6,"Output","rustc_trans::session::config",""],[11,"bitand","rustc::middle::ty","",269],[6,"Output","rustc_trans::session::config",""],[11,"sub","rustc::middle::ty","",269],[11,"fmt","","",269],[11,"fmt","","",270],[11,"eq","","",270],[11,"ne","","",270],[11,"cmp","","",270],[11,"partial_cmp","","",270],[11,"lt","","",270],[11,"le","","",270],[11,"gt","","",270],[11,"ge","","",270],[11,"repr","","",246],[11,"clone","","",271],[11,"from_ast_variant","","Creates a new VariantInfo from the corresponding ast representation.",271],[11,"is_present","","",272],[11,"has_drop_flag","","",272],[11,"clone","","",273],[11,"to_string","","",218],[11,"from_mutbl","","",241],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",241],[11,"to_user_str","","",241],[11,"is_method_call","","",232],[11,"upvar_capture","","",232],[11,"node_ty","","",266],[11,"expr_ty_adjusted","","",266],[11,"node_method_ty","","",266],[11,"node_method_origin","","",266],[11,"adjustments","","",266],[11,"is_method_call","","",266],[11,"temporary_scope","","",266],[11,"upvar_capture","","",266],[11,"type_moves_by_default","","",266],[11,"param_env","","",266],[11,"closure_kind","","",266],[11,"closure_type","","",266],[11,"closure_upvars","","",266],[11,"fmt","","",274],[11,"eq","","",274],[11,"ne","","",274],[11,"clone","","",274],[11,"decode","","",21],[11,"encode","","",21],[11,"clone","","",21],[11,"is_identity","","",219],[11,"is_identity","","",221],[11,"new","","",239],[11,"shifted","","",239],[11,"repr","","",219],[11,"repr","","",220],[11,"repr","","",221],[11,"repr","","",222],[11,"repr","","",243],[11,"repr","","",260],[11,"repr","","",229],[11,"has_regions_escaping_depth","rustc::middle::subst","",172],[11,"has_regions_escaping_depth","","",175],[11,"has_regions_escaping_depth","rustc::middle::ty","",267],[11,"has_regions_escaping_depth","","",15],[11,"has_regions_escaping_depth","","",259],[11,"has_regions_escaping_depth","","",260],[11,"has_regions_escaping_depth","","",82],[11,"has_regions_escaping_depth","rustc::middle::subst","",173],[11,"has_regions_escaping_depth","rustc::middle::ty","",89],[11,"has_regions_escaping_depth","","",262],[11,"has_regions_escaping_depth","","",261],[11,"has_regions_escaping_depth","","",263],[11,"has_regions_escaping_depth","","",83],[11,"has_regions_escaping_depth","","",264],[11,"repr","","",83],[11,"has_projection_types","collections::vec","",275],[11,"has_projection_types","rustc::middle::subst","",175],[11,"has_projection_types","rustc::middle::ty","",236],[11,"has_projection_types","","",273],[11,"has_projection_types","","",265],[11,"has_projection_types","","",260],[11,"has_projection_types","","",261],[11,"has_projection_types","","",262],[11,"has_projection_types","","",15],[11,"has_projection_types","","",263],[11,"has_projection_types","","",83],[11,"has_projection_types","","",264],[11,"has_projection_types","","",82],[11,"has_projection_types","rustc::middle::subst","",172],[11,"has_projection_types","core::option","",11],[11,"has_projection_types","alloc::rc","",81],[11,"has_projection_types","alloc::boxed","",276],[11,"has_projection_types","rustc::middle::ty","",89],[11,"has_projection_types","","",237],[11,"has_projection_types","","",84],[11,"has_projection_types","","",208],[11,"has_projection_types","","",235],[11,"references_error","","",89],[11,"references_error","alloc::rc","",81],[11,"references_error","rustc::middle::ty","",261],[11,"references_error","","",83],[11,"references_error","","",82],[11,"references_error","","",260],[11,"references_error","","",263],[11,"references_error","","",262],[11,"references_error","","",15],[11,"repr","","",236],[11,"repr","","",273],[11,"repr","","",208],[11,"repr","","",266],[11,"repr","","",255],[11,"fold_with","core::option","",11],[11,"fold_with","alloc::rc","",81],[11,"fold_with","alloc::boxed","",276],[11,"fold_with","collections::vec","",275],[11,"fold_with","rustc::middle::ty","",89],[11,"fold_with","syntax::owned_slice","",277],[11,"fold_with","rustc::middle::subst","",175],[11,"fold_with","rustc::middle::ty","",235],[11,"fold_with","","",236],[11,"fold_with","","",214],[11,"fold_with","","",237],[11,"fold_with","","",84],[11,"fold_with","","",82],[11,"fold_with","","",208],[11,"fold_with","","",15],[11,"fold_with","rustc::middle::subst","",172],[11,"fold_with","rustc::middle::ty","",268],[11,"fold_with","","",222],[11,"fold_with","","",24],[11,"fold_with","","",229],[11,"fold_with","collections::enum_set","",278],[11,"fold_with","rustc::middle::ty","",248],[11,"fold_with","","",247],[11,"fold_with","","",256],[11,"fold_with","","",255],[11,"fold_with","","",257],[11,"fold_with","","",258],[11,"fold_with","","",259],[11,"fold_with","","",260],[11,"fold_with","","",83],[11,"fold_with","","",264],[11,"fold_with","","",265],[11,"fold_with","","",220],[11,"fold_with","rustc::middle::traits","",198],[11,"fold_with","","",196],[11,"fold_with","","",201],[11,"fold_with","","",200],[11,"fold_with","","",199],[11,"fold_with","","",197],[11,"fold_with","rustc::middle::ty","",262],[11,"fold_with","","",261],[11,"fold_with","","",263],[11,"fold_with","","",273],[11,"fold_with","","",266],[11,"tcx","rustc::middle::ty_fold","",279],[11,"fold_ty","","",279],[11,"new","","",280],[11,"tcx","","",280],[11,"enter_region_binder","","",280],[11,"exit_region_binder","","",280],[11,"fold_region","","",280],[11,"tcx","","",281],[11,"fold_region","","",281],[11,"new","rustc::middle::ty_walk","",282],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",282],[6,"Item","rustc_trans::session::config",""],[11,"next","rustc::middle::ty_walk","",282],[11,"visit_foreign_item","rustc::middle::weak_lang_items","",283],[11,"from_i64","rustc::metadata::common","",284],[11,"from_u64","","",284],[11,"eq","","",284],[11,"ne","","",284],[11,"fmt","","",285],[11,"clone","","",285],[11,"fmt","rustc::metadata::tydecode","",286],[11,"clone","rustc::metadata::encoder","",287],[11,"visit_expr","","",288],[11,"visit_item","","",288],[11,"visit_foreign_item","","",288],[11,"visit_item","","",289],[11,"eq","rustc::metadata::decoder","",290],[11,"ne","","",290],[11,"fmt","","",291],[11,"clone","","",291],[11,"clone","","",292],[11,"visit_item","rustc::metadata::creader","",293],[11,"as_slice","","",294],[11,"new","","",293],[11,"read_crates","","",293],[11,"read_exported_macros","","Read exported macros.",293],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",293],[11,"clone","rustc::metadata::cstore","",295],[11,"eq","","",295],[11,"ne","","",295],[11,"fmt","","",295],[11,"from_i64","","",296],[11,"from_u64","","",296],[11,"eq","","",296],[11,"ne","","",296],[11,"clone","","",296],[11,"clone","","",297],[11,"eq","","",297],[11,"ne","","",297],[11,"new","","",298],[11,"next_crate_num","","",298],[11,"get_crate_data","","",298],[11,"get_crate_hash","","",298],[11,"set_crate_data","","",298],[11,"iter_crate_data","","",298],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",298],[11,"add_used_crate_source","","",298],[11,"get_used_crate_source","","",298],[11,"reset","","",298],[11,"get_used_crates","","",298],[11,"add_used_library","","",298],[11,"get_used_libraries","","",298],[11,"add_used_link_args","","",298],[11,"get_used_link_args","","",298],[11,"add_extern_mod_stmt_cnum","","",298],[11,"find_extern_mod_stmt_cnum","","",298],[11,"data","","",299],[11,"name","","",299],[11,"hash","","",299],[11,"as_slice","","",300],[11,"maybe_load_library_crate","rustc::metadata::loader","",301],[11,"load_library_crate","","",301],[11,"report_load_errs","","",301],[11,"as_slice","","",302],[11,"for_each_lib_search_path","rustc::metadata::filesearch","",303],[11,"get_lib_path","","",303],[11,"search","","",303],[11,"new","","",303],[11,"get_dylib_search_paths","","",303],[11,"get_tools_search_paths","","",303],[11,"visit_item","rustc::metadata::macro_import","",304],[11,"visit_mac","","",304],[11,"eq","rustc::session::config","",305],[11,"ne","","",305],[11,"clone","","",305],[11,"eq","","",306],[11,"ne","","",306],[11,"clone","","",306],[11,"cmp","","",307],[11,"partial_cmp","","",307],[11,"lt","","",307],[11,"le","","",307],[11,"gt","","",307],[11,"ge","","",307],[11,"eq","","",307],[11,"ne","","",307],[11,"clone","","",307],[11,"clone","","",308],[11,"clone","","",309],[11,"eq","","",310],[11,"ne","","",310],[11,"clone","","",310],[11,"filestem","","",311],[11,"clone","","",312],[11,"path","","",312],[11,"temp_path","","",312],[11,"with_extension","","",312],[11,"filestem","","",312],[11,"eq","","",313],[11,"ne","","",313],[11,"fmt","","",314],[11,"hash","","",314],[11,"cmp","","",314],[11,"clone","","",314],[11,"partial_cmp","","",314],[11,"lt","","",314],[11,"le","","",314],[11,"gt","","",314],[11,"ge","","",314],[11,"eq","","",314],[11,"ne","","",314],[11,"clone","","",315],[11,"is_empty","","",315],[11,"clone","","",316],[11,"clone","","",317],[11,"fmt","","",318],[11,"eq","","",318],[11,"ne","","",318],[11,"clone","","",318],[11,"eq","","",319],[11,"ne","","",319],[11,"clone","","",319],[11,"is_stable","","",319],[11,"fmt","","",314],[11,"fmt","rustc::session::search_paths","",320],[11,"clone","","",320],[11,"fmt","","",321],[11,"clone","","",321],[11,"eq","","",321],[11,"ne","","",321],[11,"new","","",320],[11,"add_path","","",320],[11,"iter","","",320],[6,"Item","rustc_trans::session::config",""],[11,"next","rustc::session::search_paths","",322],[11,"span_fatal","rustc::session","",323],[11,"span_fatal_with_code","","",323],[11,"fatal","","",323],[11,"span_err","","",323],[11,"span_err_with_code","","",323],[11,"err","","",323],[11,"err_count","","",323],[11,"has_errors","","",323],[11,"abort_if_errors","","",323],[11,"span_warn","","",323],[11,"span_warn_with_code","","",323],[11,"warn","","",323],[11,"opt_span_warn","","",323],[11,"span_note","","",323],[11,"span_end_note","","",323],[11,"span_help","","",323],[11,"fileline_note","","",323],[11,"fileline_help","","",323],[11,"note","","",323],[11,"help","","",323],[11,"opt_span_bug","","",323],[11,"span_bug","","",323],[11,"bug","","",323],[11,"span_unimpl","","",323],[11,"unimpl","","",323],[11,"add_lint","","",323],[11,"next_node_id","","",323],[11,"reserve_node_ids","","",323],[11,"diagnostic","","",323],[11,"codemap","","",323],[11,"impossible_case","","",323],[11,"verbose","","",323],[11,"time_passes","","",323],[11,"count_llvm_insns","","",323],[11,"count_type_sizes","","",323],[11,"time_llvm_passes","","",323],[11,"trans_stats","","",323],[11,"meta_stats","","",323],[11,"asm_comments","","",323],[11,"no_verify","","",323],[11,"borrowck_stats","","",323],[11,"print_llvm_passes","","",323],[11,"lto","","",323],[11,"no_landing_pads","","",323],[11,"unstable_options","","",323],[11,"print_enum_sizes","","",323],[11,"sysroot","","",323],[11,"target_filesearch","","",323],[11,"host_filesearch","","",323],[11,"args","rustc::plugin::registry","Get the plugin's arguments, if any.",324],[11,"register_syntax_extension","","Register a syntax extension of any kind.",324],[11,"register_macro","","Register a macro of the usual kind.",324],[11,"register_lint_pass","","Register a compiler lint pass.",324],[11,"register_lint_group","","Register a lint group.",324],[11,"visit_item","rustc::plugin::build","",325],[11,"fmt","rustc::lint","",326],[11,"name_lower","","Get the lint's name, with ASCII letters converted to lowercase.",326],[11,"clone","","",327],[11,"eq","","",327],[11,"hash","","",327],[11,"of","","Get the `LintId` for a `Lint`.",327],[11,"as_str","","Get the name of the lint.",327],[11,"fmt","","",328],[11,"cmp","","",328],[11,"partial_cmp","","",328],[11,"lt","","",328],[11,"le","","",328],[11,"gt","","",328],[11,"ge","","",328],[11,"eq","","",328],[11,"ne","","",328],[11,"clone","","",328],[11,"as_str","","Convert a level to a lower-case string.",328],[11,"from_str","","Convert a lower-case string to a level.",328],[11,"eq","","",329],[11,"ne","","",329],[11,"clone","","",329],[11,"get_lints","rustc::lint::builtin","",330],[11,"new","rustc::lint::context","",331],[11,"get_lints","","",331],[11,"get_lint_groups","","",331],[11,"register_pass","","",331],[11,"register_group","","",331],[11,"register_renamed","","",331],[11,"process_command_line","","",331],[11,"sess","","Get the overall compiler `Session` object.",332],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",332],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",332],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",332],[11,"visit_item","","",332],[11,"visit_foreign_item","","",332],[11,"visit_pat","","",332],[11,"visit_expr","","",332],[11,"visit_stmt","","",332],[11,"visit_fn","","",332],[11,"visit_ty_method","","",332],[11,"visit_struct_def","","",332],[11,"visit_struct_field","","",332],[11,"visit_variant","","",332],[11,"visit_ty","","",332],[11,"visit_ident","","",332],[11,"visit_mod","","",332],[11,"visit_local","","",332],[11,"visit_block","","",332],[11,"visit_arm","","",332],[11,"visit_decl","","",332],[11,"visit_expr_post","","",332],[11,"visit_generics","","",332],[11,"visit_trait_item","","",332],[11,"visit_opt_lifetime_ref","","",332],[11,"visit_lifetime_ref","","",332],[11,"visit_lifetime_def","","",332],[11,"visit_explicit_self","","",332],[11,"visit_mac","","",332],[11,"visit_path","","",332],[11,"visit_attribute","","",332],[11,"visit_id","","",332],[11,"get_lints","","",333],[11,"check_item","","",333],[11,"fmt","rustc::util::common","",334],[11,"clone","","",334],[11,"drop","","",335],[11,"visit_expr","","",336],[11,"visit_expr","","",337],[11,"repr","core::option","",11],[11,"repr","syntax::ptr","",338],[11,"repr","core::result","",129],[11,"repr","alloc::rc","",81],[11,"repr","alloc::boxed","",276],[11,"repr","syntax::owned_slice","",277],[11,"repr","collections::vec","",275],[11,"user_string","","",275],[11,"repr","rustc::middle::def","",14],[11,"user_string","rustc::middle::ty","",243],[11,"repr","","",256],[11,"repr","","",257],[11,"repr","","",233],[11,"repr","","",214],[11,"repr","rustc::middle::subst","",172],[11,"repr","","",175],[11,"repr","rustc::middle::ty","",268],[11,"repr","rustc::middle::subst","",173],[11,"repr","collections::enum_set","",278],[11,"repr","rustc::middle::ty","",247],[11,"repr","","",82],[11,"repr","","",339],[11,"repr","syntax::ast","",340],[11,"repr","","",151],[11,"repr","","",341],[11,"user_string","","",341],[11,"repr","","",342],[11,"repr","","",343],[11,"repr","","",344],[11,"repr","syntax::codemap","",345],[11,"repr","syntax::ast","",152],[11,"repr","rustc::middle::ty","",19],[11,"repr","","",15],[11,"user_string","","",15],[11,"repr","","",16],[11,"repr","rustc::middle::region","",17],[11,"repr","","",18],[11,"repr","syntax::ast","",10],[11,"repr","rustc::middle::ty","",267],[11,"repr","","",258],[11,"repr","","",259],[11,"repr","","",265],[11,"repr","","",217],[11,"repr","","",218],[11,"repr","","",212],[11,"repr","syntax::ast","",5],[11,"user_string","","",5],[11,"repr","","",4],[11,"repr","","",346],[11,"repr","","",347],[11,"repr","rustc::middle::ty","",235],[11,"repr","","",84],[11,"repr","","",237],[11,"repr","","",226],[11,"repr","","",24],[11,"repr","","",224],[11,"repr","","",225],[11,"repr","","",249],[11,"user_string","","",249],[11,"repr","syntax::codemap","",12],[11,"user_string","alloc::rc","",81],[11,"user_string","rustc::middle::ty","",247],[11,"repr","","",248],[11,"user_string","collections::enum_set","",278],[11,"user_string","rustc::middle::ty","",89],[11,"user_string","","",82],[11,"user_string","syntax::ast","",4],[11,"repr","syntax::abi","",348],[11,"user_string","","",348],[11,"repr","rustc::middle::ty","",240],[11,"repr","syntax::ast","",349],[11,"repr","rustc::middle::ty","",241],[11,"repr","","",22],[11,"repr","","",23],[11,"repr","","",118],[11,"repr","","",120],[11,"repr","","",251],[11,"repr","","",250],[11,"repr","","",119],[11,"repr","syntax::ast","",350],[11,"repr","","",351],[11,"repr","","",121],[11,"repr","rustc::middle::ty","",274],[11,"user_string","","",238],[11,"repr","","",238],[11,"repr","","",89],[11,"repr","std::collections::hash::map","",352],[11,"repr","rustc::middle::ty","",263],[11,"user_string","","",263],[11,"repr","","",262],[11,"user_string","","",262],[11,"repr","","",261],[11,"user_string","","",261],[11,"user_string","","",83],[11,"repr","","",264],[11,"user_string","","",264],[11,"user_string","","",260],[11,"default","rustc::util::nodemap","",353],[11,"write","","",353],[11,"finish","","",353],[11,"new","rustc::util::snapshot_vec","",354],[11,"record","","",354],[11,"push","","",354],[11,"get","","",354],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",354],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",354],[11,"start_snapshot","","",354],[11,"actions_since_snapshot","","",354],[11,"rollback_to","","",354],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",354],[11,"input","rustc_back::sha2","",355],[11,"reset","","",355],[11,"zero_until","","",355],[11,"next","","",355],[11,"full_buffer","","",355],[11,"position","","",355],[11,"remaining","","",355],[11,"size","","",355],[11,"new","","Construct a new instance of a SHA-256 digest.",356],[11,"input","","",356],[11,"result","","",356],[11,"reset","","",356],[11,"output_bits","","",356],[11,"open","rustc_llvm::archive_ro","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",357],[11,"read","","Reads a file in the archive",357],[11,"drop","","",357],[11,"describe","rustc_llvm::diagnostic","",358],[11,"unpack","","",359],[11,"eq","rustc_llvm","",360],[11,"ne","","",360],[11,"fmt","","",361],[11,"hash","","",362],[11,"cmp","","",362],[11,"partial_cmp","","",362],[11,"lt","","",362],[11,"le","","",362],[11,"gt","","",362],[11,"ge","","",362],[11,"clone","","",362],[11,"eq","","",362],[11,"ne","","",362],[11,"empty","","Returns an empty set of flags.",362],[11,"all","","Returns the set containing all flags.",362],[11,"bits","","Returns the raw value of the flags currently stored.",362],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",362],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",362],[11,"is_empty","","Returns `true` if no flags are currently stored.",362],[11,"is_all","","Returns `true` if all flags are currently set.",362],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",362],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",362],[11,"insert","","Inserts the specified flags in-place.",362],[11,"remove","","Removes the specified flags in-place.",362],[11,"toggle","","Toggles the specified flags in-place.",362],[6,"Output","rustc_trans::session::config",""],[11,"bitor","rustc_llvm","Returns the union of the two sets of flags.",362],[6,"Output","rustc_trans::session::config",""],[11,"bitxor","rustc_llvm","Returns the left flags, but with all the right flags toggled.",362],[6,"Output","rustc_trans::session::config",""],[11,"bitand","rustc_llvm","Returns the intersection between the two sets of flags.",362],[6,"Output","rustc_trans::session::config",""],[11,"sub","rustc_llvm","Returns the set difference of the two sets of flags.",362],[6,"Output","rustc_trans::session::config",""],[11,"not","rustc_llvm","Returns the complement of this set of flags.",362],[11,"apply_llfn","","",362],[11,"apply_callsite","","",362],[11,"apply_llfn","","",363],[11,"apply_callsite","","",363],[11,"apply_llfn","","",364],[11,"apply_callsite","","",364],[11,"new","","",365],[11,"arg","","",365],[11,"ret","","",365],[11,"apply_llfn","","",365],[11,"apply_callsite","","",365],[11,"fmt","","",366],[11,"eq","","",366],[11,"ne","","",366],[11,"clone","","",367],[11,"eq","","",367],[11,"ne","","",367],[11,"eq","","",368],[11,"ne","","",368],[11,"drop","","",369],[11,"new","","",370],[11,"drop","","",370],[11,"drop","","",371],[3,"Config","rustc_trans::session::config",""],[12,"target","","",372],[12,"int_type","","",372],[12,"uint_type","","",372],[4,"OptLevel","",""],[13,"No","","",305],[13,"Less","","",305],[13,"Default","","",305],[13,"Aggressive","","",305],[4,"DebugInfoLevel","",""],[13,"NoDebugInfo","","",306],[13,"LimitedDebugInfo","","",306],[13,"FullDebugInfo","","",306],[4,"OutputType","",""],[13,"OutputTypeBitcode","","",307],[13,"OutputTypeAssembly","","",307],[13,"OutputTypeLlvmAssembly","","",307],[13,"OutputTypeObject","","",307],[13,"OutputTypeExe","","",307],[13,"OutputTypeDepInfo","","",307],[3,"Options","",""],[12,"crate_types","","",308],[12,"gc","","",308],[12,"optimize","","",308],[12,"debug_assertions","","",308],[12,"debuginfo","","",308],[12,"lint_opts","","",308],[12,"describe_lints","","",308],[12,"output_types","","",308],[12,"search_paths","","",308],[12,"libs","","",308],[12,"maybe_sysroot","","",308],[12,"target_triple","","",308],[12,"cfg","","",308],[12,"test","","",308],[12,"parse_only","","",308],[12,"no_trans","","",308],[12,"treat_err_as_bug","","",308],[12,"no_analysis","","",308],[12,"debugging_opts","","",308],[12,"write_dependency_info","","Whether to write dependency files. It's (enabled, optional filename).",308],[12,"prints","","",308],[12,"cg","","",308],[12,"color","","",308],[12,"show_span","","",308],[12,"externs","","",308],[12,"crate_name","","",308],[12,"alt_std_name","","An optional name to use as the crate for std during std injection,\nwritten `extern crate std = \"name\"`. Default to \"std\". Used by\nout-of-tree drivers.",308],[12,"unstable_features","","Indicates how the compiler should treat unstable features",308],[4,"UnstableFeatures","",""],[13,"Disallow","","Hard errors for unstable features are active, as on\nbeta/stable channels.",309],[13,"Default","","Use the default lint levels",309],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time\nduring the build that feature-related lints are set to warn or above\nbecause the build turns on warnings-as-errors and uses lots of unstable\nfeatures. As a result, this this is always required for building Rust\nitself.",309],[4,"PrintRequest","",""],[13,"FileNames","","",310],[13,"Sysroot","","",310],[13,"CrateName","","",310],[4,"Input","",""],[13,"File","","Load source from file",311],[13,"Str","","The string is the source",311],[3,"OutputFilenames","",""],[12,"out_directory","","",312],[12,"out_filestem","","",312],[12,"single_output_file","","",312],[12,"extra","","",312],[5,"host_triple","",""],[5,"basic_options","","Some reasonable defaults"],[4,"EntryFnType","",""],[13,"EntryMain","","",313],[13,"EntryStart","","",313],[13,"EntryNone","","",313],[4,"CrateType","",""],[13,"CrateTypeExecutable","","",314],[13,"CrateTypeDylib","","",314],[13,"CrateTypeRlib","","",314],[13,"CrateTypeStaticlib","","",314],[4,"Passes","",""],[13,"SomePasses","","",315],[13,"AllPasses","","",315],[3,"CodegenOptions","",""],[12,"ar","","",316],[12,"linker","","",316],[12,"link_args","","",316],[12,"lto","","",316],[12,"target_cpu","","",316],[12,"target_feature","","",316],[12,"passes","","",316],[12,"llvm_args","","",316],[12,"save_temps","","",316],[12,"rpath","","",316],[12,"no_prepopulate_passes","","",316],[12,"no_vectorize_loops","","",316],[12,"no_vectorize_slp","","",316],[12,"soft_float","","",316],[12,"prefer_dynamic","","",316],[12,"no_integrated_as","","",316],[12,"no_redzone","","",316],[12,"relocation_model","","",316],[12,"code_model","","",316],[12,"metadata","","",316],[12,"extra_filename","","",316],[12,"codegen_units","","",316],[12,"remark","","",316],[12,"no_stack_check","","",316],[12,"debuginfo","","",316],[12,"opt_level","","",316],[12,"debug_assertions","","",316],[5,"basic_codegen_options","",""],[5,"build_codegen_options","",""],[6,"CodegenSetter","",""],[17,"CG_OPTIONS","",""],[3,"DebuggingOptions","",""],[12,"verbose","","",317],[12,"time_passes","","",317],[12,"count_llvm_insns","","",317],[12,"time_llvm_passes","","",317],[12,"trans_stats","","",317],[12,"asm_comments","","",317],[12,"no_verify","","",317],[12,"borrowck_stats","","",317],[12,"no_landing_pads","","",317],[12,"debug_llvm","","",317],[12,"count_type_sizes","","",317],[12,"meta_stats","","",317],[12,"print_link_args","","",317],[12,"gc","","",317],[12,"print_llvm_passes","","",317],[12,"ast_json","","",317],[12,"ast_json_noexpand","","",317],[12,"ls","","",317],[12,"save_analysis","","",317],[12,"print_move_fragments","","",317],[12,"flowgraph_print_loans","","",317],[12,"flowgraph_print_moves","","",317],[12,"flowgraph_print_assigns","","",317],[12,"flowgraph_print_all","","",317],[12,"print_region_graph","","",317],[12,"parse_only","","",317],[12,"no_trans","","",317],[12,"treat_err_as_bug","","",317],[12,"no_analysis","","",317],[12,"extra_plugins","","",317],[12,"unstable_options","","",317],[12,"print_enum_sizes","","",317],[12,"force_overflow_checks","","",317],[5,"basic_debugging_options","",""],[5,"build_debugging_options","",""],[6,"DebuggingSetter","",""],[17,"DB_OPTIONS","",""],[5,"default_lib_output","",""],[5,"default_configuration","",""],[5,"append_configuration","",""],[5,"build_configuration","",""],[5,"build_target_config","",""],[5,"short_optgroups","","Returns the \"short\" subset of the stable rustc command line options."],[5,"optgroups","","Returns all of the stable rustc command line options."],[4,"OptionStability","",""],[13,"Stable","","",318],[13,"Unstable","","",318],[3,"RustcOptGroup","",""],[12,"opt_group","","",319],[12,"stability","","",319],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options,\nincluding metadata for each option, such as whether the option is\npart of the stable long-term interface for rustc."],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for\neach option, such as whether the option is part of the stable\nlong-term interface for rustc."],[5,"parse_cfgspecs","",""],[5,"build_session_options","",""],[5,"get_unstable_features_setting","",""],[5,"parse_crate_types_from_list","",""],[0,"search_paths","rustc_trans::session",""],[3,"SearchPaths","rustc_trans::session::search_paths",""],[3,"Iter","",""],[4,"PathKind","",""],[13,"Native","","",321],[13,"Crate","","",321],[13,"Dependency","","",321],[13,"Framework","","",321],[13,"ExternFlag","","",321],[13,"All","","",321],[3,"Session","rustc_trans::session",""],[12,"target","","",323],[12,"host","","",323],[12,"opts","","",323],[12,"cstore","","",323],[12,"parse_sess","","",323],[12,"entry_fn","","",323],[12,"entry_type","","",323],[12,"plugin_registrar_fn","","",323],[12,"default_sysroot","","",323],[12,"local_crate_source_file","","",323],[12,"working_dir","","",323],[12,"lint_store","","",323],[12,"lints","","",323],[12,"crate_types","","",323],[12,"crate_metadata","","",323],[12,"features","","",323],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive\noperations such as auto-dereference and monomorphization.",323],[12,"can_print_warnings","","",323],[5,"build_session","",""],[5,"build_session_","",""],[5,"expect","",""],[5,"early_error","",""],[5,"early_warn","",""],[0,"metadata","rustc_trans",""],[0,"common","rustc_trans::metadata",""],[17,"tag_items","rustc_trans::metadata::common",""],[17,"tag_paths_data_name","",""],[17,"tag_def_id","",""],[17,"tag_items_data","",""],[17,"tag_items_data_item","",""],[17,"tag_items_data_item_family","",""],[17,"tag_items_data_item_type","",""],[17,"tag_items_data_item_symbol","",""],[17,"tag_items_data_item_variant","",""],[17,"tag_items_data_parent_item","",""],[17,"tag_items_data_item_is_tuple_struct_ctor","",""],[17,"tag_index","",""],[17,"tag_index_buckets","",""],[17,"tag_index_buckets_bucket","",""],[17,"tag_index_buckets_bucket_elt","",""],[17,"tag_index_table","",""],[17,"tag_meta_item_name_value","",""],[17,"tag_meta_item_name","",""],[17,"tag_meta_item_value","",""],[17,"tag_attributes","",""],[17,"tag_attribute","",""],[17,"tag_meta_item_word","",""],[17,"tag_meta_item_list","",""],[17,"tag_crate_deps","",""],[17,"tag_crate_dep","",""],[17,"tag_crate_hash","",""],[17,"tag_crate_crate_name","",""],[17,"tag_crate_dep_crate_name","",""],[17,"tag_crate_dep_hash","",""],[17,"tag_mod_impl","",""],[17,"tag_item_trait_item","",""],[17,"tag_item_trait_ref","",""],[17,"tag_disr_val","",""],[17,"tag_path","",""],[17,"tag_path_len","",""],[17,"tag_path_elem_mod","",""],[17,"tag_path_elem_name","",""],[17,"tag_item_field","",""],[17,"tag_item_field_origin","",""],[17,"tag_item_variances","",""],[17,"tag_item_impl_item","",""],[17,"tag_item_trait_method_explicit_self","",""],[17,"tag_items_data_item_reexport","",""],[17,"tag_items_data_item_reexport_def_id","",""],[17,"tag_items_data_item_reexport_name","",""],[4,"astencode_tag","",""],[13,"tag_ast","","",284],[13,"tag_tree","","",284],[13,"tag_id_range","","",284],[13,"tag_table","","",284],[13,"tag_table_def","","",284],[13,"tag_table_node_type","","",284],[13,"tag_table_item_subst","","",284],[13,"tag_table_freevars","","",284],[13,"tag_table_tcache","","",284],[13,"tag_table_param_defs","","",284],[13,"tag_table_mutbl","","",284],[13,"tag_table_last_use","","",284],[13,"tag_table_spill","","",284],[13,"tag_table_method_map","","",284],[13,"tag_table_vtable_map","","",284],[13,"tag_table_adjustments","","",284],[13,"tag_table_moves_map","","",284],[13,"tag_table_capture_map","","",284],[13,"tag_table_closure_tys","","",284],[13,"tag_table_closure_kinds","","",284],[13,"tag_table_upvar_capture_map","","",284],[13,"tag_table_capture_modes","","",284],[13,"tag_table_object_cast_map","","",284],[13,"tag_table_const_qualif","","",284],[17,"tag_item_trait_item_sort","",""],[17,"tag_item_trait_parent_sort","",""],[17,"tag_item_impl_type_basename","",""],[17,"tag_crate_triple","",""],[17,"tag_dylib_dependency_formats","",""],[17,"tag_lang_items","",""],[17,"tag_lang_items_item","",""],[17,"tag_lang_items_item_id","",""],[17,"tag_lang_items_item_node_id","",""],[17,"tag_lang_items_missing","",""],[17,"tag_item_unnamed_field","",""],[17,"tag_items_data_item_visibility","",""],[17,"tag_item_method_tps","",""],[17,"tag_item_method_fty","",""],[17,"tag_mod_child","",""],[17,"tag_misc_info","",""],[17,"tag_misc_info_crate_items","",""],[17,"tag_item_method_provided_source","",""],[17,"tag_item_impl_vtables","",""],[17,"tag_impls","",""],[17,"tag_impls_impl","",""],[17,"tag_items_data_item_inherent_impl","",""],[17,"tag_items_data_item_extension_impl","",""],[17,"tag_native_libraries","",""],[17,"tag_native_libraries_lib","",""],[17,"tag_native_libraries_name","",""],[17,"tag_native_libraries_kind","",""],[17,"tag_plugin_registrar_fn","",""],[17,"tag_method_argument_names","",""],[17,"tag_method_argument_name","",""],[17,"tag_reachable_extern_fns","",""],[17,"tag_reachable_extern_fn_id","",""],[17,"tag_items_data_item_stability","",""],[17,"tag_items_data_item_repr","",""],[3,"LinkMeta","",""],[12,"crate_name","","",285],[12,"crate_hash","","",285],[17,"tag_struct_fields","",""],[17,"tag_struct_field","",""],[17,"tag_struct_field_id","",""],[17,"tag_attribute_is_sugared_doc","",""],[17,"tag_items_data_region","",""],[17,"tag_region_param_def","",""],[17,"tag_region_param_def_ident","",""],[17,"tag_region_param_def_def_id","",""],[17,"tag_region_param_def_space","",""],[17,"tag_region_param_def_index","",""],[17,"tag_type_param_def","",""],[17,"tag_item_generics","",""],[17,"tag_method_ty_generics","",""],[17,"tag_predicate","",""],[17,"tag_predicate_space","",""],[17,"tag_predicate_data","",""],[17,"tag_unsafety","",""],[17,"tag_associated_type_names","",""],[17,"tag_associated_type_name","",""],[17,"tag_polarity","",""],[17,"tag_macro_defs","",""],[17,"tag_macro_def","",""],[17,"tag_macro_def_body","",""],[17,"tag_paren_sugar","",""],[17,"tag_codemap","",""],[17,"tag_codemap_filemap","",""],[17,"tag_item_super_predicates","",""],[17,"tag_defaulted_trait","",""],[0,"tyencode","rustc_trans::metadata",""],[3,"ctxt","rustc_trans::metadata::tyencode",""],[12,"diag","","",373],[12,"ds","","",373],[12,"tcx","","",373],[12,"abbrevs","","",373],[3,"ty_abbrev","",""],[6,"abbrev_map","",""],[5,"enc_ty","",""],[5,"enc_substs","",""],[5,"enc_region","",""],[5,"enc_trait_ref","",""],[5,"enc_bare_fn_ty","",""],[5,"enc_closure_ty","",""],[5,"enc_builtin_bounds","",""],[5,"enc_existential_bounds","",""],[5,"enc_bounds","",""],[5,"enc_region_bounds","",""],[5,"enc_type_param_def","",""],[5,"enc_predicate","",""],[0,"tydecode","rustc_trans::metadata",""],[4,"DefIdSource","rustc_trans::metadata::tydecode",""],[13,"NominalType","","",286],[13,"TypeWithId","","",286],[13,"TypeParameter","","",286],[13,"RegionParameter","","",286],[13,"ClosureSource","","",286],[3,"PState","",""],[5,"parse_ident","",""],[5,"parse_name","",""],[5,"parse_state_from_data","",""],[5,"parse_ty_closure_data","",""],[5,"parse_ty_data","",""],[5,"parse_region_data","",""],[5,"parse_bare_fn_ty_data","",""],[5,"parse_trait_ref_data","",""],[5,"parse_substs_data","",""],[5,"parse_bounds_data","",""],[5,"parse_existential_bounds_data","",""],[5,"parse_builtin_bounds_data","",""],[5,"parse_def_id","",""],[5,"parse_predicate_data","",""],[5,"parse_predicate","",""],[5,"parse_type_param_def_data","",""],[0,"encoder","rustc_trans::metadata",""],[4,"InlinedItemRef","rustc_trans::metadata::encoder","A borrowed version of `ast::InlinedItem`."],[13,"IIItemRef","","",374],[13,"IITraitItemRef","","",374],[13,"IIImplItemRef","","",374],[13,"IIForeignRef","","",374],[6,"EncodeInlinedItem","",""],[3,"EncodeParams","",""],[12,"diag","","",375],[12,"tcx","","",375],[12,"reexports","","",375],[12,"item_symbols","","",375],[12,"link_meta","","",375],[12,"cstore","","",375],[12,"encode_inlined_item","","",375],[12,"reachable","","",375],[3,"EncodeContext","",""],[12,"diag","","",25],[12,"tcx","","",25],[12,"reexports","","",25],[12,"item_symbols","","",25],[12,"link_meta","","",25],[12,"cstore","","",25],[12,"encode_inlined_item","","",25],[12,"type_abbrevs","","",25],[12,"reachable","","",25],[5,"encode_def_id","",""],[5,"def_to_string","",""],[5,"write_closure_type","",""],[5,"write_type","",""],[5,"write_trait_ref","",""],[5,"write_region","",""],[17,"metadata_encoding_version","",""],[5,"encode_metadata","",""],[5,"encoded_ty","",""],[0,"decoder","rustc_trans::metadata",""],[6,"Cmd","rustc_trans::metadata::decoder",""],[5,"maybe_find_item","",""],[5,"item_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_type","",""],[5,"get_stability","",""],[5,"get_repr_attrs","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_symbol","",""],[4,"DefLike","",""],[13,"DlDef","","",291],[13,"DlImpl","","",291],[13,"DlField","","",291],[5,"each_lang_item","","Iterates over the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over all the top-level crate items."],[5,"get_item_path","",""],[6,"DecodeInlinedItem","",""],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns the def IDs of all the items in the given implementation."],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_impl_or_trait_item","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_tuple_struct_definition_if_ctor","","If node_id is the constructor of a tuple struct, retrieve the NodeId of\nthe actual type definition, otherwise, return None"],[5,"get_item_attrs","",""],[5,"get_struct_field_attrs","",""],[5,"get_struct_fields","",""],[5,"get_crate_attributes","",""],[3,"CrateDep","",""],[12,"cnum","","",292],[12,"name","","",292],[12,"hash","","",292],[5,"get_crate_deps","",""],[5,"maybe_get_crate_hash","",""],[5,"get_crate_hash","",""],[5,"maybe_get_crate_name","",""],[5,"get_crate_triple","",""],[5,"get_crate_name","",""],[5,"list_crate_metadata","",""],[5,"translate_def_id","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","",""],[5,"get_native_libraries","",""],[5,"get_plugin_registrar_fn","",""],[5,"each_exported_macro","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[5,"get_imported_filemaps","",""],[0,"creader","rustc_trans::metadata","Validates all used crates and extern libraries and loads their metadata"],[3,"CrateReader","rustc_trans::metadata::creader",""],[5,"validate_crate_name","",""],[0,"cstore","rustc_trans::metadata",""],[6,"cnum_map","rustc_trans::metadata::cstore",""],[4,"MetadataBlob","",""],[13,"MetadataVec","","",300],[13,"MetadataArchive","","",300],[3,"ImportedFileMap","","Holds information about a codemap::FileMap imported from another crate.\nSee creader::import_codemap() for more information."],[12,"original_start_pos","","This FileMap's byte-offset within the codemap of its original crate",376],[12,"original_end_pos","","The end of this FileMap within the codemap of its original crate",376],[12,"translated_filemap","","The imported FileMap's representation within the local codemap",376],[3,"crate_metadata","",""],[12,"name","","",299],[12,"data","","",299],[12,"cnum_map","","",299],[12,"cnum","","",299],[12,"codemap_import_info","","",299],[12,"span","","",299],[4,"LinkagePreference","",""],[13,"RequireDynamic","","",295],[13,"RequireStatic","","",295],[4,"NativeLibraryKind","",""],[13,"NativeStatic","","",296],[13,"NativeFramework","","",296],[13,"NativeUnknown","","",296],[3,"CrateSource","",""],[12,"dylib","","",297],[12,"rlib","","",297],[12,"cnum","","",297],[3,"CStore","",""],[12,"intr","","",298],[0,"csearch","rustc_trans::metadata",""],[3,"MethodInfo","rustc_trans::metadata::csearch",""],[12,"name","","",377],[12,"def_id","","",377],[12,"vis","","",377],[5,"get_symbol","",""],[5,"each_lang_item","","Iterates over all the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over each top-level crate item."],[5,"get_item_path","",""],[4,"FoundAst","",""],[13,"Found","","",378],[13,"FoundParent","","",378],[13,"NotFound","","",378],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns information about the given implementation."],[5,"get_impl_or_trait_item","",""],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_item_attrs","",""],[5,"get_struct_fields","",""],[5,"get_struct_field_attrs","",""],[5,"get_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_field_type","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_native_libraries","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), returns the ID of\nthe trait that the method belongs to. Otherwise, returns `None`."],[5,"get_tuple_struct_definition_if_ctor","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"get_stability","",""],[5,"is_staged_api","",""],[5,"get_repr_attrs","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[0,"loader","rustc_trans::metadata","Finds crate binaries and loads their metadata"],[3,"CrateMismatch","rustc_trans::metadata::loader",""],[3,"Context","",""],[12,"sess","","",301],[12,"span","","",301],[12,"ident","","",301],[12,"crate_name","","",301],[12,"hash","","",301],[12,"target","","",301],[12,"triple","","",301],[12,"filesearch","","",301],[12,"root","","",301],[12,"rejected_via_hash","","",301],[12,"rejected_via_triple","","",301],[12,"rejected_via_kind","","",301],[12,"should_match_name","","",301],[3,"Library","",""],[12,"dylib","","",379],[12,"rlib","","",379],[12,"metadata","","",379],[3,"ArchiveMetadata","",""],[3,"CratePaths","",""],[12,"ident","","",380],[12,"dylib","","",380],[12,"rlib","","",380],[5,"note_crate_name","",""],[5,"meta_section_name","",""],[5,"read_meta_section_name","",""],[5,"list_file_metadata","",""],[0,"filesearch","rustc_trans::metadata",""],[4,"FileMatch","rustc_trans::metadata::filesearch",""],[13,"FileMatches","","",381],[13,"FileDoesntMatch","","",381],[3,"FileSearch","",""],[12,"sysroot","","",303],[12,"search_paths","","",303],[12,"triple","","",303],[12,"kind","","",303],[5,"relative_target_lib_path","",""],[5,"get_or_default_sysroot","",""],[5,"get_rust_path","","Returns RUST_PATH as a string, without default paths added"],[5,"rust_path","","Returns the value of RUST_PATH, as a list\nof Paths. Includes default entries for, if they exist:\n$HOME/.rust\nDIR/.rust for any DIR that's the current working directory\nor an ancestor of it"],[5,"rustlibdir","",""],[0,"macro_import","rustc_trans::metadata","Used by `rustc` when loading a crate with exported macros."],[5,"read_macro_defs","rustc_trans::metadata::macro_import","Read exported macros."],[6,"MacroSelection","",""],[0,"middle","rustc_trans",""],[0,"astconv_util","rustc_trans::middle","This module contains a simple utility routine\nused by both `typeck` and `const_eval`.\nAlmost certainly this could (and should) be refactored out of existence."],[17,"NO_REGIONS","rustc_trans::middle::astconv_util",""],[17,"NO_TPS","",""],[5,"check_path_args","",""],[5,"prim_ty_to_ty","",""],[5,"ast_ty_to_prim_ty","",""],[0,"astencode","rustc_trans::middle",""],[5,"encode_inlined_item","rustc_trans::middle::astencode",""],[5,"decode_inlined_item","","Decodes an item from its AST in the cdata's metadata and adds it to the\nast-map."],[5,"encode_closure_kind","",""],[8,"vtable_decoder_helpers","",""],[10,"read_vec_per_param_space","","",382],[10,"read_vtable_res_with_key","","",382],[10,"read_vtable_res","","",382],[10,"read_vtable_param_res","","",382],[10,"read_vtable_origin","","",382],[0,"cfg","rustc_trans::middle","Module that constructs a control-flow graph representing an item.\nUses `Graph` as the underlying representation."],[0,"graphviz","rustc_trans::middle::cfg",""],[6,"Node","rustc_trans::middle::cfg::graphviz",""],[6,"Edge","",""],[3,"LabelledCFG","",""],[12,"ast_map","","",29],[12,"cfg","","",29],[12,"name","","",29],[12,"labelled_edges","","`labelled_edges` controls whether we emit labels on the edges",29],[3,"CFG","rustc_trans::middle::cfg",""],[12,"graph","","",31],[12,"entry","","",31],[12,"exit","","",31],[4,"CFGNodeData","",""],[13,"AST","","",30],[13,"Entry","","",30],[13,"Exit","","",30],[13,"Dummy","","",30],[13,"Unreachable","","",30],[3,"CFGEdgeData","",""],[12,"exiting_scopes","","",383],[6,"CFGIndex","",""],[6,"CFGGraph","",""],[6,"CFGNode","",""],[6,"CFGEdge","",""],[0,"check_const","rustc_trans::middle",""],[3,"ConstQualif","rustc_trans::middle::check_const",""],[17,"PURE_CONST","",""],[17,"MUTABLE_MEM","",""],[17,"NEEDS_DROP","",""],[17,"PREFER_IN_PLACE","",""],[17,"NON_ZERO_SIZED","",""],[17,"HAS_STATIC_BORROWS","",""],[17,"NOT_CONST","",""],[17,"NON_STATIC_BORROWS","",""],[5,"check_crate","",""],[0,"check_static_recursion","rustc_trans::middle",""],[5,"check_crate","rustc_trans::middle::check_static_recursion",""],[5,"check_item_recursion","",""],[0,"check_loop","rustc_trans::middle",""],[5,"check_crate","rustc_trans::middle::check_loop",""],[0,"check_match","rustc_trans::middle",""],[17,"DUMMY_WILD_PAT","rustc_trans::middle::check_match",""],[3,"MatchCheckCtxt","",""],[12,"tcx","","",42],[12,"param_env","","",42],[4,"Constructor","",""],[13,"Single","","The constructor of all patterns that don't vary by constructor,\ne.g. struct patterns and fixed-length arrays.",40],[13,"Variant","","Enum variants.",40],[13,"ConstantValue","","Literal values.",40],[13,"ConstantRange","","Ranges of literal values (2..5).",40],[13,"Slice","","Array patterns of length n.",40],[13,"SliceWithSubslice","","Array patterns with a subslice.",40],[5,"check_crate","",""],[3,"StaticInliner","",""],[12,"tcx","","",43],[12,"failed","","",43],[12,"renaming_map","","",43],[5,"constructor_arity","","This computes the arity of a constructor. The arity of a constructor\nis how many subpattern patterns of that constructor should be expanded to."],[5,"specialize","","This is the main specialization step. It expands the first pattern in the given row\ninto `arity` patterns based on the constructor. For most patterns, the step is trivial,\nfor instance tuple patterns are flattened and box patterns expand into their inner pattern."],[0,"check_rvalues","rustc_trans::middle",""],[5,"check_crate","rustc_trans::middle::check_rvalues",""],[0,"const_eval","rustc_trans::middle",""],[5,"lookup_const_by_id","rustc_trans::middle::const_eval",""],[4,"const_val","",""],[13,"const_float","","",49],[13,"const_int","","",49],[13,"const_uint","","",49],[13,"const_str","","",49],[13,"const_binary","","",49],[13,"const_bool","","",49],[5,"const_expr_to_pat","",""],[5,"eval_const_expr","",""],[3,"ConstEvalErr","",""],[12,"span","","",50],[12,"kind","","",50],[4,"ErrKind","",""],[13,"CannotCast","","",51],[13,"CannotCastTo","","",51],[13,"InvalidOpForBools","","",51],[13,"InvalidOpForFloats","","",51],[13,"InvalidOpForIntUint","","",51],[13,"InvalidOpForUintInt","","",51],[13,"NegateOnString","","",51],[13,"NegateOnBoolean","","",51],[13,"NegateOnBinary","","",51],[13,"NotOnFloat","","",51],[13,"NotOnString","","",51],[13,"NotOnBinary","","",51],[13,"AddiWithOverflow","","",51],[13,"SubiWithOverflow","","",51],[13,"MuliWithOverflow","","",51],[13,"AdduWithOverflow","","",51],[13,"SubuWithOverflow","","",51],[13,"MuluWithOverflow","","",51],[13,"DivideByZero","","",51],[13,"DivideWithOverflow","","",51],[13,"ModuloByZero","","",51],[13,"ModuloWithOverflow","","",51],[13,"MissingStructField","","",51],[13,"NonConstPath","","",51],[13,"NonConstStruct","","",51],[13,"TupleIndexOutOfBounds","","",51],[13,"MiscBinaryOp","","",51],[13,"MiscCatchAll","","",51],[5,"eval_const_expr_partial","",""],[5,"compare_const_vals","",""],[5,"compare_lit_exprs","",""],[0,"dataflow","rustc_trans::middle","A module for propagating forward dataflow information. The analysis\nassumes that the items to be propagated can be represented as bits\nand thus uses bitvectors. Your job is simply to specify the so-called\nGEN and KILL bits for each expression."],[4,"EntryOrExit","rustc_trans::middle::dataflow",""],[13,"Entry","","",52],[13,"Exit","","",52],[3,"DataFlowContext","",""],[8,"BitwiseOperator","",""],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",384],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used."],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",385],[0,"dead","rustc_trans::middle",""],[5,"check_crate","rustc_trans::middle::dead",""],[0,"def","rustc_trans::middle",""],[4,"Def","rustc_trans::middle::def",""],[13,"DefFn","","",14],[13,"DefSelfTy","","",14],[13,"DefMod","","",14],[13,"DefForeignMod","","",14],[13,"DefStatic","","",14],[13,"DefConst","","",14],[13,"DefLocal","","",14],[13,"DefVariant","","",14],[13,"DefTy","","",14],[13,"DefAssociatedTy","","",14],[13,"DefTrait","","",14],[13,"DefPrimTy","","",14],[13,"DefTyParam","","",14],[13,"DefUse","","",14],[13,"DefUpvar","","",14],[13,"DefStruct","","Note that if it's a tuple struct's definition, the node id of the ast::DefId\nmay either refer to the item definition's id or the StructDef.ctor_id.",14],[13,"DefRegion","","",14],[13,"DefLabel","","",14],[13,"DefMethod","","",14],[3,"PathResolution","","The result of resolving a path.\nBefore type checking completes, `depth` represents the number of\ntrailing segments which are yet unresolved. Afterwards, if there\nwere no errors, all paths should be fully resolved, with `depth`\nset to `0` and `base_def` representing the final resolution."],[12,"base_def","","",59],[12,"last_private","","",59],[12,"depth","","",59],[6,"DefMap","",""],[6,"ExportMap","",""],[3,"Export","",""],[12,"name","","",386],[12,"def_id","","",386],[4,"MethodProvenance","",""],[13,"FromTrait","","",60],[13,"FromImpl","","",60],[0,"dependency_format","rustc_trans::middle","Resolution of mixing rlibs and dylibs"],[6,"DependencyList","rustc_trans::middle::dependency_format",""],[6,"Dependencies","",""],[5,"calculate","",""],[0,"effect","rustc_trans::middle","Enforces the Rust effect system. Currently there is just one effect,\n`unsafe`."],[5,"check_crate","rustc_trans::middle::effect",""],[0,"entry","rustc_trans::middle",""],[5,"find_entry_point","rustc_trans::middle::entry",""],[0,"expr_use_visitor","rustc_trans::middle","A different sort of visitor for walking fn bodies.  Unlike the\nnormal visitor, which just walks the entire body in one shot, the\n`ExprUseVisitor` determines how expressions are being used."],[8,"Delegate","rustc_trans::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when\nemploying the ExprUseVisitor."],[10,"consume","","",387],[10,"matched_pat","","",387],[10,"consume_pat","","",387],[10,"borrow","","",387],[10,"decl_without_init","","",387],[10,"mutate","","",387],[4,"LoanCause","",""],[13,"ClosureCapture","","",64],[13,"AddrOf","","",64],[13,"AutoRef","","",64],[13,"RefBinding","","",64],[13,"OverloadedOperator","","",64],[13,"ClosureInvocation","","",64],[13,"ForLoop","","",64],[13,"MatchDiscriminant","","",64],[4,"ConsumeMode","",""],[13,"Copy","","",65],[13,"Move","","",65],[4,"MoveReason","",""],[13,"DirectRefMove","","",66],[13,"PatBindingMove","","",66],[13,"CaptureMove","","",66],[4,"MatchMode","",""],[13,"NonBindingMatch","","",67],[13,"BorrowingMatch","","",67],[13,"CopyingMatch","","",67],[13,"MovingMatch","","",67],[4,"MutateMode","",""],[13,"Init","","",69],[13,"JustWrite","","",69],[13,"WriteAndRead","","",69],[3,"ExprUseVisitor","",""],[0,"fast_reject","rustc_trans::middle",""],[4,"SimplifiedType","rustc_trans::middle::fast_reject","See `simplify_type"],[13,"BoolSimplifiedType","","",71],[13,"CharSimplifiedType","","",71],[13,"IntSimplifiedType","","",71],[13,"UintSimplifiedType","","",71],[13,"FloatSimplifiedType","","",71],[13,"EnumSimplifiedType","","",71],[13,"StrSimplifiedType","","",71],[13,"VecSimplifiedType","","",71],[13,"PtrSimplifiedType","","",71],[13,"TupleSimplifiedType","","",71],[13,"TraitSimplifiedType","","",71],[13,"StructSimplifiedType","","",71],[13,"ClosureSimplifiedType","","",71],[13,"FunctionSimplifiedType","","",71],[13,"ParameterSimplifiedType","","",71],[5,"simplify_type","","Tries to simplify a type by dropping type parameters, deref'ing away any reference types, etc.\nThe idea is to get something simple that we can use to quickly decide if two types could unify\nduring method lookup."],[0,"graph","rustc_trans::middle","A graph module for use in dataflow, region resolution, and elsewhere."],[3,"Graph","rustc_trans::middle::graph",""],[3,"Node","",""],[12,"data","","",388],[3,"Edge","",""],[12,"data","","",72],[3,"NodeIndex","",""],[17,"InvalidNodeIndex","",""],[3,"EdgeIndex","",""],[17,"InvalidEdgeIndex","",""],[3,"Direction","",""],[17,"Outgoing","",""],[17,"Incoming","",""],[3,"DepthFirstTraversal","",""],[5,"each_edge_index","",""],[0,"intrinsicck","rustc_trans::middle",""],[5,"check_crate","rustc_trans::middle::intrinsicck",""],[0,"infer","rustc_trans::middle","See the Book for more information."],[0,"bivariate","rustc_trans::middle::infer","Applies the \"bivariance relationship\" to two types and/or regions.\nIf (A,B) are bivariant then either A <: B or B <: A. It occurs\nwhen type/lifetime parameters are unconstrained. Usually this is\nan error, but we permit it in the specific case where a type\nparameter is constrained in a where-clause via an associated type."],[3,"Bivariate","rustc_trans::middle::infer::bivariate",""],[5,"Bivariate","",""],[0,"combine","rustc_trans::middle::infer",""],[8,"Combine","rustc_trans::middle::infer::combine",""],[10,"tcx","","",389],[10,"tag","","",389],[10,"fields","","",389],[10,"infcx","","",389],[10,"a_is_expected","","",389],[10,"trace","","",389],[10,"equate","","",389],[10,"bivariate","","",389],[10,"sub","","",389],[10,"lub","","",389],[10,"glb","","",389],[10,"mts","","",389],[10,"tys_with_variance","","",389],[10,"tys","","",389],[10,"regions_with_variance","","",389],[10,"regions","","",389],[10,"substs","","",389],[10,"substs_variances","","",389],[10,"bare_fn_tys","","",389],[10,"fn_sigs","","",389],[10,"args","","",389],[10,"unsafeties","","",389],[10,"abi","","",389],[10,"projection_tys","","",389],[10,"projection_predicates","","",389],[10,"projection_bounds","","",389],[10,"existential_bounds","","",389],[10,"builtin_bounds","","",389],[10,"trait_refs","","",389],[10,"binders","","",389],[8,"Combineable","",""],[10,"combine","","",390],[3,"CombineFields","",""],[12,"infcx","","",85],[12,"a_is_expected","","",85],[12,"trace","","",85],[5,"expected_found","",""],[5,"super_tys","",""],[0,"equate","rustc_trans::middle::infer",""],[3,"Equate","rustc_trans::middle::infer::equate",""],[5,"Equate","",""],[0,"error_reporting","rustc_trans::middle::infer","Error Reporting Code for the inference engine"],[8,"ErrorReporting","rustc_trans::middle::infer::error_reporting",""],[10,"report_region_errors","","",391],[10,"process_errors","","",391],[10,"report_type_error","","",391],[10,"report_and_explain_type_error","","",391],[10,"values_str","","",391],[10,"expected_found_str","","",391],[10,"report_concrete_failure","","",391],[10,"report_generic_bound_failure","","",391],[10,"report_sub_sup_conflict","","",391],[10,"report_sup_sup_conflict","","",391],[10,"report_processed_errors","","",391],[10,"give_suggestion","","",391],[8,"Resolvable","",""],[10,"resolve","","",392],[10,"contains_error","","",392],[0,"glb","rustc_trans::middle::infer",""],[3,"Glb","rustc_trans::middle::infer::glb","\"Greatest lower bound\" (common subtype)"],[5,"Glb","",""],[0,"lattice","rustc_trans::middle::infer","# Lattice Variables"],[8,"LatticeDir","rustc_trans::middle::infer::lattice",""],[10,"relate_bound","","",393],[5,"super_lattice_tys","",""],[0,"lub","rustc_trans::middle::infer",""],[3,"Lub","rustc_trans::middle::infer::lub","\"Least upper bound\" (common supertype)"],[5,"Lub","",""],[0,"region_inference","rustc_trans::middle::infer","See README.md"],[4,"Constraint","rustc_trans::middle::infer::region_inference",""],[13,"ConstrainVarSubVar","","",95],[13,"ConstrainRegSubVar","","",95],[13,"ConstrainVarSubReg","","",95],[4,"Verify","",""],[13,"VerifyRegSubReg","","",105],[13,"VerifyGenericBound","","",105],[4,"GenericKind","",""],[13,"Param","","",96],[13,"Projection","","",96],[3,"TwoRegions","",""],[4,"UndoLogEntry","",""],[13,"OpenSnapshot","","",98],[13,"CommitedSnapshot","","",98],[13,"AddVar","","",98],[13,"AddConstraint","","",98],[13,"AddVerify","","",98],[13,"AddGiven","","",98],[13,"AddCombination","","",98],[4,"CombineMapType","",""],[13,"Lub","","",99],[13,"Glb","","",99],[4,"RegionResolutionError","",""],[13,"ConcreteFailure","","`ConcreteFailure(o, a, b)`:",100],[13,"GenericBoundFailure","","`GenericBoundFailure(p, s, a, bs)",100],[13,"SubSupConflict","","`SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:",100],[13,"SupSupConflict","","`SupSupConflict(v, origin1, r1, origin2, r2)`:",100],[13,"ProcessedErrors","","For subsets of `ConcreteFailure` and `SubSupConflict`, we can derive\nmore specific errors message by suggesting to the user where they\nshould put a lifetime. In those cases we process and put those errors\ninto `ProcessedErrors` before we do any reporting.",100],[3,"SameRegions","","SameRegions is used to group regions that we think are the same and would\nlike to indicate so to the user.\nFor example, the following function\n```\nstruct Foo { bar: int }\nfn foo2<'a, 'b>(x: &'a Foo) -> &'b int {\n   &x.bar\n}\n```\nwould report an error because we expect 'a and 'b to match, and so we group\n'a and 'b together inside a SameRegions struct"],[12,"scope_id","","",101],[12,"regions","","",101],[6,"CombineMap","",""],[3,"RegionVarBindings","",""],[3,"RegionSnapshot","",""],[4,"VarValue","",""],[13,"NoValue","","",106],[13,"Value","","",106],[13,"ErrorValue","","",106],[0,"resolve","rustc_trans::middle::infer",""],[3,"OpportunisticTypeResolver","rustc_trans::middle::infer::resolve","The opportunistic type resolver can be used at any time. It simply replaces\ntype variables that have been unified with the things they have\nbeen unified with (similar to `shallow_resolve`, but deep). This is\nuseful for printing messages etc but also required at various\npoints for correctness."],[5,"fully_resolve","","Full type resolution replaces all type and region variables with\ntheir concrete results. If any variable cannot be replaced (never unified, etc)\nthen an `Err` result is returned."],[0,"sub","rustc_trans::middle::infer",""],[3,"Sub","rustc_trans::middle::infer::sub","\"Greatest lower bound\" (common subtype)"],[5,"Sub","",""],[0,"type_variable","rustc_trans::middle::infer",""],[3,"TypeVariableTable","rustc_trans::middle::infer::type_variable",""],[3,"Snapshot","",""],[4,"RelationDir","",""],[13,"SubtypeOf","","",112],[13,"SupertypeOf","","",112],[13,"EqTo","","",112],[13,"BiTo","","",112],[0,"unify","rustc_trans::middle::infer",""],[8,"UnifyKey","rustc_trans::middle::infer::unify","This trait is implemented by any type that can serve as a type\nvariable. We call such variables *unification keys*. For example,\nthis trait is implemented by `IntVid`, which represents integral\nvariables."],[16,"Value","rustc_trans::middle::infer::unify::UnifyKey",""],[10,"index","rustc_trans::middle::infer::unify","",394],[10,"from_index","","",394],[10,"unification_table","","",394],[10,"tag","","",394],[8,"UnifyValue","","Trait for valid types that a type variable can be set to. Note that\nthis is typically not the end type that the value will take on, but\nrather an `Option` wrapper (where `None` represents a variable\nwhose value is not yet set)."],[4,"VarValue","","Value of a unification key. We implement Tarjan's union-find\nalgorithm: when two keys are unified, one of them is converted\ninto a \"redirect\" pointing at the other. These redirects form a\nDAG: the roots of the DAG (nodes that are not redirected) are each\nassociated with a value of type `V` and a rank. The rank is used\nto keep the DAG relatively balanced, which helps keep the running\ntime of the algorithm under control. For more information, see\n<http://en.wikipedia.org/wiki/Disjoint-set_data_structure>."],[13,"Redirect","","",115],[13,"Root","","",115],[3,"UnificationTable","","Table of unification keys and their values."],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes\nmade during the snapshot may either be *committed* or *rolled back*."],[3,"Node","","Internal type used to represent the result of a `get()` operation.\nConveys the current root and value of the key."],[12,"key","","",395],[12,"value","","",395],[12,"rank","","",395],[3,"Delegate","",""],[8,"SimplyUnifiable","","Indicates a type that does not have any kind of subtyping\nrelationship."],[10,"to_type","","",396],[10,"to_type_err","","",396],[5,"err","",""],[8,"InferCtxtMethodsForSimplyUnifiableTypes","",""],[10,"simple_vars","","",397],[10,"simple_var_t","","",397],[10,"probe_var","","",397],[6,"Bound","rustc_trans::middle::infer",""],[6,"cres","",""],[6,"ures","",""],[6,"fres","",""],[3,"InferCtxt","",""],[12,"tcx","","",88],[6,"SkolemizationMap","",""],[4,"TypeOrigin","","Why did we require that the two types be related?"],[13,"Misc","","",122],[13,"MethodCompatCheck","","",122],[13,"ExprAssignable","","",122],[13,"RelateTraitRefs","","",122],[13,"RelateSelfType","","",122],[13,"RelateOutputImplTypes","","",122],[13,"MatchExpressionArm","","",122],[13,"IfExpression","","",122],[13,"IfExpressionWithNoElse","","",122],[13,"RangeExpression","","",122],[13,"EquatePredicate","","",122],[4,"ValuePairs","","See `error_reporting.rs` for more details"],[13,"Types","","",123],[13,"TraitRefs","","",123],[13,"PolyTraitRefs","","",123],[3,"TypeTrace","","The trace designates the path through inference that we took to\nencounter an error or subtyping constraint."],[4,"SubregionOrigin","","The origin of a `r1 <= r2` constraint."],[13,"Subtype","","",125],[13,"InfStackClosure","","",125],[13,"InvokeClosure","","",125],[13,"DerefPointer","","",125],[13,"FreeVariable","","",125],[13,"IndexSlice","","",125],[13,"RelateObjectBound","","",125],[13,"RelateParamBound","","",125],[13,"RelateRegionParamBound","","",125],[13,"RelateDefaultParamBound","","",125],[13,"Reborrow","","",125],[13,"ReborrowUpvar","","",125],[13,"ReferenceOutlivesReferent","","",125],[13,"ExprTypeIsNotInScope","","",125],[13,"BindingTypeIsNotValidAtDecl","","",125],[13,"CallRcvr","","",125],[13,"CallArg","","",125],[13,"CallReturn","","",125],[13,"Operand","","",125],[13,"AddrOf","","",125],[13,"AutoBorrow","","",125],[13,"SafeDestructor","","",125],[4,"LateBoundRegionConversionTime","","Times when we replace late-bound regions with variables:"],[13,"FnCall","","when a fn is called",126],[13,"HigherRankedType","","when two higher-ranked types are compared",126],[13,"AssocTypeProjection","","when projecting an associated type",126],[4,"RegionVariableOrigin","","Reasons to create a region inference variable"],[13,"MiscVariable","","",127],[13,"PatternRegion","","",127],[13,"AddrOfRegion","","",127],[13,"Autoref","","",127],[13,"Coercion","","",127],[13,"EarlyBoundRegion","","",127],[13,"LateBoundRegion","","",127],[13,"UpvarRegion","","",127],[13,"BoundRegionInCoherence","","",127],[4,"fixup_err","",""],[13,"unresolved_int_ty","","",128],[13,"unresolved_float_ty","","",128],[13,"unresolved_ty","","",128],[5,"fixup_err_to_string","",""],[5,"new_infer_ctxt","",""],[5,"common_supertype","","Computes the least upper-bound of `a` and `b`. If this is not possible, reports an error and\nreturns ty::err."],[5,"mk_subty","",""],[5,"can_mk_subty","",""],[5,"can_mk_eqty","",""],[5,"mk_subr","",""],[5,"mk_eqty","",""],[5,"mk_sub_poly_trait_refs","",""],[5,"uok","",""],[3,"CombinedSnapshot","",""],[4,"IntVarValue","",""],[13,"IntType","","",119],[13,"UintType","","",119],[3,"TypeFreshener","",""],[4,"GenericKind","",""],[13,"Param","","",96],[13,"Projection","","",96],[0,"lang_items","rustc_trans::middle",""],[4,"LangItem","rustc_trans::middle::lang_items",""],[13,"SendTraitLangItem","","",130],[13,"SizedTraitLangItem","","",130],[13,"CopyTraitLangItem","","",130],[13,"SyncTraitLangItem","","",130],[13,"DropTraitLangItem","","",130],[13,"AddTraitLangItem","","",130],[13,"SubTraitLangItem","","",130],[13,"MulTraitLangItem","","",130],[13,"DivTraitLangItem","","",130],[13,"RemTraitLangItem","","",130],[13,"NegTraitLangItem","","",130],[13,"NotTraitLangItem","","",130],[13,"BitXorTraitLangItem","","",130],[13,"BitAndTraitLangItem","","",130],[13,"BitOrTraitLangItem","","",130],[13,"ShlTraitLangItem","","",130],[13,"ShrTraitLangItem","","",130],[13,"IndexTraitLangItem","","",130],[13,"IndexMutTraitLangItem","","",130],[13,"RangeStructLangItem","","",130],[13,"RangeFromStructLangItem","","",130],[13,"RangeToStructLangItem","","",130],[13,"RangeFullStructLangItem","","",130],[13,"UnsafeCellTypeLangItem","","",130],[13,"DerefTraitLangItem","","",130],[13,"DerefMutTraitLangItem","","",130],[13,"FnTraitLangItem","","",130],[13,"FnMutTraitLangItem","","",130],[13,"FnOnceTraitLangItem","","",130],[13,"EqTraitLangItem","","",130],[13,"OrdTraitLangItem","","",130],[13,"StrEqFnLangItem","","",130],[13,"PanicFnLangItem","","",130],[13,"PanicBoundsCheckFnLangItem","","",130],[13,"PanicFmtLangItem","","",130],[13,"ExchangeMallocFnLangItem","","",130],[13,"ExchangeFreeFnLangItem","","",130],[13,"StrDupUniqFnLangItem","","",130],[13,"StartFnLangItem","","",130],[13,"TyDescStructLangItem","","",130],[13,"OpaqueStructLangItem","","",130],[13,"EhPersonalityLangItem","","",130],[13,"ExchangeHeapLangItem","","",130],[13,"OwnedBoxLangItem","","",130],[13,"PhantomFnItem","","",130],[13,"PhantomDataItem","","",130],[13,"CovariantTypeItem","","",130],[13,"ContravariantTypeItem","","",130],[13,"InvariantTypeItem","","",130],[13,"CovariantLifetimeItem","","",130],[13,"ContravariantLifetimeItem","","",130],[13,"InvariantLifetimeItem","","",130],[13,"NoCopyItem","","",130],[13,"ManagedItem","","",130],[13,"NonZeroItem","","",130],[13,"StackExhaustedLangItem","","",130],[13,"DebugTraitLangItem","","",130],[3,"LanguageItems","",""],[12,"items","","",131],[12,"missing","","",131],[5,"extract","",""],[5,"collect_language_items","",""],[0,"liveness","rustc_trans::middle","A classic liveness analysis based on dataflow over the AST.  Computes,\nfor each local variable in a function, whether that variable is live\nat a given point.  Program execution points are identified by their\nid."],[5,"check_crate","rustc_trans::middle::liveness",""],[0,"mem_categorization","rustc_trans::middle","# Categorization"],[4,"categorization","rustc_trans::middle::mem_categorization",""],[13,"cat_rvalue","","",141],[13,"cat_static_item","","",141],[13,"cat_upvar","","",141],[13,"cat_local","","",141],[13,"cat_deref","","",141],[13,"cat_interior","","",141],[13,"cat_downcast","","",141],[3,"Upvar","",""],[12,"id","","",142],[12,"kind","","",142],[4,"PointerKind","",""],[13,"Unique","","`Box<T>`",143],[13,"BorrowedPtr","","`&T`",143],[13,"UnsafePtr","","`*T`",143],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",143],[4,"InteriorKind","",""],[13,"InteriorField","","",144],[13,"InteriorElement","","",144],[4,"FieldName","",""],[13,"NamedField","","",145],[13,"PositionalField","","",145],[4,"InteriorOffsetKind","",""],[13,"Index","","",146],[13,"Pattern","","",146],[4,"ElementKind","",""],[13,"VecElement","","",147],[13,"OtherElement","","",147],[4,"MutabilityCategory","",""],[13,"McImmutable","","",148],[13,"McDeclared","","",148],[13,"McInherited","","",148],[4,"Note","",""],[13,"NoteClosureEnv","","",149],[13,"NoteUpvarRef","","",149],[13,"NoteNone","","",149],[3,"cmt_","",""],[12,"id","","",150],[12,"span","","",150],[12,"cat","","",150],[12,"mutbl","","",150],[12,"ty","","",150],[12,"note","","",150],[6,"cmt","",""],[4,"deref_kind","",""],[13,"deref_ptr","","",398],[13,"deref_interior","","",398],[8,"ast_node","",""],[10,"id","","",399],[10,"span","","",399],[3,"MemCategorizationContext","",""],[6,"McResult","",""],[8,"Typer","","The `Typer` trait provides the interface for the mem-categorization\nmodule to the results of the type check. It can be used to query\nthe type assigned to an expression node, to inquire after adjustments,\nand so on."],[10,"node_ty","","",400],[10,"expr_ty_adjusted","","",400],[10,"type_moves_by_default","","",400],[10,"node_method_ty","","",400],[10,"node_method_origin","","",400],[10,"adjustments","","",400],[10,"is_method_call","","",400],[10,"temporary_scope","","",400],[10,"upvar_capture","","",400],[4,"InteriorSafety","",""],[13,"InteriorUnsafe","","",401],[13,"InteriorSafe","","",401],[4,"AliasableReason","",""],[13,"AliasableBorrowed","","",402],[13,"AliasableClosure","","",402],[13,"AliasableOther","","",402],[13,"AliasableStatic","","",402],[13,"AliasableStaticMut","","",402],[5,"ptr_sigil","",""],[0,"pat_util","rustc_trans::middle",""],[6,"PatIdMap","rustc_trans::middle::pat_util",""],[5,"pat_id_map","",""],[5,"pat_is_refutable","",""],[5,"pat_is_variant_or_struct","",""],[5,"pat_is_const","",""],[5,"pat_is_binding","",""],[5,"pat_is_binding_or_wild","",""],[5,"pat_bindings","","Call `it` on every \"binding\" in a pattern, e.g., on `a` in\n`match foo() { Some(a) => (), None => () }`"],[5,"pat_contains_bindings","","Checks if the pattern contains any patterns that bind something to\nan ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`."],[5,"pat_contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to\nan ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,"],[5,"simple_identifier","",""],[5,"def_to_path","",""],[0,"privacy","rustc_trans::middle","A pass that checks to make sure private fields and methods aren't used\noutside their scopes. This pass will also generate a set of exported items\nwhich are available for use externally when compiled as a library."],[6,"ExportedItems","rustc_trans::middle::privacy",""],[6,"ExternalExports","",""],[6,"PublicItems","",""],[4,"LastPrivate","",""],[13,"LastMod","","",155],[13,"LastImport","","",155],[12,"value_priv","rustc_trans::middle::privacy::LastPrivate","",155],[12,"value_used","","",155],[12,"type_priv","","",155],[12,"type_used","","",155],[4,"PrivateDep","rustc_trans::middle::privacy",""],[13,"AllPublic","","",156],[13,"DependsOn","","",156],[4,"ImportUse","",""],[13,"Unused","","",157],[13,"Used","","",157],[0,"reachable","rustc_trans::middle",""],[5,"find_reachable","rustc_trans::middle::reachable",""],[0,"region","rustc_trans::middle","This file actually contains two passes related to regions.  The first\npass builds up the `scope_map`, which describes the parent links in\nthe region hierarchy.  The second pass infers which types must be\nregion parameterized."],[4,"CodeExtent","rustc_trans::middle::region","CodeExtent represents a statically-describable extent that can be\nused to bound the lifetime/region for values."],[13,"Misc","","",17],[13,"DestructionScope","","",17],[13,"Remainder","","",17],[3,"DestructionScopeData","","extent of destructors for temporaries of node-id"],[12,"node_id","","",18],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced\nby `block.stmts[first_statement_index]`. Such subscopes represent\na suffix of the block. Note that each subscope does not include\nthe initializer expression, if any, for the statement indexed by\n`first_statement_index`."],[12,"block","","",159],[12,"first_statement_index","","",159],[3,"RegionMaps","","The region maps encode information about region relationships."],[3,"Context","",""],[5,"resolve_crate","",""],[5,"resolve_inlined_item","",""],[0,"recursion_limit","rustc_trans::middle",""],[5,"update_recursion_limit","rustc_trans::middle::recursion_limit",""],[0,"resolve_lifetime","rustc_trans::middle","Name resolution for lifetimes."],[4,"DefRegion","rustc_trans::middle::resolve_lifetime",""],[13,"DefStaticRegion","","",166],[13,"DefEarlyBoundRegion","","",166],[13,"DefLateBoundRegion","","",166],[13,"DefFreeRegion","","",166],[6,"NamedRegionMap","",""],[5,"krate","",""],[5,"early_bound_lifetimes","",""],[0,"stability","rustc_trans::middle","A pass that annotates every item and method with its stability level,\npropagating default levels lexically from parent to children ast nodes."],[3,"Index","rustc_trans::middle::stability","A stability index, giving the stability level for items and methods."],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled\nfeatures and possibly prints errors. Returns a list of all\nfeatures used."],[5,"check_item","","Helper for discovering nodes to check for stability"],[5,"check_expr","","Helper for discovering nodes to check for stability"],[5,"check_path","",""],[5,"check_pat","",""],[5,"lookup","","Lookup the stability for a node, loading external crate\nmetadata as necessary."],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that\nwere expected to be library features), and the list of features used from\nlibraries, identify activated features that don't exist and error about them."],[0,"subst","rustc_trans::middle",""],[3,"Substs","rustc_trans::middle::subst","A substitution mapping type/region parameters to new values. We\nidentify each in-scope parameter by an *index* and a *parameter\nspace* (which indices where the parameter is defined; see\n`ParamSpace`)."],[12,"types","","",172],[12,"regions","","",172],[4,"RegionSubsts","","Represents the values to use when substituting lifetime parameters.\nIf the value is `ErasedRegions`, then this subst is occurring during\ntrans, and all region parameters will be replaced with `ty::ReStatic`."],[13,"ErasedRegions","","",173],[13,"NonerasedRegions","","",173],[4,"ParamSpace","",""],[13,"TypeSpace","","",174],[13,"SelfSpace","","",174],[13,"FnSpace","","",174],[3,"VecPerParamSpace","","Vector of things sorted by param space. Used to keep\nthe set of things declared on the type, self, or method\ndistinct."],[3,"SeparateVecsPerParamSpace","","The `split` function converts one `VecPerParamSpace` into this\n`SeparateVecsPerParamSpace` structure."],[12,"types","","",403],[12,"selfs","","",403],[12,"fns","","",403],[3,"EnumeratedItems","",""],[8,"Subst","",""],[10,"subst","","",404],[10,"subst_spanned","","",404],[0,"traits","rustc_trans::middle","Trait Resolution. See the Book for more."],[3,"Obligation","rustc_trans::middle::traits","An `Obligation` represents some trait reference (e.g. `int:Eq`) for\nwhich the vtable must be found.  The process of finding a vtable is\ncalled \"resolving\" the `Obligation`. This process consists of\neither identifying an `impl` (e.g., `impl Eq for int`) that\nprovides the required vtable, or else finding a bound that is in\nscope. The eventual result is usually a `Selection` (defined below)."],[12,"cause","","",198],[12,"recursion_depth","","",198],[12,"predicate","","",198],[6,"PredicateObligation","",""],[6,"TraitObligation","",""],[3,"ObligationCause","","Why did we incur this obligation? Used for error reporting."],[12,"span","","",205],[12,"body_id","","",205],[12,"code","","",205],[4,"ObligationCauseCode","",""],[13,"MiscObligation","","Not well classified or should be obvious from span.",206],[13,"ItemObligation","","In an impl of trait X for type Y, type Y must\nalso implement all supertraits of X.",206],[13,"ObjectCastObligation","","Obligation incurred due to an object cast.",206],[13,"AssignmentLhsSized","","Various cases where expressions must be sized/copy/etc:",206],[13,"StructInitializerSized","","",206],[13,"VariableType","","",206],[13,"ReturnType","","",206],[13,"RepeatVec","","",206],[13,"ClosureCapture","","",206],[13,"FieldSized","","",206],[13,"ObjectSized","","",206],[13,"SharedStatic","","",206],[13,"BuiltinDerivedObligation","","",206],[13,"ImplDerivedObligation","","",206],[13,"CompareImplMethodObligation","","",206],[3,"DerivedObligationCause","",""],[6,"Obligations","",""],[6,"PredicateObligations","",""],[6,"TraitObligations","",""],[6,"Selection","",""],[4,"SelectionError","",""],[13,"Unimplemented","","",202],[13,"Overflow","","",202],[13,"OutputTypeParameterMismatch","","",202],[3,"FulfillmentError","",""],[12,"obligation","","",203],[12,"code","","",203],[4,"FulfillmentErrorCode","",""],[13,"CodeSelectionError","","",204],[13,"CodeProjectionError","","",204],[13,"CodeAmbiguity","","",204],[6,"SelectionResult","",""],[4,"Vtable","","Given the successful resolution of an obligation, the `Vtable`\nindicates where the vtable comes from. Note that while we call this\na \"vtable\", it does not necessarily indicate dynamic dispatch at\nruntime. `Vtable` instances just tell the compiler where to find\nmethods, but in generic code those methods are typically statically\ndispatched -- only when an object is constructed is a `Vtable`\ninstance reified into an actual vtable."],[13,"VtableImpl","","Vtable identifying a particular impl.",199],[13,"VtableDefaultImpl","","Vtable for default trait implementations\nThis carries the information and nested obligations with regards\nto a default implementation for a trait `Trait`. The nested obligations\nensure the trait implementation holds for all the constituent types.",199],[13,"VtableParam","","Successful resolution to an obligation provided by the caller\nfor some type parameter. The `Vec<N>` represents the\nobligations incurred from normalizing the where-clause (if\nany).",199],[13,"VtableObject","","Virtual calls through an object",199],[13,"VtableBuiltin","","Successful resolution for a builtin trait.",199],[13,"VtableClosure","","Vtable automatically generated for a closure. The def ID is the ID\nof the closure expression. This is a `VtableImpl` in spirit, but the\nimpl is generated by the compiler and does not appear in the source.",199],[13,"VtableFnPointer","","Same as above, but for a fn pointer type with the given signature.",199],[3,"VtableImplData","","Identifies a particular impl in the source, along with a set of\nsubstitutions from the impl's type/lifetime parameters. The\n`nested` vector corresponds to the nested obligations attached to\nthe impl's type parameters."],[12,"impl_def_id","","",196],[12,"substs","","",196],[12,"nested","","",196],[3,"VtableDefaultImplData","",""],[12,"trait_def_id","","",201],[12,"nested","","",201],[3,"VtableBuiltinData","",""],[12,"nested","","",200],[3,"VtableObjectData","","A vtable for some object-safe trait `Foo` automatically derived\nfor the object type `Foo`."],[12,"object_ty","","the object type `Foo`.",197],[12,"upcast_trait_ref","","`Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.",197],[5,"predicates_for_generics","","Creates predicate obligations from the generic bounds."],[5,"evaluate_builtin_bound","","Determines whether the type `ty` is known to meet `bound` and\nreturns true if so. Returns false if `ty` either does not meet\n`bound` or is not known to meet bound (note that this is\nconservative towards *no impl*, which is the opposite of the\n`evaluate` methods)."],[5,"type_known_to_meet_builtin_bound","",""],[5,"normalize_param_env_or_error","","Normalizes the parameter environment, reporting errors if they occur."],[5,"fully_normalize","",""],[5,"normalize","","Normalizes any associated type projections in `value`, replacing\nthem with a fully resolved type where possible. The return value\ncombines the normalized result and any additional obligations that\nwere incurred as result."],[4,"ObjectSafetyViolation","",""],[13,"SizedSelf","","Self : Sized declared on the trait",186],[13,"SupertraitSelf","","Supertrait reference references `Self` an in illegal location\n(e.g. `trait Foo : Bar<Self>`)",186],[13,"Method","","Method has something illegal",186],[5,"report_fulfillment_errors","",""],[5,"suggest_new_overflow_limit","",""],[5,"overlapping_impls","","True if there exist types that satisfy both of the two given impls."],[5,"get_vtable_index_of_object_method","","Given an object of type `object_trait_ref`, returns the index of\nthe method `n_method` found in the trait `trait_def_id` (which\nshould be a supertrait of `object_trait_ref`) within the vtable\nfor `object_trait_ref`."],[5,"transitive_bounds","",""],[4,"MethodMatchResult","",""],[13,"MethodMatched","","",193],[13,"MethodAmbiguous","","",193],[13,"MethodDidNotMatch","","",193],[5,"is_object_safe","",""],[3,"SelectionContext","",""],[3,"FulfillmentContext","","The fulfillment context is used to drive trait resolution.  It\nconsists of a list of obligations that must be (eventually)\nsatisfied. The job is to track which are satisfied, which yielded\nerrors, and which are still pending. At any point, users can call\n`select_where_possible`, and the fulfilment context will try to do\nselection, retaining only those obligations that remain\nambiguous. This may be helpful in pushing type inference\nalong. Once all type inference constraints have been generated, the\nmethod `select_all_or_error` can be used to report any remaining\nambiguous cases as errors."],[4,"OrphanCheckErr","",""],[13,"NoLocalInputType","","",405],[13,"UncoveredTy","","",405],[3,"MismatchedProjectionTypes","",""],[12,"err","","",180],[5,"supertraits","",""],[3,"RegionObligation","",""],[12,"sub_region","","",178],[12,"sup_type","","",178],[12,"cause","","",178],[5,"upcast","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait."],[5,"trait_ref_for_builtin_bound","",""],[4,"MethodMatchedData","",""],[13,"PreciseMethodMatch","","",188],[13,"CoerciveMethodMatch","","",188],[5,"object_safety_violations","",""],[6,"Supertraits","",""],[5,"elaborate_predicates","",""],[5,"orphan_check","","Checks the coherence orphan rules. `impl_def_id` should be the\ndef-id of a trait impl. To pass, either the trait must be local, or else\ntwo conditions must be satisfied:"],[3,"Normalized","",""],[12,"value","","",183],[12,"obligations","","",183],[4,"MethodViolationCode","","Reasons a method might not be object-safe."],[13,"StaticMethod","","e.g., `fn foo()`",185],[13,"ReferencesSelf","","e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`",185],[13,"Generic","","e.g., `fn foo<A>()`",185],[3,"SelectionCache","",""],[0,"ty","rustc_trans::middle",""],[6,"Disr","rustc_trans::middle::ty",""],[17,"INITIAL_DISCRIMINANT_VALUE","",""],[3,"CrateAnalysis","","The complete set of all analyses described in this module. This is\nproduced by the driver and fed to trans and later passes."],[12,"export_map","","",406],[12,"exported_items","","",406],[12,"public_items","","",406],[12,"ty_cx","","",406],[12,"reachable","","",406],[12,"name","","",406],[12,"glob_map","","",406],[3,"field","",""],[12,"name","","",208],[12,"mt","","",208],[4,"ImplOrTraitItemContainer","",""],[13,"TraitContainer","","",209],[13,"ImplContainer","","",209],[4,"ImplOrTraitItem","",""],[13,"MethodTraitItem","","",210],[13,"TypeTraitItem","","",210],[4,"ImplOrTraitItemId","",""],[13,"MethodTraitItemId","","",211],[13,"TypeTraitItemId","","",211],[3,"Method","",""],[12,"name","","",212],[12,"generics","","",212],[12,"predicates","","",212],[12,"fty","","",212],[12,"explicit_self","","",212],[12,"vis","","",212],[12,"def_id","","",212],[12,"container","","",212],[12,"provided_source","","",212],[3,"AssociatedType","",""],[12,"name","","",213],[12,"vis","","",213],[12,"def_id","","",213],[12,"container","","",213],[3,"mt","",""],[12,"ty","","",214],[12,"mutbl","","",214],[3,"field_ty","",""],[12,"name","","",215],[12,"id","","",215],[12,"vis","","",215],[12,"origin","","",215],[3,"creader_cache_key","",""],[12,"cnum","","",216],[12,"pos","","",216],[12,"len","","",216],[3,"ItemVariances","",""],[12,"types","","",217],[12,"regions","","",217],[4,"Variance","",""],[13,"Covariant","","",218],[13,"Invariant","","",218],[13,"Contravariant","","",218],[13,"Bivariant","","",218],[4,"AutoAdjustment","",""],[13,"AdjustReifyFnPointer","","",219],[13,"AdjustDerefRef","","",219],[4,"UnsizeKind","",""],[13,"UnsizeLength","","",220],[13,"UnsizeStruct","","",220],[13,"UnsizeVtable","","",220],[3,"AutoDerefRef","",""],[12,"autoderefs","","",221],[12,"autoref","","",221],[4,"AutoRef","",""],[13,"AutoPtr","","Convert from T to &T\nThe third field allows us to wrap other AutoRef adjustments.",222],[13,"AutoUnsize","","Convert [T, ..n] to [T] (or similar, depending on the kind)",222],[13,"AutoUnsizeUniq","","Convert Box<[T, ..n]> to Box<[T]> or something similar in a Box.\nWith DST and Box a library type, this should be replaced by UnsizeStruct.",222],[13,"AutoUnsafe","","Convert from T to *T\nValue to thin pointer\nThe second field allows us to wrap other AutoRef adjustments.",222],[5,"adjusted_object_region","",""],[5,"adjust_is_object","",""],[5,"type_of_adjust","",""],[3,"param_index","",""],[12,"space","","",223],[12,"index","","",223],[4,"MethodOrigin","",""],[13,"MethodStatic","","",24],[13,"MethodStaticClosure","","",24],[13,"MethodTypeParam","","",24],[13,"MethodTraitObject","","",24],[3,"MethodParam","",""],[12,"trait_ref","","",224],[12,"method_num","","",224],[12,"impl_def_id","","The impl for the trait from which the method comes. This\nshould only be used for certain linting/heuristic purposes\nsince there is no guarantee that this is Some in every\nsituation that it could/should be.",224],[3,"MethodObject","",""],[12,"trait_ref","","",225],[12,"object_trait_id","","",225],[12,"method_num","","",225],[12,"vtable_index","","",225],[3,"MethodCallee","",""],[12,"origin","","",226],[12,"ty","","",226],[12,"substs","","",226],[3,"MethodCall","","With method calls, we store some extra information in\nside tables (i.e method_map). We use\nMethodCall as a key to index into these tables instead of\njust directly using the expression's NodeId. The reason\nfor this being that we may apply adjustments (coercions)\nwith the resulting expression also needing to use the\nside tables. The problem with this is that we don't\nassign a separate NodeId to this new expression\nand so it would clash with the base expression if both\nneeded to add to the side tables. Thus to disambiguate\nwe also keep track of whether there's an adjustment in\nour key."],[12,"expr_id","","",227],[12,"adjustment","","",227],[4,"ExprAdjustment","",""],[13,"NoAdjustment","","",228],[13,"AutoDeref","","",228],[13,"AutoObject","","",228],[6,"MethodMap","",""],[6,"vtable_param_res","",""],[6,"vtable_res","",""],[4,"vtable_origin","",""],[13,"vtable_static","","",229],[13,"vtable_param","","",229],[13,"vtable_closure","","",229],[13,"vtable_error","","",229],[6,"ObjectCastMap","",""],[3,"TransmuteRestriction","","A restriction that certain types must be the same size. The use of\n`transmute` gives rise to these restrictions. These generally\ncannot be checked until trans; therefore, each call to `transmute`\nwill push one or more such restriction into the\n`transmute_restrictions` vector during `intrinsicck`. They are\nthen checked during `trans` by the fn `check_intrinsics`."],[12,"span","","The span whence the restriction comes.",79],[12,"original_from","","The type being transmuted from.",79],[12,"original_to","","The type being transmuted to.",79],[12,"substituted_from","","The type being transmuted from, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",79],[12,"substituted_to","","The type being transmuted to, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",79],[12,"id","","NodeId of the transmute intrinsic.",79],[3,"CtxtArenas","","Internal storage"],[3,"CommonTypes","",""],[12,"bool","","",407],[12,"char","","",407],[12,"int","","",407],[12,"i8","","",407],[12,"i16","","",407],[12,"i32","","",407],[12,"i64","","",407],[12,"uint","","",407],[12,"u8","","",407],[12,"u16","","",407],[12,"u32","","",407],[12,"u64","","",407],[12,"f32","","",407],[12,"f64","","",407],[12,"err","","",407],[3,"ctxt","","The data structure to keep track of all the information that typechecker\ngenerates so that so that it can be reused and doesn't have to be redone\nlater on."],[12,"types","","Common types, pre-interned for your convenience.",232],[12,"sess","","",232],[12,"def_map","","",232],[12,"named_region_map","","",232],[12,"region_maps","","",232],[12,"node_types","","Stores the types for various nodes in the AST.  Note that this table\nis not guaranteed to be populated until after typeck.  See\ntypeck::check::fn_ctxt for details.",232],[12,"item_substs","","Stores the type parameters which were substituted to obtain the type\nof this node.  This only applies to nodes that refer to entities\nparameterized by type parameters, such as generic fns, types, or\nother items.",232],[12,"impl_or_trait_items","","Maps from a trait item to the trait item \"descriptor\"",232],[12,"trait_item_def_ids","","Maps from a trait def-id to a list of the def-ids of its trait items",232],[12,"trait_items_cache","","A cache for the trait_items() routine",232],[12,"impl_trait_cache","","",232],[12,"impl_trait_refs","","",232],[12,"trait_defs","","",232],[12,"predicates","","Maps from the def-id of an item (trait/struct/enum/fn) to its\nassociated predicates.",232],[12,"super_predicates","","Maps from the def-id of a trait to the list of\nsuper-predicates. This is a subset of the full list of\npredicates. We store these in a separate map because we must\nevaluate them even during type conversion, often before the\nfull predicates are available (note that supertraits have\nadditional acyclicity requirements).",232],[12,"object_cast_map","","Maps from node-id of a trait object cast (like `foo as\nBox<Trait>`) to the trait reference.",232],[12,"map","","",232],[12,"intrinsic_defs","","",232],[12,"freevars","","",232],[12,"tcache","","",232],[12,"rcache","","",232],[12,"short_names_cache","","",232],[12,"tc_cache","","",232],[12,"ast_ty_to_ty_cache","","",232],[12,"enum_var_cache","","",232],[12,"ty_param_defs","","",232],[12,"adjustments","","",232],[12,"normalized_cache","","",232],[12,"lang_items","","",232],[12,"provided_method_sources","","A mapping of fake provided method def_ids to the default implementation",232],[12,"struct_fields","","",232],[12,"item_variance_map","","Maps from def-id of a type or region parameter to its\n(inferred) variance.",232],[12,"variance_computed","","True if the variance has been computed yet; false otherwise.",232],[12,"destructor_for_type","","A mapping from the def ID of an enum or struct type to the def ID\nof the method that implements its destructor. If the type is not\npresent in this map, it does not have a destructor. This map is\npopulated during the coherence phase of typechecking.",232],[12,"destructors","","A method will be in this list if and only if it is a destructor.",232],[12,"trait_impls","","Maps a trait onto a list of impls of that trait.",232],[12,"inherent_impls","","Maps a DefId of a type to a list of its inherent impls.\nContains implementations of methods that are inherent to a type.\nMethods in these implementations don't need to be exported.",232],[12,"impl_items","","Maps a DefId of an impl to a list of its items.\nNote that this contains all of the impls that we know about,\nincluding ones in other crates. It's not clear that this is the best\nway to do it.",232],[12,"used_unsafe","","Set of used unsafe nodes (functions or blocks). Unsafe nodes not\npresent in this set can be warned about.",232],[12,"used_mut_nodes","","Set of nodes which mark locals as mutable which end up getting used at\nsome point. Local variable definitions not in this set can be warned\nabout.",232],[12,"populated_external_types","","The set of external nominal types whose implementations have been read.\nThis is used for lazy resolution of methods.",232],[12,"populated_external_traits","","The set of external traits whose implementations have been read. This\nis used for lazy resolution of traits.",232],[12,"upvar_capture_map","","Borrows",232],[12,"extern_const_statics","","These two caches are used by const_eval when decoding external statics\nand variants that are found.",232],[12,"extern_const_variants","","",232],[12,"method_map","","",232],[12,"dependency_formats","","",232],[12,"closure_kinds","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",232],[12,"closure_tys","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",232],[12,"node_lint_levels","","",232],[12,"transmute_restrictions","","The types that must be asserted to be the same size for `transmute`\nto be valid. We gather up these restrictions in the intrinsicck pass\nand check them in trans.",232],[12,"stability","","Maps any item's def-id to its stability index.",232],[12,"associated_types","","Maps def IDs to true if and only if they're associated types.",232],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that do not have to do with the parameters in scope.",232],[12,"repr_hint_cache","","Caches the representation hints for struct definitions.",232],[12,"type_impls_copy_cache","","Caches whether types are known to impl Copy. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",232],[12,"type_impls_sized_cache","","Caches whether types are known to impl Sized. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",232],[12,"object_safety_cache","","Caches whether traits are object safe",232],[12,"const_qualif_map","","Maps Expr NodeId's to their constant qualification.",232],[3,"TypeFlags","",""],[17,"NO_TYPE_FLAGS","",""],[17,"HAS_PARAMS","",""],[17,"HAS_SELF","",""],[17,"HAS_TY_INFER","",""],[17,"HAS_RE_INFER","",""],[17,"HAS_RE_LATE_BOUND","",""],[17,"HAS_REGIONS","",""],[17,"HAS_TY_ERR","",""],[17,"HAS_PROJECTION","",""],[17,"NEEDS_SUBST","",""],[3,"TyS","",""],[12,"sty","","",233],[12,"flags","","",233],[6,"Ty","",""],[3,"InternedTy","","An entry in the type interner."],[5,"type_has_params","",""],[5,"type_has_self","",""],[5,"type_has_ty_infer","",""],[5,"type_needs_infer","",""],[5,"type_has_projection","",""],[5,"type_has_late_bound_regions","",""],[5,"type_has_escaping_regions","","An \"escaping region\" is a bound region whose binder is not part of `t`."],[5,"type_escapes_depth","",""],[3,"BareFnTy","",""],[12,"unsafety","","",235],[12,"abi","","",235],[12,"sig","","",235],[3,"ClosureTy","",""],[12,"unsafety","","",236],[12,"abi","","",236],[12,"sig","","",236],[4,"FnOutput","",""],[13,"FnConverging","","",237],[13,"FnDiverging","","",237],[6,"PolyFnOutput","",""],[3,"FnSig","","Signature of a function type, which I have arbitrarily\ndecided to use to refer to the input/output types."],[12,"inputs","","",84],[12,"output","","",84],[12,"variadic","","",84],[6,"PolyFnSig","",""],[3,"ParamTy","",""],[12,"space","","",238],[12,"idx","","",238],[12,"name","","",238],[3,"DebruijnIndex","","A [De Bruijn index][dbi] is a standard means of representing\nregions (and perhaps later types) in a higher-ranked setting. In\nparticular, imagine a type like this:"],[12,"depth","","",239],[4,"Region","","Representation of regions:"],[13,"ReEarlyBound","","",15],[13,"ReLateBound","","",15],[13,"ReFree","","When checking a function body, the types of all arguments and so forth\nthat refer to bound region parameters are modified to refer to free\nregion parameters.",15],[13,"ReScope","","A concrete region naming some statically determined extent\n(e.g. an expression or sequence of statements) within the\ncurrent function.",15],[13,"ReStatic","","Static data that has an \"infinite\" lifetime. Top in the region lattice.",15],[13,"ReInfer","","A region variable.  Should not exist after typeck.",15],[13,"ReEmpty","","Empty lifetime is for data that is never accessed.\nBottom in the region lattice. We treat ReEmpty somewhat\nspecially; at least right now, we do not generate instances of\nit during the GLB computations, but rather\ngenerate an error instead. This is to improve error messages.\nThe only way to get an instance of ReEmpty is to have a region\nvariable with no constraints.",15],[3,"UpvarId","","Upvars do not get their own node-id. Instead, we use the pair of\nthe original var id (that is, the root variable that is referenced\nby the upvar) and the id of the closure expression."],[12,"var_id","","",240],[12,"closure_expr_id","","",240],[4,"BorrowKind","",""],[13,"ImmBorrow","","Data must be immutable and is aliasable.",241],[13,"UniqueImmBorrow","","Data must be immutable but not aliasable.  This kind of borrow\ncannot currently be expressed by the user and is used only in\nimplicit closure bindings. It is needed when you the closure\nis borrowing or mutating a mutable referent, e.g.:",241],[13,"MutBorrow","","Data is mutable and not aliasable.",241],[4,"UpvarCapture","","Information describing the capture of an upvar. This is computed\nduring `typeck`, specifically by `regionck`."],[13,"ByValue","","Upvar is captured by value. This is always true when the\nclosure is labeled `move`, but can also be true in other cases\ndepending on inference.",23],[13,"ByRef","","Upvar is captured by reference.",23],[3,"UpvarBorrow","",""],[12,"kind","","The kind of borrow: by-ref upvars have access to shared\nimmutable borrows, which are not part of the normal language\nsyntax.",22],[12,"region","","Region of the resulting reference.",22],[6,"UpvarCaptureMap","",""],[3,"FreeRegion","","A \"free\" region `fr` can be interpreted as \"some region\nat least as big as the scope `fr.scope`\"."],[12,"scope","","",16],[12,"bound_region","","",16],[4,"BoundRegion","",""],[13,"BrAnon","","An anonymous region parameter for a given fn (&T)",19],[13,"BrNamed","","Named region parameters for functions (a in &'a T)",19],[13,"BrFresh","","Fresh bound identifiers created during GLB computations.",19],[13,"BrEnv","","",19],[4,"sty","",""],[13,"ty_bool","","",242],[13,"ty_char","","",242],[13,"ty_int","","",242],[13,"ty_uint","","",242],[13,"ty_float","","",242],[13,"ty_enum","","Substs here, possibly against intuition, *may* contain `ty_param`s.\nThat is, even after substitution it is possible that there are type\nvariables. This happens when the `ty_enum` corresponds to an enum\ndefinition and not a concrete use of it. To get the correct `ty_enum`\nfrom the tcx, use the `NodeId` from the `ast::Ty` and look it up in\nthe `ast_ty_to_ty_cache`. This is probably true for `ty_struct` as\nwell.",242],[13,"ty_uniq","","",242],[13,"ty_str","","",242],[13,"ty_vec","","",242],[13,"ty_ptr","","",242],[13,"ty_rptr","","",242],[13,"ty_bare_fn","","",242],[13,"ty_trait","","",242],[13,"ty_struct","","",242],[13,"ty_closure","","",242],[13,"ty_tup","","",242],[13,"ty_projection","","",242],[13,"ty_param","","",242],[13,"ty_infer","","",242],[13,"ty_err","","",242],[3,"TyTrait","",""],[12,"principal","","",243],[12,"bounds","","",243],[3,"TraitRef","","A complete reference to a trait. These take numerous guises in syntax,\nbut perhaps the most recognizable form is in a where clause:"],[12,"def_id","","",82],[12,"substs","","",82],[6,"PolyTraitRef","",""],[3,"Binder","","Binder is a binder for higher-ranked lifetimes. It is part of the\ncompiler's representation for things like `for<'a> Fn(&'a int)`\n(which would be represented by the type `PolyTraitRef ==\nBinder<TraitRef>`). Note that when we skolemize, instantiate,\nerase, or otherwise \"discharge\" these bound regions, we change the\ntype from `Binder<T>` to just `T` (see\ne.g. `liberate_late_bound_regions`)."],[4,"IntVarValue","",""],[13,"IntType","","",119],[13,"UintType","","",119],[4,"terr_vstore_kind","",""],[13,"terr_vec","","",244],[13,"terr_str","","",244],[13,"terr_fn","","",244],[13,"terr_trait","","",244],[3,"expected_found","",""],[12,"expected","","",245],[12,"found","","",245],[4,"type_err","",""],[13,"terr_mismatch","","",246],[13,"terr_unsafety_mismatch","","",246],[13,"terr_abi_mismatch","","",246],[13,"terr_mutability","","",246],[13,"terr_box_mutability","","",246],[13,"terr_ptr_mutability","","",246],[13,"terr_ref_mutability","","",246],[13,"terr_vec_mutability","","",246],[13,"terr_tuple_size","","",246],[13,"terr_fixed_array_size","","",246],[13,"terr_ty_param_size","","",246],[13,"terr_arg_count","","",246],[13,"terr_regions_does_not_outlive","","",246],[13,"terr_regions_not_same","","",246],[13,"terr_regions_no_overlap","","",246],[13,"terr_regions_insufficiently_polymorphic","","",246],[13,"terr_regions_overly_polymorphic","","",246],[13,"terr_sorts","","",246],[13,"terr_integer_as_char","","",246],[13,"terr_int_mismatch","","",246],[13,"terr_float_mismatch","","",246],[13,"terr_traits","","",246],[13,"terr_builtin_bounds","","",246],[13,"terr_variadic_mismatch","","",246],[13,"terr_cyclic_ty","","",246],[13,"terr_convergence_mismatch","","",246],[13,"terr_projection_name_mismatched","","",246],[13,"terr_projection_bounds_length","","",246],[3,"ParamBounds","","Bounds suitable for a named type parameter like `A` in `fn foo<A>`\nas well as the existential type parameter in an object type."],[12,"region_bounds","","",247],[12,"builtin_bounds","","",247],[12,"trait_bounds","","",247],[12,"projection_bounds","","",247],[3,"ExistentialBounds","","Bounds suitable for an existentially quantified type parameter\nsuch as those that appear in object types or closure types. The\nmajor difference between this case and `ParamBounds` is that\ngeneral purpose trait bounds are omitted and there must be\n*exactly one* region."],[12,"region_bound","","",248],[12,"builtin_bounds","","",248],[12,"projection_bounds","","",248],[6,"BuiltinBounds","",""],[4,"BuiltinBound","",""],[13,"BoundSend","","",249],[13,"BoundSized","","",249],[13,"BoundCopy","","",249],[13,"BoundSync","","",249],[5,"empty_builtin_bounds","",""],[5,"all_builtin_bounds","",""],[5,"region_existential_bound","","An existential bound that does not implement any traits."],[3,"TyVid","",""],[12,"index","","",250],[3,"IntVid","",""],[12,"index","","",118],[3,"FloatVid","",""],[12,"index","","",120],[3,"RegionVid","",""],[12,"index","","",251],[4,"InferTy","",""],[13,"TyVar","","",252],[13,"IntVar","","",252],[13,"FloatVar","","",252],[13,"FreshTy","","A `FreshTy` is one that is generated as a replacement for an\nunbound type variable. This is convenient for caching etc. See\n`middle::infer::freshen` for more details.",252],[13,"FreshIntTy","","",252],[4,"UnconstrainedNumeric","",""],[13,"UnconstrainedFloat","","",253],[13,"UnconstrainedInt","","",253],[13,"Neither","","",253],[4,"InferRegion","",""],[13,"ReVar","","",254],[13,"ReSkolemized","","",254],[4,"ObjectLifetimeDefault","","Default region to use for the bound of objects that are\nsupplied as the value for this type parameter. This is derived\nfrom `T:'a` annotations appearing in the type definition.  If\nthis is `None`, then the default is inherited from the\nsurrounding context. See RFC #599 for details."],[13,"Ambiguous","","Require an explicit annotation. Occurs when multiple\n`T:'a` constraints are found.",255],[13,"Specific","","Use the given region as the default.",255],[3,"TypeParameterDef","",""],[12,"name","","",256],[12,"def_id","","",256],[12,"space","","",256],[12,"index","","",256],[12,"default","","",256],[12,"object_lifetime_default","","",256],[3,"RegionParameterDef","",""],[12,"name","","",257],[12,"def_id","","",257],[12,"space","","",257],[12,"index","","",257],[12,"bounds","","",257],[3,"Generics","","Information about the formal type/lifetime parameters associated\nwith an item or method. Analogous to ast::Generics."],[12,"types","","",258],[12,"regions","","",258],[3,"GenericPredicates","","Bounds on generics."],[12,"predicates","","",259],[4,"Predicate","",""],[13,"Trait","","Corresponds to `where Foo : Bar<A,B,C>`. `Foo` here would be\nthe `Self` type of the trait reference and `A`, `B`, and `C`\nwould be the parameters in the `TypeSpace`.",260],[13,"Equate","","where `T1 == T2`.",260],[13,"RegionOutlives","","where 'a : 'b",260],[13,"TypeOutlives","","where T : 'a",260],[13,"Projection","","where <T as TraitRef>::Name == X, approximately.\nSee `ProjectionPredicate` struct for details.",260],[3,"TraitPredicate","",""],[12,"trait_ref","","",261],[6,"PolyTraitPredicate","",""],[3,"EquatePredicate","",""],[6,"PolyEquatePredicate","",""],[3,"OutlivesPredicate","",""],[6,"PolyOutlivesPredicate","",""],[6,"PolyRegionOutlivesPredicate","",""],[6,"PolyTypeOutlivesPredicate","",""],[3,"ProjectionPredicate","","This kind of predicate has no *direct* correspondent in the\nsyntax, but it roughly corresponds to the syntactic forms:"],[12,"projection_ty","","",83],[12,"ty","","",83],[6,"PolyProjectionPredicate","",""],[3,"ProjectionTy","","Represents the projection of an associated type. In explicit UFCS\nform this would be written `<T as Trait<..>>::N`."],[12,"trait_ref","","The trait reference `T as Trait<..>`.",264],[12,"item_name","","The name `N` of the associated type.",264],[8,"ToPolyTraitRef","",""],[10,"to_poly_trait_ref","","",408],[8,"AsPredicate","",""],[10,"as_predicate","","",409],[3,"InstantiatedPredicates","","Represents the bounds declared on a particular set of type\nparameters.  Should eventually be generalized into a flag list of\nwhere clauses.  You can obtain a `InstantiatedPredicates` list from a\n`GenericPredicates` by using the `instantiate` method. Note that this method\nreflects an important semantic invariant of `InstantiatedPredicates`: while\nthe `GenericPredicates` are expressed in terms of the bound type\nparameters of the impl/trait/whatever, an `InstantiatedPredicates` instance\nrepresented a set of bounds for some particular instantiation,\nmeaning that the generic parameters have been substituted with\ntheir values."],[12,"predicates","","",265],[3,"ParameterEnvironment","","When type checking, we use the `ParameterEnvironment` to track\ndetails about the type/lifetime parameters that are in scope.\nIt primarily stores the bounds information."],[12,"tcx","","",266],[12,"free_substs","","See `construct_free_substs` for details.",266],[12,"implicit_region_bound","","Each type parameter has an implicit region bound that\nindicates it must outlive at least the function body (the user\nmay specify stronger requirements). This field indicates the\nregion of the callee.",266],[12,"caller_bounds","","Obligations that the caller must satisfy. This is basically\nthe set of bounds on the in-scope type parameters, translated\ninto Obligations.",266],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that have to do with the parameters in scope.",266],[3,"TypeScheme","","A \"type scheme\", in ML terminology, is a type combined with some\nset of generic types that the type is, well, generic over. In Rust\nterms, it is the \"type\" of a fn item or struct -- this type will\ninclude various generic parameters that must be substituted when\nthe item/struct is referenced. That is called converting the type\nscheme to a monotype."],[12,"generics","","",267],[12,"ty","","",267],[3,"TraitDef","","As `TypeScheme` but for a trait ref."],[12,"unsafety","","",339],[12,"paren_sugar","","If `true`, then this trait had the `#[rustc_paren_sugar]`\nattribute, indicating that it should be used with `Foo()`\nsugar. This is a temporary thing -- eventually any trait wil\nbe usable with the sugar (or without it).",339],[12,"generics","","Generic type definitions. Note that `Self` is listed in here\nas having a single bound, the trait itself (e.g., in the trait\n`Eq`, there is a single bound `Self : Eq`). This is so that\ndefault methods get to assume that the `Self` parameters\nimplements the trait.",339],[12,"trait_ref","","",339],[12,"associated_type_names","","A list of the associated types defined in this trait. Useful\nfor resolving `X::Foo` type markers.",339],[3,"ItemSubsts","","Records the substitutions used to translate the polytype for an\nitem into the monotype of an item reference."],[12,"substs","","",268],[4,"ClosureKind","",""],[13,"FnClosureKind","","",154],[13,"FnMutClosureKind","","",154],[13,"FnOnceClosureKind","","",154],[8,"ClosureTyper","",""],[10,"tcx","","",410],[10,"param_env","","",410],[10,"closure_kind","","Is this a `Fn`, `FnMut` or `FnOnce` closure? During typeck,\nreturns `None` if the kind of this closure has not yet been\ninferred.",410],[10,"closure_type","","Returns the argument/return types of this closure.",410],[10,"closure_upvars","","Returns the set of all upvars and their transformed\ntypes. During typeck, maybe return `None` if the upvar types\nhave not yet been inferred.",410],[5,"mk_ctxt","",""],[5,"mk_t","",""],[5,"mk_mach_int","",""],[5,"mk_mach_uint","",""],[5,"mk_mach_float","",""],[5,"mk_str","",""],[5,"mk_str_slice","",""],[5,"mk_enum","",""],[5,"mk_uniq","",""],[5,"mk_ptr","",""],[5,"mk_rptr","",""],[5,"mk_mut_rptr","",""],[5,"mk_imm_rptr","",""],[5,"mk_mut_ptr","",""],[5,"mk_imm_ptr","",""],[5,"mk_nil_ptr","",""],[5,"mk_vec","",""],[5,"mk_slice","",""],[5,"mk_tup","",""],[5,"mk_nil","",""],[5,"mk_bare_fn","",""],[5,"mk_ctor_fn","",""],[5,"mk_trait","",""],[5,"sort_bounds_list","",""],[5,"mk_projection","",""],[5,"mk_struct","",""],[5,"mk_closure","",""],[5,"mk_var","",""],[5,"mk_int_var","",""],[5,"mk_float_var","",""],[5,"mk_infer","",""],[5,"mk_param","",""],[5,"mk_self_type","",""],[5,"mk_param_from_def","",""],[5,"walk_ty","",""],[5,"maybe_walk_ty","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored."],[5,"fold_ty","",""],[5,"type_is_nil","",""],[5,"type_is_error","",""],[5,"type_needs_subst","",""],[5,"trait_ref_contains_error","",""],[5,"type_is_ty_var","",""],[5,"type_is_bool","",""],[5,"type_is_self","",""],[5,"type_is_vec","",""],[5,"type_is_structural","",""],[5,"type_is_simd","",""],[5,"sequence_element_type","",""],[5,"simd_type","",""],[5,"simd_size","",""],[5,"type_is_region_ptr","",""],[5,"type_is_unsafe_ptr","",""],[5,"type_is_unique","",""],[5,"type_is_scalar","",""],[5,"type_is_floating_point","","Returns true if this type is a floating point type and false otherwise."],[3,"TypeContents","","Type contents is how the type checker reasons about kinds.\nThey track what kinds of things are found within a type.  You can\nthink of them as kind of an \"anti-kind\".  They track the kinds of values\nand thinks that are contained in types.  Having a larger contents for\na type tends to rule that type *out* from various kinds.  For example,\na type that contains a reference is not sendable."],[12,"bits","","",269],[5,"type_interior_is_unsafe","",""],[5,"type_contents","",""],[5,"type_moves_by_default","",""],[5,"type_is_sized","",""],[5,"is_ffi_safe","",""],[5,"is_instantiable","",""],[4,"Representability","","Describes whether a type is representable. For types that are not\nrepresentable, 'SelfRecursive' and 'ContainsRecursive' are used to\ndistinguish between types that are recursive with themselves and types that\ncontain a different recursive type. These cases can therefore be treated\ndifferently when reporting errors."],[13,"Representable","","",270],[13,"ContainsRecursive","","",270],[13,"SelfRecursive","","",270],[5,"is_type_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums."],[5,"type_is_trait","",""],[5,"type_trait_info","",""],[5,"type_is_integral","",""],[5,"type_is_fresh","",""],[5,"type_is_uint","",""],[5,"type_is_char","",""],[5,"type_is_bare_fn","",""],[5,"type_is_bare_fn_item","",""],[5,"type_is_fp","",""],[5,"type_is_numeric","",""],[5,"type_is_signed","",""],[5,"type_is_machine","",""],[5,"type_is_c_like_enum","",""],[5,"deref","",""],[5,"type_content","",""],[5,"index","",""],[5,"array_element_ty","",""],[5,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum."],[5,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id."],[5,"impl_id_to_trait_ref","",""],[5,"node_id_to_type","",""],[5,"node_id_to_type_opt","",""],[5,"node_id_item_substs","",""],[5,"fn_is_variadic","",""],[5,"ty_fn_sig","",""],[5,"ty_fn_abi","","Returns the ABI of the given function."],[5,"ty_fn_args","",""],[5,"ty_fn_ret","",""],[5,"is_fn_ty","",""],[5,"ty_region","",""],[5,"free_region_from_def","",""],[5,"pat_ty","",""],[5,"pat_ty_opt","",""],[5,"expr_ty","",""],[5,"expr_ty_opt","",""],[5,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression."],[5,"expr_span","",""],[5,"local_var_name_str","",""],[5,"adjust_ty","","See `expr_ty_adjusted`"],[5,"adjust_ty_for_autoref","",""],[5,"unsize_ty","",""],[5,"resolve_expr","",""],[5,"expr_is_lval","",""],[4,"ExprKind","","We categorize expressions into three kinds.  The distinction between\nlvalue/rvalue is fundamental to the language.  The distinction between the\ntwo kinds of rvalues is an artifact of trans which reflects how we will\ngenerate code for that kind of expression.  See trans/expr.rs for more\ninformation."],[13,"LvalueExpr","","",411],[13,"RvalueDpsExpr","","",411],[13,"RvalueDatumExpr","","",411],[13,"RvalueStmtExpr","","",411],[5,"expr_kind","",""],[5,"stmt_node_id","",""],[5,"field_idx_strict","",""],[5,"impl_or_trait_item_idx","",""],[5,"ty_sort_string","",""],[5,"type_err_to_str","","Explains the source of a type err in a short, human readable way. This is meant to be placed\nin parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\nafterwards to present additional details, particularly when it comes to lifetime-related\nerrors."],[5,"note_and_explain_type_err","",""],[5,"provided_source","",""],[5,"provided_trait_methods","",""],[5,"trait_item","",""],[5,"trait_items","",""],[5,"trait_impl_polarity","",""],[5,"impl_or_trait_item","",""],[5,"is_associated_type","","Returns true if the given ID refers to an associated type and false if it\nrefers to anything else."],[5,"associated_type_parameter_index","","Returns the parameter index that the given associated type corresponds to."],[5,"trait_item_def_ids","",""],[5,"impl_trait_ref","",""],[5,"trait_ref_to_def_id","",""],[5,"try_add_builtin_trait","","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait."],[5,"ty_to_def_id","",""],[3,"VariantInfo","",""],[12,"args","","",271],[12,"arg_names","","",271],[12,"ctor_ty","","",271],[12,"name","","",271],[12,"id","","",271],[12,"disr_val","","",271],[12,"vis","","",271],[5,"substd_enum_variants","",""],[5,"item_path_str","",""],[4,"DtorKind","",""],[13,"NoDtor","","",272],[13,"TraitDtor","","",272],[5,"ty_dtor","",""],[5,"has_dtor","",""],[5,"with_path","",""],[5,"enum_is_univariant","",""],[5,"type_is_empty","",""],[5,"enum_variants","",""],[5,"enum_variant_with_id","",""],[5,"lookup_item_type","",""],[5,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref."],[5,"lookup_predicates","","Given the did of an item, returns its full set of predicates."],[5,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates."],[5,"predicates","",""],[5,"get_attrs","","Get the attributes of a definition."],[5,"has_attr","","Determine whether an item is annotated with an attribute"],[5,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`"],[5,"lookup_simd","","Determine whether an item is annotated with `#[simd]`"],[5,"lookup_repr_hints","","Obtain the representation annotation for a struct definition."],[5,"lookup_field_type","",""],[5,"lookup_struct_fields","",""],[5,"is_tuple_struct","",""],[5,"struct_fields","",""],[5,"tup_fields","",""],[3,"ClosureUpvar","",""],[12,"def","","",273],[12,"span","","",273],[12,"ty","","",273],[5,"closure_upvars","",""],[5,"is_binopable","",""],[5,"eval_repeat_count","",""],[5,"each_bound_trait_and_supertraits","",""],[5,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice."],[5,"get_tydesc_ty","",""],[5,"item_variances","",""],[5,"trait_has_default_impl","",""],[5,"record_trait_has_default_impl","","Records a trait-to-implementation mapping."],[5,"record_trait_implementation","","Records a trait-to-implementation mapping."],[5,"populate_implementations_for_type_if_necessary","","Populates the type context with all the implementations for the given type\nif necessary."],[5,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary."],[5,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`."],[5,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`."],[5,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`."],[5,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`."],[5,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it's calculated within. This is used by the `type_id` intrinsic."],[5,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope."],[5,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe \"outer\" view of a type or method to the \"inner\" view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions."],[5,"construct_parameter_environment","","See `ParameterEnvironment` struct def'n for details"],[4,"ExplicitSelfCategory","","The category of explicit self."],[13,"StaticExplicitSelfCategory","","",274],[13,"ByValueExplicitSelfCategory","","",274],[13,"ByReferenceExplicitSelfCategory","","",274],[13,"ByBoxExplicitSelfCategory","","",274],[5,"accumulate_lifetimes_in_type","","Pushes all the lifetimes in the given type onto the given list. A\n\"lifetime in a type\" is a lifetime specified by a reference or a lifetime\nin a list of type substitutions. This does *not* traverse into nominal\ntypes, nor does it resolve fictitious types."],[3,"Freevar","","A free variable referred to in a function."],[12,"def","","The variable being accessed free.",21],[12,"span","","",21],[6,"FreevarMap","",""],[6,"CaptureModeMap","",""],[6,"TraitMap","",""],[6,"GlobMap","",""],[5,"with_freevars","",""],[5,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`."],[5,"count_late_bound_regions","",""],[5,"binds_late_bound_regions","",""],[5,"no_late_bound_regions","",""],[5,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `'static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required."],[5,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation."],[5,"replace_late_bound_regions","","Replaces the late-bound-regions in `value` that are bound by `value`."],[5,"make_substs_for_receiver_types","","Substitutes the values for the receiver's type parameters\nthat are found in method, leaving the method's type parameters\nintact."],[4,"CopyImplementationError","",""],[13,"FieldDoesNotImplementCopy","","",412],[13,"VariantDoesNotImplementCopy","","",412],[13,"TypeIsStructural","","",412],[13,"TypeHasDestructor","","",412],[5,"can_type_implement_copy","",""],[8,"RegionEscape","",""],[10,"has_escaping_regions","","",413],[10,"has_regions_escaping_depth","","",413],[8,"HasProjectionTypes","",""],[10,"has_projection_types","","",414],[8,"ReferencesError","",""],[10,"references_error","","",415],[0,"ty_fold","rustc_trans::middle","Generalized type folding mechanism. The setup is a bit convoluted\nbut allows for convenient usage. Let T be an instance of some\n\"foldable type\" (one which implements `TypeFoldable`) and F be an\ninstance of a \"folder\" (a type which implements `TypeFolder`). Then\nthe setup is intended to be:"],[8,"TypeFoldable","rustc_trans::middle::ty_fold","The TypeFoldable trait is implemented for every type that can be folded.\nBasically, every type that has a corresponding method in TypeFolder."],[10,"fold_with","","",416],[8,"TypeFolder","","The TypeFolder trait defines the actual *folding*. There is a\nmethod defined for every foldable type. Each of these has a\ndefault implementation that does an \"identity\" fold. Within each\nidentity fold, it should invoke `foo.fold_with(self)` to fold each\nsub-item."],[10,"tcx","","",417],[10,"enter_region_binder","","Invoked by the `super_*` routines when we enter a region\nbinding level (for example, when entering a function\nsignature). This is used by clients that want to track the\nDebruijn index nesting level.",417],[10,"exit_region_binder","","Invoked by the `super_*` routines when we exit a region\nbinding level. This is used by clients that want to\ntrack the Debruijn index nesting level.",417],[10,"fold_binder","","",417],[10,"fold_ty","","",417],[10,"fold_mt","","",417],[10,"fold_trait_ref","","",417],[10,"fold_substs","","",417],[10,"fold_fn_sig","","",417],[10,"fold_output","","",417],[10,"fold_bare_fn_ty","","",417],[10,"fold_closure_ty","","",417],[10,"fold_region","","",417],[10,"fold_existential_bounds","","",417],[10,"fold_autoref","","",417],[10,"fold_item_substs","","",417],[5,"super_fold_binder","",""],[5,"super_fold_ty","",""],[5,"super_fold_substs","",""],[5,"super_fold_fn_sig","",""],[5,"super_fold_output","",""],[5,"super_fold_bare_fn_ty","",""],[5,"super_fold_closure_ty","",""],[5,"super_fold_trait_ref","",""],[5,"super_fold_mt","",""],[5,"super_fold_existential_bounds","",""],[5,"super_fold_autoref","",""],[5,"super_fold_item_substs","",""],[3,"BottomUpFolder","",""],[12,"tcx","","",279],[12,"fldop","","",279],[3,"RegionFolder","","Folds over the substructure of a type, visiting its component\ntypes and all regions that occur *free* within it."],[5,"collect_regions","",""],[5,"fold_regions","",""],[3,"RegionEraser","",""],[5,"erase_regions","",""],[5,"shift_region","",""],[5,"shift_regions","",""],[0,"ty_walk","rustc_trans::middle","An iterator over the type substructure."],[3,"TypeWalker","rustc_trans::middle::ty_walk",""],[0,"weak_lang_items","rustc_trans::middle","Validity checking for weak lang items"],[5,"check_crate","rustc_trans::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the\nlanguage items required by this crate, but not defined yet."],[5,"link_name","",""],[0,"lint","rustc_trans","Lints, aka compiler warnings."],[3,"Lint","rustc_trans::lint","Specification of a single lint."],[12,"name","","A string identifier for the lint.",326],[12,"default_level","","Default level for the lint.",326],[12,"desc","","Description of the lint or the issue it detects.",326],[6,"LintArray","",""],[8,"LintPass","","Trait for types providing lint checks."],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",418],[10,"check_crate","","",418],[10,"check_ident","","",418],[10,"check_mod","","",418],[10,"check_foreign_item","","",418],[10,"check_item","","",418],[10,"check_local","","",418],[10,"check_block","","",418],[10,"check_stmt","","",418],[10,"check_arm","","",418],[10,"check_pat","","",418],[10,"check_decl","","",418],[10,"check_expr","","",418],[10,"check_expr_post","","",418],[10,"check_ty","","",418],[10,"check_generics","","",418],[10,"check_fn","","",418],[10,"check_ty_method","","",418],[10,"check_trait_item","","",418],[10,"check_struct_def","","",418],[10,"check_struct_def_post","","",418],[10,"check_struct_field","","",418],[10,"check_variant","","",418],[10,"check_variant_post","","",418],[10,"check_opt_lifetime_ref","","",418],[10,"check_lifetime_ref","","",418],[10,"check_lifetime_def","","",418],[10,"check_explicit_self","","",418],[10,"check_mac","","",418],[10,"check_path","","",418],[10,"check_attribute","","",418],[10,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",418],[10,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",418],[6,"LintPassObject","",""],[3,"LintId","","Identifies a lint known to the compiler."],[4,"Level","","Setting for how to handle a lint."],[13,"Allow","","",328],[13,"Warn","","",328],[13,"Deny","","",328],[13,"Forbid","","",328],[4,"LintSource","","How a lint level was set."],[13,"Default","","Lint is at the default level as declared\nin rustc or a plugin.",329],[13,"Node","","Lint level was set by an attribute.",329],[13,"CommandLine","","Lint level was set by a command-line flag.",329],[13,"ReleaseChannel","","Lint level was set by the release channel.",329],[6,"LevelSource","",""],[0,"builtin","","Some lints that are built in to the compiler."],[7,"UNUSED_IMPORTS","rustc_trans::lint::builtin",""],[7,"UNUSED_EXTERN_CRATES","",""],[7,"UNUSED_QUALIFICATIONS","",""],[7,"UNKNOWN_LINTS","",""],[7,"UNUSED_VARIABLES","",""],[7,"UNUSED_ASSIGNMENTS","",""],[7,"DEAD_CODE","",""],[7,"UNREACHABLE_CODE","",""],[7,"WARNINGS","",""],[7,"UNUSED_FEATURES","",""],[7,"STABLE_FEATURES","",""],[7,"UNKNOWN_CRATE_TYPES","",""],[7,"VARIANT_SIZE_DIFFERENCES","",""],[7,"FAT_PTR_TRANSMUTES","",""],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s\nwhich are used by other parts of the compiler."],[5,"check_crate","rustc_trans::lint","Perform lint checking on a crate."],[3,"Context","","Context for lint checking."],[12,"tcx","","Type context we're checking in.",332],[12,"krate","","The crate being checked.",332],[12,"exported_items","","Items exported from the crate being checked.",332],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint\nattributes. Writing this as an iterator is an enormous mess."],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all)\naccording to `level`."],[3,"GatherNodeLevels","",""],[3,"LintStore","","Information about the registered lints."],[0,"plugin","rustc_trans","Infrastructure for compiler plugins."],[0,"registry","rustc_trans::plugin","Used by plugin crates to tell `rustc` about the plugins they provide."],[3,"Registry","rustc_trans::plugin::registry","Structure used to register plugins."],[12,"sess","","Compiler session. Useful if you want to emit diagnostic messages\nfrom the plugin registrar.",324],[0,"load","rustc_trans::plugin","Used by `rustc` when loading a plugin."],[6,"PluginRegistrarFun","rustc_trans::plugin::load",""],[3,"PluginRegistrar","",""],[12,"fun","","",419],[12,"args","","",419],[5,"load_plugins","","Read plugin metadata and dynamically load registrar functions."],[0,"build","rustc_trans::plugin","Used by `rustc` when compiling a plugin crate."],[5,"find_plugin_registrar","rustc_trans::plugin::build","Find the function marked with `#[plugin_registrar]`, if any."],[3,"Registry","rustc_trans::plugin","Structure used to register plugins."],[12,"sess","","Compiler session. Useful if you want to emit diagnostic messages\nfrom the plugin registrar.",324],[0,"util","rustc_trans",""],[0,"common","rustc_trans::util",""],[17,"FN_OUTPUT_NAME","rustc_trans::util::common",""],[3,"ErrorReported","",""],[5,"time","",""],[5,"indent","",""],[3,"Indenter","",""],[5,"indenter","",""],[5,"loop_query","",""],[5,"block_query","",""],[5,"can_reach","","K: Eq + Hash<S>, V, S, H: Hasher<S>"],[5,"memoized","","Memoizes a one-argument closure using the given RefCell containing\na type implementing MutableMap to serve as a cache."],[5,"path2cstr","",""],[0,"ppaux","rustc_trans::util",""],[8,"Repr","rustc_trans::util::ppaux","Produces a string suitable for debugging output."],[10,"repr","","",420],[8,"UserString","","Produces a string suitable for showing to the user."],[10,"user_string","","",421],[5,"note_and_explain_region","",""],[5,"explain_region_and_span","",""],[5,"bound_region_ptr_to_string","",""],[5,"bound_region_to_string","",""],[5,"region_ptr_to_string","",""],[5,"region_to_string","",""],[5,"mutability_to_string","",""],[5,"mt_to_string","",""],[5,"vec_map_to_string","",""],[5,"ty_to_string","",""],[5,"explicit_self_category_to_str","",""],[5,"parameterized","",""],[5,"ty_to_short_str","",""],[0,"nodemap","rustc_trans::util","An efficient hash map for node IDs"],[6,"FnvHashMap","rustc_trans::util::nodemap",""],[6,"FnvHashSet","",""],[6,"NodeMap","",""],[6,"DefIdMap","",""],[6,"NodeSet","",""],[6,"DefIdSet","",""],[5,"FnvHashMap","",""],[5,"FnvHashSet","",""],[5,"NodeMap","",""],[5,"DefIdMap","",""],[5,"NodeSet","",""],[5,"DefIdSet","",""],[3,"FnvHasher","","A speedy hash algorithm for node ids and def ids. The hashmap in\nlibcollections by default uses SipHash which isn't quite as speedy as we\nwant. In the compiler we're not really worried about DOS attempts, so we\njust default to a non-cryptographic hash."],[0,"snapshot_vec","rustc_trans::util","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits\nyou to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either\nto rollback to the start of the snapshot or commit those changes."],[4,"UndoLog","rustc_trans::util::snapshot_vec",""],[13,"OpenSnapshot","","Indicates where a snapshot started.",422],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",422],[13,"NewElem","","New variable with given index was created.",422],[13,"SetElem","","Variable with given index was changed *from* the given value.",422],[13,"Other","","Extensible set of actions",422],[3,"SnapshotVec","",""],[3,"Snapshot","",""],[8,"SnapshotVecDelegate","",""],[16,"Value","rustc_trans::util::snapshot_vec::SnapshotVecDelegate",""],[16,"Undo","",""],[10,"reverse","rustc_trans::util::snapshot_vec","",423],[0,"lev_distance","rustc_trans::util",""],[5,"lev_distance","rustc_trans::util::lev_distance",""],[0,"fs","rustc_trans::util",""],[5,"realpath","rustc_trans::util::fs","Returns an absolute path in the filesystem that `path` points to. The\nreturned path does not contain any symlinks in its hierarchy."],[0,"sha2","rustc_trans::util","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant."],[8,"Digest","rustc_trans::util::sha2","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions."],[10,"input","","Provide message data.",424],[10,"result","","Retrieve the digest result. This method may be called multiple times.",424],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",424],[10,"output_bits","","Get the output size in bits.",424],[10,"input_str","","Convenience function that feeds a string into a digest.",424],[10,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",424],[10,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",424],[11,"new_in","rustc_back::tempdir","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",425],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",425],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",425],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",425],[11,"close","","Close and remove the temporary directory",425],[11,"drop","","",425],[11,"to_string","rustc_back::target::apple_ios_base","",426],[11,"fmt","rustc_back::target","",427],[11,"clone","","",427],[11,"fmt","","",428],[11,"clone","","",428],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for\ncompilation, will certainly not work.",428],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",427],[11,"from_json","","Load a target descriptor from a JSON object.",427],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",427],[3,"Sha256","rustc_trans::util::sha2","The SHA-256 hash algorithm"],[0,"back","rustc_trans",""],[0,"abi","rustc_trans::back",""],[17,"BOX_FIELD_DROP_GLUE","rustc_trans::back::abi",""],[17,"BOX_FIELD_BODY","",""],[17,"FAT_PTR_ADDR","","The first half of a fat pointer.\n- For a closure, this is the code address.\n- For an object or trait instance, this is the address of the box.\n- For a slice, this is the base address."],[17,"FAT_PTR_EXTRA","","The second half of a fat pointer.\n- For a closure, this is the address of the environment.\n- For an object or trait instance, this is the address of the vtable.\n- For a slice, this is the length."],[0,"archive","rustc_trans::back","A helper class for dealing with static archives"],[17,"METADATA_FILENAME","rustc_trans::back::archive",""],[3,"ArchiveConfig","",""],[12,"handler","","",429],[12,"dst","","",429],[12,"lib_search_paths","","",429],[12,"slib_prefix","","",429],[12,"slib_suffix","","",429],[12,"maybe_ar_prog","","",429],[3,"Archive","",""],[3,"ArchiveBuilder","","Helper for adding many files to an archive with a single invocation of\n`ar`."],[5,"find_library","",""],[0,"arm","rustc_trans::back",""],[5,"get_target_strs","rustc_trans::back::arm",""],[0,"mips","rustc_trans::back",""],[5,"get_target_strs","rustc_trans::back::mips",""],[0,"mipsel","rustc_trans::back",""],[5,"get_target_strs","rustc_trans::back::mipsel",""],[0,"rpath","rustc_trans::back",""],[3,"RPathConfig","rustc_trans::back::rpath",""],[12,"used_crates","","",430],[12,"out_filename","","",430],[12,"is_like_osx","","",430],[12,"has_rpath","","",430],[12,"get_install_prefix_lib_path","","",430],[12,"realpath","","",430],[5,"get_rpath_flags","",""],[0,"svh","rustc_trans::back","Calculation and management of a Strict Version Hash for crates"],[3,"Svh","rustc_trans::back::svh",""],[0,"target_strs","rustc_trans::back",""],[3,"t","rustc_trans::back::target_strs",""],[12,"module_asm","","",431],[12,"data_layout","","",431],[12,"target_triple","","",431],[12,"cc_args","","",431],[0,"x86","rustc_trans::back",""],[5,"get_target_strs","rustc_trans::back::x86",""],[0,"x86_64","rustc_trans::back",""],[5,"get_target_strs","rustc_trans::back::x86_64",""],[0,"link","rustc_trans::back",""],[5,"find_crate_name","rustc_trans::back::link",""],[5,"build_link_meta","",""],[5,"sanitize","",""],[5,"mangle","",""],[5,"exported_name","",""],[5,"mangle_exported_name","",""],[5,"mangle_internal_name_by_type_and_seq","",""],[5,"mangle_internal_name_by_path_and_seq","",""],[5,"get_cc_prog","",""],[5,"remove","",""],[5,"link_binary","","Perform the linkage portion of the compilation phase. This will generate all\nof the requested outputs for this compilation session."],[5,"default_output_for_target","","Returns default crate type for target"],[5,"invalid_output_for_target","","Checks if target supports crate_type as output"],[5,"filename_for_input","",""],[17,"RLIB_BYTECODE_OBJECT_MAGIC","",""],[17,"RLIB_BYTECODE_OBJECT_VERSION","",""],[17,"RLIB_BYTECODE_OBJECT_VERSION_OFFSET","",""],[17,"RLIB_BYTECODE_OBJECT_V1_DATASIZE_OFFSET","",""],[17,"RLIB_BYTECODE_OBJECT_V1_DATA_OFFSET","",""],[0,"lto","rustc_trans::back",""],[5,"run","rustc_trans::back::lto",""],[0,"write","rustc_trans::back",""],[4,"OutputType","rustc_trans::back::write",""],[13,"OutputTypeBitcode","","",432],[13,"OutputTypeAssembly","","",432],[13,"OutputTypeLlvmAssembly","","",432],[13,"OutputTypeObject","","",432],[13,"OutputTypeExe","","",432],[5,"llvm_err","",""],[5,"write_output_file","",""],[5,"run_passes","",""],[5,"run_assembler","",""],[11,"cmp","","",432],[11,"partial_cmp","","",432],[11,"lt","","",432],[11,"le","","",432],[11,"gt","","",432],[11,"ge","","",432],[11,"eq","","",432],[11,"ne","","",432],[11,"clone","","",432],[0,"trans","rustc_trans",""],[3,"CrateContext","rustc_trans::trans",""],[3,"ModuleTranslation","",""],[12,"llcx","","",433],[12,"llmod","","",433],[3,"CrateTranslation","",""],[12,"modules","","",434],[12,"metadata_module","","",434],[12,"link","","",434],[12,"metadata","","",434],[12,"reachable","","",434],[12,"crate_formats","","",434],[12,"no_builtins","","",434],[5,"trans_crate","",""],[5,"gensym_name","","Generates a unique symbol based off the name given. This is used to create\nunique symbols for things like closures."],[11,"shared","","",435],[11,"local","","",435],[11,"rotate","","Get a (possibly) different `CrateContext` from the same\n`SharedCrateContext`.",435],[11,"maybe_iter","","Either iterate over only `self`, or iterate over all `CrateContext`s in\nthe `SharedCrateContext`.  The iterator produces `(ccx, is_origin)`\npairs, where `is_origin` is `true` if `ccx` is `self` and `false`\notherwise.  This method is useful for avoiding code duplication in\ncases where it may or may not be necessary to translate code into every\ncontext.",435],[11,"tcx","","",435],[11,"sess","","",435],[11,"builder","","",435],[11,"raw_builder","","",435],[11,"tydesc_type","","",435],[11,"get_intrinsic","","",435],[11,"is_split_stack_supported","","",435],[11,"llmod","","",435],[11,"llcx","","",435],[11,"td","","",435],[11,"tn","","",435],[11,"externs","","",435],[11,"item_vals","","",435],[11,"export_map","","",435],[11,"reachable","","",435],[11,"item_symbols","","",435],[11,"link_meta","","",435],[11,"needs_unwind_cleanup_cache","","",435],[11,"fn_pointer_shims","","",435],[11,"drop_glues","","",435],[11,"tydescs","","",435],[11,"finished_tydescs","","",435],[11,"external","","",435],[11,"external_srcs","","",435],[11,"monomorphized","","",435],[11,"monomorphizing","","",435],[11,"vtables","","",435],[11,"const_cstr_cache","","",435],[11,"const_unsized","","",435],[11,"const_globals","","",435],[11,"const_values","","",435],[11,"static_values","","",435],[11,"extern_const_values","","",435],[11,"impl_method_cache","","",435],[11,"closure_bare_wrapper_cache","","",435],[11,"lltypes","","",435],[11,"llsizingtypes","","",435],[11,"adt_reprs","","",435],[11,"symbol_hasher","","",435],[11,"type_hashcodes","","",435],[11,"all_llvm_symbols","","",435],[11,"stats","","",435],[11,"available_monomorphizations","","",435],[11,"available_drop_glues","","",435],[11,"int_type","","",435],[11,"opaque_vec_type","","",435],[11,"closure_vals","","",435],[11,"dbg_cx","","",435],[11,"eh_personality","","",435],[11,"count_llvm_insn","","",435],[11,"trait_cache","","",435],[11,"obj_size_bound","","Return exclusive upper bound on object size.",435],[11,"report_overbig_object","","",435],[11,"check_overflow","","",435],[11,"debug_loc","syntax::ast","",151],[11,"debug_loc","core::option","",11],[11,"llrepr","rustc_trans::trans::llrepr","",436],[0,"save","rustc_trans","Output a CSV file containing the output from rustc's analysis. The data is\nprimarily designed to be used as input to the DXR tool, specifically its\nRust plugin. It could also be used by IDEs or other code browsing, search, or\ncross-referencing tools."],[5,"process_crate","rustc_trans::save",""],[0,"lib","rustc_trans",""],[0,"llvm","rustc_trans::lib",""],[0,"archive_ro","rustc_trans::lib::llvm","A wrapper around LLVM's archive (.a) code"],[3,"ArchiveRO","rustc_trans::lib::llvm::archive_ro",""],[0,"diagnostic","rustc_trans::lib::llvm","LLVM diagnostic reports."],[4,"OptimizationDiagnosticKind","rustc_trans::lib::llvm::diagnostic",""],[13,"OptimizationRemark","","",358],[13,"OptimizationMissed","","",358],[13,"OptimizationAnalysis","","",358],[13,"OptimizationFailure","","",358],[3,"OptimizationDiagnostic","",""],[12,"kind","","",437],[12,"pass_name","","",437],[12,"function","","",437],[12,"debug_loc","","",437],[12,"message","","",437],[3,"InlineAsmDiagnostic","",""],[12,"cookie","","",438],[12,"message","","",438],[12,"instruction","","",438],[4,"Diagnostic","",""],[13,"Optimization","","",359],[13,"InlineAsm","","",359],[13,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",359],[6,"Opcode","rustc_trans::lib::llvm",""],[6,"Bool","",""],[17,"True","",""],[17,"False","",""],[4,"CallConv","",""],[13,"CCallConv","","",360],[13,"FastCallConv","","",360],[13,"ColdCallConv","","",360],[13,"X86StdcallCallConv","","",360],[13,"X86FastcallCallConv","","",360],[13,"X86_64_Win64","","",360],[4,"Visibility","",""],[13,"LLVMDefaultVisibility","","",439],[13,"HiddenVisibility","","",439],[13,"ProtectedVisibility","","",439],[4,"Linkage","",""],[13,"ExternalLinkage","","",440],[13,"AvailableExternallyLinkage","","",440],[13,"LinkOnceAnyLinkage","","",440],[13,"LinkOnceODRLinkage","","",440],[13,"WeakAnyLinkage","","",440],[13,"WeakODRLinkage","","",440],[13,"AppendingLinkage","","",440],[13,"InternalLinkage","","",440],[13,"PrivateLinkage","","",440],[13,"ExternalWeakLinkage","","",440],[13,"CommonLinkage","","",440],[4,"DiagnosticSeverity","",""],[13,"Error","","",361],[13,"Warning","","",361],[13,"Remark","","",361],[13,"Note","","",361],[3,"Attribute","",""],[17,"ZExtAttribute","",""],[17,"SExtAttribute","",""],[17,"NoReturnAttribute","",""],[17,"InRegAttribute","",""],[17,"StructRetAttribute","",""],[17,"NoUnwindAttribute","",""],[17,"NoAliasAttribute","",""],[17,"ByValAttribute","",""],[17,"NestAttribute","",""],[17,"ReadNoneAttribute","",""],[17,"ReadOnlyAttribute","",""],[17,"NoInlineAttribute","",""],[17,"AlwaysInlineAttribute","",""],[17,"OptimizeForSizeAttribute","",""],[17,"StackProtectAttribute","",""],[17,"StackProtectReqAttribute","",""],[17,"AlignmentAttribute","",""],[17,"NoCaptureAttribute","",""],[17,"NoRedZoneAttribute","",""],[17,"NoImplicitFloatAttribute","",""],[17,"NakedAttribute","",""],[17,"InlineHintAttribute","",""],[17,"StackAttribute","",""],[17,"ReturnsTwiceAttribute","",""],[17,"UWTableAttribute","",""],[17,"NonLazyBindAttribute","",""],[4,"OtherAttribute","",""],[13,"SanitizeAddressAttribute","","",363],[13,"MinSizeAttribute","","",363],[13,"NoDuplicateAttribute","","",363],[13,"StackProtectStrongAttribute","","",363],[13,"SanitizeThreadAttribute","","",363],[13,"SanitizeMemoryAttribute","","",363],[13,"NoBuiltinAttribute","","",363],[13,"ReturnedAttribute","","",363],[13,"ColdAttribute","","",363],[13,"BuiltinAttribute","","",363],[13,"OptimizeNoneAttribute","","",363],[13,"InAllocaAttribute","","",363],[13,"NonNullAttribute","","",363],[4,"SpecialAttribute","",""],[13,"DereferenceableAttribute","","",364],[4,"AttributeSet","",""],[13,"ReturnIndex","","",441],[13,"FunctionIndex","","",441],[8,"AttrHelper","",""],[10,"apply_llfn","","",442],[10,"apply_callsite","","",442],[3,"AttrBuilder","",""],[4,"IntPredicate","",""],[13,"IntEQ","","",443],[13,"IntNE","","",443],[13,"IntUGT","","",443],[13,"IntUGE","","",443],[13,"IntULT","","",443],[13,"IntULE","","",443],[13,"IntSGT","","",443],[13,"IntSGE","","",443],[13,"IntSLT","","",443],[13,"IntSLE","","",443],[4,"RealPredicate","",""],[13,"RealPredicateFalse","","",444],[13,"RealOEQ","","",444],[13,"RealOGT","","",444],[13,"RealOGE","","",444],[13,"RealOLT","","",444],[13,"RealOLE","","",444],[13,"RealONE","","",444],[13,"RealORD","","",444],[13,"RealUNO","","",444],[13,"RealUEQ","","",444],[13,"RealUGT","","",444],[13,"RealUGE","","",444],[13,"RealULT","","",444],[13,"RealULE","","",444],[13,"RealUNE","","",444],[13,"RealPredicateTrue","","",444],[4,"TypeKind","",""],[13,"Void","","",366],[13,"Half","","",366],[13,"Float","","",366],[13,"Double","","",366],[13,"X86_FP80","","",366],[13,"FP128","","",366],[13,"PPC_FP128","","",366],[13,"Label","","",366],[13,"Integer","","",366],[13,"Function","","",366],[13,"Struct","","",366],[13,"Array","","",366],[13,"Pointer","","",366],[13,"Vector","","",366],[13,"Metadata","","",366],[13,"X86_MMX","","",366],[4,"AtomicBinOp","",""],[13,"AtomicXchg","","",445],[13,"AtomicAdd","","",445],[13,"AtomicSub","","",445],[13,"AtomicAnd","","",445],[13,"AtomicNand","","",445],[13,"AtomicOr","","",445],[13,"AtomicXor","","",445],[13,"AtomicMax","","",445],[13,"AtomicMin","","",445],[13,"AtomicUMax","","",445],[13,"AtomicUMin","","",445],[4,"AtomicOrdering","",""],[13,"NotAtomic","","",446],[13,"Unordered","","",446],[13,"Monotonic","","",446],[13,"Acquire","","",446],[13,"Release","","",446],[13,"AcquireRelease","","",446],[13,"SequentiallyConsistent","","",446],[4,"FileType","",""],[13,"AssemblyFileType","","",447],[13,"ObjectFileType","","",447],[4,"MetadataType","",""],[13,"MD_dbg","","",448],[13,"MD_tbaa","","",448],[13,"MD_prof","","",448],[13,"MD_fpmath","","",448],[13,"MD_range","","",448],[13,"MD_tbaa_struct","","",448],[13,"MD_invariant_load","","",448],[13,"MD_alias_scope","","",448],[13,"MD_noalias","","",448],[13,"MD_nontemporal","","",448],[13,"MD_mem_parallel_loop_access","","",448],[13,"MD_nonnull","","",448],[4,"AsmDialect","",""],[13,"AD_ATT","","",449],[13,"AD_Intel","","",449],[4,"CodeGenOptLevel","",""],[13,"CodeGenLevelNone","","",367],[13,"CodeGenLevelLess","","",367],[13,"CodeGenLevelDefault","","",367],[13,"CodeGenLevelAggressive","","",367],[4,"RelocMode","",""],[13,"RelocDefault","","",368],[13,"RelocStatic","","",368],[13,"RelocPIC","","",368],[13,"RelocDynamicNoPic","","",368],[4,"CodeGenModel","",""],[13,"CodeModelDefault","","",450],[13,"CodeModelJITDefault","","",450],[13,"CodeModelSmall","","",450],[13,"CodeModelKernel","","",450],[13,"CodeModelMedium","","",450],[13,"CodeModelLarge","","",450],[4,"DiagnosticKind","",""],[13,"DK_InlineAsm","","",451],[13,"DK_StackSize","","",451],[13,"DK_DebugMetadataVersion","","",451],[13,"DK_SampleProfile","","",451],[13,"DK_OptimizationRemark","","",451],[13,"DK_OptimizationRemarkMissed","","",451],[13,"DK_OptimizationRemarkAnalysis","","",451],[13,"DK_OptimizationFailure","","",451],[4,"Module_opaque","",""],[6,"ModuleRef","",""],[4,"Context_opaque","",""],[6,"ContextRef","",""],[4,"Type_opaque","",""],[6,"TypeRef","",""],[4,"Value_opaque","",""],[6,"ValueRef","",""],[4,"Metadata_opaque","",""],[6,"MetadataRef","",""],[4,"BasicBlock_opaque","",""],[6,"BasicBlockRef","",""],[4,"Builder_opaque","",""],[6,"BuilderRef","",""],[4,"ExecutionEngine_opaque","",""],[6,"ExecutionEngineRef","",""],[4,"RustJITMemoryManager_opaque","",""],[6,"RustJITMemoryManagerRef","",""],[4,"MemoryBuffer_opaque","",""],[6,"MemoryBufferRef","",""],[4,"PassManager_opaque","",""],[6,"PassManagerRef","",""],[4,"PassManagerBuilder_opaque","",""],[6,"PassManagerBuilderRef","",""],[4,"Use_opaque","",""],[6,"UseRef","",""],[4,"TargetData_opaque","",""],[6,"TargetDataRef","",""],[4,"ObjectFile_opaque","",""],[6,"ObjectFileRef","",""],[4,"SectionIterator_opaque","",""],[6,"SectionIteratorRef","",""],[4,"Pass_opaque","",""],[6,"PassRef","",""],[4,"TargetMachine_opaque","",""],[6,"TargetMachineRef","",""],[4,"Archive_opaque","",""],[6,"ArchiveRef","",""],[4,"Twine_opaque","",""],[6,"TwineRef","",""],[4,"DiagnosticInfo_opaque","",""],[6,"DiagnosticInfoRef","",""],[4,"DebugLoc_opaque","",""],[6,"DebugLocRef","",""],[4,"SMDiagnostic_opaque","",""],[6,"SMDiagnosticRef","",""],[6,"DiagnosticHandler","",""],[6,"InlineAsmDiagHandler","",""],[0,"debuginfo","",""],[4,"DIBuilder_opaque","rustc_trans::lib::llvm::debuginfo",""],[6,"DIBuilderRef","",""],[6,"DIDescriptor","",""],[6,"DIScope","",""],[6,"DILocation","",""],[6,"DIFile","",""],[6,"DILexicalBlock","",""],[6,"DISubprogram","",""],[6,"DINameSpace","",""],[6,"DIType","",""],[6,"DIBasicType","",""],[6,"DIDerivedType","",""],[6,"DICompositeType","",""],[6,"DIVariable","",""],[6,"DIGlobalVariable","",""],[6,"DIArray","",""],[6,"DISubrange","",""],[6,"DIEnumerator","",""],[6,"DITemplateTypeParameter","",""],[4,"DIDescriptorFlags","",""],[13,"FlagPrivate","","",452],[13,"FlagProtected","","",452],[13,"FlagFwdDecl","","",452],[13,"FlagAppleBlock","","",452],[13,"FlagBlockByrefStruct","","",452],[13,"FlagVirtual","","",452],[13,"FlagArtificial","","",452],[13,"FlagExplicit","","",452],[13,"FlagPrototyped","","",452],[13,"FlagObjcClassComplete","","",452],[13,"FlagObjectPointer","","",452],[13,"FlagVector","","",452],[13,"FlagStaticMember","","",452],[13,"FlagIndirectVariable","","",452],[13,"FlagLValueReference","","",452],[13,"FlagRValueReference","","",452],[5,"LLVMContextCreate","rustc_trans::lib::llvm",""],[5,"LLVMContextDispose","",""],[5,"LLVMGetMDKindIDInContext","",""],[5,"LLVMModuleCreateWithNameInContext","",""],[5,"LLVMGetModuleContext","",""],[5,"LLVMDisposeModule","",""],[5,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout."],[5,"LLVMSetDataLayout","",""],[5,"LLVMGetTarget","","Target triple. See Module::getTargetTriple."],[5,"LLVMSetTarget","",""],[5,"LLVMDumpModule","","See Module::dump."],[5,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm."],[5,"LLVMGetTypeKind","","See llvm::LLVMTypeKind::getTypeID."],[5,"LLVMGetTypeContext","","See llvm::LLVMType::getContext."],[5,"LLVMInt1TypeInContext","",""],[5,"LLVMInt8TypeInContext","",""],[5,"LLVMInt16TypeInContext","",""],[5,"LLVMInt32TypeInContext","",""],[5,"LLVMInt64TypeInContext","",""],[5,"LLVMIntTypeInContext","",""],[5,"LLVMGetIntTypeWidth","",""],[5,"LLVMFloatTypeInContext","",""],[5,"LLVMDoubleTypeInContext","",""],[5,"LLVMX86FP80TypeInContext","",""],[5,"LLVMFP128TypeInContext","",""],[5,"LLVMPPCFP128TypeInContext","",""],[5,"LLVMFunctionType","",""],[5,"LLVMIsFunctionVarArg","",""],[5,"LLVMGetReturnType","",""],[5,"LLVMCountParamTypes","",""],[5,"LLVMGetParamTypes","",""],[5,"LLVMStructTypeInContext","",""],[5,"LLVMCountStructElementTypes","",""],[5,"LLVMGetStructElementTypes","",""],[5,"LLVMIsPackedStruct","",""],[5,"LLVMRustArrayType","",""],[5,"LLVMPointerType","",""],[5,"LLVMVectorType","",""],[5,"LLVMGetElementType","",""],[5,"LLVMGetArrayLength","",""],[5,"LLVMGetPointerAddressSpace","",""],[5,"LLVMGetPointerToGlobal","",""],[5,"LLVMGetVectorSize","",""],[5,"LLVMVoidTypeInContext","",""],[5,"LLVMLabelTypeInContext","",""],[5,"LLVMMetadataTypeInContext","",""],[5,"LLVMTypeOf","",""],[5,"LLVMGetValueName","",""],[5,"LLVMSetValueName","",""],[5,"LLVMDumpValue","",""],[5,"LLVMReplaceAllUsesWith","",""],[5,"LLVMHasMetadata","",""],[5,"LLVMGetMetadata","",""],[5,"LLVMSetMetadata","",""],[5,"LLVMGetFirstUse","",""],[5,"LLVMGetNextUse","",""],[5,"LLVMGetUser","",""],[5,"LLVMGetUsedValue","",""],[5,"LLVMGetNumOperands","",""],[5,"LLVMGetOperand","",""],[5,"LLVMSetOperand","",""],[5,"LLVMConstNull","",""],[5,"LLVMConstAllOnes","",""],[5,"LLVMConstICmp","",""],[5,"LLVMConstFCmp","",""],[5,"LLVMGetUndef","",""],[5,"LLVMIsConstant","",""],[5,"LLVMIsNull","",""],[5,"LLVMIsUndef","",""],[5,"LLVMConstPointerNull","",""],[5,"LLVMMDStringInContext","",""],[5,"LLVMMDNodeInContext","",""],[5,"LLVMAddNamedMetadataOperand","",""],[5,"LLVMConstInt","",""],[5,"LLVMConstIntOfString","",""],[5,"LLVMConstIntOfStringAndSize","",""],[5,"LLVMConstReal","",""],[5,"LLVMConstRealOfString","",""],[5,"LLVMConstRealOfStringAndSize","",""],[5,"LLVMConstIntGetZExtValue","",""],[5,"LLVMConstIntGetSExtValue","",""],[5,"LLVMConstStringInContext","",""],[5,"LLVMConstStructInContext","",""],[5,"LLVMConstArray","",""],[5,"LLVMConstVector","",""],[5,"LLVMAlignOf","",""],[5,"LLVMSizeOf","",""],[5,"LLVMConstNeg","",""],[5,"LLVMConstNSWNeg","",""],[5,"LLVMConstNUWNeg","",""],[5,"LLVMConstFNeg","",""],[5,"LLVMConstNot","",""],[5,"LLVMConstAdd","",""],[5,"LLVMConstNSWAdd","",""],[5,"LLVMConstNUWAdd","",""],[5,"LLVMConstFAdd","",""],[5,"LLVMConstSub","",""],[5,"LLVMConstNSWSub","",""],[5,"LLVMConstNUWSub","",""],[5,"LLVMConstFSub","",""],[5,"LLVMConstMul","",""],[5,"LLVMConstNSWMul","",""],[5,"LLVMConstNUWMul","",""],[5,"LLVMConstFMul","",""],[5,"LLVMConstUDiv","",""],[5,"LLVMConstSDiv","",""],[5,"LLVMConstExactSDiv","",""],[5,"LLVMConstFDiv","",""],[5,"LLVMConstURem","",""],[5,"LLVMConstSRem","",""],[5,"LLVMConstFRem","",""],[5,"LLVMConstAnd","",""],[5,"LLVMConstOr","",""],[5,"LLVMConstXor","",""],[5,"LLVMConstShl","",""],[5,"LLVMConstLShr","",""],[5,"LLVMConstAShr","",""],[5,"LLVMConstGEP","",""],[5,"LLVMConstInBoundsGEP","",""],[5,"LLVMConstTrunc","",""],[5,"LLVMConstSExt","",""],[5,"LLVMConstZExt","",""],[5,"LLVMConstFPTrunc","",""],[5,"LLVMConstFPExt","",""],[5,"LLVMConstUIToFP","",""],[5,"LLVMConstSIToFP","",""],[5,"LLVMConstFPToUI","",""],[5,"LLVMConstFPToSI","",""],[5,"LLVMConstPtrToInt","",""],[5,"LLVMConstIntToPtr","",""],[5,"LLVMConstBitCast","",""],[5,"LLVMConstZExtOrBitCast","",""],[5,"LLVMConstSExtOrBitCast","",""],[5,"LLVMConstTruncOrBitCast","",""],[5,"LLVMConstPointerCast","",""],[5,"LLVMConstIntCast","",""],[5,"LLVMConstFPCast","",""],[5,"LLVMConstSelect","",""],[5,"LLVMConstExtractElement","",""],[5,"LLVMConstInsertElement","",""],[5,"LLVMConstShuffleVector","",""],[5,"LLVMConstExtractValue","",""],[5,"LLVMConstInsertValue","",""],[5,"LLVMConstInlineAsm","",""],[5,"LLVMBlockAddress","",""],[5,"LLVMGetGlobalParent","",""],[5,"LLVMIsDeclaration","",""],[5,"LLVMGetLinkage","",""],[5,"LLVMSetLinkage","",""],[5,"LLVMGetSection","",""],[5,"LLVMSetSection","",""],[5,"LLVMGetVisibility","",""],[5,"LLVMSetVisibility","",""],[5,"LLVMGetAlignment","",""],[5,"LLVMSetAlignment","",""],[5,"LLVMIsAGlobalVariable","",""],[5,"LLVMAddGlobal","",""],[5,"LLVMAddGlobalInAddressSpace","",""],[5,"LLVMGetNamedGlobal","",""],[5,"LLVMGetFirstGlobal","",""],[5,"LLVMGetLastGlobal","",""],[5,"LLVMGetNextGlobal","",""],[5,"LLVMGetPreviousGlobal","",""],[5,"LLVMDeleteGlobal","",""],[5,"LLVMGetInitializer","",""],[5,"LLVMSetInitializer","",""],[5,"LLVMIsThreadLocal","",""],[5,"LLVMSetThreadLocal","",""],[5,"LLVMIsGlobalConstant","",""],[5,"LLVMSetGlobalConstant","",""],[5,"LLVMAddAlias","",""],[5,"LLVMAddFunction","",""],[5,"LLVMGetNamedFunction","",""],[5,"LLVMGetFirstFunction","",""],[5,"LLVMGetLastFunction","",""],[5,"LLVMGetNextFunction","",""],[5,"LLVMGetPreviousFunction","",""],[5,"LLVMDeleteFunction","",""],[5,"LLVMGetOrInsertFunction","",""],[5,"LLVMGetIntrinsicID","",""],[5,"LLVMGetFunctionCallConv","",""],[5,"LLVMSetFunctionCallConv","",""],[5,"LLVMGetGC","",""],[5,"LLVMSetGC","",""],[5,"LLVMAddDereferenceableAttr","",""],[5,"LLVMAddFunctionAttribute","",""],[5,"LLVMAddFunctionAttrString","",""],[5,"LLVMRemoveFunctionAttrString","",""],[5,"LLVMGetFunctionAttr","",""],[5,"LLVMCountParams","",""],[5,"LLVMGetParams","",""],[5,"LLVMGetParam","",""],[5,"LLVMGetParamParent","",""],[5,"LLVMGetFirstParam","",""],[5,"LLVMGetLastParam","",""],[5,"LLVMGetNextParam","",""],[5,"LLVMGetPreviousParam","",""],[5,"LLVMAddAttribute","",""],[5,"LLVMRemoveAttribute","",""],[5,"LLVMGetAttribute","",""],[5,"LLVMSetParamAlignment","",""],[5,"LLVMBasicBlockAsValue","",""],[5,"LLVMValueIsBasicBlock","",""],[5,"LLVMValueAsBasicBlock","",""],[5,"LLVMGetBasicBlockParent","",""],[5,"LLVMCountBasicBlocks","",""],[5,"LLVMGetBasicBlocks","",""],[5,"LLVMGetFirstBasicBlock","",""],[5,"LLVMGetLastBasicBlock","",""],[5,"LLVMGetNextBasicBlock","",""],[5,"LLVMGetPreviousBasicBlock","",""],[5,"LLVMGetEntryBasicBlock","",""],[5,"LLVMAppendBasicBlockInContext","",""],[5,"LLVMInsertBasicBlockInContext","",""],[5,"LLVMDeleteBasicBlock","",""],[5,"LLVMMoveBasicBlockAfter","",""],[5,"LLVMMoveBasicBlockBefore","",""],[5,"LLVMGetInstructionParent","",""],[5,"LLVMGetFirstInstruction","",""],[5,"LLVMGetLastInstruction","",""],[5,"LLVMGetNextInstruction","",""],[5,"LLVMGetPreviousInstruction","",""],[5,"LLVMInstructionEraseFromParent","",""],[5,"LLVMSetInstructionCallConv","",""],[5,"LLVMGetInstructionCallConv","",""],[5,"LLVMAddInstrAttribute","",""],[5,"LLVMRemoveInstrAttribute","",""],[5,"LLVMSetInstrParamAlignment","",""],[5,"LLVMAddCallSiteAttribute","",""],[5,"LLVMAddDereferenceableCallSiteAttr","",""],[5,"LLVMIsTailCall","",""],[5,"LLVMSetTailCall","",""],[5,"LLVMGetVolatile","",""],[5,"LLVMSetVolatile","",""],[5,"LLVMAddIncoming","",""],[5,"LLVMCountIncoming","",""],[5,"LLVMGetIncomingValue","",""],[5,"LLVMGetIncomingBlock","",""],[5,"LLVMCreateBuilderInContext","",""],[5,"LLVMPositionBuilder","",""],[5,"LLVMPositionBuilderBefore","",""],[5,"LLVMPositionBuilderAtEnd","",""],[5,"LLVMGetInsertBlock","",""],[5,"LLVMClearInsertionPosition","",""],[5,"LLVMInsertIntoBuilder","",""],[5,"LLVMInsertIntoBuilderWithName","",""],[5,"LLVMDisposeBuilder","",""],[5,"LLVMRustCreateJITMemoryManager","",""],[5,"LLVMBuildExecutionEngine","",""],[5,"LLVMDisposeExecutionEngine","",""],[5,"LLVMExecutionEngineFinalizeObject","",""],[5,"LLVMRustLoadDynamicLibrary","",""],[5,"LLVMExecutionEngineAddModule","",""],[5,"LLVMExecutionEngineRemoveModule","",""],[5,"LLVMSetCurrentDebugLocation","",""],[5,"LLVMGetCurrentDebugLocation","",""],[5,"LLVMSetInstDebugLocation","",""],[5,"LLVMBuildRetVoid","",""],[5,"LLVMBuildRet","",""],[5,"LLVMBuildAggregateRet","",""],[5,"LLVMBuildBr","",""],[5,"LLVMBuildCondBr","",""],[5,"LLVMBuildSwitch","",""],[5,"LLVMBuildIndirectBr","",""],[5,"LLVMBuildInvoke","",""],[5,"LLVMBuildLandingPad","",""],[5,"LLVMBuildResume","",""],[5,"LLVMBuildUnreachable","",""],[5,"LLVMAddCase","",""],[5,"LLVMAddDestination","",""],[5,"LLVMAddClause","",""],[5,"LLVMSetCleanup","",""],[5,"LLVMBuildAdd","",""],[5,"LLVMBuildNSWAdd","",""],[5,"LLVMBuildNUWAdd","",""],[5,"LLVMBuildFAdd","",""],[5,"LLVMBuildSub","",""],[5,"LLVMBuildNSWSub","",""],[5,"LLVMBuildNUWSub","",""],[5,"LLVMBuildFSub","",""],[5,"LLVMBuildMul","",""],[5,"LLVMBuildNSWMul","",""],[5,"LLVMBuildNUWMul","",""],[5,"LLVMBuildFMul","",""],[5,"LLVMBuildUDiv","",""],[5,"LLVMBuildSDiv","",""],[5,"LLVMBuildExactSDiv","",""],[5,"LLVMBuildFDiv","",""],[5,"LLVMBuildURem","",""],[5,"LLVMBuildSRem","",""],[5,"LLVMBuildFRem","",""],[5,"LLVMBuildShl","",""],[5,"LLVMBuildLShr","",""],[5,"LLVMBuildAShr","",""],[5,"LLVMBuildAnd","",""],[5,"LLVMBuildOr","",""],[5,"LLVMBuildXor","",""],[5,"LLVMBuildBinOp","",""],[5,"LLVMBuildNeg","",""],[5,"LLVMBuildNSWNeg","",""],[5,"LLVMBuildNUWNeg","",""],[5,"LLVMBuildFNeg","",""],[5,"LLVMBuildNot","",""],[5,"LLVMBuildMalloc","",""],[5,"LLVMBuildArrayMalloc","",""],[5,"LLVMBuildAlloca","",""],[5,"LLVMBuildArrayAlloca","",""],[5,"LLVMBuildFree","",""],[5,"LLVMBuildLoad","",""],[5,"LLVMBuildStore","",""],[5,"LLVMBuildGEP","",""],[5,"LLVMBuildInBoundsGEP","",""],[5,"LLVMBuildStructGEP","",""],[5,"LLVMBuildGlobalString","",""],[5,"LLVMBuildGlobalStringPtr","",""],[5,"LLVMBuildTrunc","",""],[5,"LLVMBuildZExt","",""],[5,"LLVMBuildSExt","",""],[5,"LLVMBuildFPToUI","",""],[5,"LLVMBuildFPToSI","",""],[5,"LLVMBuildUIToFP","",""],[5,"LLVMBuildSIToFP","",""],[5,"LLVMBuildFPTrunc","",""],[5,"LLVMBuildFPExt","",""],[5,"LLVMBuildPtrToInt","",""],[5,"LLVMBuildIntToPtr","",""],[5,"LLVMBuildBitCast","",""],[5,"LLVMBuildZExtOrBitCast","",""],[5,"LLVMBuildSExtOrBitCast","",""],[5,"LLVMBuildTruncOrBitCast","",""],[5,"LLVMBuildCast","",""],[5,"LLVMBuildPointerCast","",""],[5,"LLVMBuildIntCast","",""],[5,"LLVMBuildFPCast","",""],[5,"LLVMBuildICmp","",""],[5,"LLVMBuildFCmp","",""],[5,"LLVMBuildPhi","",""],[5,"LLVMBuildCall","",""],[5,"LLVMBuildSelect","",""],[5,"LLVMBuildVAArg","",""],[5,"LLVMBuildExtractElement","",""],[5,"LLVMBuildInsertElement","",""],[5,"LLVMBuildShuffleVector","",""],[5,"LLVMBuildExtractValue","",""],[5,"LLVMBuildInsertValue","",""],[5,"LLVMBuildIsNull","",""],[5,"LLVMBuildIsNotNull","",""],[5,"LLVMBuildPtrDiff","",""],[5,"LLVMBuildAtomicLoad","",""],[5,"LLVMBuildAtomicStore","",""],[5,"LLVMBuildAtomicCmpXchg","",""],[5,"LLVMBuildAtomicRMW","",""],[5,"LLVMBuildAtomicFence","",""],[5,"LLVMIsATerminatorInst","",""],[5,"LLVMIsAStoreInst","",""],[5,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success."],[5,"LLVMCreateTargetData","","Creates target data from a target layout string."],[5,"LLVMAddTargetData","","Adds the target data to the given pass manager. The pass manager\nreferences the target data only weakly."],[5,"LLVMStoreSizeOfType","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMABISizeOfType","","Distance between successive elements in an array of T. Includes ABI padding."],[5,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type."],[5,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type."],[5,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a\ntarget."],[5,"LLVMCallFrameAlignmentOfType","","Returns the minimum alignment of a type when part of a call frame."],[5,"LLVMDisposeTargetData","","Disposes target data."],[5,"LLVMCreatePassManager","","Creates a pass manager."],[5,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager"],[5,"LLVMDisposePassManager","","Disposes a pass manager."],[5,"LLVMRunPassManager","","Runs a pass manager on a module."],[5,"LLVMRunFunctionPassManager","","Runs the function passes on the provided function."],[5,"LLVMInitializeFunctionPassManager","","Initializes all the function passes scheduled in the manager"],[5,"LLVMFinalizeFunctionPassManager","","Finalizes all the function passes scheduled in the manager"],[5,"LLVMInitializePasses","",""],[5,"LLVMAddVerifierPass","","Adds a verification pass."],[5,"LLVMAddGlobalOptimizerPass","",""],[5,"LLVMAddIPSCCPPass","",""],[5,"LLVMAddDeadArgEliminationPass","",""],[5,"LLVMAddInstructionCombiningPass","",""],[5,"LLVMAddCFGSimplificationPass","",""],[5,"LLVMAddFunctionInliningPass","",""],[5,"LLVMAddFunctionAttrsPass","",""],[5,"LLVMAddScalarReplAggregatesPass","",""],[5,"LLVMAddScalarReplAggregatesPassSSA","",""],[5,"LLVMAddJumpThreadingPass","",""],[5,"LLVMAddConstantPropagationPass","",""],[5,"LLVMAddReassociatePass","",""],[5,"LLVMAddLoopRotatePass","",""],[5,"LLVMAddLICMPass","",""],[5,"LLVMAddLoopUnswitchPass","",""],[5,"LLVMAddLoopDeletionPass","",""],[5,"LLVMAddLoopUnrollPass","",""],[5,"LLVMAddGVNPass","",""],[5,"LLVMAddMemCpyOptPass","",""],[5,"LLVMAddSCCPPass","",""],[5,"LLVMAddDeadStoreEliminationPass","",""],[5,"LLVMAddStripDeadPrototypesPass","",""],[5,"LLVMAddConstantMergePass","",""],[5,"LLVMAddArgumentPromotionPass","",""],[5,"LLVMAddTailCallEliminationPass","",""],[5,"LLVMAddIndVarSimplifyPass","",""],[5,"LLVMAddAggressiveDCEPass","",""],[5,"LLVMAddGlobalDCEPass","",""],[5,"LLVMAddCorrelatedValuePropagationPass","",""],[5,"LLVMAddPruneEHPass","",""],[5,"LLVMAddSimplifyLibCallsPass","",""],[5,"LLVMAddLoopIdiomPass","",""],[5,"LLVMAddEarlyCSEPass","",""],[5,"LLVMAddTypeBasedAliasAnalysisPass","",""],[5,"LLVMAddBasicAliasAnalysisPass","",""],[5,"LLVMPassManagerBuilderCreate","",""],[5,"LLVMPassManagerBuilderDispose","",""],[5,"LLVMPassManagerBuilderSetOptLevel","",""],[5,"LLVMPassManagerBuilderSetSizeLevel","",""],[5,"LLVMPassManagerBuilderSetDisableUnitAtATime","",""],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","",""],[5,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls","",""],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","",""],[5,"LLVMPassManagerBuilderPopulateModulePassManager","",""],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","",""],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","",""],[5,"LLVMDisposeMemoryBuffer","","Destroys a memory buffer."],[5,"LLVMCreateObjectFile","","Opens an object file."],[5,"LLVMDisposeObjectFile","","Closes an object file."],[5,"LLVMGetSections","","Enumerates the sections in an object file."],[5,"LLVMDisposeSectionIterator","","Destroys a section iterator."],[5,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section\nlist:"],[5,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section."],[5,"LLVMGetSectionSize","","Returns the current section size."],[5,"LLVMGetSectionContents","","Returns the current section contents as a string buffer."],[5,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use\nLLVMDisposeMemoryBuffer() to get rid of it."],[5,"LLVMCreateMemoryBufferWithMemoryRange","","Borrows the contents of the memory buffer (doesn't copy it)"],[5,"LLVMCreateMemoryBufferWithMemoryRangeCopy","",""],[5,"LLVMIsMultithreaded","",""],[5,"LLVMStartMultithreaded","",""],[5,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust* call."],[5,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren't picking them up."],[5,"LLVMStructCreateNamed","",""],[5,"LLVMStructSetBody","",""],[5,"LLVMConstNamedStruct","",""],[5,"LLVMSetDebug","","Enables LLVM debug output."],[5,"LLVMInlineAsm","","Prepares inline assembly."],[7,"LLVMRustDebugMetadataVersion","",""],[5,"LLVMRustAddModuleFlag","",""],[5,"LLVMDIBuilderCreate","",""],[5,"LLVMDIBuilderDispose","",""],[5,"LLVMDIBuilderFinalize","",""],[5,"LLVMDIBuilderCreateCompileUnit","",""],[5,"LLVMDIBuilderCreateFile","",""],[5,"LLVMDIBuilderCreateSubroutineType","",""],[5,"LLVMDIBuilderCreateFunction","",""],[5,"LLVMDIBuilderCreateBasicType","",""],[5,"LLVMDIBuilderCreatePointerType","",""],[5,"LLVMDIBuilderCreateStructType","",""],[5,"LLVMDIBuilderCreateMemberType","",""],[5,"LLVMDIBuilderCreateLexicalBlock","",""],[5,"LLVMDIBuilderCreateStaticVariable","",""],[5,"LLVMDIBuilderCreateVariable","",""],[5,"LLVMDIBuilderCreateArrayType","",""],[5,"LLVMDIBuilderCreateVectorType","",""],[5,"LLVMDIBuilderGetOrCreateSubrange","",""],[5,"LLVMDIBuilderGetOrCreateArray","",""],[5,"LLVMDIBuilderInsertDeclareAtEnd","",""],[5,"LLVMDIBuilderInsertDeclareBefore","",""],[5,"LLVMDIBuilderCreateEnumerator","",""],[5,"LLVMDIBuilderCreateEnumerationType","",""],[5,"LLVMDIBuilderCreateUnionType","",""],[5,"LLVMSetUnnamedAddr","",""],[5,"LLVMDIBuilderCreateTemplateTypeParameter","",""],[5,"LLVMDIBuilderCreateOpDeref","",""],[5,"LLVMDIBuilderCreateOpPlus","",""],[5,"LLVMDIBuilderCreateNameSpace","",""],[5,"LLVMDIBuilderCreateDebugLocation","",""],[5,"LLVMDICompositeTypeSetTypeArray","",""],[5,"LLVMWriteTypeToString","",""],[5,"LLVMWriteValueToString","",""],[5,"LLVMIsAArgument","",""],[5,"LLVMIsAAllocaInst","",""],[5,"LLVMInitializeX86TargetInfo","",""],[5,"LLVMInitializeX86Target","",""],[5,"LLVMInitializeX86TargetMC","",""],[5,"LLVMInitializeX86AsmPrinter","",""],[5,"LLVMInitializeX86AsmParser","",""],[5,"LLVMInitializeARMTargetInfo","",""],[5,"LLVMInitializeARMTarget","",""],[5,"LLVMInitializeARMTargetMC","",""],[5,"LLVMInitializeARMAsmPrinter","",""],[5,"LLVMInitializeARMAsmParser","",""],[5,"LLVMInitializeAArch64TargetInfo","",""],[5,"LLVMInitializeAArch64Target","",""],[5,"LLVMInitializeAArch64TargetMC","",""],[5,"LLVMInitializeAArch64AsmPrinter","",""],[5,"LLVMInitializeAArch64AsmParser","",""],[5,"LLVMInitializeMipsTargetInfo","",""],[5,"LLVMInitializeMipsTarget","",""],[5,"LLVMInitializeMipsTargetMC","",""],[5,"LLVMInitializeMipsAsmPrinter","",""],[5,"LLVMInitializeMipsAsmParser","",""],[5,"LLVMInitializePowerPCTargetInfo","",""],[5,"LLVMInitializePowerPCTarget","",""],[5,"LLVMInitializePowerPCTargetMC","",""],[5,"LLVMInitializePowerPCAsmPrinter","",""],[5,"LLVMInitializePowerPCAsmParser","",""],[5,"LLVMRustAddPass","",""],[5,"LLVMRustCreateTargetMachine","",""],[5,"LLVMRustDisposeTargetMachine","",""],[5,"LLVMRustAddAnalysisPasses","",""],[5,"LLVMRustAddBuilderLibraryInfo","",""],[5,"LLVMRustAddLibraryInfo","",""],[5,"LLVMRustRunFunctionPassManager","",""],[5,"LLVMRustWriteOutputFile","",""],[5,"LLVMRustPrintModule","",""],[5,"LLVMRustSetLLVMOptions","",""],[5,"LLVMRustPrintPasses","",""],[5,"LLVMRustSetNormalizedTarget","",""],[5,"LLVMRustAddAlwaysInlinePass","",""],[5,"LLVMRustLinkInExternalBitcode","",""],[5,"LLVMRustRunRestrictionPass","",""],[5,"LLVMRustMarkAllFunctionsNounwind","",""],[5,"LLVMRustOpenArchive","",""],[5,"LLVMRustArchiveReadSection","",""],[5,"LLVMRustDestroyArchive","",""],[5,"LLVMRustSetDLLExportStorageClass","",""],[5,"LLVMVersionMajor","",""],[5,"LLVMVersionMinor","",""],[5,"LLVMRustGetSectionName","",""],[5,"LLVMWriteTwineToString","",""],[5,"LLVMContextSetDiagnosticHandler","",""],[5,"LLVMUnpackOptimizationDiagnostic","",""],[5,"LLVMUnpackInlineAsmDiagnostic","",""],[5,"LLVMWriteDiagnosticInfoToString","",""],[5,"LLVMGetDiagInfoSeverity","",""],[5,"LLVMGetDiagInfoKind","",""],[5,"LLVMWriteDebugLocToString","",""],[5,"LLVMSetInlineAsmDiagnosticHandler","",""],[5,"LLVMWriteSMDiagnosticToString","",""],[5,"SetInstructionCallConv","",""],[5,"SetFunctionCallConv","",""],[5,"SetLinkage","",""],[5,"SetUnnamedAddr","",""],[5,"set_thread_local","",""],[5,"ConstICmp","",""],[5,"ConstFCmp","",""],[5,"SetFunctionAttribute","",""],[3,"TargetData","",""],[12,"lltd","","",369],[5,"mk_target_data","",""],[3,"ObjectFile","",""],[12,"llof","","",370],[3,"SectionIter","",""],[12,"llsi","","",371],[5,"mk_section_iter","",""],[5,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun."],[4,"RustString_opaque","",""],[6,"RustStringRef","",""],[5,"rust_llvm_string_write_impl","","Appending to a Rust string -- used by raw_rust_string_ostream."],[5,"build_string","",""],[5,"twine_to_string","",""],[5,"debug_loc_to_string","",""]],"paths":[[3,"Svh"],[4,"SawAbiComponent"],[4,"SawExprComponent"],[4,"SawStmtComponent"],[3,"Ident"],[3,"Name"],[3,"StrictVersionHashVisitor"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"DecodeContext"],[3,"DefId"],[4,"Option"],[3,"Span"],[3,"NestedItemsDropper"],[4,"Def"],[4,"Region"],[3,"FreeRegion"],[4,"CodeExtent"],[3,"DestructionScopeData"],[4,"BoundRegion"],[3,"Decoder"],[3,"Freevar"],[3,"UpvarBorrow"],[4,"UpvarCapture"],[4,"MethodOrigin"],[3,"EncodeContext"],[3,"Encoder"],[3,"SideTableEncodingIdVisitor"],[3,"Doc"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFG"],[3,"ConstQualif"],[4,"Mode"],[3,"CheckCrateVisitor"],[3,"CheckCrateVisitor"],[3,"CheckItemRecursionVisitor"],[4,"Context"],[3,"CheckLoopVisitor"],[3,"Matrix"],[4,"Constructor"],[4,"Usefulness"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[3,"RenamingRecorder"],[3,"MutationChecker"],[3,"AtBindingPatternVisitor"],[3,"RvalueContext"],[3,"RvalueContextDelegate"],[4,"const_val"],[3,"ConstEvalErr"],[4,"ErrKind"],[4,"EntryOrExit"],[3,"DataFlowContext"],[3,"Union"],[3,"Subtract"],[3,"MarkSymbolVisitor"],[3,"LifeSeeder"],[3,"DeadVisitor"],[3,"PathResolution"],[4,"MethodProvenance"],[4,"UnsafeContext"],[3,"EffectCheckVisitor"],[3,"EntryContext"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"TrackMatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"SimplifiedType"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"DepthFirstTraversal"],[3,"IntrinsicCheckingVisitor"],[3,"TransmuteRestriction"],[3,"Bivariate"],[3,"Rc"],[3,"TraitRef"],[3,"ProjectionPredicate"],[3,"FnSig"],[3,"CombineFields"],[3,"Generalizer"],[3,"Equate"],[3,"InferCtxt"],[3,"Binder"],[3,"Glb"],[3,"Lub"],[4,"Node"],[4,"Edge"],[3,"ConstraintGraph"],[4,"Constraint"],[4,"GenericKind"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[3,"SameRegions"],[3,"RegionSnapshot"],[3,"RegionVarBindings"],[4,"Classification"],[4,"Verify"],[4,"VarValue"],[3,"RegionAndOrigin"],[3,"OpportunisticTypeResolver"],[3,"FullTypeResolver"],[3,"TypeFreshener"],[3,"Sub"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"Delegate"],[4,"VarValue"],[3,"UnificationTable"],[3,"Delegate"],[3,"IntVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"fixup_err"],[4,"Result"],[4,"LangItem"],[3,"LanguageItems"],[3,"LanguageItemCollector"],[3,"Variable"],[3,"LiveNode"],[4,"LiveNodeKind"],[3,"IrMaps"],[3,"LocalInfo"],[4,"VarKind"],[3,"Liveness"],[3,"Users"],[4,"categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[3,"Expr"],[3,"Pat"],[3,"MemCategorizationContext"],[4,"ClosureKind"],[4,"LastPrivate"],[4,"PrivateDep"],[4,"ImportUse"],[3,"ReachableContext"],[3,"BlockRemainder"],[4,"InnermostDeclaringBlock"],[3,"DeclaringStatementContext"],[4,"InnermostEnclosingExpr"],[3,"Context"],[3,"RegionMaps"],[3,"RegionResolutionVisitor"],[4,"DefRegion"],[3,"LifetimeContext"],[4,"ScopeChain"],[3,"Annotator"],[3,"Index"],[3,"Checker"],[3,"Substs"],[4,"RegionSubsts"],[4,"ParamSpace"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"SubstFolder"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"MismatchedProjectionTypes"],[4,"ProjectionTyCandidate"],[3,"AssociatedTypeNormalizer"],[3,"Normalized"],[4,"ProjectionTyError"],[4,"MethodViolationCode"],[4,"ObjectSafetyViolation"],[3,"SelectionCache"],[4,"MethodMatchedData"],[4,"SelectionCandidate"],[4,"EvaluationResult"],[3,"SelectionContext"],[3,"TraitObligationStack"],[4,"MethodMatchResult"],[3,"Elaborator"],[3,"FilterToTraits"],[3,"VtableImplData"],[3,"VtableObjectData"],[3,"Obligation"],[4,"Vtable"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[4,"SelectionError"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[3,"field"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[3,"Method"],[3,"AssociatedType"],[3,"mt"],[3,"field_ty"],[3,"creader_cache_key"],[3,"ItemVariances"],[4,"Variance"],[4,"AutoAdjustment"],[4,"UnsizeKind"],[3,"AutoDerefRef"],[4,"AutoRef"],[3,"param_index"],[3,"MethodParam"],[3,"MethodObject"],[3,"MethodCallee"],[3,"MethodCall"],[4,"ExprAdjustment"],[4,"vtable_origin"],[3,"CtxtArenas"],[3,"TypeFlags"],[3,"ctxt"],[3,"TyS"],[3,"InternedTy"],[3,"BareFnTy"],[3,"ClosureTy"],[4,"FnOutput"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"UpvarId"],[4,"BorrowKind"],[4,"sty"],[3,"TyTrait"],[4,"terr_vstore_kind"],[3,"expected_found"],[4,"type_err"],[3,"ParamBounds"],[3,"ExistentialBounds"],[4,"BuiltinBound"],[3,"TyVid"],[3,"RegionVid"],[4,"InferTy"],[4,"UnconstrainedNumeric"],[4,"InferRegion"],[4,"ObjectLifetimeDefault"],[3,"TypeParameterDef"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[4,"Predicate"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionTy"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"ItemSubsts"],[3,"TypeContents"],[4,"Representability"],[3,"VariantInfo"],[4,"DtorKind"],[3,"ClosureUpvar"],[4,"ExplicitSelfCategory"],[3,"Vec"],[3,"Box"],[3,"OwnedSlice"],[3,"EnumSet"],[3,"BottomUpFolder"],[3,"RegionFolder"],[3,"RegionEraser"],[3,"TypeWalker"],[3,"Context"],[4,"astencode_tag"],[3,"LinkMeta"],[4,"DefIdSource"],[3,"entry"],[3,"EncodeVisitor"],[3,"ImplVisitor"],[4,"Family"],[4,"DefLike"],[3,"CrateDep"],[3,"CrateReader"],[4,"PMDSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"CrateSource"],[3,"CStore"],[3,"crate_metadata"],[4,"MetadataBlob"],[3,"Context"],[3,"ArchiveMetadata"],[3,"FileSearch"],[3,"MacroLoader"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[3,"Options"],[4,"UnstableFeatures"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"Registry"],[3,"RegistrarFinder"],[3,"Lint"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"Context"],[3,"GatherNodeLevels"],[3,"ErrorReported"],[3,"Indenter"],[3,"LoopQueryVisitor"],[3,"BlockQueryVisitor"],[3,"P"],[3,"TraitDef"],[4,"TraitItem"],[3,"Path"],[3,"Ty"],[3,"Item"],[3,"Lifetime"],[3,"Spanned"],[4,"ExplicitSelf_"],[4,"Visibility"],[4,"Abi"],[4,"Mutability"],[4,"IntTy"],[4,"UintTy"],[3,"HashMap"],[3,"FnvHasher"],[3,"SnapshotVec"],[3,"FixedBuffer64"],[3,"Sha256"],[3,"ArchiveRO"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"CallConv"],[4,"DiagnosticSeverity"],[3,"Attribute"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[3,"AttrBuilder"],[4,"TypeKind"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[3,"Config"],[3,"ctxt"],[4,"InlinedItemRef"],[3,"EncodeParams"],[3,"ImportedFileMap"],[3,"MethodInfo"],[4,"FoundAst"],[3,"Library"],[3,"CratePaths"],[4,"FileMatch"],[8,"vtable_decoder_helpers"],[3,"CFGEdgeData"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[3,"Export"],[8,"Delegate"],[3,"Node"],[8,"Combine"],[8,"Combineable"],[8,"ErrorReporting"],[8,"Resolvable"],[8,"LatticeDir"],[8,"UnifyKey"],[3,"Node"],[8,"SimplyUnifiable"],[8,"InferCtxtMethodsForSimplyUnifiableTypes"],[4,"deref_kind"],[8,"ast_node"],[8,"Typer"],[4,"InteriorSafety"],[4,"AliasableReason"],[3,"SeparateVecsPerParamSpace"],[8,"Subst"],[4,"OrphanCheckErr"],[3,"CrateAnalysis"],[3,"CommonTypes"],[8,"ToPolyTraitRef"],[8,"AsPredicate"],[8,"ClosureTyper"],[4,"ExprKind"],[4,"CopyImplementationError"],[8,"RegionEscape"],[8,"HasProjectionTypes"],[8,"ReferencesError"],[8,"TypeFoldable"],[8,"TypeFolder"],[8,"LintPass"],[3,"PluginRegistrar"],[8,"Repr"],[8,"UserString"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[8,"Digest"],[3,"TempDir"],[4,"Arch"],[3,"Target"],[3,"TargetOptions"],[3,"ArchiveConfig"],[3,"RPathConfig"],[3,"t"],[4,"OutputType"],[3,"ModuleTranslation"],[3,"CrateTranslation"],[3,"CrateContext"],[6,"ValueRef"],[3,"OptimizationDiagnostic"],[3,"InlineAsmDiagnostic"],[4,"Visibility"],[4,"Linkage"],[4,"AttributeSet"],[8,"AttrHelper"],[4,"IntPredicate"],[4,"RealPredicate"],[4,"AtomicBinOp"],[4,"AtomicOrdering"],[4,"FileType"],[4,"MetadataType"],[4,"AsmDialect"],[4,"CodeGenModel"],[4,"DiagnosticKind"],[4,"DIDescriptorFlags"]]};
searchIndex['rustc'] = {"items":[[0,"","rustc","The Rust compiler."],[0,"llvm","",""],[0,"archive_ro","rustc::llvm","A wrapper around LLVM's archive (.a) code"],[11,"open","rustc_llvm::archive_ro","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",0],[11,"read","","Reads a file in the archive",0],[11,"drop","","",0],[11,"describe","rustc_llvm::diagnostic","",1],[11,"unpack","","",2],[11,"eq","rustc_llvm","",3],[11,"ne","","",3],[11,"fmt","","",4],[11,"hash","","",5],[11,"cmp","","",5],[11,"partial_cmp","","",5],[11,"lt","","",5],[11,"le","","",5],[11,"gt","","",5],[11,"ge","","",5],[11,"clone","","",5],[11,"eq","","",5],[11,"ne","","",5],[11,"empty","","Returns an empty set of flags.",5],[11,"all","","Returns the set containing all flags.",5],[11,"bits","","Returns the raw value of the flags currently stored.",5],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",5],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",5],[11,"is_empty","","Returns `true` if no flags are currently stored.",5],[11,"is_all","","Returns `true` if all flags are currently set.",5],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",5],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",5],[11,"insert","","Inserts the specified flags in-place.",5],[11,"remove","","Removes the specified flags in-place.",5],[11,"toggle","","Toggles the specified flags in-place.",5],[6,"Output","rustc::llvm::archive_ro",""],[11,"bitor","rustc_llvm","Returns the union of the two sets of flags.",5],[6,"Output","rustc::llvm::archive_ro",""],[11,"bitxor","rustc_llvm","Returns the left flags, but with all the right flags toggled.",5],[6,"Output","rustc::llvm::archive_ro",""],[11,"bitand","rustc_llvm","Returns the intersection between the two sets of flags.",5],[6,"Output","rustc::llvm::archive_ro",""],[11,"sub","rustc_llvm","Returns the set difference of the two sets of flags.",5],[6,"Output","rustc::llvm::archive_ro",""],[11,"not","rustc_llvm","Returns the complement of this set of flags.",5],[11,"apply_llfn","","",5],[11,"apply_callsite","","",5],[11,"apply_llfn","","",6],[11,"apply_callsite","","",6],[11,"apply_llfn","","",7],[11,"apply_callsite","","",7],[11,"new","","",8],[11,"arg","","",8],[11,"ret","","",8],[11,"apply_llfn","","",8],[11,"apply_callsite","","",8],[11,"fmt","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"clone","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"eq","","",11],[11,"ne","","",11],[11,"drop","","",12],[11,"new","","",13],[11,"drop","","",13],[11,"drop","","",14],[3,"ArchiveRO","rustc::llvm::archive_ro",""],[0,"diagnostic","rustc::llvm","LLVM diagnostic reports."],[4,"OptimizationDiagnosticKind","rustc::llvm::diagnostic",""],[13,"OptimizationRemark","","",1],[13,"OptimizationMissed","","",1],[13,"OptimizationAnalysis","","",1],[13,"OptimizationFailure","","",1],[3,"OptimizationDiagnostic","",""],[12,"kind","","",15],[12,"pass_name","","",15],[12,"function","","",15],[12,"debug_loc","","",15],[12,"message","","",15],[3,"InlineAsmDiagnostic","",""],[12,"cookie","","",16],[12,"message","","",16],[12,"instruction","","",16],[4,"Diagnostic","",""],[13,"Optimization","","",2],[13,"InlineAsm","","",2],[13,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",2],[6,"Opcode","rustc::llvm",""],[6,"Bool","",""],[17,"True","",""],[17,"False","",""],[4,"CallConv","",""],[13,"CCallConv","","",3],[13,"FastCallConv","","",3],[13,"ColdCallConv","","",3],[13,"X86StdcallCallConv","","",3],[13,"X86FastcallCallConv","","",3],[13,"X86_64_Win64","","",3],[4,"Visibility","",""],[13,"LLVMDefaultVisibility","","",17],[13,"HiddenVisibility","","",17],[13,"ProtectedVisibility","","",17],[4,"Linkage","",""],[13,"ExternalLinkage","","",18],[13,"AvailableExternallyLinkage","","",18],[13,"LinkOnceAnyLinkage","","",18],[13,"LinkOnceODRLinkage","","",18],[13,"WeakAnyLinkage","","",18],[13,"WeakODRLinkage","","",18],[13,"AppendingLinkage","","",18],[13,"InternalLinkage","","",18],[13,"PrivateLinkage","","",18],[13,"ExternalWeakLinkage","","",18],[13,"CommonLinkage","","",18],[4,"DiagnosticSeverity","",""],[13,"Error","","",4],[13,"Warning","","",4],[13,"Remark","","",4],[13,"Note","","",4],[3,"Attribute","",""],[17,"ZExtAttribute","",""],[17,"SExtAttribute","",""],[17,"NoReturnAttribute","",""],[17,"InRegAttribute","",""],[17,"StructRetAttribute","",""],[17,"NoUnwindAttribute","",""],[17,"NoAliasAttribute","",""],[17,"ByValAttribute","",""],[17,"NestAttribute","",""],[17,"ReadNoneAttribute","",""],[17,"ReadOnlyAttribute","",""],[17,"NoInlineAttribute","",""],[17,"AlwaysInlineAttribute","",""],[17,"OptimizeForSizeAttribute","",""],[17,"StackProtectAttribute","",""],[17,"StackProtectReqAttribute","",""],[17,"AlignmentAttribute","",""],[17,"NoCaptureAttribute","",""],[17,"NoRedZoneAttribute","",""],[17,"NoImplicitFloatAttribute","",""],[17,"NakedAttribute","",""],[17,"InlineHintAttribute","",""],[17,"StackAttribute","",""],[17,"ReturnsTwiceAttribute","",""],[17,"UWTableAttribute","",""],[17,"NonLazyBindAttribute","",""],[4,"OtherAttribute","",""],[13,"SanitizeAddressAttribute","","",6],[13,"MinSizeAttribute","","",6],[13,"NoDuplicateAttribute","","",6],[13,"StackProtectStrongAttribute","","",6],[13,"SanitizeThreadAttribute","","",6],[13,"SanitizeMemoryAttribute","","",6],[13,"NoBuiltinAttribute","","",6],[13,"ReturnedAttribute","","",6],[13,"ColdAttribute","","",6],[13,"BuiltinAttribute","","",6],[13,"OptimizeNoneAttribute","","",6],[13,"InAllocaAttribute","","",6],[13,"NonNullAttribute","","",6],[4,"SpecialAttribute","",""],[13,"DereferenceableAttribute","","",7],[4,"AttributeSet","",""],[13,"ReturnIndex","","",19],[13,"FunctionIndex","","",19],[8,"AttrHelper","",""],[10,"apply_llfn","","",20],[10,"apply_callsite","","",20],[3,"AttrBuilder","",""],[4,"IntPredicate","",""],[13,"IntEQ","","",21],[13,"IntNE","","",21],[13,"IntUGT","","",21],[13,"IntUGE","","",21],[13,"IntULT","","",21],[13,"IntULE","","",21],[13,"IntSGT","","",21],[13,"IntSGE","","",21],[13,"IntSLT","","",21],[13,"IntSLE","","",21],[4,"RealPredicate","",""],[13,"RealPredicateFalse","","",22],[13,"RealOEQ","","",22],[13,"RealOGT","","",22],[13,"RealOGE","","",22],[13,"RealOLT","","",22],[13,"RealOLE","","",22],[13,"RealONE","","",22],[13,"RealORD","","",22],[13,"RealUNO","","",22],[13,"RealUEQ","","",22],[13,"RealUGT","","",22],[13,"RealUGE","","",22],[13,"RealULT","","",22],[13,"RealULE","","",22],[13,"RealUNE","","",22],[13,"RealPredicateTrue","","",22],[4,"TypeKind","",""],[13,"Void","","",9],[13,"Half","","",9],[13,"Float","","",9],[13,"Double","","",9],[13,"X86_FP80","","",9],[13,"FP128","","",9],[13,"PPC_FP128","","",9],[13,"Label","","",9],[13,"Integer","","",9],[13,"Function","","",9],[13,"Struct","","",9],[13,"Array","","",9],[13,"Pointer","","",9],[13,"Vector","","",9],[13,"Metadata","","",9],[13,"X86_MMX","","",9],[4,"AtomicBinOp","",""],[13,"AtomicXchg","","",23],[13,"AtomicAdd","","",23],[13,"AtomicSub","","",23],[13,"AtomicAnd","","",23],[13,"AtomicNand","","",23],[13,"AtomicOr","","",23],[13,"AtomicXor","","",23],[13,"AtomicMax","","",23],[13,"AtomicMin","","",23],[13,"AtomicUMax","","",23],[13,"AtomicUMin","","",23],[4,"AtomicOrdering","",""],[13,"NotAtomic","","",24],[13,"Unordered","","",24],[13,"Monotonic","","",24],[13,"Acquire","","",24],[13,"Release","","",24],[13,"AcquireRelease","","",24],[13,"SequentiallyConsistent","","",24],[4,"FileType","",""],[13,"AssemblyFileType","","",25],[13,"ObjectFileType","","",25],[4,"MetadataType","",""],[13,"MD_dbg","","",26],[13,"MD_tbaa","","",26],[13,"MD_prof","","",26],[13,"MD_fpmath","","",26],[13,"MD_range","","",26],[13,"MD_tbaa_struct","","",26],[13,"MD_invariant_load","","",26],[13,"MD_alias_scope","","",26],[13,"MD_noalias","","",26],[13,"MD_nontemporal","","",26],[13,"MD_mem_parallel_loop_access","","",26],[13,"MD_nonnull","","",26],[4,"AsmDialect","",""],[13,"AD_ATT","","",27],[13,"AD_Intel","","",27],[4,"CodeGenOptLevel","",""],[13,"CodeGenLevelNone","","",10],[13,"CodeGenLevelLess","","",10],[13,"CodeGenLevelDefault","","",10],[13,"CodeGenLevelAggressive","","",10],[4,"RelocMode","",""],[13,"RelocDefault","","",11],[13,"RelocStatic","","",11],[13,"RelocPIC","","",11],[13,"RelocDynamicNoPic","","",11],[4,"CodeGenModel","",""],[13,"CodeModelDefault","","",28],[13,"CodeModelJITDefault","","",28],[13,"CodeModelSmall","","",28],[13,"CodeModelKernel","","",28],[13,"CodeModelMedium","","",28],[13,"CodeModelLarge","","",28],[4,"DiagnosticKind","",""],[13,"DK_InlineAsm","","",29],[13,"DK_StackSize","","",29],[13,"DK_DebugMetadataVersion","","",29],[13,"DK_SampleProfile","","",29],[13,"DK_OptimizationRemark","","",29],[13,"DK_OptimizationRemarkMissed","","",29],[13,"DK_OptimizationRemarkAnalysis","","",29],[13,"DK_OptimizationFailure","","",29],[4,"Module_opaque","",""],[6,"ModuleRef","",""],[4,"Context_opaque","",""],[6,"ContextRef","",""],[4,"Type_opaque","",""],[6,"TypeRef","",""],[4,"Value_opaque","",""],[6,"ValueRef","",""],[4,"Metadata_opaque","",""],[6,"MetadataRef","",""],[4,"BasicBlock_opaque","",""],[6,"BasicBlockRef","",""],[4,"Builder_opaque","",""],[6,"BuilderRef","",""],[4,"ExecutionEngine_opaque","",""],[6,"ExecutionEngineRef","",""],[4,"RustJITMemoryManager_opaque","",""],[6,"RustJITMemoryManagerRef","",""],[4,"MemoryBuffer_opaque","",""],[6,"MemoryBufferRef","",""],[4,"PassManager_opaque","",""],[6,"PassManagerRef","",""],[4,"PassManagerBuilder_opaque","",""],[6,"PassManagerBuilderRef","",""],[4,"Use_opaque","",""],[6,"UseRef","",""],[4,"TargetData_opaque","",""],[6,"TargetDataRef","",""],[4,"ObjectFile_opaque","",""],[6,"ObjectFileRef","",""],[4,"SectionIterator_opaque","",""],[6,"SectionIteratorRef","",""],[4,"Pass_opaque","",""],[6,"PassRef","",""],[4,"TargetMachine_opaque","",""],[6,"TargetMachineRef","",""],[4,"Archive_opaque","",""],[6,"ArchiveRef","",""],[4,"Twine_opaque","",""],[6,"TwineRef","",""],[4,"DiagnosticInfo_opaque","",""],[6,"DiagnosticInfoRef","",""],[4,"DebugLoc_opaque","",""],[6,"DebugLocRef","",""],[4,"SMDiagnostic_opaque","",""],[6,"SMDiagnosticRef","",""],[6,"DiagnosticHandler","",""],[6,"InlineAsmDiagHandler","",""],[0,"debuginfo","",""],[4,"DIBuilder_opaque","rustc::llvm::debuginfo",""],[6,"DIBuilderRef","",""],[6,"DIDescriptor","",""],[6,"DIScope","",""],[6,"DILocation","",""],[6,"DIFile","",""],[6,"DILexicalBlock","",""],[6,"DISubprogram","",""],[6,"DINameSpace","",""],[6,"DIType","",""],[6,"DIBasicType","",""],[6,"DIDerivedType","",""],[6,"DICompositeType","",""],[6,"DIVariable","",""],[6,"DIGlobalVariable","",""],[6,"DIArray","",""],[6,"DISubrange","",""],[6,"DIEnumerator","",""],[6,"DITemplateTypeParameter","",""],[4,"DIDescriptorFlags","",""],[13,"FlagPrivate","","",30],[13,"FlagProtected","","",30],[13,"FlagFwdDecl","","",30],[13,"FlagAppleBlock","","",30],[13,"FlagBlockByrefStruct","","",30],[13,"FlagVirtual","","",30],[13,"FlagArtificial","","",30],[13,"FlagExplicit","","",30],[13,"FlagPrototyped","","",30],[13,"FlagObjcClassComplete","","",30],[13,"FlagObjectPointer","","",30],[13,"FlagVector","","",30],[13,"FlagStaticMember","","",30],[13,"FlagIndirectVariable","","",30],[13,"FlagLValueReference","","",30],[13,"FlagRValueReference","","",30],[5,"LLVMContextCreate","rustc::llvm",""],[5,"LLVMContextDispose","",""],[5,"LLVMGetMDKindIDInContext","",""],[5,"LLVMModuleCreateWithNameInContext","",""],[5,"LLVMGetModuleContext","",""],[5,"LLVMDisposeModule","",""],[5,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout."],[5,"LLVMSetDataLayout","",""],[5,"LLVMGetTarget","","Target triple. See Module::getTargetTriple."],[5,"LLVMSetTarget","",""],[5,"LLVMDumpModule","","See Module::dump."],[5,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm."],[5,"LLVMGetTypeKind","","See llvm::LLVMTypeKind::getTypeID."],[5,"LLVMGetTypeContext","","See llvm::LLVMType::getContext."],[5,"LLVMInt1TypeInContext","",""],[5,"LLVMInt8TypeInContext","",""],[5,"LLVMInt16TypeInContext","",""],[5,"LLVMInt32TypeInContext","",""],[5,"LLVMInt64TypeInContext","",""],[5,"LLVMIntTypeInContext","",""],[5,"LLVMGetIntTypeWidth","",""],[5,"LLVMFloatTypeInContext","",""],[5,"LLVMDoubleTypeInContext","",""],[5,"LLVMX86FP80TypeInContext","",""],[5,"LLVMFP128TypeInContext","",""],[5,"LLVMPPCFP128TypeInContext","",""],[5,"LLVMFunctionType","",""],[5,"LLVMIsFunctionVarArg","",""],[5,"LLVMGetReturnType","",""],[5,"LLVMCountParamTypes","",""],[5,"LLVMGetParamTypes","",""],[5,"LLVMStructTypeInContext","",""],[5,"LLVMCountStructElementTypes","",""],[5,"LLVMGetStructElementTypes","",""],[5,"LLVMIsPackedStruct","",""],[5,"LLVMRustArrayType","",""],[5,"LLVMPointerType","",""],[5,"LLVMVectorType","",""],[5,"LLVMGetElementType","",""],[5,"LLVMGetArrayLength","",""],[5,"LLVMGetPointerAddressSpace","",""],[5,"LLVMGetPointerToGlobal","",""],[5,"LLVMGetVectorSize","",""],[5,"LLVMVoidTypeInContext","",""],[5,"LLVMLabelTypeInContext","",""],[5,"LLVMMetadataTypeInContext","",""],[5,"LLVMTypeOf","",""],[5,"LLVMGetValueName","",""],[5,"LLVMSetValueName","",""],[5,"LLVMDumpValue","",""],[5,"LLVMReplaceAllUsesWith","",""],[5,"LLVMHasMetadata","",""],[5,"LLVMGetMetadata","",""],[5,"LLVMSetMetadata","",""],[5,"LLVMGetFirstUse","",""],[5,"LLVMGetNextUse","",""],[5,"LLVMGetUser","",""],[5,"LLVMGetUsedValue","",""],[5,"LLVMGetNumOperands","",""],[5,"LLVMGetOperand","",""],[5,"LLVMSetOperand","",""],[5,"LLVMConstNull","",""],[5,"LLVMConstAllOnes","",""],[5,"LLVMConstICmp","",""],[5,"LLVMConstFCmp","",""],[5,"LLVMGetUndef","",""],[5,"LLVMIsConstant","",""],[5,"LLVMIsNull","",""],[5,"LLVMIsUndef","",""],[5,"LLVMConstPointerNull","",""],[5,"LLVMMDStringInContext","",""],[5,"LLVMMDNodeInContext","",""],[5,"LLVMAddNamedMetadataOperand","",""],[5,"LLVMConstInt","",""],[5,"LLVMConstIntOfString","",""],[5,"LLVMConstIntOfStringAndSize","",""],[5,"LLVMConstReal","",""],[5,"LLVMConstRealOfString","",""],[5,"LLVMConstRealOfStringAndSize","",""],[5,"LLVMConstIntGetZExtValue","",""],[5,"LLVMConstIntGetSExtValue","",""],[5,"LLVMConstStringInContext","",""],[5,"LLVMConstStructInContext","",""],[5,"LLVMConstArray","",""],[5,"LLVMConstVector","",""],[5,"LLVMAlignOf","",""],[5,"LLVMSizeOf","",""],[5,"LLVMConstNeg","",""],[5,"LLVMConstNSWNeg","",""],[5,"LLVMConstNUWNeg","",""],[5,"LLVMConstFNeg","",""],[5,"LLVMConstNot","",""],[5,"LLVMConstAdd","",""],[5,"LLVMConstNSWAdd","",""],[5,"LLVMConstNUWAdd","",""],[5,"LLVMConstFAdd","",""],[5,"LLVMConstSub","",""],[5,"LLVMConstNSWSub","",""],[5,"LLVMConstNUWSub","",""],[5,"LLVMConstFSub","",""],[5,"LLVMConstMul","",""],[5,"LLVMConstNSWMul","",""],[5,"LLVMConstNUWMul","",""],[5,"LLVMConstFMul","",""],[5,"LLVMConstUDiv","",""],[5,"LLVMConstSDiv","",""],[5,"LLVMConstExactSDiv","",""],[5,"LLVMConstFDiv","",""],[5,"LLVMConstURem","",""],[5,"LLVMConstSRem","",""],[5,"LLVMConstFRem","",""],[5,"LLVMConstAnd","",""],[5,"LLVMConstOr","",""],[5,"LLVMConstXor","",""],[5,"LLVMConstShl","",""],[5,"LLVMConstLShr","",""],[5,"LLVMConstAShr","",""],[5,"LLVMConstGEP","",""],[5,"LLVMConstInBoundsGEP","",""],[5,"LLVMConstTrunc","",""],[5,"LLVMConstSExt","",""],[5,"LLVMConstZExt","",""],[5,"LLVMConstFPTrunc","",""],[5,"LLVMConstFPExt","",""],[5,"LLVMConstUIToFP","",""],[5,"LLVMConstSIToFP","",""],[5,"LLVMConstFPToUI","",""],[5,"LLVMConstFPToSI","",""],[5,"LLVMConstPtrToInt","",""],[5,"LLVMConstIntToPtr","",""],[5,"LLVMConstBitCast","",""],[5,"LLVMConstZExtOrBitCast","",""],[5,"LLVMConstSExtOrBitCast","",""],[5,"LLVMConstTruncOrBitCast","",""],[5,"LLVMConstPointerCast","",""],[5,"LLVMConstIntCast","",""],[5,"LLVMConstFPCast","",""],[5,"LLVMConstSelect","",""],[5,"LLVMConstExtractElement","",""],[5,"LLVMConstInsertElement","",""],[5,"LLVMConstShuffleVector","",""],[5,"LLVMConstExtractValue","",""],[5,"LLVMConstInsertValue","",""],[5,"LLVMConstInlineAsm","",""],[5,"LLVMBlockAddress","",""],[5,"LLVMGetGlobalParent","",""],[5,"LLVMIsDeclaration","",""],[5,"LLVMGetLinkage","",""],[5,"LLVMSetLinkage","",""],[5,"LLVMGetSection","",""],[5,"LLVMSetSection","",""],[5,"LLVMGetVisibility","",""],[5,"LLVMSetVisibility","",""],[5,"LLVMGetAlignment","",""],[5,"LLVMSetAlignment","",""],[5,"LLVMIsAGlobalVariable","",""],[5,"LLVMAddGlobal","",""],[5,"LLVMAddGlobalInAddressSpace","",""],[5,"LLVMGetNamedGlobal","",""],[5,"LLVMGetFirstGlobal","",""],[5,"LLVMGetLastGlobal","",""],[5,"LLVMGetNextGlobal","",""],[5,"LLVMGetPreviousGlobal","",""],[5,"LLVMDeleteGlobal","",""],[5,"LLVMGetInitializer","",""],[5,"LLVMSetInitializer","",""],[5,"LLVMIsThreadLocal","",""],[5,"LLVMSetThreadLocal","",""],[5,"LLVMIsGlobalConstant","",""],[5,"LLVMSetGlobalConstant","",""],[5,"LLVMAddAlias","",""],[5,"LLVMAddFunction","",""],[5,"LLVMGetNamedFunction","",""],[5,"LLVMGetFirstFunction","",""],[5,"LLVMGetLastFunction","",""],[5,"LLVMGetNextFunction","",""],[5,"LLVMGetPreviousFunction","",""],[5,"LLVMDeleteFunction","",""],[5,"LLVMGetOrInsertFunction","",""],[5,"LLVMGetIntrinsicID","",""],[5,"LLVMGetFunctionCallConv","",""],[5,"LLVMSetFunctionCallConv","",""],[5,"LLVMGetGC","",""],[5,"LLVMSetGC","",""],[5,"LLVMAddDereferenceableAttr","",""],[5,"LLVMAddFunctionAttribute","",""],[5,"LLVMAddFunctionAttrString","",""],[5,"LLVMRemoveFunctionAttrString","",""],[5,"LLVMGetFunctionAttr","",""],[5,"LLVMCountParams","",""],[5,"LLVMGetParams","",""],[5,"LLVMGetParam","",""],[5,"LLVMGetParamParent","",""],[5,"LLVMGetFirstParam","",""],[5,"LLVMGetLastParam","",""],[5,"LLVMGetNextParam","",""],[5,"LLVMGetPreviousParam","",""],[5,"LLVMAddAttribute","",""],[5,"LLVMRemoveAttribute","",""],[5,"LLVMGetAttribute","",""],[5,"LLVMSetParamAlignment","",""],[5,"LLVMBasicBlockAsValue","",""],[5,"LLVMValueIsBasicBlock","",""],[5,"LLVMValueAsBasicBlock","",""],[5,"LLVMGetBasicBlockParent","",""],[5,"LLVMCountBasicBlocks","",""],[5,"LLVMGetBasicBlocks","",""],[5,"LLVMGetFirstBasicBlock","",""],[5,"LLVMGetLastBasicBlock","",""],[5,"LLVMGetNextBasicBlock","",""],[5,"LLVMGetPreviousBasicBlock","",""],[5,"LLVMGetEntryBasicBlock","",""],[5,"LLVMAppendBasicBlockInContext","",""],[5,"LLVMInsertBasicBlockInContext","",""],[5,"LLVMDeleteBasicBlock","",""],[5,"LLVMMoveBasicBlockAfter","",""],[5,"LLVMMoveBasicBlockBefore","",""],[5,"LLVMGetInstructionParent","",""],[5,"LLVMGetFirstInstruction","",""],[5,"LLVMGetLastInstruction","",""],[5,"LLVMGetNextInstruction","",""],[5,"LLVMGetPreviousInstruction","",""],[5,"LLVMInstructionEraseFromParent","",""],[5,"LLVMSetInstructionCallConv","",""],[5,"LLVMGetInstructionCallConv","",""],[5,"LLVMAddInstrAttribute","",""],[5,"LLVMRemoveInstrAttribute","",""],[5,"LLVMSetInstrParamAlignment","",""],[5,"LLVMAddCallSiteAttribute","",""],[5,"LLVMAddDereferenceableCallSiteAttr","",""],[5,"LLVMIsTailCall","",""],[5,"LLVMSetTailCall","",""],[5,"LLVMGetVolatile","",""],[5,"LLVMSetVolatile","",""],[5,"LLVMAddIncoming","",""],[5,"LLVMCountIncoming","",""],[5,"LLVMGetIncomingValue","",""],[5,"LLVMGetIncomingBlock","",""],[5,"LLVMCreateBuilderInContext","",""],[5,"LLVMPositionBuilder","",""],[5,"LLVMPositionBuilderBefore","",""],[5,"LLVMPositionBuilderAtEnd","",""],[5,"LLVMGetInsertBlock","",""],[5,"LLVMClearInsertionPosition","",""],[5,"LLVMInsertIntoBuilder","",""],[5,"LLVMInsertIntoBuilderWithName","",""],[5,"LLVMDisposeBuilder","",""],[5,"LLVMRustCreateJITMemoryManager","",""],[5,"LLVMBuildExecutionEngine","",""],[5,"LLVMDisposeExecutionEngine","",""],[5,"LLVMExecutionEngineFinalizeObject","",""],[5,"LLVMRustLoadDynamicLibrary","",""],[5,"LLVMExecutionEngineAddModule","",""],[5,"LLVMExecutionEngineRemoveModule","",""],[5,"LLVMSetCurrentDebugLocation","",""],[5,"LLVMGetCurrentDebugLocation","",""],[5,"LLVMSetInstDebugLocation","",""],[5,"LLVMBuildRetVoid","",""],[5,"LLVMBuildRet","",""],[5,"LLVMBuildAggregateRet","",""],[5,"LLVMBuildBr","",""],[5,"LLVMBuildCondBr","",""],[5,"LLVMBuildSwitch","",""],[5,"LLVMBuildIndirectBr","",""],[5,"LLVMBuildInvoke","",""],[5,"LLVMBuildLandingPad","",""],[5,"LLVMBuildResume","",""],[5,"LLVMBuildUnreachable","",""],[5,"LLVMAddCase","",""],[5,"LLVMAddDestination","",""],[5,"LLVMAddClause","",""],[5,"LLVMSetCleanup","",""],[5,"LLVMBuildAdd","",""],[5,"LLVMBuildNSWAdd","",""],[5,"LLVMBuildNUWAdd","",""],[5,"LLVMBuildFAdd","",""],[5,"LLVMBuildSub","",""],[5,"LLVMBuildNSWSub","",""],[5,"LLVMBuildNUWSub","",""],[5,"LLVMBuildFSub","",""],[5,"LLVMBuildMul","",""],[5,"LLVMBuildNSWMul","",""],[5,"LLVMBuildNUWMul","",""],[5,"LLVMBuildFMul","",""],[5,"LLVMBuildUDiv","",""],[5,"LLVMBuildSDiv","",""],[5,"LLVMBuildExactSDiv","",""],[5,"LLVMBuildFDiv","",""],[5,"LLVMBuildURem","",""],[5,"LLVMBuildSRem","",""],[5,"LLVMBuildFRem","",""],[5,"LLVMBuildShl","",""],[5,"LLVMBuildLShr","",""],[5,"LLVMBuildAShr","",""],[5,"LLVMBuildAnd","",""],[5,"LLVMBuildOr","",""],[5,"LLVMBuildXor","",""],[5,"LLVMBuildBinOp","",""],[5,"LLVMBuildNeg","",""],[5,"LLVMBuildNSWNeg","",""],[5,"LLVMBuildNUWNeg","",""],[5,"LLVMBuildFNeg","",""],[5,"LLVMBuildNot","",""],[5,"LLVMBuildMalloc","",""],[5,"LLVMBuildArrayMalloc","",""],[5,"LLVMBuildAlloca","",""],[5,"LLVMBuildArrayAlloca","",""],[5,"LLVMBuildFree","",""],[5,"LLVMBuildLoad","",""],[5,"LLVMBuildStore","",""],[5,"LLVMBuildGEP","",""],[5,"LLVMBuildInBoundsGEP","",""],[5,"LLVMBuildStructGEP","",""],[5,"LLVMBuildGlobalString","",""],[5,"LLVMBuildGlobalStringPtr","",""],[5,"LLVMBuildTrunc","",""],[5,"LLVMBuildZExt","",""],[5,"LLVMBuildSExt","",""],[5,"LLVMBuildFPToUI","",""],[5,"LLVMBuildFPToSI","",""],[5,"LLVMBuildUIToFP","",""],[5,"LLVMBuildSIToFP","",""],[5,"LLVMBuildFPTrunc","",""],[5,"LLVMBuildFPExt","",""],[5,"LLVMBuildPtrToInt","",""],[5,"LLVMBuildIntToPtr","",""],[5,"LLVMBuildBitCast","",""],[5,"LLVMBuildZExtOrBitCast","",""],[5,"LLVMBuildSExtOrBitCast","",""],[5,"LLVMBuildTruncOrBitCast","",""],[5,"LLVMBuildCast","",""],[5,"LLVMBuildPointerCast","",""],[5,"LLVMBuildIntCast","",""],[5,"LLVMBuildFPCast","",""],[5,"LLVMBuildICmp","",""],[5,"LLVMBuildFCmp","",""],[5,"LLVMBuildPhi","",""],[5,"LLVMBuildCall","",""],[5,"LLVMBuildSelect","",""],[5,"LLVMBuildVAArg","",""],[5,"LLVMBuildExtractElement","",""],[5,"LLVMBuildInsertElement","",""],[5,"LLVMBuildShuffleVector","",""],[5,"LLVMBuildExtractValue","",""],[5,"LLVMBuildInsertValue","",""],[5,"LLVMBuildIsNull","",""],[5,"LLVMBuildIsNotNull","",""],[5,"LLVMBuildPtrDiff","",""],[5,"LLVMBuildAtomicLoad","",""],[5,"LLVMBuildAtomicStore","",""],[5,"LLVMBuildAtomicCmpXchg","",""],[5,"LLVMBuildAtomicRMW","",""],[5,"LLVMBuildAtomicFence","",""],[5,"LLVMIsATerminatorInst","",""],[5,"LLVMIsAStoreInst","",""],[5,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success."],[5,"LLVMCreateTargetData","","Creates target data from a target layout string."],[5,"LLVMAddTargetData","","Adds the target data to the given pass manager. The pass manager\nreferences the target data only weakly."],[5,"LLVMStoreSizeOfType","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMABISizeOfType","","Distance between successive elements in an array of T. Includes ABI padding."],[5,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type."],[5,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type."],[5,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a\ntarget."],[5,"LLVMCallFrameAlignmentOfType","","Returns the minimum alignment of a type when part of a call frame."],[5,"LLVMDisposeTargetData","","Disposes target data."],[5,"LLVMCreatePassManager","","Creates a pass manager."],[5,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager"],[5,"LLVMDisposePassManager","","Disposes a pass manager."],[5,"LLVMRunPassManager","","Runs a pass manager on a module."],[5,"LLVMRunFunctionPassManager","","Runs the function passes on the provided function."],[5,"LLVMInitializeFunctionPassManager","","Initializes all the function passes scheduled in the manager"],[5,"LLVMFinalizeFunctionPassManager","","Finalizes all the function passes scheduled in the manager"],[5,"LLVMInitializePasses","",""],[5,"LLVMAddVerifierPass","","Adds a verification pass."],[5,"LLVMAddGlobalOptimizerPass","",""],[5,"LLVMAddIPSCCPPass","",""],[5,"LLVMAddDeadArgEliminationPass","",""],[5,"LLVMAddInstructionCombiningPass","",""],[5,"LLVMAddCFGSimplificationPass","",""],[5,"LLVMAddFunctionInliningPass","",""],[5,"LLVMAddFunctionAttrsPass","",""],[5,"LLVMAddScalarReplAggregatesPass","",""],[5,"LLVMAddScalarReplAggregatesPassSSA","",""],[5,"LLVMAddJumpThreadingPass","",""],[5,"LLVMAddConstantPropagationPass","",""],[5,"LLVMAddReassociatePass","",""],[5,"LLVMAddLoopRotatePass","",""],[5,"LLVMAddLICMPass","",""],[5,"LLVMAddLoopUnswitchPass","",""],[5,"LLVMAddLoopDeletionPass","",""],[5,"LLVMAddLoopUnrollPass","",""],[5,"LLVMAddGVNPass","",""],[5,"LLVMAddMemCpyOptPass","",""],[5,"LLVMAddSCCPPass","",""],[5,"LLVMAddDeadStoreEliminationPass","",""],[5,"LLVMAddStripDeadPrototypesPass","",""],[5,"LLVMAddConstantMergePass","",""],[5,"LLVMAddArgumentPromotionPass","",""],[5,"LLVMAddTailCallEliminationPass","",""],[5,"LLVMAddIndVarSimplifyPass","",""],[5,"LLVMAddAggressiveDCEPass","",""],[5,"LLVMAddGlobalDCEPass","",""],[5,"LLVMAddCorrelatedValuePropagationPass","",""],[5,"LLVMAddPruneEHPass","",""],[5,"LLVMAddSimplifyLibCallsPass","",""],[5,"LLVMAddLoopIdiomPass","",""],[5,"LLVMAddEarlyCSEPass","",""],[5,"LLVMAddTypeBasedAliasAnalysisPass","",""],[5,"LLVMAddBasicAliasAnalysisPass","",""],[5,"LLVMPassManagerBuilderCreate","",""],[5,"LLVMPassManagerBuilderDispose","",""],[5,"LLVMPassManagerBuilderSetOptLevel","",""],[5,"LLVMPassManagerBuilderSetSizeLevel","",""],[5,"LLVMPassManagerBuilderSetDisableUnitAtATime","",""],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","",""],[5,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls","",""],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","",""],[5,"LLVMPassManagerBuilderPopulateModulePassManager","",""],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","",""],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","",""],[5,"LLVMDisposeMemoryBuffer","","Destroys a memory buffer."],[5,"LLVMCreateObjectFile","","Opens an object file."],[5,"LLVMDisposeObjectFile","","Closes an object file."],[5,"LLVMGetSections","","Enumerates the sections in an object file."],[5,"LLVMDisposeSectionIterator","","Destroys a section iterator."],[5,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section\nlist:"],[5,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section."],[5,"LLVMGetSectionSize","","Returns the current section size."],[5,"LLVMGetSectionContents","","Returns the current section contents as a string buffer."],[5,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use\nLLVMDisposeMemoryBuffer() to get rid of it."],[5,"LLVMCreateMemoryBufferWithMemoryRange","","Borrows the contents of the memory buffer (doesn't copy it)"],[5,"LLVMCreateMemoryBufferWithMemoryRangeCopy","",""],[5,"LLVMIsMultithreaded","",""],[5,"LLVMStartMultithreaded","",""],[5,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust* call."],[5,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren't picking them up."],[5,"LLVMStructCreateNamed","",""],[5,"LLVMStructSetBody","",""],[5,"LLVMConstNamedStruct","",""],[5,"LLVMSetDebug","","Enables LLVM debug output."],[5,"LLVMInlineAsm","","Prepares inline assembly."],[7,"LLVMRustDebugMetadataVersion","",""],[5,"LLVMRustAddModuleFlag","",""],[5,"LLVMDIBuilderCreate","",""],[5,"LLVMDIBuilderDispose","",""],[5,"LLVMDIBuilderFinalize","",""],[5,"LLVMDIBuilderCreateCompileUnit","",""],[5,"LLVMDIBuilderCreateFile","",""],[5,"LLVMDIBuilderCreateSubroutineType","",""],[5,"LLVMDIBuilderCreateFunction","",""],[5,"LLVMDIBuilderCreateBasicType","",""],[5,"LLVMDIBuilderCreatePointerType","",""],[5,"LLVMDIBuilderCreateStructType","",""],[5,"LLVMDIBuilderCreateMemberType","",""],[5,"LLVMDIBuilderCreateLexicalBlock","",""],[5,"LLVMDIBuilderCreateStaticVariable","",""],[5,"LLVMDIBuilderCreateVariable","",""],[5,"LLVMDIBuilderCreateArrayType","",""],[5,"LLVMDIBuilderCreateVectorType","",""],[5,"LLVMDIBuilderGetOrCreateSubrange","",""],[5,"LLVMDIBuilderGetOrCreateArray","",""],[5,"LLVMDIBuilderInsertDeclareAtEnd","",""],[5,"LLVMDIBuilderInsertDeclareBefore","",""],[5,"LLVMDIBuilderCreateEnumerator","",""],[5,"LLVMDIBuilderCreateEnumerationType","",""],[5,"LLVMDIBuilderCreateUnionType","",""],[5,"LLVMSetUnnamedAddr","",""],[5,"LLVMDIBuilderCreateTemplateTypeParameter","",""],[5,"LLVMDIBuilderCreateOpDeref","",""],[5,"LLVMDIBuilderCreateOpPlus","",""],[5,"LLVMDIBuilderCreateNameSpace","",""],[5,"LLVMDIBuilderCreateDebugLocation","",""],[5,"LLVMDICompositeTypeSetTypeArray","",""],[5,"LLVMWriteTypeToString","",""],[5,"LLVMWriteValueToString","",""],[5,"LLVMIsAArgument","",""],[5,"LLVMIsAAllocaInst","",""],[5,"LLVMInitializeX86TargetInfo","",""],[5,"LLVMInitializeX86Target","",""],[5,"LLVMInitializeX86TargetMC","",""],[5,"LLVMInitializeX86AsmPrinter","",""],[5,"LLVMInitializeX86AsmParser","",""],[5,"LLVMInitializeARMTargetInfo","",""],[5,"LLVMInitializeARMTarget","",""],[5,"LLVMInitializeARMTargetMC","",""],[5,"LLVMInitializeARMAsmPrinter","",""],[5,"LLVMInitializeARMAsmParser","",""],[5,"LLVMInitializeAArch64TargetInfo","",""],[5,"LLVMInitializeAArch64Target","",""],[5,"LLVMInitializeAArch64TargetMC","",""],[5,"LLVMInitializeAArch64AsmPrinter","",""],[5,"LLVMInitializeAArch64AsmParser","",""],[5,"LLVMInitializeMipsTargetInfo","",""],[5,"LLVMInitializeMipsTarget","",""],[5,"LLVMInitializeMipsTargetMC","",""],[5,"LLVMInitializeMipsAsmPrinter","",""],[5,"LLVMInitializeMipsAsmParser","",""],[5,"LLVMInitializePowerPCTargetInfo","",""],[5,"LLVMInitializePowerPCTarget","",""],[5,"LLVMInitializePowerPCTargetMC","",""],[5,"LLVMInitializePowerPCAsmPrinter","",""],[5,"LLVMInitializePowerPCAsmParser","",""],[5,"LLVMRustAddPass","",""],[5,"LLVMRustCreateTargetMachine","",""],[5,"LLVMRustDisposeTargetMachine","",""],[5,"LLVMRustAddAnalysisPasses","",""],[5,"LLVMRustAddBuilderLibraryInfo","",""],[5,"LLVMRustAddLibraryInfo","",""],[5,"LLVMRustRunFunctionPassManager","",""],[5,"LLVMRustWriteOutputFile","",""],[5,"LLVMRustPrintModule","",""],[5,"LLVMRustSetLLVMOptions","",""],[5,"LLVMRustPrintPasses","",""],[5,"LLVMRustSetNormalizedTarget","",""],[5,"LLVMRustAddAlwaysInlinePass","",""],[5,"LLVMRustLinkInExternalBitcode","",""],[5,"LLVMRustRunRestrictionPass","",""],[5,"LLVMRustMarkAllFunctionsNounwind","",""],[5,"LLVMRustOpenArchive","",""],[5,"LLVMRustArchiveReadSection","",""],[5,"LLVMRustDestroyArchive","",""],[5,"LLVMRustSetDLLExportStorageClass","",""],[5,"LLVMVersionMajor","",""],[5,"LLVMVersionMinor","",""],[5,"LLVMRustGetSectionName","",""],[5,"LLVMWriteTwineToString","",""],[5,"LLVMContextSetDiagnosticHandler","",""],[5,"LLVMUnpackOptimizationDiagnostic","",""],[5,"LLVMUnpackInlineAsmDiagnostic","",""],[5,"LLVMWriteDiagnosticInfoToString","",""],[5,"LLVMGetDiagInfoSeverity","",""],[5,"LLVMGetDiagInfoKind","",""],[5,"LLVMWriteDebugLocToString","",""],[5,"LLVMSetInlineAsmDiagnosticHandler","",""],[5,"LLVMWriteSMDiagnosticToString","",""],[5,"SetInstructionCallConv","",""],[5,"SetFunctionCallConv","",""],[5,"SetLinkage","",""],[5,"SetUnnamedAddr","",""],[5,"set_thread_local","",""],[5,"ConstICmp","",""],[5,"ConstFCmp","",""],[5,"SetFunctionAttribute","",""],[3,"TargetData","",""],[12,"lltd","","",12],[5,"mk_target_data","",""],[3,"ObjectFile","",""],[12,"llof","","",13],[3,"SectionIter","",""],[12,"llsi","","",14],[5,"mk_section_iter","",""],[5,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun."],[4,"RustString_opaque","",""],[6,"RustStringRef","",""],[5,"rust_llvm_string_write_impl","","Appending to a Rust string -- used by raw_rust_string_ostream."],[5,"build_string","",""],[5,"twine_to_string","",""],[5,"debug_loc_to_string","",""],[0,"diagnostics","rustc",""],[7,"DIAGNOSTICS","rustc::diagnostics",""],[0,"back","rustc",""],[0,"abi","rustc::back",""],[17,"BOX_FIELD_DROP_GLUE","rustc::back::abi",""],[17,"BOX_FIELD_BODY","",""],[17,"FAT_PTR_ADDR","","The first half of a fat pointer.\n- For a closure, this is the code address.\n- For an object or trait instance, this is the address of the box.\n- For a slice, this is the base address."],[17,"FAT_PTR_EXTRA","","The second half of a fat pointer.\n- For a closure, this is the address of the environment.\n- For an object or trait instance, this is the address of the vtable.\n- For a slice, this is the length."],[0,"archive","rustc::back","A helper class for dealing with static archives"],[17,"METADATA_FILENAME","rustc::back::archive",""],[11,"open","rustc_back::archive","Opens an existing static archive",31],[11,"remove_file","","Removes a file from this archive",31],[11,"files","","Lists all files in an archive",31],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",31],[11,"create","","Create a new static archive, ready for adding files.",32],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",32],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",32],[11,"add_file","","Adds an arbitrary file to this archive",32],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",32],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",32],[11,"new_in","rustc_back::tempdir","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",33],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",33],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",33],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",33],[11,"close","","Close and remove the temporary directory",33],[11,"drop","","",33],[11,"input","rustc_back::sha2","",34],[11,"reset","","",34],[11,"zero_until","","",34],[11,"next","","",34],[11,"full_buffer","","",34],[11,"position","","",34],[11,"remaining","","",34],[11,"size","","",34],[11,"new","","Construct a new instance of a SHA-256 digest.",35],[11,"input","","",35],[11,"result","","",35],[11,"reset","","",35],[11,"output_bits","","",35],[11,"fmt","rustc_back::svh","",36],[11,"eq","","",36],[11,"ne","","",36],[11,"clone","","",36],[11,"new","","",36],[11,"as_str","","",36],[11,"calculate","","",36],[11,"fmt","","",36],[11,"hash","rustc_back::svh::svh_visitor","",37],[11,"hash","","",38],[11,"hash","","",39],[11,"get_content","syntax::ast","",40],[11,"get_content","","",41],[11,"visit_mac","rustc_back::svh::svh_visitor","",42],[11,"visit_struct_def","","",42],[11,"visit_variant","","",42],[11,"visit_opt_lifetime_ref","","",42],[11,"visit_ident","","",42],[11,"visit_lifetime_ref","","",42],[11,"visit_lifetime_def","","",42],[11,"visit_expr","","",42],[11,"visit_stmt","","",42],[11,"visit_foreign_item","","",42],[11,"visit_item","","",42],[11,"visit_mod","","",42],[11,"visit_decl","","",42],[11,"visit_ty","","",42],[11,"visit_generics","","",42],[11,"visit_fn","","",42],[11,"visit_ty_method","","",42],[11,"visit_trait_item","","",42],[11,"visit_struct_field","","",42],[11,"visit_explicit_self","","",42],[11,"visit_path","","",42],[11,"visit_block","","",42],[11,"visit_pat","","",42],[11,"visit_local","","",42],[11,"visit_arm","","",42],[11,"to_string","rustc_back::target::apple_ios_base","",43],[11,"fmt","rustc_back::target","",44],[11,"clone","","",44],[11,"fmt","","",45],[11,"clone","","",45],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for\ncompilation, will certainly not work.",45],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",44],[11,"from_json","","Load a target descriptor from a JSON object.",44],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",44],[3,"ArchiveConfig","rustc::back::archive",""],[12,"handler","","",46],[12,"dst","","",46],[12,"lib_search_paths","","",46],[12,"slib_prefix","","",46],[12,"slib_suffix","","",46],[12,"maybe_ar_prog","","",46],[3,"Archive","",""],[3,"ArchiveBuilder","","Helper for adding many files to an archive with a single invocation of\n`ar`."],[5,"find_library","",""],[0,"arm","rustc::back",""],[5,"get_target_strs","rustc::back::arm",""],[0,"mips","rustc::back",""],[5,"get_target_strs","rustc::back::mips",""],[0,"mipsel","rustc::back",""],[5,"get_target_strs","rustc::back::mipsel",""],[0,"rpath","rustc::back",""],[3,"RPathConfig","rustc::back::rpath",""],[12,"used_crates","","",47],[12,"out_filename","","",47],[12,"is_like_osx","","",47],[12,"has_rpath","","",47],[12,"get_install_prefix_lib_path","","",47],[12,"realpath","","",47],[5,"get_rpath_flags","",""],[0,"svh","rustc::back","Calculation and management of a Strict Version Hash for crates"],[3,"Svh","rustc::back::svh",""],[0,"target_strs","rustc::back",""],[3,"t","rustc::back::target_strs",""],[12,"module_asm","","",48],[12,"data_layout","","",48],[12,"target_triple","","",48],[12,"cc_args","","",48],[0,"x86","rustc::back",""],[5,"get_target_strs","rustc::back::x86",""],[0,"x86_64","rustc::back",""],[5,"get_target_strs","rustc::back::x86_64",""],[0,"middle","rustc",""],[0,"astconv_util","rustc::middle","This module contains a simple utility routine\nused by both `typeck` and `const_eval`.\nAlmost certainly this could (and should) be refactored out of existence."],[5,"check_path_args","rustc::middle::astconv_util",""],[5,"prim_ty_to_ty","",""],[5,"ast_ty_to_prim_ty","",""],[17,"NO_REGIONS","",""],[17,"NO_TPS","",""],[0,"astencode","rustc::middle",""],[5,"encode_inlined_item","rustc::middle::astencode",""],[5,"decode_inlined_item","","Decodes an item from its AST in the cdata's metadata and adds it to the\nast-map."],[5,"encode_closure_kind","",""],[8,"vtable_decoder_helpers","",""],[10,"read_vec_per_param_space","","",49],[10,"read_vtable_res_with_key","","",49],[10,"read_vtable_res","","",49],[10,"read_vtable_param_res","","",49],[10,"read_vtable_origin","","",49],[11,"tr_intern","syntax::ast","",50],[11,"read_vec_per_param_space","rbml::reader","",51],[11,"read_vtable_res_with_key","","",51],[11,"read_vtable_res","","",51],[11,"read_vtable_param_res","","",51],[11,"read_vtable_origin","","",51],[0,"cfg","rustc::middle","Module that constructs a control-flow graph representing an item.\nUses `Graph` as the underlying representation."],[3,"CFG","rustc::middle::cfg",""],[12,"graph","","",52],[12,"entry","","",52],[12,"exit","","",52],[3,"CFGEdgeData","",""],[12,"exiting_scopes","","",53],[4,"CFGNodeData","",""],[13,"AST","","",54],[13,"Entry","","",54],[13,"Exit","","",54],[13,"Dummy","","",54],[13,"Unreachable","","",54],[0,"graphviz","",""],[3,"LabelledCFG","rustc::middle::cfg::graphviz",""],[12,"ast_map","","",55],[12,"cfg","","",55],[12,"name","","",55],[12,"labelled_edges","","`labelled_edges` controls whether we emit labels on the edges",55],[6,"Node","",""],[6,"Edge","",""],[11,"graph_id","","",55],[11,"node_id","","",55],[11,"node_label","","",55],[11,"edge_label","","",55],[11,"nodes","","",55],[11,"edges","","",55],[11,"source","","",55],[11,"target","","",55],[6,"CFGIndex","rustc::middle::cfg",""],[6,"CFGGraph","",""],[6,"CFGNode","",""],[6,"CFGEdge","",""],[11,"eq","","",54],[11,"ne","","",54],[11,"id","","",54],[11,"new","","",52],[11,"node_is_reachable","","",52],[0,"check_const","rustc::middle",""],[3,"ConstQualif","rustc::middle::check_const",""],[5,"check_crate","",""],[17,"PURE_CONST","",""],[17,"MUTABLE_MEM","",""],[17,"NEEDS_DROP","",""],[17,"PREFER_IN_PLACE","",""],[17,"NON_ZERO_SIZED","",""],[17,"HAS_STATIC_BORROWS","",""],[17,"NOT_CONST","",""],[17,"NON_STATIC_BORROWS","",""],[11,"hash","","",56],[11,"cmp","","",56],[11,"partial_cmp","","",56],[11,"lt","","",56],[11,"le","","",56],[11,"gt","","",56],[11,"ge","","",56],[11,"clone","","",56],[11,"eq","","",56],[11,"ne","","",56],[11,"decode","","",56],[11,"encode","","",56],[11,"empty","","Returns an empty set of flags.",56],[11,"all","","Returns the set containing all flags.",56],[11,"bits","","Returns the raw value of the flags currently stored.",56],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",56],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",56],[11,"is_empty","","Returns `true` if no flags are currently stored.",56],[11,"is_all","","Returns `true` if all flags are currently set.",56],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",56],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",56],[11,"insert","","Inserts the specified flags in-place.",56],[11,"remove","","Removes the specified flags in-place.",56],[11,"toggle","","Toggles the specified flags in-place.",56],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",56],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",56],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",56],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",56],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",56],[0,"check_static_recursion","rustc::middle",""],[5,"check_crate","rustc::middle::check_static_recursion",""],[5,"check_item_recursion","",""],[0,"check_loop","rustc::middle",""],[5,"check_crate","rustc::middle::check_loop",""],[0,"check_match","rustc::middle",""],[3,"MatchCheckCtxt","rustc::middle::check_match",""],[12,"tcx","","",57],[12,"param_env","","",57],[3,"StaticInliner","",""],[12,"tcx","","",58],[12,"failed","","",58],[12,"renaming_map","","",58],[4,"Constructor","",""],[13,"Single","","The constructor of all patterns that don't vary by constructor,\ne.g. struct patterns and fixed-length arrays.",59],[13,"Variant","","Enum variants.",59],[13,"ConstantValue","","Literal values.",59],[13,"ConstantRange","","Ranges of literal values (2..5).",59],[13,"Slice","","Array patterns of length n.",59],[13,"SliceWithSubslice","","Array patterns with a subslice.",59],[5,"check_crate","",""],[5,"constructor_arity","","This computes the arity of a constructor. The arity of a constructor\nis how many subpattern patterns of that constructor should be expanded to."],[5,"specialize","","This is the main specialization step. It expands the first pattern in the given row\ninto `arity` patterns based on the constructor. For most patterns, the step is trivial,\nfor instance tuple patterns are flattened and box patterns expand into their inner pattern."],[17,"DUMMY_WILD_PAT","",""],[11,"eq","","",59],[11,"ne","","",59],[11,"clone","","",59],[11,"visit_expr","","",57],[11,"visit_local","","",57],[11,"visit_fn","","",57],[11,"new","","",58],[11,"fold_pat","","",58],[0,"check_rvalues","rustc::middle",""],[5,"check_crate","rustc::middle::check_rvalues",""],[0,"const_eval","rustc::middle",""],[3,"ConstEvalErr","rustc::middle::const_eval",""],[12,"span","","",60],[12,"kind","","",60],[4,"const_val","",""],[13,"const_float","","",61],[13,"const_int","","",61],[13,"const_uint","","",61],[13,"const_str","","",61],[13,"const_binary","","",61],[13,"const_bool","","",61],[4,"ErrKind","",""],[13,"CannotCast","","",62],[13,"CannotCastTo","","",62],[13,"InvalidOpForBools","","",62],[13,"InvalidOpForFloats","","",62],[13,"InvalidOpForIntUint","","",62],[13,"InvalidOpForUintInt","","",62],[13,"NegateOnString","","",62],[13,"NegateOnBoolean","","",62],[13,"NegateOnBinary","","",62],[13,"NotOnFloat","","",62],[13,"NotOnString","","",62],[13,"NotOnBinary","","",62],[13,"AddiWithOverflow","","",62],[13,"SubiWithOverflow","","",62],[13,"MuliWithOverflow","","",62],[13,"AdduWithOverflow","","",62],[13,"SubuWithOverflow","","",62],[13,"MuluWithOverflow","","",62],[13,"DivideByZero","","",62],[13,"DivideWithOverflow","","",62],[13,"ModuloByZero","","",62],[13,"ModuloWithOverflow","","",62],[13,"MissingStructField","","",62],[13,"NonConstPath","","",62],[13,"NonConstStruct","","",62],[13,"TupleIndexOutOfBounds","","",62],[13,"MiscBinaryOp","","",62],[13,"MiscCatchAll","","",62],[5,"lookup_const_by_id","",""],[5,"const_expr_to_pat","",""],[5,"eval_const_expr","",""],[5,"eval_const_expr_partial","",""],[5,"compare_const_vals","",""],[5,"compare_lit_exprs","",""],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[11,"clone","","",60],[11,"clone","","",62],[11,"description","","",60],[0,"dataflow","rustc::middle","A module for propagating forward dataflow information. The analysis\nassumes that the items to be propagated can be represented as bits\nand thus uses bitvectors. Your job is simply to specify the so-called\nGEN and KILL bits for each expression."],[3,"DataFlowContext","rustc::middle::dataflow",""],[4,"EntryOrExit","",""],[13,"Entry","","",63],[13,"Exit","","",63],[8,"BitwiseOperator","",""],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",64],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used."],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",65],[11,"fmt","","",63],[11,"clone","","",66],[11,"pre","","",66],[11,"new","","",66],[11,"add_gen","","Indicates that `id` generates `bit`",66],[11,"add_kill","","Indicates that `id` kills `bit`",66],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",66],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",66],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",66],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",66],[11,"propagate","","Performs the data flow analysis.",66],[0,"dead","rustc::middle",""],[5,"check_crate","rustc::middle::dead",""],[0,"def","rustc::middle",""],[3,"PathResolution","rustc::middle::def","The result of resolving a path.\nBefore type checking completes, `depth` represents the number of\ntrailing segments which are yet unresolved. Afterwards, if there\nwere no errors, all paths should be fully resolved, with `depth`\nset to `0` and `base_def` representing the final resolution."],[12,"base_def","","",67],[12,"last_private","","",67],[12,"depth","","",67],[3,"Export","",""],[12,"name","","",68],[12,"def_id","","",68],[4,"Def","",""],[13,"DefFn","","",69],[13,"DefSelfTy","","",69],[13,"DefMod","","",69],[13,"DefForeignMod","","",69],[13,"DefStatic","","",69],[13,"DefConst","","",69],[13,"DefLocal","","",69],[13,"DefVariant","","",69],[13,"DefTy","","",69],[13,"DefAssociatedTy","","",69],[13,"DefTrait","","",69],[13,"DefPrimTy","","",69],[13,"DefTyParam","","",69],[13,"DefUse","","",69],[13,"DefUpvar","","",69],[13,"DefStruct","","Note that if it's a tuple struct's definition, the node id of the ast::DefId\nmay either refer to the item definition's id or the StructDef.ctor_id.",69],[13,"DefRegion","","",69],[13,"DefLabel","","",69],[13,"DefMethod","","",69],[4,"MethodProvenance","",""],[13,"FromTrait","","",70],[13,"FromImpl","","",70],[6,"DefMap","",""],[6,"ExportMap","",""],[11,"fmt","","",69],[11,"hash","","",69],[11,"decode","","",69],[11,"encode","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"clone","","",69],[11,"fmt","","",67],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",67],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",67],[11,"fmt","","",70],[11,"hash","","",70],[11,"decode","","",70],[11,"encode","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"clone","","",70],[11,"map","","",70],[11,"local_node_id","","",69],[11,"def_id","","",69],[11,"variant_def_ids","","",69],[0,"dependency_format","rustc::middle","Resolution of mixing rlibs and dylibs"],[5,"calculate","rustc::middle::dependency_format",""],[6,"DependencyList","","A list of dependencies for a certain crate type."],[6,"Dependencies","","A mapping of all required dependencies for a particular flavor of output."],[0,"effect","rustc::middle","Enforces the Rust effect system. Currently there is just one effect,\n`unsafe`."],[5,"check_crate","rustc::middle::effect",""],[0,"entry","rustc::middle",""],[5,"find_entry_point","rustc::middle::entry",""],[0,"expr_use_visitor","rustc::middle","A different sort of visitor for walking fn bodies.  Unlike the\nnormal visitor, which just walks the entire body in one shot, the\n`ExprUseVisitor` determines how expressions are being used."],[3,"ExprUseVisitor","rustc::middle::expr_use_visitor",""],[4,"LoanCause","",""],[13,"ClosureCapture","","",71],[13,"AddrOf","","",71],[13,"AutoRef","","",71],[13,"RefBinding","","",71],[13,"OverloadedOperator","","",71],[13,"ClosureInvocation","","",71],[13,"ForLoop","","",71],[13,"MatchDiscriminant","","",71],[4,"ConsumeMode","",""],[13,"Copy","","",72],[13,"Move","","",72],[4,"MoveReason","",""],[13,"DirectRefMove","","",73],[13,"PatBindingMove","","",73],[13,"CaptureMove","","",73],[4,"MatchMode","",""],[13,"NonBindingMatch","","",74],[13,"BorrowingMatch","","",74],[13,"CopyingMatch","","",74],[13,"MovingMatch","","",74],[4,"MutateMode","",""],[13,"Init","","",75],[13,"JustWrite","","",75],[13,"WriteAndRead","","",75],[8,"Delegate","","This trait defines the callbacks you can expect to receive when\nemploying the ExprUseVisitor."],[10,"consume","","",76],[10,"matched_pat","","",76],[10,"consume_pat","","",76],[10,"borrow","","",76],[10,"decl_without_init","","",76],[10,"mutate","","",76],[11,"fmt","","",71],[11,"eq","","",71],[11,"ne","","",71],[11,"fmt","","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"fmt","","",73],[11,"eq","","",73],[11,"ne","","",73],[11,"fmt","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"fmt","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"new","","",77],[11,"walk_fn","","",77],[11,"consume_expr","","",77],[11,"walk_expr","","",77],[0,"fast_reject","rustc::middle",""],[4,"SimplifiedType","rustc::middle::fast_reject","See `simplify_type"],[13,"BoolSimplifiedType","","",78],[13,"CharSimplifiedType","","",78],[13,"IntSimplifiedType","","",78],[13,"UintSimplifiedType","","",78],[13,"FloatSimplifiedType","","",78],[13,"EnumSimplifiedType","","",78],[13,"StrSimplifiedType","","",78],[13,"VecSimplifiedType","","",78],[13,"PtrSimplifiedType","","",78],[13,"TupleSimplifiedType","","",78],[13,"TraitSimplifiedType","","",78],[13,"StructSimplifiedType","","",78],[13,"ClosureSimplifiedType","","",78],[13,"FunctionSimplifiedType","","",78],[13,"ParameterSimplifiedType","","",78],[5,"simplify_type","","Tries to simplify a type by dropping type parameters, deref'ing away any reference types, etc.\nThe idea is to get something simple that we can use to quickly decide if two types could unify\nduring method lookup."],[11,"hash","","",78],[11,"eq","","",78],[11,"ne","","",78],[11,"clone","","",78],[0,"graph","rustc::middle","A graph module for use in dataflow, region resolution, and elsewhere."],[3,"Graph","rustc::middle::graph",""],[3,"Node","",""],[12,"data","","",79],[3,"Edge","",""],[12,"data","","",80],[3,"NodeIndex","",""],[3,"EdgeIndex","",""],[3,"Direction","",""],[3,"DepthFirstTraversal","",""],[5,"each_edge_index","",""],[17,"InvalidNodeIndex","",""],[17,"InvalidEdgeIndex","",""],[17,"Outgoing","",""],[17,"Incoming","",""],[11,"fmt","","",80],[11,"fmt","","",81],[11,"eq","","",81],[11,"ne","","",81],[11,"clone","","",81],[11,"fmt","","",82],[11,"eq","","",82],[11,"ne","","",82],[11,"fmt","","",83],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",81],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",82],[11,"new","","",84],[11,"with_capacity","","",84],[11,"all_nodes","","",84],[11,"all_edges","","",84],[11,"next_node_index","","",84],[11,"add_node","","",84],[11,"mut_node_data","","",84],[11,"node_data","","",84],[11,"node","","",84],[11,"next_edge_index","","",84],[11,"add_edge","","",84],[11,"mut_edge_data","","",84],[11,"edge_data","","",84],[11,"edge","","",84],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",84],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",84],[11,"each_node","","Iterates over all edges defined in the graph.",84],[11,"each_edge","","Iterates over all edges defined in the graph",84],[11,"each_outgoing_edge","","Iterates over all outgoing edges from the node `from`",84],[11,"each_incoming_edge","","Iterates over all incoming edges to the node `target`",84],[11,"each_adjacent_edge","","Iterates over all edges adjacent to the node `node`\nin the direction `dir` (either `Outgoing` or `Incoming)",84],[11,"iterate_until_fixed_point","","",84],[11,"depth_traverse","","",84],[6,"Item","",""],[11,"next","","",85],[11,"source","","",80],[11,"target","","",80],[0,"intrinsicck","rustc::middle",""],[5,"check_crate","rustc::middle::intrinsicck",""],[0,"infer","rustc::middle","See the Book for more information."],[3,"TypeFreshener","rustc::middle::infer",""],[3,"InferCtxt","",""],[12,"tcx","","",86],[3,"TypeTrace","","The trace designates the path through inference that we took to\nencounter an error or subtyping constraint."],[3,"CombinedSnapshot","",""],[4,"TypeOrigin","","Why did we require that the two types be related?"],[13,"Misc","","",87],[13,"MethodCompatCheck","","",87],[13,"ExprAssignable","","",87],[13,"RelateTraitRefs","","",87],[13,"RelateSelfType","","",87],[13,"RelateOutputImplTypes","","",87],[13,"MatchExpressionArm","","",87],[13,"IfExpression","","",87],[13,"IfExpressionWithNoElse","","",87],[13,"RangeExpression","","",87],[13,"EquatePredicate","","",87],[4,"ValuePairs","","See `error_reporting.rs` for more details"],[13,"Types","","",88],[13,"TraitRefs","","",88],[13,"PolyTraitRefs","","",88],[4,"SubregionOrigin","","The origin of a `r1 <= r2` constraint."],[13,"Subtype","","",89],[13,"InfStackClosure","","",89],[13,"InvokeClosure","","",89],[13,"DerefPointer","","",89],[13,"FreeVariable","","",89],[13,"IndexSlice","","",89],[13,"RelateObjectBound","","",89],[13,"RelateParamBound","","",89],[13,"RelateRegionParamBound","","",89],[13,"RelateDefaultParamBound","","",89],[13,"Reborrow","","",89],[13,"ReborrowUpvar","","",89],[13,"ReferenceOutlivesReferent","","",89],[13,"ExprTypeIsNotInScope","","",89],[13,"BindingTypeIsNotValidAtDecl","","",89],[13,"CallRcvr","","",89],[13,"CallArg","","",89],[13,"CallReturn","","",89],[13,"Operand","","",89],[13,"AddrOf","","",89],[13,"AutoBorrow","","",89],[13,"SafeDestructor","","",89],[4,"LateBoundRegionConversionTime","","Times when we replace late-bound regions with variables:"],[13,"FnCall","","when a fn is called",90],[13,"HigherRankedType","","when two higher-ranked types are compared",90],[13,"AssocTypeProjection","","when projecting an associated type",90],[4,"RegionVariableOrigin","","Reasons to create a region inference variable"],[13,"MiscVariable","","",91],[13,"PatternRegion","","",91],[13,"AddrOfRegion","","",91],[13,"Autoref","","",91],[13,"Coercion","","",91],[13,"EarlyBoundRegion","","",91],[13,"LateBoundRegion","","",91],[13,"UpvarRegion","","",91],[13,"BoundRegionInCoherence","","",91],[4,"fixup_err","",""],[13,"unresolved_int_ty","","",92],[13,"unresolved_float_ty","","",92],[13,"unresolved_ty","","",92],[5,"fixup_err_to_string","",""],[5,"new_infer_ctxt","",""],[5,"common_supertype","","Computes the least upper-bound of `a` and `b`. If this is not possible, reports an error and\nreturns ty::err."],[5,"mk_subty","",""],[5,"can_mk_subty","",""],[5,"can_mk_eqty","",""],[5,"mk_subr","",""],[5,"mk_eqty","",""],[5,"mk_sub_poly_trait_refs","",""],[5,"uok","",""],[0,"bivariate","","Applies the \"bivariance relationship\" to two types and/or regions.\nIf (A,B) are bivariant then either A <: B or B <: A. It occurs\nwhen type/lifetime parameters are unconstrained. Usually this is\nan error, but we permit it in the specific case where a type\nparameter is constrained in a where-clause via an associated type."],[3,"Bivariate","rustc::middle::infer::bivariate",""],[5,"Bivariate","",""],[11,"tag","","",93],[11,"fields","","",93],[11,"tys_with_variance","","",93],[11,"regions_with_variance","","",93],[11,"regions","","",93],[11,"mts","","",93],[11,"unsafeties","","",93],[11,"builtin_bounds","","",93],[11,"tys","","",93],[11,"binders","","",93],[0,"combine","rustc::middle::infer",""],[3,"CombineFields","rustc::middle::infer::combine",""],[12,"infcx","","",94],[12,"a_is_expected","","",94],[12,"trace","","",94],[5,"expected_found","",""],[5,"super_tys","",""],[8,"Combine","",""],[11,"tcx","","",95],[10,"tag","","",95],[10,"fields","","",95],[11,"infcx","","",95],[11,"a_is_expected","","",95],[11,"trace","","",95],[11,"equate","","",95],[11,"bivariate","","",95],[11,"sub","","",95],[11,"lub","","",95],[11,"glb","","",95],[10,"mts","","",95],[10,"tys_with_variance","","",95],[10,"tys","","",95],[10,"regions_with_variance","","",95],[10,"regions","","",95],[11,"substs","","",95],[11,"substs_variances","","",95],[11,"bare_fn_tys","","",95],[11,"fn_sigs","","",95],[11,"args","","",95],[10,"unsafeties","","",95],[11,"abi","","",95],[11,"projection_tys","","",95],[11,"projection_predicates","","",95],[11,"projection_bounds","","",95],[11,"existential_bounds","","",95],[10,"builtin_bounds","","",95],[11,"trait_refs","","",95],[10,"binders","","",95],[8,"Combineable","",""],[10,"combine","","",96],[11,"combine","alloc::rc","",97],[11,"clone","rustc::middle::infer::combine","",94],[11,"switch_expected","","",94],[11,"instantiate","","",94],[0,"equate","rustc::middle::infer",""],[3,"Equate","rustc::middle::infer::equate",""],[5,"Equate","",""],[11,"tag","","",98],[11,"fields","","",98],[11,"tys_with_variance","","",98],[11,"regions_with_variance","","",98],[11,"regions","","",98],[11,"mts","","",98],[11,"unsafeties","","",98],[11,"builtin_bounds","","",98],[11,"tys","","",98],[11,"binders","","",98],[0,"error_reporting","rustc::middle::infer","Error Reporting Code for the inference engine"],[8,"ErrorReporting","rustc::middle::infer::error_reporting",""],[10,"report_region_errors","","",99],[10,"process_errors","","",99],[10,"report_type_error","","",99],[10,"report_and_explain_type_error","","",99],[10,"values_str","","",99],[10,"expected_found_str","","",99],[10,"report_concrete_failure","","",99],[10,"report_generic_bound_failure","","",99],[10,"report_sub_sup_conflict","","",99],[10,"report_sup_sup_conflict","","",99],[10,"report_processed_errors","","",99],[10,"give_suggestion","","",99],[8,"Resolvable","",""],[10,"resolve","","",100],[10,"contains_error","","",100],[11,"report_region_errors","rustc::middle::infer","",86],[11,"process_errors","","",86],[11,"report_type_error","","",86],[11,"report_and_explain_type_error","","",86],[11,"values_str","","Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\nerror.",86],[11,"expected_found_str","","",86],[11,"report_generic_bound_failure","","",86],[11,"report_concrete_failure","","",86],[11,"report_sub_sup_conflict","","",86],[11,"report_sup_sup_conflict","","",86],[11,"report_processed_errors","","",86],[11,"give_suggestion","","",86],[11,"resolve","alloc::rc","",97],[11,"contains_error","","",97],[0,"glb","rustc::middle::infer",""],[3,"Glb","rustc::middle::infer::glb","\"Greatest lower bound\" (common subtype)"],[5,"Glb","",""],[11,"tag","","",101],[11,"fields","","",101],[11,"tys_with_variance","","",101],[11,"regions_with_variance","","",101],[11,"mts","","",101],[11,"unsafeties","","",101],[11,"builtin_bounds","","",101],[11,"regions","","",101],[11,"tys","","",101],[11,"binders","","",101],[0,"lattice","rustc::middle::infer","# Lattice Variables"],[5,"super_lattice_tys","rustc::middle::infer::lattice",""],[8,"LatticeDir","",""],[10,"relate_bound","","",102],[11,"relate_bound","rustc::middle::infer::glb","",101],[0,"lub","rustc::middle::infer",""],[3,"Lub","rustc::middle::infer::lub","\"Least upper bound\" (common supertype)"],[5,"Lub","",""],[11,"tag","","",103],[11,"fields","","",103],[11,"tys_with_variance","","",103],[11,"regions_with_variance","","",103],[11,"mts","","",103],[11,"unsafeties","","",103],[11,"builtin_bounds","","",103],[11,"regions","","",103],[11,"tys","","",103],[11,"binders","","",103],[0,"region_inference","rustc::middle::infer","See README.md"],[3,"TwoRegions","rustc::middle::infer::region_inference",""],[3,"SameRegions","","SameRegions is used to group regions that we think are the same and would\nlike to indicate so to the user.\nFor example, the following function\n```\nstruct Foo { bar: int }\nfn foo2<'a, 'b>(x: &'a Foo) -> &'b int {\n   &x.bar\n}\n```\nwould report an error because we expect 'a and 'b to match, and so we group\n'a and 'b together inside a SameRegions struct"],[12,"scope_id","","",104],[12,"regions","","",104],[3,"RegionVarBindings","",""],[3,"RegionSnapshot","",""],[4,"Constraint","",""],[13,"ConstrainVarSubVar","","",105],[13,"ConstrainRegSubVar","","",105],[13,"ConstrainVarSubReg","","",105],[4,"Verify","",""],[13,"VerifyRegSubReg","","",106],[13,"VerifyGenericBound","","",106],[4,"GenericKind","",""],[13,"Param","","",107],[13,"Projection","","",107],[4,"UndoLogEntry","",""],[13,"OpenSnapshot","","",108],[13,"CommitedSnapshot","","",108],[13,"AddVar","","",108],[13,"AddConstraint","","",108],[13,"AddVerify","","",108],[13,"AddGiven","","",108],[13,"AddCombination","","",108],[4,"CombineMapType","",""],[13,"Lub","","",109],[13,"Glb","","",109],[4,"RegionResolutionError","",""],[13,"ConcreteFailure","","`ConcreteFailure(o, a, b)`:",110],[13,"GenericBoundFailure","","`GenericBoundFailure(p, s, a, bs)",110],[13,"SubSupConflict","","`SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:",110],[13,"SupSupConflict","","`SupSupConflict(v, origin1, r1, origin2, r2)`:",110],[13,"ProcessedErrors","","For subsets of `ConcreteFailure` and `SubSupConflict`, we can derive\nmore specific errors message by suggesting to the user where they\nshould put a lifetime. In those cases we process and put those errors\ninto `ProcessedErrors` before we do any reporting.",110],[4,"VarValue","",""],[13,"NoValue","","",111],[13,"Value","","",111],[13,"ErrorValue","","",111],[6,"CombineMap","",""],[11,"fmt","","",105],[11,"hash","","",105],[11,"eq","","",105],[11,"ne","","",105],[11,"clone","","",105],[11,"eq","","",107],[11,"ne","","",107],[11,"fmt","","",107],[11,"clone","","",107],[11,"hash","","",112],[11,"eq","","",112],[11,"ne","","",112],[11,"eq","","",108],[11,"ne","","",108],[11,"eq","","",109],[11,"ne","","",109],[11,"fmt","","",110],[11,"clone","","",110],[11,"fmt","","",104],[11,"clone","","",104],[11,"contains","","",104],[11,"push","","",104],[11,"fmt","","",113],[11,"new","","",114],[11,"start_snapshot","","",114],[11,"commit","","",114],[11,"rollback_to","","",114],[11,"num_vars","","",114],[11,"new_region_var","","",114],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto \"escape\" out into error messages or the code at large.",114],[11,"new_bound","","",114],[11,"add_given","","",114],[11,"make_eqregion","","",114],[11,"make_subregion","","",114],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",114],[11,"lub_regions","","",114],[11,"glb_regions","","",114],[11,"resolve_var","","",114],[11,"combine_vars","","",114],[11,"vars_created_since_snapshot","","",114],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",114],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",114],[11,"repr","","",105],[11,"repr","","",106],[11,"repr","","",111],[11,"repr","","",107],[11,"user_string","","",107],[11,"to_ty","","",107],[0,"resolve","rustc::middle::infer",""],[3,"OpportunisticTypeResolver","rustc::middle::infer::resolve","The opportunistic type resolver can be used at any time. It simply replaces\ntype variables that have been unified with the things they have\nbeen unified with (similar to `shallow_resolve`, but deep). This is\nuseful for printing messages etc but also required at various\npoints for correctness."],[5,"fully_resolve","","Full type resolution replaces all type and region variables with\ntheir concrete results. If any variable cannot be replaced (never unified, etc)\nthen an `Err` result is returned."],[11,"new","","",115],[11,"tcx","","",115],[11,"fold_ty","","",115],[11,"new","rustc::middle::infer","",116],[11,"tcx","","",116],[11,"fold_region","","",116],[11,"fold_ty","","",116],[0,"sub","",""],[3,"Sub","rustc::middle::infer::sub","\"Greatest lower bound\" (common subtype)"],[5,"Sub","",""],[11,"tag","","",117],[11,"fields","","",117],[11,"tys_with_variance","","",117],[11,"regions_with_variance","","",117],[11,"regions","","",117],[11,"mts","","",117],[11,"unsafeties","","",117],[11,"builtin_bounds","","",117],[11,"tys","","",117],[11,"binders","","",117],[0,"type_variable","rustc::middle::infer",""],[3,"TypeVariableTable","rustc::middle::infer::type_variable",""],[3,"Snapshot","",""],[4,"RelationDir","",""],[13,"SubtypeOf","","",118],[13,"SupertypeOf","","",118],[13,"EqTo","","",118],[13,"BiTo","","",118],[11,"fmt","","",118],[11,"eq","","",118],[11,"ne","","",118],[11,"new","","",119],[11,"var_diverges","","",119],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",119],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",119],[11,"new_var","","",119],[11,"probe","","",119],[11,"replace_if_possible","","",119],[11,"snapshot","","",119],[11,"rollback_to","","",119],[11,"commit","","",119],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",119],[0,"unify","rustc::middle::infer",""],[3,"UnificationTable","rustc::middle::infer::unify","Table of unification keys and their values."],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes\nmade during the snapshot may either be *committed* or *rolled back*."],[3,"Node","","Internal type used to represent the result of a `get()` operation.\nConveys the current root and value of the key."],[12,"key","","",120],[12,"value","","",120],[12,"rank","","",120],[3,"Delegate","",""],[4,"VarValue","","Value of a unification key. We implement Tarjan's union-find\nalgorithm: when two keys are unified, one of them is converted\ninto a \"redirect\" pointing at the other. These redirects form a\nDAG: the roots of the DAG (nodes that are not redirected) are each\nassociated with a value of type `V` and a rank. The rank is used\nto keep the DAG relatively balanced, which helps keep the running\ntime of the algorithm under control. For more information, see\n<http://en.wikipedia.org/wiki/Disjoint-set_data_structure>."],[13,"Redirect","","",121],[13,"Root","","",121],[5,"err","",""],[8,"UnifyKey","","This trait is implemented by any type that can serve as a type\nvariable. We call such variables *unification keys*. For example,\nthis trait is implemented by `IntVid`, which represents integral\nvariables."],[16,"Value","rustc::middle::infer::unify::UnifyKey",""],[10,"index","rustc::middle::infer::unify","",122],[10,"from_index","","",122],[10,"unification_table","","",122],[10,"tag","","",122],[8,"UnifyValue","","Trait for valid types that a type variable can be set to. Note that\nthis is typically not the end type that the value will take on, but\nrather an `Option` wrapper (where `None` represents a variable\nwhose value is not yet set)."],[8,"SimplyUnifiable","","Indicates a type that does not have any kind of subtyping\nrelationship."],[10,"to_type","","",123],[10,"to_type_err","","",123],[8,"InferCtxtMethodsForSimplyUnifiableTypes","",""],[10,"simple_vars","","",124],[10,"simple_var_t","","",124],[10,"probe_var","","",124],[11,"fmt","","",121],[11,"clone","","",121],[11,"eq","","",121],[11,"ne","","",121],[11,"new","","",125],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a \"LIFO\" (stack) order.",125],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",125],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",125],[11,"new_key","","",125],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path\ncompression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure",125],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! Also, we must be in the\nmiddle of a snapshot.",125],[11,"unify","","Either redirects node_a to node_b or vice versa, depending on the relative rank. Returns\nthe new root and rank. You should then update the value of the new root to something\nsuitable.",125],[6,"Value","",""],[6,"Undo","",""],[11,"reverse","","",126],[11,"simple_vars","rustc::middle::infer","Unifies two simple keys. Because simple keys do not have any subtyping relationships, if\nboth keys have already been associated with a value, then those two values must be the\nsame.",86],[11,"simple_var_t","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",86],[11,"probe_var","","",86],[6,"Value","rustc::middle::infer::unify",""],[6,"Value","",""],[11,"to_type","syntax::ast","",127],[11,"to_type_err","","",127],[6,"Bound","rustc::middle::infer",""],[6,"cres","",""],[6,"ures","",""],[6,"fres","",""],[6,"SkolemizationMap","","A map returned by `skolemize_late_bound_regions()` indicating the skolemized\nregion that each late-bound region was replaced with."],[11,"fmt","","",87],[11,"clone","","",87],[11,"fmt","","",88],[11,"clone","","",88],[11,"fmt","","",128],[11,"clone","","",128],[11,"fmt","","",89],[11,"clone","","",89],[11,"fmt","","",90],[11,"clone","","",90],[11,"fmt","","",91],[11,"clone","","",91],[11,"fmt","","",92],[11,"freshen","","",86],[11,"type_var_diverges","","",86],[11,"freshener","","",86],[11,"type_is_unconstrained_numeric","","",86],[11,"combine_fields","","",86],[11,"equate","","",86],[11,"sub","","",86],[11,"lub","","",86],[11,"commit_unconditionally","","Execute `f` and commit the bindings",86],[11,"commit_if_ok","","Execute `f` and commit the bindings if successful",86],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",86],[11,"try","","Execute `f`, unroll bindings on panic",86],[11,"probe","","Execute `f` then unroll any bindings it creates",86],[11,"add_given","","",86],[11,"sub_types","","",86],[11,"eq_types","","",86],[11,"sub_trait_refs","","",86],[11,"sub_poly_trait_refs","","",86],[11,"skolemize_late_bound_regions","","See `higher_ranked::skolemize_late_bound_regions`",86],[11,"leak_check","","See `higher_ranked::leak_check`",86],[11,"plug_leaks","","See `higher_ranked::plug_leaks`",86],[11,"equality_predicate","","",86],[11,"region_outlives_predicate","","",86],[11,"next_ty_var_id","","",86],[11,"next_ty_var","","",86],[11,"next_diverging_ty_var","","",86],[11,"next_ty_vars","","",86],[11,"next_int_var_id","","",86],[11,"next_float_var_id","","",86],[11,"next_region_var","","",86],[11,"region_vars_for_defs","","",86],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",86],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",86],[11,"fresh_bound_region","","",86],[11,"resolve_regions_and_report_errors","","",86],[11,"ty_to_string","","",86],[11,"tys_to_string","","",86],[11,"trait_ref_to_string","","",86],[11,"shallow_resolve","","",86],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",86],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",86],[11,"type_error_message_str","","",86],[11,"type_error_message_str_with_expected","","",86],[11,"type_error_message","","",86],[11,"report_mismatched_types","","",86],[11,"replace_late_bound_regions_with_fresh_var","","",86],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",86],[11,"can_equate","","",86],[11,"span","","",128],[11,"types","","",128],[11,"dummy","","",128],[11,"repr","","",128],[11,"span","","",87],[11,"repr","","",87],[11,"span","","",89],[11,"repr","","",89],[11,"span","","",91],[11,"repr","","",91],[0,"lang_items","rustc::middle",""],[3,"LanguageItems","rustc::middle::lang_items",""],[12,"items","","",129],[12,"missing","","",129],[4,"LangItem","",""],[13,"SendTraitLangItem","","",130],[13,"SizedTraitLangItem","","",130],[13,"CopyTraitLangItem","","",130],[13,"SyncTraitLangItem","","",130],[13,"DropTraitLangItem","","",130],[13,"AddTraitLangItem","","",130],[13,"SubTraitLangItem","","",130],[13,"MulTraitLangItem","","",130],[13,"DivTraitLangItem","","",130],[13,"RemTraitLangItem","","",130],[13,"NegTraitLangItem","","",130],[13,"NotTraitLangItem","","",130],[13,"BitXorTraitLangItem","","",130],[13,"BitAndTraitLangItem","","",130],[13,"BitOrTraitLangItem","","",130],[13,"ShlTraitLangItem","","",130],[13,"ShrTraitLangItem","","",130],[13,"IndexTraitLangItem","","",130],[13,"IndexMutTraitLangItem","","",130],[13,"RangeStructLangItem","","",130],[13,"RangeFromStructLangItem","","",130],[13,"RangeToStructLangItem","","",130],[13,"RangeFullStructLangItem","","",130],[13,"UnsafeCellTypeLangItem","","",130],[13,"DerefTraitLangItem","","",130],[13,"DerefMutTraitLangItem","","",130],[13,"FnTraitLangItem","","",130],[13,"FnMutTraitLangItem","","",130],[13,"FnOnceTraitLangItem","","",130],[13,"EqTraitLangItem","","",130],[13,"OrdTraitLangItem","","",130],[13,"StrEqFnLangItem","","",130],[13,"PanicFnLangItem","","",130],[13,"PanicBoundsCheckFnLangItem","","",130],[13,"PanicFmtLangItem","","",130],[13,"ExchangeMallocFnLangItem","","",130],[13,"ExchangeFreeFnLangItem","","",130],[13,"StrDupUniqFnLangItem","","",130],[13,"StartFnLangItem","","",130],[13,"TyDescStructLangItem","","",130],[13,"OpaqueStructLangItem","","",130],[13,"EhPersonalityLangItem","","",130],[13,"ExchangeHeapLangItem","","",130],[13,"OwnedBoxLangItem","","",130],[13,"PhantomFnItem","","",130],[13,"PhantomDataItem","","",130],[13,"CovariantTypeItem","","",130],[13,"ContravariantTypeItem","","",130],[13,"InvariantTypeItem","","",130],[13,"CovariantLifetimeItem","","",130],[13,"ContravariantLifetimeItem","","",130],[13,"InvariantLifetimeItem","","",130],[13,"NoCopyItem","","",130],[13,"ManagedItem","","",130],[13,"NonZeroItem","","",130],[13,"StackExhaustedLangItem","","",130],[13,"DebugTraitLangItem","","",130],[5,"extract","",""],[5,"collect_language_items","",""],[11,"hash","","",130],[11,"eq","","",130],[11,"ne","","",130],[11,"from_i64","","",130],[11,"from_u64","","",130],[11,"new","","",129],[11,"items","","",129],[11,"item_name","","",129],[11,"require","","",129],[11,"from_builtin_kind","","",129],[11,"to_builtin_kind","","",129],[11,"fn_trait_kind","","",129],[11,"send_trait","","",129],[11,"sized_trait","","",129],[11,"copy_trait","","",129],[11,"sync_trait","","",129],[11,"drop_trait","","",129],[11,"add_trait","","",129],[11,"sub_trait","","",129],[11,"mul_trait","","",129],[11,"div_trait","","",129],[11,"rem_trait","","",129],[11,"neg_trait","","",129],[11,"not_trait","","",129],[11,"bitxor_trait","","",129],[11,"bitand_trait","","",129],[11,"bitor_trait","","",129],[11,"shl_trait","","",129],[11,"shr_trait","","",129],[11,"index_trait","","",129],[11,"index_mut_trait","","",129],[11,"range_struct","","",129],[11,"range_from_struct","","",129],[11,"range_to_struct","","",129],[11,"range_full_struct","","",129],[11,"unsafe_cell_type","","",129],[11,"deref_trait","","",129],[11,"deref_mut_trait","","",129],[11,"fn_trait","","",129],[11,"fn_mut_trait","","",129],[11,"fn_once_trait","","",129],[11,"eq_trait","","",129],[11,"ord_trait","","",129],[11,"str_eq_fn","","",129],[11,"panic_fn","","",129],[11,"panic_bounds_check_fn","","",129],[11,"panic_fmt","","",129],[11,"exchange_malloc_fn","","",129],[11,"exchange_free_fn","","",129],[11,"strdup_uniq_fn","","",129],[11,"start_fn","","",129],[11,"ty_desc","","",129],[11,"opaque","","",129],[11,"eh_personality","","",129],[11,"exchange_heap","","",129],[11,"owned_box","","",129],[11,"phantom_fn","","",129],[11,"phantom_data","","",129],[11,"covariant_type","","",129],[11,"contravariant_type","","",129],[11,"invariant_type","","",129],[11,"covariant_lifetime","","",129],[11,"contravariant_lifetime","","",129],[11,"invariant_lifetime","","",129],[11,"no_copy_bound","","",129],[11,"managed_bound","","",129],[11,"non_zero","","",129],[11,"stack_exhausted","","",129],[11,"debug_trait","","",129],[0,"liveness","rustc::middle","A classic liveness analysis based on dataflow over the AST.  Computes,\nfor each local variable in a function, whether that variable is live\nat a given point.  Program execution points are identified by their\nid."],[5,"check_crate","rustc::middle::liveness",""],[0,"mem_categorization","rustc::middle","# Categorization"],[3,"Upvar","rustc::middle::mem_categorization",""],[12,"id","","",131],[12,"kind","","",131],[3,"cmt_","",""],[12,"id","","",132],[12,"span","","",132],[12,"cat","","",132],[12,"mutbl","","",132],[12,"ty","","",132],[12,"note","","",132],[3,"MemCategorizationContext","",""],[4,"categorization","",""],[13,"cat_rvalue","","",133],[13,"cat_static_item","","",133],[13,"cat_upvar","","",133],[13,"cat_local","","",133],[13,"cat_deref","","",133],[13,"cat_interior","","",133],[13,"cat_downcast","","",133],[4,"PointerKind","",""],[13,"Unique","","`Box<T>`",134],[13,"BorrowedPtr","","`&T`",134],[13,"UnsafePtr","","`*T`",134],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",134],[4,"InteriorKind","",""],[13,"InteriorField","","",135],[13,"InteriorElement","","",135],[4,"FieldName","",""],[13,"NamedField","","",136],[13,"PositionalField","","",136],[4,"InteriorOffsetKind","",""],[13,"Index","","",137],[13,"Pattern","","",137],[4,"ElementKind","",""],[13,"VecElement","","",138],[13,"OtherElement","","",138],[4,"MutabilityCategory","",""],[13,"McImmutable","","",139],[13,"McDeclared","","",139],[13,"McInherited","","",139],[4,"Note","",""],[13,"NoteClosureEnv","","",140],[13,"NoteUpvarRef","","",140],[13,"NoteNone","","",140],[4,"deref_kind","",""],[13,"deref_ptr","","",141],[13,"deref_interior","","",141],[4,"InteriorSafety","",""],[13,"InteriorUnsafe","","",142],[13,"InteriorSafe","","",142],[4,"AliasableReason","",""],[13,"AliasableBorrowed","","",143],[13,"AliasableClosure","","",143],[13,"AliasableOther","","",143],[13,"AliasableStatic","","",143],[13,"AliasableStaticMut","","",143],[5,"ptr_sigil","",""],[6,"cmt","",""],[6,"McResult","",""],[8,"ast_node","",""],[10,"id","","",144],[10,"span","","",144],[8,"Typer","","The `Typer` trait provides the interface for the mem-categorization\nmodule to the results of the type check. It can be used to query\nthe type assigned to an expression node, to inquire after adjustments,\nand so on."],[10,"node_ty","","",145],[10,"expr_ty_adjusted","","",145],[10,"type_moves_by_default","","",145],[10,"node_method_ty","","",145],[10,"node_method_origin","","",145],[10,"adjustments","","",145],[10,"is_method_call","","",145],[10,"temporary_scope","","",145],[10,"upvar_capture","","",145],[11,"fmt","","",133],[11,"eq","","",133],[11,"ne","","",133],[11,"clone","","",133],[11,"fmt","","",131],[11,"eq","","",131],[11,"ne","","",131],[11,"clone","","",131],[11,"fmt","","",134],[11,"hash","","",134],[11,"eq","","",134],[11,"ne","","",134],[11,"clone","","",134],[11,"fmt","","",135],[11,"hash","","",135],[11,"eq","","",135],[11,"ne","","",135],[11,"clone","","",135],[11,"fmt","","",136],[11,"hash","","",136],[11,"eq","","",136],[11,"ne","","",136],[11,"clone","","",136],[11,"fmt","","",137],[11,"hash","","",137],[11,"eq","","",137],[11,"ne","","",137],[11,"clone","","",137],[11,"fmt","","",138],[11,"hash","","",138],[11,"eq","","",138],[11,"ne","","",138],[11,"clone","","",138],[11,"fmt","","",139],[11,"hash","","",139],[11,"eq","","",139],[11,"ne","","",139],[11,"clone","","",139],[11,"fmt","","",140],[11,"eq","","",140],[11,"ne","","",140],[11,"clone","","",140],[11,"fmt","","",132],[11,"eq","","",132],[11,"ne","","",132],[11,"clone","","",132],[11,"id","syntax::ast","",146],[11,"span","","",146],[11,"id","","",147],[11,"span","","",147],[11,"from_mutbl","rustc::middle::mem_categorization","",139],[11,"from_borrow_kind","","",139],[11,"from_pointer_kind","","",139],[11,"inherit","","",139],[11,"is_mutable","","",139],[11,"is_immutable","","",139],[11,"to_user_str","","",139],[11,"new","","",148],[11,"cat_expr","","",148],[11,"cat_expr_autoderefd","","",148],[11,"cat_expr_unadjusted","","",148],[11,"cat_def","","",148],[11,"cat_rvalue_node","","",148],[11,"cat_rvalue","","",148],[11,"cat_field","","",148],[11,"cat_tup_field","","",148],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",148],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",148],[11,"cat_imm_interior","","",148],[11,"cat_downcast","","",148],[11,"cat_pattern","","",148],[11,"guarantor","","Returns `self` after stripping away any owned pointer derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",132],[11,"freely_aliasable","","Returns `Some(_)` if this lvalue represents a freely aliasable pointer type.",132],[11,"upvar","","",132],[11,"descriptive_string","","",132],[11,"repr","","",132],[11,"repr","","",133],[11,"repr","","",134],[11,"repr","","",135],[11,"repr","","",131],[11,"user_string","","",131],[0,"pat_util","rustc::middle",""],[5,"pat_id_map","rustc::middle::pat_util",""],[5,"pat_is_refutable","",""],[5,"pat_is_variant_or_struct","",""],[5,"pat_is_const","",""],[5,"pat_is_binding","",""],[5,"pat_is_binding_or_wild","",""],[5,"pat_bindings","","Call `it` on every \"binding\" in a pattern, e.g., on `a` in\n`match foo() { Some(a) => (), None => () }`"],[5,"pat_contains_bindings","","Checks if the pattern contains any patterns that bind something to\nan ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`."],[5,"pat_contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to\nan ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,"],[5,"simple_identifier","",""],[5,"def_to_path","",""],[6,"PatIdMap","",""],[0,"privacy","rustc::middle","A pass that checks to make sure private fields and methods aren't used\noutside their scopes. This pass will also generate a set of exported items\nwhich are available for use externally when compiled as a library."],[4,"LastPrivate","rustc::middle::privacy",""],[13,"LastMod","","",149],[13,"LastImport","","",149],[12,"value_priv","rustc::middle::privacy::LastPrivate","",149],[12,"value_used","","",149],[12,"type_priv","","",149],[12,"type_used","","",149],[4,"PrivateDep","rustc::middle::privacy",""],[13,"AllPublic","","",150],[13,"DependsOn","","",150],[4,"ImportUse","",""],[13,"Unused","","",151],[13,"Used","","",151],[6,"ExportedItems","","A set of AST nodes exported by the crate."],[6,"ExternalExports","","A set containing all exported definitions from external crates.\nThe set does not contain any entries from local crates."],[6,"PublicItems","","A set of AST nodes that are fully public in the crate. This map is used for\ndocumentation purposes (reexporting a private struct inlines the doc,\nreexporting a public struct doesn't inline the doc)."],[11,"fmt","","",149],[11,"fmt","","",150],[11,"fmt","","",151],[11,"eq","","",151],[11,"ne","","",151],[11,"or","","",149],[0,"reachable","rustc::middle",""],[5,"find_reachable","rustc::middle::reachable",""],[0,"region","rustc::middle","This file actually contains two passes related to regions.  The first\npass builds up the `scope_map`, which describes the parent links in\nthe region hierarchy.  The second pass infers which types must be\nregion parameterized."],[3,"DestructionScopeData","rustc::middle::region","extent of destructors for temporaries of node-id"],[12,"node_id","","",152],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced\nby `block.stmts[first_statement_index]`. Such subscopes represent\na suffix of the block. Note that each subscope does not include\nthe initializer expression, if any, for the statement indexed by\n`first_statement_index`."],[12,"block","","",153],[12,"first_statement_index","","",153],[3,"RegionMaps","","The region maps encode information about region relationships."],[3,"Context","",""],[4,"CodeExtent","","CodeExtent represents a statically-describable extent that can be\nused to bound the lifetime/region for values."],[13,"Misc","","",154],[13,"DestructionScope","","",154],[13,"Remainder","","",154],[5,"resolve_crate","",""],[5,"resolve_inlined_item","",""],[11,"fmt","","",154],[11,"decode","","",154],[11,"encode","","",154],[11,"hash","","",154],[11,"cmp","","",154],[11,"partial_cmp","","",154],[11,"lt","","",154],[11,"le","","",154],[11,"gt","","",154],[11,"ge","","",154],[11,"eq","","",154],[11,"ne","","",154],[11,"clone","","",154],[11,"fmt","","",152],[11,"decode","","",152],[11,"encode","","",152],[11,"hash","","",152],[11,"cmp","","",152],[11,"partial_cmp","","",152],[11,"lt","","",152],[11,"le","","",152],[11,"gt","","",152],[11,"ge","","",152],[11,"eq","","",152],[11,"ne","","",152],[11,"clone","","",152],[11,"new","","",152],[11,"to_code_extent","","",152],[11,"fmt","","",153],[11,"decode","","",153],[11,"encode","","",153],[11,"hash","","",153],[11,"cmp","","",153],[11,"partial_cmp","","",153],[11,"lt","","",153],[11,"le","","",153],[11,"gt","","",153],[11,"ge","","",153],[11,"eq","","",153],[11,"ne","","",153],[11,"clone","","",153],[11,"from_node_id","","Creates a scope that represents the dynamic extent associated\nwith `node_id`.",154],[11,"node_id","","Returns a node id associated with this scope.",154],[11,"map_id","","Maps this scope to a potentially new one according to the\nNodeId transformer `f_id`.",154],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",154],[11,"fmt","","",155],[11,"each_encl_scope","","",156],[11,"each_var_scope","","",156],[11,"each_encl_free_region","","",156],[11,"each_rvalue_scope","","",156],[11,"each_terminating_scope","","",156],[11,"relate_free_regions","","",156],[11,"record_encl_scope","","",156],[11,"record_var_scope","","",156],[11,"record_rvalue_scope","","",156],[11,"mark_as_terminating_scope","","Records that a scope is a TERMINATING SCOPE. Whenever we create automatic temporaries --\ne.g. by an expression like `a().f` -- they will be freed within the innermost terminating\nscope.",156],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",156],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",156],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",156],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",156],[11,"var_region","","Returns the lifetime of the variable `id`.",156],[11,"scopes_intersect","","",156],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",156],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `free_region_map`.  Note that\nit is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n(that is, the user can give two different names to the same lifetime).",156],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",156],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",156],[0,"recursion_limit","rustc::middle",""],[5,"update_recursion_limit","rustc::middle::recursion_limit",""],[0,"resolve_lifetime","rustc::middle","Name resolution for lifetimes."],[4,"DefRegion","rustc::middle::resolve_lifetime",""],[13,"DefStaticRegion","","",157],[13,"DefEarlyBoundRegion","","",157],[13,"DefLateBoundRegion","","",157],[13,"DefFreeRegion","","",157],[5,"krate","",""],[5,"early_bound_lifetimes","",""],[6,"NamedRegionMap","",""],[11,"fmt","","",157],[11,"decode","","",157],[11,"encode","","",157],[11,"hash","","",157],[11,"eq","","",157],[11,"ne","","",157],[11,"clone","","",157],[0,"stability","rustc::middle","A pass that annotates every item and method with its stability level,\npropagating default levels lexically from parent to children ast nodes."],[3,"Index","rustc::middle::stability","A stability index, giving the stability level for items and methods."],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled\nfeatures and possibly prints errors. Returns a list of all\nfeatures used."],[5,"check_item","","Helper for discovering nodes to check for stability"],[5,"check_expr","","Helper for discovering nodes to check for stability"],[5,"check_path","",""],[5,"check_pat","",""],[5,"lookup","","Lookup the stability for a node, loading external crate\nmetadata as necessary."],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that\nwere expected to be library features), and the list of features used from\nlibraries, identify activated features that don't exist and error about them."],[11,"build","","Construct the stability index for a crate being compiled.",158],[11,"new","","",158],[0,"subst","rustc::middle",""],[3,"Substs","rustc::middle::subst","A substitution mapping type/region parameters to new values. We\nidentify each in-scope parameter by an *index* and a *parameter\nspace* (which indices where the parameter is defined; see\n`ParamSpace`)."],[12,"types","","",159],[12,"regions","","",159],[3,"VecPerParamSpace","","Vector of things sorted by param space. Used to keep\nthe set of things declared on the type, self, or method\ndistinct."],[3,"SeparateVecsPerParamSpace","","The `split` function converts one `VecPerParamSpace` into this\n`SeparateVecsPerParamSpace` structure."],[12,"types","","",160],[12,"selfs","","",160],[12,"fns","","",160],[3,"EnumeratedItems","",""],[4,"RegionSubsts","","Represents the values to use when substituting lifetime parameters.\nIf the value is `ErasedRegions`, then this subst is occurring during\ntrans, and all region parameters will be replaced with `ty::ReStatic`."],[13,"ErasedRegions","","",161],[13,"NonerasedRegions","","",161],[4,"ParamSpace","",""],[13,"TypeSpace","","",162],[13,"SelfSpace","","",162],[13,"FnSpace","","",162],[8,"Subst","",""],[11,"subst","","",163],[10,"subst_spanned","","",163],[11,"fmt","","",159],[11,"hash","","",159],[11,"eq","","",159],[11,"ne","","",159],[11,"clone","","",159],[11,"fmt","","",161],[11,"hash","","",161],[11,"eq","","",161],[11,"ne","","",161],[11,"clone","","",161],[11,"new","","",159],[11,"new_type","","",159],[11,"new_trait","","",159],[11,"erased","","",159],[11,"empty","","",159],[11,"trans_empty","","",159],[11,"is_noop","","",159],[11,"type_for_def","","",159],[11,"has_regions_escaping_depth","","",159],[11,"self_ty","","",159],[11,"with_self_ty","","",159],[11,"erase_regions","","",159],[11,"regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",159],[11,"mut_regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",159],[11,"with_method","","",159],[11,"is_erased","","",161],[11,"fmt","","",162],[11,"decode","","",162],[11,"encode","","",162],[11,"hash","","",162],[11,"clone","","",162],[11,"eq","","",162],[11,"ne","","",162],[11,"cmp","","",162],[11,"partial_cmp","","",162],[11,"lt","","",162],[11,"le","","",162],[11,"gt","","",162],[11,"ge","","",162],[11,"all","","",162],[11,"to_uint","","",162],[11,"from_uint","","",162],[11,"decode","","",164],[11,"encode","","",164],[11,"hash","","",164],[11,"clone","","",164],[11,"eq","","",164],[11,"ne","","",164],[11,"fmt","","",164],[11,"empty","","",164],[11,"params_from_type","","",164],[11,"new","","`t` is the type space.\n`s` is the self space.\n`a` is the assoc space.\n`f` is the fn space.",164],[11,"push","","Appends `value` to the vector associated with `space`.",164],[11,"extend","","Appends `values` to the vector associated with `space`.",164],[11,"pop","","",164],[11,"truncate","","",164],[11,"replace","","",164],[11,"get_self","","",164],[11,"len","","",164],[11,"is_empty_in","","",164],[11,"get_slice","","",164],[11,"get_mut_slice","","",164],[11,"opt_get","","",164],[11,"get","","",164],[11,"iter","","",164],[11,"into_iter","","",164],[11,"iter_enumerated","","",164],[11,"as_slice","","",164],[11,"into_vec","","",164],[11,"all_vecs","","",164],[11,"all","","",164],[11,"any","","",164],[11,"is_empty","","",164],[11,"map","","",164],[11,"map_enumerated","","",164],[11,"map_move","","",164],[11,"split","","",164],[11,"with_vec","","",164],[11,"clone","","",165],[6,"Item","",""],[11,"next","","",165],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",164],[6,"Item","",""],[6,"IntoIter","",""],[0,"traits","rustc::middle","Trait Resolution. See the Book for more."],[3,"FulfillmentContext","rustc::middle::traits","The fulfillment context is used to drive trait resolution.  It\nconsists of a list of obligations that must be (eventually)\nsatisfied. The job is to track which are satisfied, which yielded\nerrors, and which are still pending. At any point, users can call\n`select_where_possible`, and the fulfilment context will try to do\nselection, retaining only those obligations that remain\nambiguous. This may be helpful in pushing type inference\nalong. Once all type inference constraints have been generated, the\nmethod `select_all_or_error` can be used to report any remaining\nambiguous cases as errors."],[3,"RegionObligation","",""],[12,"sub_region","","",166],[12,"sup_type","","",166],[12,"cause","","",166],[3,"MismatchedProjectionTypes","",""],[12,"err","","",167],[3,"Normalized","",""],[12,"value","","",168],[12,"obligations","","",168],[3,"SelectionContext","",""],[3,"SelectionCache","",""],[3,"Obligation","","An `Obligation` represents some trait reference (e.g. `int:Eq`) for\nwhich the vtable must be found.  The process of finding a vtable is\ncalled \"resolving\" the `Obligation`. This process consists of\neither identifying an `impl` (e.g., `impl Eq for int`) that\nprovides the required vtable, or else finding a bound that is in\nscope. The eventual result is usually a `Selection` (defined below)."],[12,"cause","","",169],[12,"recursion_depth","","",169],[12,"predicate","","",169],[3,"ObligationCause","","Why did we incur this obligation? Used for error reporting."],[12,"span","","",170],[12,"body_id","","",170],[12,"code","","",170],[3,"DerivedObligationCause","",""],[3,"FulfillmentError","",""],[12,"obligation","","",171],[12,"code","","",171],[3,"VtableImplData","","Identifies a particular impl in the source, along with a set of\nsubstitutions from the impl's type/lifetime parameters. The\n`nested` vector corresponds to the nested obligations attached to\nthe impl's type parameters."],[12,"impl_def_id","","",172],[12,"substs","","",172],[12,"nested","","",172],[3,"VtableDefaultImplData","",""],[12,"trait_def_id","","",173],[12,"nested","","",173],[3,"VtableBuiltinData","",""],[12,"nested","","",174],[3,"VtableObjectData","","A vtable for some object-safe trait `Foo` automatically derived\nfor the object type `Foo`."],[12,"object_ty","","the object type `Foo`.",175],[12,"upcast_trait_ref","","`Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.",175],[4,"OrphanCheckErr","",""],[13,"NoLocalInputType","","",176],[13,"UncoveredTy","","",176],[4,"ObjectSafetyViolation","",""],[13,"SizedSelf","","Self : Sized declared on the trait",177],[13,"SupertraitSelf","","Supertrait reference references `Self` an in illegal location\n(e.g. `trait Foo : Bar<Self>`)",177],[13,"Method","","Method has something illegal",177],[4,"MethodViolationCode","","Reasons a method might not be object-safe."],[13,"StaticMethod","","e.g., `fn foo()`",178],[13,"ReferencesSelf","","e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`",178],[13,"Generic","","e.g., `fn foo<A>()`",178],[4,"MethodMatchResult","",""],[13,"MethodMatched","","",179],[13,"MethodAmbiguous","","",179],[13,"MethodDidNotMatch","","",179],[4,"MethodMatchedData","",""],[13,"PreciseMethodMatch","","",180],[13,"CoerciveMethodMatch","","",180],[4,"ObligationCauseCode","",""],[13,"MiscObligation","","Not well classified or should be obvious from span.",181],[13,"ItemObligation","","In an impl of trait X for type Y, type Y must\nalso implement all supertraits of X.",181],[13,"ObjectCastObligation","","Obligation incurred due to an object cast.",181],[13,"AssignmentLhsSized","","Various cases where expressions must be sized/copy/etc:",181],[13,"StructInitializerSized","","",181],[13,"VariableType","","",181],[13,"ReturnType","","",181],[13,"RepeatVec","","",181],[13,"ClosureCapture","","",181],[13,"FieldSized","","",181],[13,"ObjectSized","","",181],[13,"SharedStatic","","",181],[13,"BuiltinDerivedObligation","","",181],[13,"ImplDerivedObligation","","",181],[13,"CompareImplMethodObligation","","",181],[4,"SelectionError","",""],[13,"Unimplemented","","",182],[13,"Overflow","","",182],[13,"OutputTypeParameterMismatch","","",182],[4,"FulfillmentErrorCode","",""],[13,"CodeSelectionError","","",183],[13,"CodeProjectionError","","",183],[13,"CodeAmbiguity","","",183],[4,"Vtable","","Given the successful resolution of an obligation, the `Vtable`\nindicates where the vtable comes from. Note that while we call this\na \"vtable\", it does not necessarily indicate dynamic dispatch at\nruntime. `Vtable` instances just tell the compiler where to find\nmethods, but in generic code those methods are typically statically\ndispatched -- only when an object is constructed is a `Vtable`\ninstance reified into an actual vtable."],[5,"report_fulfillment_errors","",""],[5,"suggest_new_overflow_limit","",""],[5,"orphan_check","","Checks the coherence orphan rules. `impl_def_id` should be the\ndef-id of a trait impl. To pass, either the trait must be local, or else\ntwo conditions must be satisfied:"],[5,"overlapping_impls","","True if there exist types that satisfy both of the two given impls."],[5,"normalize","","Normalizes any associated type projections in `value`, replacing\nthem with a fully resolved type where possible. The return value\ncombines the normalized result and any additional obligations that\nwere incurred as result."],[5,"is_object_safe","",""],[5,"object_safety_violations","",""],[5,"elaborate_predicates","",""],[5,"get_vtable_index_of_object_method","","Given an object of type `object_trait_ref`, returns the index of\nthe method `n_method` found in the trait `trait_def_id` (which\nshould be a supertrait of `object_trait_ref`) within the vtable\nfor `object_trait_ref`."],[5,"trait_ref_for_builtin_bound","",""],[5,"supertraits","",""],[5,"transitive_bounds","",""],[5,"upcast","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait."],[5,"predicates_for_generics","","Creates predicate obligations from the generic bounds."],[5,"evaluate_builtin_bound","","Determines whether the type `ty` is known to meet `bound` and\nreturns true if so. Returns false if `ty` either does not meet\n`bound` or is not known to meet bound (note that this is\nconservative towards *no impl*, which is the opposite of the\n`evaluate` methods)."],[5,"type_known_to_meet_builtin_bound","",""],[5,"normalize_param_env_or_error","","Normalizes the parameter environment, reporting errors if they occur."],[5,"fully_normalize","",""],[11,"clone","","",166],[11,"new","","",184],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `<SomeType as SomeTrait>::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we'll unify `$0` with\n`projection_ty` again.",184],[11,"register_builtin_bound","","",184],[11,"register_region_obligation","","",184],[11,"register_predicate_obligation","","",184],[11,"region_obligations","","",184],[11,"select_all_or_error","","",184],[11,"select_new_obligations","","Attempts to select obligations that were registered since the call to a selection routine.\nThis is used by the type checker to eagerly attempt to resolve obligations in hopes of\ngaining type information. It'd be equally valid to use `select_where_possible` but it\nresults in `O(n^2)` performance (#18208).",184],[11,"select_where_possible","","",184],[11,"pending_obligations","","",184],[11,"repr","","",166],[11,"clone","","",167],[11,"with","","",168],[11,"fold_with","","",168],[11,"repr","","",168],[11,"fmt","","",178],[11,"clone","","",178],[11,"repr","","",177],[11,"clone","","",185],[11,"fmt","","",180],[11,"new","","",186],[11,"intercrate","","",186],[11,"infcx","","",186],[11,"tcx","","",186],[11,"param_env","","",186],[11,"closure_typer","","",186],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",186],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",186],[11,"evaluate_impl","","Evaluates whether the impl with id `impl_def_id` could be applied to the self type\n`obligation_self_ty`. This can be used either for trait or inherent impls.",186],[11,"new","","",185],[11,"next","core::option","",187],[11,"may_apply","rustc::middle::traits","",179],[11,"fmt","","",172],[11,"fmt","","",175],[11,"repr","","",169],[11,"repr","","",188],[11,"repr","","",172],[11,"repr","","",174],[11,"repr","","",173],[11,"repr","","",175],[11,"repr","","",182],[11,"repr","","",171],[11,"repr","","",183],[11,"fmt","","",183],[11,"repr","","",167],[11,"fmt","","",167],[6,"Supertraits","",""],[6,"PredicateObligation","",""],[6,"TraitObligation","",""],[6,"Obligations","",""],[6,"PredicateObligations","",""],[6,"TraitObligations","",""],[6,"Selection","",""],[6,"SelectionResult","","When performing resolution, it is typically the case that there\ncan be one of three outcomes:"],[11,"eq","","",169],[11,"ne","","",169],[11,"clone","","",169],[11,"eq","","",170],[11,"ne","","",170],[11,"clone","","",170],[11,"eq","","",181],[11,"ne","","",181],[11,"clone","","",181],[11,"eq","","",189],[11,"ne","","",189],[11,"clone","","",189],[11,"fmt","","",182],[11,"clone","","",182],[11,"clone","","",183],[11,"clone","","",188],[11,"fmt","","",188],[11,"eq","","",172],[11,"ne","","",172],[11,"clone","","",172],[11,"clone","","",173],[11,"fmt","","",173],[11,"clone","","",174],[11,"fmt","","",174],[11,"clone","","",175],[11,"eq","","",175],[11,"ne","","",175],[11,"new","","",169],[11,"misc","","",169],[11,"with","","",169],[11,"new","","",170],[11,"misc","","",170],[11,"dummy","","",170],[11,"iter_nested","","",188],[11,"map_nested","","",188],[11,"map_move_nested","","",188],[11,"iter_nested","","",172],[11,"map_nested","","",172],[11,"map_move_nested","","",172],[11,"iter_nested","","",173],[11,"map_nested","","",173],[11,"map_move_nested","","",173],[11,"iter_nested","","",174],[11,"map_nested","","",174],[11,"map_move_nested","","",174],[11,"is_overflow","","",171],[0,"ty","rustc::middle",""],[3,"CrateAnalysis","rustc::middle::ty","The complete set of all analyses described in this module. This is\nproduced by the driver and fed to trans and later passes."],[12,"export_map","","",190],[12,"exported_items","","",190],[12,"public_items","","",190],[12,"ty_cx","","",190],[12,"reachable","","",190],[12,"name","","",190],[12,"glob_map","","",190],[3,"field","",""],[12,"name","","",191],[12,"mt","","",191],[3,"Method","",""],[12,"name","","",192],[12,"generics","","",192],[12,"predicates","","",192],[12,"fty","","",192],[12,"explicit_self","","",192],[12,"vis","","",192],[12,"def_id","","",192],[12,"container","","",192],[12,"provided_source","","",192],[3,"AssociatedType","",""],[12,"name","","",193],[12,"vis","","",193],[12,"def_id","","",193],[12,"container","","",193],[3,"mt","",""],[12,"ty","","",194],[12,"mutbl","","",194],[3,"field_ty","",""],[12,"name","","",195],[12,"id","","",195],[12,"vis","","",195],[12,"origin","","",195],[3,"creader_cache_key","",""],[12,"cnum","","",196],[12,"pos","","",196],[12,"len","","",196],[3,"ItemVariances","",""],[12,"types","","",197],[12,"regions","","",197],[3,"AutoDerefRef","",""],[12,"autoderefs","","",198],[12,"autoref","","",198],[3,"param_index","",""],[12,"space","","",199],[12,"index","","",199],[3,"MethodParam","",""],[12,"trait_ref","","",200],[12,"method_num","","",200],[12,"impl_def_id","","The impl for the trait from which the method comes. This\nshould only be used for certain linting/heuristic purposes\nsince there is no guarantee that this is Some in every\nsituation that it could/should be.",200],[3,"MethodObject","",""],[12,"trait_ref","","",201],[12,"object_trait_id","","",201],[12,"method_num","","",201],[12,"vtable_index","","",201],[3,"MethodCallee","",""],[12,"origin","","",202],[12,"ty","","",202],[12,"substs","","",202],[3,"MethodCall","","With method calls, we store some extra information in\nside tables (i.e method_map). We use\nMethodCall as a key to index into these tables instead of\njust directly using the expression's NodeId. The reason\nfor this being that we may apply adjustments (coercions)\nwith the resulting expression also needing to use the\nside tables. The problem with this is that we don't\nassign a separate NodeId to this new expression\nand so it would clash with the base expression if both\nneeded to add to the side tables. Thus to disambiguate\nwe also keep track of whether there's an adjustment in\nour key."],[12,"expr_id","","",203],[12,"adjustment","","",203],[3,"TransmuteRestriction","","A restriction that certain types must be the same size. The use of\n`transmute` gives rise to these restrictions. These generally\ncannot be checked until trans; therefore, each call to `transmute`\nwill push one or more such restriction into the\n`transmute_restrictions` vector during `intrinsicck`. They are\nthen checked during `trans` by the fn `check_intrinsics`."],[12,"span","","The span whence the restriction comes.",204],[12,"original_from","","The type being transmuted from.",204],[12,"original_to","","The type being transmuted to.",204],[12,"substituted_from","","The type being transmuted from, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",204],[12,"substituted_to","","The type being transmuted to, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",204],[12,"id","","NodeId of the transmute intrinsic.",204],[3,"CtxtArenas","","Internal storage"],[3,"CommonTypes","",""],[12,"bool","","",205],[12,"char","","",205],[12,"int","","",205],[12,"i8","","",205],[12,"i16","","",205],[12,"i32","","",205],[12,"i64","","",205],[12,"uint","","",205],[12,"u8","","",205],[12,"u16","","",205],[12,"u32","","",205],[12,"u64","","",205],[12,"f32","","",205],[12,"f64","","",205],[12,"err","","",205],[3,"ctxt","","The data structure to keep track of all the information that typechecker\ngenerates so that so that it can be reused and doesn't have to be redone\nlater on."],[12,"types","","Common types, pre-interned for your convenience.",206],[12,"sess","","",206],[12,"def_map","","",206],[12,"named_region_map","","",206],[12,"region_maps","","",206],[12,"node_types","","Stores the types for various nodes in the AST.  Note that this table\nis not guaranteed to be populated until after typeck.  See\ntypeck::check::fn_ctxt for details.",206],[12,"item_substs","","Stores the type parameters which were substituted to obtain the type\nof this node.  This only applies to nodes that refer to entities\nparameterized by type parameters, such as generic fns, types, or\nother items.",206],[12,"impl_or_trait_items","","Maps from a trait item to the trait item \"descriptor\"",206],[12,"trait_item_def_ids","","Maps from a trait def-id to a list of the def-ids of its trait items",206],[12,"trait_items_cache","","A cache for the trait_items() routine",206],[12,"impl_trait_cache","","",206],[12,"impl_trait_refs","","",206],[12,"trait_defs","","",206],[12,"predicates","","Maps from the def-id of an item (trait/struct/enum/fn) to its\nassociated predicates.",206],[12,"super_predicates","","Maps from the def-id of a trait to the list of\nsuper-predicates. This is a subset of the full list of\npredicates. We store these in a separate map because we must\nevaluate them even during type conversion, often before the\nfull predicates are available (note that supertraits have\nadditional acyclicity requirements).",206],[12,"object_cast_map","","Maps from node-id of a trait object cast (like `foo as\nBox<Trait>`) to the trait reference.",206],[12,"map","","",206],[12,"intrinsic_defs","","",206],[12,"freevars","","",206],[12,"tcache","","",206],[12,"rcache","","",206],[12,"short_names_cache","","",206],[12,"tc_cache","","",206],[12,"ast_ty_to_ty_cache","","",206],[12,"enum_var_cache","","",206],[12,"ty_param_defs","","",206],[12,"adjustments","","",206],[12,"normalized_cache","","",206],[12,"lang_items","","",206],[12,"provided_method_sources","","A mapping of fake provided method def_ids to the default implementation",206],[12,"struct_fields","","",206],[12,"item_variance_map","","Maps from def-id of a type or region parameter to its\n(inferred) variance.",206],[12,"variance_computed","","True if the variance has been computed yet; false otherwise.",206],[12,"destructor_for_type","","A mapping from the def ID of an enum or struct type to the def ID\nof the method that implements its destructor. If the type is not\npresent in this map, it does not have a destructor. This map is\npopulated during the coherence phase of typechecking.",206],[12,"destructors","","A method will be in this list if and only if it is a destructor.",206],[12,"trait_impls","","Maps a trait onto a list of impls of that trait.",206],[12,"inherent_impls","","Maps a DefId of a type to a list of its inherent impls.\nContains implementations of methods that are inherent to a type.\nMethods in these implementations don't need to be exported.",206],[12,"impl_items","","Maps a DefId of an impl to a list of its items.\nNote that this contains all of the impls that we know about,\nincluding ones in other crates. It's not clear that this is the best\nway to do it.",206],[12,"used_unsafe","","Set of used unsafe nodes (functions or blocks). Unsafe nodes not\npresent in this set can be warned about.",206],[12,"used_mut_nodes","","Set of nodes which mark locals as mutable which end up getting used at\nsome point. Local variable definitions not in this set can be warned\nabout.",206],[12,"populated_external_types","","The set of external nominal types whose implementations have been read.\nThis is used for lazy resolution of methods.",206],[12,"populated_external_traits","","The set of external traits whose implementations have been read. This\nis used for lazy resolution of traits.",206],[12,"upvar_capture_map","","Borrows",206],[12,"extern_const_statics","","These two caches are used by const_eval when decoding external statics\nand variants that are found.",206],[12,"extern_const_variants","","",206],[12,"method_map","","",206],[12,"dependency_formats","","",206],[12,"closure_kinds","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",206],[12,"closure_tys","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",206],[12,"node_lint_levels","","",206],[12,"transmute_restrictions","","The types that must be asserted to be the same size for `transmute`\nto be valid. We gather up these restrictions in the intrinsicck pass\nand check them in trans.",206],[12,"stability","","Maps any item's def-id to its stability index.",206],[12,"associated_types","","Maps def IDs to true if and only if they're associated types.",206],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that do not have to do with the parameters in scope.",206],[12,"repr_hint_cache","","Caches the representation hints for struct definitions.",206],[12,"type_impls_copy_cache","","Caches whether types are known to impl Copy. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",206],[12,"type_impls_sized_cache","","Caches whether types are known to impl Sized. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",206],[12,"object_safety_cache","","Caches whether traits are object safe",206],[12,"const_qualif_map","","Maps Expr NodeId's to their constant qualification.",206],[3,"TypeFlags","",""],[3,"TyS","",""],[12,"sty","","",207],[12,"flags","","",207],[3,"InternedTy","","An entry in the type interner."],[3,"BareFnTy","",""],[12,"unsafety","","",208],[12,"abi","","",208],[12,"sig","","",208],[3,"ClosureTy","",""],[12,"unsafety","","",209],[12,"abi","","",209],[12,"sig","","",209],[3,"FnSig","","Signature of a function type, which I have arbitrarily\ndecided to use to refer to the input/output types."],[12,"inputs","","",210],[12,"output","","",210],[12,"variadic","","",210],[3,"ParamTy","",""],[12,"space","","",211],[12,"idx","","",211],[12,"name","","",211],[3,"DebruijnIndex","","A [De Bruijn index][dbi] is a standard means of representing\nregions (and perhaps later types) in a higher-ranked setting. In\nparticular, imagine a type like this:"],[12,"depth","","",212],[3,"UpvarId","","Upvars do not get their own node-id. Instead, we use the pair of\nthe original var id (that is, the root variable that is referenced\nby the upvar) and the id of the closure expression."],[12,"var_id","","",213],[12,"closure_expr_id","","",213],[3,"UpvarBorrow","",""],[12,"kind","","The kind of borrow: by-ref upvars have access to shared\nimmutable borrows, which are not part of the normal language\nsyntax.",214],[12,"region","","Region of the resulting reference.",214],[3,"FreeRegion","","A \"free\" region `fr` can be interpreted as \"some region\nat least as big as the scope `fr.scope`\"."],[12,"scope","","",215],[12,"bound_region","","",215],[3,"TyTrait","",""],[12,"principal","","",216],[12,"bounds","","",216],[3,"TraitRef","","A complete reference to a trait. These take numerous guises in syntax,\nbut perhaps the most recognizable form is in a where clause:"],[12,"def_id","","",217],[12,"substs","","",217],[3,"Binder","","Binder is a binder for higher-ranked lifetimes. It is part of the\ncompiler's representation for things like `for<'a> Fn(&'a int)`\n(which would be represented by the type `PolyTraitRef ==\nBinder<TraitRef>`). Note that when we skolemize, instantiate,\nerase, or otherwise \"discharge\" these bound regions, we change the\ntype from `Binder<T>` to just `T` (see\ne.g. `liberate_late_bound_regions`)."],[3,"expected_found","",""],[12,"expected","","",218],[12,"found","","",218],[3,"ParamBounds","","Bounds suitable for a named type parameter like `A` in `fn foo<A>`\nas well as the existential type parameter in an object type."],[12,"region_bounds","","",219],[12,"builtin_bounds","","",219],[12,"trait_bounds","","",219],[12,"projection_bounds","","",219],[3,"ExistentialBounds","","Bounds suitable for an existentially quantified type parameter\nsuch as those that appear in object types or closure types. The\nmajor difference between this case and `ParamBounds` is that\ngeneral purpose trait bounds are omitted and there must be\n*exactly one* region."],[12,"region_bound","","",220],[12,"builtin_bounds","","",220],[12,"projection_bounds","","",220],[3,"TyVid","",""],[12,"index","","",221],[3,"IntVid","",""],[12,"index","","",222],[3,"FloatVid","",""],[12,"index","","",223],[3,"RegionVid","",""],[12,"index","","",224],[3,"TypeParameterDef","",""],[12,"name","","",225],[12,"def_id","","",225],[12,"space","","",225],[12,"index","","",225],[12,"default","","",225],[12,"object_lifetime_default","","",225],[3,"RegionParameterDef","",""],[12,"name","","",226],[12,"def_id","","",226],[12,"space","","",226],[12,"index","","",226],[12,"bounds","","",226],[3,"Generics","","Information about the formal type/lifetime parameters associated\nwith an item or method. Analogous to ast::Generics."],[12,"types","","",227],[12,"regions","","",227],[3,"GenericPredicates","","Bounds on generics."],[12,"predicates","","",228],[3,"TraitPredicate","",""],[12,"trait_ref","","",229],[3,"EquatePredicate","",""],[3,"OutlivesPredicate","",""],[3,"ProjectionPredicate","","This kind of predicate has no *direct* correspondent in the\nsyntax, but it roughly corresponds to the syntactic forms:"],[12,"projection_ty","","",230],[12,"ty","","",230],[3,"ProjectionTy","","Represents the projection of an associated type. In explicit UFCS\nform this would be written `<T as Trait<..>>::N`."],[12,"trait_ref","","The trait reference `T as Trait<..>`.",231],[12,"item_name","","The name `N` of the associated type.",231],[3,"InstantiatedPredicates","","Represents the bounds declared on a particular set of type\nparameters.  Should eventually be generalized into a flag list of\nwhere clauses.  You can obtain a `InstantiatedPredicates` list from a\n`GenericPredicates` by using the `instantiate` method. Note that this method\nreflects an important semantic invariant of `InstantiatedPredicates`: while\nthe `GenericPredicates` are expressed in terms of the bound type\nparameters of the impl/trait/whatever, an `InstantiatedPredicates` instance\nrepresented a set of bounds for some particular instantiation,\nmeaning that the generic parameters have been substituted with\ntheir values."],[12,"predicates","","",232],[3,"ParameterEnvironment","","When type checking, we use the `ParameterEnvironment` to track\ndetails about the type/lifetime parameters that are in scope.\nIt primarily stores the bounds information."],[12,"tcx","","",233],[12,"free_substs","","See `construct_free_substs` for details.",233],[12,"implicit_region_bound","","Each type parameter has an implicit region bound that\nindicates it must outlive at least the function body (the user\nmay specify stronger requirements). This field indicates the\nregion of the callee.",233],[12,"caller_bounds","","Obligations that the caller must satisfy. This is basically\nthe set of bounds on the in-scope type parameters, translated\ninto Obligations.",233],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that have to do with the parameters in scope.",233],[3,"TypeScheme","","A \"type scheme\", in ML terminology, is a type combined with some\nset of generic types that the type is, well, generic over. In Rust\nterms, it is the \"type\" of a fn item or struct -- this type will\ninclude various generic parameters that must be substituted when\nthe item/struct is referenced. That is called converting the type\nscheme to a monotype."],[12,"generics","","",234],[12,"ty","","",234],[3,"TraitDef","","As `TypeScheme` but for a trait ref."],[12,"unsafety","","",235],[12,"paren_sugar","","If `true`, then this trait had the `#[rustc_paren_sugar]`\nattribute, indicating that it should be used with `Foo()`\nsugar. This is a temporary thing -- eventually any trait wil\nbe usable with the sugar (or without it).",235],[12,"generics","","Generic type definitions. Note that `Self` is listed in here\nas having a single bound, the trait itself (e.g., in the trait\n`Eq`, there is a single bound `Self : Eq`). This is so that\ndefault methods get to assume that the `Self` parameters\nimplements the trait.",235],[12,"trait_ref","","",235],[12,"associated_type_names","","A list of the associated types defined in this trait. Useful\nfor resolving `X::Foo` type markers.",235],[3,"ItemSubsts","","Records the substitutions used to translate the polytype for an\nitem into the monotype of an item reference."],[12,"substs","","",236],[3,"TypeContents","","Type contents is how the type checker reasons about kinds.\nThey track what kinds of things are found within a type.  You can\nthink of them as kind of an \"anti-kind\".  They track the kinds of values\nand thinks that are contained in types.  Having a larger contents for\na type tends to rule that type *out* from various kinds.  For example,\na type that contains a reference is not sendable."],[12,"bits","","",237],[3,"VariantInfo","",""],[12,"args","","",238],[12,"arg_names","","",238],[12,"ctor_ty","","",238],[12,"name","","",238],[12,"id","","",238],[12,"disr_val","","",238],[12,"vis","","",238],[3,"ClosureUpvar","",""],[12,"def","","",239],[12,"span","","",239],[12,"ty","","",239],[3,"Freevar","","A free variable referred to in a function."],[12,"def","","The variable being accessed free.",240],[12,"span","","",240],[4,"ImplOrTraitItemContainer","",""],[13,"TraitContainer","","",241],[13,"ImplContainer","","",241],[4,"ImplOrTraitItem","",""],[13,"MethodTraitItem","","",242],[13,"TypeTraitItem","","",242],[4,"ImplOrTraitItemId","",""],[13,"MethodTraitItemId","","",243],[13,"TypeTraitItemId","","",243],[4,"Variance","",""],[13,"Covariant","","",244],[13,"Invariant","","",244],[13,"Contravariant","","",244],[13,"Bivariant","","",244],[4,"AutoAdjustment","",""],[13,"AdjustReifyFnPointer","","",245],[13,"AdjustDerefRef","","",245],[4,"UnsizeKind","",""],[13,"UnsizeLength","","",246],[13,"UnsizeStruct","","",246],[13,"UnsizeVtable","","",246],[4,"AutoRef","",""],[13,"AutoPtr","","Convert from T to &T\nThe third field allows us to wrap other AutoRef adjustments.",247],[13,"AutoUnsize","","Convert [T, ..n] to [T] (or similar, depending on the kind)",247],[13,"AutoUnsizeUniq","","Convert Box<[T, ..n]> to Box<[T]> or something similar in a Box.\nWith DST and Box a library type, this should be replaced by UnsizeStruct.",247],[13,"AutoUnsafe","","Convert from T to *T\nValue to thin pointer\nThe second field allows us to wrap other AutoRef adjustments.",247],[4,"MethodOrigin","",""],[13,"MethodStatic","","",248],[13,"MethodStaticClosure","","",248],[13,"MethodTypeParam","","",248],[13,"MethodTraitObject","","",248],[4,"ExprAdjustment","",""],[13,"NoAdjustment","","",249],[13,"AutoDeref","","",249],[13,"AutoObject","","",249],[4,"vtable_origin","",""],[13,"vtable_static","","",250],[13,"vtable_param","","",250],[13,"vtable_closure","","",250],[13,"vtable_error","","",250],[4,"FnOutput","",""],[13,"FnConverging","","",251],[13,"FnDiverging","","",251],[4,"Region","","Representation of regions:"],[13,"ReEarlyBound","","",252],[13,"ReLateBound","","",252],[13,"ReFree","","When checking a function body, the types of all arguments and so forth\nthat refer to bound region parameters are modified to refer to free\nregion parameters.",252],[13,"ReScope","","A concrete region naming some statically determined extent\n(e.g. an expression or sequence of statements) within the\ncurrent function.",252],[13,"ReStatic","","Static data that has an \"infinite\" lifetime. Top in the region lattice.",252],[13,"ReInfer","","A region variable.  Should not exist after typeck.",252],[13,"ReEmpty","","Empty lifetime is for data that is never accessed.\nBottom in the region lattice. We treat ReEmpty somewhat\nspecially; at least right now, we do not generate instances of\nit during the GLB computations, but rather\ngenerate an error instead. This is to improve error messages.\nThe only way to get an instance of ReEmpty is to have a region\nvariable with no constraints.",252],[4,"BorrowKind","",""],[13,"ImmBorrow","","Data must be immutable and is aliasable.",253],[13,"UniqueImmBorrow","","Data must be immutable but not aliasable.  This kind of borrow\ncannot currently be expressed by the user and is used only in\nimplicit closure bindings. It is needed when you the closure\nis borrowing or mutating a mutable referent, e.g.:",253],[13,"MutBorrow","","Data is mutable and not aliasable.",253],[4,"UpvarCapture","","Information describing the capture of an upvar. This is computed\nduring `typeck`, specifically by `regionck`."],[13,"ByValue","","Upvar is captured by value. This is always true when the\nclosure is labeled `move`, but can also be true in other cases\ndepending on inference.",254],[13,"ByRef","","Upvar is captured by reference.",254],[4,"BoundRegion","",""],[13,"BrAnon","","An anonymous region parameter for a given fn (&T)",255],[13,"BrNamed","","Named region parameters for functions (a in &'a T)",255],[13,"BrFresh","","Fresh bound identifiers created during GLB computations.",255],[13,"BrEnv","","",255],[4,"sty","",""],[13,"ty_bool","","",256],[13,"ty_char","","",256],[13,"ty_int","","",256],[13,"ty_uint","","",256],[13,"ty_float","","",256],[13,"ty_enum","","Substs here, possibly against intuition, *may* contain `ty_param`s.\nThat is, even after substitution it is possible that there are type\nvariables. This happens when the `ty_enum` corresponds to an enum\ndefinition and not a concrete use of it. To get the correct `ty_enum`\nfrom the tcx, use the `NodeId` from the `ast::Ty` and look it up in\nthe `ast_ty_to_ty_cache`. This is probably true for `ty_struct` as\nwell.",256],[13,"ty_uniq","","",256],[13,"ty_str","","",256],[13,"ty_vec","","",256],[13,"ty_ptr","","",256],[13,"ty_rptr","","",256],[13,"ty_bare_fn","","",256],[13,"ty_trait","","",256],[13,"ty_struct","","",256],[13,"ty_closure","","",256],[13,"ty_tup","","",256],[13,"ty_projection","","",256],[13,"ty_param","","",256],[13,"ty_infer","","",256],[13,"ty_err","","",256],[4,"IntVarValue","",""],[13,"IntType","","",257],[13,"UintType","","",257],[4,"terr_vstore_kind","",""],[13,"terr_vec","","",258],[13,"terr_str","","",258],[13,"terr_fn","","",258],[13,"terr_trait","","",258],[4,"type_err","",""],[13,"terr_mismatch","","",259],[13,"terr_unsafety_mismatch","","",259],[13,"terr_abi_mismatch","","",259],[13,"terr_mutability","","",259],[13,"terr_box_mutability","","",259],[13,"terr_ptr_mutability","","",259],[13,"terr_ref_mutability","","",259],[13,"terr_vec_mutability","","",259],[13,"terr_tuple_size","","",259],[13,"terr_fixed_array_size","","",259],[13,"terr_ty_param_size","","",259],[13,"terr_arg_count","","",259],[13,"terr_regions_does_not_outlive","","",259],[13,"terr_regions_not_same","","",259],[13,"terr_regions_no_overlap","","",259],[13,"terr_regions_insufficiently_polymorphic","","",259],[13,"terr_regions_overly_polymorphic","","",259],[13,"terr_sorts","","",259],[13,"terr_integer_as_char","","",259],[13,"terr_int_mismatch","","",259],[13,"terr_float_mismatch","","",259],[13,"terr_traits","","",259],[13,"terr_builtin_bounds","","",259],[13,"terr_variadic_mismatch","","",259],[13,"terr_cyclic_ty","","",259],[13,"terr_convergence_mismatch","","",259],[13,"terr_projection_name_mismatched","","",259],[13,"terr_projection_bounds_length","","",259],[4,"BuiltinBound","",""],[13,"BoundSend","","",260],[13,"BoundSized","","",260],[13,"BoundCopy","","",260],[13,"BoundSync","","",260],[4,"InferTy","",""],[13,"TyVar","","",261],[13,"IntVar","","",261],[13,"FloatVar","","",261],[13,"FreshTy","","A `FreshTy` is one that is generated as a replacement for an\nunbound type variable. This is convenient for caching etc. See\n`middle::infer::freshen` for more details.",261],[13,"FreshIntTy","","",261],[4,"UnconstrainedNumeric","",""],[13,"UnconstrainedFloat","","",262],[13,"UnconstrainedInt","","",262],[13,"Neither","","",262],[4,"InferRegion","",""],[13,"ReVar","","",263],[13,"ReSkolemized","","",263],[4,"ObjectLifetimeDefault","","Default region to use for the bound of objects that are\nsupplied as the value for this type parameter. This is derived\nfrom `T:'a` annotations appearing in the type definition.  If\nthis is `None`, then the default is inherited from the\nsurrounding context. See RFC #599 for details."],[13,"Ambiguous","","Require an explicit annotation. Occurs when multiple\n`T:'a` constraints are found.",264],[13,"Specific","","Use the given region as the default.",264],[4,"Predicate","",""],[13,"Trait","","Corresponds to `where Foo : Bar<A,B,C>`. `Foo` here would be\nthe `Self` type of the trait reference and `A`, `B`, and `C`\nwould be the parameters in the `TypeSpace`.",265],[13,"Equate","","where `T1 == T2`.",265],[13,"RegionOutlives","","where 'a : 'b",265],[13,"TypeOutlives","","where T : 'a",265],[13,"Projection","","where <T as TraitRef>::Name == X, approximately.\nSee `ProjectionPredicate` struct for details.",265],[4,"ClosureKind","",""],[13,"FnClosureKind","","",266],[13,"FnMutClosureKind","","",266],[13,"FnOnceClosureKind","","",266],[4,"Representability","","Describes whether a type is representable. For types that are not\nrepresentable, 'SelfRecursive' and 'ContainsRecursive' are used to\ndistinguish between types that are recursive with themselves and types that\ncontain a different recursive type. These cases can therefore be treated\ndifferently when reporting errors."],[13,"Representable","","",267],[13,"ContainsRecursive","","",267],[13,"SelfRecursive","","",267],[4,"ExprKind","","We categorize expressions into three kinds.  The distinction between\nlvalue/rvalue is fundamental to the language.  The distinction between the\ntwo kinds of rvalues is an artifact of trans which reflects how we will\ngenerate code for that kind of expression.  See trans/expr.rs for more\ninformation."],[13,"LvalueExpr","","",268],[13,"RvalueDpsExpr","","",268],[13,"RvalueDatumExpr","","",268],[13,"RvalueStmtExpr","","",268],[4,"DtorKind","",""],[13,"NoDtor","","",269],[13,"TraitDtor","","",269],[4,"ExplicitSelfCategory","","The category of explicit self."],[13,"StaticExplicitSelfCategory","","",270],[13,"ByValueExplicitSelfCategory","","",270],[13,"ByReferenceExplicitSelfCategory","","",270],[13,"ByBoxExplicitSelfCategory","","",270],[4,"CopyImplementationError","",""],[13,"FieldDoesNotImplementCopy","","",271],[13,"VariantDoesNotImplementCopy","","",271],[13,"TypeIsStructural","","",271],[13,"TypeHasDestructor","","",271],[5,"adjusted_object_region","",""],[5,"adjust_is_object","",""],[5,"type_of_adjust","",""],[5,"type_has_params","",""],[5,"type_has_self","",""],[5,"type_has_ty_infer","",""],[5,"type_needs_infer","",""],[5,"type_has_projection","",""],[5,"type_has_late_bound_regions","",""],[5,"type_has_escaping_regions","","An \"escaping region\" is a bound region whose binder is not part of `t`."],[5,"type_escapes_depth","",""],[5,"empty_builtin_bounds","",""],[5,"all_builtin_bounds","",""],[5,"region_existential_bound","","An existential bound that does not implement any traits."],[5,"mk_ctxt","",""],[5,"mk_t","",""],[5,"mk_mach_int","",""],[5,"mk_mach_uint","",""],[5,"mk_mach_float","",""],[5,"mk_str","",""],[5,"mk_str_slice","",""],[5,"mk_enum","",""],[5,"mk_uniq","",""],[5,"mk_ptr","",""],[5,"mk_rptr","",""],[5,"mk_mut_rptr","",""],[5,"mk_imm_rptr","",""],[5,"mk_mut_ptr","",""],[5,"mk_imm_ptr","",""],[5,"mk_nil_ptr","",""],[5,"mk_vec","",""],[5,"mk_slice","",""],[5,"mk_tup","",""],[5,"mk_nil","",""],[5,"mk_bare_fn","",""],[5,"mk_ctor_fn","",""],[5,"mk_trait","",""],[5,"sort_bounds_list","",""],[5,"mk_projection","",""],[5,"mk_struct","",""],[5,"mk_closure","",""],[5,"mk_var","",""],[5,"mk_int_var","",""],[5,"mk_float_var","",""],[5,"mk_infer","",""],[5,"mk_param","",""],[5,"mk_self_type","",""],[5,"mk_param_from_def","",""],[5,"walk_ty","",""],[5,"maybe_walk_ty","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored."],[5,"fold_ty","",""],[5,"type_is_nil","",""],[5,"type_is_error","",""],[5,"type_needs_subst","",""],[5,"trait_ref_contains_error","",""],[5,"type_is_ty_var","",""],[5,"type_is_bool","",""],[5,"type_is_self","",""],[5,"type_is_vec","",""],[5,"type_is_structural","",""],[5,"type_is_simd","",""],[5,"sequence_element_type","",""],[5,"simd_type","",""],[5,"simd_size","",""],[5,"type_is_region_ptr","",""],[5,"type_is_unsafe_ptr","",""],[5,"type_is_unique","",""],[5,"type_is_scalar","",""],[5,"type_is_floating_point","","Returns true if this type is a floating point type and false otherwise."],[5,"type_interior_is_unsafe","",""],[5,"type_contents","",""],[5,"type_moves_by_default","",""],[5,"type_is_sized","",""],[5,"is_ffi_safe","",""],[5,"is_instantiable","",""],[5,"is_type_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums."],[5,"type_is_trait","",""],[5,"type_trait_info","",""],[5,"type_is_integral","",""],[5,"type_is_fresh","",""],[5,"type_is_uint","",""],[5,"type_is_char","",""],[5,"type_is_bare_fn","",""],[5,"type_is_bare_fn_item","",""],[5,"type_is_fp","",""],[5,"type_is_numeric","",""],[5,"type_is_signed","",""],[5,"type_is_machine","",""],[5,"type_is_c_like_enum","",""],[5,"deref","",""],[5,"type_content","",""],[5,"index","",""],[5,"array_element_ty","",""],[5,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum."],[5,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id."],[5,"impl_id_to_trait_ref","",""],[5,"node_id_to_type","",""],[5,"node_id_to_type_opt","",""],[5,"node_id_item_substs","",""],[5,"fn_is_variadic","",""],[5,"ty_fn_sig","",""],[5,"ty_fn_abi","","Returns the ABI of the given function."],[5,"ty_fn_args","",""],[5,"ty_fn_ret","",""],[5,"is_fn_ty","",""],[5,"ty_region","",""],[5,"free_region_from_def","",""],[5,"pat_ty","",""],[5,"pat_ty_opt","",""],[5,"expr_ty","",""],[5,"expr_ty_opt","",""],[5,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression."],[5,"expr_span","",""],[5,"local_var_name_str","",""],[5,"adjust_ty","","See `expr_ty_adjusted`"],[5,"adjust_ty_for_autoref","",""],[5,"unsize_ty","",""],[5,"resolve_expr","",""],[5,"expr_is_lval","",""],[5,"expr_kind","",""],[5,"stmt_node_id","",""],[5,"field_idx_strict","",""],[5,"impl_or_trait_item_idx","",""],[5,"ty_sort_string","",""],[5,"type_err_to_str","","Explains the source of a type err in a short, human readable way. This is meant to be placed\nin parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\nafterwards to present additional details, particularly when it comes to lifetime-related\nerrors."],[5,"note_and_explain_type_err","",""],[5,"provided_source","",""],[5,"provided_trait_methods","",""],[5,"trait_item","",""],[5,"trait_items","",""],[5,"trait_impl_polarity","",""],[5,"impl_or_trait_item","",""],[5,"is_associated_type","","Returns true if the given ID refers to an associated type and false if it\nrefers to anything else."],[5,"associated_type_parameter_index","","Returns the parameter index that the given associated type corresponds to."],[5,"trait_item_def_ids","",""],[5,"impl_trait_ref","",""],[5,"trait_ref_to_def_id","",""],[5,"try_add_builtin_trait","","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait."],[5,"ty_to_def_id","",""],[5,"substd_enum_variants","",""],[5,"item_path_str","",""],[5,"ty_dtor","",""],[5,"has_dtor","",""],[5,"with_path","",""],[5,"enum_is_univariant","",""],[5,"type_is_empty","",""],[5,"enum_variants","",""],[5,"enum_variant_with_id","",""],[5,"lookup_item_type","",""],[5,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref."],[5,"lookup_predicates","","Given the did of an item, returns its full set of predicates."],[5,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates."],[5,"predicates","",""],[5,"get_attrs","","Get the attributes of a definition."],[5,"has_attr","","Determine whether an item is annotated with an attribute"],[5,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`"],[5,"lookup_simd","","Determine whether an item is annotated with `#[simd]`"],[5,"lookup_repr_hints","","Obtain the representation annotation for a struct definition."],[5,"lookup_field_type","",""],[5,"lookup_struct_fields","",""],[5,"is_tuple_struct","",""],[5,"struct_fields","",""],[5,"tup_fields","",""],[5,"closure_upvars","",""],[5,"is_binopable","",""],[5,"eval_repeat_count","",""],[5,"each_bound_trait_and_supertraits","",""],[5,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice."],[5,"get_tydesc_ty","",""],[5,"item_variances","",""],[5,"trait_has_default_impl","",""],[5,"record_trait_has_default_impl","","Records a trait-to-implementation mapping."],[5,"record_trait_implementation","","Records a trait-to-implementation mapping."],[5,"populate_implementations_for_type_if_necessary","","Populates the type context with all the implementations for the given type\nif necessary."],[5,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary."],[5,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`."],[5,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`."],[5,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`."],[5,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`."],[5,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it's calculated within. This is used by the `type_id` intrinsic."],[5,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope."],[5,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe \"outer\" view of a type or method to the \"inner\" view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions."],[5,"construct_parameter_environment","","See `ParameterEnvironment` struct def'n for details"],[5,"accumulate_lifetimes_in_type","","Pushes all the lifetimes in the given type onto the given list. A\n\"lifetime in a type\" is a lifetime specified by a reference or a lifetime\nin a list of type substitutions. This does *not* traverse into nominal\ntypes, nor does it resolve fictitious types."],[5,"with_freevars","",""],[5,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`."],[5,"count_late_bound_regions","",""],[5,"binds_late_bound_regions","",""],[5,"no_late_bound_regions","",""],[5,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `'static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required."],[5,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation."],[5,"replace_late_bound_regions","","Replaces the late-bound-regions in `value` that are bound by `value`."],[5,"make_substs_for_receiver_types","","Substitutes the values for the receiver's type parameters\nthat are found in method, leaving the method's type parameters\nintact."],[5,"can_type_implement_copy","",""],[6,"Disr","",""],[6,"MethodMap","",""],[6,"vtable_param_res","",""],[6,"vtable_res","",""],[6,"ObjectCastMap","",""],[6,"Ty","",""],[6,"PolyFnOutput","",""],[6,"PolyFnSig","",""],[6,"UpvarCaptureMap","",""],[6,"PolyTraitRef","",""],[6,"BuiltinBounds","",""],[6,"PolyTraitPredicate","",""],[6,"PolyEquatePredicate","",""],[6,"PolyOutlivesPredicate","",""],[6,"PolyRegionOutlivesPredicate","",""],[6,"PolyTypeOutlivesPredicate","",""],[6,"PolyProjectionPredicate","",""],[6,"FreevarMap","",""],[6,"CaptureModeMap","",""],[6,"TraitMap","",""],[6,"GlobMap","",""],[17,"INITIAL_DISCRIMINANT_VALUE","",""],[17,"NO_TYPE_FLAGS","",""],[17,"HAS_PARAMS","",""],[17,"HAS_SELF","",""],[17,"HAS_TY_INFER","",""],[17,"HAS_RE_INFER","",""],[17,"HAS_RE_LATE_BOUND","",""],[17,"HAS_REGIONS","",""],[17,"HAS_TY_ERR","",""],[17,"HAS_PROJECTION","",""],[17,"NEEDS_SUBST","",""],[8,"ToPolyTraitRef","",""],[10,"to_poly_trait_ref","","",272],[8,"AsPredicate","",""],[10,"as_predicate","","",273],[8,"ClosureTyper","",""],[11,"tcx","","",274],[10,"param_env","","",274],[10,"closure_kind","","Is this a `Fn`, `FnMut` or `FnOnce` closure? During typeck,\nreturns `None` if the kind of this closure has not yet been\ninferred.",274],[10,"closure_type","","Returns the argument/return types of this closure.",274],[10,"closure_upvars","","Returns the set of all upvars and their transformed\ntypes. During typeck, maybe return `None` if the upvar types\nhave not yet been inferred.",274],[8,"RegionEscape","",""],[11,"has_escaping_regions","","",275],[10,"has_regions_escaping_depth","","",275],[8,"HasProjectionTypes","",""],[10,"has_projection_types","","",276],[8,"ReferencesError","",""],[10,"references_error","","",277],[11,"hash","","",191],[11,"eq","","",191],[11,"ne","","",191],[11,"clone","","",191],[11,"fmt","","",241],[11,"clone","","",241],[11,"id","","",241],[11,"fmt","","",242],[11,"clone","","",242],[11,"def_id","","",242],[11,"name","","",242],[11,"container","","",242],[11,"as_opt_method","","",242],[11,"fmt","","",243],[11,"clone","","",243],[11,"def_id","","",243],[11,"fmt","","",192],[11,"clone","","",192],[11,"new","","",192],[11,"container_id","","",192],[11,"fmt","","",193],[11,"clone","","",193],[11,"fmt","","",194],[11,"hash","","",194],[11,"eq","","",194],[11,"ne","","",194],[11,"clone","","",194],[11,"fmt","","",195],[11,"clone","","",195],[11,"hash","","",196],[11,"eq","","",196],[11,"ne","","",196],[11,"encode","","",197],[11,"decode","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"clone","","",197],[11,"fmt","","",244],[11,"encode","","",244],[11,"decode","","",244],[11,"eq","","",244],[11,"ne","","",244],[11,"clone","","",244],[11,"fmt","","",245],[11,"clone","","",245],[11,"fmt","","",246],[11,"eq","","",246],[11,"ne","","",246],[11,"clone","","",246],[11,"fmt","","",198],[11,"clone","","",198],[11,"fmt","","",247],[11,"eq","","",247],[11,"ne","","",247],[11,"clone","","",247],[11,"fmt","","",199],[11,"partial_cmp","","",199],[11,"lt","","",199],[11,"le","","",199],[11,"gt","","",199],[11,"ge","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"decode","","",199],[11,"encode","","",199],[11,"clone","","",199],[11,"fmt","","",248],[11,"clone","","",248],[11,"fmt","","",200],[11,"clone","","",200],[11,"fmt","","",201],[11,"clone","","",201],[11,"clone","","",202],[11,"fmt","","",203],[11,"hash","","",203],[11,"eq","","",203],[11,"ne","","",203],[11,"clone","","",203],[11,"decode","","",249],[11,"encode","","",249],[11,"fmt","","",249],[11,"hash","","",249],[11,"eq","","",249],[11,"ne","","",249],[11,"clone","","",249],[11,"expr","","",203],[11,"autoobject","","",203],[11,"autoderef","","",203],[11,"clone","","",250],[11,"new","","",278],[11,"hash","","",279],[11,"cmp","","",279],[11,"partial_cmp","","",279],[11,"lt","","",279],[11,"le","","",279],[11,"gt","","",279],[11,"ge","","",279],[11,"clone","","",279],[11,"eq","","",279],[11,"ne","","",279],[11,"empty","","Returns an empty set of flags.",279],[11,"all","","Returns the set containing all flags.",279],[11,"bits","","Returns the raw value of the flags currently stored.",279],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",279],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",279],[11,"is_empty","","Returns `true` if no flags are currently stored.",279],[11,"is_all","","Returns `true` if all flags are currently set.",279],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",279],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",279],[11,"insert","","Inserts the specified flags in-place.",279],[11,"remove","","Removes the specified flags in-place.",279],[11,"toggle","","Toggles the specified flags in-place.",279],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",279],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",279],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",279],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",279],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",279],[11,"print_debug_stats","","",206],[11,"fmt","","",207],[11,"fmt","","",279],[11,"eq","","",207],[11,"hash","","",207],[11,"eq","","",280],[11,"hash","","",280],[11,"borrow","","",280],[11,"fmt","","",208],[11,"hash","","",208],[11,"eq","","",208],[11,"ne","","",208],[11,"clone","","",208],[11,"fmt","","",209],[11,"hash","","",209],[11,"eq","","",209],[11,"ne","","",209],[11,"clone","","",209],[11,"fmt","","",251],[11,"hash","","",251],[11,"eq","","",251],[11,"ne","","",251],[11,"clone","","",251],[11,"diverges","","",251],[11,"unwrap","","",251],[11,"diverges","","",281],[11,"hash","","",210],[11,"eq","","",210],[11,"ne","","",210],[11,"clone","","",210],[11,"inputs","","",282],[11,"input","","",282],[11,"output","","",282],[11,"variadic","","",282],[11,"fmt","","",211],[11,"hash","","",211],[11,"eq","","",211],[11,"ne","","",211],[11,"clone","","",211],[11,"fmt","","",212],[11,"decode","","",212],[11,"encode","","",212],[11,"hash","","",212],[11,"eq","","",212],[11,"ne","","",212],[11,"clone","","",212],[11,"fmt","","",252],[11,"decode","","",252],[11,"encode","","",252],[11,"hash","","",252],[11,"eq","","",252],[11,"ne","","",252],[11,"clone","","",252],[11,"fmt","","",213],[11,"hash","","",213],[11,"eq","","",213],[11,"ne","","",213],[11,"clone","","",213],[11,"decode","","",253],[11,"encode","","",253],[11,"fmt","","",253],[11,"hash","","",253],[11,"eq","","",253],[11,"ne","","",253],[11,"clone","","",253],[11,"fmt","","",254],[11,"decode","","",254],[11,"encode","","",254],[11,"clone","","",254],[11,"eq","","",254],[11,"ne","","",254],[11,"fmt","","",214],[11,"decode","","",214],[11,"encode","","",214],[11,"clone","","",214],[11,"eq","","",214],[11,"ne","","",214],[11,"is_bound","","",252],[11,"escapes_depth","","",252],[11,"fmt","","",215],[11,"decode","","",215],[11,"encode","","",215],[11,"hash","","",215],[11,"cmp","","",215],[11,"partial_cmp","","",215],[11,"lt","","",215],[11,"le","","",215],[11,"gt","","",215],[11,"ge","","",215],[11,"eq","","",215],[11,"ne","","",215],[11,"clone","","",215],[11,"fmt","","",255],[11,"decode","","",255],[11,"encode","","",255],[11,"hash","","",255],[11,"cmp","","",255],[11,"partial_cmp","","",255],[11,"lt","","",255],[11,"le","","",255],[11,"gt","","",255],[11,"ge","","",255],[11,"eq","","",255],[11,"ne","","",255],[11,"clone","","",255],[11,"fmt","","",256],[11,"hash","","",256],[11,"eq","","",256],[11,"ne","","",256],[11,"clone","","",256],[11,"fmt","","",216],[11,"hash","","",216],[11,"eq","","",216],[11,"ne","","",216],[11,"clone","","",216],[11,"principal_def_id","","",216],[11,"principal_trait_ref_with_self_ty","","Object types don't have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",216],[11,"projection_bounds_with_self_ty","","",216],[11,"fmt","","",217],[11,"hash","","",217],[11,"eq","","",217],[11,"ne","","",217],[11,"clone","","",217],[11,"self_ty","","",283],[11,"def_id","","",283],[11,"substs","","",283],[11,"input_types","","",283],[11,"to_poly_trait_predicate","","",283],[11,"fmt","","",284],[11,"hash","","",284],[11,"eq","","",284],[11,"ne","","",284],[11,"clone","","",284],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a\nrisky thing to do because it's easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",284],[11,"eq","","",257],[11,"ne","","",257],[11,"clone","","",257],[11,"fmt","","",258],[11,"clone","","",258],[11,"fmt","","",218],[11,"clone","","",218],[11,"fmt","","",259],[11,"clone","","",259],[11,"fmt","","",219],[11,"clone","","",219],[11,"hash","","",219],[11,"eq","","",219],[11,"ne","","",219],[11,"fmt","","",220],[11,"clone","","",220],[11,"hash","","",220],[11,"eq","","",220],[11,"ne","","",220],[11,"fmt","","",260],[11,"hash","","",260],[11,"decode","","",260],[11,"eq","","",260],[11,"ne","","",260],[11,"encode","","",260],[11,"clone","","",260],[11,"to_usize","","",260],[11,"from_usize","","",260],[11,"hash","","",221],[11,"eq","","",221],[11,"ne","","",221],[11,"clone","","",221],[11,"hash","","",222],[11,"eq","","",222],[11,"ne","","",222],[11,"clone","","",222],[11,"hash","","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"clone","","",223],[11,"hash","","",224],[11,"decode","","",224],[11,"encode","","",224],[11,"eq","","",224],[11,"ne","","",224],[11,"clone","","",224],[11,"hash","","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"clone","","",261],[11,"fmt","","",262],[11,"hash","","",262],[11,"eq","","",262],[11,"ne","","",262],[11,"decode","","",262],[11,"encode","","",262],[11,"clone","","",262],[11,"fmt","","",263],[11,"hash","","",263],[11,"decode","","",263],[11,"encode","","",263],[11,"clone","","",263],[11,"eq","","",263],[11,"ne","","",263],[11,"fmt","","",221],[11,"fmt","","",222],[11,"fmt","","",223],[11,"fmt","","",224],[11,"fmt","","",210],[11,"fmt","","",261],[11,"fmt","","",257],[11,"fmt","","",264],[11,"clone","","",264],[11,"fmt","","",225],[11,"clone","","",225],[11,"fmt","","",226],[11,"clone","","",226],[11,"decode","","",226],[11,"encode","","",226],[11,"to_early_bound_region","","",226],[11,"fmt","","",227],[11,"clone","","",227],[11,"empty","","",227],[11,"is_empty","","",227],[11,"has_type_params","","",227],[11,"has_region_params","","",227],[11,"fmt","","",228],[11,"clone","","",228],[11,"empty","","",228],[11,"instantiate","","",228],[11,"instantiate_supertrait","","",228],[11,"fmt","","",265],[11,"hash","","",265],[11,"eq","","",265],[11,"ne","","",265],[11,"clone","","",265],[11,"subst_supertrait","","Performs a substituion suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",265],[11,"fmt","","",229],[11,"hash","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"clone","","",229],[11,"def_id","","",229],[11,"input_types","","",229],[11,"self_ty","","",229],[11,"def_id","","",285],[11,"fmt","","",286],[11,"hash","","",286],[11,"eq","","",286],[11,"ne","","",286],[11,"clone","","",286],[11,"fmt","","",287],[11,"hash","","",287],[11,"eq","","",287],[11,"ne","","",287],[11,"clone","","",287],[11,"fmt","","",230],[11,"hash","","",230],[11,"eq","","",230],[11,"ne","","",230],[11,"clone","","",230],[11,"item_name","","",288],[11,"sort_key","","",288],[11,"fmt","","",231],[11,"hash","","",231],[11,"eq","","",231],[11,"ne","","",231],[11,"clone","","",231],[11,"sort_key","","",231],[11,"to_poly_trait_ref","alloc::rc","",97],[11,"to_poly_trait_ref","rustc::middle::ty","",285],[11,"to_poly_trait_ref","","",288],[11,"as_predicate","alloc::rc","",97],[11,"as_predicate","rustc::middle::ty","",283],[11,"as_predicate","","",289],[11,"as_predicate","","",290],[11,"as_predicate","","",291],[11,"as_predicate","","",288],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",265],[11,"has_escaping_regions","","",265],[11,"to_opt_poly_trait_ref","","",265],[11,"fmt","","",232],[11,"clone","","",232],[11,"empty","","",232],[11,"has_escaping_regions","","",232],[11,"is_empty","","",232],[11,"new","","",217],[11,"self_ty","","",217],[11,"input_types","","",217],[11,"clone","","",233],[11,"with_caller_bounds","","",233],[11,"for_item","","",233],[11,"fmt","","",234],[11,"clone","","",234],[11,"clone","","",236],[11,"decode","","",266],[11,"encode","","",266],[11,"fmt","","",266],[11,"eq","","",266],[11,"ne","","",266],[11,"clone","","",266],[11,"trait_did","","",266],[11,"mk_substs","","",206],[11,"mk_bare_fn","","",206],[11,"mk_region","","",206],[11,"closure_kind","","",206],[11,"closure_type","","",206],[11,"type_parameter_def","","",206],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",207],[11,"walk_children","","Iterator that walks types reachable from `self`, in\ndepth-first order. Note that this is a shallow walk. For\nexample:",207],[11,"as_opt_param_ty","","",207],[11,"is_param","","",207],[11,"new","","",211],[11,"for_self","","",211],[11,"for_def","","",211],[11,"to_ty","","",211],[11,"is_self","","",211],[11,"empty","","",236],[11,"is_noop","","",236],[11,"empty","","",219],[11,"clone","","",237],[11,"when","","",237],[11,"intersects","","",237],[11,"owns_managed","","",237],[11,"owns_owned","","",237],[11,"is_sized","","",237],[11,"interior_param","","",237],[11,"interior_unsafe","","",237],[11,"interior_unsized","","",237],[11,"needs_drop","","",237],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",237],[11,"reference","","Includes only those bits that still apply when indirected through a reference (`&`)",237],[11,"managed_pointer","","Includes only those bits that still apply when indirected through a managed pointer (`@`)",237],[11,"unsafe_pointer","","Includes only those bits that still apply when indirected through an unsafe pointer (`*`)",237],[11,"union","","",237],[11,"has_dtor","","",237],[6,"Output","",""],[11,"bitor","","",237],[6,"Output","",""],[11,"bitand","","",237],[6,"Output","",""],[11,"sub","","",237],[11,"fmt","","",237],[11,"fmt","","",267],[11,"eq","","",267],[11,"ne","","",267],[11,"cmp","","",267],[11,"partial_cmp","","",267],[11,"lt","","",267],[11,"le","","",267],[11,"gt","","",267],[11,"ge","","",267],[11,"repr","","",259],[11,"clone","","",238],[11,"from_ast_variant","","Creates a new VariantInfo from the corresponding ast representation.",238],[11,"is_present","","",269],[11,"has_drop_flag","","",269],[11,"clone","","",239],[11,"to_string","","",244],[11,"from_mutbl","","",253],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",253],[11,"to_user_str","","",253],[11,"is_method_call","","",206],[11,"upvar_capture","","",206],[11,"node_ty","","",233],[11,"expr_ty_adjusted","","",233],[11,"node_method_ty","","",233],[11,"node_method_origin","","",233],[11,"adjustments","","",233],[11,"is_method_call","","",233],[11,"temporary_scope","","",233],[11,"upvar_capture","","",233],[11,"type_moves_by_default","","",233],[11,"param_env","","",233],[11,"closure_kind","","",233],[11,"closure_type","","",233],[11,"closure_upvars","","",233],[11,"fmt","","",270],[11,"eq","","",270],[11,"ne","","",270],[11,"clone","","",270],[11,"decode","","",240],[11,"encode","","",240],[11,"clone","","",240],[11,"is_identity","","",245],[11,"is_identity","","",198],[11,"new","","",212],[11,"shifted","","",212],[11,"repr","","",245],[11,"repr","","",246],[11,"repr","","",198],[11,"repr","","",247],[11,"repr","","",216],[11,"repr","","",265],[11,"repr","","",250],[11,"has_regions_escaping_depth","","",292],[11,"has_regions_escaping_depth","rustc::middle::subst","",159],[11,"has_regions_escaping_depth","","",164],[11,"has_regions_escaping_depth","rustc::middle::ty","",234],[11,"has_regions_escaping_depth","","",252],[11,"has_regions_escaping_depth","","",228],[11,"has_regions_escaping_depth","","",265],[11,"has_regions_escaping_depth","","",217],[11,"has_regions_escaping_depth","rustc::middle::subst","",161],[11,"has_regions_escaping_depth","rustc::middle::ty","",284],[11,"has_regions_escaping_depth","","",286],[11,"has_regions_escaping_depth","","",229],[11,"has_regions_escaping_depth","","",287],[11,"has_regions_escaping_depth","","",230],[11,"has_regions_escaping_depth","","",231],[11,"repr","","",230],[11,"has_projection_types","collections::vec","",293],[11,"has_projection_types","rustc::middle::subst","",164],[11,"has_projection_types","rustc::middle::ty","",209],[11,"has_projection_types","","",239],[11,"has_projection_types","","",232],[11,"has_projection_types","","",265],[11,"has_projection_types","","",229],[11,"has_projection_types","","",286],[11,"has_projection_types","","",252],[11,"has_projection_types","","",287],[11,"has_projection_types","","",230],[11,"has_projection_types","","",231],[11,"has_projection_types","","",292],[11,"has_projection_types","","",217],[11,"has_projection_types","rustc::middle::subst","",159],[11,"has_projection_types","core::option","",187],[11,"has_projection_types","alloc::rc","",97],[11,"has_projection_types","alloc::boxed","",294],[11,"has_projection_types","rustc::middle::ty","",284],[11,"has_projection_types","","",251],[11,"has_projection_types","","",210],[11,"has_projection_types","","",191],[11,"has_projection_types","","",208],[11,"references_error","","",284],[11,"references_error","alloc::rc","",97],[11,"references_error","rustc::middle::ty","",229],[11,"references_error","","",230],[11,"references_error","","",217],[11,"references_error","","",292],[11,"references_error","","",265],[11,"references_error","","",287],[11,"references_error","","",286],[11,"references_error","","",252],[11,"repr","","",209],[11,"repr","","",239],[11,"repr","","",191],[11,"repr","","",233],[11,"repr","","",264],[0,"ty_fold","rustc::middle","Generalized type folding mechanism. The setup is a bit convoluted\nbut allows for convenient usage. Let T be an instance of some\n\"foldable type\" (one which implements `TypeFoldable`) and F be an\ninstance of a \"folder\" (a type which implements `TypeFolder`). Then\nthe setup is intended to be:"],[3,"BottomUpFolder","rustc::middle::ty_fold",""],[12,"tcx","","",295],[12,"fldop","","",295],[3,"RegionFolder","","Folds over the substructure of a type, visiting its component\ntypes and all regions that occur *free* within it."],[3,"RegionEraser","",""],[5,"super_fold_binder","",""],[5,"super_fold_ty","",""],[5,"super_fold_substs","",""],[5,"super_fold_fn_sig","",""],[5,"super_fold_output","",""],[5,"super_fold_bare_fn_ty","",""],[5,"super_fold_closure_ty","",""],[5,"super_fold_trait_ref","",""],[5,"super_fold_mt","",""],[5,"super_fold_existential_bounds","",""],[5,"super_fold_autoref","",""],[5,"super_fold_item_substs","",""],[5,"collect_regions","",""],[5,"fold_regions","",""],[5,"erase_regions","",""],[5,"shift_region","",""],[5,"shift_regions","",""],[8,"TypeFoldable","","The TypeFoldable trait is implemented for every type that can be folded.\nBasically, every type that has a corresponding method in TypeFolder."],[10,"fold_with","","",296],[8,"TypeFolder","","The TypeFolder trait defines the actual *folding*. There is a\nmethod defined for every foldable type. Each of these has a\ndefault implementation that does an \"identity\" fold. Within each\nidentity fold, it should invoke `foo.fold_with(self)` to fold each\nsub-item."],[10,"tcx","","",297],[11,"enter_region_binder","","Invoked by the `super_*` routines when we enter a region\nbinding level (for example, when entering a function\nsignature). This is used by clients that want to track the\nDebruijn index nesting level.",297],[11,"exit_region_binder","","Invoked by the `super_*` routines when we exit a region\nbinding level. This is used by clients that want to\ntrack the Debruijn index nesting level.",297],[11,"fold_binder","","",297],[11,"fold_ty","","",297],[11,"fold_mt","","",297],[11,"fold_trait_ref","","",297],[11,"fold_substs","","",297],[11,"fold_fn_sig","","",297],[11,"fold_output","","",297],[11,"fold_bare_fn_ty","","",297],[11,"fold_closure_ty","","",297],[11,"fold_region","","",297],[11,"fold_existential_bounds","","",297],[11,"fold_autoref","","",297],[11,"fold_item_substs","","",297],[11,"fold_with","core::option","",187],[11,"fold_with","alloc::rc","",97],[11,"fold_with","alloc::boxed","",294],[11,"fold_with","collections::vec","",293],[11,"fold_with","rustc::middle::ty","",284],[11,"fold_with","syntax::owned_slice","",298],[11,"fold_with","rustc::middle::subst","",164],[11,"fold_with","rustc::middle::ty_fold","",292],[11,"fold_with","rustc::middle::ty","",208],[11,"fold_with","","",209],[11,"fold_with","","",194],[11,"fold_with","","",251],[11,"fold_with","","",210],[11,"fold_with","","",217],[11,"fold_with","","",191],[11,"fold_with","","",252],[11,"fold_with","rustc::middle::subst","",159],[11,"fold_with","rustc::middle::ty","",236],[11,"fold_with","","",247],[11,"fold_with","","",248],[11,"fold_with","","",250],[11,"fold_with","rustc::middle::ty_fold","",299],[11,"fold_with","rustc::middle::ty","",220],[11,"fold_with","","",219],[11,"fold_with","","",225],[11,"fold_with","","",264],[11,"fold_with","","",226],[11,"fold_with","","",227],[11,"fold_with","","",228],[11,"fold_with","","",265],[11,"fold_with","","",230],[11,"fold_with","","",231],[11,"fold_with","","",232],[11,"fold_with","","",246],[11,"fold_with","rustc::middle::traits","",169],[11,"fold_with","","",172],[11,"fold_with","","",173],[11,"fold_with","","",174],[11,"fold_with","","",188],[11,"fold_with","","",175],[11,"fold_with","rustc::middle::ty","",286],[11,"fold_with","","",229],[11,"fold_with","","",287],[11,"fold_with","","",239],[11,"fold_with","","",233],[11,"tcx","rustc::middle::ty_fold","",295],[11,"fold_ty","","",295],[11,"new","","",300],[11,"tcx","","",300],[11,"enter_region_binder","","",300],[11,"exit_region_binder","","",300],[11,"fold_region","","",300],[11,"tcx","","",301],[11,"fold_region","","",301],[0,"ty_walk","rustc::middle","An iterator over the type substructure."],[3,"TypeWalker","rustc::middle::ty_walk",""],[11,"new","","",302],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",302],[6,"Item","",""],[11,"next","","",302],[0,"weak_lang_items","rustc::middle","Validity checking for weak lang items"],[5,"check_crate","rustc::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the\nlanguage items required by this crate, but not defined yet."],[5,"link_name","",""],[0,"metadata","rustc",""],[0,"common","rustc::metadata",""],[3,"LinkMeta","rustc::metadata::common",""],[12,"crate_name","","",303],[12,"crate_hash","","",303],[4,"astencode_tag","",""],[13,"tag_ast","","",304],[13,"tag_tree","","",304],[13,"tag_id_range","","",304],[13,"tag_table","","",304],[13,"tag_table_def","","",304],[13,"tag_table_node_type","","",304],[13,"tag_table_item_subst","","",304],[13,"tag_table_freevars","","",304],[13,"tag_table_tcache","","",304],[13,"tag_table_param_defs","","",304],[13,"tag_table_mutbl","","",304],[13,"tag_table_last_use","","",304],[13,"tag_table_spill","","",304],[13,"tag_table_method_map","","",304],[13,"tag_table_vtable_map","","",304],[13,"tag_table_adjustments","","",304],[13,"tag_table_moves_map","","",304],[13,"tag_table_capture_map","","",304],[13,"tag_table_closure_tys","","",304],[13,"tag_table_closure_kinds","","",304],[13,"tag_table_upvar_capture_map","","",304],[13,"tag_table_capture_modes","","",304],[13,"tag_table_object_cast_map","","",304],[13,"tag_table_const_qualif","","",304],[17,"tag_items","",""],[17,"tag_paths_data_name","",""],[17,"tag_def_id","",""],[17,"tag_items_data","",""],[17,"tag_items_data_item","",""],[17,"tag_items_data_item_family","",""],[17,"tag_items_data_item_type","",""],[17,"tag_items_data_item_symbol","",""],[17,"tag_items_data_item_variant","",""],[17,"tag_items_data_parent_item","",""],[17,"tag_items_data_item_is_tuple_struct_ctor","",""],[17,"tag_index","",""],[17,"tag_index_buckets","",""],[17,"tag_index_buckets_bucket","",""],[17,"tag_index_buckets_bucket_elt","",""],[17,"tag_index_table","",""],[17,"tag_meta_item_name_value","",""],[17,"tag_meta_item_name","",""],[17,"tag_meta_item_value","",""],[17,"tag_attributes","",""],[17,"tag_attribute","",""],[17,"tag_meta_item_word","",""],[17,"tag_meta_item_list","",""],[17,"tag_crate_deps","",""],[17,"tag_crate_dep","",""],[17,"tag_crate_hash","",""],[17,"tag_crate_crate_name","",""],[17,"tag_crate_dep_crate_name","",""],[17,"tag_crate_dep_hash","",""],[17,"tag_mod_impl","",""],[17,"tag_item_trait_item","",""],[17,"tag_item_trait_ref","",""],[17,"tag_disr_val","",""],[17,"tag_path","",""],[17,"tag_path_len","",""],[17,"tag_path_elem_mod","",""],[17,"tag_path_elem_name","",""],[17,"tag_item_field","",""],[17,"tag_item_field_origin","",""],[17,"tag_item_variances","",""],[17,"tag_item_impl_item","",""],[17,"tag_item_trait_method_explicit_self","",""],[17,"tag_items_data_item_reexport","",""],[17,"tag_items_data_item_reexport_def_id","",""],[17,"tag_items_data_item_reexport_name","",""],[17,"tag_item_trait_item_sort","",""],[17,"tag_item_trait_parent_sort","",""],[17,"tag_item_impl_type_basename","",""],[17,"tag_crate_triple","",""],[17,"tag_dylib_dependency_formats","",""],[17,"tag_lang_items","",""],[17,"tag_lang_items_item","",""],[17,"tag_lang_items_item_id","",""],[17,"tag_lang_items_item_node_id","",""],[17,"tag_lang_items_missing","",""],[17,"tag_item_unnamed_field","",""],[17,"tag_items_data_item_visibility","",""],[17,"tag_item_method_tps","",""],[17,"tag_item_method_fty","",""],[17,"tag_mod_child","",""],[17,"tag_misc_info","",""],[17,"tag_misc_info_crate_items","",""],[17,"tag_item_method_provided_source","",""],[17,"tag_item_impl_vtables","",""],[17,"tag_impls","",""],[17,"tag_impls_impl","",""],[17,"tag_items_data_item_inherent_impl","",""],[17,"tag_items_data_item_extension_impl","",""],[17,"tag_native_libraries","",""],[17,"tag_native_libraries_lib","",""],[17,"tag_native_libraries_name","",""],[17,"tag_native_libraries_kind","",""],[17,"tag_plugin_registrar_fn","",""],[17,"tag_method_argument_names","",""],[17,"tag_method_argument_name","",""],[17,"tag_reachable_extern_fns","",""],[17,"tag_reachable_extern_fn_id","",""],[17,"tag_items_data_item_stability","",""],[17,"tag_items_data_item_repr","",""],[17,"tag_struct_fields","",""],[17,"tag_struct_field","",""],[17,"tag_struct_field_id","",""],[17,"tag_attribute_is_sugared_doc","",""],[17,"tag_items_data_region","",""],[17,"tag_region_param_def","",""],[17,"tag_region_param_def_ident","",""],[17,"tag_region_param_def_def_id","",""],[17,"tag_region_param_def_space","",""],[17,"tag_region_param_def_index","",""],[17,"tag_type_param_def","",""],[17,"tag_item_generics","",""],[17,"tag_method_ty_generics","",""],[17,"tag_predicate","",""],[17,"tag_predicate_space","",""],[17,"tag_predicate_data","",""],[17,"tag_unsafety","",""],[17,"tag_associated_type_names","",""],[17,"tag_associated_type_name","",""],[17,"tag_polarity","",""],[17,"tag_macro_defs","",""],[17,"tag_macro_def","",""],[17,"tag_macro_def_body","",""],[17,"tag_paren_sugar","",""],[17,"tag_codemap","",""],[17,"tag_codemap_filemap","",""],[17,"tag_item_super_predicates","",""],[17,"tag_defaulted_trait","",""],[11,"from_i64","","",304],[11,"from_u64","","",304],[11,"eq","","",304],[11,"ne","","",304],[11,"fmt","","",303],[11,"clone","","",303],[0,"tyencode","rustc::metadata",""],[3,"ctxt","rustc::metadata::tyencode",""],[12,"diag","","",305],[12,"ds","","",305],[12,"tcx","","",305],[12,"abbrevs","","",305],[3,"ty_abbrev","",""],[5,"enc_ty","",""],[5,"enc_substs","",""],[5,"enc_region","",""],[5,"enc_trait_ref","",""],[5,"enc_bare_fn_ty","",""],[5,"enc_closure_ty","",""],[5,"enc_builtin_bounds","",""],[5,"enc_existential_bounds","",""],[5,"enc_bounds","",""],[5,"enc_region_bounds","",""],[5,"enc_type_param_def","",""],[5,"enc_predicate","",""],[6,"abbrev_map","",""],[0,"tydecode","rustc::metadata",""],[3,"PState","rustc::metadata::tydecode",""],[4,"DefIdSource","",""],[13,"NominalType","","",306],[13,"TypeWithId","","",306],[13,"TypeParameter","","",306],[13,"RegionParameter","","",306],[13,"ClosureSource","","",306],[5,"parse_ident","",""],[5,"parse_name","",""],[5,"parse_state_from_data","",""],[5,"parse_ty_closure_data","",""],[5,"parse_ty_data","",""],[5,"parse_region_data","",""],[5,"parse_bare_fn_ty_data","",""],[5,"parse_trait_ref_data","",""],[5,"parse_substs_data","",""],[5,"parse_bounds_data","",""],[5,"parse_existential_bounds_data","",""],[5,"parse_builtin_bounds_data","",""],[5,"parse_def_id","",""],[5,"parse_predicate_data","",""],[5,"parse_predicate","",""],[5,"parse_type_param_def_data","",""],[11,"fmt","","",306],[0,"encoder","rustc::metadata",""],[3,"EncodeParams","rustc::metadata::encoder",""],[12,"diag","","",307],[12,"tcx","","",307],[12,"reexports","","",307],[12,"item_symbols","","",307],[12,"link_meta","","",307],[12,"cstore","","",307],[12,"encode_inlined_item","","",307],[12,"reachable","","",307],[3,"EncodeContext","",""],[12,"diag","","",308],[12,"tcx","","",308],[12,"reexports","","",308],[12,"item_symbols","","",308],[12,"link_meta","","",308],[12,"cstore","","",308],[12,"encode_inlined_item","","",308],[12,"type_abbrevs","","",308],[12,"reachable","","",308],[4,"InlinedItemRef","","A borrowed version of `ast::InlinedItem`."],[13,"IIItemRef","","",309],[13,"IITraitItemRef","","",309],[13,"IIImplItemRef","","",309],[13,"IIForeignRef","","",309],[5,"encode_def_id","",""],[5,"def_to_string","",""],[5,"write_closure_type","",""],[5,"write_type","",""],[5,"write_trait_ref","",""],[5,"write_region","",""],[5,"encode_metadata","",""],[5,"encoded_ty","",""],[6,"EncodeInlinedItem","",""],[17,"metadata_encoding_version","",""],[0,"decoder","rustc::metadata",""],[3,"CrateDep","rustc::metadata::decoder",""],[12,"cnum","","",310],[12,"name","","",310],[12,"hash","","",310],[4,"DefLike","",""],[13,"DlDef","","",311],[13,"DlImpl","","",311],[13,"DlField","","",311],[5,"maybe_find_item","",""],[5,"item_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_type","",""],[5,"get_stability","",""],[5,"get_repr_attrs","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_symbol","",""],[5,"each_lang_item","","Iterates over the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over all the top-level crate items."],[5,"get_item_path","",""],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns the def IDs of all the items in the given implementation."],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_impl_or_trait_item","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_tuple_struct_definition_if_ctor","","If node_id is the constructor of a tuple struct, retrieve the NodeId of\nthe actual type definition, otherwise, return None"],[5,"get_item_attrs","",""],[5,"get_struct_field_attrs","",""],[5,"get_struct_fields","",""],[5,"get_crate_attributes","",""],[5,"get_crate_deps","",""],[5,"maybe_get_crate_hash","",""],[5,"get_crate_hash","",""],[5,"maybe_get_crate_name","",""],[5,"get_crate_triple","",""],[5,"get_crate_name","",""],[5,"list_crate_metadata","",""],[5,"translate_def_id","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","",""],[5,"get_native_libraries","",""],[5,"get_plugin_registrar_fn","",""],[5,"each_exported_macro","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[5,"get_imported_filemaps","",""],[6,"Cmd","",""],[6,"DecodeInlinedItem","",""],[11,"fmt","","",311],[11,"clone","","",311],[11,"clone","","",310],[0,"creader","rustc::metadata","Validates all used crates and extern libraries and loads their metadata"],[3,"CrateReader","rustc::metadata::creader",""],[5,"validate_crate_name","",""],[11,"visit_item","","",312],[11,"new","","",312],[11,"read_crates","","",312],[11,"read_exported_macros","","Read exported macros.",312],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",312],[0,"cstore","rustc::metadata",""],[3,"ImportedFileMap","rustc::metadata::cstore","Holds information about a codemap::FileMap imported from another crate.\nSee creader::import_codemap() for more information."],[12,"original_start_pos","","This FileMap's byte-offset within the codemap of its original crate",313],[12,"original_end_pos","","The end of this FileMap within the codemap of its original crate",313],[12,"translated_filemap","","The imported FileMap's representation within the local codemap",313],[3,"crate_metadata","",""],[12,"name","","",314],[12,"data","","",314],[12,"cnum_map","","",314],[12,"cnum","","",314],[12,"codemap_import_info","","",314],[12,"span","","",314],[3,"CrateSource","",""],[12,"dylib","","",315],[12,"rlib","","",315],[12,"cnum","","",315],[3,"CStore","",""],[12,"intr","","",316],[4,"MetadataBlob","",""],[13,"MetadataVec","","",317],[13,"MetadataArchive","","",317],[4,"LinkagePreference","",""],[13,"RequireDynamic","","",318],[13,"RequireStatic","","",318],[4,"NativeLibraryKind","",""],[13,"NativeStatic","","",319],[13,"NativeFramework","","",319],[13,"NativeUnknown","","",319],[6,"cnum_map","",""],[11,"clone","","",318],[11,"eq","","",318],[11,"ne","","",318],[11,"fmt","","",318],[11,"from_i64","","",319],[11,"from_u64","","",319],[11,"eq","","",319],[11,"ne","","",319],[11,"clone","","",319],[11,"clone","","",315],[11,"eq","","",315],[11,"ne","","",315],[11,"new","","",316],[11,"next_crate_num","","",316],[11,"get_crate_data","","",316],[11,"get_crate_hash","","",316],[11,"set_crate_data","","",316],[11,"iter_crate_data","","",316],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",316],[11,"add_used_crate_source","","",316],[11,"get_used_crate_source","","",316],[11,"reset","","",316],[11,"get_used_crates","","",316],[11,"add_used_library","","",316],[11,"get_used_libraries","","",316],[11,"add_used_link_args","","",316],[11,"get_used_link_args","","",316],[11,"add_extern_mod_stmt_cnum","","",316],[11,"find_extern_mod_stmt_cnum","","",316],[11,"data","","",314],[11,"name","","",314],[11,"hash","","",314],[11,"as_slice","","",317],[0,"csearch","rustc::metadata",""],[3,"MethodInfo","rustc::metadata::csearch",""],[12,"name","","",320],[12,"def_id","","",320],[12,"vis","","",320],[4,"FoundAst","",""],[13,"Found","","",321],[13,"FoundParent","","",321],[13,"NotFound","","",321],[5,"get_symbol","",""],[5,"each_lang_item","","Iterates over all the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over each top-level crate item."],[5,"get_item_path","",""],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns information about the given implementation."],[5,"get_impl_or_trait_item","",""],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_item_attrs","",""],[5,"get_struct_fields","",""],[5,"get_struct_field_attrs","",""],[5,"get_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_field_type","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_native_libraries","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), returns the ID of\nthe trait that the method belongs to. Otherwise, returns `None`."],[5,"get_tuple_struct_definition_if_ctor","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"get_stability","",""],[5,"is_staged_api","",""],[5,"get_repr_attrs","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[0,"loader","rustc::metadata","Finds crate binaries and loads their metadata"],[3,"CrateMismatch","rustc::metadata::loader",""],[3,"Context","",""],[12,"sess","","",322],[12,"span","","",322],[12,"ident","","",322],[12,"crate_name","","",322],[12,"hash","","",322],[12,"target","","",322],[12,"triple","","",322],[12,"filesearch","","",322],[12,"root","","",322],[12,"rejected_via_hash","","",322],[12,"rejected_via_triple","","",322],[12,"rejected_via_kind","","",322],[12,"should_match_name","","",322],[3,"Library","",""],[12,"dylib","","",323],[12,"rlib","","",323],[12,"metadata","","",323],[3,"ArchiveMetadata","",""],[3,"CratePaths","",""],[12,"ident","","",324],[12,"dylib","","",324],[12,"rlib","","",324],[5,"note_crate_name","",""],[5,"meta_section_name","",""],[5,"read_meta_section_name","",""],[5,"list_file_metadata","",""],[11,"maybe_load_library_crate","","",322],[11,"load_library_crate","","",322],[11,"report_load_errs","","",322],[11,"as_slice","","",325],[0,"filesearch","rustc::metadata",""],[3,"FileSearch","rustc::metadata::filesearch",""],[12,"sysroot","","",326],[12,"search_paths","","",326],[12,"triple","","",326],[12,"kind","","",326],[4,"FileMatch","",""],[13,"FileMatches","","",327],[13,"FileDoesntMatch","","",327],[5,"relative_target_lib_path","",""],[5,"get_or_default_sysroot","",""],[5,"get_rust_path","","Returns RUST_PATH as a string, without default paths added"],[5,"rust_path","","Returns the value of RUST_PATH, as a list\nof Paths. Includes default entries for, if they exist:\n$HOME/.rust\nDIR/.rust for any DIR that's the current working directory\nor an ancestor of it"],[5,"rustlibdir","",""],[11,"for_each_lib_search_path","","",326],[11,"get_lib_path","","",326],[11,"search","","",326],[11,"new","","",326],[11,"get_dylib_search_paths","","",326],[11,"get_tools_search_paths","","",326],[0,"macro_import","rustc::metadata","Used by `rustc` when loading a crate with exported macros."],[5,"read_macro_defs","rustc::metadata::macro_import","Read exported macros."],[6,"MacroSelection","",""],[0,"session","rustc",""],[3,"Session","rustc::session",""],[12,"target","","",328],[12,"host","","",328],[12,"opts","","",328],[12,"cstore","","",328],[12,"parse_sess","","",328],[12,"entry_fn","","",328],[12,"entry_type","","",328],[12,"plugin_registrar_fn","","",328],[12,"default_sysroot","","",328],[12,"local_crate_source_file","","",328],[12,"working_dir","","",328],[12,"lint_store","","",328],[12,"lints","","",328],[12,"crate_types","","",328],[12,"crate_metadata","","",328],[12,"features","","",328],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive\noperations such as auto-dereference and monomorphization.",328],[12,"can_print_warnings","","",328],[5,"build_session","",""],[5,"build_session_","",""],[5,"expect","",""],[5,"early_error","",""],[5,"early_warn","",""],[0,"config","","Contains infrastructure for configuring the compiler, including parsing\ncommand line options."],[3,"Config","rustc::session::config",""],[12,"target","","",329],[12,"int_type","","",329],[12,"uint_type","","",329],[3,"Options","",""],[12,"crate_types","","",330],[12,"gc","","",330],[12,"optimize","","",330],[12,"debug_assertions","","",330],[12,"debuginfo","","",330],[12,"lint_opts","","",330],[12,"describe_lints","","",330],[12,"output_types","","",330],[12,"search_paths","","",330],[12,"libs","","",330],[12,"maybe_sysroot","","",330],[12,"target_triple","","",330],[12,"cfg","","",330],[12,"test","","",330],[12,"parse_only","","",330],[12,"no_trans","","",330],[12,"treat_err_as_bug","","",330],[12,"no_analysis","","",330],[12,"debugging_opts","","",330],[12,"write_dependency_info","","Whether to write dependency files. It's (enabled, optional filename).",330],[12,"prints","","",330],[12,"cg","","",330],[12,"color","","",330],[12,"show_span","","",330],[12,"externs","","",330],[12,"crate_name","","",330],[12,"alt_std_name","","An optional name to use as the crate for std during std injection,\nwritten `extern crate std = \"name\"`. Default to \"std\". Used by\nout-of-tree drivers.",330],[12,"unstable_features","","Indicates how the compiler should treat unstable features",330],[3,"OutputFilenames","",""],[12,"out_directory","","",331],[12,"out_filestem","","",331],[12,"single_output_file","","",331],[12,"extra","","",331],[3,"CodegenOptions","",""],[12,"ar","","",332],[12,"linker","","",332],[12,"link_args","","",332],[12,"lto","","",332],[12,"target_cpu","","",332],[12,"target_feature","","",332],[12,"passes","","",332],[12,"llvm_args","","",332],[12,"save_temps","","",332],[12,"rpath","","",332],[12,"no_prepopulate_passes","","",332],[12,"no_vectorize_loops","","",332],[12,"no_vectorize_slp","","",332],[12,"soft_float","","",332],[12,"prefer_dynamic","","",332],[12,"no_integrated_as","","",332],[12,"no_redzone","","",332],[12,"relocation_model","","",332],[12,"code_model","","",332],[12,"metadata","","",332],[12,"extra_filename","","",332],[12,"codegen_units","","",332],[12,"remark","","",332],[12,"no_stack_check","","",332],[12,"debuginfo","","",332],[12,"opt_level","","",332],[12,"debug_assertions","","",332],[3,"DebuggingOptions","",""],[12,"verbose","","",333],[12,"time_passes","","",333],[12,"count_llvm_insns","","",333],[12,"time_llvm_passes","","",333],[12,"trans_stats","","",333],[12,"asm_comments","","",333],[12,"no_verify","","",333],[12,"borrowck_stats","","",333],[12,"no_landing_pads","","",333],[12,"debug_llvm","","",333],[12,"count_type_sizes","","",333],[12,"meta_stats","","",333],[12,"print_link_args","","",333],[12,"gc","","",333],[12,"print_llvm_passes","","",333],[12,"ast_json","","",333],[12,"ast_json_noexpand","","",333],[12,"ls","","",333],[12,"save_analysis","","",333],[12,"print_move_fragments","","",333],[12,"flowgraph_print_loans","","",333],[12,"flowgraph_print_moves","","",333],[12,"flowgraph_print_assigns","","",333],[12,"flowgraph_print_all","","",333],[12,"print_region_graph","","",333],[12,"parse_only","","",333],[12,"no_trans","","",333],[12,"treat_err_as_bug","","",333],[12,"no_analysis","","",333],[12,"extra_plugins","","",333],[12,"unstable_options","","",333],[12,"print_enum_sizes","","",333],[12,"force_overflow_checks","","",333],[3,"RustcOptGroup","",""],[12,"opt_group","","",334],[12,"stability","","",334],[4,"OptLevel","",""],[13,"No","","",335],[13,"Less","","",335],[13,"Default","","",335],[13,"Aggressive","","",335],[4,"DebugInfoLevel","",""],[13,"NoDebugInfo","","",336],[13,"LimitedDebugInfo","","",336],[13,"FullDebugInfo","","",336],[4,"OutputType","",""],[13,"OutputTypeBitcode","","",337],[13,"OutputTypeAssembly","","",337],[13,"OutputTypeLlvmAssembly","","",337],[13,"OutputTypeObject","","",337],[13,"OutputTypeExe","","",337],[13,"OutputTypeDepInfo","","",337],[4,"UnstableFeatures","",""],[13,"Disallow","","Hard errors for unstable features are active, as on\nbeta/stable channels.",338],[13,"Default","","Use the default lint levels",338],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time\nduring the build that feature-related lints are set to warn or above\nbecause the build turns on warnings-as-errors and uses lots of unstable\nfeatures. As a result, this this is always required for building Rust\nitself.",338],[4,"PrintRequest","",""],[13,"FileNames","","",339],[13,"Sysroot","","",339],[13,"CrateName","","",339],[4,"Input","",""],[13,"File","","Load source from file",340],[13,"Str","","The string is the source",340],[4,"EntryFnType","",""],[13,"EntryMain","","",341],[13,"EntryStart","","",341],[13,"EntryNone","","",341],[4,"CrateType","",""],[13,"CrateTypeExecutable","","",342],[13,"CrateTypeDylib","","",342],[13,"CrateTypeRlib","","",342],[13,"CrateTypeStaticlib","","",342],[4,"Passes","",""],[13,"SomePasses","","",343],[13,"AllPasses","","",343],[4,"OptionStability","",""],[13,"Stable","","",344],[13,"Unstable","","",344],[5,"host_triple","",""],[5,"basic_options","","Some reasonable defaults"],[5,"basic_codegen_options","",""],[5,"build_codegen_options","",""],[5,"basic_debugging_options","",""],[5,"build_debugging_options","",""],[5,"default_lib_output","",""],[5,"default_configuration","",""],[5,"append_configuration","",""],[5,"build_configuration","",""],[5,"build_target_config","",""],[5,"short_optgroups","","Returns the \"short\" subset of the stable rustc command line options."],[5,"optgroups","","Returns all of the stable rustc command line options."],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options,\nincluding metadata for each option, such as whether the option is\npart of the stable long-term interface for rustc."],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for\neach option, such as whether the option is part of the stable\nlong-term interface for rustc."],[5,"parse_cfgspecs","",""],[5,"build_session_options","",""],[5,"get_unstable_features_setting","",""],[5,"parse_crate_types_from_list","",""],[6,"CodegenSetter","",""],[6,"DebuggingSetter","",""],[17,"CG_OPTIONS","",""],[17,"DB_OPTIONS","",""],[11,"eq","","",335],[11,"ne","","",335],[11,"clone","","",335],[11,"eq","","",336],[11,"ne","","",336],[11,"clone","","",336],[11,"cmp","","",337],[11,"partial_cmp","","",337],[11,"lt","","",337],[11,"le","","",337],[11,"gt","","",337],[11,"ge","","",337],[11,"eq","","",337],[11,"ne","","",337],[11,"clone","","",337],[11,"clone","","",330],[11,"clone","","",338],[11,"eq","","",339],[11,"ne","","",339],[11,"clone","","",339],[11,"filestem","","",340],[11,"clone","","",331],[11,"path","","",331],[11,"temp_path","","",331],[11,"with_extension","","",331],[11,"filestem","","",331],[11,"eq","","",341],[11,"ne","","",341],[11,"fmt","","",342],[11,"hash","","",342],[11,"cmp","","",342],[11,"clone","","",342],[11,"partial_cmp","","",342],[11,"lt","","",342],[11,"le","","",342],[11,"gt","","",342],[11,"ge","","",342],[11,"eq","","",342],[11,"ne","","",342],[11,"clone","","",343],[11,"is_empty","","",343],[11,"clone","","",332],[11,"clone","","",333],[11,"fmt","","",344],[11,"eq","","",344],[11,"ne","","",344],[11,"clone","","",344],[11,"eq","","",334],[11,"ne","","",334],[11,"clone","","",334],[11,"is_stable","","",334],[11,"fmt","","",342],[0,"search_paths","rustc::session",""],[3,"SearchPaths","rustc::session::search_paths",""],[3,"Iter","",""],[4,"PathKind","",""],[13,"Native","","",345],[13,"Crate","","",345],[13,"Dependency","","",345],[13,"Framework","","",345],[13,"ExternFlag","","",345],[13,"All","","",345],[11,"fmt","","",346],[11,"clone","","",346],[11,"fmt","","",345],[11,"clone","","",345],[11,"eq","","",345],[11,"ne","","",345],[11,"new","","",346],[11,"add_path","","",346],[11,"iter","","",346],[6,"Item","",""],[11,"next","","",347],[11,"span_fatal","rustc::session","",328],[11,"span_fatal_with_code","","",328],[11,"fatal","","",328],[11,"span_err","","",328],[11,"span_err_with_code","","",328],[11,"err","","",328],[11,"err_count","","",328],[11,"has_errors","","",328],[11,"abort_if_errors","","",328],[11,"span_warn","","",328],[11,"span_warn_with_code","","",328],[11,"warn","","",328],[11,"opt_span_warn","","",328],[11,"span_note","","",328],[11,"span_end_note","","",328],[11,"span_help","","",328],[11,"fileline_note","","",328],[11,"fileline_help","","",328],[11,"note","","",328],[11,"help","","",328],[11,"opt_span_bug","","",328],[11,"span_bug","","",328],[11,"bug","","",328],[11,"span_unimpl","","",328],[11,"unimpl","","",328],[11,"add_lint","","",328],[11,"next_node_id","","",328],[11,"reserve_node_ids","","",328],[11,"diagnostic","","",328],[11,"codemap","","",328],[11,"impossible_case","","",328],[11,"verbose","","",328],[11,"time_passes","","",328],[11,"count_llvm_insns","","",328],[11,"count_type_sizes","","",328],[11,"time_llvm_passes","","",328],[11,"trans_stats","","",328],[11,"meta_stats","","",328],[11,"asm_comments","","",328],[11,"no_verify","","",328],[11,"borrowck_stats","","",328],[11,"print_llvm_passes","","",328],[11,"lto","","",328],[11,"no_landing_pads","","",328],[11,"unstable_options","","",328],[11,"print_enum_sizes","","",328],[11,"sysroot","","",328],[11,"target_filesearch","","",328],[11,"host_filesearch","","",328],[0,"plugin","rustc","Infrastructure for compiler plugins."],[0,"registry","rustc::plugin","Used by plugin crates to tell `rustc` about the plugins they provide."],[3,"Registry","rustc::plugin::registry","Structure used to register plugins."],[12,"sess","","Compiler session. Useful if you want to emit diagnostic messages\nfrom the plugin registrar.",348],[11,"args","","Get the plugin's arguments, if any.",348],[11,"register_syntax_extension","","Register a syntax extension of any kind.",348],[11,"register_macro","","Register a macro of the usual kind.",348],[11,"register_lint_pass","","Register a compiler lint pass.",348],[11,"register_lint_group","","Register a lint group.",348],[0,"load","rustc::plugin","Used by `rustc` when loading a plugin."],[3,"PluginRegistrar","rustc::plugin::load",""],[12,"fun","","",349],[12,"args","","",349],[5,"load_plugins","","Read plugin metadata and dynamically load registrar functions."],[6,"PluginRegistrarFun","","Pointer to a registrar function."],[0,"build","rustc::plugin","Used by `rustc` when compiling a plugin crate."],[5,"find_plugin_registrar","rustc::plugin::build","Find the function marked with `#[plugin_registrar]`, if any."],[0,"lint","rustc","Lints, aka compiler warnings."],[3,"Context","rustc::lint","Context for lint checking."],[12,"tcx","","Type context we're checking in.",350],[12,"krate","","The crate being checked.",350],[12,"exported_items","","Items exported from the crate being checked.",350],[3,"LintStore","","Information about the registered lints."],[3,"GatherNodeLevels","",""],[3,"Lint","","Specification of a single lint."],[12,"name","","A string identifier for the lint.",351],[12,"default_level","","Default level for the lint.",351],[12,"desc","","Description of the lint or the issue it detects.",351],[3,"LintId","","Identifies a lint known to the compiler."],[4,"Level","","Setting for how to handle a lint."],[13,"Allow","","",352],[13,"Warn","","",352],[13,"Deny","","",352],[13,"Forbid","","",352],[4,"LintSource","","How a lint level was set."],[13,"Default","","Lint is at the default level as declared\nin rustc or a plugin.",353],[13,"Node","","Lint level was set by an attribute.",353],[13,"CommandLine","","Lint level was set by a command-line flag.",353],[13,"ReleaseChannel","","Lint level was set by the release channel.",353],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all)\naccording to `level`."],[5,"check_crate","","Perform lint checking on a crate."],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint\nattributes. Writing this as an iterator is an enormous mess."],[0,"builtin","","Some lints that are built in to the compiler."],[3,"HardwiredLints","rustc::lint::builtin","Does nothing as a lint pass, but registers some `Lint`s\nwhich are used by other parts of the compiler."],[7,"UNUSED_IMPORTS","",""],[7,"UNUSED_EXTERN_CRATES","",""],[7,"UNUSED_QUALIFICATIONS","",""],[7,"UNKNOWN_LINTS","",""],[7,"UNUSED_VARIABLES","",""],[7,"UNUSED_ASSIGNMENTS","",""],[7,"DEAD_CODE","",""],[7,"UNREACHABLE_CODE","",""],[7,"WARNINGS","",""],[7,"UNUSED_FEATURES","",""],[7,"STABLE_FEATURES","",""],[7,"UNKNOWN_CRATE_TYPES","",""],[7,"VARIANT_SIZE_DIFFERENCES","",""],[7,"FAT_PTR_TRANSMUTES","",""],[11,"get_lints","","",354],[11,"new","rustc::lint","",355],[11,"get_lints","","",355],[11,"get_lint_groups","","",355],[11,"register_pass","","",355],[11,"register_group","","",355],[11,"register_renamed","","",355],[11,"process_command_line","","",355],[11,"sess","","Get the overall compiler `Session` object.",350],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",350],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",350],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",350],[11,"visit_item","","",350],[11,"visit_foreign_item","","",350],[11,"visit_pat","","",350],[11,"visit_expr","","",350],[11,"visit_stmt","","",350],[11,"visit_fn","","",350],[11,"visit_ty_method","","",350],[11,"visit_struct_def","","",350],[11,"visit_struct_field","","",350],[11,"visit_variant","","",350],[11,"visit_ty","","",350],[11,"visit_ident","","",350],[11,"visit_mod","","",350],[11,"visit_local","","",350],[11,"visit_block","","",350],[11,"visit_arm","","",350],[11,"visit_decl","","",350],[11,"visit_expr_post","","",350],[11,"visit_generics","","",350],[11,"visit_trait_item","","",350],[11,"visit_opt_lifetime_ref","","",350],[11,"visit_lifetime_ref","","",350],[11,"visit_lifetime_def","","",350],[11,"visit_explicit_self","","",350],[11,"visit_mac","","",350],[11,"visit_path","","",350],[11,"visit_attribute","","",350],[11,"visit_id","","",350],[11,"get_lints","","",356],[11,"check_item","","",356],[6,"LintArray","",""],[6,"LintPassObject","","A lint pass boxed up as a trait object."],[6,"LevelSource","",""],[8,"LintPass","","Trait for types providing lint checks."],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",357],[11,"check_crate","","",357],[11,"check_ident","","",357],[11,"check_mod","","",357],[11,"check_foreign_item","","",357],[11,"check_item","","",357],[11,"check_local","","",357],[11,"check_block","","",357],[11,"check_stmt","","",357],[11,"check_arm","","",357],[11,"check_pat","","",357],[11,"check_decl","","",357],[11,"check_expr","","",357],[11,"check_expr_post","","",357],[11,"check_ty","","",357],[11,"check_generics","","",357],[11,"check_fn","","",357],[11,"check_ty_method","","",357],[11,"check_trait_item","","",357],[11,"check_struct_def","","",357],[11,"check_struct_def_post","","",357],[11,"check_struct_field","","",357],[11,"check_variant","","",357],[11,"check_variant_post","","",357],[11,"check_opt_lifetime_ref","","",357],[11,"check_lifetime_ref","","",357],[11,"check_lifetime_def","","",357],[11,"check_explicit_self","","",357],[11,"check_mac","","",357],[11,"check_path","","",357],[11,"check_attribute","","",357],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",357],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",357],[11,"fmt","","",351],[11,"name_lower","","Get the lint's name, with ASCII letters converted to lowercase.",351],[11,"clone","","",358],[11,"eq","","",358],[11,"hash","","",358],[11,"of","","Get the `LintId` for a `Lint`.",358],[11,"as_str","","Get the name of the lint.",358],[11,"fmt","","",352],[11,"cmp","","",352],[11,"partial_cmp","","",352],[11,"lt","","",352],[11,"le","","",352],[11,"gt","","",352],[11,"ge","","",352],[11,"eq","","",352],[11,"ne","","",352],[11,"clone","","",352],[11,"as_str","","Convert a level to a lower-case string.",352],[11,"from_str","","Convert a lower-case string to a level.",352],[11,"eq","","",353],[11,"ne","","",353],[11,"clone","","",353],[0,"util","rustc",""],[0,"fs","rustc::util",""],[5,"realpath","rustc::util::fs","Returns an absolute path in the filesystem that `path` points to. The\nreturned path does not contain any symlinks in its hierarchy."],[0,"sha2","rustc::util","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant."],[8,"Digest","rustc::util::sha2","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions."],[10,"input","","Provide message data.",359],[10,"result","","Retrieve the digest result. This method may be called multiple times.",359],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",359],[10,"output_bits","","Get the output size in bits.",359],[10,"input_str","","Convenience function that feeds a string into a digest.",359],[10,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",359],[10,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",359],[3,"Sha256","","The SHA-256 hash algorithm"],[0,"common","rustc::util",""],[3,"ErrorReported","rustc::util::common",""],[3,"Indenter","",""],[5,"time","",""],[5,"indent","",""],[5,"indenter","",""],[5,"loop_query","",""],[5,"block_query","",""],[5,"can_reach","","K: Eq + Hash<S>, V, S, H: Hasher<S>"],[5,"memoized","","Memoizes a one-argument closure using the given RefCell containing\na type implementing MutableMap to serve as a cache."],[5,"path2cstr","",""],[17,"FN_OUTPUT_NAME","",""],[11,"fmt","","",360],[11,"clone","","",360],[11,"drop","","",361],[0,"ppaux","rustc::util",""],[5,"note_and_explain_region","rustc::util::ppaux",""],[5,"explain_region_and_span","",""],[5,"bound_region_ptr_to_string","",""],[5,"bound_region_to_string","",""],[5,"region_ptr_to_string","",""],[5,"region_to_string","",""],[5,"mutability_to_string","",""],[5,"mt_to_string","",""],[5,"vec_map_to_string","",""],[5,"ty_to_string","",""],[5,"explicit_self_category_to_str","",""],[5,"parameterized","",""],[5,"ty_to_short_str","",""],[8,"Repr","","Produces a string suitable for debugging output."],[10,"repr","","",362],[8,"UserString","","Produces a string suitable for showing to the user."],[10,"user_string","","",363],[11,"repr","core::option","",187],[11,"repr","syntax::ptr","",364],[11,"repr","core::result","",365],[11,"repr","alloc::rc","",97],[11,"repr","alloc::boxed","",294],[11,"repr","syntax::owned_slice","",298],[11,"repr","collections::vec","",293],[11,"user_string","","",293],[11,"repr","rustc::middle::def","",69],[11,"user_string","rustc::middle::ty","",216],[11,"repr","","",225],[11,"repr","","",226],[11,"repr","","",207],[11,"repr","","",194],[11,"repr","rustc::middle::subst","",159],[11,"repr","","",164],[11,"repr","rustc::middle::ty","",236],[11,"repr","rustc::middle::subst","",161],[11,"repr","rustc::util::ppaux","",299],[11,"repr","rustc::middle::ty","",219],[11,"repr","","",217],[11,"repr","","",235],[11,"repr","syntax::ast","",366],[11,"repr","","",146],[11,"repr","","",367],[11,"user_string","","",367],[11,"repr","","",368],[11,"repr","","",369],[11,"repr","","",370],[11,"repr","rustc::util::ppaux","",371],[11,"repr","syntax::ast","",147],[11,"repr","rustc::middle::ty","",255],[11,"repr","","",252],[11,"user_string","","",252],[11,"repr","","",215],[11,"repr","rustc::middle::region","",154],[11,"repr","","",152],[11,"repr","syntax::ast","",50],[11,"repr","rustc::middle::ty","",234],[11,"repr","","",227],[11,"repr","","",228],[11,"repr","","",232],[11,"repr","","",197],[11,"repr","","",244],[11,"repr","","",192],[11,"repr","syntax::ast","",41],[11,"user_string","","",41],[11,"repr","","",40],[11,"repr","","",372],[11,"repr","","",373],[11,"repr","rustc::middle::ty","",208],[11,"repr","","",210],[11,"repr","","",251],[11,"repr","","",202],[11,"repr","","",248],[11,"repr","","",200],[11,"repr","","",201],[11,"repr","","",260],[11,"user_string","","",260],[11,"repr","syntax::codemap","",374],[11,"user_string","alloc::rc","",97],[11,"user_string","rustc::middle::ty","",219],[11,"repr","","",220],[11,"user_string","rustc::util::ppaux","",299],[11,"user_string","rustc::middle::ty","",284],[11,"user_string","","",217],[11,"user_string","rustc::util::ppaux","",292],[11,"user_string","syntax::ast","",40],[11,"repr","syntax::abi","",375],[11,"user_string","","",375],[11,"repr","rustc::middle::ty","",213],[11,"repr","syntax::ast","",376],[11,"repr","rustc::middle::ty","",253],[11,"repr","","",214],[11,"repr","","",254],[11,"repr","","",222],[11,"repr","","",223],[11,"repr","","",224],[11,"repr","","",221],[11,"repr","","",257],[11,"repr","syntax::ast","",377],[11,"repr","","",378],[11,"repr","","",127],[11,"repr","rustc::middle::ty","",270],[11,"user_string","","",211],[11,"repr","","",211],[11,"repr","","",284],[11,"repr","std::collections::hash::map","",379],[11,"repr","rustc::middle::ty","",287],[11,"user_string","","",287],[11,"repr","","",286],[11,"user_string","","",286],[11,"repr","","",229],[11,"user_string","","",229],[11,"user_string","","",230],[11,"repr","","",231],[11,"user_string","","",231],[11,"user_string","","",265],[0,"nodemap","rustc::util","An efficient hash map for node IDs"],[3,"FnvHasher","rustc::util::nodemap","A speedy hash algorithm for node ids and def ids. The hashmap in\nlibcollections by default uses SipHash which isn't quite as speedy as we\nwant. In the compiler we're not really worried about DOS attempts, so we\njust default to a non-cryptographic hash."],[5,"FnvHashMap","",""],[5,"FnvHashSet","",""],[5,"NodeMap","",""],[5,"DefIdMap","",""],[5,"NodeSet","",""],[5,"DefIdSet","",""],[6,"FnvHashMap","",""],[6,"FnvHashSet","",""],[6,"NodeMap","",""],[6,"DefIdMap","",""],[6,"NodeSet","",""],[6,"DefIdSet","",""],[11,"default","","",380],[11,"write","","",380],[11,"finish","","",380],[0,"snapshot_vec","rustc::util","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits\nyou to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either\nto rollback to the start of the snapshot or commit those changes."],[3,"SnapshotVec","rustc::util::snapshot_vec",""],[3,"Snapshot","",""],[4,"UndoLog","",""],[13,"OpenSnapshot","","Indicates where a snapshot started.",381],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",381],[13,"NewElem","","New variable with given index was created.",381],[13,"SetElem","","Variable with given index was changed *from* the given value.",381],[13,"Other","","Extensible set of actions",381],[8,"SnapshotVecDelegate","",""],[16,"Value","rustc::util::snapshot_vec::SnapshotVecDelegate",""],[16,"Undo","",""],[10,"reverse","rustc::util::snapshot_vec","",382],[11,"new","","",383],[11,"record","","",383],[11,"push","","",383],[11,"get","","",383],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",383],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",383],[11,"start_snapshot","","",383],[11,"actions_since_snapshot","","",383],[11,"rollback_to","","",383],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",383],[0,"lev_distance","rustc::util",""],[5,"lev_distance","rustc::util::lev_distance",""],[0,"lib","rustc",""],[0,"llvm","rustc::lib",""],[0,"archive_ro","rustc::lib::llvm","A wrapper around LLVM's archive (.a) code"],[3,"ArchiveRO","rustc::lib::llvm::archive_ro",""],[0,"diagnostic","rustc::lib::llvm","LLVM diagnostic reports."],[4,"OptimizationDiagnosticKind","rustc::lib::llvm::diagnostic",""],[13,"OptimizationRemark","","",1],[13,"OptimizationMissed","","",1],[13,"OptimizationAnalysis","","",1],[13,"OptimizationFailure","","",1],[3,"OptimizationDiagnostic","",""],[12,"kind","","",15],[12,"pass_name","","",15],[12,"function","","",15],[12,"debug_loc","","",15],[12,"message","","",15],[3,"InlineAsmDiagnostic","",""],[12,"cookie","","",16],[12,"message","","",16],[12,"instruction","","",16],[4,"Diagnostic","",""],[13,"Optimization","","",2],[13,"InlineAsm","","",2],[13,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",2],[6,"Opcode","rustc::lib::llvm",""],[6,"Bool","",""],[17,"True","",""],[17,"False","",""],[4,"CallConv","",""],[13,"CCallConv","","",3],[13,"FastCallConv","","",3],[13,"ColdCallConv","","",3],[13,"X86StdcallCallConv","","",3],[13,"X86FastcallCallConv","","",3],[13,"X86_64_Win64","","",3],[4,"Visibility","",""],[13,"LLVMDefaultVisibility","","",17],[13,"HiddenVisibility","","",17],[13,"ProtectedVisibility","","",17],[4,"Linkage","",""],[13,"ExternalLinkage","","",18],[13,"AvailableExternallyLinkage","","",18],[13,"LinkOnceAnyLinkage","","",18],[13,"LinkOnceODRLinkage","","",18],[13,"WeakAnyLinkage","","",18],[13,"WeakODRLinkage","","",18],[13,"AppendingLinkage","","",18],[13,"InternalLinkage","","",18],[13,"PrivateLinkage","","",18],[13,"ExternalWeakLinkage","","",18],[13,"CommonLinkage","","",18],[4,"DiagnosticSeverity","",""],[13,"Error","","",4],[13,"Warning","","",4],[13,"Remark","","",4],[13,"Note","","",4],[3,"Attribute","",""],[17,"ZExtAttribute","",""],[17,"SExtAttribute","",""],[17,"NoReturnAttribute","",""],[17,"InRegAttribute","",""],[17,"StructRetAttribute","",""],[17,"NoUnwindAttribute","",""],[17,"NoAliasAttribute","",""],[17,"ByValAttribute","",""],[17,"NestAttribute","",""],[17,"ReadNoneAttribute","",""],[17,"ReadOnlyAttribute","",""],[17,"NoInlineAttribute","",""],[17,"AlwaysInlineAttribute","",""],[17,"OptimizeForSizeAttribute","",""],[17,"StackProtectAttribute","",""],[17,"StackProtectReqAttribute","",""],[17,"AlignmentAttribute","",""],[17,"NoCaptureAttribute","",""],[17,"NoRedZoneAttribute","",""],[17,"NoImplicitFloatAttribute","",""],[17,"NakedAttribute","",""],[17,"InlineHintAttribute","",""],[17,"StackAttribute","",""],[17,"ReturnsTwiceAttribute","",""],[17,"UWTableAttribute","",""],[17,"NonLazyBindAttribute","",""],[4,"OtherAttribute","",""],[13,"SanitizeAddressAttribute","","",6],[13,"MinSizeAttribute","","",6],[13,"NoDuplicateAttribute","","",6],[13,"StackProtectStrongAttribute","","",6],[13,"SanitizeThreadAttribute","","",6],[13,"SanitizeMemoryAttribute","","",6],[13,"NoBuiltinAttribute","","",6],[13,"ReturnedAttribute","","",6],[13,"ColdAttribute","","",6],[13,"BuiltinAttribute","","",6],[13,"OptimizeNoneAttribute","","",6],[13,"InAllocaAttribute","","",6],[13,"NonNullAttribute","","",6],[4,"SpecialAttribute","",""],[13,"DereferenceableAttribute","","",7],[4,"AttributeSet","",""],[13,"ReturnIndex","","",19],[13,"FunctionIndex","","",19],[8,"AttrHelper","",""],[10,"apply_llfn","","",20],[10,"apply_callsite","","",20],[3,"AttrBuilder","",""],[4,"IntPredicate","",""],[13,"IntEQ","","",21],[13,"IntNE","","",21],[13,"IntUGT","","",21],[13,"IntUGE","","",21],[13,"IntULT","","",21],[13,"IntULE","","",21],[13,"IntSGT","","",21],[13,"IntSGE","","",21],[13,"IntSLT","","",21],[13,"IntSLE","","",21],[4,"RealPredicate","",""],[13,"RealPredicateFalse","","",22],[13,"RealOEQ","","",22],[13,"RealOGT","","",22],[13,"RealOGE","","",22],[13,"RealOLT","","",22],[13,"RealOLE","","",22],[13,"RealONE","","",22],[13,"RealORD","","",22],[13,"RealUNO","","",22],[13,"RealUEQ","","",22],[13,"RealUGT","","",22],[13,"RealUGE","","",22],[13,"RealULT","","",22],[13,"RealULE","","",22],[13,"RealUNE","","",22],[13,"RealPredicateTrue","","",22],[4,"TypeKind","",""],[13,"Void","","",9],[13,"Half","","",9],[13,"Float","","",9],[13,"Double","","",9],[13,"X86_FP80","","",9],[13,"FP128","","",9],[13,"PPC_FP128","","",9],[13,"Label","","",9],[13,"Integer","","",9],[13,"Function","","",9],[13,"Struct","","",9],[13,"Array","","",9],[13,"Pointer","","",9],[13,"Vector","","",9],[13,"Metadata","","",9],[13,"X86_MMX","","",9],[4,"AtomicBinOp","",""],[13,"AtomicXchg","","",23],[13,"AtomicAdd","","",23],[13,"AtomicSub","","",23],[13,"AtomicAnd","","",23],[13,"AtomicNand","","",23],[13,"AtomicOr","","",23],[13,"AtomicXor","","",23],[13,"AtomicMax","","",23],[13,"AtomicMin","","",23],[13,"AtomicUMax","","",23],[13,"AtomicUMin","","",23],[4,"AtomicOrdering","",""],[13,"NotAtomic","","",24],[13,"Unordered","","",24],[13,"Monotonic","","",24],[13,"Acquire","","",24],[13,"Release","","",24],[13,"AcquireRelease","","",24],[13,"SequentiallyConsistent","","",24],[4,"FileType","",""],[13,"AssemblyFileType","","",25],[13,"ObjectFileType","","",25],[4,"MetadataType","",""],[13,"MD_dbg","","",26],[13,"MD_tbaa","","",26],[13,"MD_prof","","",26],[13,"MD_fpmath","","",26],[13,"MD_range","","",26],[13,"MD_tbaa_struct","","",26],[13,"MD_invariant_load","","",26],[13,"MD_alias_scope","","",26],[13,"MD_noalias","","",26],[13,"MD_nontemporal","","",26],[13,"MD_mem_parallel_loop_access","","",26],[13,"MD_nonnull","","",26],[4,"AsmDialect","",""],[13,"AD_ATT","","",27],[13,"AD_Intel","","",27],[4,"CodeGenOptLevel","",""],[13,"CodeGenLevelNone","","",10],[13,"CodeGenLevelLess","","",10],[13,"CodeGenLevelDefault","","",10],[13,"CodeGenLevelAggressive","","",10],[4,"RelocMode","",""],[13,"RelocDefault","","",11],[13,"RelocStatic","","",11],[13,"RelocPIC","","",11],[13,"RelocDynamicNoPic","","",11],[4,"CodeGenModel","",""],[13,"CodeModelDefault","","",28],[13,"CodeModelJITDefault","","",28],[13,"CodeModelSmall","","",28],[13,"CodeModelKernel","","",28],[13,"CodeModelMedium","","",28],[13,"CodeModelLarge","","",28],[4,"DiagnosticKind","",""],[13,"DK_InlineAsm","","",29],[13,"DK_StackSize","","",29],[13,"DK_DebugMetadataVersion","","",29],[13,"DK_SampleProfile","","",29],[13,"DK_OptimizationRemark","","",29],[13,"DK_OptimizationRemarkMissed","","",29],[13,"DK_OptimizationRemarkAnalysis","","",29],[13,"DK_OptimizationFailure","","",29],[4,"Module_opaque","",""],[6,"ModuleRef","",""],[4,"Context_opaque","",""],[6,"ContextRef","",""],[4,"Type_opaque","",""],[6,"TypeRef","",""],[4,"Value_opaque","",""],[6,"ValueRef","",""],[4,"Metadata_opaque","",""],[6,"MetadataRef","",""],[4,"BasicBlock_opaque","",""],[6,"BasicBlockRef","",""],[4,"Builder_opaque","",""],[6,"BuilderRef","",""],[4,"ExecutionEngine_opaque","",""],[6,"ExecutionEngineRef","",""],[4,"RustJITMemoryManager_opaque","",""],[6,"RustJITMemoryManagerRef","",""],[4,"MemoryBuffer_opaque","",""],[6,"MemoryBufferRef","",""],[4,"PassManager_opaque","",""],[6,"PassManagerRef","",""],[4,"PassManagerBuilder_opaque","",""],[6,"PassManagerBuilderRef","",""],[4,"Use_opaque","",""],[6,"UseRef","",""],[4,"TargetData_opaque","",""],[6,"TargetDataRef","",""],[4,"ObjectFile_opaque","",""],[6,"ObjectFileRef","",""],[4,"SectionIterator_opaque","",""],[6,"SectionIteratorRef","",""],[4,"Pass_opaque","",""],[6,"PassRef","",""],[4,"TargetMachine_opaque","",""],[6,"TargetMachineRef","",""],[4,"Archive_opaque","",""],[6,"ArchiveRef","",""],[4,"Twine_opaque","",""],[6,"TwineRef","",""],[4,"DiagnosticInfo_opaque","",""],[6,"DiagnosticInfoRef","",""],[4,"DebugLoc_opaque","",""],[6,"DebugLocRef","",""],[4,"SMDiagnostic_opaque","",""],[6,"SMDiagnosticRef","",""],[6,"DiagnosticHandler","",""],[6,"InlineAsmDiagHandler","",""],[0,"debuginfo","",""],[4,"DIBuilder_opaque","rustc::lib::llvm::debuginfo",""],[6,"DIBuilderRef","",""],[6,"DIDescriptor","",""],[6,"DIScope","",""],[6,"DILocation","",""],[6,"DIFile","",""],[6,"DILexicalBlock","",""],[6,"DISubprogram","",""],[6,"DINameSpace","",""],[6,"DIType","",""],[6,"DIBasicType","",""],[6,"DIDerivedType","",""],[6,"DICompositeType","",""],[6,"DIVariable","",""],[6,"DIGlobalVariable","",""],[6,"DIArray","",""],[6,"DISubrange","",""],[6,"DIEnumerator","",""],[6,"DITemplateTypeParameter","",""],[4,"DIDescriptorFlags","",""],[13,"FlagPrivate","","",30],[13,"FlagProtected","","",30],[13,"FlagFwdDecl","","",30],[13,"FlagAppleBlock","","",30],[13,"FlagBlockByrefStruct","","",30],[13,"FlagVirtual","","",30],[13,"FlagArtificial","","",30],[13,"FlagExplicit","","",30],[13,"FlagPrototyped","","",30],[13,"FlagObjcClassComplete","","",30],[13,"FlagObjectPointer","","",30],[13,"FlagVector","","",30],[13,"FlagStaticMember","","",30],[13,"FlagIndirectVariable","","",30],[13,"FlagLValueReference","","",30],[13,"FlagRValueReference","","",30],[5,"LLVMContextCreate","rustc::lib::llvm",""],[5,"LLVMContextDispose","",""],[5,"LLVMGetMDKindIDInContext","",""],[5,"LLVMModuleCreateWithNameInContext","",""],[5,"LLVMGetModuleContext","",""],[5,"LLVMDisposeModule","",""],[5,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout."],[5,"LLVMSetDataLayout","",""],[5,"LLVMGetTarget","","Target triple. See Module::getTargetTriple."],[5,"LLVMSetTarget","",""],[5,"LLVMDumpModule","","See Module::dump."],[5,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm."],[5,"LLVMGetTypeKind","","See llvm::LLVMTypeKind::getTypeID."],[5,"LLVMGetTypeContext","","See llvm::LLVMType::getContext."],[5,"LLVMInt1TypeInContext","",""],[5,"LLVMInt8TypeInContext","",""],[5,"LLVMInt16TypeInContext","",""],[5,"LLVMInt32TypeInContext","",""],[5,"LLVMInt64TypeInContext","",""],[5,"LLVMIntTypeInContext","",""],[5,"LLVMGetIntTypeWidth","",""],[5,"LLVMFloatTypeInContext","",""],[5,"LLVMDoubleTypeInContext","",""],[5,"LLVMX86FP80TypeInContext","",""],[5,"LLVMFP128TypeInContext","",""],[5,"LLVMPPCFP128TypeInContext","",""],[5,"LLVMFunctionType","",""],[5,"LLVMIsFunctionVarArg","",""],[5,"LLVMGetReturnType","",""],[5,"LLVMCountParamTypes","",""],[5,"LLVMGetParamTypes","",""],[5,"LLVMStructTypeInContext","",""],[5,"LLVMCountStructElementTypes","",""],[5,"LLVMGetStructElementTypes","",""],[5,"LLVMIsPackedStruct","",""],[5,"LLVMRustArrayType","",""],[5,"LLVMPointerType","",""],[5,"LLVMVectorType","",""],[5,"LLVMGetElementType","",""],[5,"LLVMGetArrayLength","",""],[5,"LLVMGetPointerAddressSpace","",""],[5,"LLVMGetPointerToGlobal","",""],[5,"LLVMGetVectorSize","",""],[5,"LLVMVoidTypeInContext","",""],[5,"LLVMLabelTypeInContext","",""],[5,"LLVMMetadataTypeInContext","",""],[5,"LLVMTypeOf","",""],[5,"LLVMGetValueName","",""],[5,"LLVMSetValueName","",""],[5,"LLVMDumpValue","",""],[5,"LLVMReplaceAllUsesWith","",""],[5,"LLVMHasMetadata","",""],[5,"LLVMGetMetadata","",""],[5,"LLVMSetMetadata","",""],[5,"LLVMGetFirstUse","",""],[5,"LLVMGetNextUse","",""],[5,"LLVMGetUser","",""],[5,"LLVMGetUsedValue","",""],[5,"LLVMGetNumOperands","",""],[5,"LLVMGetOperand","",""],[5,"LLVMSetOperand","",""],[5,"LLVMConstNull","",""],[5,"LLVMConstAllOnes","",""],[5,"LLVMConstICmp","",""],[5,"LLVMConstFCmp","",""],[5,"LLVMGetUndef","",""],[5,"LLVMIsConstant","",""],[5,"LLVMIsNull","",""],[5,"LLVMIsUndef","",""],[5,"LLVMConstPointerNull","",""],[5,"LLVMMDStringInContext","",""],[5,"LLVMMDNodeInContext","",""],[5,"LLVMAddNamedMetadataOperand","",""],[5,"LLVMConstInt","",""],[5,"LLVMConstIntOfString","",""],[5,"LLVMConstIntOfStringAndSize","",""],[5,"LLVMConstReal","",""],[5,"LLVMConstRealOfString","",""],[5,"LLVMConstRealOfStringAndSize","",""],[5,"LLVMConstIntGetZExtValue","",""],[5,"LLVMConstIntGetSExtValue","",""],[5,"LLVMConstStringInContext","",""],[5,"LLVMConstStructInContext","",""],[5,"LLVMConstArray","",""],[5,"LLVMConstVector","",""],[5,"LLVMAlignOf","",""],[5,"LLVMSizeOf","",""],[5,"LLVMConstNeg","",""],[5,"LLVMConstNSWNeg","",""],[5,"LLVMConstNUWNeg","",""],[5,"LLVMConstFNeg","",""],[5,"LLVMConstNot","",""],[5,"LLVMConstAdd","",""],[5,"LLVMConstNSWAdd","",""],[5,"LLVMConstNUWAdd","",""],[5,"LLVMConstFAdd","",""],[5,"LLVMConstSub","",""],[5,"LLVMConstNSWSub","",""],[5,"LLVMConstNUWSub","",""],[5,"LLVMConstFSub","",""],[5,"LLVMConstMul","",""],[5,"LLVMConstNSWMul","",""],[5,"LLVMConstNUWMul","",""],[5,"LLVMConstFMul","",""],[5,"LLVMConstUDiv","",""],[5,"LLVMConstSDiv","",""],[5,"LLVMConstExactSDiv","",""],[5,"LLVMConstFDiv","",""],[5,"LLVMConstURem","",""],[5,"LLVMConstSRem","",""],[5,"LLVMConstFRem","",""],[5,"LLVMConstAnd","",""],[5,"LLVMConstOr","",""],[5,"LLVMConstXor","",""],[5,"LLVMConstShl","",""],[5,"LLVMConstLShr","",""],[5,"LLVMConstAShr","",""],[5,"LLVMConstGEP","",""],[5,"LLVMConstInBoundsGEP","",""],[5,"LLVMConstTrunc","",""],[5,"LLVMConstSExt","",""],[5,"LLVMConstZExt","",""],[5,"LLVMConstFPTrunc","",""],[5,"LLVMConstFPExt","",""],[5,"LLVMConstUIToFP","",""],[5,"LLVMConstSIToFP","",""],[5,"LLVMConstFPToUI","",""],[5,"LLVMConstFPToSI","",""],[5,"LLVMConstPtrToInt","",""],[5,"LLVMConstIntToPtr","",""],[5,"LLVMConstBitCast","",""],[5,"LLVMConstZExtOrBitCast","",""],[5,"LLVMConstSExtOrBitCast","",""],[5,"LLVMConstTruncOrBitCast","",""],[5,"LLVMConstPointerCast","",""],[5,"LLVMConstIntCast","",""],[5,"LLVMConstFPCast","",""],[5,"LLVMConstSelect","",""],[5,"LLVMConstExtractElement","",""],[5,"LLVMConstInsertElement","",""],[5,"LLVMConstShuffleVector","",""],[5,"LLVMConstExtractValue","",""],[5,"LLVMConstInsertValue","",""],[5,"LLVMConstInlineAsm","",""],[5,"LLVMBlockAddress","",""],[5,"LLVMGetGlobalParent","",""],[5,"LLVMIsDeclaration","",""],[5,"LLVMGetLinkage","",""],[5,"LLVMSetLinkage","",""],[5,"LLVMGetSection","",""],[5,"LLVMSetSection","",""],[5,"LLVMGetVisibility","",""],[5,"LLVMSetVisibility","",""],[5,"LLVMGetAlignment","",""],[5,"LLVMSetAlignment","",""],[5,"LLVMIsAGlobalVariable","",""],[5,"LLVMAddGlobal","",""],[5,"LLVMAddGlobalInAddressSpace","",""],[5,"LLVMGetNamedGlobal","",""],[5,"LLVMGetFirstGlobal","",""],[5,"LLVMGetLastGlobal","",""],[5,"LLVMGetNextGlobal","",""],[5,"LLVMGetPreviousGlobal","",""],[5,"LLVMDeleteGlobal","",""],[5,"LLVMGetInitializer","",""],[5,"LLVMSetInitializer","",""],[5,"LLVMIsThreadLocal","",""],[5,"LLVMSetThreadLocal","",""],[5,"LLVMIsGlobalConstant","",""],[5,"LLVMSetGlobalConstant","",""],[5,"LLVMAddAlias","",""],[5,"LLVMAddFunction","",""],[5,"LLVMGetNamedFunction","",""],[5,"LLVMGetFirstFunction","",""],[5,"LLVMGetLastFunction","",""],[5,"LLVMGetNextFunction","",""],[5,"LLVMGetPreviousFunction","",""],[5,"LLVMDeleteFunction","",""],[5,"LLVMGetOrInsertFunction","",""],[5,"LLVMGetIntrinsicID","",""],[5,"LLVMGetFunctionCallConv","",""],[5,"LLVMSetFunctionCallConv","",""],[5,"LLVMGetGC","",""],[5,"LLVMSetGC","",""],[5,"LLVMAddDereferenceableAttr","",""],[5,"LLVMAddFunctionAttribute","",""],[5,"LLVMAddFunctionAttrString","",""],[5,"LLVMRemoveFunctionAttrString","",""],[5,"LLVMGetFunctionAttr","",""],[5,"LLVMCountParams","",""],[5,"LLVMGetParams","",""],[5,"LLVMGetParam","",""],[5,"LLVMGetParamParent","",""],[5,"LLVMGetFirstParam","",""],[5,"LLVMGetLastParam","",""],[5,"LLVMGetNextParam","",""],[5,"LLVMGetPreviousParam","",""],[5,"LLVMAddAttribute","",""],[5,"LLVMRemoveAttribute","",""],[5,"LLVMGetAttribute","",""],[5,"LLVMSetParamAlignment","",""],[5,"LLVMBasicBlockAsValue","",""],[5,"LLVMValueIsBasicBlock","",""],[5,"LLVMValueAsBasicBlock","",""],[5,"LLVMGetBasicBlockParent","",""],[5,"LLVMCountBasicBlocks","",""],[5,"LLVMGetBasicBlocks","",""],[5,"LLVMGetFirstBasicBlock","",""],[5,"LLVMGetLastBasicBlock","",""],[5,"LLVMGetNextBasicBlock","",""],[5,"LLVMGetPreviousBasicBlock","",""],[5,"LLVMGetEntryBasicBlock","",""],[5,"LLVMAppendBasicBlockInContext","",""],[5,"LLVMInsertBasicBlockInContext","",""],[5,"LLVMDeleteBasicBlock","",""],[5,"LLVMMoveBasicBlockAfter","",""],[5,"LLVMMoveBasicBlockBefore","",""],[5,"LLVMGetInstructionParent","",""],[5,"LLVMGetFirstInstruction","",""],[5,"LLVMGetLastInstruction","",""],[5,"LLVMGetNextInstruction","",""],[5,"LLVMGetPreviousInstruction","",""],[5,"LLVMInstructionEraseFromParent","",""],[5,"LLVMSetInstructionCallConv","",""],[5,"LLVMGetInstructionCallConv","",""],[5,"LLVMAddInstrAttribute","",""],[5,"LLVMRemoveInstrAttribute","",""],[5,"LLVMSetInstrParamAlignment","",""],[5,"LLVMAddCallSiteAttribute","",""],[5,"LLVMAddDereferenceableCallSiteAttr","",""],[5,"LLVMIsTailCall","",""],[5,"LLVMSetTailCall","",""],[5,"LLVMGetVolatile","",""],[5,"LLVMSetVolatile","",""],[5,"LLVMAddIncoming","",""],[5,"LLVMCountIncoming","",""],[5,"LLVMGetIncomingValue","",""],[5,"LLVMGetIncomingBlock","",""],[5,"LLVMCreateBuilderInContext","",""],[5,"LLVMPositionBuilder","",""],[5,"LLVMPositionBuilderBefore","",""],[5,"LLVMPositionBuilderAtEnd","",""],[5,"LLVMGetInsertBlock","",""],[5,"LLVMClearInsertionPosition","",""],[5,"LLVMInsertIntoBuilder","",""],[5,"LLVMInsertIntoBuilderWithName","",""],[5,"LLVMDisposeBuilder","",""],[5,"LLVMRustCreateJITMemoryManager","",""],[5,"LLVMBuildExecutionEngine","",""],[5,"LLVMDisposeExecutionEngine","",""],[5,"LLVMExecutionEngineFinalizeObject","",""],[5,"LLVMRustLoadDynamicLibrary","",""],[5,"LLVMExecutionEngineAddModule","",""],[5,"LLVMExecutionEngineRemoveModule","",""],[5,"LLVMSetCurrentDebugLocation","",""],[5,"LLVMGetCurrentDebugLocation","",""],[5,"LLVMSetInstDebugLocation","",""],[5,"LLVMBuildRetVoid","",""],[5,"LLVMBuildRet","",""],[5,"LLVMBuildAggregateRet","",""],[5,"LLVMBuildBr","",""],[5,"LLVMBuildCondBr","",""],[5,"LLVMBuildSwitch","",""],[5,"LLVMBuildIndirectBr","",""],[5,"LLVMBuildInvoke","",""],[5,"LLVMBuildLandingPad","",""],[5,"LLVMBuildResume","",""],[5,"LLVMBuildUnreachable","",""],[5,"LLVMAddCase","",""],[5,"LLVMAddDestination","",""],[5,"LLVMAddClause","",""],[5,"LLVMSetCleanup","",""],[5,"LLVMBuildAdd","",""],[5,"LLVMBuildNSWAdd","",""],[5,"LLVMBuildNUWAdd","",""],[5,"LLVMBuildFAdd","",""],[5,"LLVMBuildSub","",""],[5,"LLVMBuildNSWSub","",""],[5,"LLVMBuildNUWSub","",""],[5,"LLVMBuildFSub","",""],[5,"LLVMBuildMul","",""],[5,"LLVMBuildNSWMul","",""],[5,"LLVMBuildNUWMul","",""],[5,"LLVMBuildFMul","",""],[5,"LLVMBuildUDiv","",""],[5,"LLVMBuildSDiv","",""],[5,"LLVMBuildExactSDiv","",""],[5,"LLVMBuildFDiv","",""],[5,"LLVMBuildURem","",""],[5,"LLVMBuildSRem","",""],[5,"LLVMBuildFRem","",""],[5,"LLVMBuildShl","",""],[5,"LLVMBuildLShr","",""],[5,"LLVMBuildAShr","",""],[5,"LLVMBuildAnd","",""],[5,"LLVMBuildOr","",""],[5,"LLVMBuildXor","",""],[5,"LLVMBuildBinOp","",""],[5,"LLVMBuildNeg","",""],[5,"LLVMBuildNSWNeg","",""],[5,"LLVMBuildNUWNeg","",""],[5,"LLVMBuildFNeg","",""],[5,"LLVMBuildNot","",""],[5,"LLVMBuildMalloc","",""],[5,"LLVMBuildArrayMalloc","",""],[5,"LLVMBuildAlloca","",""],[5,"LLVMBuildArrayAlloca","",""],[5,"LLVMBuildFree","",""],[5,"LLVMBuildLoad","",""],[5,"LLVMBuildStore","",""],[5,"LLVMBuildGEP","",""],[5,"LLVMBuildInBoundsGEP","",""],[5,"LLVMBuildStructGEP","",""],[5,"LLVMBuildGlobalString","",""],[5,"LLVMBuildGlobalStringPtr","",""],[5,"LLVMBuildTrunc","",""],[5,"LLVMBuildZExt","",""],[5,"LLVMBuildSExt","",""],[5,"LLVMBuildFPToUI","",""],[5,"LLVMBuildFPToSI","",""],[5,"LLVMBuildUIToFP","",""],[5,"LLVMBuildSIToFP","",""],[5,"LLVMBuildFPTrunc","",""],[5,"LLVMBuildFPExt","",""],[5,"LLVMBuildPtrToInt","",""],[5,"LLVMBuildIntToPtr","",""],[5,"LLVMBuildBitCast","",""],[5,"LLVMBuildZExtOrBitCast","",""],[5,"LLVMBuildSExtOrBitCast","",""],[5,"LLVMBuildTruncOrBitCast","",""],[5,"LLVMBuildCast","",""],[5,"LLVMBuildPointerCast","",""],[5,"LLVMBuildIntCast","",""],[5,"LLVMBuildFPCast","",""],[5,"LLVMBuildICmp","",""],[5,"LLVMBuildFCmp","",""],[5,"LLVMBuildPhi","",""],[5,"LLVMBuildCall","",""],[5,"LLVMBuildSelect","",""],[5,"LLVMBuildVAArg","",""],[5,"LLVMBuildExtractElement","",""],[5,"LLVMBuildInsertElement","",""],[5,"LLVMBuildShuffleVector","",""],[5,"LLVMBuildExtractValue","",""],[5,"LLVMBuildInsertValue","",""],[5,"LLVMBuildIsNull","",""],[5,"LLVMBuildIsNotNull","",""],[5,"LLVMBuildPtrDiff","",""],[5,"LLVMBuildAtomicLoad","",""],[5,"LLVMBuildAtomicStore","",""],[5,"LLVMBuildAtomicCmpXchg","",""],[5,"LLVMBuildAtomicRMW","",""],[5,"LLVMBuildAtomicFence","",""],[5,"LLVMIsATerminatorInst","",""],[5,"LLVMIsAStoreInst","",""],[5,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success."],[5,"LLVMCreateTargetData","","Creates target data from a target layout string."],[5,"LLVMAddTargetData","","Adds the target data to the given pass manager. The pass manager\nreferences the target data only weakly."],[5,"LLVMStoreSizeOfType","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMABISizeOfType","","Distance between successive elements in an array of T. Includes ABI padding."],[5,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type."],[5,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type."],[5,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a\ntarget."],[5,"LLVMCallFrameAlignmentOfType","","Returns the minimum alignment of a type when part of a call frame."],[5,"LLVMDisposeTargetData","","Disposes target data."],[5,"LLVMCreatePassManager","","Creates a pass manager."],[5,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager"],[5,"LLVMDisposePassManager","","Disposes a pass manager."],[5,"LLVMRunPassManager","","Runs a pass manager on a module."],[5,"LLVMRunFunctionPassManager","","Runs the function passes on the provided function."],[5,"LLVMInitializeFunctionPassManager","","Initializes all the function passes scheduled in the manager"],[5,"LLVMFinalizeFunctionPassManager","","Finalizes all the function passes scheduled in the manager"],[5,"LLVMInitializePasses","",""],[5,"LLVMAddVerifierPass","","Adds a verification pass."],[5,"LLVMAddGlobalOptimizerPass","",""],[5,"LLVMAddIPSCCPPass","",""],[5,"LLVMAddDeadArgEliminationPass","",""],[5,"LLVMAddInstructionCombiningPass","",""],[5,"LLVMAddCFGSimplificationPass","",""],[5,"LLVMAddFunctionInliningPass","",""],[5,"LLVMAddFunctionAttrsPass","",""],[5,"LLVMAddScalarReplAggregatesPass","",""],[5,"LLVMAddScalarReplAggregatesPassSSA","",""],[5,"LLVMAddJumpThreadingPass","",""],[5,"LLVMAddConstantPropagationPass","",""],[5,"LLVMAddReassociatePass","",""],[5,"LLVMAddLoopRotatePass","",""],[5,"LLVMAddLICMPass","",""],[5,"LLVMAddLoopUnswitchPass","",""],[5,"LLVMAddLoopDeletionPass","",""],[5,"LLVMAddLoopUnrollPass","",""],[5,"LLVMAddGVNPass","",""],[5,"LLVMAddMemCpyOptPass","",""],[5,"LLVMAddSCCPPass","",""],[5,"LLVMAddDeadStoreEliminationPass","",""],[5,"LLVMAddStripDeadPrototypesPass","",""],[5,"LLVMAddConstantMergePass","",""],[5,"LLVMAddArgumentPromotionPass","",""],[5,"LLVMAddTailCallEliminationPass","",""],[5,"LLVMAddIndVarSimplifyPass","",""],[5,"LLVMAddAggressiveDCEPass","",""],[5,"LLVMAddGlobalDCEPass","",""],[5,"LLVMAddCorrelatedValuePropagationPass","",""],[5,"LLVMAddPruneEHPass","",""],[5,"LLVMAddSimplifyLibCallsPass","",""],[5,"LLVMAddLoopIdiomPass","",""],[5,"LLVMAddEarlyCSEPass","",""],[5,"LLVMAddTypeBasedAliasAnalysisPass","",""],[5,"LLVMAddBasicAliasAnalysisPass","",""],[5,"LLVMPassManagerBuilderCreate","",""],[5,"LLVMPassManagerBuilderDispose","",""],[5,"LLVMPassManagerBuilderSetOptLevel","",""],[5,"LLVMPassManagerBuilderSetSizeLevel","",""],[5,"LLVMPassManagerBuilderSetDisableUnitAtATime","",""],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","",""],[5,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls","",""],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","",""],[5,"LLVMPassManagerBuilderPopulateModulePassManager","",""],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","",""],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","",""],[5,"LLVMDisposeMemoryBuffer","","Destroys a memory buffer."],[5,"LLVMCreateObjectFile","","Opens an object file."],[5,"LLVMDisposeObjectFile","","Closes an object file."],[5,"LLVMGetSections","","Enumerates the sections in an object file."],[5,"LLVMDisposeSectionIterator","","Destroys a section iterator."],[5,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section\nlist:"],[5,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section."],[5,"LLVMGetSectionSize","","Returns the current section size."],[5,"LLVMGetSectionContents","","Returns the current section contents as a string buffer."],[5,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use\nLLVMDisposeMemoryBuffer() to get rid of it."],[5,"LLVMCreateMemoryBufferWithMemoryRange","","Borrows the contents of the memory buffer (doesn't copy it)"],[5,"LLVMCreateMemoryBufferWithMemoryRangeCopy","",""],[5,"LLVMIsMultithreaded","",""],[5,"LLVMStartMultithreaded","",""],[5,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust* call."],[5,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren't picking them up."],[5,"LLVMStructCreateNamed","",""],[5,"LLVMStructSetBody","",""],[5,"LLVMConstNamedStruct","",""],[5,"LLVMSetDebug","","Enables LLVM debug output."],[5,"LLVMInlineAsm","","Prepares inline assembly."],[7,"LLVMRustDebugMetadataVersion","",""],[5,"LLVMRustAddModuleFlag","",""],[5,"LLVMDIBuilderCreate","",""],[5,"LLVMDIBuilderDispose","",""],[5,"LLVMDIBuilderFinalize","",""],[5,"LLVMDIBuilderCreateCompileUnit","",""],[5,"LLVMDIBuilderCreateFile","",""],[5,"LLVMDIBuilderCreateSubroutineType","",""],[5,"LLVMDIBuilderCreateFunction","",""],[5,"LLVMDIBuilderCreateBasicType","",""],[5,"LLVMDIBuilderCreatePointerType","",""],[5,"LLVMDIBuilderCreateStructType","",""],[5,"LLVMDIBuilderCreateMemberType","",""],[5,"LLVMDIBuilderCreateLexicalBlock","",""],[5,"LLVMDIBuilderCreateStaticVariable","",""],[5,"LLVMDIBuilderCreateVariable","",""],[5,"LLVMDIBuilderCreateArrayType","",""],[5,"LLVMDIBuilderCreateVectorType","",""],[5,"LLVMDIBuilderGetOrCreateSubrange","",""],[5,"LLVMDIBuilderGetOrCreateArray","",""],[5,"LLVMDIBuilderInsertDeclareAtEnd","",""],[5,"LLVMDIBuilderInsertDeclareBefore","",""],[5,"LLVMDIBuilderCreateEnumerator","",""],[5,"LLVMDIBuilderCreateEnumerationType","",""],[5,"LLVMDIBuilderCreateUnionType","",""],[5,"LLVMSetUnnamedAddr","",""],[5,"LLVMDIBuilderCreateTemplateTypeParameter","",""],[5,"LLVMDIBuilderCreateOpDeref","",""],[5,"LLVMDIBuilderCreateOpPlus","",""],[5,"LLVMDIBuilderCreateNameSpace","",""],[5,"LLVMDIBuilderCreateDebugLocation","",""],[5,"LLVMDICompositeTypeSetTypeArray","",""],[5,"LLVMWriteTypeToString","",""],[5,"LLVMWriteValueToString","",""],[5,"LLVMIsAArgument","",""],[5,"LLVMIsAAllocaInst","",""],[5,"LLVMInitializeX86TargetInfo","",""],[5,"LLVMInitializeX86Target","",""],[5,"LLVMInitializeX86TargetMC","",""],[5,"LLVMInitializeX86AsmPrinter","",""],[5,"LLVMInitializeX86AsmParser","",""],[5,"LLVMInitializeARMTargetInfo","",""],[5,"LLVMInitializeARMTarget","",""],[5,"LLVMInitializeARMTargetMC","",""],[5,"LLVMInitializeARMAsmPrinter","",""],[5,"LLVMInitializeARMAsmParser","",""],[5,"LLVMInitializeAArch64TargetInfo","",""],[5,"LLVMInitializeAArch64Target","",""],[5,"LLVMInitializeAArch64TargetMC","",""],[5,"LLVMInitializeAArch64AsmPrinter","",""],[5,"LLVMInitializeAArch64AsmParser","",""],[5,"LLVMInitializeMipsTargetInfo","",""],[5,"LLVMInitializeMipsTarget","",""],[5,"LLVMInitializeMipsTargetMC","",""],[5,"LLVMInitializeMipsAsmPrinter","",""],[5,"LLVMInitializeMipsAsmParser","",""],[5,"LLVMInitializePowerPCTargetInfo","",""],[5,"LLVMInitializePowerPCTarget","",""],[5,"LLVMInitializePowerPCTargetMC","",""],[5,"LLVMInitializePowerPCAsmPrinter","",""],[5,"LLVMInitializePowerPCAsmParser","",""],[5,"LLVMRustAddPass","",""],[5,"LLVMRustCreateTargetMachine","",""],[5,"LLVMRustDisposeTargetMachine","",""],[5,"LLVMRustAddAnalysisPasses","",""],[5,"LLVMRustAddBuilderLibraryInfo","",""],[5,"LLVMRustAddLibraryInfo","",""],[5,"LLVMRustRunFunctionPassManager","",""],[5,"LLVMRustWriteOutputFile","",""],[5,"LLVMRustPrintModule","",""],[5,"LLVMRustSetLLVMOptions","",""],[5,"LLVMRustPrintPasses","",""],[5,"LLVMRustSetNormalizedTarget","",""],[5,"LLVMRustAddAlwaysInlinePass","",""],[5,"LLVMRustLinkInExternalBitcode","",""],[5,"LLVMRustRunRestrictionPass","",""],[5,"LLVMRustMarkAllFunctionsNounwind","",""],[5,"LLVMRustOpenArchive","",""],[5,"LLVMRustArchiveReadSection","",""],[5,"LLVMRustDestroyArchive","",""],[5,"LLVMRustSetDLLExportStorageClass","",""],[5,"LLVMVersionMajor","",""],[5,"LLVMVersionMinor","",""],[5,"LLVMRustGetSectionName","",""],[5,"LLVMWriteTwineToString","",""],[5,"LLVMContextSetDiagnosticHandler","",""],[5,"LLVMUnpackOptimizationDiagnostic","",""],[5,"LLVMUnpackInlineAsmDiagnostic","",""],[5,"LLVMWriteDiagnosticInfoToString","",""],[5,"LLVMGetDiagInfoSeverity","",""],[5,"LLVMGetDiagInfoKind","",""],[5,"LLVMWriteDebugLocToString","",""],[5,"LLVMSetInlineAsmDiagnosticHandler","",""],[5,"LLVMWriteSMDiagnosticToString","",""],[5,"SetInstructionCallConv","",""],[5,"SetFunctionCallConv","",""],[5,"SetLinkage","",""],[5,"SetUnnamedAddr","",""],[5,"set_thread_local","",""],[5,"ConstICmp","",""],[5,"ConstFCmp","",""],[5,"SetFunctionAttribute","",""],[3,"TargetData","",""],[12,"lltd","","",12],[5,"mk_target_data","",""],[3,"ObjectFile","",""],[12,"llof","","",13],[3,"SectionIter","",""],[12,"llsi","","",14],[5,"mk_section_iter","",""],[5,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun."],[4,"RustString_opaque","",""],[6,"RustStringRef","",""],[5,"rust_llvm_string_write_impl","","Appending to a Rust string -- used by raw_rust_string_ostream."],[5,"build_string","",""],[5,"twine_to_string","",""],[5,"debug_loc_to_string","",""],[14,"lint_initializer!","rustc","Build a `Lint` initializer."],[14,"declare_lint!","","Declare a static item of type `&'static Lint`."],[14,"lint_array!","","Declare a static `LintArray` and return it as an expression."],[11,"repr","rustc::middle::ty","",204],[11,"combine","","",217],[11,"combine","","",292],[11,"combine","","",230],[11,"combine","","",210],[11,"resolve","","",292],[11,"contains_error","","",292],[11,"resolve","","",283],[11,"contains_error","","",283],[11,"relate_bound","rustc::middle::infer::lub","",103],[11,"index","rustc::middle::ty","",222],[11,"from_index","","",222],[11,"unification_table","","",222],[11,"tag","","",222],[11,"to_type","","",257],[11,"to_type_err","","",257],[11,"index","","",223],[11,"from_index","","",223],[11,"unification_table","","",223],[11,"tag","","",223],[11,"repr","","",266]],"paths":[[3,"ArchiveRO"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"CallConv"],[4,"DiagnosticSeverity"],[3,"Attribute"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[3,"AttrBuilder"],[4,"TypeKind"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[3,"OptimizationDiagnostic"],[3,"InlineAsmDiagnostic"],[4,"Visibility"],[4,"Linkage"],[4,"AttributeSet"],[8,"AttrHelper"],[4,"IntPredicate"],[4,"RealPredicate"],[4,"AtomicBinOp"],[4,"AtomicOrdering"],[4,"FileType"],[4,"MetadataType"],[4,"AsmDialect"],[4,"CodeGenModel"],[4,"DiagnosticKind"],[4,"DIDescriptorFlags"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"TempDir"],[3,"FixedBuffer64"],[3,"Sha256"],[3,"Svh"],[4,"SawAbiComponent"],[4,"SawExprComponent"],[4,"SawStmtComponent"],[3,"Ident"],[3,"Name"],[3,"StrictVersionHashVisitor"],[4,"Arch"],[3,"Target"],[3,"TargetOptions"],[3,"ArchiveConfig"],[3,"RPathConfig"],[3,"t"],[8,"vtable_decoder_helpers"],[3,"DefId"],[3,"Decoder"],[3,"CFG"],[3,"CFGEdgeData"],[4,"CFGNodeData"],[3,"LabelledCFG"],[3,"ConstQualif"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[4,"Constructor"],[3,"ConstEvalErr"],[4,"const_val"],[4,"ErrKind"],[4,"EntryOrExit"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[3,"DataFlowContext"],[3,"PathResolution"],[3,"Export"],[4,"Def"],[4,"MethodProvenance"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[8,"Delegate"],[3,"ExprUseVisitor"],[4,"SimplifiedType"],[3,"Node"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"DepthFirstTraversal"],[3,"InferCtxt"],[4,"TypeOrigin"],[4,"ValuePairs"],[4,"SubregionOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"fixup_err"],[3,"Bivariate"],[3,"CombineFields"],[8,"Combine"],[8,"Combineable"],[3,"Rc"],[3,"Equate"],[8,"ErrorReporting"],[8,"Resolvable"],[3,"Glb"],[8,"LatticeDir"],[3,"Lub"],[3,"SameRegions"],[4,"Constraint"],[4,"Verify"],[4,"GenericKind"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[4,"VarValue"],[3,"TwoRegions"],[3,"RegionSnapshot"],[3,"RegionVarBindings"],[3,"OpportunisticTypeResolver"],[3,"TypeFreshener"],[3,"Sub"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"Node"],[4,"VarValue"],[8,"UnifyKey"],[8,"SimplyUnifiable"],[8,"InferCtxtMethodsForSimplyUnifiableTypes"],[3,"UnificationTable"],[3,"Delegate"],[4,"FloatTy"],[3,"TypeTrace"],[3,"LanguageItems"],[4,"LangItem"],[3,"Upvar"],[3,"cmt_"],[4,"categorization"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[4,"deref_kind"],[4,"InteriorSafety"],[4,"AliasableReason"],[8,"ast_node"],[8,"Typer"],[3,"Expr"],[3,"Pat"],[3,"MemCategorizationContext"],[4,"LastPrivate"],[4,"PrivateDep"],[4,"ImportUse"],[3,"DestructionScopeData"],[3,"BlockRemainder"],[4,"CodeExtent"],[3,"Context"],[3,"RegionMaps"],[4,"DefRegion"],[3,"Index"],[3,"Substs"],[3,"SeparateVecsPerParamSpace"],[4,"RegionSubsts"],[4,"ParamSpace"],[8,"Subst"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"RegionObligation"],[3,"MismatchedProjectionTypes"],[3,"Normalized"],[3,"Obligation"],[3,"ObligationCause"],[3,"FulfillmentError"],[3,"VtableImplData"],[3,"VtableDefaultImplData"],[3,"VtableBuiltinData"],[3,"VtableObjectData"],[4,"OrphanCheckErr"],[4,"ObjectSafetyViolation"],[4,"MethodViolationCode"],[4,"MethodMatchResult"],[4,"MethodMatchedData"],[4,"ObligationCauseCode"],[4,"SelectionError"],[4,"FulfillmentErrorCode"],[3,"FulfillmentContext"],[3,"SelectionCache"],[3,"SelectionContext"],[4,"Option"],[4,"Vtable"],[3,"DerivedObligationCause"],[3,"CrateAnalysis"],[3,"field"],[3,"Method"],[3,"AssociatedType"],[3,"mt"],[3,"field_ty"],[3,"creader_cache_key"],[3,"ItemVariances"],[3,"AutoDerefRef"],[3,"param_index"],[3,"MethodParam"],[3,"MethodObject"],[3,"MethodCallee"],[3,"MethodCall"],[3,"TransmuteRestriction"],[3,"CommonTypes"],[3,"ctxt"],[3,"TyS"],[3,"BareFnTy"],[3,"ClosureTy"],[3,"FnSig"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"UpvarId"],[3,"UpvarBorrow"],[3,"FreeRegion"],[3,"TyTrait"],[3,"TraitRef"],[3,"expected_found"],[3,"ParamBounds"],[3,"ExistentialBounds"],[3,"TyVid"],[3,"IntVid"],[3,"FloatVid"],[3,"RegionVid"],[3,"TypeParameterDef"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[3,"TraitPredicate"],[3,"ProjectionPredicate"],[3,"ProjectionTy"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"TraitDef"],[3,"ItemSubsts"],[3,"TypeContents"],[3,"VariantInfo"],[3,"ClosureUpvar"],[3,"Freevar"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[4,"Variance"],[4,"AutoAdjustment"],[4,"UnsizeKind"],[4,"AutoRef"],[4,"MethodOrigin"],[4,"ExprAdjustment"],[4,"vtable_origin"],[4,"FnOutput"],[4,"Region"],[4,"BorrowKind"],[4,"UpvarCapture"],[4,"BoundRegion"],[4,"sty"],[4,"IntVarValue"],[4,"terr_vstore_kind"],[4,"type_err"],[4,"BuiltinBound"],[4,"InferTy"],[4,"UnconstrainedNumeric"],[4,"InferRegion"],[4,"ObjectLifetimeDefault"],[4,"Predicate"],[4,"ClosureKind"],[4,"Representability"],[4,"ExprKind"],[4,"DtorKind"],[4,"ExplicitSelfCategory"],[4,"CopyImplementationError"],[8,"ToPolyTraitRef"],[8,"AsPredicate"],[8,"ClosureTyper"],[8,"RegionEscape"],[8,"HasProjectionTypes"],[8,"ReferencesError"],[3,"CtxtArenas"],[3,"TypeFlags"],[3,"InternedTy"],[6,"PolyFnOutput"],[6,"PolyFnSig"],[6,"PolyTraitRef"],[3,"Binder"],[6,"PolyTraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[6,"PolyProjectionPredicate"],[6,"PolyEquatePredicate"],[6,"PolyRegionOutlivesPredicate"],[6,"PolyTypeOutlivesPredicate"],[6,"Ty"],[3,"Vec"],[3,"Box"],[3,"BottomUpFolder"],[8,"TypeFoldable"],[8,"TypeFolder"],[3,"OwnedSlice"],[6,"BuiltinBounds"],[3,"RegionFolder"],[3,"RegionEraser"],[3,"TypeWalker"],[3,"LinkMeta"],[4,"astencode_tag"],[3,"ctxt"],[4,"DefIdSource"],[3,"EncodeParams"],[3,"EncodeContext"],[4,"InlinedItemRef"],[3,"CrateDep"],[4,"DefLike"],[3,"CrateReader"],[3,"ImportedFileMap"],[3,"crate_metadata"],[3,"CrateSource"],[3,"CStore"],[4,"MetadataBlob"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"MethodInfo"],[4,"FoundAst"],[3,"Context"],[3,"Library"],[3,"CratePaths"],[3,"ArchiveMetadata"],[3,"FileSearch"],[4,"FileMatch"],[3,"Session"],[3,"Config"],[3,"Options"],[3,"OutputFilenames"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[3,"RustcOptGroup"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"UnstableFeatures"],[4,"PrintRequest"],[4,"Input"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[4,"OptionStability"],[4,"PathKind"],[3,"SearchPaths"],[3,"Iter"],[3,"Registry"],[3,"PluginRegistrar"],[3,"Context"],[3,"Lint"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"GatherNodeLevels"],[8,"LintPass"],[3,"LintId"],[8,"Digest"],[3,"ErrorReported"],[3,"Indenter"],[8,"Repr"],[8,"UserString"],[3,"P"],[4,"Result"],[4,"TraitItem"],[3,"Path"],[3,"Ty"],[3,"Item"],[3,"Lifetime"],[6,"Stmt"],[4,"ExplicitSelf_"],[4,"Visibility"],[3,"Span"],[4,"Abi"],[4,"Mutability"],[4,"IntTy"],[4,"UintTy"],[3,"HashMap"],[3,"FnvHasher"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[3,"SnapshotVec"]]};
searchIndex['fmt_macros'] = {"items":[[0,"","fmt_macros","Macro support for format strings"],[3,"Argument","","Representation of an argument specification."],[12,"position","","Where to find this argument",0],[12,"format","","How to format the argument",0],[3,"FormatSpec","","Specification for the formatting of an argument in the format string."],[12,"fill","","Optionally specified character to fill alignment with",1],[12,"align","","Optionally specified alignment",1],[12,"flags","","Packed version of various flags provided",1],[12,"precision","","The integer precision to use",1],[12,"width","","The string width requested for the resulting format",1],[12,"ty","","The descriptor string representing the name of the format desired for\nthis argument, this can be empty or any number of characters, although\nit is required to be one word.",1],[3,"Parser","","The parser structure for interpreting the input format string. This is\nmodelled as an iterator over `Piece` structures to form a stream of tokens\nbeing output."],[12,"errors","","Error messages accumulated during parsing",2],[4,"Piece","","A piece is a portion of the format string which represents the next part\nto emit. These are emitted as a stream by the `Parser` class."],[13,"String","","A literal string which should directly be emitted",3],[13,"NextArgument","","This describes that formatting should process the next argument (as\nspecified inside) for emission.",3],[4,"Position","","Enum describing where an argument for a format can be located."],[13,"ArgumentNext","","The argument will be in the next position. This is the default.",4],[13,"ArgumentIs","","The argument is located at a specific index.",4],[13,"ArgumentNamed","","The argument has a name.",4],[4,"Alignment","","Enum of alignments which are supported."],[13,"AlignLeft","","The value will be aligned to the left.",5],[13,"AlignRight","","The value will be aligned to the right.",5],[13,"AlignCenter","","The value will be aligned in the center.",5],[13,"AlignUnknown","","The value will take on a default alignment.",5],[4,"Flag","","Various flags which can be applied to format strings. The meaning of these\nflags is defined by the formatters themselves."],[13,"FlagSignPlus","","A `+` will be used to denote positive numbers.",6],[13,"FlagSignMinus","","A `-` will be used to denote negative numbers. This is the default.",6],[13,"FlagAlternate","","An alternate form will be used for the value. In the case of numbers,\nthis means that the number will be prefixed with the supplied string.",6],[13,"FlagSignAwareZeroPad","","For numbers, this means that the number will be padded with zeroes,\nand the sign (`+` or `-`) will precede them.",6],[4,"Count","","A count is used for the precision and width parameters of an integer, and\ncan reference either an argument or a literal integer."],[13,"CountIs","","The count is specified explicitly.",7],[13,"CountIsName","","The count is specified by the argument with the given name.",7],[13,"CountIsParam","","The count is specified by the argument at the given index.",7],[13,"CountIsNextParam","","The count is specified by the next parameter.",7],[13,"CountImplied","","The count is implied and cannot be explicitly specified.",7],[11,"eq","","",3],[11,"ne","","",3],[11,"eq","","",0],[11,"ne","","",0],[11,"eq","","",1],[11,"ne","","",1],[11,"eq","","",4],[11,"ne","","",4],[11,"eq","","",5],[11,"ne","","",5],[11,"eq","","",6],[11,"ne","","",6],[11,"eq","","",7],[11,"ne","","",7],[6,"Item","",""],[11,"next","","",2],[11,"new","","Creates a new parser for the given format string",2]],"paths":[[3,"Argument"],[3,"FormatSpec"],[3,"Parser"],[4,"Piece"],[4,"Position"],[4,"Alignment"],[4,"Flag"],[4,"Count"]]};
searchIndex['rustdoc'] = {"items":[[0,"","rustdoc",""],[5,"main","",""],[5,"opts","",""],[5,"usage","",""],[5,"main_args","",""],[0,"externalfiles","",""],[3,"ExternalHtml","rustdoc::externalfiles",""],[12,"in_header","","",0],[12,"before_content","","",0],[12,"after_content","","",0],[5,"load_string","",""],[5,"load_external_files","",""],[11,"clone","","",0],[11,"load","","",0],[0,"clean","rustdoc","This module contains the \"cleaned\" pieces of the AST, and the functions\nthat clean them."],[3,"Crate","rustdoc::clean",""],[12,"name","","",1],[12,"src","","",1],[12,"module","","",1],[12,"externs","","",1],[12,"primitives","","",1],[3,"ExternalCrate","",""],[12,"name","","",2],[12,"attrs","","",2],[12,"primitives","","",2],[3,"Item","","Anything with a source location and set of attributes and, optionally, a\nname. That is, anything that can be documented. This doesn't correspond\ndirectly to the AST's concept of an item; it's a strict superset."],[12,"source","","Stringified span",3],[12,"name","","Not everything has a name. E.g., impls",3],[12,"attrs","","",3],[12,"inner","","",3],[12,"visibility","","",3],[12,"def_id","","",3],[12,"stability","","",3],[3,"Module","",""],[12,"items","","",4],[12,"is_crate","","",4],[3,"TyParam","",""],[12,"name","","",5],[12,"did","","",5],[12,"bounds","","",5],[12,"default","","",5],[3,"Lifetime","",""],[3,"Generics","",""],[12,"lifetimes","","",6],[12,"type_params","","",6],[12,"where_predicates","","",6],[3,"Method","",""],[12,"generics","","",7],[12,"self_","","",7],[12,"unsafety","","",7],[12,"decl","","",7],[12,"abi","","",7],[3,"TyMethod","",""],[12,"unsafety","","",8],[12,"decl","","",8],[12,"generics","","",8],[12,"self_","","",8],[12,"abi","","",8],[3,"Function","",""],[12,"decl","","",9],[12,"generics","","",9],[12,"unsafety","","",9],[3,"FnDecl","",""],[12,"inputs","","",10],[12,"output","","",10],[12,"attrs","","",10],[3,"Arguments","",""],[12,"values","","",11],[3,"Argument","",""],[12,"type_","","",12],[12,"name","","",12],[12,"id","","",12],[3,"Trait","",""],[12,"unsafety","","",13],[12,"items","","",13],[12,"generics","","",13],[12,"bounds","","",13],[3,"PolyTrait","","A trait reference, which may have higher ranked lifetimes."],[12,"trait_","","",14],[12,"lifetimes","","",14],[3,"Struct","",""],[12,"struct_type","","",15],[12,"generics","","",15],[12,"fields","","",15],[12,"fields_stripped","","",15],[3,"VariantStruct","","This is a more limited form of the standard Struct, different in that\nit lacks the things most items have (name, id, parameterization). Found\nonly as a variant in an enum."],[12,"struct_type","","",16],[12,"fields","","",16],[12,"fields_stripped","","",16],[3,"Enum","",""],[12,"variants","","",17],[12,"generics","","",17],[12,"variants_stripped","","",17],[3,"Variant","",""],[12,"kind","","",18],[3,"Span","",""],[12,"filename","","",19],[12,"loline","","",19],[12,"locol","","",19],[12,"hiline","","",19],[12,"hicol","","",19],[3,"Path","",""],[12,"global","","",20],[12,"segments","","",20],[3,"PathSegment","",""],[12,"name","","",21],[12,"params","","",21],[3,"Typedef","",""],[12,"type_","","",22],[12,"generics","","",22],[3,"BareFunctionDecl","",""],[12,"unsafety","","",23],[12,"generics","","",23],[12,"decl","","",23],[12,"abi","","",23],[3,"Static","",""],[12,"type_","","",24],[12,"mutability","","",24],[12,"expr","","It's useful to have the value of a static documented, but I have no\ndesire to represent expressions (that'd basically be all of the AST,\nwhich is huge!). So, have a string.",24],[3,"Constant","",""],[12,"type_","","",25],[12,"expr","","",25],[3,"Impl","",""],[12,"generics","","",26],[12,"trait_","","",26],[12,"for_","","",26],[12,"items","","",26],[12,"derived","","",26],[12,"polarity","","",26],[3,"ImportSource","",""],[12,"path","","",27],[12,"did","","",27],[3,"ViewListIdent","",""],[12,"name","","",28],[12,"source","","",28],[3,"Macro","",""],[12,"source","","",29],[3,"Stability","",""],[12,"level","","",30],[12,"feature","","",30],[12,"since","","",30],[12,"deprecated_since","","",30],[12,"reason","","",30],[3,"TypeBinding","","An equality constraint on an associated type, e.g. `A=Bar` in `Foo<A=Bar>`"],[12,"name","","",31],[12,"ty","","",31],[4,"ItemEnum","",""],[13,"ExternCrateItem","","",32],[13,"ImportItem","","",32],[13,"StructItem","","",32],[13,"EnumItem","","",32],[13,"FunctionItem","","",32],[13,"ModuleItem","","",32],[13,"TypedefItem","","",32],[13,"StaticItem","","",32],[13,"ConstantItem","","",32],[13,"TraitItem","","",32],[13,"ImplItem","","",32],[13,"TyMethodItem","","A method signature only. Used for required methods in traits (ie,\nnon-default-methods).",32],[13,"MethodItem","","A method with a body.",32],[13,"StructFieldItem","","",32],[13,"VariantItem","","",32],[13,"ForeignFunctionItem","","`fn`s from an extern block",32],[13,"ForeignStaticItem","","`static`s from an extern block",32],[13,"MacroItem","","",32],[13,"PrimitiveItem","","",32],[13,"AssociatedTypeItem","","",32],[4,"Attribute","",""],[13,"Word","","",33],[13,"List","","",33],[13,"NameValue","","",33],[4,"TyParamBound","",""],[13,"RegionBound","","",34],[13,"TraitBound","","",34],[4,"WherePredicate","",""],[13,"BoundPredicate","","",35],[12,"ty","rustdoc::clean::WherePredicate","",35],[12,"bounds","","",35],[13,"RegionPredicate","rustdoc::clean","",35],[12,"lifetime","rustdoc::clean::WherePredicate","",35],[12,"bounds","","",35],[13,"EqPredicate","rustdoc::clean","",35],[12,"lhs","rustdoc::clean::WherePredicate","",35],[12,"rhs","","",35],[4,"SelfTy","rustdoc::clean",""],[13,"SelfStatic","","",36],[13,"SelfValue","","",36],[13,"SelfBorrowed","","",36],[13,"SelfExplicit","","",36],[4,"FunctionRetTy","",""],[13,"Return","","",37],[13,"DefaultReturn","","",37],[13,"NoReturn","","",37],[4,"TraitMethod","","An item belonging to a trait, whether a method or associated. Could be named\nTraitItem except that's already taken by an exported enum variant."],[13,"RequiredMethod","","",38],[13,"ProvidedMethod","","",38],[13,"TypeTraitItem","","",38],[4,"ImplMethod","",""],[13,"MethodImplItem","","",39],[13,"TypeImplItem","","",39],[4,"Type","","A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original\ntype out of the AST/ty::ctxt given one of these, if more information is needed. Most importantly\nit does not preserve mutability or boxes."],[13,"ResolvedPath","","structs/enums/traits (anything that'd be an ast::TyPath)",40],[12,"path","rustdoc::clean::Type","",40],[12,"typarams","","",40],[12,"did","","",40],[13,"Generic","rustdoc::clean","For parameterized types, so the consumer of the JSON don't go\nlooking for types which don't exist anywhere.",40],[13,"Primitive","","Primitives are just the fixed-size numeric types (plus int/uint/float), and char.",40],[13,"BareFunction","","extern \"ABI\" fn",40],[13,"Tuple","","",40],[13,"Vector","","",40],[13,"FixedVector","","",40],[13,"Bottom","","aka TyBot",40],[13,"Unique","","",40],[13,"RawPointer","","",40],[13,"BorrowedRef","","",40],[12,"lifetime","rustdoc::clean::Type","",40],[12,"mutability","","",40],[12,"type_","","",40],[13,"QPath","rustdoc::clean","",40],[12,"name","rustdoc::clean::Type","",40],[12,"self_type","","",40],[12,"trait_","","",40],[13,"Infer","rustdoc::clean","",40],[13,"PolyTraitRef","","",40],[4,"PrimitiveType","",""],[13,"Isize","","",41],[13,"I8","","",41],[13,"I16","","",41],[13,"I32","","",41],[13,"I64","","",41],[13,"Usize","","",41],[13,"U8","","",41],[13,"U16","","",41],[13,"U32","","",41],[13,"U64","","",41],[13,"F32","","",41],[13,"F64","","",41],[13,"Char","","",41],[13,"Bool","","",41],[13,"Str","","",41],[13,"Slice","","",41],[13,"PrimitiveTuple","","",41],[4,"TypeKind","",""],[13,"TypeEnum","","",42],[13,"TypeFunction","","",42],[13,"TypeModule","","",42],[13,"TypeConst","","",42],[13,"TypeStatic","","",42],[13,"TypeStruct","","",42],[13,"TypeTrait","","",42],[13,"TypeVariant","","",42],[13,"TypeTypedef","","",42],[4,"StructField","",""],[13,"HiddenStructField","","",43],[13,"TypedStructField","","",43],[4,"VariantKind","",""],[13,"CLikeVariant","","",44],[13,"TupleVariant","","",44],[13,"StructVariant","","",44],[4,"PathParameters","",""],[13,"AngleBracketed","","",45],[12,"lifetimes","rustdoc::clean::PathParameters","",45],[12,"types","","",45],[12,"bindings","","",45],[13,"Parenthesized","rustdoc::clean","",45],[12,"inputs","rustdoc::clean::PathParameters","",45],[12,"output","","",45],[4,"Mutability","rustdoc::clean",""],[13,"Mutable","","",46],[13,"Immutable","","",46],[4,"ImplPolarity","",""],[13,"Positive","","",47],[13,"Negative","","",47],[4,"Import","",""],[13,"SimpleImport","","",48],[13,"GlobImport","","",48],[13,"ImportList","","",48],[6,"Visibility","",""],[7,"SCHEMA_VERSION","","A stable identifier to the particular version of JSON output.\nIncrement this when the `Crate` and related structures change."],[8,"Clean","",""],[10,"clean","","",49],[11,"clean","collections::vec","",50],[11,"clean","rustc::middle::subst","",51],[11,"clean","syntax::ptr","",52],[11,"clean","alloc::rc","",53],[11,"clean","core::option","",54],[11,"clean","rustc::middle::ty","",55],[11,"clean","syntax::owned_slice","",56],[11,"fmt","rustdoc::clean","",1],[11,"decode","","",1],[11,"encode","","",1],[11,"clone","","",1],[11,"fmt","","",2],[11,"decode","","",2],[11,"encode","","",2],[11,"clone","","",2],[11,"clean","rustc::metadata::cstore","",57],[11,"fmt","rustdoc::clean","",3],[11,"decode","","",3],[11,"encode","","",3],[11,"clone","","",3],[11,"doc_list","","Finds the `doc` attribute as a List and returns the list of attributes\nnested inside.",3],[11,"doc_value","","Finds the `doc` attribute as a NameValue and returns the corresponding\nvalue found.",3],[11,"is_hidden_from_doc","","",3],[11,"is_mod","","",3],[11,"is_trait","","",3],[11,"is_struct","","",3],[11,"is_enum","","",3],[11,"is_fn","","",3],[11,"fmt","","",32],[11,"decode","","",32],[11,"encode","","",32],[11,"clone","","",32],[11,"fmt","","",4],[11,"decode","","",4],[11,"encode","","",4],[11,"clone","","",4],[11,"fmt","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"clone","","",33],[11,"clean","","",58],[11,"clean","","",59],[11,"name","","",33],[11,"value_str","","",33],[11,"meta_item_list","","",33],[11,"span","","",33],[11,"fmt","","",5],[11,"eq","","",5],[11,"ne","","",5],[11,"decode","","",5],[11,"encode","","",5],[11,"clone","","",5],[11,"clean","syntax::ast","",60],[11,"clean","rustc::middle::ty","",61],[11,"fmt","rustdoc::clean","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"decode","","",34],[11,"encode","","",34],[11,"clone","","",34],[11,"clean","syntax::ast","",62],[11,"clean","rustc::middle::ty","",63],[11,"clean","","",64],[11,"clean","","",65],[11,"clean","","",66],[11,"clean","rustc::middle::subst","",67],[11,"fmt","rustdoc::clean","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"decode","","",68],[11,"encode","","",68],[11,"clone","","",68],[11,"get_ref","","",68],[11,"statik","","",68],[11,"clean","syntax::ast","",69],[11,"clean","","",70],[11,"clean","rustc::middle::ty","",71],[11,"clean","","",72],[11,"fmt","rustdoc::clean","",35],[11,"eq","","",35],[11,"ne","","",35],[11,"decode","","",35],[11,"encode","","",35],[11,"clone","","",35],[11,"clean","syntax::ast","",73],[11,"clean","rustc::middle::ty","",74],[11,"clean","","",75],[11,"clean","","",76],[11,"clean","","",77],[11,"clean","","",77],[11,"clean","","",78],[11,"clean","","",79],[11,"fmt","rustdoc::clean","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"decode","","",6],[11,"encode","","",6],[11,"clone","","",6],[11,"clean","syntax::ast","",80],[11,"fmt","rustdoc::clean","",7],[11,"decode","","",7],[11,"encode","","",7],[11,"clone","","",7],[11,"clean","syntax::ast","",81],[11,"fmt","rustdoc::clean","",8],[11,"decode","","",8],[11,"encode","","",8],[11,"clone","","",8],[11,"clean","syntax::ast","",82],[11,"fmt","rustdoc::clean","",36],[11,"eq","","",36],[11,"ne","","",36],[11,"decode","","",36],[11,"encode","","",36],[11,"clone","","",36],[11,"clean","syntax::ast","",83],[11,"fmt","rustdoc::clean","",9],[11,"decode","","",9],[11,"encode","","",9],[11,"clone","","",9],[11,"fmt","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"decode","","",10],[11,"encode","","",10],[11,"clone","","",10],[11,"fmt","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"decode","","",11],[11,"encode","","",11],[11,"clone","","",11],[11,"clean","syntax::ast","",84],[11,"clean","rustc::middle::ty","",85],[11,"fmt","rustdoc::clean","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"decode","","",12],[11,"encode","","",12],[11,"clone","","",12],[11,"clean","syntax::ast","",86],[11,"fmt","rustdoc::clean","",37],[11,"eq","","",37],[11,"ne","","",37],[11,"decode","","",37],[11,"encode","","",37],[11,"clone","","",37],[11,"clean","syntax::ast","",87],[11,"fmt","rustdoc::clean","",13],[11,"decode","","",13],[11,"encode","","",13],[11,"clone","","",13],[11,"clean","syntax::ast","",88],[11,"clean","","",89],[11,"fmt","rustdoc::clean","",38],[11,"decode","","",38],[11,"encode","","",38],[11,"clone","","",38],[11,"is_req","","",38],[11,"is_def","","",38],[11,"is_type","","",38],[11,"item","","",38],[11,"clean","syntax::ast","",90],[11,"fmt","rustdoc::clean","",39],[11,"decode","","",39],[11,"encode","","",39],[11,"clone","","",39],[11,"clean","syntax::ast","",91],[11,"clean","rustc::middle::ty","",92],[11,"clean","","",93],[11,"fmt","rustdoc::clean","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"decode","","",14],[11,"encode","","",14],[11,"clone","","",14],[11,"fmt","","",40],[11,"eq","","",40],[11,"ne","","",40],[11,"decode","","",40],[11,"encode","","",40],[11,"clone","","",40],[11,"fmt","","",41],[11,"hash","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"decode","","",41],[11,"encode","","",41],[11,"clone","","",41],[11,"fmt","","",42],[11,"decode","","",42],[11,"encode","","",42],[11,"clone","","",42],[11,"to_string","","",41],[11,"to_url_str","","",41],[11,"to_node_id","","Creates a rustdoc-specific node id for primitive types.",41],[11,"clean","syntax::ast","",94],[11,"clean","rustdoc::clean","",95],[11,"fmt","","",43],[11,"decode","","",43],[11,"encode","","",43],[11,"clone","","",43],[11,"clean","","",96],[11,"clean","rustc::middle::ty","",97],[11,"clean","syntax::ast","",98],[11,"fmt","rustdoc::clean","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"clone","","",15],[11,"fmt","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"clone","","",16],[11,"clean","syntax::ast","",99],[11,"fmt","rustdoc::clean","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"clone","","",17],[11,"fmt","","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"clone","","",18],[11,"clean","rustc::middle::ty","",100],[11,"fmt","rustdoc::clean","",44],[11,"decode","","",44],[11,"encode","","",44],[11,"clone","","",44],[11,"clean","syntax::ast","",101],[11,"fmt","rustdoc::clean","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"clone","","",19],[11,"clean","syntax::codemap","",102],[11,"fmt","rustdoc::clean","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"decode","","",20],[11,"encode","","",20],[11,"clone","","",20],[11,"clean","syntax::ast","",103],[11,"fmt","rustdoc::clean","",45],[11,"eq","","",45],[11,"ne","","",45],[11,"decode","","",45],[11,"encode","","",45],[11,"clone","","",45],[11,"clean","syntax::ast","",104],[11,"fmt","rustdoc::clean","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"decode","","",21],[11,"encode","","",21],[11,"clone","","",21],[11,"clean","syntax::ast","",105],[11,"clean","","",106],[11,"clean","","",107],[11,"fmt","rustdoc::clean","",22],[11,"decode","","",22],[11,"encode","","",22],[11,"clone","","",22],[11,"fmt","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"clone","","",23],[11,"clean","syntax::ast","",108],[11,"fmt","rustdoc::clean","",24],[11,"decode","","",24],[11,"encode","","",24],[11,"clone","","",24],[11,"fmt","","",25],[11,"decode","","",25],[11,"encode","","",25],[11,"clone","","",25],[11,"eq","","",46],[11,"ne","","",46],[11,"decode","","",46],[11,"encode","","",46],[11,"clone","","",46],[11,"fmt","","",46],[11,"clean","syntax::ast","",109],[11,"fmt","rustdoc::clean","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"decode","","",47],[11,"encode","","",47],[11,"clone","","",47],[11,"clean","syntax::ast","",110],[11,"fmt","rustdoc::clean","",26],[11,"decode","","",26],[11,"encode","","",26],[11,"clone","","",26],[11,"fmt","","",48],[11,"decode","","",48],[11,"encode","","",48],[11,"clone","","",48],[11,"fmt","","",27],[11,"decode","","",27],[11,"encode","","",27],[11,"clone","","",27],[11,"fmt","","",28],[11,"decode","","",28],[11,"encode","","",28],[11,"clone","","",28],[11,"clean","","",111],[11,"clean","syntax::ast","",112],[11,"clean","","",113],[11,"fmt","rustdoc::clean","",29],[11,"decode","","",29],[11,"encode","","",29],[11,"clone","","",29],[11,"fmt","","",30],[11,"decode","","",30],[11,"encode","","",30],[11,"clone","","",30],[11,"clean","syntax::attr","",114],[11,"clean","syntax::ast","",115],[11,"clean","rustc::middle::ty","",116],[11,"clean","syntax::ast","",117],[11,"fmt","rustdoc::clean","",31],[11,"encode","","",31],[11,"decode","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"clone","","",31],[11,"clean","syntax::ast","",118],[0,"core","rustdoc",""],[11,"filestem","rustc::session::config","",119],[11,"fmt","rustc_back::svh","",120],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"new","","",120],[11,"as_str","","",120],[11,"calculate","","",120],[11,"fmt","","",120],[11,"hash","rustc_back::svh::svh_visitor","",121],[11,"hash","","",122],[11,"hash","","",123],[11,"get_content","syntax::ast","",106],[11,"get_content","","",107],[11,"visit_mac","rustc_back::svh::svh_visitor","",124],[11,"visit_struct_def","","",124],[11,"visit_variant","","",124],[11,"visit_opt_lifetime_ref","","",124],[11,"visit_ident","","",124],[11,"visit_lifetime_ref","","",124],[11,"visit_lifetime_def","","",124],[11,"visit_expr","","",124],[11,"visit_stmt","","",124],[11,"visit_foreign_item","","",124],[11,"visit_item","","",124],[11,"visit_mod","","",124],[11,"visit_decl","","",124],[11,"visit_ty","","",124],[11,"visit_generics","","",124],[11,"visit_fn","","",124],[11,"visit_ty_method","","",124],[11,"visit_trait_item","","",124],[11,"visit_struct_field","","",124],[11,"visit_explicit_self","","",124],[11,"visit_path","","",124],[11,"visit_block","","",124],[11,"visit_pat","","",124],[11,"visit_local","","",124],[11,"visit_arm","","",124],[11,"open","rustc_back::archive","Opens an existing static archive",125],[11,"remove_file","","Removes a file from this archive",125],[11,"files","","Lists all files in an archive",125],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",125],[11,"create","","Create a new static archive, ready for adding files.",126],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",126],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",126],[11,"add_file","","Adds an arbitrary file to this archive",126],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",126],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",126],[11,"tr_id","rustc::middle::astencode","Translates an internal id, meaning a node id that is known to refer to some part of the\nitem currently being inlined, such as a local variable or argument.  All naked node-ids\nthat appear in types have this property, since if something might refer to an external item\nwe would use a def-id to allow for the possibility that the item resides in another crate.",127],[11,"tr_def_id","","Translates an EXTERNAL def-id, converting the crate number from the one used in the encoded\ndata to the current crate numbers..  By external, I mean that it be translated to a\nreference to the item in its original crate, as opposed to being translated to a reference\nto the inlined version of the item.  This is typically, but not always, what you want,\nbecause most def-ids refer to external things like types or other fns that may or may not\nbe inlined.  Note that even when the inlined function is referencing itself recursively, we\nwould want `tr_def_id` for that reference--- conceptually the function calls the original,\nnon-inlined version, and trans deals with linking that recursive call to the inlined copy.",127],[11,"tr_intern_def_id","","Translates an INTERNAL def-id, meaning a def-id that is\nknown to refer to some part of the item currently being\ninlined.  In that case, we want to convert the def-id to\nrefer to the current crate and to the new, inlined node-id.",127],[11,"tr_span","","Translates a `Span` from an extern crate to the corresponding `Span`\nwithin the local crate's codemap. `creader::import_codemap()` will\nalready have allocated any additionally needed FileMaps in the local\ncodemap as a side-effect of creating the crate_metadata's\n`codemap_import_info`.",127],[11,"tr_intern","syntax::ast","",128],[11,"tr","","",128],[11,"tr","core::option","",54],[11,"tr","syntax::codemap","",102],[11,"fold_block","rustc::middle::astencode","",129],[11,"tr","rustc::middle::def","",130],[11,"tr","rustc::middle::ty","",72],[11,"tr","","",131],[11,"tr","rustc::middle::region","",132],[11,"tr","","",133],[11,"tr","rustc::middle::ty","",134],[11,"read_freevar_entry","rbml::reader","",135],[11,"read_capture_mode","","",135],[11,"tr","rustc::middle::ty","",136],[11,"tr","","",137],[11,"tr","","",138],[11,"read_method_callee","rbml::reader","",135],[11,"tr","rustc::middle::ty","",139],[11,"read_vec_per_param_space","rbml::reader","",135],[11,"read_vtable_res_with_key","","",135],[11,"read_vtable_res","","",135],[11,"read_vtable_param_res","","",135],[11,"read_vtable_origin","","",135],[11,"ty_str_ctxt","rustc::metadata::encoder","",140],[11,"emit_closure_type","rbml::writer","",141],[11,"emit_method_origin","","",141],[11,"emit_ty","","",141],[11,"emit_tys","","",141],[11,"emit_trait_ref","","",141],[11,"emit_type_param_def","","",141],[11,"emit_predicate","","",141],[11,"emit_type_scheme","","",141],[11,"emit_existential_bounds","","",141],[11,"emit_builtin_bounds","","",141],[11,"emit_substs","","",141],[11,"emit_auto_adjustment","","",141],[11,"emit_autoref","","",141],[11,"emit_auto_deref_ref","","",141],[11,"emit_unsize_kind","","",141],[11,"tag","","",141],[11,"id","","",141],[11,"visit_id","rustc::middle::astencode","",142],[11,"as_int","rbml","",143],[11,"opt_child","","",143],[11,"read_ty_nodcx","rbml::reader","",135],[11,"read_tys_nodcx","","",135],[11,"read_substs_nodcx","","",135],[11,"read_method_origin","","",135],[11,"read_ty","","",135],[11,"read_tys","","",135],[11,"read_trait_ref","","",135],[11,"read_poly_trait_ref","","",135],[11,"read_type_param_def","","",135],[11,"read_predicate","","",135],[11,"read_type_scheme","","",135],[11,"read_existential_bounds","","",135],[11,"read_substs","","",135],[11,"read_auto_adjustment","","",135],[11,"read_auto_deref_ref","","",135],[11,"read_autoref","","",135],[11,"read_unsize_kind","","",135],[11,"read_closure_kind","","",135],[11,"read_closure_ty","","",135],[11,"convert_def_id","","Converts a def-id that appears in a type.  The correct\ntranslation will depend on what kind of def-id this is.\nThis is a subtle point: type definitions are not\ninlined into the current crate, so if the def-id names\na nominal type or type alias, then it should be\ntranslated to refer to the source crate.",135],[11,"graph_id","rustc::middle::cfg::graphviz","",144],[11,"node_id","","",144],[11,"node_label","","",144],[11,"edge_label","","",144],[11,"nodes","","",144],[11,"edges","","",144],[11,"source","","",144],[11,"target","","",144],[11,"eq","rustc::middle::cfg","",145],[11,"ne","","",145],[11,"id","","",145],[11,"new","","",146],[11,"node_is_reachable","","",146],[11,"hash","rustc::middle::check_const","",147],[11,"cmp","","",147],[11,"partial_cmp","","",147],[11,"lt","","",147],[11,"le","","",147],[11,"gt","","",147],[11,"ge","","",147],[11,"clone","","",147],[11,"eq","","",147],[11,"ne","","",147],[11,"decode","","",147],[11,"encode","","",147],[11,"empty","","Returns an empty set of flags.",147],[11,"all","","Returns the set containing all flags.",147],[11,"bits","","Returns the raw value of the flags currently stored.",147],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",147],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",147],[11,"is_empty","","Returns `true` if no flags are currently stored.",147],[11,"is_all","","Returns `true` if all flags are currently set.",147],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",147],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",147],[11,"insert","","Inserts the specified flags in-place.",147],[11,"remove","","Removes the specified flags in-place.",147],[11,"toggle","","Toggles the specified flags in-place.",147],[6,"Output","rustdoc::core",""],[11,"bitor","rustc::middle::check_const","Returns the union of the two sets of flags.",147],[6,"Output","rustdoc::core",""],[11,"bitxor","rustc::middle::check_const","Returns the left flags, but with all the right flags toggled.",147],[6,"Output","rustdoc::core",""],[11,"bitand","rustc::middle::check_const","Returns the intersection between the two sets of flags.",147],[6,"Output","rustdoc::core",""],[11,"sub","rustc::middle::check_const","Returns the set difference of the two sets of flags.",147],[6,"Output","rustdoc::core",""],[11,"not","rustc::middle::check_const","Returns the complement of this set of flags.",147],[11,"eq","","",148],[11,"ne","","",148],[11,"visit_item","","",149],[11,"visit_fn","","",149],[11,"visit_pat","","",149],[11,"visit_expr","","",149],[11,"consume","","",149],[11,"borrow","","",149],[11,"decl_without_init","","",149],[11,"mutate","","",149],[11,"matched_pat","","",149],[11,"consume_pat","","",149],[11,"visit_item","rustc::middle::check_static_recursion","",150],[11,"visit_item","","",151],[11,"visit_expr","","",151],[11,"eq","rustc::middle::check_loop","",152],[11,"ne","","",152],[11,"clone","","",152],[11,"visit_item","","",153],[11,"visit_expr","","",153],[11,"fmt","rustc::middle::check_match","",154],[11,"from_iter","","",154],[11,"eq","","",155],[11,"ne","","",155],[11,"clone","","",155],[11,"eq","","",156],[11,"ne","","",156],[11,"clone","","",156],[11,"visit_expr","","",157],[11,"visit_local","","",157],[11,"visit_fn","","",157],[11,"new","","",158],[11,"visit_id","","",159],[11,"fold_pat","","",158],[11,"matched_pat","","",160],[11,"consume","","",160],[11,"consume_pat","","",160],[11,"borrow","","",160],[11,"decl_without_init","","",160],[11,"mutate","","",160],[11,"visit_pat","","",161],[11,"visit_fn","rustc::middle::check_rvalues","",162],[11,"consume","","",163],[11,"matched_pat","","",163],[11,"consume_pat","","",163],[11,"borrow","","",163],[11,"decl_without_init","","",163],[11,"mutate","","",163],[11,"eq","rustc::middle::const_eval","",164],[11,"ne","","",164],[11,"clone","","",164],[11,"clone","","",165],[11,"clone","","",166],[11,"description","","",165],[11,"fmt","rustc::middle::dataflow","",167],[11,"clone","","",168],[11,"pre","","",168],[11,"new","","",168],[11,"add_gen","","Indicates that `id` generates `bit`",168],[11,"add_kill","","Indicates that `id` kills `bit`",168],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",168],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",168],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",168],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",168],[11,"propagate","","Performs the data flow analysis.",168],[11,"join","","",169],[11,"join","","",170],[11,"visit_struct_def","rustc::middle::dead","",171],[11,"visit_expr","","",171],[11,"visit_pat","","",171],[11,"visit_path","","",171],[11,"visit_item","","",171],[11,"visit_item","","",172],[11,"visit_fn","","",172],[11,"visit_item","","",173],[11,"visit_foreign_item","","",173],[11,"visit_fn","","",173],[11,"visit_struct_field","","",173],[11,"visit_trait_item","","",173],[11,"fmt","rustc::middle::def","",130],[11,"hash","","",130],[11,"decode","","",130],[11,"encode","","",130],[11,"eq","","",130],[11,"ne","","",130],[11,"clone","","",130],[11,"fmt","","",174],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",174],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",174],[11,"fmt","","",175],[11,"hash","","",175],[11,"decode","","",175],[11,"encode","","",175],[11,"eq","","",175],[11,"ne","","",175],[11,"clone","","",175],[11,"map","","",175],[11,"local_node_id","","",130],[11,"def_id","","",130],[11,"variant_def_ids","","",130],[11,"eq","rustc::middle::effect","",176],[11,"ne","","",176],[11,"visit_fn","","",177],[11,"visit_block","","",177],[11,"visit_expr","","",177],[11,"visit_item","rustc::middle::entry","",178],[11,"fmt","rustc::middle::expr_use_visitor","",179],[11,"eq","","",179],[11,"ne","","",179],[11,"fmt","","",180],[11,"eq","","",180],[11,"ne","","",180],[11,"fmt","","",181],[11,"eq","","",181],[11,"ne","","",181],[11,"fmt","","",182],[11,"eq","","",182],[11,"ne","","",182],[11,"fmt","","",183],[11,"eq","","",183],[11,"ne","","",183],[11,"fmt","","",184],[11,"eq","","",184],[11,"ne","","",184],[11,"new","","",185],[11,"walk_fn","","",185],[11,"consume_expr","","",185],[11,"walk_expr","","",185],[11,"hash","rustc::middle::fast_reject","",186],[11,"eq","","",186],[11,"ne","","",186],[11,"clone","","",186],[11,"fmt","rustc::middle::graph","",187],[11,"fmt","","",188],[11,"eq","","",188],[11,"ne","","",188],[11,"clone","","",188],[11,"fmt","","",189],[11,"eq","","",189],[11,"ne","","",189],[11,"fmt","","",190],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",188],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",189],[11,"new","","",191],[11,"with_capacity","","",191],[11,"all_nodes","","",191],[11,"all_edges","","",191],[11,"next_node_index","","",191],[11,"add_node","","",191],[11,"mut_node_data","","",191],[11,"node_data","","",191],[11,"node","","",191],[11,"next_edge_index","","",191],[11,"add_edge","","",191],[11,"mut_edge_data","","",191],[11,"edge_data","","",191],[11,"edge","","",191],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",191],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",191],[11,"each_node","","Iterates over all edges defined in the graph.",191],[11,"each_edge","","Iterates over all edges defined in the graph",191],[11,"each_outgoing_edge","","Iterates over all outgoing edges from the node `from`",191],[11,"each_incoming_edge","","Iterates over all incoming edges to the node `target`",191],[11,"each_adjacent_edge","","Iterates over all edges adjacent to the node `node`\nin the direction `dir` (either `Outgoing` or `Incoming)",191],[11,"iterate_until_fixed_point","","",191],[11,"depth_traverse","","",191],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::graph","",192],[11,"source","","",187],[11,"target","","",187],[11,"visit_fn","rustc::middle::intrinsicck","",193],[11,"visit_expr","","",193],[11,"repr","rustc::middle::ty","",194],[11,"tag","rustc::middle::infer::bivariate","",195],[11,"fields","","",195],[11,"tys_with_variance","","",195],[11,"regions_with_variance","","",195],[11,"regions","","",195],[11,"mts","","",195],[11,"unsafeties","","",195],[11,"builtin_bounds","","",195],[11,"tys","","",195],[11,"binders","","",195],[11,"combine","alloc::rc","",53],[11,"combine","rustc::middle::ty","",65],[11,"combine","","",78],[11,"combine","","",196],[11,"clone","rustc::middle::infer::combine","",197],[11,"switch_expected","","",197],[11,"instantiate","","",197],[11,"tcx","","",198],[11,"fold_ty","","",198],[11,"fold_region","","",198],[11,"tag","rustc::middle::infer::equate","",199],[11,"fields","","",199],[11,"tys_with_variance","","",199],[11,"regions_with_variance","","",199],[11,"regions","","",199],[11,"mts","","",199],[11,"unsafeties","","",199],[11,"builtin_bounds","","",199],[11,"tys","","",199],[11,"binders","","",199],[11,"report_region_errors","rustc::middle::infer","",200],[11,"process_errors","","",200],[11,"report_type_error","","",200],[11,"report_and_explain_type_error","","",200],[11,"values_str","","Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\nerror.",200],[11,"expected_found_str","","",200],[11,"report_generic_bound_failure","","",200],[11,"report_concrete_failure","","",200],[11,"report_sub_sup_conflict","","",200],[11,"report_sup_sup_conflict","","",200],[11,"report_processed_errors","","",200],[11,"give_suggestion","","",200],[11,"give_expl_lifetime_param","","",200],[11,"report_inference_failure","","",200],[11,"note_region_origin","","",200],[11,"resolve","alloc::rc","",53],[11,"contains_error","","",53],[11,"resolve","rustc::middle::ty","",55],[11,"contains_error","","",55],[11,"tag","rustc::middle::infer::glb","",201],[11,"fields","","",201],[11,"tys_with_variance","","",201],[11,"regions_with_variance","","",201],[11,"mts","","",201],[11,"unsafeties","","",201],[11,"builtin_bounds","","",201],[11,"regions","","",201],[11,"tys","","",201],[11,"binders","","",201],[11,"tainted_regions","rustc::middle::infer","",200],[11,"region_vars_confined_to_snapshot","","Returns the set of region variables that do not affect any\ntypes/regions which existed before `snapshot` was\nstarted. This is used in the sub/lub/glb computations. The\nidea here is that when we are computing lub/glb of two\nregions, we sometimes create intermediate region variables.\nThose region variables may touch some of the skolemized or\nother \"forbidden\" regions we created to replace bound\nregions, but they don't really represent an \"external\"\nconstraint.",200],[11,"relate_bound","rustc::middle::infer::lub","",202],[11,"relate_bound","rustc::middle::infer::glb","",201],[11,"tag","rustc::middle::infer::lub","",202],[11,"fields","","",202],[11,"tys_with_variance","","",202],[11,"regions_with_variance","","",202],[11,"mts","","",202],[11,"unsafeties","","",202],[11,"builtin_bounds","","",202],[11,"regions","","",202],[11,"tys","","",202],[11,"binders","","",202],[11,"fmt","rustc::middle::infer::region_inference::graphviz","",203],[11,"eq","","",203],[11,"ne","","",203],[11,"hash","","",203],[11,"clone","","",203],[11,"fmt","","",204],[11,"eq","","",204],[11,"ne","","",204],[11,"clone","","",204],[11,"graph_id","","",205],[11,"node_id","","",205],[11,"node_label","","",205],[11,"edge_label","","",205],[11,"nodes","","",205],[11,"edges","","",205],[11,"source","","",205],[11,"target","","",205],[11,"fmt","rustc::middle::infer::region_inference","",206],[11,"hash","","",206],[11,"eq","","",206],[11,"ne","","",206],[11,"clone","","",206],[11,"eq","","",207],[11,"ne","","",207],[11,"fmt","","",207],[11,"clone","","",207],[11,"hash","","",208],[11,"eq","","",208],[11,"ne","","",208],[11,"eq","","",209],[11,"ne","","",209],[11,"eq","","",210],[11,"ne","","",210],[11,"fmt","","",211],[11,"clone","","",211],[11,"fmt","","",212],[11,"clone","","",212],[11,"contains","","",212],[11,"push","","",212],[11,"fmt","","",213],[11,"new","","",214],[11,"start_snapshot","","",214],[11,"commit","","",214],[11,"rollback_to","","",214],[11,"num_vars","","",214],[11,"new_region_var","","",214],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto \"escape\" out into error messages or the code at large.",214],[11,"new_bound","","",214],[11,"add_given","","",214],[11,"make_eqregion","","",214],[11,"make_subregion","","",214],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",214],[11,"lub_regions","","",214],[11,"glb_regions","","",214],[11,"resolve_var","","",214],[11,"combine_vars","","",214],[11,"vars_created_since_snapshot","","",214],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",214],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",214],[11,"fmt","","",215],[11,"eq","","",215],[11,"ne","","",215],[11,"repr","","",206],[11,"repr","","",216],[11,"repr","","",217],[11,"repr","","",218],[11,"repr","","",207],[11,"user_string","","",207],[11,"to_ty","","",207],[11,"new","rustc::middle::infer::resolve","",219],[11,"tcx","","",219],[11,"fold_ty","","",219],[11,"tcx","","",220],[11,"fold_ty","","",220],[11,"fold_region","","",220],[11,"new","rustc::middle::infer::freshen","",221],[11,"tcx","","",221],[11,"fold_region","","",221],[11,"fold_ty","","",221],[11,"tag","rustc::middle::infer::sub","",222],[11,"fields","","",222],[11,"tys_with_variance","","",222],[11,"regions_with_variance","","",222],[11,"regions","","",222],[11,"mts","","",222],[11,"unsafeties","","",222],[11,"builtin_bounds","","",222],[11,"tys","","",222],[11,"binders","","",222],[11,"fmt","rustc::middle::infer::type_variable","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"new","","",224],[11,"var_diverges","","",224],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",224],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",224],[11,"new_var","","",224],[11,"probe","","",224],[11,"replace_if_possible","","",224],[11,"snapshot","","",224],[11,"rollback_to","","",224],[11,"commit","","",224],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",224],[6,"Value","rustdoc::core",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::type_variable","",225],[11,"fmt","rustc::middle::infer::unify","",226],[11,"clone","","",226],[11,"eq","","",226],[11,"ne","","",226],[11,"new","","",227],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a \"LIFO\" (stack) order.",227],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",227],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",227],[11,"new_key","","",227],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path\ncompression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure",227],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! Also, we must be in the\nmiddle of a snapshot.",227],[11,"unify","","Either redirects node_a to node_b or vice versa, depending on the relative rank. Returns\nthe new root and rank. You should then update the value of the new root to something\nsuitable.",227],[6,"Value","rustdoc::core",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::unify","",228],[11,"simple_vars","rustc::middle::infer","Unifies two simple keys. Because simple keys do not have any subtyping relationships, if\nboth keys have already been associated with a value, then those two values must be the\nsame.",200],[11,"simple_var_t","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",200],[11,"probe_var","","",200],[6,"Value","rustdoc::core",""],[11,"index","rustc::middle::ty","",229],[11,"from_index","","",229],[11,"unification_table","","",229],[11,"tag","","",229],[11,"to_type","","",230],[11,"to_type_err","","",230],[6,"Value","rustdoc::core",""],[11,"index","rustc::middle::ty","",231],[11,"from_index","","",231],[11,"unification_table","","",231],[11,"tag","","",231],[11,"to_type","syntax::ast","",232],[11,"to_type_err","","",232],[11,"fmt","rustc::middle::infer","",233],[11,"clone","","",233],[11,"fmt","","",234],[11,"clone","","",234],[11,"fmt","","",235],[11,"clone","","",235],[11,"fmt","","",236],[11,"clone","","",236],[11,"fmt","","",237],[11,"clone","","",237],[11,"fmt","","",238],[11,"clone","","",238],[11,"fmt","","",239],[11,"then","core::result","",240],[11,"to_ures","","",240],[11,"compare","","",240],[11,"freshen","rustc::middle::infer","",200],[11,"type_var_diverges","","",200],[11,"freshener","","",200],[11,"type_is_unconstrained_numeric","","",200],[11,"combine_fields","","",200],[11,"equate","","",200],[11,"sub","","",200],[11,"lub","","",200],[11,"commit_unconditionally","","Execute `f` and commit the bindings",200],[11,"commit_if_ok","","Execute `f` and commit the bindings if successful",200],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",200],[11,"try","","Execute `f`, unroll bindings on panic",200],[11,"probe","","Execute `f` then unroll any bindings it creates",200],[11,"add_given","","",200],[11,"sub_types","","",200],[11,"eq_types","","",200],[11,"sub_trait_refs","","",200],[11,"sub_poly_trait_refs","","",200],[11,"skolemize_late_bound_regions","","See `higher_ranked::skolemize_late_bound_regions`",200],[11,"leak_check","","See `higher_ranked::leak_check`",200],[11,"plug_leaks","","See `higher_ranked::plug_leaks`",200],[11,"equality_predicate","","",200],[11,"region_outlives_predicate","","",200],[11,"next_ty_var_id","","",200],[11,"next_ty_var","","",200],[11,"next_diverging_ty_var","","",200],[11,"next_ty_vars","","",200],[11,"next_int_var_id","","",200],[11,"next_float_var_id","","",200],[11,"next_region_var","","",200],[11,"region_vars_for_defs","","",200],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",200],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",200],[11,"fresh_bound_region","","",200],[11,"resolve_regions_and_report_errors","","",200],[11,"ty_to_string","","",200],[11,"tys_to_string","","",200],[11,"trait_ref_to_string","","",200],[11,"shallow_resolve","","",200],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",200],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",200],[11,"type_error_message_str","","",200],[11,"type_error_message_str_with_expected","","",200],[11,"type_error_message","","",200],[11,"report_mismatched_types","","",200],[11,"replace_late_bound_regions_with_fresh_var","","",200],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",200],[11,"can_equate","","",200],[11,"span","","",235],[11,"types","","",235],[11,"dummy","","",235],[11,"repr","","",235],[11,"span","","",233],[11,"repr","","",233],[11,"span","","",236],[11,"repr","","",236],[11,"span","","",238],[11,"repr","","",238],[11,"hash","rustc::middle::lang_items","",241],[11,"eq","","",241],[11,"ne","","",241],[11,"from_i64","","",241],[11,"from_u64","","",241],[11,"new","","",242],[11,"items","","",242],[11,"item_name","","",242],[11,"require","","",242],[11,"from_builtin_kind","","",242],[11,"to_builtin_kind","","",242],[11,"fn_trait_kind","","",242],[11,"send_trait","","",242],[11,"sized_trait","","",242],[11,"copy_trait","","",242],[11,"sync_trait","","",242],[11,"drop_trait","","",242],[11,"add_trait","","",242],[11,"sub_trait","","",242],[11,"mul_trait","","",242],[11,"div_trait","","",242],[11,"rem_trait","","",242],[11,"neg_trait","","",242],[11,"not_trait","","",242],[11,"bitxor_trait","","",242],[11,"bitand_trait","","",242],[11,"bitor_trait","","",242],[11,"shl_trait","","",242],[11,"shr_trait","","",242],[11,"index_trait","","",242],[11,"index_mut_trait","","",242],[11,"range_struct","","",242],[11,"range_from_struct","","",242],[11,"range_to_struct","","",242],[11,"range_full_struct","","",242],[11,"unsafe_cell_type","","",242],[11,"deref_trait","","",242],[11,"deref_mut_trait","","",242],[11,"fn_trait","","",242],[11,"fn_mut_trait","","",242],[11,"fn_once_trait","","",242],[11,"eq_trait","","",242],[11,"ord_trait","","",242],[11,"str_eq_fn","","",242],[11,"panic_fn","","",242],[11,"panic_bounds_check_fn","","",242],[11,"panic_fmt","","",242],[11,"exchange_malloc_fn","","",242],[11,"exchange_free_fn","","",242],[11,"strdup_uniq_fn","","",242],[11,"start_fn","","",242],[11,"ty_desc","","",242],[11,"opaque","","",242],[11,"eh_personality","","",242],[11,"exchange_heap","","",242],[11,"owned_box","","",242],[11,"phantom_fn","","",242],[11,"phantom_data","","",242],[11,"covariant_type","","",242],[11,"contravariant_type","","",242],[11,"invariant_type","","",242],[11,"covariant_lifetime","","",242],[11,"contravariant_lifetime","","",242],[11,"invariant_lifetime","","",242],[11,"no_copy_bound","","",242],[11,"managed_bound","","",242],[11,"non_zero","","",242],[11,"stack_exhausted","","",242],[11,"debug_trait","","",242],[11,"visit_item","","",243],[11,"new","","",243],[11,"collect_item","","",243],[11,"collect_local_language_items","","",243],[11,"collect_external_language_items","","",243],[11,"collect","","",243],[11,"eq","rustc::middle::liveness","",244],[11,"ne","","",244],[11,"eq","","",245],[11,"ne","","",245],[11,"clone","","",245],[11,"fmt","","",246],[11,"eq","","",246],[11,"ne","","",246],[11,"visit_fn","","",247],[11,"visit_local","","",247],[11,"visit_expr","","",247],[11,"visit_arm","","",247],[11,"fmt","","",245],[11,"fmt","","",244],[11,"fmt","","",248],[11,"fmt","","",249],[11,"visit_fn","","",250],[11,"visit_local","","",250],[11,"visit_expr","","",250],[11,"visit_arm","","",250],[11,"clone","","",251],[11,"fmt","rustc::middle::mem_categorization","",252],[11,"eq","","",252],[11,"ne","","",252],[11,"clone","","",252],[11,"fmt","","",253],[11,"eq","","",253],[11,"ne","","",253],[11,"clone","","",253],[11,"fmt","","",254],[11,"hash","","",254],[11,"eq","","",254],[11,"ne","","",254],[11,"clone","","",254],[11,"fmt","","",255],[11,"hash","","",255],[11,"eq","","",255],[11,"ne","","",255],[11,"clone","","",255],[11,"fmt","","",256],[11,"hash","","",256],[11,"eq","","",256],[11,"ne","","",256],[11,"clone","","",256],[11,"fmt","","",257],[11,"hash","","",257],[11,"eq","","",257],[11,"ne","","",257],[11,"clone","","",257],[11,"fmt","","",258],[11,"hash","","",258],[11,"eq","","",258],[11,"ne","","",258],[11,"clone","","",258],[11,"fmt","","",259],[11,"hash","","",259],[11,"eq","","",259],[11,"ne","","",259],[11,"clone","","",259],[11,"fmt","","",260],[11,"eq","","",260],[11,"ne","","",260],[11,"clone","","",260],[11,"fmt","","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"clone","","",261],[11,"id","syntax::ast","",262],[11,"span","","",262],[11,"id","","",263],[11,"span","","",263],[11,"from_mutbl","rustc::middle::mem_categorization","",259],[11,"from_borrow_kind","","",259],[11,"from_pointer_kind","","",259],[11,"inherit","","",259],[11,"is_mutable","","",259],[11,"is_immutable","","",259],[11,"to_user_str","","",259],[11,"new","","",264],[11,"cat_expr","","",264],[11,"cat_expr_autoderefd","","",264],[11,"cat_expr_unadjusted","","",264],[11,"cat_def","","",264],[11,"cat_rvalue_node","","",264],[11,"cat_rvalue","","",264],[11,"cat_field","","",264],[11,"cat_tup_field","","",264],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",264],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",264],[11,"cat_imm_interior","","",264],[11,"cat_downcast","","",264],[11,"cat_pattern","","",264],[11,"guarantor","","Returns `self` after stripping away any owned pointer derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",261],[11,"freely_aliasable","","Returns `Some(_)` if this lvalue represents a freely aliasable pointer type.",261],[11,"upvar","","",261],[11,"descriptive_string","","",261],[11,"repr","","",261],[11,"repr","","",252],[11,"repr","","",254],[11,"repr","","",255],[11,"repr","rustc::middle::ty","",265],[11,"repr","rustc::middle::mem_categorization","",253],[11,"user_string","","",253],[11,"fmt","rustc::middle::privacy","",266],[11,"fmt","","",267],[11,"fmt","","",268],[11,"eq","","",268],[11,"ne","","",268],[11,"or","","",266],[11,"visit_expr","rustc::middle::reachable","",269],[11,"visit_item","","",269],[11,"fmt","rustc::middle::region","",132],[11,"decode","","",132],[11,"encode","","",132],[11,"hash","","",132],[11,"cmp","","",132],[11,"partial_cmp","","",132],[11,"lt","","",132],[11,"le","","",132],[11,"gt","","",132],[11,"ge","","",132],[11,"eq","","",132],[11,"ne","","",132],[11,"clone","","",132],[11,"fmt","","",133],[11,"decode","","",133],[11,"encode","","",133],[11,"hash","","",133],[11,"cmp","","",133],[11,"partial_cmp","","",133],[11,"lt","","",133],[11,"le","","",133],[11,"gt","","",133],[11,"ge","","",133],[11,"eq","","",133],[11,"ne","","",133],[11,"clone","","",133],[11,"new","","",133],[11,"to_code_extent","","",133],[11,"fmt","","",270],[11,"decode","","",270],[11,"encode","","",270],[11,"hash","","",270],[11,"cmp","","",270],[11,"partial_cmp","","",270],[11,"lt","","",270],[11,"le","","",270],[11,"gt","","",270],[11,"ge","","",270],[11,"eq","","",270],[11,"ne","","",270],[11,"clone","","",270],[11,"from_node_id","","Creates a scope that represents the dynamic extent associated\nwith `node_id`.",132],[11,"node_id","","Returns a node id associated with this scope.",132],[11,"map_id","","Maps this scope to a potentially new one according to the\nNodeId transformer `f_id`.",132],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",132],[11,"fmt","","",271],[11,"eq","","",271],[11,"ne","","",271],[11,"fmt","","",272],[11,"eq","","",272],[11,"ne","","",272],[11,"fmt","","",273],[11,"eq","","",273],[11,"ne","","",273],[11,"fmt","","",274],[11,"each_encl_scope","","",275],[11,"each_var_scope","","",275],[11,"each_encl_free_region","","",275],[11,"each_rvalue_scope","","",275],[11,"each_terminating_scope","","",275],[11,"relate_free_regions","","",275],[11,"record_encl_scope","","",275],[11,"record_var_scope","","",275],[11,"record_rvalue_scope","","",275],[11,"mark_as_terminating_scope","","Records that a scope is a TERMINATING SCOPE. Whenever we create automatic temporaries --\ne.g. by an expression like `a().f` -- they will be freed within the innermost terminating\nscope.",275],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",275],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",275],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",275],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",275],[11,"var_region","","Returns the lifetime of the variable `id`.",275],[11,"scopes_intersect","","",275],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",275],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `free_region_map`.  Note that\nit is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n(that is, the user can give two different names to the same lifetime).",275],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",275],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",275],[11,"visit_block","","",276],[11,"visit_item","","",276],[11,"visit_fn","","",276],[11,"visit_arm","","",276],[11,"visit_pat","","",276],[11,"visit_stmt","","",276],[11,"visit_expr","","",276],[11,"visit_local","","",276],[11,"fmt","rustc::middle::resolve_lifetime","",277],[11,"decode","","",277],[11,"encode","","",277],[11,"hash","","",277],[11,"eq","","",277],[11,"ne","","",277],[11,"clone","","",277],[11,"visit_item","","",278],[11,"visit_fn","","",278],[11,"visit_ty","","",278],[11,"visit_ty_method","","",278],[11,"visit_block","","",278],[11,"visit_lifetime_ref","","",278],[11,"visit_generics","","",278],[11,"visit_poly_trait_ref","","",278],[11,"fmt","","",279],[11,"visit_item","rustc::middle::stability","",280],[11,"visit_fn","","",280],[11,"visit_trait_item","","",280],[11,"visit_variant","","",280],[11,"visit_struct_field","","",280],[11,"visit_foreign_item","","",280],[11,"build","","Construct the stability index for a crate being compiled.",281],[11,"new","","",281],[11,"visit_item","","",282],[11,"visit_expr","","",282],[11,"visit_path","","",282],[11,"visit_pat","","",282],[11,"fmt","rustc::middle::subst","",67],[11,"hash","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"clone","","",67],[11,"fmt","","",283],[11,"hash","","",283],[11,"eq","","",283],[11,"ne","","",283],[11,"clone","","",283],[11,"new","","",67],[11,"new_type","","",67],[11,"new_trait","","",67],[11,"erased","","",67],[11,"empty","","",67],[11,"trans_empty","","",67],[11,"is_noop","","",67],[11,"type_for_def","","",67],[11,"has_regions_escaping_depth","","",67],[11,"self_ty","","",67],[11,"with_self_ty","","",67],[11,"erase_regions","","",67],[11,"regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",67],[11,"mut_regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",67],[11,"with_method","","",67],[11,"is_erased","","",283],[11,"fmt","","",284],[11,"decode","","",284],[11,"encode","","",284],[11,"hash","","",284],[11,"clone","","",284],[11,"eq","","",284],[11,"ne","","",284],[11,"cmp","","",284],[11,"partial_cmp","","",284],[11,"lt","","",284],[11,"le","","",284],[11,"gt","","",284],[11,"ge","","",284],[11,"all","","",284],[11,"to_uint","","",284],[11,"from_uint","","",284],[11,"decode","","",51],[11,"encode","","",51],[11,"hash","","",51],[11,"clone","","",51],[11,"eq","","",51],[11,"ne","","",51],[11,"fmt","","",51],[11,"empty","","",51],[11,"params_from_type","","",51],[11,"new","","`t` is the type space.\n`s` is the self space.\n`a` is the assoc space.\n`f` is the fn space.",51],[11,"push","","Appends `value` to the vector associated with `space`.",51],[11,"extend","","Appends `values` to the vector associated with `space`.",51],[11,"pop","","",51],[11,"truncate","","",51],[11,"replace","","",51],[11,"get_self","","",51],[11,"len","","",51],[11,"is_empty_in","","",51],[11,"get_slice","","",51],[11,"get_mut_slice","","",51],[11,"opt_get","","",51],[11,"get","","",51],[11,"iter","","",51],[11,"into_iter","","",51],[11,"iter_enumerated","","",51],[11,"as_slice","","",51],[11,"into_vec","","",51],[11,"all_vecs","","",51],[11,"all","","",51],[11,"any","","",51],[11,"is_empty","","",51],[11,"map","","",51],[11,"map_enumerated","","",51],[11,"map_move","","",51],[11,"split","","",51],[11,"with_vec","","",51],[11,"clone","","",285],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::subst","",285],[6,"Item","rustdoc::core",""],[6,"IntoIter","",""],[11,"into_iter","rustc::middle::subst","",51],[6,"Item","rustdoc::core",""],[6,"IntoIter","",""],[11,"tcx","rustc::middle::subst","",286],[11,"enter_region_binder","","",286],[11,"exit_region_binder","","",286],[11,"fold_region","","",286],[11,"fold_ty","","",286],[11,"clone","rustc::middle::traits::fulfill","",287],[11,"new","","",288],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `<SomeType as SomeTrait>::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we'll unify `$0` with\n`projection_ty` again.",288],[11,"register_builtin_bound","","",288],[11,"register_region_obligation","","",288],[11,"register_predicate_obligation","","",288],[11,"region_obligations","","",288],[11,"select_all_or_error","","",288],[11,"select_new_obligations","","Attempts to select obligations that were registered since the call to a selection routine.\nThis is used by the type checker to eagerly attempt to resolve obligations in hopes of\ngaining type information. It'd be equally valid to use `select_where_possible` but it\nresults in `O(n^2)` performance (#18208).",288],[11,"select_where_possible","","",288],[11,"pending_obligations","","",288],[11,"repr","","",287],[11,"clone","rustc::middle::traits::project","",289],[11,"eq","","",290],[11,"ne","","",290],[11,"tcx","","",291],[11,"fold_ty","","",291],[11,"with","","",292],[11,"repr","","",293],[11,"repr","","",290],[11,"fold_with","","",292],[11,"repr","","",292],[11,"fmt","rustc::middle::traits::object_safety","",294],[11,"clone","","",294],[11,"repr","","",295],[11,"clone","rustc::middle::traits::select","",296],[11,"fmt","","",297],[11,"clone","","",298],[11,"fmt","","",298],[11,"eq","","",298],[11,"ne","","",298],[11,"fmt","","",299],[11,"new","","",300],[11,"intercrate","","",300],[11,"infcx","","",300],[11,"tcx","","",300],[11,"param_env","","",300],[11,"closure_typer","","",300],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",300],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",300],[11,"evaluate_impl","","Evaluates whether the impl with id `impl_def_id` could be applied to the self type\n`obligation_self_ty`. This can be used either for trait or inherent impls.",300],[11,"repr","","",298],[11,"new","","",296],[6,"Item","rustdoc::core",""],[11,"next","core::option","",54],[11,"repr","rustc::middle::traits::select","",301],[11,"may_apply","","",302],[11,"filter_to_traits","rustc::middle::traits::util","",303],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::traits::util","",303],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::traits::util","",304],[11,"fmt","rustc::middle::traits","",305],[11,"fmt","","",306],[11,"repr","","",307],[11,"repr","","",308],[11,"repr","","",305],[11,"repr","","",309],[11,"repr","","",310],[11,"repr","","",306],[11,"repr","","",311],[11,"repr","","",312],[11,"repr","","",313],[11,"fmt","","",313],[11,"repr","rustc::middle::traits::project","",289],[11,"fmt","","",289],[11,"eq","rustc::middle::traits","",307],[11,"ne","","",307],[11,"clone","","",307],[11,"eq","","",314],[11,"ne","","",314],[11,"clone","","",314],[11,"eq","","",315],[11,"ne","","",315],[11,"clone","","",315],[11,"eq","","",316],[11,"ne","","",316],[11,"clone","","",316],[11,"fmt","","",311],[11,"clone","","",311],[11,"clone","","",313],[11,"clone","","",308],[11,"fmt","","",308],[11,"eq","","",305],[11,"ne","","",305],[11,"clone","","",305],[11,"clone","","",310],[11,"fmt","","",310],[11,"clone","","",309],[11,"fmt","","",309],[11,"clone","","",306],[11,"eq","","",306],[11,"ne","","",306],[11,"new","","",307],[11,"misc","","",307],[11,"with","","",307],[11,"new","","",314],[11,"misc","","",314],[11,"dummy","","",314],[11,"iter_nested","","",308],[11,"map_nested","","",308],[11,"map_move_nested","","",308],[11,"iter_nested","","",305],[11,"map_nested","","",305],[11,"map_move_nested","","",305],[11,"iter_nested","","",310],[11,"map_nested","","",310],[11,"map_move_nested","","",310],[11,"iter_nested","","",309],[11,"map_nested","","",309],[11,"map_move_nested","","",309],[11,"is_overflow","","",312],[11,"hash","rustc::middle::ty","",317],[11,"eq","","",317],[11,"ne","","",317],[11,"clone","","",317],[11,"fmt","","",318],[11,"clone","","",318],[11,"id","","",318],[11,"fmt","","",93],[11,"clone","","",93],[11,"def_id","","",93],[11,"name","","",93],[11,"container","","",93],[11,"as_opt_method","","",93],[11,"fmt","","",319],[11,"clone","","",319],[11,"def_id","","",319],[11,"fmt","","",92],[11,"clone","","",92],[11,"new","","",92],[11,"container_id","","",92],[11,"fmt","","",116],[11,"clone","","",116],[11,"fmt","","",320],[11,"hash","","",320],[11,"eq","","",320],[11,"ne","","",320],[11,"clone","","",320],[11,"fmt","","",97],[11,"clone","","",97],[11,"hash","","",321],[11,"eq","","",321],[11,"ne","","",321],[11,"encode","","",322],[11,"decode","","",322],[11,"eq","","",322],[11,"ne","","",322],[11,"clone","","",322],[11,"fmt","","",323],[11,"encode","","",323],[11,"decode","","",323],[11,"eq","","",323],[11,"ne","","",323],[11,"clone","","",323],[11,"fmt","","",324],[11,"clone","","",324],[11,"fmt","","",325],[11,"eq","","",325],[11,"ne","","",325],[11,"clone","","",325],[11,"fmt","","",326],[11,"clone","","",326],[11,"fmt","","",327],[11,"eq","","",327],[11,"ne","","",327],[11,"clone","","",327],[11,"fmt","","",328],[11,"partial_cmp","","",328],[11,"lt","","",328],[11,"le","","",328],[11,"gt","","",328],[11,"ge","","",328],[11,"eq","","",328],[11,"ne","","",328],[11,"decode","","",328],[11,"encode","","",328],[11,"clone","","",328],[11,"fmt","","",139],[11,"clone","","",139],[11,"fmt","","",329],[11,"clone","","",329],[11,"fmt","","",330],[11,"clone","","",330],[11,"clone","","",331],[11,"fmt","","",332],[11,"hash","","",332],[11,"eq","","",332],[11,"ne","","",332],[11,"clone","","",332],[11,"decode","","",333],[11,"encode","","",333],[11,"fmt","","",333],[11,"hash","","",333],[11,"eq","","",333],[11,"ne","","",333],[11,"clone","","",333],[11,"expr","","",332],[11,"autoobject","","",332],[11,"autoderef","","",332],[11,"clone","","",334],[11,"new","","",335],[11,"hash","","",336],[11,"cmp","","",336],[11,"partial_cmp","","",336],[11,"lt","","",336],[11,"le","","",336],[11,"gt","","",336],[11,"ge","","",336],[11,"clone","","",336],[11,"eq","","",336],[11,"ne","","",336],[11,"empty","","Returns an empty set of flags.",336],[11,"all","","Returns the set containing all flags.",336],[11,"bits","","Returns the raw value of the flags currently stored.",336],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",336],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",336],[11,"is_empty","","Returns `true` if no flags are currently stored.",336],[11,"is_all","","Returns `true` if all flags are currently set.",336],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",336],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",336],[11,"insert","","Inserts the specified flags in-place.",336],[11,"remove","","Removes the specified flags in-place.",336],[11,"toggle","","Toggles the specified flags in-place.",336],[6,"Output","rustdoc::core",""],[11,"bitor","rustc::middle::ty","Returns the union of the two sets of flags.",336],[6,"Output","rustdoc::core",""],[11,"bitxor","rustc::middle::ty","Returns the left flags, but with all the right flags toggled.",336],[6,"Output","rustdoc::core",""],[11,"bitand","rustc::middle::ty","Returns the intersection between the two sets of flags.",336],[6,"Output","rustdoc::core",""],[11,"sub","rustc::middle::ty","Returns the set difference of the two sets of flags.",336],[6,"Output","rustdoc::core",""],[11,"not","rustc::middle::ty","Returns the complement of this set of flags.",336],[11,"print_debug_stats","","",337],[11,"fmt","","",338],[11,"fmt","","",336],[11,"eq","","",338],[11,"hash","","",338],[11,"eq","","",339],[11,"hash","","",339],[11,"borrow","","",339],[11,"fmt","","",340],[11,"hash","","",340],[11,"eq","","",340],[11,"ne","","",340],[11,"clone","","",340],[11,"fmt","","",341],[11,"hash","","",341],[11,"eq","","",341],[11,"ne","","",341],[11,"clone","","",341],[11,"fmt","","",85],[11,"hash","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"clone","","",85],[11,"diverges","","",85],[11,"unwrap","","",85],[11,"diverges","","",55],[11,"hash","","",196],[11,"eq","","",196],[11,"ne","","",196],[11,"clone","","",196],[11,"inputs","","",55],[11,"input","","",55],[11,"output","","",55],[11,"variadic","","",55],[11,"fmt","","",342],[11,"hash","","",342],[11,"eq","","",342],[11,"ne","","",342],[11,"clone","","",342],[11,"fmt","","",343],[11,"decode","","",343],[11,"encode","","",343],[11,"hash","","",343],[11,"eq","","",343],[11,"ne","","",343],[11,"clone","","",343],[11,"fmt","","",72],[11,"decode","","",72],[11,"encode","","",72],[11,"hash","","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"fmt","","",344],[11,"hash","","",344],[11,"eq","","",344],[11,"ne","","",344],[11,"clone","","",344],[11,"decode","","",345],[11,"encode","","",345],[11,"fmt","","",345],[11,"hash","","",345],[11,"eq","","",345],[11,"ne","","",345],[11,"clone","","",345],[11,"fmt","","",138],[11,"decode","","",138],[11,"encode","","",138],[11,"clone","","",138],[11,"eq","","",138],[11,"ne","","",138],[11,"fmt","","",137],[11,"decode","","",137],[11,"encode","","",137],[11,"clone","","",137],[11,"eq","","",137],[11,"ne","","",137],[11,"is_bound","","",72],[11,"escapes_depth","","",72],[11,"fmt","","",131],[11,"decode","","",131],[11,"encode","","",131],[11,"hash","","",131],[11,"cmp","","",131],[11,"partial_cmp","","",131],[11,"lt","","",131],[11,"le","","",131],[11,"gt","","",131],[11,"ge","","",131],[11,"eq","","",131],[11,"ne","","",131],[11,"clone","","",131],[11,"fmt","","",134],[11,"decode","","",134],[11,"encode","","",134],[11,"hash","","",134],[11,"cmp","","",134],[11,"partial_cmp","","",134],[11,"lt","","",134],[11,"le","","",134],[11,"gt","","",134],[11,"ge","","",134],[11,"eq","","",134],[11,"ne","","",134],[11,"clone","","",134],[11,"fmt","","",346],[11,"hash","","",346],[11,"eq","","",346],[11,"ne","","",346],[11,"clone","","",346],[11,"fmt","","",347],[11,"hash","","",347],[11,"eq","","",347],[11,"ne","","",347],[11,"clone","","",347],[11,"principal_def_id","","",347],[11,"principal_trait_ref_with_self_ty","","Object types don't have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",347],[11,"projection_bounds_with_self_ty","","",347],[11,"fmt","","",65],[11,"hash","","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"clone","","",65],[11,"self_ty","","",55],[11,"def_id","","",55],[11,"substs","","",55],[11,"input_types","","",55],[11,"to_poly_trait_predicate","","",55],[11,"fmt","","",55],[11,"hash","","",55],[11,"eq","","",55],[11,"ne","","",55],[11,"clone","","",55],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a\nrisky thing to do because it's easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",55],[11,"eq","","",230],[11,"ne","","",230],[11,"clone","","",230],[11,"fmt","","",348],[11,"clone","","",348],[11,"fmt","","",349],[11,"clone","","",349],[11,"fmt","","",350],[11,"clone","","",350],[11,"fmt","","",66],[11,"clone","","",66],[11,"hash","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"fmt","","",63],[11,"clone","","",63],[11,"hash","","",63],[11,"eq","","",63],[11,"ne","","",63],[11,"fmt","","",64],[11,"hash","","",64],[11,"decode","","",64],[11,"eq","","",64],[11,"ne","","",64],[11,"encode","","",64],[11,"clone","","",64],[11,"to_usize","","",64],[11,"from_usize","","",64],[11,"hash","","",351],[11,"eq","","",351],[11,"ne","","",351],[11,"clone","","",351],[11,"hash","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"clone","","",229],[11,"hash","","",231],[11,"eq","","",231],[11,"ne","","",231],[11,"clone","","",231],[11,"hash","","",352],[11,"decode","","",352],[11,"encode","","",352],[11,"eq","","",352],[11,"ne","","",352],[11,"clone","","",352],[11,"hash","","",353],[11,"eq","","",353],[11,"ne","","",353],[11,"clone","","",353],[11,"fmt","","",354],[11,"hash","","",354],[11,"eq","","",354],[11,"ne","","",354],[11,"decode","","",354],[11,"encode","","",354],[11,"clone","","",354],[11,"fmt","","",355],[11,"hash","","",355],[11,"decode","","",355],[11,"encode","","",355],[11,"clone","","",355],[11,"eq","","",355],[11,"ne","","",355],[11,"fmt","","",351],[11,"fmt","","",229],[11,"fmt","","",231],[11,"fmt","","",352],[11,"fmt","","",196],[11,"fmt","","",353],[11,"fmt","","",230],[11,"fmt","","",356],[11,"clone","","",356],[11,"fmt","","",61],[11,"clone","","",61],[11,"fmt","","",71],[11,"clone","","",71],[11,"decode","","",71],[11,"encode","","",71],[11,"to_early_bound_region","","",71],[11,"fmt","","",357],[11,"clone","","",357],[11,"empty","","",357],[11,"is_empty","","",357],[11,"has_type_params","","",357],[11,"has_region_params","","",357],[11,"fmt","","",358],[11,"clone","","",358],[11,"empty","","",358],[11,"instantiate","","",358],[11,"instantiate_supertrait","","",358],[11,"fmt","","",74],[11,"hash","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"subst_supertrait","","Performs a substituion suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",74],[11,"fmt","","",75],[11,"hash","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"clone","","",75],[11,"def_id","","",75],[11,"input_types","","",75],[11,"self_ty","","",75],[11,"def_id","","",55],[11,"fmt","","",76],[11,"hash","","",76],[11,"eq","","",76],[11,"ne","","",76],[11,"clone","","",76],[11,"fmt","","",77],[11,"hash","","",77],[11,"eq","","",77],[11,"ne","","",77],[11,"clone","","",77],[11,"fmt","","",78],[11,"hash","","",78],[11,"eq","","",78],[11,"ne","","",78],[11,"clone","","",78],[11,"item_name","","",55],[11,"sort_key","","",55],[11,"fmt","","",79],[11,"hash","","",79],[11,"eq","","",79],[11,"ne","","",79],[11,"clone","","",79],[11,"sort_key","","",79],[11,"to_poly_trait_ref","alloc::rc","",53],[11,"to_poly_trait_ref","rustc::middle::ty","",55],[11,"to_poly_trait_ref","","",55],[11,"as_predicate","alloc::rc","",53],[11,"as_predicate","rustc::middle::ty","",55],[11,"as_predicate","","",55],[11,"as_predicate","","",55],[11,"as_predicate","","",55],[11,"as_predicate","","",55],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",74],[11,"has_escaping_regions","","",74],[11,"to_opt_poly_trait_ref","","",74],[11,"fmt","","",359],[11,"clone","","",359],[11,"empty","","",359],[11,"has_escaping_regions","","",359],[11,"is_empty","","",359],[11,"new","","",65],[11,"self_ty","","",65],[11,"input_types","","",65],[11,"clone","","",360],[11,"with_caller_bounds","","",360],[11,"for_item","","",360],[11,"fmt","","",361],[11,"clone","","",361],[11,"clone","","",362],[11,"decode","","",265],[11,"encode","","",265],[11,"fmt","","",265],[11,"eq","","",265],[11,"ne","","",265],[11,"clone","","",265],[11,"trait_did","","",265],[11,"mk_substs","","",337],[11,"mk_bare_fn","","",337],[11,"mk_region","","",337],[11,"closure_kind","","",337],[11,"closure_type","","",337],[11,"type_parameter_def","","",337],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",338],[11,"walk_children","","Iterator that walks types reachable from `self`, in\ndepth-first order. Note that this is a shallow walk. For\nexample:",338],[11,"as_opt_param_ty","","",338],[11,"is_param","","",338],[11,"new","","",342],[11,"for_self","","",342],[11,"for_def","","",342],[11,"to_ty","","",342],[11,"is_self","","",342],[11,"empty","","",362],[11,"is_noop","","",362],[11,"empty","","",66],[11,"clone","","",363],[11,"when","","",363],[11,"intersects","","",363],[11,"owns_managed","","",363],[11,"owns_owned","","",363],[11,"is_sized","","",363],[11,"interior_param","","",363],[11,"interior_unsafe","","",363],[11,"interior_unsized","","",363],[11,"needs_drop","","",363],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",363],[11,"reference","","Includes only those bits that still apply when indirected through a reference (`&`)",363],[11,"managed_pointer","","Includes only those bits that still apply when indirected through a managed pointer (`@`)",363],[11,"unsafe_pointer","","Includes only those bits that still apply when indirected through an unsafe pointer (`*`)",363],[11,"union","","",363],[11,"has_dtor","","",363],[6,"Output","rustdoc::core",""],[11,"bitor","rustc::middle::ty","",363],[6,"Output","rustdoc::core",""],[11,"bitand","rustc::middle::ty","",363],[6,"Output","rustdoc::core",""],[11,"sub","rustc::middle::ty","",363],[11,"fmt","","",363],[11,"fmt","","",364],[11,"eq","","",364],[11,"ne","","",364],[11,"cmp","","",364],[11,"partial_cmp","","",364],[11,"lt","","",364],[11,"le","","",364],[11,"gt","","",364],[11,"ge","","",364],[11,"repr","","",350],[11,"clone","","",100],[11,"from_ast_variant","","Creates a new VariantInfo from the corresponding ast representation.",100],[11,"is_present","","",365],[11,"has_drop_flag","","",365],[11,"clone","","",366],[11,"to_string","","",323],[11,"from_mutbl","","",345],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",345],[11,"to_user_str","","",345],[11,"is_method_call","","",337],[11,"upvar_capture","","",337],[11,"node_ty","","",360],[11,"expr_ty_adjusted","","",360],[11,"node_method_ty","","",360],[11,"node_method_origin","","",360],[11,"adjustments","","",360],[11,"is_method_call","","",360],[11,"temporary_scope","","",360],[11,"upvar_capture","","",360],[11,"type_moves_by_default","","",360],[11,"param_env","","",360],[11,"closure_kind","","",360],[11,"closure_type","","",360],[11,"closure_upvars","","",360],[11,"fmt","","",367],[11,"eq","","",367],[11,"ne","","",367],[11,"clone","","",367],[11,"decode","","",136],[11,"encode","","",136],[11,"clone","","",136],[11,"is_identity","","",324],[11,"is_identity","","",326],[11,"new","","",343],[11,"shifted","","",343],[11,"repr","","",324],[11,"repr","","",325],[11,"repr","","",326],[11,"repr","","",327],[11,"repr","","",347],[11,"repr","","",74],[11,"repr","","",334],[11,"has_regions_escaping_depth","rustc::middle::subst","",67],[11,"has_regions_escaping_depth","","",51],[11,"has_regions_escaping_depth","rustc::middle::ty","",361],[11,"has_regions_escaping_depth","","",72],[11,"has_regions_escaping_depth","","",358],[11,"has_regions_escaping_depth","","",74],[11,"has_regions_escaping_depth","","",65],[11,"has_regions_escaping_depth","rustc::middle::subst","",283],[11,"has_regions_escaping_depth","rustc::middle::ty","",55],[11,"has_regions_escaping_depth","","",76],[11,"has_regions_escaping_depth","","",75],[11,"has_regions_escaping_depth","","",77],[11,"has_regions_escaping_depth","","",78],[11,"has_regions_escaping_depth","","",79],[11,"repr","","",78],[11,"has_projection_types","collections::vec","",50],[11,"has_projection_types","rustc::middle::subst","",51],[11,"has_projection_types","rustc::middle::ty","",341],[11,"has_projection_types","","",366],[11,"has_projection_types","","",359],[11,"has_projection_types","","",74],[11,"has_projection_types","","",75],[11,"has_projection_types","","",76],[11,"has_projection_types","","",72],[11,"has_projection_types","","",77],[11,"has_projection_types","","",78],[11,"has_projection_types","","",79],[11,"has_projection_types","","",65],[11,"has_projection_types","rustc::middle::subst","",67],[11,"has_projection_types","core::option","",54],[11,"has_projection_types","alloc::rc","",53],[11,"has_projection_types","alloc::boxed","",368],[11,"has_projection_types","rustc::middle::ty","",55],[11,"has_projection_types","","",85],[11,"has_projection_types","","",196],[11,"has_projection_types","","",317],[11,"has_projection_types","","",340],[11,"references_error","","",55],[11,"references_error","alloc::rc","",53],[11,"references_error","rustc::middle::ty","",75],[11,"references_error","","",78],[11,"references_error","","",65],[11,"references_error","","",74],[11,"references_error","","",77],[11,"references_error","","",76],[11,"references_error","","",72],[11,"repr","","",341],[11,"repr","","",366],[11,"repr","","",317],[11,"repr","","",360],[11,"repr","","",356],[11,"fold_with","core::option","",54],[11,"fold_with","alloc::rc","",53],[11,"fold_with","alloc::boxed","",368],[11,"fold_with","collections::vec","",50],[11,"fold_with","rustc::middle::ty","",55],[11,"fold_with","syntax::owned_slice","",56],[11,"fold_with","rustc::middle::subst","",51],[11,"fold_with","rustc::middle::ty","",340],[11,"fold_with","","",341],[11,"fold_with","","",320],[11,"fold_with","","",85],[11,"fold_with","","",196],[11,"fold_with","","",65],[11,"fold_with","","",317],[11,"fold_with","","",72],[11,"fold_with","rustc::middle::subst","",67],[11,"fold_with","rustc::middle::ty","",362],[11,"fold_with","","",327],[11,"fold_with","","",139],[11,"fold_with","","",334],[11,"fold_with","collections::enum_set","",369],[11,"fold_with","rustc::middle::ty","",63],[11,"fold_with","","",66],[11,"fold_with","","",61],[11,"fold_with","","",356],[11,"fold_with","","",71],[11,"fold_with","","",357],[11,"fold_with","","",358],[11,"fold_with","","",74],[11,"fold_with","","",78],[11,"fold_with","","",79],[11,"fold_with","","",359],[11,"fold_with","","",325],[11,"fold_with","rustc::middle::traits","",307],[11,"fold_with","","",305],[11,"fold_with","","",310],[11,"fold_with","","",309],[11,"fold_with","","",308],[11,"fold_with","","",306],[11,"fold_with","rustc::middle::ty","",76],[11,"fold_with","","",75],[11,"fold_with","","",77],[11,"fold_with","","",366],[11,"fold_with","","",360],[11,"tcx","rustc::middle::ty_fold","",370],[11,"fold_ty","","",370],[11,"new","","",371],[11,"tcx","","",371],[11,"enter_region_binder","","",371],[11,"exit_region_binder","","",371],[11,"fold_region","","",371],[11,"tcx","","",372],[11,"fold_region","","",372],[11,"new","rustc::middle::ty_walk","",373],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",373],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::ty_walk","",373],[11,"visit_foreign_item","rustc::middle::weak_lang_items","",374],[11,"from_i64","rustc::metadata::common","",375],[11,"from_u64","","",375],[11,"eq","","",375],[11,"ne","","",375],[11,"fmt","","",376],[11,"clone","","",376],[11,"fmt","rustc::metadata::tydecode","",377],[11,"clone","rustc::metadata::encoder","",378],[11,"visit_expr","","",379],[11,"visit_item","","",379],[11,"visit_foreign_item","","",379],[11,"visit_item","","",380],[11,"eq","rustc::metadata::decoder","",381],[11,"ne","","",381],[11,"fmt","","",382],[11,"clone","","",382],[11,"clone","","",383],[11,"visit_item","rustc::metadata::creader","",384],[11,"as_slice","","",385],[11,"new","","",384],[11,"read_crates","","",384],[11,"read_exported_macros","","Read exported macros.",384],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",384],[11,"clone","rustc::metadata::cstore","",386],[11,"eq","","",386],[11,"ne","","",386],[11,"fmt","","",386],[11,"from_i64","","",387],[11,"from_u64","","",387],[11,"eq","","",387],[11,"ne","","",387],[11,"clone","","",387],[11,"clone","","",388],[11,"eq","","",388],[11,"ne","","",388],[11,"new","","",389],[11,"next_crate_num","","",389],[11,"get_crate_data","","",389],[11,"get_crate_hash","","",389],[11,"set_crate_data","","",389],[11,"iter_crate_data","","",389],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",389],[11,"add_used_crate_source","","",389],[11,"get_used_crate_source","","",389],[11,"reset","","",389],[11,"get_used_crates","","",389],[11,"add_used_library","","",389],[11,"get_used_libraries","","",389],[11,"add_used_link_args","","",389],[11,"get_used_link_args","","",389],[11,"add_extern_mod_stmt_cnum","","",389],[11,"find_extern_mod_stmt_cnum","","",389],[11,"data","","",57],[11,"name","","",57],[11,"hash","","",57],[11,"as_slice","","",390],[11,"maybe_load_library_crate","rustc::metadata::loader","",391],[11,"load_library_crate","","",391],[11,"report_load_errs","","",391],[11,"as_slice","","",392],[11,"for_each_lib_search_path","rustc::metadata::filesearch","",393],[11,"get_lib_path","","",393],[11,"search","","",393],[11,"new","","",393],[11,"get_dylib_search_paths","","",393],[11,"get_tools_search_paths","","",393],[11,"visit_item","rustc::metadata::macro_import","",394],[11,"visit_mac","","",394],[11,"eq","rustc::session::config","",395],[11,"ne","","",395],[11,"clone","","",395],[11,"eq","","",396],[11,"ne","","",396],[11,"clone","","",396],[11,"cmp","","",397],[11,"partial_cmp","","",397],[11,"lt","","",397],[11,"le","","",397],[11,"gt","","",397],[11,"ge","","",397],[11,"eq","","",397],[11,"ne","","",397],[11,"clone","","",397],[11,"clone","","",398],[11,"clone","","",399],[11,"eq","","",400],[11,"ne","","",400],[11,"clone","","",400],[11,"clone","","",401],[11,"path","","",401],[11,"temp_path","","",401],[11,"with_extension","","",401],[11,"filestem","","",401],[11,"eq","","",402],[11,"ne","","",402],[11,"fmt","","",403],[11,"hash","","",403],[11,"cmp","","",403],[11,"clone","","",403],[11,"partial_cmp","","",403],[11,"lt","","",403],[11,"le","","",403],[11,"gt","","",403],[11,"ge","","",403],[11,"eq","","",403],[11,"ne","","",403],[11,"clone","","",404],[11,"is_empty","","",404],[11,"clone","","",405],[11,"clone","","",406],[11,"fmt","","",407],[11,"eq","","",407],[11,"ne","","",407],[11,"clone","","",407],[11,"eq","","",408],[11,"ne","","",408],[11,"clone","","",408],[11,"is_stable","","",408],[11,"fmt","","",403],[11,"fmt","rustc::session::search_paths","",409],[11,"clone","","",409],[11,"fmt","","",410],[11,"clone","","",410],[11,"eq","","",410],[11,"ne","","",410],[11,"new","","",409],[11,"add_path","","",409],[11,"iter","","",409],[6,"Item","rustdoc::core",""],[11,"next","rustc::session::search_paths","",411],[11,"span_fatal","rustc::session","",412],[11,"span_fatal_with_code","","",412],[11,"fatal","","",412],[11,"span_err","","",412],[11,"span_err_with_code","","",412],[11,"err","","",412],[11,"err_count","","",412],[11,"has_errors","","",412],[11,"abort_if_errors","","",412],[11,"span_warn","","",412],[11,"span_warn_with_code","","",412],[11,"warn","","",412],[11,"opt_span_warn","","",412],[11,"span_note","","",412],[11,"span_end_note","","",412],[11,"span_help","","",412],[11,"fileline_note","","",412],[11,"fileline_help","","",412],[11,"note","","",412],[11,"help","","",412],[11,"opt_span_bug","","",412],[11,"span_bug","","",412],[11,"bug","","",412],[11,"span_unimpl","","",412],[11,"unimpl","","",412],[11,"add_lint","","",412],[11,"next_node_id","","",412],[11,"reserve_node_ids","","",412],[11,"diagnostic","","",412],[11,"codemap","","",412],[11,"impossible_case","","",412],[11,"verbose","","",412],[11,"time_passes","","",412],[11,"count_llvm_insns","","",412],[11,"count_type_sizes","","",412],[11,"time_llvm_passes","","",412],[11,"trans_stats","","",412],[11,"meta_stats","","",412],[11,"asm_comments","","",412],[11,"no_verify","","",412],[11,"borrowck_stats","","",412],[11,"print_llvm_passes","","",412],[11,"lto","","",412],[11,"no_landing_pads","","",412],[11,"unstable_options","","",412],[11,"print_enum_sizes","","",412],[11,"sysroot","","",412],[11,"target_filesearch","","",412],[11,"host_filesearch","","",412],[11,"args","rustc::plugin::registry","Get the plugin's arguments, if any.",413],[11,"register_syntax_extension","","Register a syntax extension of any kind.",413],[11,"register_macro","","Register a macro of the usual kind.",413],[11,"register_lint_pass","","Register a compiler lint pass.",413],[11,"register_lint_group","","Register a lint group.",413],[11,"visit_item","rustc::plugin::build","",414],[11,"fmt","rustc::lint","",415],[11,"name_lower","","Get the lint's name, with ASCII letters converted to lowercase.",415],[11,"clone","","",416],[11,"eq","","",416],[11,"hash","","",416],[11,"of","","Get the `LintId` for a `Lint`.",416],[11,"as_str","","Get the name of the lint.",416],[11,"fmt","","",417],[11,"cmp","","",417],[11,"partial_cmp","","",417],[11,"lt","","",417],[11,"le","","",417],[11,"gt","","",417],[11,"ge","","",417],[11,"eq","","",417],[11,"ne","","",417],[11,"clone","","",417],[11,"as_str","","Convert a level to a lower-case string.",417],[11,"from_str","","Convert a lower-case string to a level.",417],[11,"eq","","",418],[11,"ne","","",418],[11,"clone","","",418],[11,"get_lints","rustc::lint::builtin","",419],[11,"new","rustc::lint::context","",420],[11,"get_lints","","",420],[11,"get_lint_groups","","",420],[11,"register_pass","","",420],[11,"register_group","","",420],[11,"register_renamed","","",420],[11,"process_command_line","","",420],[11,"sess","","Get the overall compiler `Session` object.",421],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",421],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",421],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",421],[11,"visit_item","","",421],[11,"visit_foreign_item","","",421],[11,"visit_pat","","",421],[11,"visit_expr","","",421],[11,"visit_stmt","","",421],[11,"visit_fn","","",421],[11,"visit_ty_method","","",421],[11,"visit_struct_def","","",421],[11,"visit_struct_field","","",421],[11,"visit_variant","","",421],[11,"visit_ty","","",421],[11,"visit_ident","","",421],[11,"visit_mod","","",421],[11,"visit_local","","",421],[11,"visit_block","","",421],[11,"visit_arm","","",421],[11,"visit_decl","","",421],[11,"visit_expr_post","","",421],[11,"visit_generics","","",421],[11,"visit_trait_item","","",421],[11,"visit_opt_lifetime_ref","","",421],[11,"visit_lifetime_ref","","",421],[11,"visit_lifetime_def","","",421],[11,"visit_explicit_self","","",421],[11,"visit_mac","","",421],[11,"visit_path","","",421],[11,"visit_attribute","","",421],[11,"visit_id","","",421],[11,"get_lints","","",422],[11,"check_item","","",422],[11,"fmt","rustc::util::common","",423],[11,"clone","","",423],[11,"drop","","",424],[11,"visit_expr","","",425],[11,"visit_expr","","",426],[11,"repr","core::option","",54],[11,"repr","syntax::ptr","",52],[11,"repr","core::result","",240],[11,"repr","alloc::rc","",53],[11,"repr","alloc::boxed","",368],[11,"repr","syntax::owned_slice","",56],[11,"repr","collections::vec","",50],[11,"user_string","","",50],[11,"repr","rustc::middle::def","",130],[11,"user_string","rustc::middle::ty","",347],[11,"repr","","",61],[11,"repr","","",71],[11,"repr","","",338],[11,"repr","","",320],[11,"repr","rustc::middle::subst","",67],[11,"repr","","",51],[11,"repr","rustc::middle::ty","",362],[11,"repr","rustc::middle::subst","",283],[11,"repr","collections::enum_set","",369],[11,"repr","rustc::middle::ty","",66],[11,"repr","","",65],[11,"repr","","",427],[11,"repr","syntax::ast","",90],[11,"repr","","",262],[11,"repr","","",103],[11,"user_string","","",103],[11,"repr","","",94],[11,"repr","","",428],[11,"repr","","",69],[11,"repr","syntax::codemap","",429],[11,"repr","syntax::ast","",263],[11,"repr","rustc::middle::ty","",134],[11,"repr","","",72],[11,"user_string","","",72],[11,"repr","","",131],[11,"repr","rustc::middle::region","",132],[11,"repr","","",133],[11,"repr","syntax::ast","",128],[11,"repr","rustc::middle::ty","",361],[11,"repr","","",357],[11,"repr","","",358],[11,"repr","","",359],[11,"repr","","",322],[11,"repr","","",323],[11,"repr","","",92],[11,"repr","syntax::ast","",107],[11,"user_string","","",107],[11,"repr","","",106],[11,"repr","","",83],[11,"repr","","",98],[11,"repr","rustc::middle::ty","",340],[11,"repr","","",196],[11,"repr","","",85],[11,"repr","","",331],[11,"repr","","",139],[11,"repr","","",329],[11,"repr","","",330],[11,"repr","","",64],[11,"user_string","","",64],[11,"repr","syntax::codemap","",102],[11,"user_string","alloc::rc","",53],[11,"user_string","rustc::middle::ty","",66],[11,"repr","","",63],[11,"user_string","collections::enum_set","",369],[11,"user_string","rustc::middle::ty","",55],[11,"user_string","","",65],[11,"user_string","syntax::ast","",106],[11,"repr","syntax::abi","",430],[11,"user_string","","",430],[11,"repr","rustc::middle::ty","",344],[11,"repr","syntax::ast","",109],[11,"repr","rustc::middle::ty","",345],[11,"repr","","",137],[11,"repr","","",138],[11,"repr","","",229],[11,"repr","","",231],[11,"repr","","",352],[11,"repr","","",351],[11,"repr","","",230],[11,"repr","syntax::ast","",431],[11,"repr","","",432],[11,"repr","","",232],[11,"repr","rustc::middle::ty","",367],[11,"user_string","","",342],[11,"repr","","",342],[11,"repr","","",55],[11,"repr","std::collections::hash::map","",433],[11,"repr","rustc::middle::ty","",77],[11,"user_string","","",77],[11,"repr","","",76],[11,"user_string","","",76],[11,"repr","","",75],[11,"user_string","","",75],[11,"user_string","","",78],[11,"repr","","",79],[11,"user_string","","",79],[11,"user_string","","",74],[11,"default","rustc::util::nodemap","",434],[11,"write","","",434],[11,"finish","","",434],[11,"new","rustc::util::snapshot_vec","",435],[11,"record","","",435],[11,"push","","",435],[11,"get","","",435],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",435],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",435],[11,"start_snapshot","","",435],[11,"actions_since_snapshot","","",435],[11,"rollback_to","","",435],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",435],[11,"input","rustc_back::sha2","",436],[11,"reset","","",436],[11,"zero_until","","",436],[11,"next","","",436],[11,"full_buffer","","",436],[11,"position","","",436],[11,"remaining","","",436],[11,"size","","",436],[11,"new","","Construct a new instance of a SHA-256 digest.",437],[11,"input","","",437],[11,"result","","",437],[11,"reset","","",437],[11,"output_bits","","",437],[11,"open","rustc_llvm::archive_ro","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",438],[11,"read","","Reads a file in the archive",438],[11,"drop","","",438],[11,"describe","rustc_llvm::diagnostic","",439],[11,"unpack","","",440],[11,"eq","rustc_llvm","",441],[11,"ne","","",441],[11,"fmt","","",442],[11,"hash","","",443],[11,"cmp","","",443],[11,"partial_cmp","","",443],[11,"lt","","",443],[11,"le","","",443],[11,"gt","","",443],[11,"ge","","",443],[11,"clone","","",443],[11,"eq","","",443],[11,"ne","","",443],[11,"empty","","Returns an empty set of flags.",443],[11,"all","","Returns the set containing all flags.",443],[11,"bits","","Returns the raw value of the flags currently stored.",443],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",443],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",443],[11,"is_empty","","Returns `true` if no flags are currently stored.",443],[11,"is_all","","Returns `true` if all flags are currently set.",443],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",443],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",443],[11,"insert","","Inserts the specified flags in-place.",443],[11,"remove","","Removes the specified flags in-place.",443],[11,"toggle","","Toggles the specified flags in-place.",443],[6,"Output","rustdoc::core",""],[11,"bitor","rustc_llvm","Returns the union of the two sets of flags.",443],[6,"Output","rustdoc::core",""],[11,"bitxor","rustc_llvm","Returns the left flags, but with all the right flags toggled.",443],[6,"Output","rustdoc::core",""],[11,"bitand","rustc_llvm","Returns the intersection between the two sets of flags.",443],[6,"Output","rustdoc::core",""],[11,"sub","rustc_llvm","Returns the set difference of the two sets of flags.",443],[6,"Output","rustdoc::core",""],[11,"not","rustc_llvm","Returns the complement of this set of flags.",443],[11,"apply_llfn","","",443],[11,"apply_callsite","","",443],[11,"apply_llfn","","",444],[11,"apply_callsite","","",444],[11,"apply_llfn","","",445],[11,"apply_callsite","","",445],[11,"new","","",446],[11,"arg","","",446],[11,"ret","","",446],[11,"apply_llfn","","",446],[11,"apply_callsite","","",446],[11,"fmt","","",447],[11,"eq","","",447],[11,"ne","","",447],[11,"clone","","",448],[11,"eq","","",448],[11,"ne","","",448],[11,"eq","","",449],[11,"ne","","",449],[11,"drop","","",450],[11,"new","","",451],[11,"drop","","",451],[11,"drop","","",452],[4,"Input","rustdoc::core",""],[13,"File","","Load source from file",119],[13,"Str","","The string is the source",119],[3,"SearchPaths","",""],[3,"DocContext","",""],[12,"krate","","",453],[12,"maybe_typed","","",453],[12,"input","","",453],[12,"external_paths","","",453],[12,"external_traits","","",453],[12,"external_typarams","","",453],[12,"inlined","","",453],[12,"populated_crate_impls","","",453],[3,"CrateAnalysis","",""],[12,"exported_items","","",454],[12,"public_items","","",454],[12,"external_paths","","",454],[12,"external_traits","","",454],[12,"external_typarams","","",454],[12,"inlined","","",454],[4,"MaybeTyped","","Are we generating documentation (`Typed`) or tests (`NotTyped`)?"],[13,"Typed","","",455],[13,"NotTyped","","",455],[5,"run_core","",""],[6,"ExternalPaths","",""],[6,"Externs","",""],[11,"sess","","",453],[11,"tcx_opt","","",453],[11,"tcx","","",453],[0,"doctree","rustdoc","This module is used to store stuff from Rust's AST in a more convenient\nmanner (and with prettier names) before cleaning."],[3,"Module","rustdoc::doctree",""],[12,"name","","",456],[12,"attrs","","",456],[12,"where_outer","","",456],[12,"where_inner","","",456],[12,"extern_crates","","",456],[12,"imports","","",456],[12,"structs","","",456],[12,"enums","","",456],[12,"fns","","",456],[12,"mods","","",456],[12,"id","","",456],[12,"typedefs","","",456],[12,"statics","","",456],[12,"constants","","",456],[12,"traits","","",456],[12,"vis","","",456],[12,"stab","","",456],[12,"impls","","",456],[12,"def_traits","","",456],[12,"foreigns","","",456],[12,"macros","","",456],[12,"is_crate","","",456],[3,"Struct","",""],[12,"vis","","",457],[12,"stab","","",457],[12,"id","","",457],[12,"struct_type","","",457],[12,"name","","",457],[12,"generics","","",457],[12,"attrs","","",457],[12,"fields","","",457],[12,"whence","","",457],[3,"Enum","",""],[12,"vis","","",458],[12,"stab","","",458],[12,"variants","","",458],[12,"generics","","",458],[12,"attrs","","",458],[12,"id","","",458],[12,"whence","","",458],[12,"name","","",458],[3,"Variant","",""],[12,"name","","",459],[12,"attrs","","",459],[12,"kind","","",459],[12,"id","","",459],[12,"vis","","",459],[12,"stab","","",459],[12,"whence","","",459],[3,"Function","",""],[12,"decl","","",460],[12,"attrs","","",460],[12,"id","","",460],[12,"name","","",460],[12,"vis","","",460],[12,"stab","","",460],[12,"unsafety","","",460],[12,"whence","","",460],[12,"generics","","",460],[3,"Typedef","",""],[12,"ty","","",461],[12,"gen","","",461],[12,"name","","",461],[12,"id","","",461],[12,"attrs","","",461],[12,"whence","","",461],[12,"vis","","",461],[12,"stab","","",461],[3,"Static","",""],[12,"type_","","",462],[12,"mutability","","",462],[12,"expr","","",462],[12,"name","","",462],[12,"attrs","","",462],[12,"vis","","",462],[12,"stab","","",462],[12,"id","","",462],[12,"whence","","",462],[3,"Constant","",""],[12,"type_","","",463],[12,"expr","","",463],[12,"name","","",463],[12,"attrs","","",463],[12,"vis","","",463],[12,"stab","","",463],[12,"id","","",463],[12,"whence","","",463],[3,"Trait","",""],[12,"unsafety","","",464],[12,"name","","",464],[12,"items","","",464],[12,"generics","","",464],[12,"bounds","","",464],[12,"attrs","","",464],[12,"id","","",464],[12,"whence","","",464],[12,"vis","","",464],[12,"stab","","",464],[3,"Impl","",""],[12,"unsafety","","",465],[12,"polarity","","",465],[12,"generics","","",465],[12,"trait_","","",465],[12,"for_","","",465],[12,"items","","",465],[12,"attrs","","",465],[12,"whence","","",465],[12,"vis","","",465],[12,"stab","","",465],[12,"id","","",465],[3,"DefaultImpl","",""],[12,"unsafety","","",466],[12,"trait_","","",466],[12,"id","","",466],[3,"Macro","",""],[12,"name","","",467],[12,"id","","",467],[12,"attrs","","",467],[12,"whence","","",467],[12,"stab","","",467],[3,"ExternCrate","",""],[12,"name","","",468],[12,"path","","",468],[12,"vis","","",468],[12,"attrs","","",468],[12,"whence","","",468],[3,"Import","",""],[12,"id","","",469],[12,"vis","","",469],[12,"attrs","","",469],[12,"node","","",469],[12,"whence","","",469],[4,"StructType","",""],[13,"Plain","","A normal struct",470],[13,"Tuple","","A tuple struct",470],[13,"Newtype","","A newtype struct (tuple struct with one element)",470],[13,"Unit","","A unit struct",470],[4,"TypeBound","",""],[13,"RegionBound","","",471],[13,"TraitBound","","",471],[5,"struct_type_from_def","",""],[11,"new","","",456],[11,"decode","","",470],[11,"encode","","",470],[11,"clone","","",470],[11,"fmt","","",470],[11,"fmt","","",462],[0,"fold","rustdoc",""],[8,"DocFolder","rustdoc::fold",""],[11,"fold_item","","",472],[11,"fold_item_recur","","don't override!",472],[11,"fold_mod","","",472],[11,"fold_crate","","",472],[0,"html","rustdoc",""],[0,"highlight","rustdoc::html","Basic html highlighting functionality"],[5,"highlight","rustdoc::html::highlight","Highlights some source code, returning the HTML output."],[0,"escape","rustdoc::html","HTML Escaping"],[3,"Escape","rustdoc::html::escape","Wrapper struct which will emit the HTML-escaped version of the contained\nstring when passed to a format string."],[11,"fmt","","",473],[0,"item_type","rustdoc::html","Item types."],[4,"ItemType","rustdoc::html::item_type","Item type. Corresponds to `clean::ItemEnum` variants."],[13,"Module","","",474],[13,"ExternCrate","","",474],[13,"Import","","",474],[13,"Struct","","",474],[13,"Enum","","",474],[13,"Function","","",474],[13,"Typedef","","",474],[13,"Static","","",474],[13,"Trait","","",474],[13,"Impl","","",474],[13,"TyMethod","","",474],[13,"Method","","",474],[13,"StructField","","",474],[13,"Variant","","",474],[13,"Macro","","",474],[13,"Primitive","","",474],[13,"AssociatedType","","",474],[13,"Constant","","",474],[11,"clone","","",474],[11,"eq","","",474],[11,"ne","","",474],[11,"from_item","","",474],[11,"from_type_kind","","",474],[11,"to_static_str","","",474],[11,"fmt","","",474],[0,"format","rustdoc::html","HTML formatting module"],[3,"VisSpace","rustdoc::html::format","Helper to render an optional visibility with a space after it (if the\nvisibility is preset)"],[3,"UnsafetySpace","","Similarly to VisSpace, this structure is used to render a function style with a\nspace after it."],[3,"Method","","Wrapper struct for properly emitting a method declaration."],[3,"MutableSpace","","Similar to VisSpace, but used for mutability"],[3,"RawMutableSpace","","Similar to VisSpace, but used for mutability"],[3,"Stability","","Wrapper struct for properly emitting the stability level."],[3,"ConciseStability","","Wrapper struct for emitting the stability level concisely."],[3,"WhereClause","","Wrapper struct for emitting a where clause from Generics."],[3,"TyParamBounds","","Wrapper struct for emitting type parameter bounds."],[3,"CommaSep","","Wrapper struct for emitting a comma-separated list of items"],[11,"get","","",475],[11,"get","","",476],[11,"fmt","","",477],[11,"fmt","","",478],[11,"fmt","rustdoc::clean","",6],[11,"fmt","rustdoc::html::format","",479],[11,"fmt","rustdoc::clean","",68],[11,"fmt","","",14],[11,"fmt","","",34],[11,"fmt","","",45],[11,"fmt","","",21],[11,"fmt","","",20],[11,"fmt","","",40],[11,"fmt","","",11],[11,"fmt","","",37],[11,"fmt","","",10],[11,"fmt","rustdoc::html::format","",480],[11,"fmt","","",475],[11,"fmt","","",476],[11,"fmt","rustdoc::clean","",48],[11,"fmt","","",27],[11,"fmt","","",28],[11,"fmt","","",31],[11,"fmt","rustdoc::html::format","",481],[11,"fmt","","",482],[11,"fmt","","",483],[11,"fmt","","",484],[0,"layout","rustdoc::html",""],[3,"Layout","rustdoc::html::layout",""],[12,"logo","","",485],[12,"favicon","","",485],[12,"external_html","","",485],[12,"krate","","",485],[12,"playground_url","","",485],[3,"Page","",""],[12,"title","","",486],[12,"ty","","",486],[12,"root_path","","",486],[12,"description","","",486],[12,"keywords","","",486],[5,"render","",""],[5,"redirect","",""],[11,"clone","","",485],[0,"markdown","rustdoc::html","Markdown formatting for rustdoc"],[3,"Markdown","rustdoc::html::markdown","A unit struct which has the `fmt::String` trait implemented. When\nformatted, this struct will emit the HTML corresponding to the rendered\nversion of the contained markdown string."],[3,"MarkdownWithToc","","A unit struct like `Markdown`, that renders the markdown with a\ntable of contents."],[5,"render","",""],[5,"find_testable_code","",""],[5,"reset_headers","","By default this markdown renderer generates anchors for each header in the\nrendered document. The anchor name is the contents of the header separated\nby hyphens, and a task-local map is used to disambiguate among duplicate\nheaders (numbers are appended)."],[5,"plain_summary_line","",""],[7,"PLAYGROUND_KRATE","",""],[11,"fmt","","",487],[11,"fmt","","",488],[0,"render","rustdoc::html","Rustdoc's HTML Rendering module"],[3,"Context","rustdoc::html::render","Major driving force in all rustdoc rendering. This contains information\nabout where in the tree-like hierarchy rendering is occurring and controls\nhow the current page is being rendered."],[12,"current","","Current hierarchy of components leading down to what's currently being\nrendered",489],[12,"root_path","","String representation of how to get back to the root path of the 'doc/'\nfolder in terms of a relative URL.",489],[12,"src_root","","The path to the crate root source minus the file name.\nUsed for simplifying paths to the highlighted source code files.",489],[12,"dst","","The current destination folder of where HTML artifacts should be placed.\nThis changes as the context descends into the module hierarchy.",489],[12,"layout","","This describes the layout of each page, and is not modified after\ncreation of the context (contains info like the favicon and added html).",489],[12,"include_sources","","This flag indicates whether [src] links should be generated or not. If\nthe source files are present in the html rendering, then this will be\n`true`.",489],[12,"render_redirect_pages","","A flag, which when turned off, will render pages which redirect to the\nreal location of an item. This is used to allow external links to\npublicly reused items to redirect to the right location.",489],[12,"passes","","All the passes that were run on this crate.",489],[3,"Implementor","","Metadata about an implementor of a trait."],[12,"def_id","","",490],[12,"generics","","",490],[12,"trait_","","",490],[12,"for_","","",490],[12,"stability","","",490],[3,"Impl","","Metadata about implementations for a type."],[12,"impl_","","",491],[12,"dox","","",491],[12,"stability","","",491],[3,"Cache","","This cache is used to store information about the `clean::Crate` being\nrendered in order to provide more useful documentation. This contains\ninformation like all implementors of a trait, all traits a type implements,\ndocumentation for all known traits, etc."],[12,"typarams","","Mapping of typaram ids to the name of the type parameter. This is used\nwhen pretty-printing a type (so pretty printing doesn't have to\npainfully maintain a context like this)",492],[12,"impls","","Maps a type id to all known implementations for that type. This is only\nrecognized for intra-crate `ResolvedPath` types, and is used to print\nout extra documentation on the page of an enum/struct.",492],[12,"paths","","Maintains a mapping of local crate node ids to the fully qualified name\nand \"short type description\" of that node. This is used when generating\nURLs when a type is being linked to. External paths are not located in\nthis map because the `External` type itself has all the information\nnecessary.",492],[12,"external_paths","","Similar to `paths`, but only holds external paths. This is only used for\ngenerating explicit hyperlinks to other crates.",492],[12,"traits","","This map contains information about all known traits of this crate.\nImplementations of a crate should inherit the documentation of the\nparent trait if no extra documentation is specified, and default methods\nshould show up in documentation about trait implementations.",492],[12,"implementors","","When rendering traits, it's often useful to be able to list all\nimplementors of the trait, and this mapping is exactly, that: a mapping\nof trait ids to the list of known implementors of the trait",492],[12,"extern_locations","","Cache of where external crate documentation can be found.",492],[12,"primitive_locations","","Cache of where documentation for primitives can be found.",492],[12,"inlined","","Set of definitions which have been inlined from external crates.",492],[4,"ExternalLocation","","Indicates where an external crate can be found."],[13,"Remote","","Remote URL root of the external crate",493],[13,"Local","","This external crate can be found in the local doc/ folder",493],[13,"Unknown","","The external crate could not be found.",493],[5,"run","","Generates the documentation for `crate` into the directory `dst`"],[5,"cache","",""],[6,"NameDoc","","A pair of name and its optional document."],[7,"CURRENT_LOCATION_KEY","",""],[11,"clone","","",489],[11,"clone","","",491],[11,"default","","",492],[11,"fold_item","","",492],[0,"toc","rustdoc::html","Table-of-contents creation."],[3,"Toc","rustdoc::html::toc","A (recursive) table of contents"],[3,"TocEntry","",""],[3,"TocBuilder","","Progressive construction of a table of contents."],[11,"eq","","",494],[11,"ne","","",494],[11,"eq","","",495],[11,"ne","","",495],[11,"eq","","",496],[11,"ne","","",496],[11,"new","","",496],[11,"into_toc","","Convert into a true `Toc` struct.",496],[11,"push","","Push a level `level` heading into the appropriate place in the\nhierarchy, returning a string containing the section number in\n`<num>.<num>.<num>` format.",496],[11,"fmt","","",494],[11,"fmt","","",494],[0,"markdown","rustdoc",""],[5,"render","rustdoc::markdown","Render `input` (e.g. \"foo.md\") into an HTML file in `output`\n(e.g. output = \"bar\" => \"bar/foo.html\")."],[5,"test","","Run any tests/code examples in the markdown file `input`."],[0,"passes","rustdoc",""],[5,"strip_hidden","rustdoc::passes","Strip items marked `#[doc(hidden)]`"],[5,"strip_private","","Strip private items from the point of view of a crate or externally from a\ncrate, specified by the `xcrate` flag."],[5,"unindent_comments","",""],[5,"collapse_docs","",""],[5,"unindent","",""],[0,"plugins","rustdoc",""],[3,"PluginManager","rustdoc::plugins","Manages loading and running of plugins"],[12,"prefix","","The directory plugins will be loaded from",497],[6,"PluginJson","",""],[6,"PluginResult","",""],[6,"PluginCallback","",""],[11,"new","","Create a new plugin manager",497],[11,"load_plugin","","Load a plugin with the given name.",497],[11,"add_plugin","","Load a normal Rust function as a plugin.",497],[11,"run_plugins","","Run all the loaded plugins over the crate, returning their results",497],[0,"stability_summary","rustdoc","This module crawls a `clean::Crate` and produces a summarization of the\nstability levels within the crate. The summary contains the module\nhierarchy, with item counts for every stability level per module. A parent\nmodule's count includes its children's."],[3,"Counts","rustdoc::stability_summary","The counts for each stability level."],[12,"deprecated","","",498],[12,"unstable","","",498],[12,"stable","","",498],[12,"unmarked","","No stability level, inherited or otherwise.",498],[3,"ModuleSummary","","A summarized module, which includes total counts and summarized children\nmodules."],[12,"name","","",499],[12,"counts","","",499],[12,"submodules","","",499],[5,"build","","Summarizes the stability levels in a crate."],[11,"eq","","",498],[11,"ne","","",498],[11,"decode","","",498],[11,"encode","","",498],[6,"Output","",""],[11,"add","","",498],[11,"total","","",498],[11,"eq","","",499],[11,"ne","","",499],[11,"decode","","",499],[11,"encode","","",499],[11,"partial_cmp","","",499],[11,"cmp","","",499],[0,"visit_ast","rustdoc","Rust AST Visitor. Extracts useful information and massages it into a form\nusable for clean"],[3,"RustdocVisitor","rustdoc::visit_ast",""],[12,"module","","",500],[12,"attrs","","",500],[12,"cx","","",500],[12,"analysis","","",500],[11,"new","","",500],[11,"visit","","",500],[11,"visit_struct_def","","",500],[11,"visit_enum_def","","",500],[11,"visit_fn","","",500],[11,"visit_mod_contents","","",500],[11,"visit_item","","",500],[0,"test","rustdoc",""],[3,"Collector","rustdoc::test",""],[12,"tests","","",501],[5,"run","",""],[5,"maketest","",""],[11,"new","","",501],[11,"add_test","","",501],[11,"register_header","","",501],[11,"fold_item","","",501],[7,"ANALYSISKEY","rustdoc",""],[11,"clean","rustdoc::visit_ast","",500],[11,"clean","rustdoc::doctree","",456],[11,"clean","","",460],[11,"clean","","",464],[11,"clean","","",457],[11,"clean","","",458],[11,"clean","","",459],[11,"clean","","",461],[11,"clean","","",462],[11,"clean","","",463],[11,"clean","","",465],[11,"clean","","",468],[11,"clean","","",469],[11,"clean","","",467],[11,"fmt","rustdoc::stability_summary","",499]],"paths":[[3,"ExternalHtml"],[3,"Crate"],[3,"ExternalCrate"],[3,"Item"],[3,"Module"],[3,"TyParam"],[3,"Generics"],[3,"Method"],[3,"TyMethod"],[3,"Function"],[3,"FnDecl"],[3,"Arguments"],[3,"Argument"],[3,"Trait"],[3,"PolyTrait"],[3,"Struct"],[3,"VariantStruct"],[3,"Enum"],[3,"Variant"],[3,"Span"],[3,"Path"],[3,"PathSegment"],[3,"Typedef"],[3,"BareFunctionDecl"],[3,"Static"],[3,"Constant"],[3,"Impl"],[3,"ImportSource"],[3,"ViewListIdent"],[3,"Macro"],[3,"Stability"],[3,"TypeBinding"],[4,"ItemEnum"],[4,"Attribute"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"SelfTy"],[4,"FunctionRetTy"],[4,"TraitMethod"],[4,"ImplMethod"],[4,"Type"],[4,"PrimitiveType"],[4,"TypeKind"],[4,"StructField"],[4,"VariantKind"],[4,"PathParameters"],[4,"Mutability"],[4,"ImplPolarity"],[4,"Import"],[8,"Clean"],[3,"Vec"],[3,"VecPerParamSpace"],[3,"P"],[3,"Rc"],[4,"Option"],[3,"Binder"],[3,"OwnedSlice"],[3,"crate_metadata"],[6,"MetaItem"],[6,"Attribute"],[3,"TyParam"],[3,"TypeParameterDef"],[4,"TyParamBound"],[3,"ExistentialBounds"],[4,"BuiltinBound"],[3,"TraitRef"],[3,"ParamBounds"],[3,"Substs"],[3,"Lifetime"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"RegionParameterDef"],[4,"Region"],[4,"WherePredicate"],[4,"Predicate"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionPredicate"],[3,"ProjectionTy"],[3,"Generics"],[3,"Method"],[3,"TypeMethod"],[4,"ExplicitSelf_"],[3,"FnDecl"],[4,"FnOutput"],[3,"Arg"],[4,"FunctionRetTy"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"TraitItem"],[4,"ImplItem"],[3,"Method"],[4,"ImplOrTraitItem"],[3,"Ty"],[6,"Ty"],[6,"StructField"],[3,"field_ty"],[4,"Visibility"],[3,"StructDef"],[3,"VariantInfo"],[4,"VariantKind"],[3,"Span"],[3,"Path"],[4,"PathParameters"],[3,"PathSegment"],[3,"Ident"],[3,"Name"],[3,"BareFnTy"],[4,"Mutability"],[4,"ImplPolarity"],[6,"PathListItem"],[3,"ForeignMod"],[3,"ForeignItem"],[3,"Stability"],[3,"AssociatedType"],[3,"AssociatedType"],[3,"Typedef"],[3,"TypeBinding"],[4,"Input"],[3,"Svh"],[4,"SawAbiComponent"],[4,"SawExprComponent"],[4,"SawStmtComponent"],[3,"StrictVersionHashVisitor"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"DecodeContext"],[3,"DefId"],[3,"NestedItemsDropper"],[4,"Def"],[3,"FreeRegion"],[4,"CodeExtent"],[3,"DestructionScopeData"],[4,"BoundRegion"],[3,"Decoder"],[3,"Freevar"],[3,"UpvarBorrow"],[4,"UpvarCapture"],[4,"MethodOrigin"],[3,"EncodeContext"],[3,"Encoder"],[3,"SideTableEncodingIdVisitor"],[3,"Doc"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFG"],[3,"ConstQualif"],[4,"Mode"],[3,"CheckCrateVisitor"],[3,"CheckCrateVisitor"],[3,"CheckItemRecursionVisitor"],[4,"Context"],[3,"CheckLoopVisitor"],[3,"Matrix"],[4,"Constructor"],[4,"Usefulness"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[3,"RenamingRecorder"],[3,"MutationChecker"],[3,"AtBindingPatternVisitor"],[3,"RvalueContext"],[3,"RvalueContextDelegate"],[4,"const_val"],[3,"ConstEvalErr"],[4,"ErrKind"],[4,"EntryOrExit"],[3,"DataFlowContext"],[3,"Union"],[3,"Subtract"],[3,"MarkSymbolVisitor"],[3,"LifeSeeder"],[3,"DeadVisitor"],[3,"PathResolution"],[4,"MethodProvenance"],[4,"UnsafeContext"],[3,"EffectCheckVisitor"],[3,"EntryContext"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"TrackMatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"SimplifiedType"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"DepthFirstTraversal"],[3,"IntrinsicCheckingVisitor"],[3,"TransmuteRestriction"],[3,"Bivariate"],[3,"FnSig"],[3,"CombineFields"],[3,"Generalizer"],[3,"Equate"],[3,"InferCtxt"],[3,"Glb"],[3,"Lub"],[4,"Node"],[4,"Edge"],[3,"ConstraintGraph"],[4,"Constraint"],[4,"GenericKind"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[3,"SameRegions"],[3,"RegionSnapshot"],[3,"RegionVarBindings"],[4,"Classification"],[4,"Verify"],[4,"VarValue"],[3,"RegionAndOrigin"],[3,"OpportunisticTypeResolver"],[3,"FullTypeResolver"],[3,"TypeFreshener"],[3,"Sub"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"Delegate"],[4,"VarValue"],[3,"UnificationTable"],[3,"Delegate"],[3,"IntVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"fixup_err"],[4,"Result"],[4,"LangItem"],[3,"LanguageItems"],[3,"LanguageItemCollector"],[3,"Variable"],[3,"LiveNode"],[4,"LiveNodeKind"],[3,"IrMaps"],[3,"LocalInfo"],[4,"VarKind"],[3,"Liveness"],[3,"Users"],[4,"categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[3,"Expr"],[3,"Pat"],[3,"MemCategorizationContext"],[4,"ClosureKind"],[4,"LastPrivate"],[4,"PrivateDep"],[4,"ImportUse"],[3,"ReachableContext"],[3,"BlockRemainder"],[4,"InnermostDeclaringBlock"],[3,"DeclaringStatementContext"],[4,"InnermostEnclosingExpr"],[3,"Context"],[3,"RegionMaps"],[3,"RegionResolutionVisitor"],[4,"DefRegion"],[3,"LifetimeContext"],[4,"ScopeChain"],[3,"Annotator"],[3,"Index"],[3,"Checker"],[4,"RegionSubsts"],[4,"ParamSpace"],[3,"EnumeratedItems"],[3,"SubstFolder"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"MismatchedProjectionTypes"],[4,"ProjectionTyCandidate"],[3,"AssociatedTypeNormalizer"],[3,"Normalized"],[4,"ProjectionTyError"],[4,"MethodViolationCode"],[4,"ObjectSafetyViolation"],[3,"SelectionCache"],[4,"MethodMatchedData"],[4,"SelectionCandidate"],[4,"EvaluationResult"],[3,"SelectionContext"],[3,"TraitObligationStack"],[4,"MethodMatchResult"],[3,"Elaborator"],[3,"FilterToTraits"],[3,"VtableImplData"],[3,"VtableObjectData"],[3,"Obligation"],[4,"Vtable"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[4,"SelectionError"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[3,"field"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItemId"],[3,"mt"],[3,"creader_cache_key"],[3,"ItemVariances"],[4,"Variance"],[4,"AutoAdjustment"],[4,"UnsizeKind"],[3,"AutoDerefRef"],[4,"AutoRef"],[3,"param_index"],[3,"MethodParam"],[3,"MethodObject"],[3,"MethodCallee"],[3,"MethodCall"],[4,"ExprAdjustment"],[4,"vtable_origin"],[3,"CtxtArenas"],[3,"TypeFlags"],[3,"ctxt"],[3,"TyS"],[3,"InternedTy"],[3,"BareFnTy"],[3,"ClosureTy"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"UpvarId"],[4,"BorrowKind"],[4,"sty"],[3,"TyTrait"],[4,"terr_vstore_kind"],[3,"expected_found"],[4,"type_err"],[3,"TyVid"],[3,"RegionVid"],[4,"InferTy"],[4,"UnconstrainedNumeric"],[4,"InferRegion"],[4,"ObjectLifetimeDefault"],[3,"Generics"],[3,"GenericPredicates"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"ItemSubsts"],[3,"TypeContents"],[4,"Representability"],[4,"DtorKind"],[3,"ClosureUpvar"],[4,"ExplicitSelfCategory"],[3,"Box"],[3,"EnumSet"],[3,"BottomUpFolder"],[3,"RegionFolder"],[3,"RegionEraser"],[3,"TypeWalker"],[3,"Context"],[4,"astencode_tag"],[3,"LinkMeta"],[4,"DefIdSource"],[3,"entry"],[3,"EncodeVisitor"],[3,"ImplVisitor"],[4,"Family"],[4,"DefLike"],[3,"CrateDep"],[3,"CrateReader"],[4,"PMDSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"CrateSource"],[3,"CStore"],[4,"MetadataBlob"],[3,"Context"],[3,"ArchiveMetadata"],[3,"FileSearch"],[3,"MacroLoader"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[3,"Options"],[4,"UnstableFeatures"],[4,"PrintRequest"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"Registry"],[3,"RegistrarFinder"],[3,"Lint"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"Context"],[3,"GatherNodeLevels"],[3,"ErrorReported"],[3,"Indenter"],[3,"LoopQueryVisitor"],[3,"BlockQueryVisitor"],[3,"TraitDef"],[3,"Item"],[3,"Spanned"],[4,"Abi"],[4,"IntTy"],[4,"UintTy"],[3,"HashMap"],[3,"FnvHasher"],[3,"SnapshotVec"],[3,"FixedBuffer64"],[3,"Sha256"],[3,"ArchiveRO"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"CallConv"],[4,"DiagnosticSeverity"],[3,"Attribute"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[3,"AttrBuilder"],[4,"TypeKind"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[3,"DocContext"],[3,"CrateAnalysis"],[4,"MaybeTyped"],[3,"Module"],[3,"Struct"],[3,"Enum"],[3,"Variant"],[3,"Function"],[3,"Typedef"],[3,"Static"],[3,"Constant"],[3,"Trait"],[3,"Impl"],[3,"DefaultImpl"],[3,"Macro"],[3,"ExternCrate"],[3,"Import"],[4,"StructType"],[4,"TypeBound"],[8,"DocFolder"],[3,"Escape"],[4,"ItemType"],[3,"VisSpace"],[3,"UnsafetySpace"],[3,"CommaSep"],[3,"TyParamBounds"],[3,"WhereClause"],[3,"Method"],[3,"MutableSpace"],[3,"RawMutableSpace"],[3,"Stability"],[3,"ConciseStability"],[3,"Layout"],[3,"Page"],[3,"Markdown"],[3,"MarkdownWithToc"],[3,"Context"],[3,"Implementor"],[3,"Impl"],[3,"Cache"],[4,"ExternalLocation"],[3,"Toc"],[3,"TocEntry"],[3,"TocBuilder"],[3,"PluginManager"],[3,"Counts"],[3,"ModuleSummary"],[3,"RustdocVisitor"],[3,"Collector"]]};
searchIndex['rustc_llvm'] = {"items":[[0,"","rustc_llvm",""],[3,"Attribute","",""],[3,"AttrBuilder","",""],[3,"TargetData","",""],[12,"lltd","","",0],[3,"ObjectFile","",""],[12,"llof","","",1],[3,"SectionIter","",""],[12,"llsi","","",2],[4,"CallConv","",""],[13,"CCallConv","","",3],[13,"FastCallConv","","",3],[13,"ColdCallConv","","",3],[13,"X86StdcallCallConv","","",3],[13,"X86FastcallCallConv","","",3],[13,"X86_64_Win64","","",3],[4,"Visibility","",""],[13,"LLVMDefaultVisibility","","",4],[13,"HiddenVisibility","","",4],[13,"ProtectedVisibility","","",4],[4,"Linkage","",""],[13,"ExternalLinkage","","",5],[13,"AvailableExternallyLinkage","","",5],[13,"LinkOnceAnyLinkage","","",5],[13,"LinkOnceODRLinkage","","",5],[13,"WeakAnyLinkage","","",5],[13,"WeakODRLinkage","","",5],[13,"AppendingLinkage","","",5],[13,"InternalLinkage","","",5],[13,"PrivateLinkage","","",5],[13,"ExternalWeakLinkage","","",5],[13,"CommonLinkage","","",5],[4,"DiagnosticSeverity","",""],[13,"Error","","",6],[13,"Warning","","",6],[13,"Remark","","",6],[13,"Note","","",6],[4,"OtherAttribute","",""],[13,"SanitizeAddressAttribute","","",7],[13,"MinSizeAttribute","","",7],[13,"NoDuplicateAttribute","","",7],[13,"StackProtectStrongAttribute","","",7],[13,"SanitizeThreadAttribute","","",7],[13,"SanitizeMemoryAttribute","","",7],[13,"NoBuiltinAttribute","","",7],[13,"ReturnedAttribute","","",7],[13,"ColdAttribute","","",7],[13,"BuiltinAttribute","","",7],[13,"OptimizeNoneAttribute","","",7],[13,"InAllocaAttribute","","",7],[13,"NonNullAttribute","","",7],[4,"SpecialAttribute","",""],[13,"DereferenceableAttribute","","",8],[4,"AttributeSet","",""],[13,"ReturnIndex","","",9],[13,"FunctionIndex","","",9],[4,"IntPredicate","",""],[13,"IntEQ","","",10],[13,"IntNE","","",10],[13,"IntUGT","","",10],[13,"IntUGE","","",10],[13,"IntULT","","",10],[13,"IntULE","","",10],[13,"IntSGT","","",10],[13,"IntSGE","","",10],[13,"IntSLT","","",10],[13,"IntSLE","","",10],[4,"RealPredicate","",""],[13,"RealPredicateFalse","","",11],[13,"RealOEQ","","",11],[13,"RealOGT","","",11],[13,"RealOGE","","",11],[13,"RealOLT","","",11],[13,"RealOLE","","",11],[13,"RealONE","","",11],[13,"RealORD","","",11],[13,"RealUNO","","",11],[13,"RealUEQ","","",11],[13,"RealUGT","","",11],[13,"RealUGE","","",11],[13,"RealULT","","",11],[13,"RealULE","","",11],[13,"RealUNE","","",11],[13,"RealPredicateTrue","","",11],[4,"TypeKind","",""],[13,"Void","","",12],[13,"Half","","",12],[13,"Float","","",12],[13,"Double","","",12],[13,"X86_FP80","","",12],[13,"FP128","","",12],[13,"PPC_FP128","","",12],[13,"Label","","",12],[13,"Integer","","",12],[13,"Function","","",12],[13,"Struct","","",12],[13,"Array","","",12],[13,"Pointer","","",12],[13,"Vector","","",12],[13,"Metadata","","",12],[13,"X86_MMX","","",12],[4,"AtomicBinOp","",""],[13,"AtomicXchg","","",13],[13,"AtomicAdd","","",13],[13,"AtomicSub","","",13],[13,"AtomicAnd","","",13],[13,"AtomicNand","","",13],[13,"AtomicOr","","",13],[13,"AtomicXor","","",13],[13,"AtomicMax","","",13],[13,"AtomicMin","","",13],[13,"AtomicUMax","","",13],[13,"AtomicUMin","","",13],[4,"AtomicOrdering","",""],[13,"NotAtomic","","",14],[13,"Unordered","","",14],[13,"Monotonic","","",14],[13,"Acquire","","",14],[13,"Release","","",14],[13,"AcquireRelease","","",14],[13,"SequentiallyConsistent","","",14],[4,"FileType","",""],[13,"AssemblyFileType","","",15],[13,"ObjectFileType","","",15],[4,"MetadataType","",""],[13,"MD_dbg","","",16],[13,"MD_tbaa","","",16],[13,"MD_prof","","",16],[13,"MD_fpmath","","",16],[13,"MD_range","","",16],[13,"MD_tbaa_struct","","",16],[13,"MD_invariant_load","","",16],[13,"MD_alias_scope","","",16],[13,"MD_noalias","","",16],[13,"MD_nontemporal","","",16],[13,"MD_mem_parallel_loop_access","","",16],[13,"MD_nonnull","","",16],[4,"AsmDialect","",""],[13,"AD_ATT","","",17],[13,"AD_Intel","","",17],[4,"CodeGenOptLevel","",""],[13,"CodeGenLevelNone","","",18],[13,"CodeGenLevelLess","","",18],[13,"CodeGenLevelDefault","","",18],[13,"CodeGenLevelAggressive","","",18],[4,"RelocMode","",""],[13,"RelocDefault","","",19],[13,"RelocStatic","","",19],[13,"RelocPIC","","",19],[13,"RelocDynamicNoPic","","",19],[4,"CodeGenModel","",""],[13,"CodeModelDefault","","",20],[13,"CodeModelJITDefault","","",20],[13,"CodeModelSmall","","",20],[13,"CodeModelKernel","","",20],[13,"CodeModelMedium","","",20],[13,"CodeModelLarge","","",20],[4,"DiagnosticKind","",""],[13,"DK_InlineAsm","","",21],[13,"DK_StackSize","","",21],[13,"DK_DebugMetadataVersion","","",21],[13,"DK_SampleProfile","","",21],[13,"DK_OptimizationRemark","","",21],[13,"DK_OptimizationRemarkMissed","","",21],[13,"DK_OptimizationRemarkAnalysis","","",21],[13,"DK_OptimizationFailure","","",21],[4,"Module_opaque","",""],[4,"Context_opaque","",""],[4,"Type_opaque","",""],[4,"Value_opaque","",""],[4,"Metadata_opaque","",""],[4,"BasicBlock_opaque","",""],[4,"Builder_opaque","",""],[4,"ExecutionEngine_opaque","",""],[4,"RustJITMemoryManager_opaque","",""],[4,"MemoryBuffer_opaque","",""],[4,"PassManager_opaque","",""],[4,"PassManagerBuilder_opaque","",""],[4,"Use_opaque","",""],[4,"TargetData_opaque","",""],[4,"ObjectFile_opaque","",""],[4,"SectionIterator_opaque","",""],[4,"Pass_opaque","",""],[4,"TargetMachine_opaque","",""],[4,"Archive_opaque","",""],[4,"Twine_opaque","",""],[4,"DiagnosticInfo_opaque","",""],[4,"DebugLoc_opaque","",""],[4,"SMDiagnostic_opaque","",""],[4,"RustString_opaque","",""],[5,"SetInstructionCallConv","",""],[5,"SetFunctionCallConv","",""],[5,"SetLinkage","",""],[5,"SetUnnamedAddr","",""],[5,"set_thread_local","",""],[5,"ConstICmp","",""],[5,"ConstFCmp","",""],[5,"SetFunctionAttribute","",""],[5,"mk_target_data","",""],[5,"mk_section_iter","",""],[5,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun."],[5,"rust_llvm_string_write_impl","","Appending to a Rust string -- used by raw_rust_string_ostream."],[5,"build_string","",""],[5,"twine_to_string","",""],[5,"debug_loc_to_string","",""],[5,"LLVMContextCreate","",""],[5,"LLVMContextDispose","",""],[5,"LLVMGetMDKindIDInContext","",""],[5,"LLVMModuleCreateWithNameInContext","",""],[5,"LLVMGetModuleContext","",""],[5,"LLVMDisposeModule","",""],[5,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout."],[5,"LLVMSetDataLayout","",""],[5,"LLVMGetTarget","","Target triple. See Module::getTargetTriple."],[5,"LLVMSetTarget","",""],[5,"LLVMDumpModule","","See Module::dump."],[5,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm."],[5,"LLVMGetTypeKind","","See llvm::LLVMTypeKind::getTypeID."],[5,"LLVMGetTypeContext","","See llvm::LLVMType::getContext."],[5,"LLVMInt1TypeInContext","",""],[5,"LLVMInt8TypeInContext","",""],[5,"LLVMInt16TypeInContext","",""],[5,"LLVMInt32TypeInContext","",""],[5,"LLVMInt64TypeInContext","",""],[5,"LLVMIntTypeInContext","",""],[5,"LLVMGetIntTypeWidth","",""],[5,"LLVMFloatTypeInContext","",""],[5,"LLVMDoubleTypeInContext","",""],[5,"LLVMX86FP80TypeInContext","",""],[5,"LLVMFP128TypeInContext","",""],[5,"LLVMPPCFP128TypeInContext","",""],[5,"LLVMFunctionType","",""],[5,"LLVMIsFunctionVarArg","",""],[5,"LLVMGetReturnType","",""],[5,"LLVMCountParamTypes","",""],[5,"LLVMGetParamTypes","",""],[5,"LLVMStructTypeInContext","",""],[5,"LLVMCountStructElementTypes","",""],[5,"LLVMGetStructElementTypes","",""],[5,"LLVMIsPackedStruct","",""],[5,"LLVMRustArrayType","",""],[5,"LLVMPointerType","",""],[5,"LLVMVectorType","",""],[5,"LLVMGetElementType","",""],[5,"LLVMGetArrayLength","",""],[5,"LLVMGetPointerAddressSpace","",""],[5,"LLVMGetPointerToGlobal","",""],[5,"LLVMGetVectorSize","",""],[5,"LLVMVoidTypeInContext","",""],[5,"LLVMLabelTypeInContext","",""],[5,"LLVMMetadataTypeInContext","",""],[5,"LLVMTypeOf","",""],[5,"LLVMGetValueName","",""],[5,"LLVMSetValueName","",""],[5,"LLVMDumpValue","",""],[5,"LLVMReplaceAllUsesWith","",""],[5,"LLVMHasMetadata","",""],[5,"LLVMGetMetadata","",""],[5,"LLVMSetMetadata","",""],[5,"LLVMGetFirstUse","",""],[5,"LLVMGetNextUse","",""],[5,"LLVMGetUser","",""],[5,"LLVMGetUsedValue","",""],[5,"LLVMGetNumOperands","",""],[5,"LLVMGetOperand","",""],[5,"LLVMSetOperand","",""],[5,"LLVMConstNull","",""],[5,"LLVMConstAllOnes","",""],[5,"LLVMConstICmp","",""],[5,"LLVMConstFCmp","",""],[5,"LLVMGetUndef","",""],[5,"LLVMIsConstant","",""],[5,"LLVMIsNull","",""],[5,"LLVMIsUndef","",""],[5,"LLVMConstPointerNull","",""],[5,"LLVMMDStringInContext","",""],[5,"LLVMMDNodeInContext","",""],[5,"LLVMAddNamedMetadataOperand","",""],[5,"LLVMConstInt","",""],[5,"LLVMConstIntOfString","",""],[5,"LLVMConstIntOfStringAndSize","",""],[5,"LLVMConstReal","",""],[5,"LLVMConstRealOfString","",""],[5,"LLVMConstRealOfStringAndSize","",""],[5,"LLVMConstIntGetZExtValue","",""],[5,"LLVMConstIntGetSExtValue","",""],[5,"LLVMConstStringInContext","",""],[5,"LLVMConstStructInContext","",""],[5,"LLVMConstArray","",""],[5,"LLVMConstVector","",""],[5,"LLVMAlignOf","",""],[5,"LLVMSizeOf","",""],[5,"LLVMConstNeg","",""],[5,"LLVMConstNSWNeg","",""],[5,"LLVMConstNUWNeg","",""],[5,"LLVMConstFNeg","",""],[5,"LLVMConstNot","",""],[5,"LLVMConstAdd","",""],[5,"LLVMConstNSWAdd","",""],[5,"LLVMConstNUWAdd","",""],[5,"LLVMConstFAdd","",""],[5,"LLVMConstSub","",""],[5,"LLVMConstNSWSub","",""],[5,"LLVMConstNUWSub","",""],[5,"LLVMConstFSub","",""],[5,"LLVMConstMul","",""],[5,"LLVMConstNSWMul","",""],[5,"LLVMConstNUWMul","",""],[5,"LLVMConstFMul","",""],[5,"LLVMConstUDiv","",""],[5,"LLVMConstSDiv","",""],[5,"LLVMConstExactSDiv","",""],[5,"LLVMConstFDiv","",""],[5,"LLVMConstURem","",""],[5,"LLVMConstSRem","",""],[5,"LLVMConstFRem","",""],[5,"LLVMConstAnd","",""],[5,"LLVMConstOr","",""],[5,"LLVMConstXor","",""],[5,"LLVMConstShl","",""],[5,"LLVMConstLShr","",""],[5,"LLVMConstAShr","",""],[5,"LLVMConstGEP","",""],[5,"LLVMConstInBoundsGEP","",""],[5,"LLVMConstTrunc","",""],[5,"LLVMConstSExt","",""],[5,"LLVMConstZExt","",""],[5,"LLVMConstFPTrunc","",""],[5,"LLVMConstFPExt","",""],[5,"LLVMConstUIToFP","",""],[5,"LLVMConstSIToFP","",""],[5,"LLVMConstFPToUI","",""],[5,"LLVMConstFPToSI","",""],[5,"LLVMConstPtrToInt","",""],[5,"LLVMConstIntToPtr","",""],[5,"LLVMConstBitCast","",""],[5,"LLVMConstZExtOrBitCast","",""],[5,"LLVMConstSExtOrBitCast","",""],[5,"LLVMConstTruncOrBitCast","",""],[5,"LLVMConstPointerCast","",""],[5,"LLVMConstIntCast","",""],[5,"LLVMConstFPCast","",""],[5,"LLVMConstSelect","",""],[5,"LLVMConstExtractElement","",""],[5,"LLVMConstInsertElement","",""],[5,"LLVMConstShuffleVector","",""],[5,"LLVMConstExtractValue","",""],[5,"LLVMConstInsertValue","",""],[5,"LLVMConstInlineAsm","",""],[5,"LLVMBlockAddress","",""],[5,"LLVMGetGlobalParent","",""],[5,"LLVMIsDeclaration","",""],[5,"LLVMGetLinkage","",""],[5,"LLVMSetLinkage","",""],[5,"LLVMGetSection","",""],[5,"LLVMSetSection","",""],[5,"LLVMGetVisibility","",""],[5,"LLVMSetVisibility","",""],[5,"LLVMGetAlignment","",""],[5,"LLVMSetAlignment","",""],[5,"LLVMIsAGlobalVariable","",""],[5,"LLVMAddGlobal","",""],[5,"LLVMAddGlobalInAddressSpace","",""],[5,"LLVMGetNamedGlobal","",""],[5,"LLVMGetFirstGlobal","",""],[5,"LLVMGetLastGlobal","",""],[5,"LLVMGetNextGlobal","",""],[5,"LLVMGetPreviousGlobal","",""],[5,"LLVMDeleteGlobal","",""],[5,"LLVMGetInitializer","",""],[5,"LLVMSetInitializer","",""],[5,"LLVMIsThreadLocal","",""],[5,"LLVMSetThreadLocal","",""],[5,"LLVMIsGlobalConstant","",""],[5,"LLVMSetGlobalConstant","",""],[5,"LLVMAddAlias","",""],[5,"LLVMAddFunction","",""],[5,"LLVMGetNamedFunction","",""],[5,"LLVMGetFirstFunction","",""],[5,"LLVMGetLastFunction","",""],[5,"LLVMGetNextFunction","",""],[5,"LLVMGetPreviousFunction","",""],[5,"LLVMDeleteFunction","",""],[5,"LLVMGetOrInsertFunction","",""],[5,"LLVMGetIntrinsicID","",""],[5,"LLVMGetFunctionCallConv","",""],[5,"LLVMSetFunctionCallConv","",""],[5,"LLVMGetGC","",""],[5,"LLVMSetGC","",""],[5,"LLVMAddDereferenceableAttr","",""],[5,"LLVMAddFunctionAttribute","",""],[5,"LLVMAddFunctionAttrString","",""],[5,"LLVMRemoveFunctionAttrString","",""],[5,"LLVMGetFunctionAttr","",""],[5,"LLVMCountParams","",""],[5,"LLVMGetParams","",""],[5,"LLVMGetParam","",""],[5,"LLVMGetParamParent","",""],[5,"LLVMGetFirstParam","",""],[5,"LLVMGetLastParam","",""],[5,"LLVMGetNextParam","",""],[5,"LLVMGetPreviousParam","",""],[5,"LLVMAddAttribute","",""],[5,"LLVMRemoveAttribute","",""],[5,"LLVMGetAttribute","",""],[5,"LLVMSetParamAlignment","",""],[5,"LLVMBasicBlockAsValue","",""],[5,"LLVMValueIsBasicBlock","",""],[5,"LLVMValueAsBasicBlock","",""],[5,"LLVMGetBasicBlockParent","",""],[5,"LLVMCountBasicBlocks","",""],[5,"LLVMGetBasicBlocks","",""],[5,"LLVMGetFirstBasicBlock","",""],[5,"LLVMGetLastBasicBlock","",""],[5,"LLVMGetNextBasicBlock","",""],[5,"LLVMGetPreviousBasicBlock","",""],[5,"LLVMGetEntryBasicBlock","",""],[5,"LLVMAppendBasicBlockInContext","",""],[5,"LLVMInsertBasicBlockInContext","",""],[5,"LLVMDeleteBasicBlock","",""],[5,"LLVMMoveBasicBlockAfter","",""],[5,"LLVMMoveBasicBlockBefore","",""],[5,"LLVMGetInstructionParent","",""],[5,"LLVMGetFirstInstruction","",""],[5,"LLVMGetLastInstruction","",""],[5,"LLVMGetNextInstruction","",""],[5,"LLVMGetPreviousInstruction","",""],[5,"LLVMInstructionEraseFromParent","",""],[5,"LLVMSetInstructionCallConv","",""],[5,"LLVMGetInstructionCallConv","",""],[5,"LLVMAddInstrAttribute","",""],[5,"LLVMRemoveInstrAttribute","",""],[5,"LLVMSetInstrParamAlignment","",""],[5,"LLVMAddCallSiteAttribute","",""],[5,"LLVMAddDereferenceableCallSiteAttr","",""],[5,"LLVMIsTailCall","",""],[5,"LLVMSetTailCall","",""],[5,"LLVMGetVolatile","",""],[5,"LLVMSetVolatile","",""],[5,"LLVMAddIncoming","",""],[5,"LLVMCountIncoming","",""],[5,"LLVMGetIncomingValue","",""],[5,"LLVMGetIncomingBlock","",""],[5,"LLVMCreateBuilderInContext","",""],[5,"LLVMPositionBuilder","",""],[5,"LLVMPositionBuilderBefore","",""],[5,"LLVMPositionBuilderAtEnd","",""],[5,"LLVMGetInsertBlock","",""],[5,"LLVMClearInsertionPosition","",""],[5,"LLVMInsertIntoBuilder","",""],[5,"LLVMInsertIntoBuilderWithName","",""],[5,"LLVMDisposeBuilder","",""],[5,"LLVMRustCreateJITMemoryManager","",""],[5,"LLVMBuildExecutionEngine","",""],[5,"LLVMDisposeExecutionEngine","",""],[5,"LLVMExecutionEngineFinalizeObject","",""],[5,"LLVMRustLoadDynamicLibrary","",""],[5,"LLVMExecutionEngineAddModule","",""],[5,"LLVMExecutionEngineRemoveModule","",""],[5,"LLVMSetCurrentDebugLocation","",""],[5,"LLVMGetCurrentDebugLocation","",""],[5,"LLVMSetInstDebugLocation","",""],[5,"LLVMBuildRetVoid","",""],[5,"LLVMBuildRet","",""],[5,"LLVMBuildAggregateRet","",""],[5,"LLVMBuildBr","",""],[5,"LLVMBuildCondBr","",""],[5,"LLVMBuildSwitch","",""],[5,"LLVMBuildIndirectBr","",""],[5,"LLVMBuildInvoke","",""],[5,"LLVMBuildLandingPad","",""],[5,"LLVMBuildResume","",""],[5,"LLVMBuildUnreachable","",""],[5,"LLVMAddCase","",""],[5,"LLVMAddDestination","",""],[5,"LLVMAddClause","",""],[5,"LLVMSetCleanup","",""],[5,"LLVMBuildAdd","",""],[5,"LLVMBuildNSWAdd","",""],[5,"LLVMBuildNUWAdd","",""],[5,"LLVMBuildFAdd","",""],[5,"LLVMBuildSub","",""],[5,"LLVMBuildNSWSub","",""],[5,"LLVMBuildNUWSub","",""],[5,"LLVMBuildFSub","",""],[5,"LLVMBuildMul","",""],[5,"LLVMBuildNSWMul","",""],[5,"LLVMBuildNUWMul","",""],[5,"LLVMBuildFMul","",""],[5,"LLVMBuildUDiv","",""],[5,"LLVMBuildSDiv","",""],[5,"LLVMBuildExactSDiv","",""],[5,"LLVMBuildFDiv","",""],[5,"LLVMBuildURem","",""],[5,"LLVMBuildSRem","",""],[5,"LLVMBuildFRem","",""],[5,"LLVMBuildShl","",""],[5,"LLVMBuildLShr","",""],[5,"LLVMBuildAShr","",""],[5,"LLVMBuildAnd","",""],[5,"LLVMBuildOr","",""],[5,"LLVMBuildXor","",""],[5,"LLVMBuildBinOp","",""],[5,"LLVMBuildNeg","",""],[5,"LLVMBuildNSWNeg","",""],[5,"LLVMBuildNUWNeg","",""],[5,"LLVMBuildFNeg","",""],[5,"LLVMBuildNot","",""],[5,"LLVMBuildMalloc","",""],[5,"LLVMBuildArrayMalloc","",""],[5,"LLVMBuildAlloca","",""],[5,"LLVMBuildArrayAlloca","",""],[5,"LLVMBuildFree","",""],[5,"LLVMBuildLoad","",""],[5,"LLVMBuildStore","",""],[5,"LLVMBuildGEP","",""],[5,"LLVMBuildInBoundsGEP","",""],[5,"LLVMBuildStructGEP","",""],[5,"LLVMBuildGlobalString","",""],[5,"LLVMBuildGlobalStringPtr","",""],[5,"LLVMBuildTrunc","",""],[5,"LLVMBuildZExt","",""],[5,"LLVMBuildSExt","",""],[5,"LLVMBuildFPToUI","",""],[5,"LLVMBuildFPToSI","",""],[5,"LLVMBuildUIToFP","",""],[5,"LLVMBuildSIToFP","",""],[5,"LLVMBuildFPTrunc","",""],[5,"LLVMBuildFPExt","",""],[5,"LLVMBuildPtrToInt","",""],[5,"LLVMBuildIntToPtr","",""],[5,"LLVMBuildBitCast","",""],[5,"LLVMBuildZExtOrBitCast","",""],[5,"LLVMBuildSExtOrBitCast","",""],[5,"LLVMBuildTruncOrBitCast","",""],[5,"LLVMBuildCast","",""],[5,"LLVMBuildPointerCast","",""],[5,"LLVMBuildIntCast","",""],[5,"LLVMBuildFPCast","",""],[5,"LLVMBuildICmp","",""],[5,"LLVMBuildFCmp","",""],[5,"LLVMBuildPhi","",""],[5,"LLVMBuildCall","",""],[5,"LLVMBuildSelect","",""],[5,"LLVMBuildVAArg","",""],[5,"LLVMBuildExtractElement","",""],[5,"LLVMBuildInsertElement","",""],[5,"LLVMBuildShuffleVector","",""],[5,"LLVMBuildExtractValue","",""],[5,"LLVMBuildInsertValue","",""],[5,"LLVMBuildIsNull","",""],[5,"LLVMBuildIsNotNull","",""],[5,"LLVMBuildPtrDiff","",""],[5,"LLVMBuildAtomicLoad","",""],[5,"LLVMBuildAtomicStore","",""],[5,"LLVMBuildAtomicCmpXchg","",""],[5,"LLVMBuildAtomicRMW","",""],[5,"LLVMBuildAtomicFence","",""],[5,"LLVMIsATerminatorInst","",""],[5,"LLVMIsAStoreInst","",""],[5,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success."],[5,"LLVMCreateTargetData","","Creates target data from a target layout string."],[5,"LLVMAddTargetData","","Adds the target data to the given pass manager. The pass manager\nreferences the target data only weakly."],[5,"LLVMStoreSizeOfType","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMABISizeOfType","","Distance between successive elements in an array of T. Includes ABI padding."],[5,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type."],[5,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type."],[5,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a\ntarget."],[5,"LLVMCallFrameAlignmentOfType","","Returns the minimum alignment of a type when part of a call frame."],[5,"LLVMDisposeTargetData","","Disposes target data."],[5,"LLVMCreatePassManager","","Creates a pass manager."],[5,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager"],[5,"LLVMDisposePassManager","","Disposes a pass manager."],[5,"LLVMRunPassManager","","Runs a pass manager on a module."],[5,"LLVMRunFunctionPassManager","","Runs the function passes on the provided function."],[5,"LLVMInitializeFunctionPassManager","","Initializes all the function passes scheduled in the manager"],[5,"LLVMFinalizeFunctionPassManager","","Finalizes all the function passes scheduled in the manager"],[5,"LLVMInitializePasses","",""],[5,"LLVMAddVerifierPass","","Adds a verification pass."],[5,"LLVMAddGlobalOptimizerPass","",""],[5,"LLVMAddIPSCCPPass","",""],[5,"LLVMAddDeadArgEliminationPass","",""],[5,"LLVMAddInstructionCombiningPass","",""],[5,"LLVMAddCFGSimplificationPass","",""],[5,"LLVMAddFunctionInliningPass","",""],[5,"LLVMAddFunctionAttrsPass","",""],[5,"LLVMAddScalarReplAggregatesPass","",""],[5,"LLVMAddScalarReplAggregatesPassSSA","",""],[5,"LLVMAddJumpThreadingPass","",""],[5,"LLVMAddConstantPropagationPass","",""],[5,"LLVMAddReassociatePass","",""],[5,"LLVMAddLoopRotatePass","",""],[5,"LLVMAddLICMPass","",""],[5,"LLVMAddLoopUnswitchPass","",""],[5,"LLVMAddLoopDeletionPass","",""],[5,"LLVMAddLoopUnrollPass","",""],[5,"LLVMAddGVNPass","",""],[5,"LLVMAddMemCpyOptPass","",""],[5,"LLVMAddSCCPPass","",""],[5,"LLVMAddDeadStoreEliminationPass","",""],[5,"LLVMAddStripDeadPrototypesPass","",""],[5,"LLVMAddConstantMergePass","",""],[5,"LLVMAddArgumentPromotionPass","",""],[5,"LLVMAddTailCallEliminationPass","",""],[5,"LLVMAddIndVarSimplifyPass","",""],[5,"LLVMAddAggressiveDCEPass","",""],[5,"LLVMAddGlobalDCEPass","",""],[5,"LLVMAddCorrelatedValuePropagationPass","",""],[5,"LLVMAddPruneEHPass","",""],[5,"LLVMAddSimplifyLibCallsPass","",""],[5,"LLVMAddLoopIdiomPass","",""],[5,"LLVMAddEarlyCSEPass","",""],[5,"LLVMAddTypeBasedAliasAnalysisPass","",""],[5,"LLVMAddBasicAliasAnalysisPass","",""],[5,"LLVMPassManagerBuilderCreate","",""],[5,"LLVMPassManagerBuilderDispose","",""],[5,"LLVMPassManagerBuilderSetOptLevel","",""],[5,"LLVMPassManagerBuilderSetSizeLevel","",""],[5,"LLVMPassManagerBuilderSetDisableUnitAtATime","",""],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","",""],[5,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls","",""],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","",""],[5,"LLVMPassManagerBuilderPopulateModulePassManager","",""],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","",""],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","",""],[5,"LLVMDisposeMemoryBuffer","","Destroys a memory buffer."],[5,"LLVMCreateObjectFile","","Opens an object file."],[5,"LLVMDisposeObjectFile","","Closes an object file."],[5,"LLVMGetSections","","Enumerates the sections in an object file."],[5,"LLVMDisposeSectionIterator","","Destroys a section iterator."],[5,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section\nlist:"],[5,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section."],[5,"LLVMGetSectionSize","","Returns the current section size."],[5,"LLVMGetSectionContents","","Returns the current section contents as a string buffer."],[5,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use\nLLVMDisposeMemoryBuffer() to get rid of it."],[5,"LLVMCreateMemoryBufferWithMemoryRange","","Borrows the contents of the memory buffer (doesn't copy it)"],[5,"LLVMCreateMemoryBufferWithMemoryRangeCopy","",""],[5,"LLVMIsMultithreaded","",""],[5,"LLVMStartMultithreaded","",""],[5,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust* call."],[5,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren't picking them up."],[5,"LLVMStructCreateNamed","",""],[5,"LLVMStructSetBody","",""],[5,"LLVMConstNamedStruct","",""],[5,"LLVMSetDebug","","Enables LLVM debug output."],[5,"LLVMInlineAsm","","Prepares inline assembly."],[7,"LLVMRustDebugMetadataVersion","",""],[5,"LLVMRustAddModuleFlag","",""],[5,"LLVMDIBuilderCreate","",""],[5,"LLVMDIBuilderDispose","",""],[5,"LLVMDIBuilderFinalize","",""],[5,"LLVMDIBuilderCreateCompileUnit","",""],[5,"LLVMDIBuilderCreateFile","",""],[5,"LLVMDIBuilderCreateSubroutineType","",""],[5,"LLVMDIBuilderCreateFunction","",""],[5,"LLVMDIBuilderCreateBasicType","",""],[5,"LLVMDIBuilderCreatePointerType","",""],[5,"LLVMDIBuilderCreateStructType","",""],[5,"LLVMDIBuilderCreateMemberType","",""],[5,"LLVMDIBuilderCreateLexicalBlock","",""],[5,"LLVMDIBuilderCreateStaticVariable","",""],[5,"LLVMDIBuilderCreateVariable","",""],[5,"LLVMDIBuilderCreateArrayType","",""],[5,"LLVMDIBuilderCreateVectorType","",""],[5,"LLVMDIBuilderGetOrCreateSubrange","",""],[5,"LLVMDIBuilderGetOrCreateArray","",""],[5,"LLVMDIBuilderInsertDeclareAtEnd","",""],[5,"LLVMDIBuilderInsertDeclareBefore","",""],[5,"LLVMDIBuilderCreateEnumerator","",""],[5,"LLVMDIBuilderCreateEnumerationType","",""],[5,"LLVMDIBuilderCreateUnionType","",""],[5,"LLVMSetUnnamedAddr","",""],[5,"LLVMDIBuilderCreateTemplateTypeParameter","",""],[5,"LLVMDIBuilderCreateOpDeref","",""],[5,"LLVMDIBuilderCreateOpPlus","",""],[5,"LLVMDIBuilderCreateNameSpace","",""],[5,"LLVMDIBuilderCreateDebugLocation","",""],[5,"LLVMDICompositeTypeSetTypeArray","",""],[5,"LLVMWriteTypeToString","",""],[5,"LLVMWriteValueToString","",""],[5,"LLVMIsAArgument","",""],[5,"LLVMIsAAllocaInst","",""],[5,"LLVMInitializeX86TargetInfo","",""],[5,"LLVMInitializeX86Target","",""],[5,"LLVMInitializeX86TargetMC","",""],[5,"LLVMInitializeX86AsmPrinter","",""],[5,"LLVMInitializeX86AsmParser","",""],[5,"LLVMInitializeARMTargetInfo","",""],[5,"LLVMInitializeARMTarget","",""],[5,"LLVMInitializeARMTargetMC","",""],[5,"LLVMInitializeARMAsmPrinter","",""],[5,"LLVMInitializeARMAsmParser","",""],[5,"LLVMInitializeAArch64TargetInfo","",""],[5,"LLVMInitializeAArch64Target","",""],[5,"LLVMInitializeAArch64TargetMC","",""],[5,"LLVMInitializeAArch64AsmPrinter","",""],[5,"LLVMInitializeAArch64AsmParser","",""],[5,"LLVMInitializeMipsTargetInfo","",""],[5,"LLVMInitializeMipsTarget","",""],[5,"LLVMInitializeMipsTargetMC","",""],[5,"LLVMInitializeMipsAsmPrinter","",""],[5,"LLVMInitializeMipsAsmParser","",""],[5,"LLVMInitializePowerPCTargetInfo","",""],[5,"LLVMInitializePowerPCTarget","",""],[5,"LLVMInitializePowerPCTargetMC","",""],[5,"LLVMInitializePowerPCAsmPrinter","",""],[5,"LLVMInitializePowerPCAsmParser","",""],[5,"LLVMRustAddPass","",""],[5,"LLVMRustCreateTargetMachine","",""],[5,"LLVMRustDisposeTargetMachine","",""],[5,"LLVMRustAddAnalysisPasses","",""],[5,"LLVMRustAddBuilderLibraryInfo","",""],[5,"LLVMRustAddLibraryInfo","",""],[5,"LLVMRustRunFunctionPassManager","",""],[5,"LLVMRustWriteOutputFile","",""],[5,"LLVMRustPrintModule","",""],[5,"LLVMRustSetLLVMOptions","",""],[5,"LLVMRustPrintPasses","",""],[5,"LLVMRustSetNormalizedTarget","",""],[5,"LLVMRustAddAlwaysInlinePass","",""],[5,"LLVMRustLinkInExternalBitcode","",""],[5,"LLVMRustRunRestrictionPass","",""],[5,"LLVMRustMarkAllFunctionsNounwind","",""],[5,"LLVMRustOpenArchive","",""],[5,"LLVMRustArchiveReadSection","",""],[5,"LLVMRustDestroyArchive","",""],[5,"LLVMRustSetDLLExportStorageClass","",""],[5,"LLVMVersionMajor","",""],[5,"LLVMVersionMinor","",""],[5,"LLVMRustGetSectionName","",""],[5,"LLVMWriteTwineToString","",""],[5,"LLVMContextSetDiagnosticHandler","",""],[5,"LLVMUnpackOptimizationDiagnostic","",""],[5,"LLVMUnpackInlineAsmDiagnostic","",""],[5,"LLVMWriteDiagnosticInfoToString","",""],[5,"LLVMGetDiagInfoSeverity","",""],[5,"LLVMGetDiagInfoKind","",""],[5,"LLVMWriteDebugLocToString","",""],[5,"LLVMSetInlineAsmDiagnosticHandler","",""],[5,"LLVMWriteSMDiagnosticToString","",""],[0,"archive_ro","","A wrapper around LLVM's archive (.a) code"],[3,"ArchiveRO","rustc_llvm::archive_ro",""],[11,"open","","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",22],[11,"read","","Reads a file in the archive",22],[11,"drop","","",22],[0,"diagnostic","rustc_llvm","LLVM diagnostic reports."],[3,"OptimizationDiagnostic","rustc_llvm::diagnostic",""],[12,"kind","","",23],[12,"pass_name","","",23],[12,"function","","",23],[12,"debug_loc","","",23],[12,"message","","",23],[3,"InlineAsmDiagnostic","",""],[12,"cookie","","",24],[12,"message","","",24],[12,"instruction","","",24],[4,"OptimizationDiagnosticKind","",""],[13,"OptimizationRemark","","",25],[13,"OptimizationMissed","","",25],[13,"OptimizationAnalysis","","",25],[13,"OptimizationFailure","","",25],[4,"Diagnostic","",""],[13,"Optimization","","",26],[13,"InlineAsm","","",26],[13,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",26],[11,"describe","","",25],[11,"unpack","","",26],[0,"debuginfo","rustc_llvm",""],[4,"DIBuilder_opaque","rustc_llvm::debuginfo",""],[4,"DIDescriptorFlags","",""],[13,"FlagPrivate","","",27],[13,"FlagProtected","","",27],[13,"FlagFwdDecl","","",27],[13,"FlagAppleBlock","","",27],[13,"FlagBlockByrefStruct","","",27],[13,"FlagVirtual","","",27],[13,"FlagArtificial","","",27],[13,"FlagExplicit","","",27],[13,"FlagPrototyped","","",27],[13,"FlagObjcClassComplete","","",27],[13,"FlagObjectPointer","","",27],[13,"FlagVector","","",27],[13,"FlagStaticMember","","",27],[13,"FlagIndirectVariable","","",27],[13,"FlagLValueReference","","",27],[13,"FlagRValueReference","","",27],[6,"DIBuilderRef","",""],[6,"DIDescriptor","",""],[6,"DIScope","",""],[6,"DILocation","",""],[6,"DIFile","",""],[6,"DILexicalBlock","",""],[6,"DISubprogram","",""],[6,"DINameSpace","",""],[6,"DIType","",""],[6,"DIBasicType","",""],[6,"DIDerivedType","",""],[6,"DICompositeType","",""],[6,"DIVariable","",""],[6,"DIGlobalVariable","",""],[6,"DIArray","",""],[6,"DISubrange","",""],[6,"DIEnumerator","",""],[6,"DITemplateTypeParameter","",""],[6,"Opcode","rustc_llvm",""],[6,"Bool","",""],[6,"ModuleRef","",""],[6,"ContextRef","",""],[6,"TypeRef","",""],[6,"ValueRef","",""],[6,"MetadataRef","",""],[6,"BasicBlockRef","",""],[6,"BuilderRef","",""],[6,"ExecutionEngineRef","",""],[6,"RustJITMemoryManagerRef","",""],[6,"MemoryBufferRef","",""],[6,"PassManagerRef","",""],[6,"PassManagerBuilderRef","",""],[6,"UseRef","",""],[6,"TargetDataRef","",""],[6,"ObjectFileRef","",""],[6,"SectionIteratorRef","",""],[6,"PassRef","",""],[6,"TargetMachineRef","",""],[6,"ArchiveRef","",""],[6,"TwineRef","",""],[6,"DiagnosticInfoRef","",""],[6,"DebugLocRef","",""],[6,"SMDiagnosticRef","",""],[6,"DiagnosticHandler","",""],[6,"InlineAsmDiagHandler","",""],[6,"RustStringRef","",""],[17,"True","",""],[17,"False","",""],[17,"ZExtAttribute","",""],[17,"SExtAttribute","",""],[17,"NoReturnAttribute","",""],[17,"InRegAttribute","",""],[17,"StructRetAttribute","",""],[17,"NoUnwindAttribute","",""],[17,"NoAliasAttribute","",""],[17,"ByValAttribute","",""],[17,"NestAttribute","",""],[17,"ReadNoneAttribute","",""],[17,"ReadOnlyAttribute","",""],[17,"NoInlineAttribute","",""],[17,"AlwaysInlineAttribute","",""],[17,"OptimizeForSizeAttribute","",""],[17,"StackProtectAttribute","",""],[17,"StackProtectReqAttribute","",""],[17,"AlignmentAttribute","",""],[17,"NoCaptureAttribute","",""],[17,"NoRedZoneAttribute","",""],[17,"NoImplicitFloatAttribute","",""],[17,"NakedAttribute","",""],[17,"InlineHintAttribute","",""],[17,"StackAttribute","",""],[17,"ReturnsTwiceAttribute","",""],[17,"UWTableAttribute","",""],[17,"NonLazyBindAttribute","",""],[8,"AttrHelper","",""],[10,"apply_llfn","","",28],[10,"apply_callsite","","",28],[11,"eq","","",3],[11,"ne","","",3],[11,"fmt","","",6],[11,"hash","","",29],[11,"cmp","","",29],[11,"partial_cmp","","",29],[11,"lt","","",29],[11,"le","","",29],[11,"gt","","",29],[11,"ge","","",29],[11,"clone","","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"empty","","Returns an empty set of flags.",29],[11,"all","","Returns the set containing all flags.",29],[11,"bits","","Returns the raw value of the flags currently stored.",29],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",29],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",29],[11,"is_empty","","Returns `true` if no flags are currently stored.",29],[11,"is_all","","Returns `true` if all flags are currently set.",29],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29],[11,"insert","","Inserts the specified flags in-place.",29],[11,"remove","","Removes the specified flags in-place.",29],[11,"toggle","","Toggles the specified flags in-place.",29],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",29],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",29],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",29],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",29],[11,"apply_llfn","","",29],[11,"apply_callsite","","",29],[11,"apply_llfn","","",7],[11,"apply_callsite","","",7],[11,"apply_llfn","","",8],[11,"apply_callsite","","",8],[11,"new","","",30],[11,"arg","","",30],[11,"ret","","",30],[11,"apply_llfn","","",30],[11,"apply_callsite","","",30],[11,"fmt","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"clone","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"eq","","",19],[11,"ne","","",19],[11,"drop","","",0],[11,"new","","",1],[11,"drop","","",1],[11,"drop","","",2]],"paths":[[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[4,"CallConv"],[4,"Visibility"],[4,"Linkage"],[4,"DiagnosticSeverity"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[4,"AttributeSet"],[4,"IntPredicate"],[4,"RealPredicate"],[4,"TypeKind"],[4,"AtomicBinOp"],[4,"AtomicOrdering"],[4,"FileType"],[4,"MetadataType"],[4,"AsmDialect"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[4,"CodeGenModel"],[4,"DiagnosticKind"],[3,"ArchiveRO"],[3,"OptimizationDiagnostic"],[3,"InlineAsmDiagnostic"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"DIDescriptorFlags"],[8,"AttrHelper"],[3,"Attribute"],[3,"AttrBuilder"]]};
searchIndex['rustc_back'] = {"items":[[0,"","rustc_back","Some stuff used by rustc that doesn't have many dependencies"],[0,"abi","",""],[17,"BOX_FIELD_DROP_GLUE","rustc_back::abi",""],[17,"BOX_FIELD_BODY","",""],[17,"FAT_PTR_ADDR","","The first half of a fat pointer.\n- For a closure, this is the code address.\n- For an object or trait instance, this is the address of the box.\n- For a slice, this is the base address."],[17,"FAT_PTR_EXTRA","","The second half of a fat pointer.\n- For a closure, this is the address of the environment.\n- For an object or trait instance, this is the address of the vtable.\n- For a slice, this is the length."],[0,"archive","rustc_back","A helper class for dealing with static archives"],[3,"ArchiveConfig","rustc_back::archive",""],[12,"handler","","",0],[12,"dst","","",0],[12,"lib_search_paths","","",0],[12,"slib_prefix","","",0],[12,"slib_suffix","","",0],[12,"maybe_ar_prog","","",0],[3,"Archive","",""],[3,"ArchiveBuilder","","Helper for adding many files to an archive with a single invocation of\n`ar`."],[5,"find_library","",""],[17,"METADATA_FILENAME","",""],[11,"open","","Opens an existing static archive",1],[11,"remove_file","","Removes a file from this archive",1],[11,"files","","Lists all files in an archive",1],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",1],[11,"create","","Create a new static archive, ready for adding files.",2],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",2],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",2],[11,"add_file","","Adds an arbitrary file to this archive",2],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",2],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",2],[0,"tempdir","rustc_back",""],[3,"TempDir","rustc_back::tempdir","A wrapper for a path to temporary directory implementing automatic\nscope-based deletion."],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",3],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",3],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",3],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",3],[11,"close","","Close and remove the temporary directory",3],[11,"drop","","",3],[0,"arm","rustc_back",""],[5,"get_target_strs","rustc_back::arm",""],[0,"fs","rustc_back",""],[5,"realpath","rustc_back::fs","Returns an absolute path in the filesystem that `path` points to. The\nreturned path does not contain any symlinks in its hierarchy."],[0,"mips","rustc_back",""],[5,"get_target_strs","rustc_back::mips",""],[0,"mipsel","rustc_back",""],[5,"get_target_strs","rustc_back::mipsel",""],[0,"rpath","rustc_back",""],[3,"RPathConfig","rustc_back::rpath",""],[12,"used_crates","","",4],[12,"out_filename","","",4],[12,"is_like_osx","","",4],[12,"has_rpath","","",4],[12,"get_install_prefix_lib_path","","",4],[12,"realpath","","",4],[5,"get_rpath_flags","",""],[0,"sha2","rustc_back","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant."],[3,"Sha256","rustc_back::sha2","The SHA-256 hash algorithm"],[8,"Digest","","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions."],[10,"input","","Provide message data.",5],[10,"result","","Retrieve the digest result. This method may be called multiple times.",5],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",5],[10,"output_bits","","Get the output size in bits.",5],[11,"input_str","","Convenience function that feeds a string into a digest.",5],[11,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",5],[11,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",5],[11,"new","","Construct a new instance of a SHA-256 digest.",6],[11,"input","","",6],[11,"result","","",6],[11,"reset","","",6],[11,"output_bits","","",6],[0,"svh","rustc_back","Calculation and management of a Strict Version Hash for crates"],[3,"Svh","rustc_back::svh",""],[11,"fmt","","",7],[11,"eq","","",7],[11,"ne","","",7],[11,"clone","","",7],[11,"new","","",7],[11,"as_str","","",7],[11,"calculate","","",7],[11,"fmt","","",7],[0,"target_strs","rustc_back",""],[3,"t","rustc_back::target_strs",""],[12,"module_asm","","",8],[12,"data_layout","","",8],[12,"target_triple","","",8],[12,"cc_args","","",8],[0,"x86","rustc_back",""],[5,"get_target_strs","rustc_back::x86",""],[0,"x86_64","rustc_back",""],[5,"get_target_strs","rustc_back::x86_64",""],[0,"target","rustc_back","[Flexible target specification.](https://github.com/rust-lang/rfcs/pull/131)"],[3,"Target","rustc_back::target","Everything `rustc` knows about how to compile for a specific target."],[12,"data_layout","","[Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.",9],[12,"llvm_target","","Target triple to pass to LLVM.",9],[12,"target_endian","","String to use as the `target_endian` `cfg` variable.",9],[12,"target_pointer_width","","String to use as the `target_pointer_width` `cfg` variable.",9],[12,"target_os","","OS name to use for conditional compilation.",9],[12,"arch","","Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\",\n\"aarch64\", \"mips\", and \"powerpc\". \"mips\" includes \"mipsel\".",9],[12,"options","","Optional settings with defaults.",9],[3,"TargetOptions","","Optional aspects of a target specification."],[12,"linker","","Linker to invoke. Defaults to \"cc\".",10],[12,"pre_link_args","","Linker arguments that are unconditionally passed *before* any user-defined libraries.",10],[12,"post_link_args","","Linker arguments that are unconditionally passed *after* any user-defined libraries.",10],[12,"cpu","","Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults to \"default\".",10],[12,"features","","Default target features to pass to LLVM. These features will *always* be passed, and cannot\nbe disabled even via `-C`. Corresponds to `llc -mattr=$features`.",10],[12,"dynamic_linking","","Whether dynamic linking is available on this target. Defaults to false.",10],[12,"executables","","Whether executables are available on this target. iOS, for example, only allows static\nlibraries. Defaults to false.",10],[12,"morestack","","Whether LLVM's segmented stack prelude is supported by whatever runtime is available.\nWill emit stack checks and calls to __morestack. Defaults to false.",10],[12,"relocation_model","","Relocation model to use in object file. Corresponds to `llc\n-relocation-model=$relocation_model`. Defaults to \"pic\".",10],[12,"code_model","","Code model to use. Corresponds to `llc -code-model=$code_model`. Defaults to \"default\".",10],[12,"disable_redzone","","Do not emit code that uses the \"red zone\", if the ABI has one. Defaults to false.",10],[12,"eliminate_frame_pointer","","Eliminate frame pointers from stack frames if possible. Defaults to true.",10],[12,"function_sections","","Emit each function in its own section. Defaults to true.",10],[12,"dll_prefix","","String to prepend to the name of every dynamic library. Defaults to \"lib\".",10],[12,"dll_suffix","","String to append to the name of every dynamic library. Defaults to \".so\".",10],[12,"exe_suffix","","String to append to the name of every executable.",10],[12,"staticlib_prefix","","String to prepend to the name of every static library. Defaults to \"lib\".",10],[12,"staticlib_suffix","","String to append to the name of every static library. Defaults to \".a\".",10],[12,"is_like_osx","","Whether the target toolchain is like OSX's. Only useful for compiling against iOS/OS X, in\nparticular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.",10],[12,"is_like_windows","","Whether the target toolchain is like Windows'. Only useful for compiling against Windows,\nonly realy used for figuring out how to find libraries, since Windows uses its own\nlibrary naming convention. Defaults to false.",10],[12,"is_like_android","","Whether the target toolchain is like Android's. Only useful for compiling against Android.\nDefaults to false.",10],[12,"linker_is_gnu","","Whether the linker support GNU-like arguments such as -O. Defaults to false.",10],[12,"has_rpath","","Whether the linker support rpaths or not. Defaults to false.",10],[12,"no_compiler_rt","","Whether to disable linking to compiler-rt. Defaults to false, as LLVM will emit references\nto the functions that compiler-rt provides.",10],[12,"position_independent_executables","","Dynamically linked executables can be compiled as position independent if the default\nrelocation model of position independent code is not changed. This is a requirement to take\nadvantage of ASLR, as otherwise the functions in the executable are not randomized and can\nbe used during an exploit of a vulnerability in any code.",10],[11,"fmt","","",9],[11,"clone","","",9],[11,"fmt","","",10],[11,"clone","","",10],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for\ncompilation, will certainly not work.",10],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",9],[11,"from_json","","Load a target descriptor from a JSON object.",9],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",9]],"paths":[[3,"ArchiveConfig"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"TempDir"],[3,"RPathConfig"],[8,"Digest"],[3,"Sha256"],[3,"Svh"],[3,"t"],[3,"Target"],[3,"TargetOptions"]]};
searchIndex['rustc_bitflags'] = {"items":[[0,"","rustc_bitflags","A typesafe bitmask flag generator."],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs."]],"paths":[]};
searchIndex['unicode'] = {"items":[[0,"","unicode","# The Unicode Library"],[0,"regex","",""],[17,"UNICODE_CLASSES","unicode::regex",""],[17,"PERLD","",""],[17,"PERLS","",""],[17,"PERLW","",""],[0,"char","unicode","Character manipulation (`char` type, Unicode Scalar Value)"],[17,"MAX","unicode::char","The highest valid code point"],[5,"from_u32","","Converts a `u32` to an `Option<char>`."],[5,"from_digit","","Converts a number to the character representing it."],[5,"decompose_canonical","","Compute canonical Unicode decomposition for character"],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character"],[5,"compose","",""],[5,"canonical_combining_class","",""],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on."],[8,"CharExt","","Functionality for manipulating `char`."],[10,"is_digit","","Checks if a `char` parses as a numeric digit in the given radix.",0],[10,"to_digit","","Converts a character to the corresponding digit.",0],[10,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode escape\nof a character, as `char`s.",0],[10,"escape_default","","Returns an iterator that yields the 'default' ASCII and\nC++11-like literal escape of a character, as `char`s.",0],[10,"len_utf8","","Returns the amount of bytes this character would need if encoded in\nUTF-8.",0],[10,"len_utf16","","Returns the amount of bytes this character would need if encoded in\nUTF-16.",0],[10,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer,\nand then returns the number of bytes written.",0],[10,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer,\nand then returns the number of `u16`s written.",0],[10,"is_alphabetic","","Returns whether the specified character is considered a Unicode\nalphabetic code point.",0],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start'\nUnicode property.",0],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue'\nUnicode property.",0],[10,"is_lowercase","","Indicates whether a character is in lowercase.",0],[10,"is_uppercase","","Indicates whether a character is in uppercase.",0],[10,"is_whitespace","","Indicates whether a character is whitespace.",0],[10,"is_alphanumeric","","Indicates whether a character is alphanumeric.",0],[10,"is_control","","Indicates whether a character is a control code point.",0],[10,"is_numeric","","Indicates whether the character is numeric (Nd, Nl, or No).",0],[10,"to_lowercase","","Converts a character to its lowercase equivalent.",0],[10,"to_uppercase","","Converts a character to its uppercase equivalent.",0],[10,"width","","Returns this character's displayed width in columns, or `None` if it is a\ncontrol character other than `'\\x00'`.",0],[0,"str","unicode",""],[3,"Words","unicode::str","An iterator over the words of a string, separated by a sequence of whitespace"],[3,"Graphemes","","External iterator for a string's\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)."],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets."],[3,"Utf16Items","","An iterator that decodes UTF-16 encoded codepoints from a vector\nof `u16`s."],[3,"Utf16Encoder","","Iterator adaptor for encoding `char`s to UTF-16."],[4,"Utf16Item","","The possibilities for values decoded from a `u16` stream."],[13,"ScalarValue","","A valid codepoint.",1],[13,"LoneSurrogate","","An invalid surrogate without its pair.",1],[5,"utf8_char_width","","Given a first byte, determine how many bytes are in this UTF-8 character"],[5,"is_utf16","","Determines if a vector of `u16` contains valid UTF-16"],[5,"utf16_items","","Create an iterator over the UTF-16 encoded codepoints in `v`,\nreturning invalid surrogates as `LoneSurrogate`s."],[8,"UnicodeStr","","Methods for Unicode string slices"],[10,"graphemes","","",2],[10,"grapheme_indices","","",2],[10,"words","","",2],[10,"is_whitespace","","",2],[10,"is_alphanumeric","","",2],[10,"width","","",2],[10,"trim","","",2],[10,"trim_left","","",2],[10,"trim_right","","",2],[15,"char","unicode","Character manipulation (`char` type, Unicode Scalar Value)"],[11,"clone","unicode::str","",3],[11,"next","","",3],[11,"size_hint","","",3],[11,"next_back","","",3],[11,"clone","","",4],[11,"size_hint","","",4],[11,"next","","",4],[11,"next_back","","",4],[11,"clone","","",5],[11,"fmt","","",1],[11,"clone","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",1],[11,"next","","",5],[11,"size_hint","","",5],[11,"clone","","",6],[11,"new","","Create an UTF-16 encoder from any `char` iterator.",6],[11,"next","","",6],[11,"size_hint","","",6],[11,"next","","",7],[11,"next_back","","",7]],"paths":[[8,"CharExt"],[4,"Utf16Item"],[8,"UnicodeStr"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"Utf16Items"],[3,"Utf16Encoder"],[3,"Words"]]};
searchIndex['alloc'] = {"items":[[0,"","alloc","# The Rust core allocation library"],[5,"oom","","Common out-of-memory routine"],[0,"heap","",""],[5,"allocate","alloc::heap","Return a pointer to `size` bytes of memory aligned to `align`."],[5,"reallocate","","Resize the allocation referenced by `ptr` to `size` bytes."],[5,"reallocate_inplace","","Resize the allocation referenced by `ptr` to `size` bytes."],[5,"deallocate","","Deallocates the memory referenced by `ptr`."],[5,"usable_size","","Returns the usable size of an allocation created with the specified the\n`size` and `align`."],[5,"stats_print","","Prints implementation-defined allocator statistics."],[17,"EMPTY","","An arbitrary non-null address to represent zero-size allocations."],[0,"boxed","alloc","A pointer type for heap allocation."],[3,"Box","alloc::boxed","A pointer type for heap allocation."],[5,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer."],[7,"HEAP","","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied."],[8,"BoxAny","","Extension methods for an owning `Any` trait object."],[10,"downcast","","Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",0],[11,"new","","Allocates memory on the heap and then moves `x` into it.",1],[11,"from_raw","","Constructs a box from the raw pointer.",1],[11,"default","","",1],[11,"default","","",1],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",1],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",1],[11,"eq","","",1],[11,"ne","","",1],[11,"partial_cmp","","",1],[11,"lt","","",1],[11,"le","","",1],[11,"ge","","",1],[11,"gt","","",1],[11,"cmp","","",1],[11,"hash","","",1],[11,"downcast","","",1],[11,"fmt","","",1],[11,"fmt","","",1],[11,"fmt","","",1],[6,"Target","",""],[11,"deref","","",1],[11,"deref_mut","","",1],[6,"Item","",""],[11,"next","","",1],[11,"size_hint","","",1],[11,"next_back","","",1],[11,"from_error","","",1],[0,"arc","alloc","Threadsafe reference-counted boxes (the `Arc<T>` type)."],[3,"Arc","alloc::arc","An atomically reference counted wrapper for shared state."],[3,"Weak","","A weak pointer to an `Arc`."],[5,"weak_count","","Get the number of weak references to this value."],[5,"strong_count","","Get the number of strong references to this value."],[11,"fmt","","",2],[11,"new","","Constructs a new `Arc<T>`.",3],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",3],[11,"clone","","Makes a clone of the `Arc<T>`.",3],[6,"Target","",""],[11,"deref","","",3],[11,"make_unique","","Make a mutable reference from the given `Arc<T>`.",3],[11,"drop","","Drops the `Arc<T>`.",3],[11,"upgrade","","Upgrades a weak reference to a strong reference.",2],[11,"clone","","Makes a clone of the `Weak<T>`.",2],[11,"drop","","Drops the `Weak<T>`.",2],[11,"eq","","Equality for two `Arc<T>`s.",3],[11,"ne","","Inequality for two `Arc<T>`s.",3],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",3],[11,"lt","","Less-than comparison for two `Arc<T>`s.",3],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",3],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",3],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",3],[11,"cmp","","",3],[11,"fmt","","",3],[11,"fmt","","",3],[11,"default","","",3],[11,"hash","","",3],[0,"rc","alloc","Thread-local reference-counted boxes (the `Rc<T>` type)."],[3,"Rc","alloc::rc","A reference-counted pointer type over an immutable value."],[3,"Weak","","A weak version of `Rc<T>`."],[5,"weak_count","","Get the number of weak references to this value."],[5,"strong_count","","Get the number of strong references to this value."],[5,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share the same inner value."],[5,"try_unwrap","","Unwraps the contained value if the `Rc<T>` is unique."],[5,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` is unique."],[11,"new","","Constructs a new `Rc<T>`.",4],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",4],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",4],[6,"Target","",""],[11,"deref","","",4],[11,"drop","","Drops the `Rc<T>`.",4],[11,"clone","","Makes a clone of the `Rc<T>`.",4],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",4],[11,"eq","","Equality for two `Rc<T>`s.",4],[11,"ne","","Inequality for two `Rc<T>`s.",4],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",4],[11,"lt","","Less-than comparison for two `Rc<T>`s.",4],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",4],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",4],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",4],[11,"cmp","","Comparison for two `Rc<T>`s.",4],[11,"hash","","",4],[11,"fmt","","",4],[11,"fmt","","",4],[11,"upgrade","","Upgrades a weak reference to a strong reference.",5],[11,"drop","","Drops the `Weak<T>`.",5],[11,"clone","","Makes a clone of the `Weak<T>`.",5],[11,"fmt","","",5]],"paths":[[8,"BoxAny"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"]]};
searchIndex['rbml'] = {"items":[[0,"","rbml","Really Bad Markup Language (rbml) is an internal serialization format of rustc.\nThis is not intended to be used by users."],[3,"Doc","","Common data structures"],[12,"data","","",0],[12,"start","","",0],[12,"end","","",0],[3,"TaggedDoc","",""],[12,"doc","","",1],[4,"EbmlEncoderTag","",""],[13,"EsU8","","",2],[13,"EsU16","","",2],[13,"EsU32","","",2],[13,"EsU64","","",2],[13,"EsI8","","",2],[13,"EsI16","","",2],[13,"EsI32","","",2],[13,"EsI64","","",2],[13,"EsBool","","",2],[13,"EsChar","","",2],[13,"EsF32","","",2],[13,"EsF64","","",2],[13,"EsSub8","","",2],[13,"EsSub32","","",2],[13,"EsStr","","",2],[13,"EsEnum","","",2],[13,"EsVec","","",2],[13,"EsVecElt","","",2],[13,"EsMap","","",2],[13,"EsMapKey","","",2],[13,"EsMapVal","","",2],[13,"EsOpaque","","",2],[4,"Error","",""],[13,"IntTooBig","","",3],[13,"InvalidTag","","",3],[13,"Expected","","",3],[13,"IoError","","",3],[13,"ApplicationError","","",3],[0,"io","",""],[3,"SeekableMemWriter","rbml::io","Writes to an owned, growable byte vector that supports seeking."],[11,"new","","Create a new `SeekableMemWriter`.",4],[11,"with_capacity","","Create a new `SeekableMemWriter`, allocating at least `n` bytes for\nthe internal buffer.",4],[11,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`SeekableMemWriter`.",4],[11,"unwrap","","Unwraps this `SeekableMemWriter`, returning the underlying buffer",4],[11,"write_all","","",4],[11,"tell","","",4],[11,"seek","","",4],[0,"reader","rbml",""],[3,"Res","rbml::reader",""],[12,"val","","",5],[12,"next","","",5],[3,"Decoder","",""],[5,"tag_at","",""],[5,"vuint_at","",""],[5,"tag_len_at","",""],[5,"doc_at","",""],[5,"maybe_get_doc","",""],[5,"get_doc","",""],[5,"docs","",""],[5,"tagged_docs","",""],[5,"with_doc_data","",""],[5,"doc_as_u8","",""],[5,"doc_as_u16","",""],[5,"doc_as_u32","",""],[5,"doc_as_u64","",""],[5,"doc_as_i8","",""],[5,"doc_as_i16","",""],[5,"doc_as_i32","",""],[5,"doc_as_i64","",""],[6,"DecodeResult","",""],[11,"new","","",6],[11,"read_opaque","","",6],[6,"Error","",""],[11,"read_nil","","",6],[11,"read_u64","","",6],[11,"read_u32","","",6],[11,"read_u16","","",6],[11,"read_u8","","",6],[11,"read_uint","","",6],[11,"read_i64","","",6],[11,"read_i32","","",6],[11,"read_i16","","",6],[11,"read_i8","","",6],[11,"read_int","","",6],[11,"read_bool","","",6],[11,"read_f64","","",6],[11,"read_f32","","",6],[11,"read_char","","",6],[11,"read_str","","",6],[11,"read_enum","","",6],[11,"read_enum_variant","","",6],[11,"read_enum_variant_arg","","",6],[11,"read_enum_struct_variant","","",6],[11,"read_enum_struct_variant_field","","",6],[11,"read_struct","","",6],[11,"read_struct_field","","",6],[11,"read_tuple","","",6],[11,"read_tuple_arg","","",6],[11,"read_tuple_struct","","",6],[11,"read_tuple_struct_arg","","",6],[11,"read_option","","",6],[11,"read_seq","","",6],[11,"read_seq_elt","","",6],[11,"read_map","","",6],[11,"read_map_elt_key","","",6],[11,"read_map_elt_val","","",6],[11,"error","","",6],[0,"writer","rbml",""],[3,"Encoder","rbml::writer",""],[12,"writer","","",7],[6,"EncodeResult","",""],[11,"new","","",7],[11,"unsafe_clone","","FIXME(pcwalton): Workaround for badness in trans. DO NOT USE ME.",7],[11,"start_tag","","",7],[11,"end_tag","","",7],[11,"wr_tag","","",7],[11,"wr_tagged_bytes","","",7],[11,"wr_tagged_u64","","",7],[11,"wr_tagged_u32","","",7],[11,"wr_tagged_u16","","",7],[11,"wr_tagged_u8","","",7],[11,"wr_tagged_i64","","",7],[11,"wr_tagged_i32","","",7],[11,"wr_tagged_i16","","",7],[11,"wr_tagged_i8","","",7],[11,"wr_tagged_str","","",7],[11,"wr_bytes","","",7],[11,"wr_str","","",7],[11,"mark_stable_position","","Returns the current position while marking it stable, i.e.\ngenerated bytes so far woundn't be affected by relaxation.",7],[11,"emit_opaque","","",7],[6,"Error","",""],[11,"emit_nil","","",7],[11,"emit_uint","","",7],[11,"emit_u64","","",7],[11,"emit_u32","","",7],[11,"emit_u16","","",7],[11,"emit_u8","","",7],[11,"emit_int","","",7],[11,"emit_i64","","",7],[11,"emit_i32","","",7],[11,"emit_i16","","",7],[11,"emit_i8","","",7],[11,"emit_bool","","",7],[11,"emit_f64","","",7],[11,"emit_f32","","",7],[11,"emit_char","","",7],[11,"emit_str","","",7],[11,"emit_enum","","",7],[11,"emit_enum_variant","","",7],[11,"emit_enum_variant_arg","","",7],[11,"emit_enum_struct_variant","","",7],[11,"emit_enum_struct_variant_field","","",7],[11,"emit_struct","","",7],[11,"emit_struct_field","","",7],[11,"emit_tuple","","",7],[11,"emit_tuple_arg","","",7],[11,"emit_tuple_struct","","",7],[11,"emit_tuple_struct_arg","","",7],[11,"emit_option","","",7],[11,"emit_option_none","","",7],[11,"emit_option_some","","",7],[11,"emit_seq","","",7],[11,"emit_seq_elt","","",7],[11,"emit_map","","",7],[11,"emit_map_elt_key","","",7],[11,"emit_map_elt_val","","",7],[11,"clone","rbml","",0],[11,"new","","",0],[11,"get","","",0],[11,"is_empty","","",0],[11,"as_str_slice","","",0],[11,"as_str","","",0],[11,"fmt","","",2],[11,"fmt","","",3],[11,"fmt","","",3]],"paths":[[3,"Doc"],[3,"TaggedDoc"],[4,"EbmlEncoderTag"],[4,"Error"],[3,"SeekableMemWriter"],[3,"Res"],[3,"Decoder"],[3,"Encoder"]]};
searchIndex['core'] = {"items":[[0,"","core","# The Rust Core Library"],[0,"isize","","Operations and constants for pointer-sized signed integers (`isize` type)"],[17,"BITS","core::isize",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i8","core","Operations and constants for signed 8-bits integers (`i8` type)"],[17,"BITS","core::i8",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i16","core","Operations and constants for signed 16-bits integers (`i16` type)"],[17,"BITS","core::i16",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i32","core","Operations and constants for signed 32-bits integers (`i32` type)"],[17,"BITS","core::i32",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i64","core","Operations and constants for signed 64-bits integers (`i64` type)"],[17,"BITS","core::i64",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"usize","core","Operations and constants for pointer-sized unsigned integers (`usize` type)"],[17,"BITS","core::usize",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u8","core","Operations and constants for unsigned 8-bits integers (`u8` type)"],[17,"BITS","core::u8",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u16","core","Operations and constants for unsigned 16-bits integers (`u16` type)"],[17,"BITS","core::u16",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u32","core","Operations and constants for unsigned 32-bits integers (`u32` type)"],[17,"BITS","core::u32",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u64","core","Operations and constants for unsigned 64-bits integer (`u64` type)"],[17,"BITS","core::u64",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"f32","core","Operations and constants for 32-bits floats (`f32` type)"],[0,"consts","core::f32","Various useful constants."],[17,"PI","core::f32::consts","Archimedes' constant"],[17,"PI_2","","pi * 2.0"],[17,"FRAC_PI_2","","pi/2.0"],[17,"FRAC_PI_3","","pi/3.0"],[17,"FRAC_PI_4","","pi/4.0"],[17,"FRAC_PI_6","","pi/6.0"],[17,"FRAC_PI_8","","pi/8.0"],[17,"FRAC_1_PI","","1.0/pi"],[17,"FRAC_2_PI","","2.0/pi"],[17,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[17,"SQRT2","","sqrt(2.0)"],[17,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[17,"E","","Euler's number"],[17,"LOG2_E","","log2(e)"],[17,"LOG10_E","","log10(e)"],[17,"LN_2","","ln(2.0)"],[17,"LN_10","","ln(10.0)"],[17,"RADIX","core::f32",""],[17,"MANTISSA_DIGITS","",""],[17,"DIGITS","",""],[17,"EPSILON","",""],[17,"MIN_VALUE","","Smallest finite f32 value"],[17,"MIN_POS_VALUE","","Smallest positive, normalized f32 value"],[17,"MAX_VALUE","","Largest finite f32 value"],[17,"MIN","","Smallest finite f32 value"],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value"],[17,"MAX","","Largest finite f32 value"],[17,"MIN_EXP","",""],[17,"MAX_EXP","",""],[17,"MIN_10_EXP","",""],[17,"MAX_10_EXP","",""],[17,"NAN","",""],[17,"INFINITY","",""],[17,"NEG_INFINITY","",""],[0,"f64","core","Operations and constants for 64-bits floats (`f64` type)"],[0,"consts","core::f64","Various useful constants."],[17,"PI","core::f64::consts","Archimedes' constant"],[17,"PI_2","","pi * 2.0"],[17,"FRAC_PI_2","","pi/2.0"],[17,"FRAC_PI_3","","pi/3.0"],[17,"FRAC_PI_4","","pi/4.0"],[17,"FRAC_PI_6","","pi/6.0"],[17,"FRAC_PI_8","","pi/8.0"],[17,"FRAC_1_PI","","1.0/pi"],[17,"FRAC_2_PI","","2.0/pi"],[17,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[17,"SQRT2","","sqrt(2.0)"],[17,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[17,"E","","Euler's number"],[17,"LOG2_E","","log2(e)"],[17,"LOG10_E","","log10(e)"],[17,"LN_2","","ln(2.0)"],[17,"LN_10","","ln(10.0)"],[17,"RADIX","core::f64",""],[17,"MANTISSA_DIGITS","",""],[17,"DIGITS","",""],[17,"EPSILON","",""],[17,"MIN_VALUE","","Smallest finite f64 value"],[17,"MIN_POS_VALUE","","Smallest positive, normalized f64 value"],[17,"MAX_VALUE","","Largest finite f64 value"],[17,"MIN","","Smallest finite f64 value"],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value"],[17,"MAX","","Largest finite f64 value"],[17,"MIN_EXP","",""],[17,"MAX_EXP","",""],[17,"MIN_10_EXP","",""],[17,"MAX_10_EXP","",""],[17,"NAN","",""],[17,"INFINITY","",""],[17,"NEG_INFINITY","",""],[0,"num","core","Numeric traits and functions for the built-in numeric types."],[3,"ParseIntError","core::num","An error which can be returned when parsing an integer."],[3,"ParseFloatError","","An error which can be returned when parsing a float."],[4,"FpCategory","","Used for representing the classification of floating point numbers"],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero",0],[13,"Infinite","","Positive or negative infinity",0],[13,"Zero","","Positive or negative zero",0],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",0],[13,"Normal","","A regular floating point number",0],[5,"from_int","","A utility function that just calls `FromPrimitive::from_int`."],[5,"from_isize","","A utility function that just calls `FromPrimitive::from_isize`."],[5,"from_i8","","A utility function that just calls `FromPrimitive::from_i8`."],[5,"from_i16","","A utility function that just calls `FromPrimitive::from_i16`."],[5,"from_i32","","A utility function that just calls `FromPrimitive::from_i32`."],[5,"from_i64","","A utility function that just calls `FromPrimitive::from_i64`."],[5,"from_uint","","A utility function that just calls `FromPrimitive::from_uint`."],[5,"from_usize","","A utility function that just calls `FromPrimitive::from_usize`."],[5,"from_u8","","A utility function that just calls `FromPrimitive::from_u8`."],[5,"from_u16","","A utility function that just calls `FromPrimitive::from_u16`."],[5,"from_u32","","A utility function that just calls `FromPrimitive::from_u32`."],[5,"from_u64","","A utility function that just calls `FromPrimitive::from_u64`."],[5,"from_f32","","A utility function that just calls `FromPrimitive::from_f32`."],[5,"from_f64","","A utility function that just calls `FromPrimitive::from_f64`."],[5,"cast","","Cast from one machine scalar to another."],[5,"from_str_radix","","A utility function that just calls `FromStrRadix::from_str_radix`."],[0,"wrapping","",""],[3,"Wrapping","core::num::wrapping",""],[8,"WrappingOps","",""],[10,"wrapping_add","","",1],[10,"wrapping_sub","","",1],[10,"wrapping_mul","","",1],[8,"OverflowingOps","",""],[10,"overflowing_add","","",2],[10,"overflowing_sub","","",2],[10,"overflowing_mul","","",2],[11,"clone","","",3],[11,"cmp","","",3],[11,"partial_cmp","","",3],[11,"lt","","",3],[11,"le","","",3],[11,"gt","","",3],[11,"ge","","",3],[11,"eq","","",3],[11,"ne","","",3],[6,"Output","",""],[11,"add","","",3],[6,"Output","",""],[11,"sub","","",3],[6,"Output","",""],[11,"mul","","",3],[6,"Output","",""],[11,"not","","",3],[6,"Output","",""],[11,"bitxor","","",3],[6,"Output","",""],[11,"bitor","","",3],[6,"Output","",""],[11,"bitand","","",3],[6,"Output","",""],[11,"shl","","",3],[6,"Output","",""],[11,"shr","","",3],[8,"Int","core::num","A built-in signed or unsigned integer."],[10,"zero","","Returns the `0` value of this integer type.",4],[10,"one","","Returns the `1` value of this integer type.",4],[10,"min_value","","Returns the smallest value that can be represented by this integer type.",4],[10,"max_value","","Returns the largest value that can be represented by this integer type.",4],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",4],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",4],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",4],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",4],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",4],[10,"swap_bytes","","Reverses the byte order of the integer.",4],[11,"from_be","","Convert an integer from big endian to the target's endianness.",4],[11,"from_le","","Convert an integer from little endian to the target's endianness.",4],[11,"to_be","","Convert `self` to big endian from the target's endianness.",4],[11,"to_le","","Convert `self` to little endian from the target's endianness.",4],[10,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if\noverflow occurred.",4],[10,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None`\nif underflow occurred.",4],[10,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",4],[10,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if\n`other == 0` or the operation results in underflow or overflow.",4],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",4],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at\nthe numeric bounds instead of overflowing.",4],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4],[8,"SignedInt","","A built-in two's complement integer."],[10,"abs","","Computes the absolute value of `self`. `Int::min_value()` will be\nreturned if the number is `Int::min_value()`.",5],[10,"signum","","Returns a number representing sign of `self`.",5],[10,"is_positive","","Returns `true` if `self` is positive and `false` if the number\nis zero or negative.",5],[10,"is_negative","","Returns `true` if `self` is negative and `false` if the number\nis zero or positive.",5],[8,"UnsignedInt","","A built-in unsigned integer."],[11,"is_power_of_two","","Returns `true` iff `self == 2^k` for some `k`.",6],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.\nUnspecified behavior on overflow.",6],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the\nnext power of two is greater than the type's maximum value, `None` is\nreturned, otherwise the power of two is wrapped in `Some`.",6],[8,"ToPrimitive","","A generic trait for converting a value to a number."],[11,"to_int","","Converts the value of `self` to an `int`.",7],[11,"to_isize","","Converts the value of `self` to an `isize`.",7],[11,"to_i8","","Converts the value of `self` to an `i8`.",7],[11,"to_i16","","Converts the value of `self` to an `i16`.",7],[11,"to_i32","","Converts the value of `self` to an `i32`.",7],[10,"to_i64","","Converts the value of `self` to an `i64`.",7],[11,"to_uint","","Converts the value of `self` to an `uint`.",7],[11,"to_usize","","Converts the value of `self` to a `usize`.",7],[11,"to_u8","","Converts the value of `self` to an `u8`.",7],[11,"to_u16","","Converts the value of `self` to an `u16`.",7],[11,"to_u32","","Converts the value of `self` to an `u32`.",7],[10,"to_u64","","Converts the value of `self` to an `u64`.",7],[11,"to_f32","","Converts the value of `self` to an `f32`.",7],[11,"to_f64","","Converts the value of `self` to an `f64`.",7],[8,"FromPrimitive","","A generic trait for converting a number to a value."],[11,"from_int","","Convert an `int` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",8],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",8],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_uint","","Convert an `uint` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[8,"NumCast","","An interface for casting between machine scalars."],[10,"from","","Creates a number from another value that can be converted into a primitive via the\n`ToPrimitive` trait.",9],[8,"Float","","A built-in floating point number."],[10,"nan","","Returns the NaN value.",10],[10,"infinity","","Returns the infinite value.",10],[10,"neg_infinity","","Returns the negative infinite value.",10],[10,"zero","","Returns the `0` value.",10],[10,"neg_zero","","Returns -0.0.",10],[10,"one","","Returns the `1` value.",10],[10,"mantissa_digits","","Returns the number of binary digits of mantissa that this type supports.",10],[10,"digits","","Returns the number of base-10 digits of precision that this type supports.",10],[10,"epsilon","","Returns the difference between 1.0 and the smallest representable number larger than 1.0.",10],[10,"min_exp","","Returns the minimum binary exponent that this type can represent.",10],[10,"max_exp","","Returns the maximum binary exponent that this type can represent.",10],[10,"min_10_exp","","Returns the minimum base-10 exponent that this type can represent.",10],[10,"max_10_exp","","Returns the maximum base-10 exponent that this type can represent.",10],[10,"min_value","","Returns the smallest finite value that this type can represent.",10],[10,"min_pos_value","","Returns the smallest normalized positive number that this type can represent.",10],[10,"max_value","","Returns the largest finite value that this type can represent.",10],[10,"is_nan","","Returns true if this value is NaN and false otherwise.",10],[10,"is_infinite","","Returns true if this value is positive infinity or negative infinity and\nfalse otherwise.",10],[10,"is_finite","","Returns true if this number is neither infinite nor NaN.",10],[10,"is_normal","","Returns true if this number is neither zero, infinite, denormal, or NaN.",10],[10,"classify","","Returns the category that this number falls into.",10],[10,"integer_decode","","Returns the mantissa, exponent and sign as integers, respectively.",10],[10,"floor","","Return the largest integer less than or equal to a number.",10],[10,"ceil","","Return the smallest integer greater than or equal to a number.",10],[10,"round","","Return the nearest integer to a number. Round half-way cases away from\n`0.0`.",10],[10,"trunc","","Return the integer part of a number.",10],[10,"fract","","Return the fractional part of a number.",10],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",10],[10,"signum","","Returns a number that represents the sign of `self`.",10],[10,"is_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",10],[10,"is_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",10],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",10],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",10],[10,"powi","","Raise a number to an integer power.",10],[10,"powf","","Raise a number to a floating point power.",10],[10,"sqrt","","Take the square root of a number.",10],[10,"rsqrt","","Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.",10],[10,"exp","","Returns `e^(self)`, (the exponential function).",10],[10,"exp2","","Returns 2 raised to the power of the number, `2^(self)`.",10],[10,"ln","","Returns the natural logarithm of the number.",10],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",10],[10,"log2","","Returns the base 2 logarithm of the number.",10],[10,"log10","","Returns the base 10 logarithm of the number.",10],[10,"to_degrees","","Convert radians to degrees.",10],[10,"to_radians","","Convert degrees to radians.",10],[8,"FromStrRadix","","A generic trait for converting a string with a radix (base) to a value"],[16,"Err","core::num::FromStrRadix",""],[10,"from_str_radix","core::num","",11],[11,"fmt","","",0],[11,"eq","","",0],[11,"ne","","",0],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[11,"eq","","",12],[11,"ne","","",12],[11,"clone","","",12],[11,"fmt","","",12],[11,"fmt","","",12],[11,"description","","",12],[11,"eq","","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"fmt","","",13],[11,"fmt","","",13],[11,"description","","",13],[0,"prelude","core","The core prelude"],[0,"intrinsics","","rustc compiler intrinsics."],[3,"TyDesc","core::intrinsics",""],[12,"size","","",14],[12,"align","","",14],[12,"drop_glue","","",14],[12,"name","","",14],[5,"atomic_cxchg","",""],[5,"atomic_cxchg_acq","",""],[5,"atomic_cxchg_rel","",""],[5,"atomic_cxchg_acqrel","",""],[5,"atomic_cxchg_relaxed","",""],[5,"atomic_load","",""],[5,"atomic_load_acq","",""],[5,"atomic_load_relaxed","",""],[5,"atomic_load_unordered","",""],[5,"atomic_store","",""],[5,"atomic_store_rel","",""],[5,"atomic_store_relaxed","",""],[5,"atomic_store_unordered","",""],[5,"atomic_xchg","",""],[5,"atomic_xchg_acq","",""],[5,"atomic_xchg_rel","",""],[5,"atomic_xchg_acqrel","",""],[5,"atomic_xchg_relaxed","",""],[5,"atomic_xadd","",""],[5,"atomic_xadd_acq","",""],[5,"atomic_xadd_rel","",""],[5,"atomic_xadd_acqrel","",""],[5,"atomic_xadd_relaxed","",""],[5,"atomic_xsub","",""],[5,"atomic_xsub_acq","",""],[5,"atomic_xsub_rel","",""],[5,"atomic_xsub_acqrel","",""],[5,"atomic_xsub_relaxed","",""],[5,"atomic_and","",""],[5,"atomic_and_acq","",""],[5,"atomic_and_rel","",""],[5,"atomic_and_acqrel","",""],[5,"atomic_and_relaxed","",""],[5,"atomic_nand","",""],[5,"atomic_nand_acq","",""],[5,"atomic_nand_rel","",""],[5,"atomic_nand_acqrel","",""],[5,"atomic_nand_relaxed","",""],[5,"atomic_or","",""],[5,"atomic_or_acq","",""],[5,"atomic_or_rel","",""],[5,"atomic_or_acqrel","",""],[5,"atomic_or_relaxed","",""],[5,"atomic_xor","",""],[5,"atomic_xor_acq","",""],[5,"atomic_xor_rel","",""],[5,"atomic_xor_acqrel","",""],[5,"atomic_xor_relaxed","",""],[5,"atomic_max","",""],[5,"atomic_max_acq","",""],[5,"atomic_max_rel","",""],[5,"atomic_max_acqrel","",""],[5,"atomic_max_relaxed","",""],[5,"atomic_min","",""],[5,"atomic_min_acq","",""],[5,"atomic_min_rel","",""],[5,"atomic_min_acqrel","",""],[5,"atomic_min_relaxed","",""],[5,"atomic_umin","",""],[5,"atomic_umin_acq","",""],[5,"atomic_umin_rel","",""],[5,"atomic_umin_acqrel","",""],[5,"atomic_umin_relaxed","",""],[5,"atomic_umax","",""],[5,"atomic_umax_acq","",""],[5,"atomic_umax_rel","",""],[5,"atomic_umax_acqrel","",""],[5,"atomic_umax_relaxed","",""],[5,"atomic_fence","",""],[5,"atomic_fence_acq","",""],[5,"atomic_fence_rel","",""],[5,"atomic_fence_acqrel","",""],[5,"abort","","Abort the execution of the process."],[5,"unreachable","","Tell LLVM that this point in the code is not reachable,\nenabling further optimizations."],[5,"assume","","Inform the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined."],[5,"breakpoint","","Execute a breakpoint trap, for inspection by a debugger."],[5,"size_of","","The size of a type in bytes."],[5,"move_val_init","","Move a value to an uninitialized memory location."],[5,"min_align_of","",""],[5,"pref_align_of","",""],[5,"get_tydesc","","Get a static pointer to a type descriptor."],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in."],[5,"init","","Create a value initialized to zero."],[5,"uninit","","Create an uninitialized value."],[5,"forget","","Move a value out of scope without running drop glue."],[5,"transmute","","Unsafely transforms a value of one type into a value of another type."],[5,"return_address","","Gives the address for the return value of the enclosing function."],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`."],[5,"owns_managed","","Returns `true` if a type is managed (will be allocated on the local heap)"],[5,"offset","","Calculates the offset from a pointer. The offset *must* be in-bounds of\nthe object, or one-byte-past-the-end. An arithmetic overflow is also\nundefined behaviour."],[5,"copy_nonoverlapping_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap."],[5,"copy_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap."],[5,"set_memory","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`."],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`."],[5,"volatile_load","","Perform a volatile load from the `src` pointer."],[5,"volatile_store","","Perform a volatile store to the `dst` pointer."],[5,"sqrtf32","","Returns the square root of an `f32`"],[5,"sqrtf64","","Returns the square root of an `f64`"],[5,"powif32","","Raises an `f32` to an integer power."],[5,"powif64","","Raises an `f64` to an integer power."],[5,"sinf32","","Returns the sine of an `f32`."],[5,"sinf64","","Returns the sine of an `f64`."],[5,"cosf32","","Returns the cosine of an `f32`."],[5,"cosf64","","Returns the cosine of an `f64`."],[5,"powf32","","Raises an `f32` to an `f32` power."],[5,"powf64","","Raises an `f64` to an `f64` power."],[5,"expf32","","Returns the exponential of an `f32`."],[5,"expf64","","Returns the exponential of an `f64`."],[5,"exp2f32","","Returns 2 raised to the power of an `f32`."],[5,"exp2f64","","Returns 2 raised to the power of an `f64`."],[5,"logf32","","Returns the natural logarithm of an `f32`."],[5,"logf64","","Returns the natural logarithm of an `f64`."],[5,"log10f32","","Returns the base 10 logarithm of an `f32`."],[5,"log10f64","","Returns the base 10 logarithm of an `f64`."],[5,"log2f32","","Returns the base 2 logarithm of an `f32`."],[5,"log2f64","","Returns the base 2 logarithm of an `f64`."],[5,"fmaf32","","Returns `a * b + c` for `f32` values."],[5,"fmaf64","","Returns `a * b + c` for `f64` values."],[5,"fabsf32","","Returns the absolute value of an `f32`."],[5,"fabsf64","","Returns the absolute value of an `f64`."],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values."],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values."],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`."],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`."],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`."],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`."],[5,"truncf32","","Returns the integer part of an `f32`."],[5,"truncf64","","Returns the integer part of an `f64`."],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer."],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer."],[5,"nearbyintf32","","Returns the nearest integer to an `f32`."],[5,"nearbyintf64","","Returns the nearest integer to an `f64`."],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero."],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero."],[5,"ctpop8","","Returns the number of bits set in a `u8`."],[5,"ctpop16","","Returns the number of bits set in a `u16`."],[5,"ctpop32","","Returns the number of bits set in a `u32`."],[5,"ctpop64","","Returns the number of bits set in a `u64`."],[5,"ctlz8","","Returns the number of leading bits unset in a `u8`."],[5,"ctlz16","","Returns the number of leading bits unset in a `u16`."],[5,"ctlz32","","Returns the number of leading bits unset in a `u32`."],[5,"ctlz64","","Returns the number of leading bits unset in a `u64`."],[5,"cttz8","","Returns the number of trailing bits unset in a `u8`."],[5,"cttz16","","Returns the number of trailing bits unset in a `u16`."],[5,"cttz32","","Returns the number of trailing bits unset in a `u32`."],[5,"cttz64","","Returns the number of trailing bits unset in a `u64`."],[5,"bswap16","","Reverses the bytes in a `u16`."],[5,"bswap32","","Reverses the bytes in a `u32`."],[5,"bswap64","","Reverses the bytes in a `u64`."],[5,"i8_add_with_overflow","","Performs checked `i8` addition."],[5,"i16_add_with_overflow","","Performs checked `i16` addition."],[5,"i32_add_with_overflow","","Performs checked `i32` addition."],[5,"i64_add_with_overflow","","Performs checked `i64` addition."],[5,"u8_add_with_overflow","","Performs checked `u8` addition."],[5,"u16_add_with_overflow","","Performs checked `u16` addition."],[5,"u32_add_with_overflow","","Performs checked `u32` addition."],[5,"u64_add_with_overflow","","Performs checked `u64` addition."],[5,"i8_sub_with_overflow","","Performs checked `i8` subtraction."],[5,"i16_sub_with_overflow","","Performs checked `i16` subtraction."],[5,"i32_sub_with_overflow","","Performs checked `i32` subtraction."],[5,"i64_sub_with_overflow","","Performs checked `i64` subtraction."],[5,"u8_sub_with_overflow","","Performs checked `u8` subtraction."],[5,"u16_sub_with_overflow","","Performs checked `u16` subtraction."],[5,"u32_sub_with_overflow","","Performs checked `u32` subtraction."],[5,"u64_sub_with_overflow","","Performs checked `u64` subtraction."],[5,"i8_mul_with_overflow","","Performs checked `i8` multiplication."],[5,"i16_mul_with_overflow","","Performs checked `i16` multiplication."],[5,"i32_mul_with_overflow","","Performs checked `i32` multiplication."],[5,"i64_mul_with_overflow","","Performs checked `i64` multiplication."],[5,"u8_mul_with_overflow","","Performs checked `u8` multiplication."],[5,"u16_mul_with_overflow","","Performs checked `u16` multiplication."],[5,"u32_mul_with_overflow","","Performs checked `u32` multiplication."],[5,"u64_mul_with_overflow","","Performs checked `u64` multiplication."],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of N in bits."],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of N in bits."],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of N in bits."],[6,"GlueFn","",""],[0,"mem","core","Basic functions for dealing with memory"],[5,"size_of","core::mem","Returns the size of a type in bytes."],[5,"size_of_val","","Returns the size of the type that `_val` points to in bytes."],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type"],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `_val` points to"],[5,"align_of","","Returns the alignment in memory for a type."],[5,"align_of_val","","Returns the alignment of the type of the value that `_val` points to."],[5,"zeroed","","Create a value initialized to zero."],[5,"uninitialized","","Create an uninitialized value."],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitialising or copying\neither one."],[5,"replace","","Replace the value at a mutable location with a new one, returning the old value, without\ndeinitialising or copying either one."],[5,"drop","","Disposes of a value."],[5,"transmute_copy","","Interprets `src` as `&U`, and then reads `src` without moving the contained value."],[5,"copy_lifetime","","Transforms lifetime of the second pointer to match the first."],[5,"copy_mut_lifetime","","Transforms lifetime of the second mutable pointer to match the first."],[0,"nonzero","core","Exposes the NonZero lang item which provides optimization hints."],[3,"NonZero","core::nonzero","A wrapper type for raw pointers and integers that will never be\nNULL or 0 that might allow certain optimizations."],[8,"Zeroable","","Unsafe trait to indicate what types are usable with the NonZero struct"],[11,"hash","","",15],[11,"fmt","","",15],[11,"partial_cmp","","",15],[11,"lt","","",15],[11,"le","","",15],[11,"gt","","",15],[11,"ge","","",15],[11,"cmp","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"new","","Create an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",15],[6,"Target","",""],[11,"deref","","",15],[0,"ptr","core","Operations on unsafe pointers, `*const T`, and `*mut T`."],[3,"Unique","core::ptr","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec<T>` or `Box<T>`, which\ninternally use raw pointers to manage the memory that they own."],[5,"null","","Creates a null raw pointer."],[5,"null_mut","","Creates a null mutable raw pointer."],[5,"zero_memory","","Zeroes out `count * size_of::<T>` bytes of memory at `dst`. `count` may be\n`0`."],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitialising either. They may overlap, unlike `mem::swap` which is\notherwise equivalent."],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either."],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged."],[5,"read_and_zero","","Reads the value from `src` and nulls it out without dropping it."],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value."],[5,"copy_nonoverlapping_memory","",""],[5,"copy_memory","",""],[5,"set_memory","",""],[8,"PtrExt","","Methods on raw pointers"],[16,"Target","core::ptr::PtrExt","The type which is being pointed at"],[10,"is_null","core::ptr","Returns true if the pointer is null.",16],[10,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to\nthe value wrapped in `Some`.",16],[10,"offset","","Calculates the offset from a pointer. `count` is in units of T; e.g. a\n`count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",16],[8,"MutPtrExt","","Methods on mutable raw pointers"],[16,"Target","core::ptr::MutPtrExt","The type which is being pointed at"],[10,"as_mut","core::ptr","Returns `None` if the pointer is null, or else returns a mutable\nreference to the value wrapped in `Some`.",17],[6,"Target","",""],[6,"Target","",""],[6,"Target","",""],[11,"new","","Create a new `Unique`.",18],[11,"get","","Dereference the content.",18],[11,"get_mut","","Mutably dereference the content.",18],[6,"Target","",""],[11,"deref","","",18],[0,"marker","core","Primitive traits and marker types representing basic 'kinds' of types."],[3,"NoCopy","core::marker","A type which is considered \"not POD\", meaning that it is not\nimplicitly copyable. This is typically embedded in other types to\nensure that they are never copied, even if they lack a destructor."],[3,"Managed","","A type which is considered managed by the GC. This is typically\nembedded in other types."],[3,"PhantomData","","`PhantomData` is a way to tell the compiler about fake fields.\nPhantom data is required whenever type parameters are not used.\nThe idea is that if the compiler encounters a `PhantomData<T>`\ninstance, it will behave *as if* an instance of the type `T` were\npresent for the purpose of various automatic analyses."],[3,"ContravariantLifetime","","Old-style marker trait. Deprecated."],[3,"CovariantLifetime","","Old-style marker trait. Deprecated."],[3,"InvariantLifetime","","Old-style marker trait. Deprecated."],[3,"ContravariantType","","Old-style marker trait. Deprecated."],[3,"CovariantType","","Old-style marker trait. Deprecated."],[3,"InvariantType","","Old-style marker trait. Deprecated."],[8,"Send","","Types able to be transferred across thread boundaries."],[8,"Sized","","Types with a constant size known at compile-time."],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`)."],[8,"Sync","","Types that can be safely shared between threads when aliased."],[8,"MarkerTrait","","`MarkerTrait` is intended to be used as the supertrait for traits\nthat don't have any methods but instead serve just to designate\ncategories of types. An example would be the `Send` trait, which\nindicates types that are sendable: `Send` does not itself offer\nany methods, but instead is used to gate access to data."],[8,"PhantomFn","","`PhantomFn` is a marker trait for use with traits that contain\ntype or lifetime parameters that do not appear in any of their\nmethods. In that case, you can either remove those parameters, or\nadd a `PhantomFn` supertrait that reflects the signature of\nmethods that compiler should \"pretend\" exists. This most commonly\noccurs for traits with no methods: in that particular case, you\ncan extend `MarkerTrait`, which is equivalent to\n`PhantomFn<Self>`."],[11,"cmp","","",19],[11,"partial_cmp","","",19],[11,"lt","","",19],[11,"le","","",19],[11,"gt","","",19],[11,"ge","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"cmp","","",20],[11,"partial_cmp","","",20],[11,"lt","","",20],[11,"le","","",20],[11,"gt","","",20],[11,"ge","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"hash","","",21],[11,"eq","","",21],[11,"partial_cmp","","",21],[11,"cmp","","",21],[11,"clone","","",21],[0,"ops","core","Overloadable operators"],[3,"RangeFull","core::ops","An unbounded range."],[3,"Range","","A (half-open) range which is bounded at both ends."],[12,"start","","The lower bound of the range (inclusive).",22],[12,"end","","The upper bound of the range (exclusive).",22],[3,"RangeFrom","","A range which is only bounded below."],[12,"start","","The lower bound of the range (inclusive).",23],[3,"RangeTo","","A range which is only bounded above."],[12,"end","","The upper bound of the range (exclusive).",24],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope. This\nis sometimes called a 'destructor'."],[10,"drop","","The `drop` method, called when the value goes out of scope.",25],[8,"Add","","The `Add` trait is used to specify the functionality of `+`."],[16,"Output","core::ops::Add","The resulting type after applying the `+` operator"],[10,"add","core::ops","The method for the `+` operator",26],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`."],[16,"Output","core::ops::Sub","The resulting type after applying the `-` operator"],[10,"sub","core::ops","The method for the `-` operator",27],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`."],[16,"Output","core::ops::Mul","The resulting type after applying the `*` operator"],[10,"mul","core::ops","The method for the `*` operator",28],[8,"Div","","The `Div` trait is used to specify the functionality of `/`."],[16,"Output","core::ops::Div","The resulting type after applying the `/` operator"],[10,"div","core::ops","The method for the `/` operator",29],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`."],[16,"Output","core::ops::Rem","The resulting type after applying the `%` operator"],[10,"rem","core::ops","The method for the `%` operator",30],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`."],[16,"Output","core::ops::Neg","The resulting type after applying the `-` operator"],[10,"neg","core::ops","The method for the unary `-` operator",31],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`."],[16,"Output","core::ops::Not","The resulting type after applying the `!` operator"],[10,"not","core::ops","The method for the unary `!` operator",32],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`."],[16,"Output","core::ops::BitAnd","The resulting type after applying the `&` operator"],[10,"bitand","core::ops","The method for the `&` operator",33],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`."],[16,"Output","core::ops::BitOr","The resulting type after applying the `|` operator"],[10,"bitor","core::ops","The method for the `|` operator",34],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`."],[16,"Output","core::ops::BitXor","The resulting type after applying the `^` operator"],[10,"bitxor","core::ops","The method for the `^` operator",35],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`."],[16,"Output","core::ops::Shl","The resulting type after applying the `<<` operator"],[10,"shl","core::ops","The method for the `<<` operator",36],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`."],[16,"Output","core::ops::Shr","The resulting type after applying the `>>` operator"],[10,"shr","core::ops","The method for the `>>` operator",37],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context."],[16,"Output","core::ops::Index","The returned type after indexing"],[10,"index","core::ops","The method for the indexing (`Foo[Bar]`) operation",38],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context."],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",39],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations like `*v`."],[16,"Target","core::ops::Deref","The resulting type after dereferencing"],[10,"deref","core::ops","The method called to dereference a value",40],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`"],[10,"deref_mut","","The method called to mutably dereference a value",41],[8,"Fn","","A version of the call operator that takes an immutable receiver."],[16,"Output","core::ops::Fn","The returned type after the call operator is used."],[10,"call","core::ops","This is called when the call operator is used.",42],[8,"FnMut","","A version of the call operator that takes a mutable receiver."],[16,"Output","core::ops::FnMut","The returned type after the call operator is used."],[10,"call_mut","core::ops","This is called when the call operator is used.",43],[8,"FnOnce","","A version of the call operator that takes a by-value receiver."],[16,"Output","core::ops::FnOnce","The returned type after the call operator is used."],[10,"call_once","core::ops","This is called when the call operator is used.",44],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"eq","","",45],[11,"ne","","",45],[11,"clone","","",45],[11,"fmt","","",45],[11,"eq","","",22],[11,"ne","","",22],[11,"clone","","",22],[11,"fmt","","",22],[11,"eq","","",23],[11,"ne","","",23],[11,"clone","","",23],[11,"fmt","","",23],[11,"eq","","",24],[11,"ne","","",24],[11,"clone","","",24],[11,"fmt","","",24],[6,"Target","",""],[6,"Target","",""],[6,"Output","",""],[6,"Output","",""],[0,"cmp","core","Functionality for ordering and comparison."],[4,"Ordering","core::cmp","An `Ordering` is the result of a comparison between two values."],[13,"Less","","An ordering where a compared value is less [than another].",46],[13,"Equal","","An ordering where a compared value is equal [to another].",46],[13,"Greater","","An ordering where a compared value is greater [than another].",46],[5,"min","","Compare and return the minimum of two values."],[5,"max","","Compare and return the maximum of two values."],[5,"partial_min","","Compare and return the minimum of two values if there is one."],[5,"partial_max","","Compare and return the maximum of two values if there is one."],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence relations](\nhttp://en.wikipedia.org/wiki/Partial_equivalence_relation)."],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",47],[11,"ne","","This method tests for `!=`.",47],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation)."],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order)."],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",48],[8,"PartialOrd","","Trait for values that can be compared for a sort-order."],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",49],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",49],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\noperator.",49],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",49],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\noperator.",49],[11,"fmt","","",46],[11,"eq","","",46],[11,"ne","","",46],[11,"clone","","",46],[11,"reverse","","Reverse the `Ordering`.",46],[11,"cmp","","",46],[11,"partial_cmp","","",46],[0,"clone","core","The `Clone` trait for types that cannot be 'implicitly copied'"],[8,"Clone","core::clone","A common trait for cloning an object."],[10,"clone","","Returns a copy of the value.",50],[11,"clone_from","","Perform copy-assignment from `source`.",50],[0,"default","core","The `Default` trait for types which may have meaningful default values."],[8,"Default","core::default","A trait that types which have a useful default value should implement."],[10,"default","","Returns the \"default value\" for a type.",51],[0,"any","core","Traits for dynamic typing of any `'static` type (through runtime reflection)"],[3,"TypeId","core::any","A `TypeId` represents a globally unique identifier for a type."],[8,"Any","","The `Any` trait is implemented by all `'static` types, and can be used for\ndynamic typing"],[10,"get_type_id","","Get the `TypeId` of `self`",52],[11,"is","core","Returns true if the boxed type is the same as `T`",52],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",52],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",52],[11,"hash","core::any","",53],[11,"fmt","","",53],[11,"eq","","",53],[11,"ne","","",53],[11,"clone","","",53],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",53],[0,"atomic","core","Atomic types"],[3,"AtomicBool","core::atomic","A boolean type which can be safely shared between threads."],[3,"AtomicIsize","","A signed integer type which can be safely shared between threads."],[3,"AtomicUsize","","An unsigned integer type which can be safely shared between threads."],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads."],[3,"AtomicInt","",""],[3,"AtomicUint","",""],[4,"Ordering","","Atomic memory orderings"],[13,"Relaxed","","No ordering constraints, only atomic operations.",54],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",54],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",54],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",54],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",54],[5,"fence","","An atomic fence."],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`."],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`."],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`."],[17,"ATOMIC_INT_INIT","",""],[17,"ATOMIC_UINT_INIT","",""],[11,"new","","Creates a new `AtomicBool`.",55],[11,"load","","Loads a value from the bool.",55],[11,"store","","Stores a value into the bool.",55],[11,"swap","","Stores a value into the bool, returning the old value.",55],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",55],[11,"fetch_and","","Logical \"and\" with a boolean value.",55],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",55],[11,"fetch_or","","Logical \"or\" with a boolean value.",55],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",55],[11,"new","","Creates a new `AtomicIsize`.",56],[11,"load","","Loads a value from the isize.",56],[11,"store","","Stores a value into the isize.",56],[11,"swap","","Stores a value into the isize, returning the old value.",56],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",56],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",56],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",56],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",56],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",56],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",56],[11,"new","","Creates a new `AtomicUsize`.",57],[11,"load","","Loads a value from the usize.",57],[11,"store","","Stores a value into the usize.",57],[11,"swap","","Stores a value into the usize, returning the old value.",57],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",57],[11,"fetch_add","","Add to the current usize, returning the previous value.",57],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",57],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",57],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",57],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",57],[11,"new","","Creates a new `AtomicPtr`.",58],[11,"load","","Loads a value from the pointer.",58],[11,"store","","Stores a value into the pointer.",58],[11,"swap","","Stores a value into the pointer, returning the old value.",58],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",58],[11,"new","","",59],[11,"load","","",59],[11,"store","","",59],[11,"swap","","",59],[11,"compare_and_swap","","",59],[11,"fetch_add","","",59],[11,"fetch_sub","","",59],[11,"fetch_and","","",59],[11,"fetch_or","","",59],[11,"fetch_xor","","",59],[11,"new","","",60],[11,"load","","",60],[11,"store","","",60],[11,"swap","","",60],[11,"compare_and_swap","","",60],[11,"fetch_add","","",60],[11,"fetch_sub","","",60],[11,"fetch_and","","",60],[11,"fetch_or","","",60],[11,"fetch_xor","","",60],[0,"cell","core","Shareable mutable containers."],[3,"Cell","core::cell","A mutable memory location that admits only `Copy` data."],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules"],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell<T>`."],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`."],[3,"UnsafeCell","","The core primitive for interior mutability in Rust."],[12,"value","","Wrapped value",61],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell<T>`."],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",62],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",62],[13,"Unused","","There are no outstanding borrows on this cell.",62],[5,"clone_ref","","Copy a `Ref`."],[11,"new","","Creates a new `Cell` containing the given value.",63],[11,"get","","Returns a copy of the contained value.",63],[11,"set","","Sets the contained value.",63],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",63],[11,"clone","","",63],[11,"default","","",63],[11,"eq","","",63],[11,"fmt","","",62],[11,"eq","","",62],[11,"ne","","",62],[11,"clone","","",62],[11,"new","","Creates a new `RefCell` containing `value`.",64],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",64],[11,"borrow_state","","Query the current state of this `RefCell`",64],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",64],[11,"borrow","","Immutably borrows the wrapped value.",64],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",64],[11,"borrow_mut","","Mutably borrows the wrapped value.",64],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",64],[11,"clone","","",64],[11,"default","","",64],[11,"eq","","",64],[6,"Target","",""],[11,"deref","","",65],[6,"Target","",""],[11,"deref","","",66],[11,"deref_mut","","",66],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",61],[11,"get","","Gets a mutable pointer to the wrapped value.",61],[11,"into_inner","","Unwraps the value",61],[0,"char","core","Character manipulation."],[3,"EscapeUnicode","core::char","An iterator over the characters that represent a `char`, as escaped by\nRust's unicode escaping rules."],[3,"EscapeDefault","","An iterator over the characters that represent a `char`, escaped\nfor maximum portability."],[5,"from_u32","","Converts a `u32` to an `Option<char>`."],[5,"from_digit","","Converts a number to the character representing it."],[5,"encode_utf8_raw","","Encodes a raw u32 value as UTF-8 into the provided byte buffer,\nand then returns the number of bytes written."],[5,"encode_utf16_raw","","Encodes a raw u32 value as UTF-16 into the provided `u16` buffer,\nand then returns the number of `u16`s written."],[17,"MAX","","The highest valid code point"],[8,"CharExt","","Basic `char` manipulations."],[10,"is_digit","","Checks if a `char` parses as a numeric digit in the given radix.",67],[10,"to_digit","","Converts a character to the corresponding digit.",67],[10,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",67],[10,"escape_default","","Returns an iterator that yields the 'default' ASCII and\nC++11-like literal escape of a character, as `char`s.",67],[10,"len_utf8","","Returns the number of bytes this character would need if encoded in UTF-8.",67],[10,"len_utf16","","Returns the number of bytes this character would need if encoded in UTF-16.",67],[10,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer, and then returns the number\nof bytes written.",67],[10,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer, and then returns the\nnumber of `u16`s written.",67],[11,"clone","","",68],[6,"Item","",""],[11,"next","","",68],[11,"clone","","",69],[6,"Item","",""],[11,"next","","",69],[0,"panicking","core","Panic support for libcore"],[5,"panic","core::panicking",""],[5,"panic_fmt","",""],[0,"finally","core","The Finally trait provides a method, `finally` on\nstack closures that emulates Java-style try/finally blocks."],[5,"try_finally","core::finally","The most general form of the `finally` functions. The function\n`try_fn` will be invoked first; whether or not it panics, the\nfunction `finally_fn` will be invoked next. The two parameters\n`mutate` and `drop` are used to thread state through the two\nclosures. `mutate` is used for any shared, mutable state that both\nclosures require access to; `drop` is used for any state that the\n`try_fn` requires ownership of."],[8,"Finally","","A trait for executing a destructor unconditionally after a block of code,\nregardless of whether the blocked fails."],[10,"finally","","Executes this object, unconditionally running `dtor` after this block of\ncode has run.",70],[0,"iter","core","Composable external iterators"],[3,"Rev","core::iter","An double-ended iterator with the direction inverted"],[3,"Cloned","","An iterator that clones the elements of an underlying iterator"],[3,"Cycle","","An iterator that repeats endlessly"],[3,"Chain","","An iterator that strings two iterators together"],[3,"Zip","","An iterator that iterates two other iterators simultaneously"],[3,"Map","","An iterator that maps the values of `iter` with `f`"],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`"],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`"],[3,"Enumerate","","An iterator that yields the current count and the element during iteration"],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element."],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true"],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true"],[3,"Skip","","An iterator that skips over `n` elements of `iter`."],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`."],[3,"Scan","","An iterator to maintain state while iterating another iterator"],[12,"state","","The current internal state to be passed to the closure next.",71],[3,"FlatMap","","An iterator that maps each element to an iterator,\nand yields the elements of the produced iterators\n"],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once."],[3,"Inspect","","An iterator that calls a function with a reference to each\nelement before yielding it."],[3,"Unfold","","An iterator that passes mutable state to a closure and yields the result."],[12,"state","","Internal state that will be passed to the closure on the next iteration",72],[3,"Counter","","An infinite iterator starting at `start` and advancing by `step` with each\niteration"],[3,"Range","","An iterator over the range [start, stop)"],[3,"RangeInclusive","","An iterator over the range [start, stop]"],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[3,"Repeat","","An iterator that repeats an element endlessly"],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `min_max`. See `IteratorOrdExt::min_max` for more detail."],[13,"NoElements","","Empty iterator",73],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",73],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",73],[5,"count","","Creates a new counter with the specified start/step"],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[5,"range_inclusive","","Return an iterator over the range [start, stop]"],[5,"range_step","","Return an iterator over the range [start, stop) by `step`."],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`."],[5,"iterate","","Create a new iterator that produces an infinite sequence of\nrepeated applications of the given function `f`."],[5,"repeat","","Create a new iterator that endlessly repeats the element `elt`."],[0,"order","","Functions for lexicographical ordering of sequences."],[5,"equals","core::iter::order","Compare `a` and `b` for equality using `Eq`"],[5,"cmp","","Order `a` and `b` lexicographically using `Ord`"],[5,"partial_cmp","","Order `a` and `b` lexicographically using `PartialOrd`"],[5,"eq","","Compare `a` and `b` for equality (Using partial equality, `PartialEq`)"],[5,"ne","","Compare `a` and `b` for nonequality (Using partial equality, `PartialEq`)"],[5,"lt","","Return `a` < `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"le","","Return `a` <= `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"gt","","Return `a` > `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"ge","","Return `a` >= `b` lexicographically (Using partial order, `PartialOrd`)"],[6,"Iterate","core::iter","An iterator that repeatedly applies a given function, starting\nfrom a given seed value."],[8,"Iterator","","An interface for dealing with \"external iterators\". These types of iterators\ncan be resumed at any time as all state is stored internally as opposed to\nbeing located on the call stack."],[16,"Item","core::iter::Iterator","The type of the elements being iterated"],[10,"next","core::iter","Advance the iterator and return the next value. Return `None` when the end is reached.",74],[11,"size_hint","","Returns a lower and upper bound on the remaining length of the iterator.",74],[8,"FromIterator","","Conversion from an `Iterator`"],[10,"from_iter","","Build a container with elements from something iterable.",75],[8,"IntoIterator","","Conversion into an `Iterator`"],[16,"Item","core::iter::IntoIterator","The type of the elements being iterated"],[16,"IntoIter","","A container for iterating over elements of type Item"],[10,"into_iter","core::iter","Consumes `Self` and returns an iterator over it",76],[8,"Extend","","A type growable from an `Iterator` implementation"],[10,"extend","","Extend a container with the elements yielded by an arbitrary iterator",77],[8,"IteratorExt","","An extension trait providing numerous methods applicable to all iterators."],[11,"count","","Counts the number of elements in this iterator.",78],[11,"last","","Loops through the entire iterator, returning the last element.",78],[11,"nth","","Loops through `n` iterations, returning the `n`th element of the\niterator.",78],[11,"chain","","Chain this iterator with another, returning a new iterator that will\nfinish iterating over the current iterator, and then iterate\nover the other specified iterator.",78],[11,"zip","","Creates an iterator that iterates over both this and the specified\niterators simultaneously, yielding the two elements as pairs. When\neither iterator returns None, all further invocations of next() will\nreturn None.",78],[11,"map","","Creates a new iterator that will apply the specified function to each\nelement returned by the first, yielding the mapped element instead.",78],[11,"filter","","Creates an iterator that applies the predicate to each element returned\nby this iterator. The only elements that will be yielded are those that\nmake the predicate evaluate to `true`.",78],[11,"filter_map","","Creates an iterator that both filters and maps elements.\nIf the specified function returns None, the element is skipped.\nOtherwise the option is unwrapped and the new value is yielded.",78],[11,"enumerate","","Creates an iterator that yields a pair of the value returned by this\niterator plus the current index of iteration.",78],[11,"peekable","","Creates an iterator that has a `.peek()` method\nthat returns an optional reference to the next element.",78],[11,"skip_while","","Creates an iterator that invokes the predicate on elements\nuntil it returns false. Once the predicate returns false, that\nelement and all further elements are yielded.",78],[11,"take_while","","Creates an iterator that yields elements so long as the predicate\nreturns true. After the predicate returns false for the first time, no\nfurther elements will be yielded.",78],[11,"skip","","Creates an iterator that skips the first `n` elements of this iterator,\nand then yields all further items.",78],[11,"take","","Creates an iterator that yields the first `n` elements of this\niterator.",78],[11,"scan","","Creates a new iterator that behaves in a similar fashion to fold.\nThere is a state which is passed between each iteration and can be\nmutated as necessary. The yielded values from the closure are yielded\nfrom the Scan instance when not None.",78],[11,"flat_map","","Creates an iterator that maps each element to an iterator,\nand yields the elements of the produced iterators.",78],[11,"fuse","","Creates an iterator that yields `None` forever after the underlying\niterator yields `None`. Random-access iterator behavior is not\naffected, only single and double-ended iterator behavior.",78],[11,"inspect","","Creates an iterator that calls a function with a reference to each\nelement before yielding it. This is often useful for debugging an\niterator pipeline.",78],[11,"by_ref","","Creates a wrapper around a mutable reference to the iterator.",78],[11,"collect","","Loops through the entire iterator, collecting all of the elements into\na container implementing `FromIterator`.",78],[11,"partition","","Loops through the entire iterator, collecting all of the elements into\none of two containers, depending on a predicate. The elements of the\nfirst container satisfy the predicate, while the elements of the second\ndo not.",78],[11,"fold","","Performs a fold operation over the entire iterator, returning the\neventual state at the end of the iteration.",78],[11,"all","","Tests whether the predicate holds true for all elements in the iterator.",78],[11,"any","","Tests whether any element of an iterator satisfies the specified predicate.",78],[11,"find","","Returns the first element satisfying the specified predicate.",78],[11,"position","","Return the index of the first element satisfying the specified predicate",78],[11,"rposition","","Return the index of the last element satisfying the specified predicate",78],[11,"max","","Consumes the entire iterator to return the maximum element.",78],[11,"min","","Consumes the entire iterator to return the minimum element.",78],[11,"min_max","","`min_max` finds the minimum and maximum elements in the iterator.",78],[11,"max_by","","Return the element that gives the maximum value from the\nspecified function.",78],[11,"min_by","","Return the element that gives the minimum value from the\nspecified function.",78],[11,"rev","","Change the direction of the iterator",78],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",78],[11,"cloned","","Creates an iterator that clones the elements it yields. Useful for converting an\nIterator<&T> to an Iterator<T>.",78],[11,"cycle","","Repeats an iterator endlessly",78],[11,"reverse_in_place","","Use an iterator to reverse a container in place.",78],[8,"DoubleEndedIterator","","A range iterator able to yield elements from both ends"],[10,"next_back","","Yield an element from the end of the range, returning `None` if the\nrange is empty.",79],[8,"RandomAccessIterator","","An object implementing random access indexing by `usize`"],[10,"indexable","","Return the number of indexable elements. At most `std::usize::MAX`\nelements are indexable, even if the iterator represents a longer range.",80],[10,"idx","","Return an element at an index, or `None` if the index is out of bounds",80],[8,"ExactSizeIterator","","An iterator that knows its exact length"],[11,"len","","Return the exact length of the iterator.",81],[8,"AdditiveIterator","","A trait for iterators over elements which can be added together"],[10,"sum","","Iterates over the entire iterator, summing up all the elements",82],[8,"MultiplicativeIterator","","A trait for iterators over elements which can be multiplied together."],[10,"product","","Iterates over the entire iterator, multiplying all the elements",83],[6,"Item","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"clone","","",84],[6,"Item","",""],[11,"next","","",84],[11,"size_hint","","",84],[11,"next_back","","",84],[11,"indexable","","",84],[11,"idx","","",84],[11,"fmt","","",73],[11,"eq","","",73],[11,"ne","","",73],[11,"clone","","",73],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",73],[11,"clone","","",85],[6,"Item","",""],[11,"next","","",85],[11,"size_hint","","",85],[11,"next_back","","",85],[11,"indexable","","",85],[11,"idx","","",85],[11,"clone","","",86],[6,"Item","",""],[11,"next","","",86],[11,"size_hint","","",86],[11,"indexable","","",86],[11,"idx","","",86],[11,"clone","","",87],[6,"Item","",""],[11,"next","","",87],[11,"size_hint","","",87],[11,"next_back","","",87],[11,"indexable","","",87],[11,"idx","","",87],[11,"clone","","",88],[6,"Item","",""],[11,"next","","",88],[11,"size_hint","","",88],[11,"next_back","","",88],[11,"indexable","","",88],[11,"idx","","",88],[11,"clone","","",89],[6,"Item","",""],[11,"next","","",89],[11,"size_hint","","",89],[11,"next_back","","",89],[11,"indexable","","",89],[11,"idx","","",89],[11,"clone","","",90],[6,"Item","",""],[11,"next","","",90],[11,"size_hint","","",90],[11,"next_back","","",90],[11,"clone","","",91],[6,"Item","",""],[11,"next","","",91],[11,"size_hint","","",91],[11,"next_back","","",91],[11,"clone","","",92],[6,"Item","",""],[11,"next","","",92],[11,"size_hint","","",92],[11,"next_back","","",92],[11,"indexable","","",92],[11,"idx","","",92],[11,"clone","","",93],[6,"Item","",""],[11,"next","","",93],[11,"size_hint","","",93],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",93],[11,"is_empty","","Check whether peekable iterator is empty or not.",93],[11,"clone","","",94],[6,"Item","",""],[11,"next","","",94],[11,"size_hint","","",94],[11,"clone","","",95],[6,"Item","",""],[11,"next","","",95],[11,"size_hint","","",95],[11,"clone","","",96],[6,"Item","",""],[11,"next","","",96],[11,"size_hint","","",96],[11,"indexable","","",96],[11,"idx","","",96],[11,"clone","","",97],[6,"Item","",""],[11,"next","","",97],[11,"size_hint","","",97],[11,"indexable","","",97],[11,"idx","","",97],[11,"clone","","",71],[6,"Item","",""],[11,"next","","",71],[11,"size_hint","","",71],[11,"clone","","",98],[6,"Item","",""],[11,"next","","",98],[11,"size_hint","","",98],[11,"next_back","","",98],[11,"clone","","",99],[6,"Item","",""],[11,"next","","",99],[11,"size_hint","","",99],[11,"next_back","","",99],[11,"indexable","","",99],[11,"idx","","",99],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",99],[11,"clone","","",100],[6,"Item","",""],[11,"next","","",100],[11,"size_hint","","",100],[11,"next_back","","",100],[11,"indexable","","",100],[11,"idx","","",100],[11,"clone","","",72],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",72],[6,"Item","",""],[11,"next","","",72],[11,"size_hint","","",72],[11,"clone","","",101],[6,"Item","",""],[11,"next","","",101],[11,"size_hint","","",101],[11,"clone","","",102],[6,"Item","",""],[11,"next","","",102],[11,"size_hint","","",102],[11,"next_back","","",102],[11,"clone","","",103],[6,"Item","",""],[11,"next","","",103],[11,"size_hint","","",103],[11,"next_back","","",103],[11,"clone","","",104],[6,"Item","",""],[11,"next","","",104],[11,"clone","","",105],[6,"Item","",""],[11,"next","","",105],[6,"Item","",""],[11,"next","core::ops","",22],[11,"size_hint","","",22],[11,"next_back","","",22],[6,"Item","core::iter",""],[11,"next","core::ops","",23],[11,"clone","core::iter","",106],[6,"Item","",""],[11,"next","","",106],[11,"size_hint","","",106],[11,"next_back","","",106],[11,"indexable","","",106],[11,"idx","","",106],[0,"option","core","Optional values"],[3,"Iter","core::option","An iterator over a reference of the contained item in an Option."],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option."],[3,"IntoIter","","An iterator over the item contained inside an Option."],[4,"Option","","The `Option` type. See [the module level documentation](../index.html) for more."],[13,"None","","No value",107],[13,"Some","","Some value `T`",107],[11,"hash","","",107],[11,"fmt","","",107],[11,"cmp","","",107],[11,"partial_cmp","","",107],[11,"lt","","",107],[11,"le","","",107],[11,"gt","","",107],[11,"ge","","",107],[11,"eq","","",107],[11,"ne","","",107],[11,"clone","","",107],[11,"is_some","","Returns `true` if the option is a `Some` value",107],[11,"is_none","","Returns `true` if the option is a `None` value",107],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",107],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",107],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",107],[11,"expect","","Unwraps an option, yielding the content of a `Some`",107],[11,"unwrap","","Returns the inner `T` of a `Some(T)`.",107],[11,"unwrap_or","","Returns the contained value or a default.",107],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",107],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",107],[11,"map_or","","Applies a function to the contained value or returns a default.",107],[11,"map_or_else","","Applies a function to the contained value or computes a default.",107],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",107],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",107],[11,"iter","","Returns an iterator over the possibly contained value.",107],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",107],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",107],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",107],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",107],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",107],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",107],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",107],[11,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",107],[11,"unwrap_or_default","","Returns the contained value or a default",107],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",107],[11,"default","","",107],[6,"Item","",""],[11,"next","","",108],[11,"size_hint","","",108],[11,"next_back","","",108],[11,"clone","","",108],[6,"Item","",""],[11,"next","","",109],[11,"size_hint","","",109],[11,"next_back","","",109],[6,"Item","",""],[11,"next","","",110],[11,"size_hint","","",110],[11,"next_back","","",110],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",107],[0,"raw","core","Contains struct definitions for the layout of compiler built-in types."],[3,"Slice","core::raw","The representation of a slice like `&[T]`."],[12,"data","","",111],[12,"len","","",111],[3,"Closure","","The representation of an old closure."],[12,"code","","",112],[12,"env","","",112],[3,"TraitObject","","The representation of a trait object like `&SomeTrait`."],[12,"data","","",113],[12,"vtable","","",113],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values."],[11,"repr","","This function \"unwraps\" a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",114],[0,"result","core","Error handling with the `Result` type"],[3,"Iter","core::result","An iterator over a reference to the `Ok` variant of a `Result`."],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`."],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`."],[4,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`)."],[13,"Ok","","Contains the success value",115],[13,"Err","","Contains the error value",115],[5,"fold","","Perform a fold operation over the result values from an iterator."],[11,"hash","","",115],[11,"fmt","","",115],[11,"cmp","","",115],[11,"partial_cmp","","",115],[11,"lt","","",115],[11,"le","","",115],[11,"gt","","",115],[11,"ge","","",115],[11,"eq","","",115],[11,"ne","","",115],[11,"clone","","",115],[11,"is_ok","","Returns true if the result is `Ok`",115],[11,"is_err","","Returns true if the result is `Err`",115],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",115],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",115],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",115],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",115],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",115],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",115],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",115],[11,"iter","","Returns an iterator over the possibly contained value.",115],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",115],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",115],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",115],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",115],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",115],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",115],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",115],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",115],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",115],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",115],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",115],[6,"Item","",""],[11,"next","","",116],[11,"size_hint","","",116],[11,"next_back","","",116],[11,"clone","","",116],[6,"Item","",""],[11,"next","","",117],[11,"size_hint","","",117],[11,"next_back","","",117],[6,"Item","",""],[11,"next","","",118],[11,"size_hint","","",118],[11,"next_back","","",118],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",115],[0,"simd","core","SIMD vectors."],[3,"i8x16","core::simd",""],[3,"i16x8","",""],[3,"i32x4","",""],[3,"i64x2","",""],[3,"u8x16","",""],[3,"u16x8","",""],[3,"u32x4","",""],[3,"u64x2","",""],[3,"f32x4","",""],[3,"f64x2","",""],[11,"fmt","","",119],[11,"fmt","","",120],[11,"fmt","","",121],[11,"fmt","","",122],[11,"fmt","","",123],[11,"fmt","","",124],[11,"fmt","","",125],[11,"fmt","","",126],[11,"fmt","","",127],[11,"fmt","","",128],[0,"slice","core","Slice management and manipulation"],[3,"Iter","core::slice","Immutable slice iterator"],[3,"IterMut","","Mutable slice iterator."],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction."],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`."],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"Windows","","An iterator over overlapping subslices of length `size`."],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime)."],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder."],[5,"ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"mut_ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"from_raw_parts","","Forms a slice from a pointer and a length."],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned."],[5,"from_raw_buf","","Forms a slice from a pointer and a length."],[5,"from_raw_mut_buf","","Performs the same functionality as `from_raw_buf`, except that a mutable\nslice is returned."],[0,"bytes","","Operations on `[u8]`."],[5,"copy_memory","core::slice::bytes","Copies data from `src` to `dst`"],[8,"MutableByteVector","","A trait for operations on mutable `[u8]`s."],[10,"set_memory","","Sets all bytes of the receiver to the given value.",129],[8,"SliceExt","core::slice","Extension methods for slices."],[16,"Item","core::slice::SliceExt",""],[10,"split_at","core::slice","",130],[10,"iter","","",130],[10,"split","","",130],[10,"splitn","","",130],[10,"rsplitn","","",130],[10,"windows","","",130],[10,"chunks","","",130],[10,"get","","",130],[10,"first","","",130],[10,"tail","","",130],[10,"init","","",130],[10,"last","","",130],[10,"get_unchecked","","",130],[10,"as_ptr","","",130],[10,"binary_search_by","","",130],[10,"len","","",130],[11,"is_empty","","",130],[10,"get_mut","","",130],[10,"as_mut_slice","","",130],[10,"iter_mut","","",130],[10,"first_mut","","",130],[10,"tail_mut","","",130],[10,"init_mut","","",130],[10,"last_mut","","",130],[10,"split_mut","","",130],[10,"splitn_mut","","",130],[10,"rsplitn_mut","","",130],[10,"chunks_mut","","",130],[10,"swap","","",130],[10,"split_at_mut","","",130],[10,"reverse","","",130],[10,"get_unchecked_mut","","",130],[10,"as_mut_ptr","","",130],[10,"position_elem","","",130],[10,"rposition_elem","","",130],[10,"contains","","",130],[10,"starts_with","","",130],[10,"ends_with","","",130],[10,"binary_search","","",130],[10,"next_permutation","","",130],[10,"prev_permutation","","",130],[10,"clone_from_slice","","",130],[8,"AsSlice","","Data that is viewable as a slice."],[10,"as_slice","","Work with `self` as a slice.",131],[8,"IntSliceExt","","Extension methods for slices containing integers."],[10,"as_unsigned","","Converts the slice to an immutable slice of unsigned integers with the same width.",132],[10,"as_signed","","Converts the slice to an immutable slice of signed integers with the same width.",132],[10,"as_unsigned_mut","","Converts the slice to a mutable slice of unsigned integers with the same width.",132],[10,"as_signed_mut","","Converts the slice to a mutable slice of signed integers with the same width.",132],[6,"Item","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Output","",""],[11,"index","","",133],[6,"Output","",""],[11,"index","","",133],[6,"Output","",""],[11,"index","","",133],[6,"Output","",""],[11,"index","","",133],[11,"as_slice","","View the underlying data as a subslice of the original data.",133],[6,"Item","",""],[11,"next","","",133],[11,"size_hint","","",133],[11,"next_back","","",133],[11,"clone","","",133],[11,"indexable","","",133],[11,"idx","","",133],[6,"Output","",""],[11,"index","","",134],[6,"Output","",""],[11,"index","","",134],[6,"Output","",""],[11,"index","","",134],[6,"Output","",""],[11,"index","","",134],[11,"index_mut","","",134],[11,"index_mut","","",134],[11,"index_mut","","",134],[11,"index_mut","","",134],[11,"into_slice","","View the underlying data as a subslice of the original data.",134],[6,"Item","",""],[11,"next","","",134],[11,"size_hint","","",134],[11,"next_back","","",134],[11,"clone","","",135],[6,"Item","",""],[11,"next","","",135],[11,"size_hint","","",135],[11,"next_back","","",135],[6,"Item","",""],[11,"next","","",136],[11,"size_hint","","",136],[11,"next_back","","",136],[6,"Item","",""],[11,"next","","",137],[11,"size_hint","","",137],[6,"Item","",""],[11,"next","","",138],[11,"size_hint","","",138],[6,"Item","",""],[11,"next","","",139],[11,"size_hint","","",139],[6,"Item","",""],[11,"next","","",140],[11,"size_hint","","",140],[11,"clone","","",141],[6,"Item","",""],[11,"next","","",141],[11,"size_hint","","",141],[11,"next_back","","",141],[11,"indexable","","",141],[11,"idx","","",141],[11,"clone","","",142],[6,"Item","",""],[11,"next","","",142],[11,"size_hint","","",142],[11,"next_back","","",142],[11,"indexable","","",142],[11,"idx","","",142],[6,"Item","",""],[11,"next","","",143],[11,"size_hint","","",143],[11,"next_back","","",143],[0,"str","core","String manipulation"],[3,"ParseBoolError","core::str","An error returned when parsing a `bool` from a string fails."],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string"],[3,"CharIndices","","External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module."],[3,"Lines","","An iterator over the lines of a string, separated by `\\n`."],[3,"LinesAny","","An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`)."],[3,"MatchIndices","","An iterator over the start and end indices of the matches of a\nsubstring within a larger string"],[3,"SplitStr","","An iterator over the substrings of a string separated by a given\nsearch string"],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."],[12,"ch","","Current `char`",144],[12,"next","","Index of the first byte of the next `char`",144],[3,"Split","","Return type of `StrExt::split`"],[3,"SplitTerminator","","Return type of `StrExt::split_terminator`"],[3,"SplitN","","Return type of `StrExt::splitn`"],[3,"RSplitN","","Return type of `StrExt::rsplitn`"],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`."],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",145],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",145],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",145],[4,"Utf8Error","","Errors which can occur when attempting to interpret a byte slice as a `str`."],[13,"InvalidByte","","An invalid byte was detected at the byte offset given.",146],[13,"TooShort","","The byte slice was invalid because more bytes were needed but no more\nbytes were available.",146],[5,"from_utf8","","Converts a slice of bytes to a string slice without performing any\nallocations."],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."],[5,"from_c_str","","Constructs a static string slice from a given raw pointer."],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a\nUTF-8-like encoding)."],[5,"next_code_point_reverse","","Reads the last code point out of a byte iterator (assuming a\nUTF-8-like encoding)."],[5,"char_range_at_raw","","Pluck a code point out of a UTF-8-like byte slice and return the\nindex of the next code point."],[11,"fmt","","",145],[11,"eq","","",145],[11,"ne","","",145],[11,"clone","","",145],[8,"Pattern","","A string pattern."],[16,"Searcher","core::str::Pattern","Associated searcher for this pattern"],[10,"into_searcher","core::str","Construct the associated searcher from\n`self` and the `haystack` to search in.",147],[11,"is_contained_in","","Check whether the pattern matches anywhere in the haystack",147],[11,"is_prefix_of","","Check whether the pattern matches at the front of the haystack",147],[11,"is_suffix_of","","Check whether the pattern matches at the back of the haystack",147],[8,"Searcher","","A searcher for a string pattern."],[10,"haystack","","Getter for the underlaying string to be searched in",148],[10,"next","","Performs the next search step starting from the front.",148],[11,"next_match","","Find the next `Match` result. See `next()`",148],[11,"next_reject","","Find the next `Reject` result. See `next()`",148],[8,"ReverseSearcher","","A reverse searcher for a string pattern."],[10,"next_back","","Performs the next search step starting from the back.",149],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",149],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",149],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation."],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring."],[16,"Err","core::str::FromStr","The associated error which can be returned from parsing."],[10,"from_str","core::str","Parses a string `s` to return an optional value of this type. If the\nstring is ill-formatted, the None is returned.",150],[8,"CharEq","","Something that can be used to compare against a character"],[10,"matches","","Determine if the splitter should split at the given character",151],[10,"only_ascii","","Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",151],[8,"Str","","Any string that can be represented as a slice"],[10,"as_slice","","Work with `self` as a slice.",152],[8,"StrExt","","Methods for string slices"],[10,"contains","","",153],[10,"contains_char","","",153],[10,"chars","","",153],[10,"bytes","","",153],[10,"char_indices","","",153],[10,"split","","",153],[10,"splitn","","",153],[10,"split_terminator","","",153],[10,"rsplitn","","",153],[10,"match_indices","","",153],[10,"split_str","","",153],[10,"lines","","",153],[10,"lines_any","","",153],[10,"char_len","","",153],[10,"slice_chars","","",153],[10,"slice_unchecked","","",153],[10,"starts_with","","",153],[10,"ends_with","","",153],[10,"trim_matches","","",153],[10,"trim_left_matches","","",153],[10,"trim_right_matches","","",153],[10,"is_char_boundary","","",153],[10,"char_range_at","","",153],[10,"char_range_at_reverse","","",153],[10,"char_at","","",153],[10,"char_at_reverse","","",153],[10,"as_bytes","","",153],[10,"find","","",153],[10,"rfind","","",153],[10,"find_str","","",153],[10,"slice_shift_char","","",153],[10,"subslice_offset","","",153],[10,"as_ptr","","",153],[10,"len","","",153],[10,"is_empty","","",153],[10,"parse","","",153],[6,"Err","",""],[11,"eq","","",154],[11,"ne","","",154],[11,"clone","","",154],[11,"fmt","","",154],[11,"fmt","","",154],[11,"description","","",154],[11,"fmt","","",146],[11,"clone","","",146],[11,"eq","","",146],[11,"ne","","",146],[11,"description","","",146],[11,"fmt","","",146],[11,"clone","","",155],[6,"Item","",""],[11,"next","","",155],[11,"size_hint","","",155],[11,"next_back","","",155],[11,"clone","","",156],[6,"Item","",""],[11,"next","","",156],[11,"size_hint","","",156],[11,"next_back","","",156],[11,"clone","","",157],[6,"Item","",""],[11,"next","","",157],[11,"size_hint","","",157],[11,"next_back","","",157],[11,"len","","",157],[6,"Item","",""],[11,"next","","",158],[6,"Item","",""],[11,"next","","",159],[6,"Item","",""],[11,"next","","",160],[11,"next_back","","",160],[6,"Item","",""],[11,"next","","",161],[11,"size_hint","","",161],[11,"next_back","","",161],[6,"Item","",""],[11,"next","","",162],[11,"size_hint","","",162],[6,"Item","",""],[11,"next","","",163],[11,"size_hint","","",163],[6,"Item","",""],[11,"next","","",164],[11,"size_hint","","",164],[11,"next_back","","",164],[6,"Item","",""],[11,"next","","",165],[11,"size_hint","","",165],[11,"next_back","","",165],[0,"hash","core","Generic hashing support."],[3,"SipHasher","core::hash","An implementation of SipHash 2-4."],[5,"hash","","Hash a value with the default SipHasher algorithm (two initial keys of 0)."],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",166],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",166],[11,"result","","Returns the computed hash.",166],[11,"write","","",166],[11,"finish","","",166],[11,"clone","","",166],[11,"default","","",166],[8,"Hash","","A hashable type."],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",167],[11,"hash_slice","","Feeds a slice of this type into the state provided.",167],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes."],[10,"finish","","Completes a round of hashing, producing the output hash generated.",168],[10,"write","","Writes some data into this `Hasher`",168],[11,"write_u8","","Write a single `u8` into this hasher",168],[11,"write_u16","","Write a single `u16` into this hasher.",168],[11,"write_u32","","Write a single `u32` into this hasher.",168],[11,"write_u64","","Write a single `u64` into this hasher.",168],[11,"write_usize","","Write a single `usize` into this hasher.",168],[11,"write_i8","","Write a single `i8` into this hasher.",168],[11,"write_i16","","Write a single `i16` into this hasher.",168],[11,"write_i32","","Write a single `i32` into this hasher.",168],[11,"write_i64","","Write a single `i64` into this hasher.",168],[11,"write_isize","","Write a single `isize` into this hasher.",168],[0,"fmt","core","Utilities for formatting and printing strings"],[3,"Radix","core::fmt","A radix with in the range of `2..36`."],[3,"RadixFmt","","A helper type for formatting radixes."],[3,"Error","","The error type which is returned from formatting a message into a stream."],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits."],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification."],[5,"radix","","Constructs a radix formatter in the range of `2..36`."],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided."],[11,"eq","","",169],[11,"ne","","",169],[11,"clone","","",169],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[6,"Result","","The type returned by formatter methods."],[8,"Write","","A collection of methods that are required to format a message into a stream."],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",171],[11,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",171],[8,"Debug","","Format trait for the `:?` format. Useful for debugging, all types\nshould implement this."],[10,"fmt","","Formats the value using the given formatter.",172],[8,"Display","","When a value can be semantically expressed as a String, this trait may be\nused. It corresponds to the default format, `{}`."],[10,"fmt","","Formats the value using the given formatter.",173],[8,"Octal","","Format trait for the `o` character"],[10,"fmt","","Formats the value using the given formatter.",174],[8,"Binary","","Format trait for the `b` character"],[10,"fmt","","Formats the value using the given formatter.",175],[8,"LowerHex","","Format trait for the `x` character"],[10,"fmt","","Formats the value using the given formatter.",176],[8,"UpperHex","","Format trait for the `X` character"],[10,"fmt","","Formats the value using the given formatter.",177],[8,"Pointer","","Format trait for the `p` character"],[10,"fmt","","Formats the value using the given formatter.",178],[8,"LowerExp","","Format trait for the `e` character"],[10,"fmt","","Formats the value using the given formatter.",179],[8,"UpperExp","","Format trait for the `E` character"],[10,"fmt","","Formats the value using the given formatter.",180],[11,"fmt","","",181],[11,"fmt","","",182],[11,"fmt","","",182],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",183],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",183],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",183],[11,"write_fmt","","Writes some formatted information into this instance",183],[11,"flags","","Flags for formatting (packed version of rt::Flag)",183],[11,"fill","","Character used as 'fill' whenever there is alignment",183],[11,"align","","Flag indicating what form of alignment was requested",183],[11,"width","","Optionally specified integer width that the output should be",183],[11,"precision","","Optionally specified precision for numeric types",183],[11,"fmt","","",181],[11,"fmt","core::marker","",21],[11,"fmt","core::cell","",63],[11,"fmt","","",64],[11,"fmt","","",65],[11,"fmt","","",66],[0,"error","core","Traits for working with Errors."],[8,"Error","core::error","Base functionality for all errors in Rust."],[10,"description","","A short description of the error; usually a static string.",184],[11,"cause","","The lower-level cause of this error, if any.",184],[8,"FromError","","A trait for types that can be converted from a given error type `E`."],[10,"from_error","","Perform the conversion.",185],[14,"panic!","core","Entry point of task panic, for details, see std::macros"],[14,"assert!","","Ensure that a boolean expression is `true` at runtime."],[14,"assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[14,"debug_assert!","","Ensure that a boolean expression is `true` at runtime."],[14,"debug_assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[14,"try!","","Short circuiting evaluation on Err"],[14,"write!","","Use the `format!` syntax to write data into a buffer of type `&mut Writer`.\nSee `std::fmt` for more information."],[14,"writeln!","","Equivalent to the `write!` macro, except that a newline is appended after\nthe message is written."],[14,"unreachable!","","A utility macro for indicating unreachable code."],[14,"unimplemented!","","A standardised placeholder for marking unfinished code. It panics with the\nmessage `\"not yet implemented\"` when executed."],[14,"__impl_slice_eq1!","",""],[14,"__impl_slice_eq2!","",""],[15,"isize","","Operations and constants for pointer-sized signed integers (`isize` type)"],[15,"i8","","Operations and constants for signed 8-bits integers (`i8` type)"],[15,"i16","","Operations and constants for signed 16-bits integers (`i16` type)"],[15,"i32","","Operations and constants for signed 32-bits integers (`i32` type)"],[15,"i64","","Operations and constants for signed 64-bits integers (`i64` type)"],[15,"usize","","Operations and constants for pointer-sized unsigned integers (`usize` type)"],[15,"u8","","Operations and constants for unsigned 8-bits integers (`u8` type)"],[15,"u16","","Operations and constants for unsigned 16-bits integers (`u16` type)"],[15,"u32","","Operations and constants for unsigned 32-bits integers (`u32` type)"],[15,"u64","","Operations and constants for unsigned 64-bits integer (`u64` type)"],[15,"f32","","Operations and constants for 32-bits floats (`f32` type)"],[15,"f64","","Operations and constants for 64-bits floats (`f64` type)"],[15,"char","","Character manipulation."],[15,"slice","","Slice management and manipulation"],[15,"str","","String manipulation"],[15,"bool","",""],[15,"tuple","","Operations on tuples"],[11,"is_contained_in","core::str","Check whether the pattern matches anywhere in the haystack",147],[11,"is_prefix_of","","Check whether the pattern matches at the front of the haystack",147],[11,"is_suffix_of","","Check whether the pattern matches at the back of the haystack",147],[11,"next_match","","Find the next `Match` result. See `next()`",148],[11,"next_reject","","Find the next `Reject` result. See `next()`",148],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",149],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",149]],"paths":[[4,"FpCategory"],[8,"WrappingOps"],[8,"OverflowingOps"],[3,"Wrapping"],[8,"Int"],[8,"SignedInt"],[8,"UnsignedInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[8,"FromStrRadix"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"TyDesc"],[3,"NonZero"],[8,"PtrExt"],[8,"MutPtrExt"],[3,"Unique"],[3,"NoCopy"],[3,"Managed"],[3,"PhantomData"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[3,"RangeFull"],[4,"Ordering"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"Clone"],[8,"Default"],[8,"Any"],[3,"TypeId"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[3,"UnsafeCell"],[4,"BorrowState"],[3,"Cell"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[8,"CharExt"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[8,"Finally"],[3,"Scan"],[3,"Unfold"],[4,"MinMaxResult"],[8,"Iterator"],[8,"FromIterator"],[8,"IntoIterator"],[8,"Extend"],[8,"IteratorExt"],[8,"DoubleEndedIterator"],[8,"RandomAccessIterator"],[8,"ExactSizeIterator"],[8,"AdditiveIterator"],[8,"MultiplicativeIterator"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Counter"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Repeat"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"Closure"],[3,"TraitObject"],[8,"Repr"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[8,"MutableByteVector"],[8,"SliceExt"],[8,"AsSlice"],[8,"IntSliceExt"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"CharRange"],[4,"SearchStep"],[4,"Utf8Error"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"CharEq"],[8,"Str"],[8,"StrExt"],[3,"ParseBoolError"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"MatchIndices"],[3,"SplitStr"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[8,"Hash"],[8,"Hasher"],[3,"Radix"],[3,"RadixFmt"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Error"],[8,"FromError"]]};
searchIndex['graphviz'] = {"items":[[0,"","graphviz","Generate files suitable for use with [Graphviz](http://www.graphviz.org/)"],[3,"Id","","`Id` is a Graphviz `ID`."],[4,"LabelText","","The text for a graphviz label on a node or edge."],[13,"LabelStr","","This kind of label preserves the text directly as is.",0],[13,"EscStr","","This kind of label uses the graphviz label escString type:\nhttp://www.graphviz.org/content/attrs#kescString",0],[4,"RenderOption","",""],[13,"NoEdgeLabels","","",1],[13,"NoNodeLabels","","",1],[5,"default_options","","Returns vec holding all the default render options."],[5,"render","","Renders directed graph `g` into the writer `w` in DOT syntax.\n(Simple wrapper around `render_opts` that passes a default set of options.)"],[5,"render_opts","","Renders directed graph `g` into the writer `w` in DOT syntax.\n(Main entry point for the library.)"],[6,"Nodes","",""],[6,"Edges","",""],[8,"Labeller","","Each instance of a type that implements `Label<C>` maps to a\nunique identifier with respect to `C`, which is used to identify\nit in the generated .dot file. They can also provide more\nelaborate (and non-unique) label text that is used in the graphviz\nrendered output.\nThe graph instance is responsible for providing the DOT compatible\nidentifiers for the nodes and (optionally) rendered labels for the nodes and\nedges, as well as an identifier for the graph itself."],[10,"graph_id","","Must return a DOT compatible identifier naming the graph.",2],[10,"node_id","","Maps `n` to a unique identifier with respect to `self`. The\nimplementer is responsible for ensuring that the returned name\nis a valid DOT identifier.",2],[11,"node_label","","Maps `n` to a label that will be used in the rendered output.\nThe label need not be unique, and may be the empty string; the\ndefault is just the output from `node_id`.",2],[11,"edge_label","","Maps `e` to a label that will be used in the rendered output.\nThe label need not be unique, and may be the empty string; the\ndefault is in fact the empty string.",2],[8,"GraphWalk","","GraphWalk is an abstraction over a directed graph = (nodes,edges)\nmade up of node handles `N` and edge handles `E`, where each `E`\ncan be mapped to its source and target nodes."],[10,"nodes","","Returns all the nodes in this graph.",3],[10,"edges","","Returns all of the edges in this graph.",3],[10,"source","","The source node for `edge`.",3],[10,"target","","The target node for `edge`.",3],[11,"new","","Creates an `Id` named `name`.",4],[11,"as_slice","","",4],[11,"name","","",4],[11,"label","","",0],[11,"escaped","","",0],[11,"escape","","Renders text as string suitable for a label in a .dot file.",0],[11,"prefix_line","","Puts `prefix` on a line above this label, with a blank line separator.",0],[11,"suffix_line","","Puts `suffix` on a line below this label, with a blank line separator.",0],[11,"fmt","","",1],[11,"eq","","",1],[11,"ne","","",1]],"paths":[[4,"LabelText"],[4,"RenderOption"],[8,"Labeller"],[8,"GraphWalk"],[3,"Id"]]};
searchIndex['test'] = {"items":[[0,"","test","Support code for rustc's built in unit-test and micro-benchmarking\nframework."],[3,"Bencher","","Manager of the benchmarking runs."],[12,"bytes","","",0],[3,"TestDesc","",""],[12,"name","","",1],[12,"ignore","","",1],[12,"should_panic","","",1],[3,"TestDescAndFn","",""],[12,"desc","","",2],[12,"testfn","","",2],[3,"Metric","",""],[3,"MetricMap","",""],[3,"TestOpts","",""],[12,"filter","","",3],[12,"run_ignored","","",3],[12,"run_tests","","",3],[12,"run_benchmarks","","",3],[12,"logfile","","",3],[12,"nocapture","","",3],[12,"color","","",3],[3,"BenchSamples","",""],[4,"TestName","",""],[13,"StaticTestName","","",4],[13,"DynTestName","","",4],[4,"TestFn","",""],[13,"StaticTestFn","","",5],[13,"StaticBenchFn","","",5],[13,"StaticMetricFn","","",5],[13,"DynTestFn","","",5],[13,"DynMetricFn","","",5],[13,"DynBenchFn","","",5],[4,"ShouldPanic","",""],[13,"No","","",6],[13,"Yes","","",6],[4,"ColorConfig","",""],[13,"AutoColor","","",7],[13,"AlwaysColor","","",7],[13,"NeverColor","","",7],[4,"TestResult","",""],[13,"TrOk","","",8],[13,"TrFailed","","",8],[13,"TrIgnored","","",8],[13,"TrMetrics","","",8],[13,"TrBench","","",8],[5,"test_main","",""],[5,"test_main_static","",""],[5,"parse_opts","",""],[5,"fmt_bench_samples","",""],[5,"run_tests_console","",""],[5,"filter_tests","",""],[5,"run_test","",""],[5,"black_box","","A function that is opaque to the optimizer, to allow benchmarks to\npretend to use outputs to assist in avoiding dead-code\nelimination."],[0,"test","",""],[0,"stats","",""],[3,"Summary","test::stats","Extracted collection of all the summary statistics of a sample set."],[12,"sum","","",9],[12,"min","","",9],[12,"max","","",9],[12,"mean","","",9],[12,"median","","",9],[12,"var","","",9],[12,"std_dev","","",9],[12,"std_dev_pct","","",9],[12,"median_abs_dev","","",9],[12,"median_abs_dev_pct","","",9],[12,"quartiles","","",9],[12,"iqr","","",9],[5,"winsorize","","Winsorize a set of samples, replacing values above the `100-pct` percentile and below the `pct`\npercentile with those percentiles themselves. This is a way of minimizing the effect of\noutliers, at the cost of biasing the sample. It differs from trimming in that it does not\nchange the number of samples, just changes the values of those that are outliers."],[5,"freq_count","","Returns a HashMap with the number of occurrences of every element in the\nsequence that the iterator exposes."],[8,"Stats","","Trait that provides simple descriptive statistics on a univariate set of numeric samples."],[10,"sum","","Sum of the samples.",10],[10,"min","","Minimum value of the samples.",10],[10,"max","","Maximum value of the samples.",10],[10,"mean","","Arithmetic mean (average) of the samples: sum divided by sample-count.",10],[10,"median","","Median of the samples: value separating the lower half of the samples from the higher half.\nEqual to `self.percentile(50.0)`.",10],[10,"var","","Variance of the samples: bias-corrected mean of the squares of the differences of each\nsample from the sample mean. Note that this calculates the _sample variance_ rather than the\npopulation variance, which is assumed to be unknown. It therefore corrects the `(n-1)/n`\nbias that would appear if we calculated a population variance, by dividing by `(n-1)` rather\nthan `n`.",10],[10,"std_dev","","Standard deviation: the square root of the sample variance.",10],[10,"std_dev_pct","","Standard deviation as a percent of the mean value. See `std_dev` and `mean`.",10],[10,"median_abs_dev","","Scaled median of the absolute deviations of each sample from the sample median. This is a\nrobust (distribution-agnostic) estimator of sample variability. Use this in preference to\n`std_dev` if you cannot assume your sample is normally distributed. Note that this is scaled\nby the constant `1.4826` to allow its use as a consistent estimator for the standard\ndeviation.",10],[10,"median_abs_dev_pct","","Median absolute deviation as a percent of the median. See `median_abs_dev` and `median`.",10],[10,"percentile","","Percentile: the value below which `pct` percent of the values in `self` fall. For example,\npercentile(95.0) will return the value `v` such that 95% of the samples `s` in `self`\nsatisfy `s <= v`.",10],[10,"quartiles","","Quartiles of the sample: three values that divide the sample into four equal groups, each\nwith 1/4 of the data. The middle value is the median. See `median` and `percentile`. This\nfunction may calculate the 3 quartiles more efficiently than 3 calls to `percentile`, but\nis otherwise equivalent.",10],[10,"iqr","","Inter-quartile range: the difference between the 25th percentile (1st quartile) and the 75th\npercentile (3rd quartile). See `quartiles`.",10],[11,"eq","","",9],[11,"ne","","",9],[11,"clone","","",9],[11,"new","","Construct a new summary of a sample set.",9],[0,"bench","test",""],[5,"benchmark","test::bench",""],[6,"OptRes","test","Result of parsing the options."],[6,"MonitorMsg","",""],[8,"TDynBenchFn","","Represents a benchmark function."],[10,"run","","",11],[11,"fmt","","",4],[11,"hash","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"clone","","",4],[11,"fmt","","",4],[11,"fmt","","",5],[11,"hash","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"fmt","","",6],[11,"clone","","",6],[11,"hash","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"fmt","","",1],[11,"clone","","",1],[11,"fmt","","",2],[11,"fmt","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"decode","","",12],[11,"encode","","",12],[11,"clone","","",12],[11,"new","","",12],[11,"eq","","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"eq","","",14],[11,"ne","","",14],[11,"clone","","",14],[11,"eq","","",8],[11,"ne","","",8],[11,"clone","","",8],[11,"new","","",13],[11,"insert_metric","","Insert a named `value` (+/- `noise`) metric into the map. The value\nmust be non-negative. The `noise` indicates the uncertainty of the\nmetric, which doubles as the \"noise range\" of acceptable\npairwise-regressions on this named value, when comparing from one\nmetric to the next using `compare_to_old`.",13],[11,"fmt_metrics","","",13],[11,"iter","","Callback for benchmark functions to run in their body.",0],[11,"ns_elapsed","","",0],[11,"ns_per_iter","","",0],[11,"bench_n","","",0],[11,"auto_bench","","",0]],"paths":[[3,"Bencher"],[3,"TestDesc"],[3,"TestDescAndFn"],[3,"TestOpts"],[4,"TestName"],[4,"TestFn"],[4,"ShouldPanic"],[4,"ColorConfig"],[4,"TestResult"],[3,"Summary"],[8,"Stats"],[8,"TDynBenchFn"],[3,"Metric"],[3,"MetricMap"],[3,"BenchSamples"]]};
searchIndex['collections'] = {"items":[[0,"","collections","Collection types."],[0,"boxed","","A pointer type for heap allocation."],[7,"HEAP","collections::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied."],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",0],[11,"from_raw","","Constructs a box from the raw pointer.",0],[11,"default","","",0],[11,"default","","",0],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",0],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",0],[11,"eq","","",0],[11,"ne","","",0],[11,"partial_cmp","","",0],[11,"lt","","",0],[11,"le","","",0],[11,"ge","","",0],[11,"gt","","",0],[11,"cmp","","",0],[11,"hash","","",0],[11,"downcast","","",0],[11,"fmt","","",0],[11,"fmt","","",0],[11,"fmt","","",0],[6,"Target","collections::boxed",""],[11,"deref","alloc::boxed","",0],[11,"deref_mut","","",0],[6,"Item","collections::boxed",""],[11,"next","alloc::boxed","",0],[11,"size_hint","","",0],[11,"next_back","","",0],[11,"from_error","","",0],[11,"fmt","alloc::arc","",1],[11,"new","","Constructs a new `Arc<T>`.",2],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",2],[11,"clone","","Makes a clone of the `Arc<T>`.",2],[6,"Target","collections::boxed",""],[11,"deref","alloc::arc","",2],[11,"make_unique","","Make a mutable reference from the given `Arc<T>`.",2],[11,"drop","","Drops the `Arc<T>`.",2],[11,"upgrade","","Upgrades a weak reference to a strong reference.",1],[11,"clone","","Makes a clone of the `Weak<T>`.",1],[11,"drop","","Drops the `Weak<T>`.",1],[11,"eq","","Equality for two `Arc<T>`s.",2],[11,"ne","","Inequality for two `Arc<T>`s.",2],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",2],[11,"lt","","Less-than comparison for two `Arc<T>`s.",2],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",2],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",2],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",2],[11,"cmp","","",2],[11,"fmt","","",2],[11,"fmt","","",2],[11,"default","","",2],[11,"hash","","",2],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",3],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",3],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",3],[6,"Target","collections::boxed",""],[11,"deref","alloc::rc","",3],[11,"drop","","Drops the `Rc<T>`.",3],[11,"clone","","Makes a clone of the `Rc<T>`.",3],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",3],[11,"eq","","Equality for two `Rc<T>`s.",3],[11,"ne","","Inequality for two `Rc<T>`s.",3],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",3],[11,"lt","","Less-than comparison for two `Rc<T>`s.",3],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",3],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",3],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",3],[11,"cmp","","Comparison for two `Rc<T>`s.",3],[11,"hash","","",3],[11,"fmt","","",3],[11,"fmt","","",3],[11,"upgrade","","Upgrades a weak reference to a strong reference.",4],[11,"drop","","Drops the `Weak<T>`.",4],[11,"clone","","Makes a clone of the `Weak<T>`.",4],[11,"fmt","","",4],[3,"Box","collections::boxed","A pointer type for heap allocation."],[5,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer."],[8,"BoxAny","","Extension methods for an owning `Any` trait object."],[10,"downcast","","Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",5],[3,"BitVec","collections","The bitvector type."],[3,"BitSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[3,"BTreeMap","","A map based on a B-Tree."],[3,"BTreeSet","","A set based on a B-Tree."],[4,"Bound","","An endpoint of a range of keys."],[13,"Included","","An inclusive bound.",6],[13,"Excluded","","An exclusive bound.",6],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",6],[0,"binary_heap","","A priority queue implemented with a binary heap."],[3,"BinaryHeap","collections::binary_heap","A priority queue implemented with a binary heap."],[3,"Iter","","`BinaryHeap` iterator."],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`."],[3,"Drain","","An iterator that drains a `BinaryHeap`."],[11,"clone","","",7],[11,"default","","",7],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",7],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",7],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",7],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",7],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",7],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",7],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",7],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",7],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",7],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",7],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",7],[11,"push","","Pushes an item onto the binary heap.",7],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",7],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",7],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",7],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",7],[11,"len","","Returns the length of the binary heap.",7],[11,"is_empty","","Checks if the binary heap is empty.",7],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",7],[11,"clear","","Drops all items from the binary heap.",7],[11,"clone","","",8],[6,"Item","",""],[11,"next","","",8],[11,"size_hint","","",8],[11,"next_back","","",8],[6,"Item","",""],[11,"next","","",9],[11,"size_hint","","",9],[11,"next_back","","",9],[6,"Item","",""],[11,"next","","",10],[11,"size_hint","","",10],[11,"next_back","","",10],[11,"from_iter","","",7],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",7],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","","",7],[11,"index","collections","",11],[11,"new","","Creates an empty `BitVec`.",11],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",11],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",11],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",11],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",11],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",11],[11,"set","","Sets the value of a bit at an index `i`.",11],[11,"set_all","","Sets all bits to 1.",11],[11,"negate","","Flips all bits.",11],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",11],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",11],[11,"difference","","Calculates the difference between two bitvectors.",11],[11,"all","","Returns `true` if all bits are 1.",11],[11,"iter","","Returns an iterator over the elements of the vector in order.",11],[11,"none","","Returns `true` if all bits are 0.",11],[11,"any","","Returns `true` if any bit is 1.",11],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",11],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",11],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",11],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",11],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",11],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",11],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",11],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",11],[11,"push","","Pushes a `bool` onto the end.",11],[11,"len","","Return the total number of bits in this vector",11],[11,"is_empty","","Returns true if there are no bits in this vector",11],[11,"clear","","Clears all bits in this vector.",11],[11,"default","","",11],[11,"from_iter","","",11],[11,"extend","","",11],[11,"clone","","",11],[11,"clone_from","","",11],[11,"partial_cmp","","",11],[11,"cmp","","",11],[11,"fmt","","",11],[11,"hash","","",11],[11,"eq","","",11],[11,"clone","","",12],[11,"default","","",12],[11,"from_iter","","",12],[11,"extend","","",12],[11,"partial_cmp","","",12],[11,"cmp","","",12],[11,"eq","","",12],[11,"new","","Creates a new empty `BitSet`.",12],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to\nhold `nbits` elements without resizing.",12],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",12],[11,"from_bitv","","Deprecated: use `from_bit_vec`.",12],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",12],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case\nof `BitSet` this means reallocations will not occur as long as all inserted elements\nare less than `len`.",12],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements.\nIn the case of `BitSet` this means reallocations will not occur as long as all inserted\nelements are less than `len`.",12],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",12],[11,"get_ref","","Returns a reference to the underlying bit vector.",12],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",12],[11,"iter","","Iterator over each u32 stored in the `BitSet`.",12],[11,"union","","Iterator over each u32 stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",12],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",12],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",12],[11,"symmetric_difference","","Iterator over each u32 stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",12],[11,"union_with","","Unions in-place with the specified other bit vector.",12],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",12],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",12],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",12],[11,"len","","Return the number of set bits in this set.",12],[11,"is_empty","","Returns whether there are no bits set in this set",12],[11,"clear","","Clears all bits in this set",12],[11,"contains","","Returns `true` if this set contains the specified integer.",12],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",12],[11,"is_subset","","Returns `true` if the set is a subset of another.",12],[11,"is_superset","","Returns `true` if the set is a superset of another.",12],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",12],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",12],[11,"fmt","","",12],[11,"hash","","",12],[11,"clone","","",13],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",13],[11,"with_b","","Makes a new empty BTreeMap with the given B.",13],[11,"clear","","Clears the map, removing all values.",13],[11,"get","","Returns a reference to the value corresponding to the key.",13],[11,"contains_key","","Returns true if the map contains a value for the specified key.",13],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",13],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",13],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",13],[11,"into_iter","","",13],[11,"from_iter","","",13],[11,"extend","","",13],[11,"hash","","",13],[11,"default","","",13],[11,"eq","","",13],[11,"partial_cmp","","",13],[11,"cmp","","",13],[11,"fmt","","",13],[11,"index","","",13],[11,"index_mut","","",13],[11,"iter","","Gets an iterator over the entries of the map.",13],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",13],[11,"into_iter","","Gets an owning iterator over the entries of the map.",13],[11,"keys","","Gets an iterator over the keys of the map.",13],[11,"values","","Gets an iterator over the values of the map.",13],[11,"len","","Return the number of elements in the map.",13],[11,"is_empty","","Return true if the map contains no elements.",13],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",13],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",13],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",13],[11,"partial_cmp","","",14],[11,"lt","","",14],[11,"le","","",14],[11,"gt","","",14],[11,"ge","","",14],[11,"cmp","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"hash","","",14],[11,"clone","","",14],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",14],[11,"with_b","","Makes a new BTreeSet with the given B.",14],[11,"iter","","Gets an iterator over the BTreeSet's contents.",14],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",14],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",14],[11,"difference","","Visits the values representing the difference, in ascending order.",14],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",14],[11,"intersection","","Visits the values representing the intersection, in ascending order.",14],[11,"union","","Visits the values representing the union, in ascending order.",14],[11,"len","","Return the number of elements in the set",14],[11,"is_empty","","Returns true if the set contains no elements",14],[11,"clear","","Clears the set, removing all values.",14],[11,"contains","","Returns `true` if the set contains a value.",14],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",14],[11,"is_subset","","Returns `true` if the set is a subset of another.",14],[11,"is_superset","","Returns `true` if the set is a superset of another.",14],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",14],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",14],[11,"from_iter","","",14],[11,"into_iter","","",14],[11,"extend","","",14],[11,"default","","",14],[11,"fmt","","",14],[0,"borrow","","A module for working with borrowed data."],[4,"Cow","collections::borrow","A clone-on-write smart pointer."],[13,"Borrowed","","Borrowed data.",15],[13,"Owned","","Owned data.",15],[8,"Borrow","","A trait for borrowing data."],[10,"borrow","","Immutably borrow from an owned value.",16],[8,"BorrowMut","","A trait for mutably borrowing data."],[10,"borrow_mut","","Mutably borrow from an owned value.",17],[8,"ToOwned","","A generalization of Clone to borrowed data."],[16,"Owned","collections::borrow::ToOwned",""],[10,"to_owned","collections::borrow","Create owned data from borrowed data, usually by copying.",18],[8,"IntoCow","","Trait for moving into a `Cow`"],[10,"into_cow","","Moves `self` into `Cow`",19],[11,"borrow","alloc::rc","",3],[11,"borrow","alloc::arc","",2],[11,"borrow","collections::borrow","",15],[6,"Owned","",""],[11,"clone","","",15],[11,"to_mut","","Acquire a mutable reference to the owned form of the data.",15],[11,"into_owned","","Extract the owned data.",15],[11,"is_borrowed","","Returns true if this `Cow` wraps a borrowed value",15],[11,"is_owned","","Returns true if this `Cow` wraps an owned value",15],[6,"Target","",""],[11,"deref","","",15],[11,"cmp","","",15],[11,"eq","","",15],[11,"partial_cmp","","",15],[11,"fmt","","",15],[11,"fmt","","",15],[11,"hash","","",15],[11,"into_cow","","",15],[0,"enum_set","collections","A structure for holding a set of enum variants."],[3,"EnumSet","collections::enum_set","A specialized set implementation to use enum types."],[3,"Iter","","An iterator over an EnumSet"],[8,"CLike","","An interface for casting C-like enum to usize and back.\nA typically implementation is as below."],[10,"to_usize","","Converts a C-like enum to a `usize`.",20],[10,"from_usize","","Converts a `usize` to a C-like enum.",20],[11,"hash","","",21],[11,"cmp","","",21],[11,"partial_cmp","","",21],[11,"lt","","",21],[11,"le","","",21],[11,"gt","","",21],[11,"ge","","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"clone","","",21],[11,"fmt","","",21],[11,"new","","Returns an empty `EnumSet`.",21],[11,"len","","Returns the number of elements in the given `EnumSet`.",21],[11,"is_empty","","Returns true if the `EnumSet` is empty.",21],[11,"clear","","",21],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",21],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",21],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",21],[11,"union","","Returns the union of both `EnumSets`.",21],[11,"intersection","","Returns the intersection of both `EnumSets`.",21],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",21],[11,"remove","","Removes an enum from the EnumSet",21],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",21],[11,"iter","","Returns an iterator over an `EnumSet`.",21],[6,"Output","",""],[11,"sub","","",21],[6,"Output","",""],[11,"bitor","","",21],[6,"Output","",""],[11,"bitand","","",21],[6,"Output","",""],[11,"bitxor","","",21],[11,"clone","","",22],[6,"Item","",""],[11,"next","","",22],[11,"size_hint","","",22],[11,"from_iter","","",21],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","","",21],[0,"fmt","collections","Utilities for formatting and printing strings"],[11,"pad_integral","core::fmt","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",23],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",23],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",23],[11,"write_fmt","","Writes some formatted information into this instance",23],[11,"flags","","Flags for formatting (packed version of rt::Flag)",23],[11,"fill","","Character used as 'fill' whenever there is alignment",23],[11,"align","","Flag indicating what form of alignment was requested",23],[11,"width","","Optionally specified integer width that the output should be",23],[11,"precision","","Optionally specified precision for numeric types",23],[11,"clone","core::num::wrapping","",24],[11,"cmp","","",24],[11,"partial_cmp","","",24],[11,"lt","","",24],[11,"le","","",24],[11,"gt","","",24],[11,"ge","","",24],[11,"eq","","",24],[11,"ne","","",24],[6,"Output","collections::fmt",""],[11,"add","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"sub","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"mul","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"not","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"bitxor","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"bitor","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"bitand","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"shl","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"shr","core::num::wrapping","",24],[11,"fmt","core::num","",25],[11,"eq","","",25],[11,"ne","","",25],[6,"Err","collections::fmt",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[11,"eq","core::num","",26],[11,"ne","","",26],[11,"clone","","",26],[11,"fmt","","",26],[11,"eq","","",27],[11,"ne","","",27],[11,"clone","","",27],[11,"fmt","","",27],[11,"fmt","","",26],[11,"description","","",26],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"fmt","","",28],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"fmt","","",29],[11,"fmt","","",28],[11,"description","","",28],[11,"hash","core::nonzero","",30],[11,"fmt","","",30],[11,"partial_cmp","","",30],[11,"lt","","",30],[11,"le","","",30],[11,"gt","","",30],[11,"ge","","",30],[11,"cmp","","",30],[11,"eq","","",30],[11,"ne","","",30],[11,"clone","","",30],[11,"new","","Create an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",30],[6,"Target","collections::fmt",""],[11,"deref","core::nonzero","",30],[6,"Target","collections::fmt",""],[6,"Target","",""],[6,"Target","",""],[11,"new","core::ptr","Create a new `Unique`.",31],[11,"get","","Dereference the content.",31],[11,"get_mut","","Mutably dereference the content.",31],[6,"Target","collections::fmt",""],[11,"deref","core::ptr","",31],[11,"cmp","core::marker","",32],[11,"partial_cmp","","",32],[11,"lt","","",32],[11,"le","","",32],[11,"gt","","",32],[11,"ge","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"clone","","",32],[11,"cmp","","",33],[11,"partial_cmp","","",33],[11,"lt","","",33],[11,"le","","",33],[11,"gt","","",33],[11,"ge","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"clone","","",33],[11,"hash","","",34],[11,"eq","","",34],[11,"partial_cmp","","",34],[11,"cmp","","",34],[11,"clone","","",34],[6,"Output","collections::fmt",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"eq","core::ops","",35],[11,"ne","","",35],[11,"clone","","",35],[11,"fmt","","",35],[11,"eq","","",36],[11,"ne","","",36],[11,"clone","","",36],[11,"fmt","","",36],[11,"eq","","",37],[11,"ne","","",37],[11,"clone","","",37],[11,"fmt","","",37],[11,"eq","","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"fmt","","",38],[6,"Target","collections::fmt",""],[6,"Target","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","core::cmp","",39],[11,"eq","","",39],[11,"ne","","",39],[11,"clone","","",39],[11,"reverse","","Reverse the `Ordering`.",39],[11,"cmp","","",39],[11,"partial_cmp","","",39],[11,"is","collections","Returns true if the boxed type is the same as `T`",40],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",40],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",40],[11,"hash","core::any","",41],[11,"fmt","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",41],[11,"new","core::atomic","Creates a new `AtomicBool`.",42],[11,"load","","Loads a value from the bool.",42],[11,"store","","Stores a value into the bool.",42],[11,"swap","","Stores a value into the bool, returning the old value.",42],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",42],[11,"fetch_and","","Logical \"and\" with a boolean value.",42],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",42],[11,"fetch_or","","Logical \"or\" with a boolean value.",42],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",42],[11,"new","","Creates a new `AtomicIsize`.",43],[11,"load","","Loads a value from the isize.",43],[11,"store","","Stores a value into the isize.",43],[11,"swap","","Stores a value into the isize, returning the old value.",43],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",43],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",43],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",43],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",43],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",43],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",43],[11,"new","","Creates a new `AtomicUsize`.",44],[11,"load","","Loads a value from the usize.",44],[11,"store","","Stores a value into the usize.",44],[11,"swap","","Stores a value into the usize, returning the old value.",44],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",44],[11,"fetch_add","","Add to the current usize, returning the previous value.",44],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",44],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",44],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",44],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",44],[11,"new","","Creates a new `AtomicPtr`.",45],[11,"load","","Loads a value from the pointer.",45],[11,"store","","Stores a value into the pointer.",45],[11,"swap","","Stores a value into the pointer, returning the old value.",45],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",45],[11,"new","","",46],[11,"load","","",46],[11,"store","","",46],[11,"swap","","",46],[11,"compare_and_swap","","",46],[11,"fetch_add","","",46],[11,"fetch_sub","","",46],[11,"fetch_and","","",46],[11,"fetch_or","","",46],[11,"fetch_xor","","",46],[11,"new","","",47],[11,"load","","",47],[11,"store","","",47],[11,"swap","","",47],[11,"compare_and_swap","","",47],[11,"fetch_add","","",47],[11,"fetch_sub","","",47],[11,"fetch_and","","",47],[11,"fetch_or","","",47],[11,"fetch_xor","","",47],[11,"new","core::cell","Creates a new `Cell` containing the given value.",48],[11,"get","","Returns a copy of the contained value.",48],[11,"set","","Sets the contained value.",48],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",48],[11,"clone","","",48],[11,"default","","",48],[11,"eq","","",48],[11,"fmt","","",49],[11,"eq","","",49],[11,"ne","","",49],[11,"clone","","",49],[11,"new","","Creates a new `RefCell` containing `value`.",50],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",50],[11,"borrow_state","","Query the current state of this `RefCell`",50],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",50],[11,"borrow","","Immutably borrows the wrapped value.",50],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",50],[11,"borrow_mut","","Mutably borrows the wrapped value.",50],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",50],[11,"clone","","",50],[11,"default","","",50],[11,"eq","","",50],[11,"drop","","",51],[11,"clone","","",51],[6,"Target","collections::fmt",""],[11,"deref","core::cell","",52],[11,"drop","","",53],[6,"Target","collections::fmt",""],[11,"deref","core::cell","",54],[11,"deref_mut","","",54],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",55],[11,"get","","Gets a mutable pointer to the wrapped value.",55],[11,"into_inner","","Unwraps the value",55],[11,"clone","core::char","",56],[11,"clone","","",57],[6,"Item","collections::fmt",""],[11,"next","core::char","",56],[11,"clone","","",58],[11,"clone","","",59],[6,"Item","collections::fmt",""],[11,"next","core::char","",58],[11,"drop","core::finally","",60],[6,"Item","collections::fmt",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"clone","core::iter","",61],[6,"Item","collections::fmt",""],[11,"next","core::iter","",61],[11,"size_hint","","",61],[11,"next_back","","",61],[11,"indexable","","",61],[11,"idx","","",61],[11,"fmt","","",62],[11,"eq","","",62],[11,"ne","","",62],[11,"clone","","",62],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",62],[11,"clone","","",63],[6,"Item","collections::fmt",""],[11,"next","core::iter","",63],[11,"size_hint","","",63],[11,"next_back","","",63],[11,"indexable","","",63],[11,"idx","","",63],[11,"clone","","",64],[6,"Item","collections::fmt",""],[11,"next","core::iter","",64],[11,"size_hint","","",64],[11,"indexable","","",64],[11,"idx","","",64],[11,"clone","","",65],[6,"Item","collections::fmt",""],[11,"next","core::iter","",65],[11,"size_hint","","",65],[11,"next_back","","",65],[11,"indexable","","",65],[11,"idx","","",65],[11,"clone","","",66],[6,"Item","collections::fmt",""],[11,"next","core::iter","",66],[11,"size_hint","","",66],[11,"next_back","","",66],[11,"indexable","","",66],[11,"idx","","",66],[11,"clone","","",67],[6,"Item","collections::fmt",""],[11,"next","core::iter","",67],[11,"size_hint","","",67],[11,"next_back","","",67],[11,"indexable","","",67],[11,"idx","","",67],[11,"clone","","",68],[6,"Item","collections::fmt",""],[11,"next","core::iter","",68],[11,"size_hint","","",68],[11,"next_back","","",68],[11,"clone","","",69],[6,"Item","collections::fmt",""],[11,"next","core::iter","",69],[11,"size_hint","","",69],[11,"next_back","","",69],[11,"clone","","",70],[6,"Item","collections::fmt",""],[11,"next","core::iter","",70],[11,"size_hint","","",70],[11,"next_back","","",70],[11,"indexable","","",70],[11,"idx","","",70],[11,"clone","","",71],[6,"Item","collections::fmt",""],[11,"next","core::iter","",71],[11,"size_hint","","",71],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",71],[11,"is_empty","","Check whether peekable iterator is empty or not.",71],[11,"clone","","",72],[6,"Item","collections::fmt",""],[11,"next","core::iter","",72],[11,"size_hint","","",72],[11,"clone","","",73],[6,"Item","collections::fmt",""],[11,"next","core::iter","",73],[11,"size_hint","","",73],[11,"clone","","",74],[6,"Item","collections::fmt",""],[11,"next","core::iter","",74],[11,"size_hint","","",74],[11,"indexable","","",74],[11,"idx","","",74],[11,"clone","","",75],[6,"Item","collections::fmt",""],[11,"next","core::iter","",75],[11,"size_hint","","",75],[11,"indexable","","",75],[11,"idx","","",75],[11,"clone","","",76],[6,"Item","collections::fmt",""],[11,"next","core::iter","",76],[11,"size_hint","","",76],[11,"clone","","",77],[6,"Item","collections::fmt",""],[11,"next","core::iter","",77],[11,"size_hint","","",77],[11,"next_back","","",77],[11,"clone","","",78],[6,"Item","collections::fmt",""],[11,"next","core::iter","",78],[11,"size_hint","","",78],[11,"next_back","","",78],[11,"indexable","","",78],[11,"idx","","",78],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",78],[11,"clone","","",79],[6,"Item","collections::fmt",""],[11,"next","core::iter","",79],[11,"size_hint","","",79],[11,"next_back","","",79],[11,"indexable","","",79],[11,"idx","","",79],[11,"clone","","",80],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",80],[6,"Item","collections::fmt",""],[11,"next","core::iter","",80],[11,"size_hint","","",80],[11,"clone","","",81],[6,"Item","collections::fmt",""],[11,"next","core::iter","",81],[11,"size_hint","","",81],[11,"clone","","",82],[6,"Item","collections::fmt",""],[11,"next","core::iter","",82],[11,"size_hint","","",82],[11,"next_back","","",82],[11,"clone","","",83],[6,"Item","collections::fmt",""],[11,"next","core::iter","",83],[11,"size_hint","","",83],[11,"next_back","","",83],[11,"clone","","",84],[6,"Item","collections::fmt",""],[11,"next","core::iter","",84],[11,"clone","","",85],[6,"Item","collections::fmt",""],[11,"next","core::iter","",85],[6,"Item","collections::fmt",""],[11,"next","core::ops","",36],[11,"size_hint","","",36],[11,"next_back","","",36],[6,"Item","collections::fmt",""],[11,"next","core::ops","",37],[11,"clone","core::iter","",86],[6,"Item","collections::fmt",""],[11,"next","core::iter","",86],[11,"size_hint","","",86],[11,"next_back","","",86],[11,"indexable","","",86],[11,"idx","","",86],[11,"hash","core::option","",87],[11,"fmt","","",87],[11,"cmp","","",87],[11,"partial_cmp","","",87],[11,"lt","","",87],[11,"le","","",87],[11,"gt","","",87],[11,"ge","","",87],[11,"eq","","",87],[11,"ne","","",87],[11,"clone","","",87],[11,"is_some","","Returns `true` if the option is a `Some` value",87],[11,"is_none","","Returns `true` if the option is a `None` value",87],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",87],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",87],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",87],[11,"expect","","Unwraps an option, yielding the content of a `Some`",87],[11,"unwrap","","Returns the inner `T` of a `Some(T)`.",87],[11,"unwrap_or","","Returns the contained value or a default.",87],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",87],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",87],[11,"map_or","","Applies a function to the contained value or returns a default.",87],[11,"map_or_else","","Applies a function to the contained value or computes a default.",87],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",87],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",87],[11,"iter","","Returns an iterator over the possibly contained value.",87],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",87],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",87],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",87],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",87],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",87],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",87],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",87],[11,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",87],[11,"unwrap_or_default","","Returns the contained value or a default",87],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",87],[11,"default","","",87],[11,"clone","","",88],[6,"Item","collections::fmt",""],[11,"next","core::option","",88],[11,"size_hint","","",88],[11,"next_back","","",88],[6,"Item","collections::fmt",""],[11,"next","core::option","",89],[11,"size_hint","","",89],[11,"next_back","","",89],[11,"clone","","",89],[6,"Item","collections::fmt",""],[11,"next","core::option","",90],[11,"size_hint","","",90],[11,"next_back","","",90],[6,"Item","collections::fmt",""],[11,"next","core::option","",91],[11,"size_hint","","",91],[11,"next_back","","",91],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",87],[11,"hash","core::result","",92],[11,"fmt","","",92],[11,"cmp","","",92],[11,"partial_cmp","","",92],[11,"lt","","",92],[11,"le","","",92],[11,"gt","","",92],[11,"ge","","",92],[11,"eq","","",92],[11,"ne","","",92],[11,"clone","","",92],[11,"is_ok","","Returns true if the result is `Ok`",92],[11,"is_err","","Returns true if the result is `Err`",92],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",92],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",92],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",92],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",92],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",92],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",92],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",92],[11,"iter","","Returns an iterator over the possibly contained value.",92],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",92],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",92],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",92],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",92],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",92],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",92],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",92],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",92],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",92],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",92],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",92],[6,"Item","collections::fmt",""],[11,"next","core::result","",93],[11,"size_hint","","",93],[11,"next_back","","",93],[11,"clone","","",93],[6,"Item","collections::fmt",""],[11,"next","core::result","",94],[11,"size_hint","","",94],[11,"next_back","","",94],[6,"Item","collections::fmt",""],[11,"next","core::result","",95],[11,"size_hint","","",95],[11,"next_back","","",95],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",92],[11,"fmt","core::simd","",96],[11,"fmt","","",97],[11,"fmt","","",98],[11,"fmt","","",99],[11,"fmt","","",100],[11,"fmt","","",101],[11,"fmt","","",102],[11,"fmt","","",103],[11,"fmt","","",104],[11,"fmt","","",105],[6,"Item","collections::fmt",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Output","",""],[11,"index","core::slice","",106],[6,"Output","collections::fmt",""],[11,"index","core::slice","",106],[6,"Output","collections::fmt",""],[11,"index","core::slice","",106],[6,"Output","collections::fmt",""],[11,"index","core::slice","",106],[11,"as_slice","","View the underlying data as a subslice of the original data.",106],[6,"Item","collections::fmt",""],[11,"next","core::slice","",106],[11,"size_hint","","",106],[11,"next_back","","",106],[11,"clone","","",106],[11,"indexable","","",106],[11,"idx","","",106],[6,"Output","collections::fmt",""],[11,"index","core::slice","",107],[6,"Output","collections::fmt",""],[11,"index","core::slice","",107],[6,"Output","collections::fmt",""],[11,"index","core::slice","",107],[6,"Output","collections::fmt",""],[11,"index","core::slice","",107],[11,"index_mut","","",107],[11,"index_mut","","",107],[11,"index_mut","","",107],[11,"index_mut","","",107],[11,"into_slice","","View the underlying data as a subslice of the original data.",107],[6,"Item","collections::fmt",""],[11,"next","core::slice","",107],[11,"size_hint","","",107],[11,"next_back","","",107],[11,"clone","","",108],[6,"Item","collections::fmt",""],[11,"next","core::slice","",108],[11,"size_hint","","",108],[11,"next_back","","",108],[11,"finish","","",108],[11,"finish","","",109],[6,"Item","collections::fmt",""],[11,"next","core::slice","",109],[11,"size_hint","","",109],[11,"next_back","","",109],[6,"Item","collections::fmt",""],[11,"next","core::slice","",110],[11,"size_hint","","",110],[6,"Item","collections::fmt",""],[11,"next","core::slice","",111],[11,"size_hint","","",111],[6,"Item","collections::fmt",""],[11,"next","core::slice","",112],[11,"size_hint","","",112],[6,"Item","collections::fmt",""],[11,"next","core::slice","",113],[11,"size_hint","","",113],[6,"Item","collections::fmt",""],[11,"next","core::slice","",114],[11,"size_hint","","",114],[11,"clone","","",115],[6,"Item","collections::fmt",""],[11,"next","core::slice","",115],[11,"size_hint","","",115],[11,"next_back","","",115],[11,"indexable","","",115],[11,"idx","","",115],[11,"clone","","",116],[6,"Item","collections::fmt",""],[11,"next","core::slice","",116],[11,"size_hint","","",116],[11,"next_back","","",116],[11,"indexable","","",116],[11,"idx","","",116],[6,"Item","collections::fmt",""],[11,"next","core::slice","",117],[11,"size_hint","","",117],[11,"next_back","","",117],[11,"fmt","core::str::pattern","",118],[11,"eq","","",118],[11,"ne","","",118],[11,"clone","","",118],[6,"Searcher","collections::fmt",""],[11,"into_searcher","core::str::pattern","",119],[11,"haystack","","",120],[11,"next","","",120],[11,"next_back","","",120],[11,"clone","","",121],[6,"Searcher","collections::fmt",""],[11,"haystack","core::str::pattern","",121],[11,"next","","",121],[11,"next_back","","",121],[6,"Searcher","collections::fmt",""],[6,"Searcher","",""],[6,"Searcher","",""],[6,"Searcher","",""],[6,"Err","",""],[11,"eq","core::str","",122],[11,"ne","","",122],[11,"clone","","",122],[11,"fmt","","",122],[11,"fmt","","",122],[11,"description","","",122],[11,"fmt","","",123],[11,"clone","","",123],[11,"eq","","",123],[11,"ne","","",123],[11,"description","","",123],[11,"fmt","","",123],[11,"clone","","",124],[6,"Item","collections::fmt",""],[11,"next","core::str","",124],[11,"size_hint","","",124],[11,"next_back","","",124],[11,"clone","","",125],[6,"Item","collections::fmt",""],[11,"next","core::str","",125],[11,"size_hint","","",125],[11,"next_back","","",125],[11,"clone","","",126],[6,"Item","collections::fmt",""],[11,"next","core::str","",126],[11,"size_hint","","",126],[11,"next_back","","",126],[11,"len","","",126],[11,"clone","","",127],[6,"Output","collections::fmt",""],[11,"call","core::str","",127],[6,"Item","collections::fmt",""],[11,"next","core::str","",128],[11,"next_back","","",128],[6,"Item","collections::fmt",""],[11,"next","core::str","",129],[11,"clone","","",130],[11,"clone","","",131],[11,"clone","","",132],[6,"Item","collections::fmt",""],[11,"next","core::str","",133],[6,"Item","collections::fmt",""],[11,"next","core::str","",134],[6,"Output","collections::fmt",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[11,"next","core::str","",135],[11,"next_back","","",135],[6,"Item","collections::fmt",""],[11,"next","core::str","",136],[11,"size_hint","","",136],[11,"next_back","","",136],[6,"Item","collections::fmt",""],[11,"next","core::str","",137],[11,"size_hint","","",137],[6,"Item","collections::fmt",""],[11,"next","core::str","",138],[11,"size_hint","","",138],[6,"Item","collections::fmt",""],[11,"next","core::str","",139],[11,"size_hint","","",139],[11,"next_back","","",139],[6,"Item","collections::fmt",""],[11,"next","core::str","",140],[11,"size_hint","","",140],[11,"next_back","","",140],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",141],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",141],[11,"result","","Returns the computed hash.",141],[11,"write","","",141],[11,"finish","","",141],[11,"clone","","",141],[11,"default","","",141],[11,"eq","core::fmt::num","",142],[11,"ne","","",142],[11,"clone","","",142],[11,"eq","","",143],[11,"ne","","",143],[11,"clone","","",143],[11,"eq","","",144],[11,"ne","","",144],[11,"clone","","",144],[11,"eq","","",145],[11,"ne","","",145],[11,"clone","","",145],[11,"eq","","",146],[11,"ne","","",146],[11,"clone","","",146],[11,"eq","","",147],[11,"ne","","",147],[11,"clone","","",147],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"eq","core::fmt::rt::v1","",149],[11,"ne","","",149],[11,"fmt","core::fmt","",150],[11,"fmt","","",151],[11,"fmt","","",151],[11,"fmt","","",150],[11,"fmt","core::marker","",34],[11,"fmt","core::cell","",48],[11,"fmt","","",50],[11,"fmt","","",52],[11,"fmt","","",54],[6,"Item","collections::fmt",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits."],[6,"Result","",""],[8,"Write","","A collection of methods that are required to format a message into a stream."],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",152],[10,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",152],[8,"Octal","","Format trait for the `o` character"],[10,"fmt","","Formats the value using the given formatter.",153],[8,"Binary","","Format trait for the `b` character"],[10,"fmt","","Formats the value using the given formatter.",154],[8,"Display","","When a value can be semantically expressed as a String, this trait may be\nused. It corresponds to the default format, `{}`."],[10,"fmt","","Formats the value using the given formatter.",155],[8,"Debug","","Format trait for the `:?` format. Useful for debugging, all types\nshould implement this."],[10,"fmt","","Formats the value using the given formatter.",156],[8,"LowerHex","","Format trait for the `x` character"],[10,"fmt","","Formats the value using the given formatter.",157],[8,"UpperHex","","Format trait for the `X` character"],[10,"fmt","","Formats the value using the given formatter.",158],[8,"Pointer","","Format trait for the `p` character"],[10,"fmt","","Formats the value using the given formatter.",159],[8,"LowerExp","","Format trait for the `e` character"],[10,"fmt","","Formats the value using the given formatter.",160],[8,"UpperExp","","Format trait for the `E` character"],[10,"fmt","","Formats the value using the given formatter.",161],[3,"Error","","The error type which is returned from formatting a message into a stream."],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification."],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided."],[5,"radix","","Constructs a radix formatter in the range of `2..36`."],[3,"Radix","","A radix with in the range of `2..36`."],[3,"RadixFmt","","A helper type for formatting radixes."],[5,"format","","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string."],[0,"linked_list","collections","A doubly-linked list with owned nodes."],[3,"LinkedList","collections::linked_list","A doubly-linked list."],[3,"Iter","","An iterator over references to the items of a `LinkedList`."],[3,"IterMut","","An iterator over mutable references to the items of a `LinkedList`."],[3,"IntoIter","","An iterator over mutable references to the items of a `LinkedList`."],[11,"clone","","",162],[11,"clone","","",163],[11,"default","","",164],[11,"new","","Creates an empty `LinkedList`.",164],[11,"append","","Moves all elements from `other` to the end of the list.",164],[11,"iter","","Provides a forward iterator.",164],[11,"iter_mut","","Provides a forward iterator with mutable references.",164],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",164],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",164],[11,"len","","Returns the length of the `LinkedList`.",164],[11,"clear","","Removes all elements from the `LinkedList`.",164],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",164],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",164],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",164],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",164],[11,"push_front","","Adds an element first in the list.",164],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",164],[11,"push_back","","Appends an element to the back of a list",164],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",164],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",164],[11,"drop","","",164],[6,"Item","",""],[11,"next","","",162],[11,"size_hint","","",162],[11,"next_back","","",162],[6,"Item","",""],[11,"next","","",165],[11,"size_hint","","",165],[11,"next_back","","",165],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",165],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",165],[6,"Item","",""],[11,"next","","",163],[11,"size_hint","","",163],[11,"next_back","","",163],[11,"from_iter","","",164],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",164],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","","",164],[11,"eq","","",164],[11,"ne","","",164],[11,"partial_cmp","","",164],[11,"cmp","","",164],[11,"clone","","",164],[11,"fmt","","",164],[11,"hash","","",164],[0,"slice","collections","Utilities for slice manipulation"],[3,"Chunks","collections::slice","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime)."],[8,"AsSlice","","Data that is viewable as a slice."],[10,"as_slice","","Work with `self` as a slice.",166],[3,"Windows","","An iterator over overlapping subslices of length `size`."],[3,"Iter","","Immutable slice iterator"],[3,"IterMut","","Mutable slice iterator."],[8,"IntSliceExt","","Extension methods for slices containing integers."],[10,"as_unsigned","","Converts the slice to an immutable slice of unsigned integers with the same width.",167],[10,"as_signed","","Converts the slice to an immutable slice of signed integers with the same width.",167],[10,"as_unsigned_mut","","Converts the slice to a mutable slice of unsigned integers with the same width.",167],[10,"as_signed_mut","","Converts the slice to a mutable slice of signed integers with the same width.",167],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`."],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder."],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction."],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[0,"bytes","","Operations on `[u8]`."],[8,"MutableByteVector","collections::slice::bytes","A trait for operations on mutable `[u8]`s."],[10,"set_memory","","Sets all bytes of the receiver to the given value.",168],[5,"copy_memory","","Copies data from `src` to `dst`"],[5,"mut_ref_slice","collections::slice","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"from_raw_parts","","Forms a slice from a pointer and a length."],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned."],[5,"from_raw_buf","","Forms a slice from a pointer and a length."],[5,"from_raw_mut_buf","","Performs the same functionality as `from_raw_buf`, except that a mutable\nslice is returned."],[3,"ElementSwaps","","An iterator that yields the element swaps needed to produce\na sequence of all possible permutations for an indexed sequence of\nelements. Each permutation is only a single swap apart."],[3,"Permutations","","An iterator that uses `ElementSwaps` to iterate through\nall possible permutations of a vector."],[8,"SliceExt","","Allocating extension methods for slices."],[16,"Item","collections::slice::SliceExt",""],[10,"sort_by","collections::slice","Sorts the slice, in place, using `compare` to compare\nelements.",169],[10,"move_from","","Consumes `src` and moves as many elements as it can into `self`\nfrom the range [start,end).",169],[10,"slice","","Deprecated: use `&s[start .. end]` notation instead.",169],[10,"slice_from","","Deprecated: use `&s[start..]` notation instead.",169],[10,"slice_to","","Deprecated: use `&s[..end]` notation instead.",169],[10,"split_at","","Divides one slice into two at an index.",169],[10,"iter","","Returns an iterator over the slice.",169],[10,"split","","Returns an iterator over subslices separated by elements that match\n`pred`.  The matched element is not contained in the subslices.",169],[10,"splitn","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to splitting at most `n` times.  The matched element is\nnot contained in the subslices.",169],[10,"rsplitn","","Returns an iterator over subslices separated by elements that match\n`pred` limited to splitting at most `n` times. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",169],[10,"windows","","Returns an iterator over all contiguous windows of length\n`size`. The windows overlap. If the slice is shorter than\n`size`, the iterator returns no values.",169],[10,"chunks","","Returns an iterator over `size` elements of the slice at a\ntime. The chunks do not overlap. If `size` does not divide the\nlength of the slice, then the last chunk will not have length\n`size`.",169],[10,"get","","Returns the element of a slice at the given index, or `None` if the\nindex is out of bounds.",169],[10,"first","","Returns the first element of a slice, or `None` if it is empty.",169],[10,"tail","","Returns all but the first element of a slice.",169],[10,"init","","Returns all but the last element of a slice.",169],[10,"last","","Returns the last element of a slice, or `None` if it is empty.",169],[10,"get_unchecked","","Returns a pointer to the element at the given index, without doing\nbounds checking.",169],[10,"as_ptr","","Returns an unsafe pointer to the slice's buffer",169],[10,"binary_search_by","","Binary search a sorted slice with a comparator function.",169],[10,"len","","Return the number of elements in the slice",169],[11,"is_empty","","Returns true if the slice has a length of 0",169],[10,"get_mut","","Returns a mutable reference to the element at the given index,\nor `None` if the index is out of bounds",169],[10,"as_mut_slice","","Work with `self` as a mut slice.\nPrimarily intended for getting a &mut [T] from a [T; N].",169],[10,"slice_mut","","Deprecated: use `&mut s[start .. end]` instead.",169],[10,"slice_from_mut","","Deprecated: use `&mut s[start ..]` instead.",169],[10,"slice_to_mut","","Deprecated: use `&mut s[.. end]` instead.",169],[10,"iter_mut","","Returns an iterator that allows modifying each value",169],[10,"first_mut","","Returns a mutable pointer to the first element of a slice, or `None` if it is empty",169],[10,"tail_mut","","Returns all but the first element of a mutable slice",169],[10,"init_mut","","Returns all but the last element of a mutable slice",169],[10,"last_mut","","Returns a mutable pointer to the last item in the slice.",169],[10,"split_mut","","Returns an iterator over mutable subslices separated by elements that\nmatch `pred`.  The matched element is not contained in the subslices.",169],[10,"splitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to splitting at most `n` times.  The matched element is\nnot contained in the subslices.",169],[10,"rsplitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred` limited to splitting at most `n` times. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",169],[10,"chunks_mut","","Returns an iterator over `chunk_size` elements of the slice at a time.\nThe chunks are mutable and do not overlap. If `chunk_size` does\nnot divide the length of the slice, then the last chunk will not\nhave length `chunk_size`.",169],[10,"swap","","Swaps two elements in a slice.",169],[10,"split_at_mut","","Divides one `&mut` into two at an index.",169],[10,"reverse","","Reverse the order of elements in a slice, in place.",169],[10,"get_unchecked_mut","","Returns an unsafe mutable pointer to the element in index",169],[10,"as_mut_ptr","","Return an unsafe mutable pointer to the slice's buffer.",169],[10,"to_vec","","Copies `self` into a new `Vec`.",169],[10,"permutations","","Creates an iterator that yields every possible permutation of the\nvector in succession.",169],[10,"clone_from_slice","","Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",169],[10,"sort","","Sorts the slice, in place.",169],[10,"binary_search","","Binary search a sorted slice for a given element.",169],[11,"binary_search_elem","","Deprecated: use `binary_search` instead.",169],[10,"next_permutation","","Mutates the slice to the next lexicographic permutation.",169],[10,"prev_permutation","","Mutates the slice to the previous lexicographic permutation.",169],[10,"position_elem","","Find the first index containing a matching value.",169],[10,"rposition_elem","","Find the last index containing a matching value.",169],[10,"contains","","Returns true if the slice contains an element with the given value.",169],[10,"starts_with","","Returns true if `needle` is a prefix of the slice.",169],[10,"ends_with","","Returns true if `needle` is a suffix of the slice.",169],[10,"into_vec","","Convert `self` into a vector without clones or allocation.",169],[8,"SliceConcatExt","","An extension trait for concatenating slices"],[10,"concat","","Flattens a slice of `T` into a single value `U`.",170],[10,"connect","","Flattens a slice of `T` into a single value `U`, placing a given separator between each.",170],[6,"Item","",""],[11,"clone","","",171],[11,"new","","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",171],[6,"Owned","",""],[6,"Item","",""],[11,"next","","",171],[11,"size_hint","","",171],[6,"Item","",""],[11,"next","","",172],[11,"size_hint","","",172],[0,"str","collections","Unicode string manipulation (the [`str`](../primitive.str.html) type)."],[8,"FromStr","collections::str","A trait to abstract the idea of creating a new instance of a type from a\nstring."],[16,"Err","collections::str::FromStr",""],[10,"from_str","collections::str","Parses a string `s` to return an optional value of this type. If the\nstring is ill-formatted, the None is returned.",173],[4,"Utf8Error","","Errors which can occur when attempting to interpret a byte slice as a `str`."],[13,"InvalidByte","","An invalid byte was detected at the byte offset given.",123],[13,"TooShort","","The byte slice was invalid because more bytes were needed but no more\nbytes were available.",123],[8,"Str","","Any string that can be represented as a slice"],[10,"as_slice","","Work with `self` as a slice.",174],[3,"Lines","","An iterator over the lines of a string, separated by `\\n`."],[3,"LinesAny","","An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`)."],[3,"MatchIndices","","An iterator over the start and end indices of the matches of a\nsubstring within a larger string"],[3,"SplitStr","","An iterator over the substrings of a string separated by a given\nsearch string"],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."],[12,"ch","","Current `char`",175],[12,"next","","Index of the first byte of the next `char`",175],[3,"Split","","Return type of `StrExt::split`"],[3,"SplitTerminator","","Return type of `StrExt::split_terminator`"],[3,"SplitN","","Return type of `StrExt::splitn`"],[3,"RSplitN","","Return type of `StrExt::rsplitn`"],[5,"from_utf8","","Converts a slice of bytes to a string slice without performing any\nallocations."],[8,"CharEq","","Something that can be used to compare against a character"],[10,"matches","","Determine if the splitter should split at the given character",176],[10,"only_ascii","","Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",176],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string"],[3,"CharIndices","","External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module."],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."],[5,"from_c_str","","Constructs a static string slice from a given raw pointer."],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails."],[11,"clone","unicode::tables::grapheme","",177],[11,"clone","unicode::u_str","",178],[6,"Item","collections::str",""],[11,"next","unicode::u_str","",178],[11,"size_hint","","",178],[11,"next_back","","",178],[11,"clone","","",179],[11,"eq","","",180],[11,"ne","","",180],[6,"Item","collections::str",""],[11,"size_hint","unicode::u_str","",179],[11,"next","","",179],[11,"next_back","","",179],[11,"clone","","",181],[11,"fmt","","",182],[11,"clone","","",182],[11,"eq","","",182],[11,"ne","","",182],[11,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",182],[6,"Item","collections::str",""],[11,"next","unicode::u_str","",181],[11,"size_hint","","",181],[11,"clone","","",183],[11,"new","","Create an UTF-16 encoder from any `char` iterator.",183],[6,"Item","collections::str",""],[11,"next","unicode::u_str","",183],[11,"size_hint","","",183],[6,"Item","collections::str",""],[11,"next","unicode::u_str","",184],[11,"next_back","","",184],[3,"Words","collections::str","An iterator over the words of a string, separated by a sequence of whitespace"],[3,"Graphemes","","External iterator for a string's\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)."],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets."],[8,"Pattern","","A string pattern."],[16,"Searcher","collections::str::Pattern",""],[10,"into_searcher","collections::str","Construct the associated searcher from\n`self` and the `haystack` to search in.",185],[10,"is_contained_in","","Check whether the pattern matches anywhere in the haystack",185],[10,"is_prefix_of","","Check whether the pattern matches at the front of the haystack",185],[10,"is_suffix_of","","Check whether the pattern matches at the back of the haystack",185],[8,"Searcher","","A searcher for a string pattern."],[10,"haystack","","Getter for the underlaying string to be searched in",186],[10,"next","","Performs the next search step starting from the front.",186],[10,"next_match","","Find the next `Match` result. See `next()`",186],[10,"next_reject","","Find the next `Reject` result. See `next()`",186],[8,"ReverseSearcher","","A reverse searcher for a string pattern."],[10,"next_back","","Performs the next search step starting from the back.",187],[10,"next_match_back","","Find the next `Match` result. See `next_back()`",187],[10,"next_reject_back","","Find the next `Reject` result. See `next_back()`",187],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation."],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`."],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",118],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",118],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",118],[3,"Decompositions","","External iterator for a string decomposition's characters."],[3,"Recompositions","","External iterator for a string recomposition's characters."],[3,"Utf16Units","","External iterator for a string's UTF16 codeunits."],[8,"StrExt","","Any string that can be represented as a slice."],[11,"escape_default","","Escapes each char in `s` with `char::escape_default`.",188],[11,"escape_unicode","","Escapes each char in `s` with `char::escape_unicode`.",188],[11,"replace","","Replaces all occurrences of one string with another.",188],[11,"nfd_chars","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",188],[11,"nfkd_chars","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",188],[11,"nfc_chars","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",188],[11,"nfkc_chars","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",188],[11,"contains","","Returns `true` if `self` contains another `&str`.",188],[11,"contains_char","","Returns `true` if `self` contains a `char`.",188],[11,"chars","","An iterator over the codepoints of `self`.",188],[11,"bytes","","An iterator over the bytes of `self`.",188],[11,"char_indices","","An iterator over the characters of `self` and their byte offsets.",188],[11,"split","","An iterator over substrings of `self`, separated by characters\nmatched by a pattern.",188],[11,"splitn","","An iterator over substrings of `self`, separated by characters matched by a pattern,\nrestricted to splitting at most `count` times.",188],[11,"split_terminator","","An iterator over substrings of `self`, separated by characters\nmatched by a pattern.",188],[11,"rsplitn","","An iterator over substrings of `self`, separated by characters matched by a pattern,\nstarting from the end of the string.",188],[11,"match_indices","","An iterator over the start and end indices of the disjoint matches of a `&str` within\n`self`.",188],[11,"split_str","","An iterator over the substrings of `self` separated by a `&str`.",188],[11,"lines","","An iterator over the lines of a string, separated by `\\n`.",188],[11,"lines_any","","An iterator over the lines of a string, separated by either `\\n` or `\\r\\n`.",188],[10,"slice","","Deprecated: use `s[a .. b]` instead.",188],[10,"slice_from","","Deprecated: use `s[a..]` instead.",188],[10,"slice_to","","Deprecated: use `s[..a]` instead.",188],[11,"slice_chars","","Returns a slice of the string from the character range [`begin`..`end`).",188],[11,"slice_unchecked","","Takes a bytewise slice from a string.",188],[11,"starts_with","","Returns `true` if the given `&str` is a prefix of the string.",188],[11,"ends_with","","Returns true if the given `&str` is a suffix of the string.",188],[11,"trim_matches","","Returns a string with all pre- and suffixes that match a pattern repeatedly removed.",188],[11,"trim_left_matches","","Returns a string with all prefixes that match a pattern repeatedly removed.",188],[11,"trim_right_matches","","Returns a string with all suffixes that match a pattern repeatedly removed.",188],[11,"is_char_boundary","","Check that `index`-th byte lies at the start and/or end of a UTF-8 code point sequence.",188],[11,"char_range_at","","Given a byte position, return the next char and its index.",188],[11,"char_range_at_reverse","","Given a byte position, return the previous `char` and its position.",188],[11,"char_at","","Given a byte position, return the `char` at that position.",188],[11,"char_at_reverse","","Given a byte position, return the `char` at that position, counting from the end.",188],[11,"as_bytes","","Convert `self` to a byte slice.",188],[11,"find","","Returns the byte index of the first character of `self` that matches the pattern, if it\nexists.",188],[11,"rfind","","Returns the byte index of the last character of `self` that matches the pattern, if it\nexists.",188],[11,"find_str","","Returns the byte index of the first matching substring if it exists.",188],[11,"slice_shift_char","","Retrieves the first character from a `&str` and returns it.",188],[11,"subslice_offset","","Returns the byte offset of an inner slice relative to an enclosing outer slice.",188],[11,"as_ptr","","Return an unsafe pointer to the `&str`'s buffer.",188],[11,"utf16_units","","Return an iterator of `u16` over the string encoded as UTF-16.",188],[11,"len","","Returns the length of `self` in bytes.",188],[11,"is_empty","","Returns true if this slice has a length of zero bytes.",188],[11,"parse","","Parses `self` into the specified type.",188],[11,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",188],[11,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See\n`graphemes()` for more information.",188],[11,"words","","An iterator over the non-empty words of `self`.",188],[11,"width","","Returns a string's displayed width in columns.",188],[11,"trim","","Returns a `&str` with leading and trailing whitespace removed.",188],[11,"trim_left","","Returns a `&str` with leading whitespace removed.",188],[11,"trim_right","","Returns a `&str` with trailing whitespace removed.",188],[11,"clone","","",189],[6,"Item","",""],[11,"next","","",189],[11,"size_hint","","",189],[11,"clone","","",190],[6,"Item","",""],[11,"next","","",190],[11,"clone","","",191],[6,"Item","",""],[11,"next","","",191],[11,"size_hint","","",191],[6,"Owned","",""],[0,"string","collections","An owned, growable string that enforces that its contents are valid UTF-8."],[3,"String","collections::string","A growable string stored as a UTF-8 encoded buffer."],[3,"FromUtf8Error","","A possible error value from the `String::from_utf8` function."],[3,"FromUtf16Error","","A possible error value from the `String::from_utf16` function."],[3,"DerefString","","Wrapper type providing a `&String` reference via `Deref`."],[5,"as_string","","Convert a string slice to a wrapper type providing a `&String` reference."],[6,"CowString","","A clone-on-write string"],[8,"ToString","","A generic trait for converting a value to a string"],[10,"to_string","","Converts the value of `self` to an owned string",192],[11,"cmp","","",193],[11,"partial_cmp","","",193],[11,"lt","","",193],[11,"le","","",193],[11,"gt","","",193],[11,"ge","","",193],[11,"clone","","",193],[11,"fmt","","",194],[11,"fmt","","",195],[11,"new","","Creates a new string buffer initialized with the empty string.",193],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",193],[11,"from_str","","Creates a new string buffer from the given string.",193],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",193],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",193],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",193],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",193],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",193],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",193],[11,"into_bytes","","Return the underlying byte buffer, encoded as UTF-8.",193],[11,"push_str","","Pushes the given string onto this string buffer.",193],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",193],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",193],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",193],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",193],[11,"push","","Adds the given character to the end of the string.",193],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",193],[11,"truncate","","Shortens a string to the specified length.",193],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",193],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",193],[11,"insert","","Insert a character into the string buffer at byte position `idx`.",193],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",193],[11,"len","","Return the number of bytes in this string.",193],[11,"is_empty","","Returns true if the string contains no bytes",193],[11,"clear","","Truncates the string, returning it to 0 length.",193],[11,"into_bytes","","Consume this error, returning the bytes that were attempted to make a\n`String` with.",194],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",194],[11,"fmt","","",194],[11,"description","","",194],[11,"fmt","","",195],[11,"description","","",195],[11,"from_iter","","",193],[11,"from_iter","","",193],[11,"extend","","",193],[11,"extend","","",193],[11,"eq","","",193],[11,"ne","","",193],[11,"eq","","",193],[11,"ne","","",193],[11,"eq","collections::borrow","",15],[11,"ne","","",15],[11,"eq","collections::string","",193],[11,"ne","","",193],[11,"eq","collections::borrow","",15],[11,"ne","","",15],[11,"as_slice","collections::string","",193],[11,"default","","",193],[11,"fmt","","",193],[11,"fmt","","",193],[11,"hash","","",193],[6,"Output","",""],[11,"add","","",193],[6,"Output","",""],[11,"index","","",193],[6,"Output","",""],[11,"index","","",193],[6,"Output","",""],[11,"index","","",193],[6,"Output","",""],[11,"index","","",193],[6,"Target","",""],[11,"deref","","",193],[6,"Target","",""],[11,"deref","","",196],[6,"Err","",""],[11,"from_str","","",193],[11,"into_cow","","",193],[11,"as_slice","collections::borrow","",15],[11,"write_str","collections::string","",193],[0,"vec","collections","A growable list type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'"],[3,"Vec","collections::vec","A growable list type, written `Vec<T>` but pronounced 'vector.'"],[3,"IntoIter","","An iterator that moves out of a vector."],[3,"Drain","","An iterator that drains a vector."],[3,"DerefVec","","Wrapper type providing a `&Vec<T>` reference via `Deref`."],[5,"as_vec","","Convert a slice to a wrapper type providing a `&Vec<T>` reference."],[6,"CowVec","","A clone-on-write vector"],[11,"new","","Constructs a new, empty `Vec<T>`.",197],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",197],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",197],[11,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",197],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",197],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Vec<T>`. The collection may reserve more space to avoid frequent reallocations.",197],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",197],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",197],[11,"into_boxed_slice","","Convert the vector into Box<[T]>.",197],[11,"truncate","","Shorten a vector, dropping excess elements.",197],[11,"as_mut_slice","","Returns a mutable slice of the elements of `self`.",197],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",197],[11,"set_len","","Sets the length of a vector.",197],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",197],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",197],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",197],[11,"retain","","Retains only the elements specified by the predicate.",197],[11,"push","","Appends an element to the back of a collection.",197],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",197],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",197],[11,"drain","","Creates a draining iterator that clears the `Vec` and iterates over\nthe removed items from start to end.",197],[11,"clear","","Clears the vector, removing all values.",197],[11,"len","","Returns the number of elements in the vector.",197],[11,"is_empty","","Returns `true` if the vector contains no elements.",197],[11,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",197],[11,"split_off","","Splits the collection into two at the given index.",197],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",197],[11,"push_all","","Appends all elements in a slice to the `Vec`.",197],[11,"dedup","","Removes consecutive repeated elements in the vector.",197],[11,"clone","","",197],[11,"clone_from","","",197],[11,"hash","","",197],[6,"Output","",""],[11,"index","","",197],[11,"index_mut","","",197],[6,"Output","",""],[11,"index","","",197],[6,"Output","",""],[11,"index","","",197],[6,"Output","",""],[11,"index","","",197],[6,"Output","",""],[11,"index","","",197],[11,"index_mut","","",197],[11,"index_mut","","",197],[11,"index_mut","","",197],[11,"index_mut","","",197],[6,"Target","",""],[11,"deref","","",197],[11,"deref_mut","","",197],[11,"from_iter","","",197],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",197],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","collections::borrow","",15],[11,"ne","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"eq","collections::vec","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"partial_cmp","","",197],[11,"cmp","","",197],[11,"as_slice","","Returns a slice into `self`.",197],[6,"Output","",""],[11,"add","","",197],[11,"drop","","",197],[11,"default","","",197],[11,"fmt","","",197],[11,"from_iter","collections::borrow","",15],[11,"into_cow","collections::vec","",197],[11,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",198],[6,"Item","",""],[11,"next","","",198],[11,"size_hint","","",198],[11,"next_back","","",198],[11,"drop","","",198],[6,"Item","",""],[11,"next","","",199],[11,"size_hint","","",199],[11,"next_back","","",199],[11,"drop","","",199],[6,"Target","",""],[11,"deref","","",200],[11,"drop","","",200],[0,"vec_deque","collections","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer."],[3,"VecDeque","collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a\ndouble-ended queue efficiently."],[3,"Iter","","`VecDeque` iterator."],[3,"IterMut","","`VecDeque` mutable iterator."],[3,"IntoIter","","A by-value VecDeque iterator"],[3,"Drain","","A draining VecDeque iterator"],[11,"clone","","",201],[11,"drop","","",201],[11,"default","","",201],[11,"new","","Creates an empty `VecDeque`.",201],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",201],[11,"get","","Retrieves an element in the `VecDeque` by index.",201],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",201],[11,"swap","","Swaps elements at indices `i` and `j`.",201],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",201],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",201],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Ringbuf`. The collection may reserve more space to avoid frequent reallocations.",201],[11,"shrink_to_fit","","Shrinks the capacity of the ringbuf as much as possible.",201],[11,"truncate","","Shorten a ringbuf, dropping excess elements from the back.",201],[11,"iter","","Returns a front-to-back iterator.",201],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",201],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",201],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",201],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",201],[11,"len","","Returns the number of elements in the `VecDeque`.",201],[11,"is_empty","","Returns true if the buffer contains no elements",201],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",201],[11,"clear","","Clears the buffer, removing all values.",201],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",201],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",201],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",201],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",201],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",201],[11,"push_front","","Inserts an element first in the sequence.",201],[11,"push_back","","Appends an element to the back of a buffer",201],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",201],[11,"swap_back_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the last\nelement.",201],[11,"swap_front_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the first\nelement.",201],[11,"insert","","Inserts an element at position `i` within the ringbuf. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",201],[11,"remove","","Removes and returns the element at position `i` from the ringbuf.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `i` is out of bounds.",201],[11,"split_off","","Splits the collection into two at the given index.",201],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",201],[11,"resize","","Modifies the ringbuf in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",201],[11,"clone","","",202],[6,"Item","",""],[11,"next","","",202],[11,"size_hint","","",202],[11,"next_back","","",202],[11,"indexable","","",202],[11,"idx","","",202],[6,"Item","",""],[11,"next","","",203],[11,"size_hint","","",203],[11,"next_back","","",203],[6,"Item","",""],[11,"next","","",204],[11,"size_hint","","",204],[11,"next_back","","",204],[11,"drop","","",205],[6,"Item","",""],[11,"next","","",205],[11,"size_hint","","",205],[11,"next_back","","",205],[11,"eq","","",201],[11,"partial_cmp","","",201],[11,"cmp","","",201],[11,"hash","","",201],[6,"Output","",""],[11,"index","","",201],[11,"index_mut","","",201],[11,"from_iter","","",201],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",201],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","","",201],[11,"fmt","","",201],[0,"vec_map","collections","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key)."],[3,"VecMap","collections::vec_map","A map optimized for small integer keys."],[3,"VacantEntry","","A vacant Entry."],[3,"OccupiedEntry","","An occupied Entry."],[3,"Iter","","An iterator over the key-value pairs of a map."],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable."],[3,"Keys","","An iterator over the keys of a map."],[3,"Values","","An iterator over the values of a map."],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map."],[3,"Drain","",""],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied."],[13,"Vacant","","A vacant Entry",206],[13,"Occupied","","An occupied Entry",206],[11,"default","","",207],[11,"clone","","",207],[11,"clone_from","","",207],[11,"hash","","",207],[11,"new","","Creates an empty `VecMap`.",207],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",207],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",207],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",207],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",207],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",207],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",207],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",207],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",207],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",207],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",207],[11,"split_off","","Splits the collection into two at the given key.",207],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",207],[11,"len","","Return the number of elements in the map.",207],[11,"is_empty","","Return true if the map contains no elements.",207],[11,"clear","","Clears the map, removing all key-value pairs.",207],[11,"get","","Returns a reference to the value corresponding to the key.",207],[11,"contains_key","","Returns true if the map contains a value for the specified key.",207],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",207],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",207],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",207],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",207],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",206],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",208],[11,"get","","Gets a reference to the value in the entry.",209],[11,"get_mut","","Gets a mutable reference to the value in the entry.",209],[11,"into_mut","","Converts the entry into a mutable reference to its value.",209],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",209],[11,"remove","","Takes the value of the entry out of the map, and returns it.",209],[11,"eq","","",207],[11,"partial_cmp","","",207],[11,"cmp","","",207],[11,"fmt","","",207],[11,"from_iter","","",207],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",207],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","","",207],[6,"Output","",""],[11,"index","","",207],[11,"index_mut","","",207],[11,"clone","","",210],[6,"Item","",""],[11,"next","","",210],[11,"size_hint","","",210],[11,"next_back","","",210],[6,"Item","",""],[11,"next","","",211],[11,"size_hint","","",211],[11,"next_back","","",211],[11,"clone","","",212],[11,"clone","","",213],[6,"Item","",""],[11,"next","","",214],[11,"size_hint","","",214],[11,"next_back","","",214],[6,"Item","",""],[11,"next","","",212],[11,"size_hint","","",212],[11,"next_back","","",212],[6,"Item","",""],[11,"next","","",213],[11,"size_hint","","",213],[11,"next_back","","",213],[6,"Item","",""],[11,"next","","",215],[11,"size_hint","","",215],[11,"next_back","","",215],[0,"bit_vec","collections",""],[3,"Iter","collections::bit_vec","An iterator for `BitVec`."],[0,"bit_set","collections",""],[3,"Union","collections::bit_set",""],[3,"Intersection","",""],[3,"Difference","",""],[3,"SymmetricDifference","",""],[3,"Iter","","An iterator for `BitSet`."],[0,"btree_map","collections",""],[3,"BTreeMap","collections::btree_map","A map based on a B-Tree."],[3,"Iter","","An iterator over a BTreeMap's entries."],[3,"IterMut","","A mutable iterator over a BTreeMap's entries."],[3,"IntoIter","","An owning iterator over a BTreeMap's entries."],[3,"Keys","","An iterator over a BTreeMap's keys."],[3,"Values","","An iterator over a BTreeMap's values."],[3,"Range","","An iterator over a sub-range of BTreeMap's entries."],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap's entries."],[3,"VacantEntry","","A vacant Entry."],[3,"OccupiedEntry","","An occupied Entry."],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied."],[13,"Vacant","","A vacant Entry",216],[13,"Occupied","","An occupied Entry",216],[11,"clone","collections","",13],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",13],[11,"with_b","","Makes a new empty BTreeMap with the given B.",13],[11,"clear","","Clears the map, removing all values.",13],[11,"get","","Returns a reference to the value corresponding to the key.",13],[11,"contains_key","","Returns true if the map contains a value for the specified key.",13],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",13],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",13],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",13],[6,"Item","collections::btree_map",""],[6,"IntoIter","",""],[11,"into_iter","collections","",13],[6,"Item","collections::btree_map",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"from_iter","collections","",13],[11,"extend","","",13],[11,"hash","","",13],[11,"default","","",13],[11,"eq","","",13],[11,"partial_cmp","","",13],[11,"cmp","","",13],[11,"fmt","","",13],[6,"Output","collections::btree_map",""],[11,"index","collections","",13],[11,"index_mut","","",13],[6,"Item","collections::btree_map",""],[11,"next","","",217],[11,"size_hint","","",217],[11,"next_back","","",217],[6,"Item","",""],[11,"next","","",218],[11,"size_hint","","",218],[11,"next_back","","",218],[6,"Item","",""],[11,"next","","",219],[11,"size_hint","","",219],[11,"next_back","","",219],[6,"Item","",""],[11,"next","","",220],[11,"size_hint","","",220],[11,"next_back","","",220],[6,"Item","",""],[11,"next","","",221],[11,"size_hint","","",221],[11,"next_back","","",221],[6,"Item","",""],[11,"next","","",222],[11,"next_back","","",222],[6,"Item","",""],[11,"next","","",223],[11,"next_back","","",223],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",216],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",224],[11,"get","","Gets a reference to the value in the entry.",225],[11,"get_mut","","Gets a mutable reference to the value in the entry.",225],[11,"into_mut","","Converts the entry into a mutable reference to its value.",225],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",225],[11,"remove","","Takes the value of the entry out of the map, and returns it.",225],[11,"iter","collections","Gets an iterator over the entries of the map.",13],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",13],[11,"into_iter","","Gets an owning iterator over the entries of the map.",13],[11,"keys","","Gets an iterator over the keys of the map.",13],[11,"values","","Gets an iterator over the values of the map.",13],[11,"len","","Return the number of elements in the map.",13],[11,"is_empty","","Return true if the map contains no elements.",13],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",13],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",13],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",13],[0,"btree_set","",""],[3,"BTreeSet","collections::btree_set","A set based on a B-Tree."],[3,"Iter","","An iterator over a BTreeSet's items."],[3,"IntoIter","","An owning iterator over a BTreeSet's items."],[3,"Range","","An iterator over a sub-range of BTreeSet's items."],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order)."],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order)."],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order)."],[3,"Union","","A lazy iterator producing elements in the set union (in-order)."],[11,"partial_cmp","collections","",14],[11,"lt","","",14],[11,"le","","",14],[11,"gt","","",14],[11,"ge","","",14],[11,"cmp","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"hash","","",14],[11,"clone","","",14],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",14],[11,"with_b","","Makes a new BTreeSet with the given B.",14],[11,"iter","","Gets an iterator over the BTreeSet's contents.",14],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",14],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",14],[11,"difference","","Visits the values representing the difference, in ascending order.",14],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",14],[11,"intersection","","Visits the values representing the intersection, in ascending order.",14],[11,"union","","Visits the values representing the union, in ascending order.",14],[11,"len","","Return the number of elements in the set",14],[11,"is_empty","","Returns true if the set contains no elements",14],[11,"clear","","Clears the set, removing all values.",14],[11,"contains","","Returns `true` if the set contains a value.",14],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",14],[11,"is_subset","","Returns `true` if the set is a subset of another.",14],[11,"is_superset","","Returns `true` if the set is a superset of another.",14],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",14],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",14],[11,"from_iter","","",14],[6,"Item","collections::btree_set",""],[6,"IntoIter","",""],[11,"into_iter","collections","",14],[6,"Item","collections::btree_set",""],[6,"IntoIter","",""],[11,"extend","collections","",14],[11,"default","","",14],[6,"Output","collections::btree_set",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","collections","",14],[6,"Item","collections::btree_set",""],[11,"next","","",226],[11,"size_hint","","",226],[11,"next_back","","",226],[6,"Item","",""],[11,"next","","",227],[11,"size_hint","","",227],[11,"next_back","","",227],[6,"Item","",""],[11,"next","","",228],[11,"next_back","","",228],[6,"Item","",""],[11,"next","","",229],[6,"Item","",""],[11,"next","","",230],[6,"Item","",""],[11,"next","","",231],[6,"Item","",""],[11,"next","","",232],[14,"vec!","collections","Creates a `Vec` containing the arguments."],[14,"format!","","Use the syntax described in `std::fmt` to create a value of type `String`.\nSee `std::fmt` for more information."],[15,"slice","","Utilities for slice manipulation"],[15,"str","","Unicode string manipulation (the [`str`](../primitive.str.html) type)."],[11,"clone","collections::bit_vec","",233],[11,"next","","",233],[11,"size_hint","","",233],[11,"next_back","","",233],[11,"indexable","","",233],[11,"idx","","",233],[11,"clone","collections::bit_set","",234],[11,"next","","",234],[11,"size_hint","","",234],[11,"next","","",235],[11,"size_hint","","",235],[11,"next","","",236],[11,"size_hint","","",236],[11,"next","","",237],[11,"size_hint","","",237],[11,"next","","",238],[11,"size_hint","","",238],[11,"next","collections::btree_map","",217],[11,"size_hint","","",217],[11,"next_back","","",217],[11,"next","","",218],[11,"size_hint","","",218],[11,"next_back","","",218],[11,"next","","",219],[11,"size_hint","","",219],[11,"next_back","","",219],[11,"next","","",220],[11,"size_hint","","",220],[11,"next_back","","",220],[11,"next","","",221],[11,"size_hint","","",221],[11,"next_back","","",221],[11,"next","","",222],[11,"next_back","","",222],[11,"next","","",223],[11,"next_back","","",223],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",216],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",224],[11,"get","","Gets a reference to the value in the entry.",225],[11,"get_mut","","Gets a mutable reference to the value in the entry.",225],[11,"into_mut","","Converts the entry into a mutable reference to its value.",225],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",225],[11,"remove","","Takes the value of the entry out of the map, and returns it.",225],[11,"next","collections::btree_set","",226],[11,"size_hint","","",226],[11,"next_back","","",226],[11,"next","","",227],[11,"size_hint","","",227],[11,"next_back","","",227],[11,"next","","",228],[11,"next_back","","",228],[11,"next","","",229],[11,"next","","",230],[11,"next","","",231],[11,"next","","",232],[11,"borrow","collections::vec","",197],[11,"borrow_mut","","",197],[11,"borrow","collections::string","",193]],"paths":[[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[8,"BoxAny"],[4,"Bound"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BitVec"],[3,"BitSet"],[3,"BTreeMap"],[3,"BTreeSet"],[4,"Cow"],[8,"Borrow"],[8,"BorrowMut"],[8,"ToOwned"],[8,"IntoCow"],[8,"CLike"],[3,"EnumSet"],[3,"Iter"],[3,"Formatter"],[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"NoCopy"],[3,"Managed"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"BorrowRefMut"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Finallyalizer"],[3,"Rev"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Unfold"],[3,"Counter"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Repeat"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqPattern"],[3,"CharEqSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[4,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"BytesDeref"],[3,"CharSplits"],[3,"CharSplitsN"],[3,"TwoWaySearcher"],[4,"OldSearcher"],[3,"OldMatchIndices"],[3,"MatchIndices"],[3,"SplitStr"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[4,"Alignment"],[3,"Error"],[3,"Arguments"],[8,"Write"],[8,"Octal"],[8,"Binary"],[8,"Display"],[8,"Debug"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[8,"AsSlice"],[8,"IntSliceExt"],[8,"MutableByteVector"],[8,"SliceExt"],[8,"SliceConcatExt"],[3,"ElementSwaps"],[3,"Permutations"],[8,"FromStr"],[8,"Str"],[3,"CharRange"],[8,"CharEq"],[4,"GraphemeCat"],[3,"GraphemeIndices"],[3,"Graphemes"],[4,"GraphemeState"],[3,"Utf16Items"],[4,"Utf16Item"],[3,"Utf16Encoder"],[3,"Words"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"StrExt"],[3,"Decompositions"],[3,"Recompositions"],[3,"Utf16Units"],[8,"ToString"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"DerefString"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"DerefVec"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[4,"Entry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Iter"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};
searchIndex['serialize'] = {"items":[[0,"","serialize","Support code for encoding and decoding types."],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::old_path::posix","",5],[11,"decode","","",5],[11,"encode","std::old_path::windows","",6],[11,"decode","","",6],[11,"encode","std::path","",7],[11,"decode","","",7],[11,"encode","core::cell","",8],[11,"decode","","",8],[11,"encode","","",9],[11,"decode","","",9],[11,"encode","alloc::arc","",10],[11,"decode","","",10],[11,"encode","collections::linked_list","",11],[11,"decode","","",11],[11,"encode","collections::vec_deque","",12],[11,"decode","","",12],[11,"encode","collections::btree::map","",13],[11,"decode","","",13],[11,"encode","collections::btree::set","",14],[11,"decode","","",14],[11,"encode","collections::enum_set","",15],[11,"decode","","",15],[11,"encode","std::collections::hash::map","",16],[11,"decode","","",16],[11,"encode","std::collections::hash::set","",17],[11,"decode","","",17],[11,"encode","collections::vec_map","",18],[11,"decode","","",18],[0,"hex","serialize","Hex binary-to-text encoding"],[4,"FromHexError","serialize::hex","Errors that can occur when decoding a hex encoded string"],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",19],[13,"InvalidHexLength","","The input had an invalid length",19],[8,"ToHex","","A trait for converting a value to hexadecimal encoding"],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",20],[8,"FromHex","","A trait for converting hexadecimal encoded values"],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",21],[11,"fmt","","",19],[11,"fmt","","",19],[11,"description","","",19],[0,"json","serialize","JSON parsing and serialization"],[3,"PrettyJson","serialize::json",""],[3,"AsJson","",""],[3,"AsPrettyJson","",""],[3,"Encoder","","A structure for implementing serialization to JSON."],[3,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of\ncompact data"],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[3,"Decoder","","A structure to decode JSON to values in rust."],[4,"Json","","Represents a json value"],[13,"I64","","",22],[13,"U64","","",22],[13,"F64","","",22],[13,"String","","",22],[13,"Boolean","","",22],[13,"Array","","",22],[13,"Object","","",22],[13,"Null","","",22],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[13,"InvalidSyntax","","",23],[13,"InvalidNumber","","",23],[13,"EOFWhileParsingObject","","",23],[13,"EOFWhileParsingArray","","",23],[13,"EOFWhileParsingValue","","",23],[13,"EOFWhileParsingString","","",23],[13,"KeyMustBeAString","","",23],[13,"ExpectedColon","","",23],[13,"TrailingCharacters","","",23],[13,"TrailingComma","","",23],[13,"InvalidEscape","","",23],[13,"InvalidUnicodeCodePoint","","",23],[13,"LoneLeadingSurrogateInHexEscape","","",23],[13,"UnexpectedEndOfHexEscape","","",23],[13,"UnrecognizedHex","","",23],[13,"NotFourDigit","","",23],[13,"NotUtf8","","",23],[4,"ParserError","",""],[13,"SyntaxError","","msg, line, col",24],[13,"IoError","","",24],[4,"DecoderError","",""],[13,"ParseError","","",25],[13,"ExpectedError","","",25],[13,"MissingFieldError","","",25],[13,"UnknownVariantError","","",25],[13,"ApplicationError","","",25],[4,"EncoderError","",""],[13,"FmtError","","",26],[13,"BadHashmapKey","","",26],[4,"JsonEvent","","The output of the streaming parser."],[13,"ObjectStart","","",27],[13,"ObjectEnd","","",27],[13,"ArrayStart","","",27],[13,"ArrayEnd","","",27],[13,"BooleanValue","","",27],[13,"I64Value","","",27],[13,"U64Value","","",27],[13,"F64Value","","",27],[13,"StringValue","","",27],[13,"NullValue","","",27],[13,"Error","","",27],[4,"StackElement","","StackElements compose a Stack.\nFor example, StackElement::Key(\"foo\"), StackElement::Key(\"bar\"),\nStackElement::Index(3) and StackElement::Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[13,"Index","","",28],[13,"Key","","",28],[5,"error_str","","Returns a readable error string for a given error code."],[5,"decode","","Shortcut function to decode a JSON `&str` into an object"],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[5,"from_reader","","Decodes a json value from an `&mut old_io::Reader`"],[5,"from_str","","Decodes a json value from a string"],[6,"Array","",""],[6,"Object","",""],[6,"BuilderError","",""],[6,"EncodeResult","",""],[6,"DecodeResult","",""],[8,"ToJson","","A trait for converting values to JSON"],[10,"to_json","","Converts the value of `self` to an instance of JSON",29],[11,"fmt","","",22],[11,"partial_cmp","","",22],[11,"lt","","",22],[11,"le","","",22],[11,"gt","","",22],[11,"ge","","",22],[11,"eq","","",22],[11,"ne","","",22],[11,"clone","","",22],[11,"fmt","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"clone","","",23],[11,"fmt","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"clone","","",24],[11,"fmt","","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"clone","","",25],[11,"fmt","","",26],[11,"fmt","","",23],[11,"fmt","","",24],[11,"fmt","","",25],[11,"description","","",25],[11,"fmt","","",26],[11,"description","","",26],[11,"from_error","","",26],[11,"new","","Creates a new JSON encoder whose output will be written to the writer\nspecified.",30],[6,"Error","",""],[11,"emit_nil","","",30],[11,"emit_uint","","",30],[11,"emit_u64","","",30],[11,"emit_u32","","",30],[11,"emit_u16","","",30],[11,"emit_u8","","",30],[11,"emit_int","","",30],[11,"emit_i64","","",30],[11,"emit_i32","","",30],[11,"emit_i16","","",30],[11,"emit_i8","","",30],[11,"emit_bool","","",30],[11,"emit_f64","","",30],[11,"emit_f32","","",30],[11,"emit_char","","",30],[11,"emit_str","","",30],[11,"emit_enum","","",30],[11,"emit_enum_variant","","",30],[11,"emit_enum_variant_arg","","",30],[11,"emit_enum_struct_variant","","",30],[11,"emit_enum_struct_variant_field","","",30],[11,"emit_struct","","",30],[11,"emit_struct_field","","",30],[11,"emit_tuple","","",30],[11,"emit_tuple_arg","","",30],[11,"emit_tuple_struct","","",30],[11,"emit_tuple_struct_arg","","",30],[11,"emit_option","","",30],[11,"emit_option_none","","",30],[11,"emit_option_some","","",30],[11,"emit_seq","","",30],[11,"emit_seq_elt","","",30],[11,"emit_map","","",30],[11,"emit_map_elt_key","","",30],[11,"emit_map_elt_val","","",30],[11,"new","","Creates a new encoder whose output will be written to the specified writer",31],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",31],[6,"Error","",""],[11,"emit_nil","","",31],[11,"emit_uint","","",31],[11,"emit_u64","","",31],[11,"emit_u32","","",31],[11,"emit_u16","","",31],[11,"emit_u8","","",31],[11,"emit_int","","",31],[11,"emit_i64","","",31],[11,"emit_i32","","",31],[11,"emit_i16","","",31],[11,"emit_i8","","",31],[11,"emit_bool","","",31],[11,"emit_f64","","",31],[11,"emit_f32","","",31],[11,"emit_char","","",31],[11,"emit_str","","",31],[11,"emit_enum","","",31],[11,"emit_enum_variant","","",31],[11,"emit_enum_variant_arg","","",31],[11,"emit_enum_struct_variant","","",31],[11,"emit_enum_struct_variant_field","","",31],[11,"emit_struct","","",31],[11,"emit_struct_field","","",31],[11,"emit_tuple","","",31],[11,"emit_tuple_arg","","",31],[11,"emit_tuple_struct","","",31],[11,"emit_tuple_struct_arg","","",31],[11,"emit_option","","",31],[11,"emit_option_none","","",31],[11,"emit_option_some","","",31],[11,"emit_seq","","",31],[11,"emit_seq_elt","","",31],[11,"emit_map","","",31],[11,"emit_map_elt_key","","",31],[11,"emit_map_elt_val","","",31],[11,"encode","","",22],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",22],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",22],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",22],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",22],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",22],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",22],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",22],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",22],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",22],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",22],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",22],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",22],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",22],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",22],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",22],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",22],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",22],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",22],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",22],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",22],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",22],[6,"Output","",""],[11,"index","","",22],[6,"Output","",""],[11,"index","","",22],[11,"fmt","","",27],[11,"clone","","",27],[11,"eq","","",27],[11,"ne","","",27],[11,"fmt","","",28],[11,"clone","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"new","","",32],[11,"len","","Returns The number of elements in the Stack.",32],[11,"is_empty","","Returns true if the stack is empty.",32],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",32],[11,"is_equal_to","","Compares this stack with an array of StackElements.",32],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",32],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",32],[11,"top","","Returns the top-most element (if any).",32],[6,"Item","",""],[11,"next","","",33],[11,"new","","Creates the JSON parser.",33],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",33],[11,"new","","Create a JSON Builder.",34],[11,"build","","",34],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",35],[6,"Error","",""],[11,"read_nil","","",35],[11,"read_uint","","",35],[11,"read_u8","","",35],[11,"read_u16","","",35],[11,"read_u32","","",35],[11,"read_u64","","",35],[11,"read_int","","",35],[11,"read_i8","","",35],[11,"read_i16","","",35],[11,"read_i32","","",35],[11,"read_i64","","",35],[11,"read_f32","","",35],[11,"read_f64","","",35],[11,"read_bool","","",35],[11,"read_char","","",35],[11,"read_str","","",35],[11,"read_enum","","",35],[11,"read_enum_variant","","",35],[11,"read_enum_variant_arg","","",35],[11,"read_enum_struct_variant","","",35],[11,"read_enum_struct_variant_field","","",35],[11,"read_struct","","",35],[11,"read_struct_field","","",35],[11,"read_tuple","","",35],[11,"read_tuple_arg","","",35],[11,"read_tuple_struct","","",35],[11,"read_tuple_struct_arg","","",35],[11,"read_option","","",35],[11,"read_seq","","",35],[11,"read_seq_elt","","",35],[11,"read_map","","",35],[11,"read_map_elt_key","","",35],[11,"read_map_elt_val","","",35],[11,"error","","",35],[11,"to_json","","",22],[11,"to_json","collections::string","",0],[11,"to_json","collections::vec","",3],[11,"to_json","collections::btree::map","",13],[11,"to_json","std::collections::hash::map","",16],[11,"to_json","core::option","",4],[11,"fmt","serialize::json","Encodes a json value into a string",22],[11,"fmt","","Encodes a json value into a string",36],[11,"fmt","","Encodes a json value into a string",37],[11,"indent","","Set the indentation level for the emitted JSON",38],[11,"fmt","","Encodes a json value into a string",38],[6,"Err","",""],[11,"from_str","","",22],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::old_path::posix","",5],[11,"decode","","",5],[11,"encode","std::old_path::windows","",6],[11,"decode","","",6],[11,"encode","std::path","",7],[11,"decode","","",7],[11,"encode","core::cell","",8],[11,"decode","","",8],[11,"encode","","",9],[11,"decode","","",9],[11,"encode","alloc::arc","",10],[11,"decode","","",10],[8,"Decoder","serialize",""],[16,"Error","serialize::Decoder",""],[10,"read_nil","serialize","",39],[10,"read_uint","","",39],[10,"read_u64","","",39],[10,"read_u32","","",39],[10,"read_u16","","",39],[10,"read_u8","","",39],[10,"read_int","","",39],[10,"read_i64","","",39],[10,"read_i32","","",39],[10,"read_i16","","",39],[10,"read_i8","","",39],[10,"read_bool","","",39],[10,"read_f64","","",39],[10,"read_f32","","",39],[10,"read_char","","",39],[10,"read_str","","",39],[10,"read_enum","","",39],[10,"read_enum_variant","","",39],[10,"read_enum_variant_arg","","",39],[10,"read_enum_struct_variant","","",39],[10,"read_enum_struct_variant_field","","",39],[10,"read_struct","","",39],[10,"read_struct_field","","",39],[10,"read_tuple","","",39],[10,"read_tuple_arg","","",39],[10,"read_tuple_struct","","",39],[10,"read_tuple_struct_arg","","",39],[10,"read_option","","",39],[10,"read_seq","","",39],[10,"read_seq_elt","","",39],[10,"read_map","","",39],[10,"read_map_elt_key","","",39],[10,"read_map_elt_val","","",39],[10,"error","","",39],[8,"Encoder","",""],[16,"Error","serialize::Encoder",""],[10,"emit_nil","serialize","",40],[10,"emit_uint","","",40],[10,"emit_u64","","",40],[10,"emit_u32","","",40],[10,"emit_u16","","",40],[10,"emit_u8","","",40],[10,"emit_int","","",40],[10,"emit_i64","","",40],[10,"emit_i32","","",40],[10,"emit_i16","","",40],[10,"emit_i8","","",40],[10,"emit_bool","","",40],[10,"emit_f64","","",40],[10,"emit_f32","","",40],[10,"emit_char","","",40],[10,"emit_str","","",40],[10,"emit_enum","","",40],[10,"emit_enum_variant","","",40],[10,"emit_enum_variant_arg","","",40],[10,"emit_enum_struct_variant","","",40],[10,"emit_enum_struct_variant_field","","",40],[10,"emit_struct","","",40],[10,"emit_struct_field","","",40],[10,"emit_tuple","","",40],[10,"emit_tuple_arg","","",40],[10,"emit_tuple_struct","","",40],[10,"emit_tuple_struct_arg","","",40],[10,"emit_option","","",40],[10,"emit_option_none","","",40],[10,"emit_option_some","","",40],[10,"emit_seq","","",40],[10,"emit_seq_elt","","",40],[10,"emit_map","","",40],[10,"emit_map_elt_key","","",40],[10,"emit_map_elt_val","","",40],[8,"Decodable","",""],[10,"decode","","",41],[8,"Encodable","",""],[10,"encode","","",42],[8,"DecoderHelpers","",""],[10,"read_to_vec","","",43],[8,"EncoderHelpers","",""],[10,"emit_from_vec","","",44]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"Path"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"EnumSet"],[3,"HashMap"],[3,"HashSet"],[3,"VecMap"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"PrettyEncoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['term'] = {"items":[[0,"","term","Terminal formatting library."],[3,"WriterWrapper","","A hack to work around the fact that `Box<Writer + Send>` does not\ncurrently implement `Writer`."],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be\nopened."],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be\nopened."],[0,"terminfo","","Terminfo database interface."],[3,"TermInfo","term::terminfo","A parsed terminfo database entry."],[12,"names","","Names for the terminal",0],[12,"bools","","Map of capability name to boolean value",0],[12,"numbers","","Map of capability name to numeric value",0],[12,"strings","","Map of capability name to raw (unexpanded) string",0],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its\nparsed Terminfo database record."],[0,"searcher","","ncurses-compatible database discovery"],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`"],[5,"open","","Return open file for `term`"],[0,"parser","term::terminfo","TermInfo format parsing.\nncurses-compatible compiled terminfo format parsing (term(5))"],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))"],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames` is true"],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals"],[7,"boolfnames","",""],[7,"boolnames","",""],[7,"numfnames","",""],[7,"numnames","",""],[7,"stringfnames","",""],[7,"stringnames","",""],[0,"parm","term::terminfo","Parameterized string expansion"],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays"],[4,"Param","","Types of parameters a capability can use"],[13,"Words","","",1],[13,"Number","","",1],[5,"expand","","Expand a parameterized capability"],[11,"clone","","",1],[11,"new","","Return a new zero-initialized Variables",2],[11,"fmt","term::terminfo","",0],[11,"fg","","",3],[11,"bg","","",3],[11,"attr","","",3],[11,"supports_attr","","",3],[11,"reset","","",3],[11,"get_ref","","",3],[11,"get_mut","","",3],[11,"unwrap","","",3],[11,"new","","Returns `None` whenever the terminal cannot be created for some\nreason.",3],[11,"write_all","","",3],[11,"flush","","",3],[0,"color","term","Terminal color definitions"],[6,"Color","term::color","Number for a terminal color"],[17,"BLACK","",""],[17,"RED","",""],[17,"GREEN","",""],[17,"YELLOW","",""],[17,"BLUE","",""],[17,"MAGENTA","",""],[17,"CYAN","",""],[17,"WHITE","",""],[17,"BRIGHT_BLACK","",""],[17,"BRIGHT_RED","",""],[17,"BRIGHT_GREEN","",""],[17,"BRIGHT_YELLOW","",""],[17,"BRIGHT_BLUE","",""],[17,"BRIGHT_MAGENTA","",""],[17,"BRIGHT_CYAN","",""],[17,"BRIGHT_WHITE","",""],[0,"attr","term","Terminal attributes"],[4,"Attr","term::attr","Terminal attributes for use with term.attr()."],[13,"Bold","","Bold (or possibly bright) mode",4],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",4],[13,"Italic","","Italics mode. Often not supported",4],[13,"Underline","","Underline mode",4],[13,"Blink","","Blink mode",4],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",4],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",4],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",4],[13,"ForegroundColor","","Convenience attribute to set the foreground color",4],[13,"BackgroundColor","","Convenience attribute to set the background color",4],[8,"Terminal","term","A terminal with similar capabilities to an ANSI Terminal\n(foreground/background colors etc)."],[10,"fg","","Sets the foreground color to the given color.",5],[10,"bg","","Sets the background color to the given color.",5],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(true)`\nif the attribute was supported, `Ok(false)` otherwise, and `Err(e)` if\nthere was an I/O error.",5],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",5],[10,"reset","","Resets all terminal attributes and color to the default.\nReturns `Ok()`.",5],[10,"get_ref","","Gets an immutable reference to the stream inside",5],[10,"get_mut","","Gets a mutable reference to the stream inside",5],[8,"UnwrappableTerminal","","A terminal which can be unwrapped."],[10,"unwrap","","Returns the contained stream, destroying the `Terminal`",6],[11,"write_all","","",7],[11,"flush","","",7]],"paths":[[3,"TermInfo"],[4,"Param"],[3,"Variables"],[3,"TerminfoTerminal"],[4,"Attr"],[8,"Terminal"],[8,"UnwrappableTerminal"],[3,"WriterWrapper"]]};
searchIndex['arena'] = {"items":[[0,"","arena","The arena, a fast but limited type of allocator."],[3,"Arena","","A slower reflection-based arena that can allocate objects of any type."],[3,"TypedArena","","A faster arena that can hold objects of only one type."],[11,"new","","Allocates a new Arena with 32 bytes preallocated.",0],[11,"new_with_size","","Allocates a new Arena with `initial_size` bytes preallocated.",0],[11,"drop","","",0],[11,"alloc","","Allocates a new item in the arena, using `op` to initialize the value,\nand returns a reference to it.",0],[11,"new","","Creates a new `TypedArena` with preallocated space for eight objects.",1],[11,"with_capacity","","Creates a new `TypedArena` with preallocated space for the given number of\nobjects.",1],[11,"alloc","","Allocates an object in the `TypedArena`, returning a reference to it.",1],[11,"drop","","",1]],"paths":[[3,"Arena"],[3,"TypedArena"]]};
searchIndex['flate'] = {"items":[[0,"","flate","Simple [DEFLATE][def]-based compression. This is a wrapper around the\n[`miniz`][mz] library, which is a one-file pure-C implementation of zlib."],[3,"Bytes","",""],[5,"deflate_bytes","","Compress a buffer, without writing any sort of header on the output."],[5,"deflate_bytes_zlib","","Compress a buffer, using a header that zlib can understand."],[5,"inflate_bytes","","Decompress a buffer, without parsing any sort of header on the input."],[5,"inflate_bytes_zlib","","Decompress a buffer that starts with a zlib header."],[6,"Target","",""],[11,"deref","","",0],[11,"drop","","",0]],"paths":[[3,"Bytes"]]};
searchIndex['std'] = {"items":[[0,"","std","# The Rust Standard Library"],[0,"any","","Traits for dynamic typing of any `'static` type (through runtime reflection)"],[8,"Any","std::any","The `Any` trait is implemented by all `'static` types, and can be used for\ndynamic typing"],[10,"get_type_id","","Get the `TypeId` of `self`",0],[11,"of","core::any","Returns the `TypeId` of the type this generic function has been\ninstantiated with",1],[11,"clone","core::num::wrapping","",2],[11,"cmp","","",2],[11,"partial_cmp","","",2],[11,"lt","","",2],[11,"le","","",2],[11,"gt","","",2],[11,"ge","","",2],[11,"eq","","",2],[11,"ne","","",2],[6,"Output","std::any",""],[11,"add","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"sub","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"mul","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"not","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"bitxor","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"bitor","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"bitand","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"shl","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"shr","core::num::wrapping","",2],[11,"fmt","core::num","",3],[11,"eq","","",3],[11,"ne","","",3],[6,"Err","std::any",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[11,"eq","core::num","",4],[11,"ne","","",4],[11,"clone","","",4],[11,"fmt","","",4],[11,"eq","","",5],[11,"ne","","",5],[11,"clone","","",5],[11,"fmt","","",5],[11,"fmt","","",4],[11,"description","","",4],[11,"eq","","",6],[11,"ne","","",6],[11,"clone","","",6],[11,"fmt","","",6],[11,"eq","","",7],[11,"ne","","",7],[11,"clone","","",7],[11,"fmt","","",7],[11,"fmt","","",6],[11,"description","","",6],[11,"hash","core::nonzero","",8],[11,"fmt","","",8],[11,"partial_cmp","","",8],[11,"lt","","",8],[11,"le","","",8],[11,"gt","","",8],[11,"ge","","",8],[11,"cmp","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"clone","","",8],[11,"new","","Create an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",8],[6,"Target","std::any",""],[11,"deref","core::nonzero","",8],[6,"Target","std::any",""],[6,"Target","",""],[6,"Target","",""],[11,"new","core::ptr","Create a new `Unique`.",9],[11,"get","","Dereference the content.",9],[11,"get_mut","","Mutably dereference the content.",9],[6,"Target","std::any",""],[11,"deref","core::ptr","",9],[11,"cmp","core::marker","",10],[11,"partial_cmp","","",10],[11,"lt","","",10],[11,"le","","",10],[11,"gt","","",10],[11,"ge","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"clone","","",10],[11,"cmp","","",11],[11,"partial_cmp","","",11],[11,"lt","","",11],[11,"le","","",11],[11,"gt","","",11],[11,"ge","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"clone","","",11],[11,"hash","","",12],[11,"eq","","",12],[11,"partial_cmp","","",12],[11,"cmp","","",12],[11,"clone","","",12],[6,"Output","std::any",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"eq","core::ops","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"fmt","","",13],[11,"eq","","",14],[11,"ne","","",14],[11,"clone","","",14],[11,"fmt","","",14],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"fmt","","",15],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",16],[6,"Target","std::any",""],[6,"Target","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","core::cmp","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"reverse","","Reverse the `Ordering`.",17],[11,"cmp","","",17],[11,"partial_cmp","","",17],[11,"is","std","Returns true if the boxed type is the same as `T`",0],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",0],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",0],[11,"hash","core::any","",1],[11,"fmt","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"new","core::atomic","Creates a new `AtomicBool`.",18],[11,"load","","Loads a value from the bool.",18],[11,"store","","Stores a value into the bool.",18],[11,"swap","","Stores a value into the bool, returning the old value.",18],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",18],[11,"fetch_and","","Logical \"and\" with a boolean value.",18],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",18],[11,"fetch_or","","Logical \"or\" with a boolean value.",18],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",18],[11,"new","","Creates a new `AtomicIsize`.",19],[11,"load","","Loads a value from the isize.",19],[11,"store","","Stores a value into the isize.",19],[11,"swap","","Stores a value into the isize, returning the old value.",19],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",19],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",19],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",19],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",19],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",19],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",19],[11,"new","","Creates a new `AtomicUsize`.",20],[11,"load","","Loads a value from the usize.",20],[11,"store","","Stores a value into the usize.",20],[11,"swap","","Stores a value into the usize, returning the old value.",20],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",20],[11,"fetch_add","","Add to the current usize, returning the previous value.",20],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",20],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",20],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",20],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",20],[11,"new","","Creates a new `AtomicPtr`.",21],[11,"load","","Loads a value from the pointer.",21],[11,"store","","Stores a value into the pointer.",21],[11,"swap","","Stores a value into the pointer, returning the old value.",21],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",21],[11,"new","","",22],[11,"load","","",22],[11,"store","","",22],[11,"swap","","",22],[11,"compare_and_swap","","",22],[11,"fetch_add","","",22],[11,"fetch_sub","","",22],[11,"fetch_and","","",22],[11,"fetch_or","","",22],[11,"fetch_xor","","",22],[11,"new","","",23],[11,"load","","",23],[11,"store","","",23],[11,"swap","","",23],[11,"compare_and_swap","","",23],[11,"fetch_add","","",23],[11,"fetch_sub","","",23],[11,"fetch_and","","",23],[11,"fetch_or","","",23],[11,"fetch_xor","","",23],[11,"new","core::cell","Creates a new `Cell` containing the given value.",24],[11,"get","","Returns a copy of the contained value.",24],[11,"set","","Sets the contained value.",24],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",24],[11,"clone","","",24],[11,"default","","",24],[11,"eq","","",24],[11,"fmt","","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"clone","","",25],[11,"new","","Creates a new `RefCell` containing `value`.",26],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",26],[11,"borrow_state","","Query the current state of this `RefCell`",26],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",26],[11,"borrow","","Immutably borrows the wrapped value.",26],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",26],[11,"borrow_mut","","Mutably borrows the wrapped value.",26],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",26],[11,"clone","","",26],[11,"default","","",26],[11,"eq","","",26],[11,"drop","","",27],[11,"clone","","",27],[6,"Target","std::any",""],[11,"deref","core::cell","",28],[11,"drop","","",29],[6,"Target","std::any",""],[11,"deref","core::cell","",30],[11,"deref_mut","","",30],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",31],[11,"get","","Gets a mutable pointer to the wrapped value.",31],[11,"into_inner","","Unwraps the value",31],[11,"clone","core::char","",32],[11,"clone","","",33],[6,"Item","std::any",""],[11,"next","core::char","",32],[11,"clone","","",34],[11,"clone","","",35],[6,"Item","std::any",""],[11,"next","core::char","",34],[11,"drop","core::finally","",36],[6,"Item","std::any",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"clone","core::iter","",37],[6,"Item","std::any",""],[11,"next","core::iter","",37],[11,"size_hint","","",37],[11,"next_back","","",37],[11,"indexable","","",37],[11,"idx","","",37],[11,"fmt","","",38],[11,"eq","","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",38],[11,"clone","","",39],[6,"Item","std::any",""],[11,"next","core::iter","",39],[11,"size_hint","","",39],[11,"next_back","","",39],[11,"indexable","","",39],[11,"idx","","",39],[11,"clone","","",40],[6,"Item","std::any",""],[11,"next","core::iter","",40],[11,"size_hint","","",40],[11,"indexable","","",40],[11,"idx","","",40],[11,"clone","","",41],[6,"Item","std::any",""],[11,"next","core::iter","",41],[11,"size_hint","","",41],[11,"next_back","","",41],[11,"indexable","","",41],[11,"idx","","",41],[11,"clone","","",42],[6,"Item","std::any",""],[11,"next","core::iter","",42],[11,"size_hint","","",42],[11,"next_back","","",42],[11,"indexable","","",42],[11,"idx","","",42],[11,"clone","","",43],[6,"Item","std::any",""],[11,"next","core::iter","",43],[11,"size_hint","","",43],[11,"next_back","","",43],[11,"indexable","","",43],[11,"idx","","",43],[11,"clone","","",44],[6,"Item","std::any",""],[11,"next","core::iter","",44],[11,"size_hint","","",44],[11,"next_back","","",44],[11,"clone","","",45],[6,"Item","std::any",""],[11,"next","core::iter","",45],[11,"size_hint","","",45],[11,"next_back","","",45],[11,"clone","","",46],[6,"Item","std::any",""],[11,"next","core::iter","",46],[11,"size_hint","","",46],[11,"next_back","","",46],[11,"indexable","","",46],[11,"idx","","",46],[11,"clone","","",47],[6,"Item","std::any",""],[11,"next","core::iter","",47],[11,"size_hint","","",47],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",47],[11,"is_empty","","Check whether peekable iterator is empty or not.",47],[11,"clone","","",48],[6,"Item","std::any",""],[11,"next","core::iter","",48],[11,"size_hint","","",48],[11,"clone","","",49],[6,"Item","std::any",""],[11,"next","core::iter","",49],[11,"size_hint","","",49],[11,"clone","","",50],[6,"Item","std::any",""],[11,"next","core::iter","",50],[11,"size_hint","","",50],[11,"indexable","","",50],[11,"idx","","",50],[11,"clone","","",51],[6,"Item","std::any",""],[11,"next","core::iter","",51],[11,"size_hint","","",51],[11,"indexable","","",51],[11,"idx","","",51],[11,"clone","","",52],[6,"Item","std::any",""],[11,"next","core::iter","",52],[11,"size_hint","","",52],[11,"clone","","",53],[6,"Item","std::any",""],[11,"next","core::iter","",53],[11,"size_hint","","",53],[11,"next_back","","",53],[11,"clone","","",54],[6,"Item","std::any",""],[11,"next","core::iter","",54],[11,"size_hint","","",54],[11,"next_back","","",54],[11,"indexable","","",54],[11,"idx","","",54],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",54],[11,"clone","","",55],[6,"Item","std::any",""],[11,"next","core::iter","",55],[11,"size_hint","","",55],[11,"next_back","","",55],[11,"indexable","","",55],[11,"idx","","",55],[11,"clone","","",56],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",56],[6,"Item","std::any",""],[11,"next","core::iter","",56],[11,"size_hint","","",56],[11,"clone","","",57],[6,"Item","std::any",""],[11,"next","core::iter","",57],[11,"size_hint","","",57],[11,"clone","","",58],[6,"Item","std::any",""],[11,"next","core::iter","",58],[11,"size_hint","","",58],[11,"next_back","","",58],[11,"clone","","",59],[6,"Item","std::any",""],[11,"next","core::iter","",59],[11,"size_hint","","",59],[11,"next_back","","",59],[11,"clone","","",60],[6,"Item","std::any",""],[11,"next","core::iter","",60],[11,"clone","","",61],[6,"Item","std::any",""],[11,"next","core::iter","",61],[6,"Item","std::any",""],[11,"next","core::ops","",14],[11,"size_hint","","",14],[11,"next_back","","",14],[6,"Item","std::any",""],[11,"next","core::ops","",15],[11,"clone","core::iter","",62],[6,"Item","std::any",""],[11,"next","core::iter","",62],[11,"size_hint","","",62],[11,"next_back","","",62],[11,"indexable","","",62],[11,"idx","","",62],[11,"hash","core::option","",63],[11,"fmt","","",63],[11,"cmp","","",63],[11,"partial_cmp","","",63],[11,"lt","","",63],[11,"le","","",63],[11,"gt","","",63],[11,"ge","","",63],[11,"eq","","",63],[11,"ne","","",63],[11,"clone","","",63],[11,"is_some","","Returns `true` if the option is a `Some` value",63],[11,"is_none","","Returns `true` if the option is a `None` value",63],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",63],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",63],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",63],[11,"expect","","Unwraps an option, yielding the content of a `Some`",63],[11,"unwrap","","Returns the inner `T` of a `Some(T)`.",63],[11,"unwrap_or","","Returns the contained value or a default.",63],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",63],[11,"map_or","","Applies a function to the contained value or returns a default.",63],[11,"map_or_else","","Applies a function to the contained value or computes a default.",63],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63],[11,"iter","","Returns an iterator over the possibly contained value.",63],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63],[11,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",63],[11,"unwrap_or_default","","Returns the contained value or a default",63],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",63],[11,"default","","",63],[11,"clone","","",64],[6,"Item","std::any",""],[11,"next","core::option","",64],[11,"size_hint","","",64],[11,"next_back","","",64],[6,"Item","std::any",""],[11,"next","core::option","",65],[11,"size_hint","","",65],[11,"next_back","","",65],[11,"clone","","",65],[6,"Item","std::any",""],[11,"next","core::option","",66],[11,"size_hint","","",66],[11,"next_back","","",66],[6,"Item","std::any",""],[11,"next","core::option","",67],[11,"size_hint","","",67],[11,"next_back","","",67],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63],[11,"hash","core::result","",68],[11,"fmt","","",68],[11,"cmp","","",68],[11,"partial_cmp","","",68],[11,"lt","","",68],[11,"le","","",68],[11,"gt","","",68],[11,"ge","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"clone","","",68],[11,"is_ok","","Returns true if the result is `Ok`",68],[11,"is_err","","Returns true if the result is `Err`",68],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",68],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",68],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",68],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",68],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",68],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",68],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",68],[11,"iter","","Returns an iterator over the possibly contained value.",68],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",68],[6,"Item","std::any",""],[11,"next","core::result","",69],[11,"size_hint","","",69],[11,"next_back","","",69],[11,"clone","","",69],[6,"Item","std::any",""],[11,"next","core::result","",70],[11,"size_hint","","",70],[11,"next_back","","",70],[6,"Item","std::any",""],[11,"next","core::result","",71],[11,"size_hint","","",71],[11,"next_back","","",71],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68],[11,"fmt","core::simd","",72],[11,"fmt","","",73],[11,"fmt","","",74],[11,"fmt","","",75],[11,"fmt","","",76],[11,"fmt","","",77],[11,"fmt","","",78],[11,"fmt","","",79],[11,"fmt","","",80],[11,"fmt","","",81],[6,"Item","std::any",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Output","",""],[11,"index","core::slice","",82],[6,"Output","std::any",""],[11,"index","core::slice","",82],[6,"Output","std::any",""],[11,"index","core::slice","",82],[6,"Output","std::any",""],[11,"index","core::slice","",82],[11,"as_slice","","View the underlying data as a subslice of the original data.",82],[6,"Item","std::any",""],[11,"next","core::slice","",82],[11,"size_hint","","",82],[11,"next_back","","",82],[11,"clone","","",82],[11,"indexable","","",82],[11,"idx","","",82],[6,"Output","std::any",""],[11,"index","core::slice","",83],[6,"Output","std::any",""],[11,"index","core::slice","",83],[6,"Output","std::any",""],[11,"index","core::slice","",83],[6,"Output","std::any",""],[11,"index","core::slice","",83],[11,"index_mut","","",83],[11,"index_mut","","",83],[11,"index_mut","","",83],[11,"index_mut","","",83],[11,"into_slice","","View the underlying data as a subslice of the original data.",83],[6,"Item","std::any",""],[11,"next","core::slice","",83],[11,"size_hint","","",83],[11,"next_back","","",83],[11,"clone","","",84],[6,"Item","std::any",""],[11,"next","core::slice","",84],[11,"size_hint","","",84],[11,"next_back","","",84],[11,"finish","","",84],[11,"finish","","",85],[6,"Item","std::any",""],[11,"next","core::slice","",85],[11,"size_hint","","",85],[11,"next_back","","",85],[6,"Item","std::any",""],[11,"next","core::slice","",86],[11,"size_hint","","",86],[6,"Item","std::any",""],[11,"next","core::slice","",87],[11,"size_hint","","",87],[6,"Item","std::any",""],[11,"next","core::slice","",88],[11,"size_hint","","",88],[6,"Item","std::any",""],[11,"next","core::slice","",89],[11,"size_hint","","",89],[6,"Item","std::any",""],[11,"next","core::slice","",90],[11,"size_hint","","",90],[11,"clone","","",91],[6,"Item","std::any",""],[11,"next","core::slice","",91],[11,"size_hint","","",91],[11,"next_back","","",91],[11,"indexable","","",91],[11,"idx","","",91],[11,"clone","","",92],[6,"Item","std::any",""],[11,"next","core::slice","",92],[11,"size_hint","","",92],[11,"next_back","","",92],[11,"indexable","","",92],[11,"idx","","",92],[6,"Item","std::any",""],[11,"next","core::slice","",93],[11,"size_hint","","",93],[11,"next_back","","",93],[11,"fmt","core::str::pattern","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[6,"Searcher","std::any",""],[11,"into_searcher","core::str::pattern","",95],[11,"haystack","","",96],[11,"next","","",96],[11,"next_back","","",96],[11,"clone","","",97],[6,"Searcher","std::any",""],[11,"haystack","core::str::pattern","",97],[11,"next","","",97],[11,"next_back","","",97],[6,"Searcher","std::any",""],[6,"Searcher","",""],[6,"Searcher","",""],[6,"Searcher","",""],[6,"Err","",""],[11,"eq","core::str","",98],[11,"ne","","",98],[11,"clone","","",98],[11,"fmt","","",98],[11,"fmt","","",98],[11,"description","","",98],[11,"fmt","","",99],[11,"clone","","",99],[11,"eq","","",99],[11,"ne","","",99],[11,"description","","",99],[11,"fmt","","",99],[11,"clone","","",100],[6,"Item","std::any",""],[11,"next","core::str","",100],[11,"size_hint","","",100],[11,"next_back","","",100],[11,"clone","","",101],[6,"Item","std::any",""],[11,"next","core::str","",101],[11,"size_hint","","",101],[11,"next_back","","",101],[11,"clone","","",102],[6,"Item","std::any",""],[11,"next","core::str","",102],[11,"size_hint","","",102],[11,"next_back","","",102],[11,"len","","",102],[11,"clone","","",103],[6,"Output","std::any",""],[11,"call","core::str","",103],[6,"Item","std::any",""],[11,"next","core::str","",104],[11,"next_back","","",104],[6,"Item","std::any",""],[11,"next","core::str","",105],[11,"clone","","",106],[11,"clone","","",107],[11,"clone","","",108],[6,"Item","std::any",""],[11,"next","core::str","",109],[6,"Item","std::any",""],[11,"next","core::str","",110],[6,"Output","std::any",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[11,"next","core::str","",111],[11,"next_back","","",111],[6,"Item","std::any",""],[11,"next","core::str","",112],[11,"size_hint","","",112],[11,"next_back","","",112],[6,"Item","std::any",""],[11,"next","core::str","",113],[11,"size_hint","","",113],[6,"Item","std::any",""],[11,"next","core::str","",114],[11,"size_hint","","",114],[6,"Item","std::any",""],[11,"next","core::str","",115],[11,"size_hint","","",115],[11,"next_back","","",115],[6,"Item","std::any",""],[11,"next","core::str","",116],[11,"size_hint","","",116],[11,"next_back","","",116],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",117],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",117],[11,"result","","Returns the computed hash.",117],[11,"write","","",117],[11,"finish","","",117],[11,"clone","","",117],[11,"default","","",117],[11,"eq","core::fmt::num","",118],[11,"ne","","",118],[11,"clone","","",118],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"eq","","",121],[11,"ne","","",121],[11,"clone","","",121],[11,"eq","","",122],[11,"ne","","",122],[11,"clone","","",122],[11,"eq","","",123],[11,"ne","","",123],[11,"clone","","",123],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"eq","core::fmt::rt::v1","",125],[11,"ne","","",125],[11,"fmt","core::fmt","",126],[11,"fmt","","",127],[11,"fmt","","",127],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",128],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",128],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",128],[11,"write_fmt","","Writes some formatted information into this instance",128],[11,"flags","","Flags for formatting (packed version of rt::Flag)",128],[11,"fill","","Character used as 'fill' whenever there is alignment",128],[11,"align","","Flag indicating what form of alignment was requested",128],[11,"width","","Optionally specified integer width that the output should be",128],[11,"precision","","Optionally specified precision for numeric types",128],[11,"fmt","","",126],[11,"fmt","core::marker","",12],[11,"fmt","core::cell","",24],[11,"fmt","","",26],[11,"fmt","","",28],[11,"fmt","","",30],[6,"Item","std::any",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type."],[0,"cell","std","Shareable mutable containers."],[3,"Cell","std::cell","A mutable memory location that admits only `Copy` data."],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules"],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell<T>`."],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",25],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",25],[13,"Unused","","There are no outstanding borrows on this cell.",25],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell<T>`."],[5,"clone_ref","","Copy a `Ref`."],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`."],[3,"UnsafeCell","","The core primitive for interior mutability in Rust."],[12,"value","","Wrapped value",31],[0,"clone","std","The `Clone` trait for types that cannot be 'implicitly copied'"],[8,"Clone","std::clone","A common trait for cloning an object."],[10,"clone","","Returns a copy of the value.",129],[10,"clone_from","","Perform copy-assignment from `source`.",129],[0,"cmp","std","Functionality for ordering and comparison."],[8,"PartialEq","std::cmp","Trait for equality comparisons which are [partial equivalence relations](\nhttp://en.wikipedia.org/wiki/Partial_equivalence_relation)."],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",130],[10,"ne","","This method tests for `!=`.",130],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation)."],[4,"Ordering","","An `Ordering` is the result of a comparison between two values."],[13,"Less","","An ordering where a compared value is less [than another].",17],[13,"Equal","","An ordering where a compared value is equal [to another].",17],[13,"Greater","","An ordering where a compared value is greater [than another].",17],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order)."],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",131],[8,"PartialOrd","","Trait for values that can be compared for a sort-order."],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",132],[10,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",132],[10,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\noperator.",132],[10,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",132],[10,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\noperator.",132],[5,"min","","Compare and return the minimum of two values."],[5,"max","","Compare and return the maximum of two values."],[5,"partial_min","","Compare and return the minimum of two values if there is one."],[5,"partial_max","","Compare and return the maximum of two values if there is one."],[0,"default","std","The `Default` trait for types which may have meaningful default values."],[8,"Default","std::default","A trait that types which have a useful default value should implement."],[10,"default","","Returns the \"default value\" for a type.",133],[0,"finally","std","The Finally trait provides a method, `finally` on\nstack closures that emulates Java-style try/finally blocks."],[8,"Finally","std::finally","A trait for executing a destructor unconditionally after a block of code,\nregardless of whether the blocked fails."],[10,"finally","","Executes this object, unconditionally running `dtor` after this block of\ncode has run.",134],[5,"try_finally","","The most general form of the `finally` functions. The function\n`try_fn` will be invoked first; whether or not it panics, the\nfunction `finally_fn` will be invoked next. The two parameters\n`mutate` and `drop` are used to thread state through the two\nclosures. `mutate` is used for any shared, mutable state that both\nclosures require access to; `drop` is used for any state that the\n`try_fn` requires ownership of."],[0,"hash","std","Generic hashing support."],[8,"Hash","std::hash","A hashable type."],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",135],[10,"hash_slice","","Feeds a slice of this type into the state provided.",135],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes."],[10,"finish","","Completes a round of hashing, producing the output hash generated.",136],[10,"write","","Writes some data into this `Hasher`",136],[10,"write_u8","","Write a single `u8` into this hasher",136],[10,"write_u16","","Write a single `u16` into this hasher.",136],[10,"write_u32","","Write a single `u32` into this hasher.",136],[10,"write_u64","","Write a single `u64` into this hasher.",136],[10,"write_usize","","Write a single `usize` into this hasher.",136],[10,"write_i8","","Write a single `i8` into this hasher.",136],[10,"write_i16","","Write a single `i16` into this hasher.",136],[10,"write_i32","","Write a single `i32` into this hasher.",136],[10,"write_i64","","Write a single `i64` into this hasher.",136],[10,"write_isize","","Write a single `isize` into this hasher.",136],[5,"hash","","Hash a value with the default SipHasher algorithm (two initial keys of 0)."],[3,"SipHasher","","An implementation of SipHash 2-4."],[0,"intrinsics","std","rustc compiler intrinsics."],[6,"GlueFn","std::intrinsics",""],[3,"TyDesc","",""],[12,"size","","",137],[12,"align","","",137],[12,"drop_glue","","",137],[12,"name","","",137],[5,"atomic_cxchg","",""],[5,"atomic_cxchg_acq","",""],[5,"atomic_cxchg_rel","",""],[5,"atomic_cxchg_acqrel","",""],[5,"atomic_cxchg_relaxed","",""],[5,"atomic_load","",""],[5,"atomic_load_acq","",""],[5,"atomic_load_relaxed","",""],[5,"atomic_load_unordered","",""],[5,"atomic_store","",""],[5,"atomic_store_rel","",""],[5,"atomic_store_relaxed","",""],[5,"atomic_store_unordered","",""],[5,"atomic_xchg","",""],[5,"atomic_xchg_acq","",""],[5,"atomic_xchg_rel","",""],[5,"atomic_xchg_acqrel","",""],[5,"atomic_xchg_relaxed","",""],[5,"atomic_xadd","",""],[5,"atomic_xadd_acq","",""],[5,"atomic_xadd_rel","",""],[5,"atomic_xadd_acqrel","",""],[5,"atomic_xadd_relaxed","",""],[5,"atomic_xsub","",""],[5,"atomic_xsub_acq","",""],[5,"atomic_xsub_rel","",""],[5,"atomic_xsub_acqrel","",""],[5,"atomic_xsub_relaxed","",""],[5,"atomic_and","",""],[5,"atomic_and_acq","",""],[5,"atomic_and_rel","",""],[5,"atomic_and_acqrel","",""],[5,"atomic_and_relaxed","",""],[5,"atomic_nand","",""],[5,"atomic_nand_acq","",""],[5,"atomic_nand_rel","",""],[5,"atomic_nand_acqrel","",""],[5,"atomic_nand_relaxed","",""],[5,"atomic_or","",""],[5,"atomic_or_acq","",""],[5,"atomic_or_rel","",""],[5,"atomic_or_acqrel","",""],[5,"atomic_or_relaxed","",""],[5,"atomic_xor","",""],[5,"atomic_xor_acq","",""],[5,"atomic_xor_rel","",""],[5,"atomic_xor_acqrel","",""],[5,"atomic_xor_relaxed","",""],[5,"atomic_max","",""],[5,"atomic_max_acq","",""],[5,"atomic_max_rel","",""],[5,"atomic_max_acqrel","",""],[5,"atomic_max_relaxed","",""],[5,"atomic_min","",""],[5,"atomic_min_acq","",""],[5,"atomic_min_rel","",""],[5,"atomic_min_acqrel","",""],[5,"atomic_min_relaxed","",""],[5,"atomic_umin","",""],[5,"atomic_umin_acq","",""],[5,"atomic_umin_rel","",""],[5,"atomic_umin_acqrel","",""],[5,"atomic_umin_relaxed","",""],[5,"atomic_umax","",""],[5,"atomic_umax_acq","",""],[5,"atomic_umax_rel","",""],[5,"atomic_umax_acqrel","",""],[5,"atomic_umax_relaxed","",""],[5,"atomic_fence","",""],[5,"atomic_fence_acq","",""],[5,"atomic_fence_rel","",""],[5,"atomic_fence_acqrel","",""],[5,"abort","","Abort the execution of the process."],[5,"unreachable","","Tell LLVM that this point in the code is not reachable,\nenabling further optimizations."],[5,"assume","","Inform the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined."],[5,"breakpoint","","Execute a breakpoint trap, for inspection by a debugger."],[5,"size_of","","The size of a type in bytes."],[5,"move_val_init","","Move a value to an uninitialized memory location."],[5,"min_align_of","",""],[5,"pref_align_of","",""],[5,"get_tydesc","","Get a static pointer to a type descriptor."],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in."],[5,"init","","Create a value initialized to zero."],[5,"uninit","","Create an uninitialized value."],[5,"forget","","Move a value out of scope without running drop glue."],[5,"transmute","","Unsafely transforms a value of one type into a value of another type."],[5,"return_address","","Gives the address for the return value of the enclosing function."],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`."],[5,"owns_managed","","Returns `true` if a type is managed (will be allocated on the local heap)"],[5,"offset","","Calculates the offset from a pointer. The offset *must* be in-bounds of\nthe object, or one-byte-past-the-end. An arithmetic overflow is also\nundefined behaviour."],[5,"copy_nonoverlapping_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap."],[5,"copy_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap."],[5,"set_memory","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`."],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`."],[5,"volatile_load","","Perform a volatile load from the `src` pointer."],[5,"volatile_store","","Perform a volatile store to the `dst` pointer."],[5,"sqrtf32","","Returns the square root of an `f32`"],[5,"sqrtf64","","Returns the square root of an `f64`"],[5,"powif32","","Raises an `f32` to an integer power."],[5,"powif64","","Raises an `f64` to an integer power."],[5,"sinf32","","Returns the sine of an `f32`."],[5,"sinf64","","Returns the sine of an `f64`."],[5,"cosf32","","Returns the cosine of an `f32`."],[5,"cosf64","","Returns the cosine of an `f64`."],[5,"powf32","","Raises an `f32` to an `f32` power."],[5,"powf64","","Raises an `f64` to an `f64` power."],[5,"expf32","","Returns the exponential of an `f32`."],[5,"expf64","","Returns the exponential of an `f64`."],[5,"exp2f32","","Returns 2 raised to the power of an `f32`."],[5,"exp2f64","","Returns 2 raised to the power of an `f64`."],[5,"logf32","","Returns the natural logarithm of an `f32`."],[5,"logf64","","Returns the natural logarithm of an `f64`."],[5,"log10f32","","Returns the base 10 logarithm of an `f32`."],[5,"log10f64","","Returns the base 10 logarithm of an `f64`."],[5,"log2f32","","Returns the base 2 logarithm of an `f32`."],[5,"log2f64","","Returns the base 2 logarithm of an `f64`."],[5,"fmaf32","","Returns `a * b + c` for `f32` values."],[5,"fmaf64","","Returns `a * b + c` for `f64` values."],[5,"fabsf32","","Returns the absolute value of an `f32`."],[5,"fabsf64","","Returns the absolute value of an `f64`."],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values."],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values."],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`."],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`."],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`."],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`."],[5,"truncf32","","Returns the integer part of an `f32`."],[5,"truncf64","","Returns the integer part of an `f64`."],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer."],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer."],[5,"nearbyintf32","","Returns the nearest integer to an `f32`."],[5,"nearbyintf64","","Returns the nearest integer to an `f64`."],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero."],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero."],[5,"ctpop8","","Returns the number of bits set in a `u8`."],[5,"ctpop16","","Returns the number of bits set in a `u16`."],[5,"ctpop32","","Returns the number of bits set in a `u32`."],[5,"ctpop64","","Returns the number of bits set in a `u64`."],[5,"ctlz8","","Returns the number of leading bits unset in a `u8`."],[5,"ctlz16","","Returns the number of leading bits unset in a `u16`."],[5,"ctlz32","","Returns the number of leading bits unset in a `u32`."],[5,"ctlz64","","Returns the number of leading bits unset in a `u64`."],[5,"cttz8","","Returns the number of trailing bits unset in a `u8`."],[5,"cttz16","","Returns the number of trailing bits unset in a `u16`."],[5,"cttz32","","Returns the number of trailing bits unset in a `u32`."],[5,"cttz64","","Returns the number of trailing bits unset in a `u64`."],[5,"bswap16","","Reverses the bytes in a `u16`."],[5,"bswap32","","Reverses the bytes in a `u32`."],[5,"bswap64","","Reverses the bytes in a `u64`."],[5,"i8_add_with_overflow","","Performs checked `i8` addition."],[5,"i16_add_with_overflow","","Performs checked `i16` addition."],[5,"i32_add_with_overflow","","Performs checked `i32` addition."],[5,"i64_add_with_overflow","","Performs checked `i64` addition."],[5,"u8_add_with_overflow","","Performs checked `u8` addition."],[5,"u16_add_with_overflow","","Performs checked `u16` addition."],[5,"u32_add_with_overflow","","Performs checked `u32` addition."],[5,"u64_add_with_overflow","","Performs checked `u64` addition."],[5,"i8_sub_with_overflow","","Performs checked `i8` subtraction."],[5,"i16_sub_with_overflow","","Performs checked `i16` subtraction."],[5,"i32_sub_with_overflow","","Performs checked `i32` subtraction."],[5,"i64_sub_with_overflow","","Performs checked `i64` subtraction."],[5,"u8_sub_with_overflow","","Performs checked `u8` subtraction."],[5,"u16_sub_with_overflow","","Performs checked `u16` subtraction."],[5,"u32_sub_with_overflow","","Performs checked `u32` subtraction."],[5,"u64_sub_with_overflow","","Performs checked `u64` subtraction."],[5,"i8_mul_with_overflow","","Performs checked `i8` multiplication."],[5,"i16_mul_with_overflow","","Performs checked `i16` multiplication."],[5,"i32_mul_with_overflow","","Performs checked `i32` multiplication."],[5,"i64_mul_with_overflow","","Performs checked `i64` multiplication."],[5,"u8_mul_with_overflow","","Performs checked `u8` multiplication."],[5,"u16_mul_with_overflow","","Performs checked `u16` multiplication."],[5,"u32_mul_with_overflow","","Performs checked `u32` multiplication."],[5,"u64_mul_with_overflow","","Performs checked `u64` multiplication."],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of N in bits."],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of N in bits."],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of N in bits."],[0,"iter","std","Composable external iterators"],[8,"Iterator","std::iter","An interface for dealing with \"external iterators\". These types of iterators\ncan be resumed at any time as all state is stored internally as opposed to\nbeing located on the call stack."],[16,"Item","std::iter::Iterator",""],[10,"next","std::iter","Advance the iterator and return the next value. Return `None` when the end is reached.",138],[10,"size_hint","","Returns a lower and upper bound on the remaining length of the iterator.",138],[8,"FromIterator","","Conversion from an `Iterator`"],[10,"from_iter","","Build a container with elements from something iterable.",139],[8,"IntoIterator","","Conversion into an `Iterator`"],[16,"Item","std::iter::IntoIterator",""],[16,"IntoIter","",""],[10,"into_iter","std::iter","Consumes `Self` and returns an iterator over it",140],[8,"Extend","","A type growable from an `Iterator` implementation"],[10,"extend","","Extend a container with the elements yielded by an arbitrary iterator",141],[8,"IteratorExt","","An extension trait providing numerous methods applicable to all iterators."],[10,"count","","Counts the number of elements in this iterator.",142],[10,"last","","Loops through the entire iterator, returning the last element.",142],[10,"nth","","Loops through `n` iterations, returning the `n`th element of the\niterator.",142],[10,"chain","","Chain this iterator with another, returning a new iterator that will\nfinish iterating over the current iterator, and then iterate\nover the other specified iterator.",142],[10,"zip","","Creates an iterator that iterates over both this and the specified\niterators simultaneously, yielding the two elements as pairs. When\neither iterator returns None, all further invocations of next() will\nreturn None.",142],[10,"map","","Creates a new iterator that will apply the specified function to each\nelement returned by the first, yielding the mapped element instead.",142],[10,"filter","","Creates an iterator that applies the predicate to each element returned\nby this iterator. The only elements that will be yielded are those that\nmake the predicate evaluate to `true`.",142],[10,"filter_map","","Creates an iterator that both filters and maps elements.\nIf the specified function returns None, the element is skipped.\nOtherwise the option is unwrapped and the new value is yielded.",142],[10,"enumerate","","Creates an iterator that yields a pair of the value returned by this\niterator plus the current index of iteration.",142],[10,"peekable","","Creates an iterator that has a `.peek()` method\nthat returns an optional reference to the next element.",142],[10,"skip_while","","Creates an iterator that invokes the predicate on elements\nuntil it returns false. Once the predicate returns false, that\nelement and all further elements are yielded.",142],[10,"take_while","","Creates an iterator that yields elements so long as the predicate\nreturns true. After the predicate returns false for the first time, no\nfurther elements will be yielded.",142],[10,"skip","","Creates an iterator that skips the first `n` elements of this iterator,\nand then yields all further items.",142],[10,"take","","Creates an iterator that yields the first `n` elements of this\niterator.",142],[10,"scan","","Creates a new iterator that behaves in a similar fashion to fold.\nThere is a state which is passed between each iteration and can be\nmutated as necessary. The yielded values from the closure are yielded\nfrom the Scan instance when not None.",142],[10,"flat_map","","Creates an iterator that maps each element to an iterator,\nand yields the elements of the produced iterators.",142],[10,"fuse","","Creates an iterator that yields `None` forever after the underlying\niterator yields `None`. Random-access iterator behavior is not\naffected, only single and double-ended iterator behavior.",142],[10,"inspect","","Creates an iterator that calls a function with a reference to each\nelement before yielding it. This is often useful for debugging an\niterator pipeline.",142],[10,"by_ref","","Creates a wrapper around a mutable reference to the iterator.",142],[10,"collect","","Loops through the entire iterator, collecting all of the elements into\na container implementing `FromIterator`.",142],[10,"partition","","Loops through the entire iterator, collecting all of the elements into\none of two containers, depending on a predicate. The elements of the\nfirst container satisfy the predicate, while the elements of the second\ndo not.",142],[10,"fold","","Performs a fold operation over the entire iterator, returning the\neventual state at the end of the iteration.",142],[10,"all","","Tests whether the predicate holds true for all elements in the iterator.",142],[10,"any","","Tests whether any element of an iterator satisfies the specified predicate.",142],[10,"find","","Returns the first element satisfying the specified predicate.",142],[10,"position","","Return the index of the first element satisfying the specified predicate",142],[10,"rposition","","Return the index of the last element satisfying the specified predicate",142],[10,"max","","Consumes the entire iterator to return the maximum element.",142],[10,"min","","Consumes the entire iterator to return the minimum element.",142],[10,"min_max","","`min_max` finds the minimum and maximum elements in the iterator.",142],[10,"max_by","","Return the element that gives the maximum value from the\nspecified function.",142],[10,"min_by","","Return the element that gives the minimum value from the\nspecified function.",142],[10,"rev","","Change the direction of the iterator",142],[10,"unzip","","Converts an iterator of pairs into a pair of containers.",142],[10,"cloned","","Creates an iterator that clones the elements it yields. Useful for converting an\nIterator<&T> to an Iterator<T>.",142],[10,"cycle","","Repeats an iterator endlessly",142],[10,"reverse_in_place","","Use an iterator to reverse a container in place.",142],[8,"DoubleEndedIterator","","A range iterator able to yield elements from both ends"],[10,"next_back","","Yield an element from the end of the range, returning `None` if the\nrange is empty.",143],[8,"RandomAccessIterator","","An object implementing random access indexing by `usize`"],[10,"indexable","","Return the number of indexable elements. At most `std::usize::MAX`\nelements are indexable, even if the iterator represents a longer range.",144],[10,"idx","","Return an element at an index, or `None` if the index is out of bounds",144],[8,"ExactSizeIterator","","An iterator that knows its exact length"],[10,"len","","Return the exact length of the iterator.",145],[3,"Rev","","An double-ended iterator with the direction inverted"],[8,"AdditiveIterator","","A trait for iterators over elements which can be added together"],[10,"sum","","Iterates over the entire iterator, summing up all the elements",146],[8,"MultiplicativeIterator","","A trait for iterators over elements which can be multiplied together."],[10,"product","","Iterates over the entire iterator, multiplying all the elements",147],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `min_max`. See `IteratorOrdExt::min_max` for more detail."],[13,"NoElements","","Empty iterator",38],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",38],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",38],[3,"Cloned","","An iterator that clones the elements of an underlying iterator"],[3,"Cycle","","An iterator that repeats endlessly"],[3,"Chain","","An iterator that strings two iterators together"],[3,"Zip","","An iterator that iterates two other iterators simultaneously"],[3,"Map","","An iterator that maps the values of `iter` with `f`"],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`"],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`"],[3,"Enumerate","","An iterator that yields the current count and the element during iteration"],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element."],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true"],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true"],[3,"Skip","","An iterator that skips over `n` elements of `iter`."],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`."],[3,"Scan","","An iterator to maintain state while iterating another iterator"],[12,"state","","The current internal state to be passed to the closure next.",52],[3,"FlatMap","","An iterator that maps each element to an iterator,\nand yields the elements of the produced iterators\n"],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once."],[3,"Inspect","","An iterator that calls a function with a reference to each\nelement before yielding it."],[3,"Unfold","","An iterator that passes mutable state to a closure and yields the result."],[12,"state","","Internal state that will be passed to the closure on the next iteration",56],[3,"Counter","","An infinite iterator starting at `start` and advancing by `step` with each\niteration"],[5,"count","","Creates a new counter with the specified start/step"],[3,"Range","","An iterator over the range [start, stop)"],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[3,"RangeInclusive","","An iterator over the range [start, stop]"],[5,"range_inclusive","","Return an iterator over the range [start, stop]"],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[5,"range_step","","Return an iterator over the range [start, stop) by `step`."],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`."],[3,"Repeat","","An iterator that repeats an element endlessly"],[6,"Iterate","",""],[5,"iterate","","Create a new iterator that produces an infinite sequence of\nrepeated applications of the given function `f`."],[5,"repeat","","Create a new iterator that endlessly repeats the element `elt`."],[0,"order","","Functions for lexicographical ordering of sequences."],[5,"equals","std::iter::order","Compare `a` and `b` for equality using `Eq`"],[5,"cmp","","Order `a` and `b` lexicographically using `Ord`"],[5,"partial_cmp","","Order `a` and `b` lexicographically using `PartialOrd`"],[5,"eq","","Compare `a` and `b` for equality (Using partial equality, `PartialEq`)"],[5,"ne","","Compare `a` and `b` for nonequality (Using partial equality, `PartialEq`)"],[5,"lt","","Return `a` < `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"le","","Return `a` <= `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"gt","","Return `a` > `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"ge","","Return `a` >= `b` lexicographically (Using partial order, `PartialOrd`)"],[0,"marker","std","Primitive traits and marker types representing basic 'kinds' of types."],[8,"Send","std::marker","Types able to be transferred across thread boundaries."],[8,"Sized","","Types with a constant size known at compile-time."],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`)."],[8,"Sync","","Types that can be safely shared between threads when aliased."],[3,"NoCopy","","A type which is considered \"not POD\", meaning that it is not\nimplicitly copyable. This is typically embedded in other types to\nensure that they are never copied, even if they lack a destructor."],[3,"Managed","","A type which is considered managed by the GC. This is typically\nembedded in other types."],[8,"MarkerTrait","","`MarkerTrait` is intended to be used as the supertrait for traits\nthat don't have any methods but instead serve just to designate\ncategories of types. An example would be the `Send` trait, which\nindicates types that are sendable: `Send` does not itself offer\nany methods, but instead is used to gate access to data."],[8,"PhantomFn","","`PhantomFn` is a marker trait for use with traits that contain\ntype or lifetime parameters that do not appear in any of their\nmethods. In that case, you can either remove those parameters, or\nadd a `PhantomFn` supertrait that reflects the signature of\nmethods that compiler should \"pretend\" exists. This most commonly\noccurs for traits with no methods: in that particular case, you\ncan extend `MarkerTrait`, which is equivalent to\n`PhantomFn<Self>`."],[3,"PhantomData","","`PhantomData` is a way to tell the compiler about fake fields.\nPhantom data is required whenever type parameters are not used.\nThe idea is that if the compiler encounters a `PhantomData<T>`\ninstance, it will behave *as if* an instance of the type `T` were\npresent for the purpose of various automatic analyses."],[3,"ContravariantLifetime","","Old-style marker trait. Deprecated."],[3,"CovariantLifetime","","Old-style marker trait. Deprecated."],[3,"InvariantLifetime","","Old-style marker trait. Deprecated."],[3,"ContravariantType","","Old-style marker trait. Deprecated."],[3,"CovariantType","","Old-style marker trait. Deprecated."],[3,"InvariantType","","Old-style marker trait. Deprecated."],[0,"mem","std","Basic functions for dealing with memory"],[5,"size_of","std::mem","Returns the size of a type in bytes."],[5,"size_of_val","","Returns the size of the type that `_val` points to in bytes."],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type"],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `_val` points to"],[5,"align_of","","Returns the alignment in memory for a type."],[5,"align_of_val","","Returns the alignment of the type of the value that `_val` points to."],[5,"zeroed","","Create a value initialized to zero."],[5,"uninitialized","","Create an uninitialized value."],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitialising or copying\neither one."],[5,"replace","","Replace the value at a mutable location with a new one, returning the old value, without\ndeinitialising or copying either one."],[5,"drop","","Disposes of a value."],[5,"transmute_copy","","Interprets `src` as `&U`, and then reads `src` without moving the contained value."],[5,"copy_lifetime","","Transforms lifetime of the second pointer to match the first."],[5,"copy_mut_lifetime","","Transforms lifetime of the second mutable pointer to match the first."],[5,"transmute","","Unsafely transforms a value of one type into a value of another type."],[5,"forget","","Move a value out of scope without running drop glue."],[0,"ops","std","Overloadable operators"],[8,"Drop","std::ops","The `Drop` trait is used to run some code when a value goes out of scope. This\nis sometimes called a 'destructor'."],[10,"drop","","The `drop` method, called when the value goes out of scope.",148],[8,"Add","","The `Add` trait is used to specify the functionality of `+`."],[16,"Output","std::ops::Add",""],[10,"add","std::ops","The method for the `+` operator",149],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`."],[16,"Output","std::ops::Sub",""],[10,"sub","std::ops","The method for the `-` operator",150],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`."],[16,"Output","std::ops::Mul",""],[10,"mul","std::ops","The method for the `*` operator",151],[8,"Div","","The `Div` trait is used to specify the functionality of `/`."],[16,"Output","std::ops::Div",""],[10,"div","std::ops","The method for the `/` operator",152],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`."],[16,"Output","std::ops::Rem",""],[10,"rem","std::ops","The method for the `%` operator",153],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`."],[16,"Output","std::ops::Neg",""],[10,"neg","std::ops","The method for the unary `-` operator",154],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`."],[16,"Output","std::ops::Not",""],[10,"not","std::ops","The method for the unary `!` operator",155],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`."],[16,"Output","std::ops::BitAnd",""],[10,"bitand","std::ops","The method for the `&` operator",156],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`."],[16,"Output","std::ops::BitOr",""],[10,"bitor","std::ops","The method for the `|` operator",157],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`."],[16,"Output","std::ops::BitXor",""],[10,"bitxor","std::ops","The method for the `^` operator",158],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`."],[16,"Output","std::ops::Shl",""],[10,"shl","std::ops","The method for the `<<` operator",159],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`."],[16,"Output","std::ops::Shr",""],[10,"shr","std::ops","The method for the `>>` operator",160],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context."],[16,"Output","std::ops::Index",""],[10,"index","std::ops","The method for the indexing (`Foo[Bar]`) operation",161],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context."],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",162],[3,"RangeFull","","An unbounded range."],[3,"Range","","A (half-open) range which is bounded at both ends."],[12,"start","","The lower bound of the range (inclusive).",14],[12,"end","","The upper bound of the range (exclusive).",14],[3,"RangeFrom","","A range which is only bounded below."],[12,"start","","The lower bound of the range (inclusive).",15],[3,"RangeTo","","A range which is only bounded above."],[12,"end","","The upper bound of the range (exclusive).",16],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations like `*v`."],[16,"Target","std::ops::Deref",""],[10,"deref","std::ops","The method called to dereference a value",163],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`"],[10,"deref_mut","","The method called to mutably dereference a value",164],[8,"Fn","","A version of the call operator that takes an immutable receiver."],[16,"Output","std::ops::Fn",""],[10,"call","std::ops","This is called when the call operator is used.",165],[8,"FnMut","","A version of the call operator that takes a mutable receiver."],[16,"Output","std::ops::FnMut",""],[10,"call_mut","std::ops","This is called when the call operator is used.",166],[8,"FnOnce","","A version of the call operator that takes a by-value receiver."],[16,"Output","std::ops::FnOnce",""],[10,"call_once","std::ops","This is called when the call operator is used.",167],[0,"ptr","std","Operations on unsafe pointers, `*const T`, and `*mut T`."],[5,"copy_nonoverlapping_memory","std::ptr",""],[5,"copy_memory","",""],[5,"set_memory","",""],[5,"null","","Creates a null raw pointer."],[5,"null_mut","","Creates a null mutable raw pointer."],[5,"zero_memory","","Zeroes out `count * size_of::<T>` bytes of memory at `dst`. `count` may be\n`0`."],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitialising either. They may overlap, unlike `mem::swap` which is\notherwise equivalent."],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either."],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged."],[5,"read_and_zero","","Reads the value from `src` and nulls it out without dropping it."],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value."],[8,"PtrExt","","Methods on raw pointers"],[16,"Target","std::ptr::PtrExt",""],[10,"is_null","std::ptr","Returns true if the pointer is null.",168],[10,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to\nthe value wrapped in `Some`.",168],[10,"offset","","Calculates the offset from a pointer. `count` is in units of T; e.g. a\n`count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",168],[8,"MutPtrExt","","Methods on mutable raw pointers"],[16,"Target","std::ptr::MutPtrExt",""],[10,"as_mut","std::ptr","Returns `None` if the pointer is null, or else returns a mutable\nreference to the value wrapped in `Some`.",169],[3,"Unique","","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec<T>` or `Box<T>`, which\ninternally use raw pointers to manage the memory that they own."],[5,"copy_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap."],[5,"copy_nonoverlapping_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap."],[5,"set_memory","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`."],[0,"raw","std","Contains struct definitions for the layout of compiler built-in types."],[3,"Slice","std::raw","The representation of a slice like `&[T]`."],[12,"data","","",170],[12,"len","","",170],[3,"Closure","","The representation of an old closure."],[12,"code","","",171],[12,"env","","",171],[3,"TraitObject","","The representation of a trait object like `&SomeTrait`."],[12,"data","","",172],[12,"vtable","","",172],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values."],[10,"repr","","This function \"unwraps\" a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",173],[0,"simd","std","SIMD vectors."],[3,"i8x16","std::simd",""],[3,"i16x8","",""],[3,"i32x4","",""],[3,"i64x2","",""],[3,"u8x16","",""],[3,"u16x8","",""],[3,"u32x4","",""],[3,"u64x2","",""],[3,"f32x4","",""],[3,"f64x2","",""],[0,"result","std","Error handling with the `Result` type"],[4,"Result","std::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`)."],[13,"Ok","","Contains the success value",68],[13,"Err","","Contains the error value",68],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`."],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`."],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`."],[5,"fold","","Perform a fold operation over the result values from an iterator."],[0,"option","std","Optional values"],[4,"Option","std::option","The `Option` type. See [the module level documentation](../index.html) for more."],[13,"None","","No value",63],[13,"Some","","Some value `T`",63],[3,"Iter","","An iterator over a reference of the contained item in an Option."],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option."],[3,"IntoIter","","An iterator over the item contained inside an Option."],[0,"error","std","Traits for working with Errors."],[8,"Error","std::error","Base functionality for all errors in Rust."],[10,"description","","A short description of the error; usually a static string.",174],[10,"cause","","The lower-level cause of this error, if any.",174],[8,"FromError","","A trait for types that can be converted from a given error type `E`."],[10,"from_error","","Perform the conversion.",175],[0,"boxed","std","A pointer type for heap allocation."],[7,"HEAP","std::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied."],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",176],[11,"from_raw","","Constructs a box from the raw pointer.",176],[11,"default","","",176],[11,"default","","",176],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",176],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",176],[11,"eq","","",176],[11,"ne","","",176],[11,"partial_cmp","","",176],[11,"lt","","",176],[11,"le","","",176],[11,"ge","","",176],[11,"gt","","",176],[11,"cmp","","",176],[11,"hash","","",176],[11,"downcast","","",176],[11,"fmt","","",176],[11,"fmt","","",176],[11,"fmt","","",176],[6,"Target","std::boxed",""],[11,"deref","alloc::boxed","",176],[11,"deref_mut","","",176],[6,"Item","std::boxed",""],[11,"next","alloc::boxed","",176],[11,"size_hint","","",176],[11,"next_back","","",176],[11,"from_error","","",176],[11,"fmt","alloc::arc","",177],[11,"new","","Constructs a new `Arc<T>`.",178],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",178],[11,"clone","","Makes a clone of the `Arc<T>`.",178],[6,"Target","std::boxed",""],[11,"deref","alloc::arc","",178],[11,"make_unique","","Make a mutable reference from the given `Arc<T>`.",178],[11,"drop","","Drops the `Arc<T>`.",178],[11,"upgrade","","Upgrades a weak reference to a strong reference.",177],[11,"clone","","Makes a clone of the `Weak<T>`.",177],[11,"drop","","Drops the `Weak<T>`.",177],[11,"eq","","Equality for two `Arc<T>`s.",178],[11,"ne","","Inequality for two `Arc<T>`s.",178],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",178],[11,"lt","","Less-than comparison for two `Arc<T>`s.",178],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",178],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",178],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",178],[11,"cmp","","",178],[11,"fmt","","",178],[11,"fmt","","",178],[11,"default","","",178],[11,"hash","","",178],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",179],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",179],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",179],[6,"Target","std::boxed",""],[11,"deref","alloc::rc","",179],[11,"drop","","Drops the `Rc<T>`.",179],[11,"clone","","Makes a clone of the `Rc<T>`.",179],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",179],[11,"eq","","Equality for two `Rc<T>`s.",179],[11,"ne","","Inequality for two `Rc<T>`s.",179],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",179],[11,"lt","","Less-than comparison for two `Rc<T>`s.",179],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",179],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",179],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",179],[11,"cmp","","Comparison for two `Rc<T>`s.",179],[11,"hash","","",179],[11,"fmt","","",179],[11,"fmt","","",179],[11,"upgrade","","Upgrades a weak reference to a strong reference.",180],[11,"drop","","Drops the `Weak<T>`.",180],[11,"clone","","Makes a clone of the `Weak<T>`.",180],[11,"fmt","","",180],[3,"Box","std::boxed","A pointer type for heap allocation."],[5,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer."],[8,"BoxAny","","Extension methods for an owning `Any` trait object."],[10,"downcast","","Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",181],[0,"rc","std","Thread-local reference-counted boxes (the `Rc<T>` type)."],[3,"Rc","std::rc","A reference-counted pointer type over an immutable value."],[5,"weak_count","","Get the number of weak references to this value."],[5,"strong_count","","Get the number of strong references to this value."],[5,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share the same inner value."],[5,"try_unwrap","","Unwraps the contained value if the `Rc<T>` is unique."],[5,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` is unique."],[3,"Weak","","A weak version of `Rc<T>`."],[0,"borrow","std","A module for working with borrowed data."],[8,"Borrow","std::borrow","A trait for borrowing data."],[10,"borrow","","Immutably borrow from an owned value.",182],[8,"BorrowMut","","A trait for mutably borrowing data."],[10,"borrow_mut","","Mutably borrow from an owned value.",183],[8,"ToOwned","","A generalization of Clone to borrowed data."],[16,"Owned","std::borrow::ToOwned",""],[10,"to_owned","std::borrow","Create owned data from borrowed data, usually by copying.",184],[11,"to_mut","collections::borrow","Acquire a mutable reference to the owned form of the data.",185],[11,"into_owned","","Extract the owned data.",185],[11,"is_borrowed","","Returns true if this `Cow` wraps a borrowed value",185],[11,"is_owned","","Returns true if this `Cow` wraps an owned value",185],[11,"clone","collections::binary_heap","",186],[11,"default","","",186],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",186],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",186],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",186],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",186],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",186],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",186],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",186],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",186],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",186],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",186],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",186],[11,"push","","Pushes an item onto the binary heap.",186],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",186],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",186],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",186],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",186],[11,"len","","Returns the length of the binary heap.",186],[11,"is_empty","","Checks if the binary heap is empty.",186],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",186],[11,"clear","","Drops all items from the binary heap.",186],[11,"clone","","",187],[6,"Item","std::borrow",""],[11,"next","collections::binary_heap","",187],[11,"size_hint","","",187],[11,"next_back","","",187],[6,"Item","std::borrow",""],[11,"next","collections::binary_heap","",188],[11,"size_hint","","",188],[11,"next_back","","",188],[6,"Item","std::borrow",""],[11,"next","collections::binary_heap","",189],[11,"size_hint","","",189],[11,"next_back","","",189],[11,"from_iter","","",186],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::binary_heap","",186],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"extend","collections::binary_heap","",186],[6,"Output","std::borrow",""],[11,"index","collections::bit","",190],[11,"new","","Creates an empty `BitVec`.",190],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",190],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",190],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",190],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",190],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",190],[11,"set","","Sets the value of a bit at an index `i`.",190],[11,"set_all","","Sets all bits to 1.",190],[11,"negate","","Flips all bits.",190],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",190],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",190],[11,"difference","","Calculates the difference between two bitvectors.",190],[11,"all","","Returns `true` if all bits are 1.",190],[11,"iter","","Returns an iterator over the elements of the vector in order.",190],[11,"none","","Returns `true` if all bits are 0.",190],[11,"any","","Returns `true` if any bit is 1.",190],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",190],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",190],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",190],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",190],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",190],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",190],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",190],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",190],[11,"push","","Pushes a `bool` onto the end.",190],[11,"len","","Return the total number of bits in this vector",190],[11,"is_empty","","Returns true if there are no bits in this vector",190],[11,"clear","","Clears all bits in this vector.",190],[11,"default","","",190],[11,"from_iter","","",190],[11,"extend","","",190],[11,"clone","","",190],[11,"clone_from","","",190],[11,"partial_cmp","","",190],[11,"cmp","","",190],[11,"fmt","","",190],[11,"hash","","",190],[11,"eq","","",190],[11,"clone","","",191],[6,"Item","std::borrow",""],[11,"next","collections::bit","",191],[11,"size_hint","","",191],[11,"next_back","","",191],[11,"indexable","","",191],[11,"idx","","",191],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"clone","collections::bit","",192],[11,"default","","",192],[11,"from_iter","","",192],[11,"extend","","",192],[11,"partial_cmp","","",192],[11,"cmp","","",192],[11,"eq","","",192],[11,"new","","Creates a new empty `BitSet`.",192],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to\nhold `nbits` elements without resizing.",192],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",192],[11,"from_bitv","","Deprecated: use `from_bit_vec`.",192],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",192],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case\nof `BitSet` this means reallocations will not occur as long as all inserted elements\nare less than `len`.",192],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements.\nIn the case of `BitSet` this means reallocations will not occur as long as all inserted\nelements are less than `len`.",192],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",192],[11,"get_ref","","Returns a reference to the underlying bit vector.",192],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",192],[11,"iter","","Iterator over each u32 stored in the `BitSet`.",192],[11,"union","","Iterator over each u32 stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",192],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",192],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",192],[11,"symmetric_difference","","Iterator over each u32 stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",192],[11,"union_with","","Unions in-place with the specified other bit vector.",192],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",192],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",192],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",192],[11,"len","","Return the number of set bits in this set.",192],[11,"is_empty","","Returns whether there are no bits set in this set",192],[11,"clear","","Clears all bits in this set",192],[11,"contains","","Returns `true` if this set contains the specified integer.",192],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",192],[11,"is_subset","","Returns `true` if the set is a subset of another.",192],[11,"is_superset","","Returns `true` if the set is a superset of another.",192],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",192],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",192],[11,"fmt","","",192],[11,"hash","","",192],[11,"clone","","",193],[11,"clone","","",194],[6,"Item","std::borrow",""],[11,"next","collections::bit","",193],[11,"size_hint","","",193],[6,"Item","std::borrow",""],[11,"next","collections::bit","",194],[11,"size_hint","","",194],[6,"Item","std::borrow",""],[11,"next","collections::bit","",195],[11,"size_hint","","",195],[6,"Item","std::borrow",""],[11,"next","collections::bit","",196],[11,"size_hint","","",196],[6,"Item","std::borrow",""],[11,"next","collections::bit","",197],[11,"size_hint","","",197],[6,"Item","std::borrow",""],[11,"next","collections::bit","",198],[11,"size_hint","","",198],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[6,"Item","",""],[11,"next","collections::btree::node","",199],[11,"next_back","","",199],[11,"drop","","",199],[11,"drop","","",200],[11,"as_slices","","",200],[11,"as_slices_mut","","",200],[11,"as_slices_internal","","",200],[11,"as_slices_internal_mut","","",200],[11,"keys","","",200],[11,"keys_mut","","",200],[11,"vals","","",200],[11,"vals_mut","","",200],[11,"edges","","",200],[11,"edges_mut","","",200],[11,"clone","","",200],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",200],[11,"make_leaf_root","","Make a leaf root from scratch",200],[11,"make_internal_root","","Make an internal root and swap it with an old root",200],[11,"len","","How many key-value pairs the node contains",200],[11,"capacity","","How many key-value pairs the node can fit",200],[11,"is_leaf","","If the node has any children",200],[11,"is_underfull","","if the node has too few elements",200],[11,"is_full","","if the node cannot fit any more elements",200],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",201],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",201],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",201],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",201],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",201],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",201],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",201],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",201],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",201],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",201],[11,"handle_underflow","","Handle an underflow in this node's child. We favour handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",201],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",201],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",201],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",201],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",201],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",201],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",201],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",201],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",201],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",200],[11,"iter","","",200],[11,"iter_mut","","",200],[11,"into_iter","","",200],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",200],[6,"Item","std::borrow",""],[6,"Edge","",""],[11,"next_kv","collections::btree::node","",202],[11,"next_kv_back","","",202],[11,"next_edge","","",202],[11,"next_edge_back","","",202],[6,"Item","std::borrow",""],[6,"Edge","",""],[11,"next_kv","collections::btree::node","",203],[11,"next_kv_back","","",203],[11,"next_edge","","",203],[11,"next_edge_back","","",203],[11,"drop","","",203],[6,"Item","std::borrow",""],[11,"next","collections::btree::node","",204],[11,"next_back","","",204],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",204],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",204],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",204],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",204],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",205],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",205],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",205],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",206],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",206],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",206],[11,"clone","collections::btree::map","",207],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",207],[11,"with_b","","Makes a new empty BTreeMap with the given B.",207],[11,"clear","","Clears the map, removing all values.",207],[11,"get","","Returns a reference to the value corresponding to the key.",207],[11,"contains_key","","Returns true if the map contains a value for the specified key.",207],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",207],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",207],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",207],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::btree::map","",207],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Target","",""],[11,"deref","collections::btree::map::stack","",208],[11,"deref_mut","","",208],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",209],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",209],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",210],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",210],[11,"peek","","Gets a reference to the value the stack points to.",211],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",211],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",211],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",211],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",211],[11,"from_iter","collections::btree::map","",207],[11,"extend","","",207],[11,"hash","","",207],[11,"default","","",207],[11,"eq","","",207],[11,"partial_cmp","","",207],[11,"cmp","","",207],[11,"fmt","","",207],[6,"Output","std::borrow",""],[11,"index","collections::btree::map","",207],[11,"index_mut","","",207],[11,"traverse","collections::btree::node","",204],[11,"traverse","","",204],[11,"traverse","","",204],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",212],[11,"size_hint","","",212],[11,"next_back","","",212],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",213],[11,"size_hint","","",213],[11,"next_back","","",213],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",214],[11,"size_hint","","",214],[11,"next_back","","",214],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",215],[11,"size_hint","","",215],[11,"next_back","","",215],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",216],[11,"size_hint","","",216],[11,"next_back","","",216],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",217],[11,"size_hint","","",217],[11,"next_back","","",217],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",218],[11,"next_back","","",218],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",219],[11,"next_back","","",219],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",220],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",221],[11,"get","","Gets a reference to the value in the entry.",222],[11,"get_mut","","Gets a mutable reference to the value in the entry.",222],[11,"into_mut","","Converts the entry into a mutable reference to its value.",222],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",222],[11,"remove","","Takes the value of the entry out of the map, and returns it.",222],[11,"iter","","Gets an iterator over the entries of the map.",207],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",207],[11,"into_iter","","Gets an owning iterator over the entries of the map.",207],[11,"keys","","Gets an iterator over the keys of the map.",207],[11,"values","","Gets an iterator over the values of the map.",207],[11,"len","","Return the number of elements in the map.",207],[11,"is_empty","","Return true if the map contains no elements.",207],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",207],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",207],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",207],[11,"partial_cmp","collections::btree::set","",223],[11,"lt","","",223],[11,"le","","",223],[11,"gt","","",223],[11,"ge","","",223],[11,"cmp","","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"hash","","",223],[11,"clone","","",223],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",223],[11,"with_b","","Makes a new BTreeSet with the given B.",223],[11,"iter","","Gets an iterator over the BTreeSet's contents.",223],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",223],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",223],[11,"difference","","Visits the values representing the difference, in ascending order.",223],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",223],[11,"intersection","","Visits the values representing the intersection, in ascending order.",223],[11,"union","","Visits the values representing the union, in ascending order.",223],[11,"len","","Return the number of elements in the set",223],[11,"is_empty","","Returns true if the set contains no elements",223],[11,"clear","","Clears the set, removing all values.",223],[11,"contains","","Returns `true` if the set contains a value.",223],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",223],[11,"is_subset","","Returns `true` if the set is a subset of another.",223],[11,"is_superset","","Returns `true` if the set is a superset of another.",223],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",223],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",223],[11,"from_iter","","",223],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::btree::set","",223],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"extend","collections::btree::set","",223],[11,"default","","",223],[6,"Output","std::borrow",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","collections::btree::set","",223],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",224],[11,"size_hint","","",224],[11,"next_back","","",224],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",225],[11,"size_hint","","",225],[11,"next_back","","",225],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",226],[11,"next_back","","",226],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",227],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",228],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",229],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",230],[11,"borrow","std::rc","",179],[11,"borrow","alloc::arc","",178],[11,"borrow","collections::borrow","",185],[6,"Owned","std::borrow",""],[11,"clone","collections::borrow","",185],[6,"Target","std::borrow",""],[11,"deref","collections::borrow","",185],[11,"cmp","","",185],[11,"eq","","",185],[11,"partial_cmp","","",185],[11,"fmt","","",185],[11,"fmt","","",185],[11,"hash","","",185],[11,"into_cow","","",185],[11,"hash","collections::enum_set","",231],[11,"cmp","","",231],[11,"partial_cmp","","",231],[11,"lt","","",231],[11,"le","","",231],[11,"gt","","",231],[11,"ge","","",231],[11,"eq","","",231],[11,"ne","","",231],[11,"clone","","",231],[11,"fmt","","",231],[11,"new","","Returns an empty `EnumSet`.",231],[11,"len","","Returns the number of elements in the given `EnumSet`.",231],[11,"is_empty","","Returns true if the `EnumSet` is empty.",231],[11,"clear","","",231],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",231],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",231],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",231],[11,"union","","Returns the union of both `EnumSets`.",231],[11,"intersection","","Returns the intersection of both `EnumSets`.",231],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",231],[11,"remove","","Removes an enum from the EnumSet",231],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",231],[11,"iter","","Returns an iterator over an `EnumSet`.",231],[6,"Output","std::borrow",""],[11,"sub","collections::enum_set","",231],[6,"Output","std::borrow",""],[11,"bitor","collections::enum_set","",231],[6,"Output","std::borrow",""],[11,"bitand","collections::enum_set","",231],[6,"Output","std::borrow",""],[11,"bitxor","collections::enum_set","",231],[11,"clone","","",232],[6,"Item","std::borrow",""],[11,"next","collections::enum_set","",232],[11,"size_hint","","",232],[11,"from_iter","","",231],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"extend","collections::enum_set","",231],[11,"clone","collections::linked_list","",233],[11,"clone","","",234],[11,"clone","","",235],[11,"default","","",236],[11,"new","","Creates an empty `LinkedList`.",236],[11,"append","","Moves all elements from `other` to the end of the list.",236],[11,"iter","","Provides a forward iterator.",236],[11,"iter_mut","","Provides a forward iterator with mutable references.",236],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",236],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",236],[11,"len","","Returns the length of the `LinkedList`.",236],[11,"clear","","Removes all elements from the `LinkedList`.",236],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",236],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",236],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",236],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",236],[11,"push_front","","Adds an element first in the list.",236],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",236],[11,"push_back","","Appends an element to the back of a list",236],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",236],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",236],[11,"drop","","",236],[6,"Item","std::borrow",""],[11,"next","collections::linked_list","",233],[11,"size_hint","","",233],[11,"next_back","","",233],[6,"Item","std::borrow",""],[11,"next","collections::linked_list","",237],[11,"size_hint","","",237],[11,"next_back","","",237],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",237],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",237],[6,"Item","std::borrow",""],[11,"next","collections::linked_list","",234],[11,"size_hint","","",234],[11,"next_back","","",234],[11,"from_iter","","",236],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::linked_list","",236],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","collections::linked_list","",236],[11,"eq","","",236],[11,"ne","","",236],[11,"partial_cmp","","",236],[11,"cmp","","",236],[11,"clone","","",236],[11,"fmt","","",236],[11,"hash","","",236],[6,"Item","std::borrow",""],[11,"clone","collections::slice","",238],[11,"new","","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",238],[11,"borrow","collections::vec","",239],[11,"borrow_mut","","",239],[6,"Owned","std::borrow",""],[11,"clone","collections::slice","",240],[11,"clone","","",241],[6,"Item","std::borrow",""],[11,"next","collections::slice","",238],[11,"size_hint","","",238],[6,"Item","std::borrow",""],[11,"next","collections::slice","",242],[11,"size_hint","","",242],[11,"clone","collections::str","",243],[11,"clone","","",244],[6,"Item","std::borrow",""],[11,"next","collections::str","",244],[11,"size_hint","","",244],[11,"clone","","",245],[11,"clone","","",246],[6,"Item","std::borrow",""],[11,"next","collections::str","",246],[11,"clone","","",247],[6,"Item","std::borrow",""],[11,"next","collections::str","",247],[11,"size_hint","","",247],[11,"borrow","collections::string","",248],[6,"Owned","std::borrow",""],[11,"cmp","collections::string","",248],[11,"partial_cmp","","",248],[11,"lt","","",248],[11,"le","","",248],[11,"gt","","",248],[11,"ge","","",248],[11,"clone","","",248],[11,"fmt","","",249],[11,"fmt","","",250],[11,"new","","Creates a new string buffer initialized with the empty string.",248],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",248],[11,"from_str","","Creates a new string buffer from the given string.",248],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",248],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",248],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",248],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",248],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",248],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",248],[11,"into_bytes","","Return the underlying byte buffer, encoded as UTF-8.",248],[11,"push_str","","Pushes the given string onto this string buffer.",248],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",248],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",248],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",248],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",248],[11,"push","","Adds the given character to the end of the string.",248],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",248],[11,"truncate","","Shortens a string to the specified length.",248],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",248],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",248],[11,"insert","","Insert a character into the string buffer at byte position `idx`.",248],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",248],[11,"len","","Return the number of bytes in this string.",248],[11,"is_empty","","Returns true if the string contains no bytes",248],[11,"clear","","Truncates the string, returning it to 0 length.",248],[11,"into_bytes","","Consume this error, returning the bytes that were attempted to make a\n`String` with.",249],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",249],[11,"fmt","","",249],[11,"description","","",249],[11,"fmt","","",250],[11,"description","","",250],[11,"from_iter","","",248],[11,"from_iter","","",248],[11,"extend","","",248],[11,"extend","","",248],[11,"eq","","",248],[11,"ne","","",248],[11,"eq","","",248],[11,"ne","","",248],[11,"eq","collections::borrow","",185],[11,"ne","","",185],[11,"eq","collections::string","",248],[11,"ne","","",248],[11,"eq","collections::borrow","",185],[11,"ne","","",185],[11,"as_slice","collections::string","",248],[11,"default","","",248],[11,"fmt","","",248],[11,"fmt","","",248],[11,"hash","","",248],[6,"Output","std::borrow",""],[11,"add","collections::string","",248],[6,"Output","std::borrow",""],[11,"index","collections::string","",248],[6,"Output","std::borrow",""],[11,"index","collections::string","",248],[6,"Output","std::borrow",""],[11,"index","collections::string","",248],[6,"Output","std::borrow",""],[11,"index","collections::string","",248],[6,"Target","std::borrow",""],[11,"deref","collections::string","",248],[6,"Target","std::borrow",""],[11,"deref","collections::string","",251],[6,"Err","std::borrow",""],[11,"from_str","collections::string","",248],[11,"into_cow","","",248],[11,"as_slice","collections::borrow","",185],[11,"write_str","collections::string","",248],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",239],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",239],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",239],[11,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",239],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",239],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Vec<T>`. The collection may reserve more space to avoid frequent reallocations.",239],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",239],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",239],[11,"into_boxed_slice","","Convert the vector into Box<[T]>.",239],[11,"truncate","","Shorten a vector, dropping excess elements.",239],[11,"as_mut_slice","","Returns a mutable slice of the elements of `self`.",239],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",239],[11,"set_len","","Sets the length of a vector.",239],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",239],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",239],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",239],[11,"retain","","Retains only the elements specified by the predicate.",239],[11,"push","","Appends an element to the back of a collection.",239],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",239],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",239],[11,"drain","","Creates a draining iterator that clears the `Vec` and iterates over\nthe removed items from start to end.",239],[11,"clear","","Clears the vector, removing all values.",239],[11,"len","","Returns the number of elements in the vector.",239],[11,"is_empty","","Returns `true` if the vector contains no elements.",239],[11,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",239],[11,"split_off","","Splits the collection into two at the given index.",239],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",239],[11,"push_all","","Appends all elements in a slice to the `Vec`.",239],[11,"dedup","","Removes consecutive repeated elements in the vector.",239],[11,"clone","","",239],[11,"clone_from","","",239],[11,"hash","","",239],[6,"Output","std::borrow",""],[11,"index","collections::vec","",239],[11,"index_mut","","",239],[6,"Output","std::borrow",""],[11,"index","collections::vec","",239],[6,"Output","std::borrow",""],[11,"index","collections::vec","",239],[6,"Output","std::borrow",""],[11,"index","collections::vec","",239],[6,"Output","std::borrow",""],[11,"index","collections::vec","",239],[11,"index_mut","","",239],[11,"index_mut","","",239],[11,"index_mut","","",239],[11,"index_mut","","",239],[6,"Target","std::borrow",""],[11,"deref","collections::vec","",239],[11,"deref_mut","","",239],[11,"from_iter","","",239],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::vec","",239],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","collections::vec","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","collections::borrow","",185],[11,"ne","","",185],[11,"eq","","",185],[11,"ne","","",185],[11,"eq","","",185],[11,"ne","","",185],[11,"eq","collections::vec","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"partial_cmp","","",239],[11,"cmp","","",239],[11,"as_slice","","Returns a slice into `self`.",239],[6,"Output","std::borrow",""],[11,"add","collections::vec","",239],[11,"drop","","",239],[11,"default","","",239],[11,"fmt","","",239],[11,"from_iter","collections::borrow","",185],[11,"into_cow","collections::vec","",239],[11,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",252],[6,"Item","std::borrow",""],[11,"next","collections::vec","",252],[11,"size_hint","","",252],[11,"next_back","","",252],[11,"drop","","",252],[6,"Item","std::borrow",""],[11,"next","collections::vec","",253],[11,"size_hint","","",253],[11,"next_back","","",253],[11,"drop","","",253],[6,"Target","std::borrow",""],[11,"deref","collections::vec","",254],[11,"drop","","",254],[11,"drop","","",255],[11,"drop","","",256],[11,"clone","collections::vec_deque","",257],[11,"drop","","",257],[11,"default","","",257],[11,"new","","Creates an empty `VecDeque`.",257],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",257],[11,"get","","Retrieves an element in the `VecDeque` by index.",257],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",257],[11,"swap","","Swaps elements at indices `i` and `j`.",257],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",257],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",257],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Ringbuf`. The collection may reserve more space to avoid frequent reallocations.",257],[11,"shrink_to_fit","","Shrinks the capacity of the ringbuf as much as possible.",257],[11,"truncate","","Shorten a ringbuf, dropping excess elements from the back.",257],[11,"iter","","Returns a front-to-back iterator.",257],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",257],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",257],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",257],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",257],[11,"len","","Returns the number of elements in the `VecDeque`.",257],[11,"is_empty","","Returns true if the buffer contains no elements",257],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",257],[11,"clear","","Clears the buffer, removing all values.",257],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",257],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",257],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",257],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",257],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",257],[11,"push_front","","Inserts an element first in the sequence.",257],[11,"push_back","","Appends an element to the back of a buffer",257],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",257],[11,"swap_back_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the last\nelement.",257],[11,"swap_front_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the first\nelement.",257],[11,"insert","","Inserts an element at position `i` within the ringbuf. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",257],[11,"remove","","Removes and returns the element at position `i` from the ringbuf.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `i` is out of bounds.",257],[11,"split_off","","Splits the collection into two at the given index.",257],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",257],[11,"resize","","Modifies the ringbuf in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",257],[11,"clone","","",258],[6,"Item","std::borrow",""],[11,"next","collections::vec_deque","",258],[11,"size_hint","","",258],[11,"next_back","","",258],[11,"indexable","","",258],[11,"idx","","",258],[6,"Item","std::borrow",""],[11,"next","collections::vec_deque","",259],[11,"size_hint","","",259],[11,"next_back","","",259],[6,"Item","std::borrow",""],[11,"next","collections::vec_deque","",260],[11,"size_hint","","",260],[11,"next_back","","",260],[11,"drop","","",261],[6,"Item","std::borrow",""],[11,"next","collections::vec_deque","",261],[11,"size_hint","","",261],[11,"next_back","","",261],[11,"eq","","",257],[11,"partial_cmp","","",257],[11,"cmp","","",257],[11,"hash","","",257],[6,"Output","std::borrow",""],[11,"index","collections::vec_deque","",257],[11,"index_mut","","",257],[11,"from_iter","","",257],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::vec_deque","",257],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","collections::vec_deque","",257],[11,"fmt","","",257],[11,"default","collections::vec_map","",262],[11,"clone","","",262],[11,"clone_from","","",262],[11,"hash","","",262],[11,"new","","Creates an empty `VecMap`.",262],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",262],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",262],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",262],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",262],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",262],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",262],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",262],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",262],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",262],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",262],[11,"split_off","","Splits the collection into two at the given key.",262],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",262],[11,"len","","Return the number of elements in the map.",262],[11,"is_empty","","Return true if the map contains no elements.",262],[11,"clear","","Clears the map, removing all key-value pairs.",262],[11,"get","","Returns a reference to the value corresponding to the key.",262],[11,"contains_key","","Returns true if the map contains a value for the specified key.",262],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",262],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",262],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",262],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",262],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",263],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",264],[11,"get","","Gets a reference to the value in the entry.",265],[11,"get_mut","","Gets a mutable reference to the value in the entry.",265],[11,"into_mut","","Converts the entry into a mutable reference to its value.",265],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",265],[11,"remove","","Takes the value of the entry out of the map, and returns it.",265],[11,"eq","","",262],[11,"partial_cmp","","",262],[11,"cmp","","",262],[11,"fmt","","",262],[11,"from_iter","","",262],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::vec_map","",262],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","collections::vec_map","",262],[6,"Output","std::borrow",""],[11,"index","collections::vec_map","",262],[11,"index_mut","","",262],[11,"clone","","",266],[6,"Item","std::borrow",""],[11,"next","collections::vec_map","",266],[11,"size_hint","","",266],[11,"next_back","","",266],[6,"Item","std::borrow",""],[11,"next","collections::vec_map","",267],[11,"size_hint","","",267],[11,"next_back","","",267],[11,"clone","","",268],[11,"clone","","",269],[6,"Item","std::borrow",""],[11,"next","collections::vec_map","",270],[11,"size_hint","","",270],[11,"next_back","","",270],[6,"Item","std::borrow",""],[11,"next","collections::vec_map","",268],[11,"size_hint","","",268],[11,"next_back","","",268],[6,"Item","std::borrow",""],[11,"next","collections::vec_map","",269],[11,"size_hint","","",269],[11,"next_back","","",269],[6,"Item","std::borrow",""],[11,"next","collections::vec_map","",271],[11,"size_hint","","",271],[11,"next_back","","",271],[4,"Cow","std::borrow","A clone-on-write smart pointer."],[13,"Borrowed","","Borrowed data.",185],[13,"Owned","","Owned data.",185],[8,"IntoCow","","Trait for moving into a `Cow`"],[10,"into_cow","","Moves `self` into `Cow`",272],[0,"fmt","std","Utilities for formatting and printing strings"],[5,"format","std::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string."],[8,"Write","","A collection of methods that are required to format a message into a stream."],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",273],[10,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",273],[8,"Octal","","Format trait for the `o` character"],[10,"fmt","","Formats the value using the given formatter.",274],[8,"Debug","","Format trait for the `:?` format. Useful for debugging, all types\nshould implement this."],[10,"fmt","","Formats the value using the given formatter.",275],[5,"radix","","Constructs a radix formatter in the range of `2..36`."],[6,"Result","",""],[3,"Error","","The error type which is returned from formatting a message into a stream."],[3,"Error","","The error type which is returned from formatting a message into a stream."],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided."],[8,"LowerHex","","Format trait for the `x` character"],[10,"fmt","","Formats the value using the given formatter.",276],[8,"UpperHex","","Format trait for the `X` character"],[10,"fmt","","Formats the value using the given formatter.",277],[3,"Radix","","A radix with in the range of `2..36`."],[8,"Binary","","Format trait for the `b` character"],[10,"fmt","","Formats the value using the given formatter.",278],[8,"UpperExp","","Format trait for the `E` character"],[10,"fmt","","Formats the value using the given formatter.",279],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits."],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification."],[3,"RadixFmt","","A helper type for formatting radixes."],[8,"Pointer","","Format trait for the `p` character"],[10,"fmt","","Formats the value using the given formatter.",280],[8,"LowerExp","","Format trait for the `e` character"],[10,"fmt","","Formats the value using the given formatter.",281],[8,"Display","","When a value can be semantically expressed as a String, this trait may be\nused. It corresponds to the default format, `{}`."],[10,"fmt","","Formats the value using the given formatter.",282],[0,"slice","std","Utilities for slice manipulation"],[8,"SliceExt","std::slice","Allocating extension methods for slices."],[16,"Item","std::slice::SliceExt",""],[10,"sort_by","std::slice","Sorts the slice, in place, using `compare` to compare\nelements.",283],[10,"move_from","","Consumes `src` and moves as many elements as it can into `self`\nfrom the range [start,end).",283],[10,"slice","","Deprecated: use `&s[start .. end]` notation instead.",283],[10,"slice_from","","Deprecated: use `&s[start..]` notation instead.",283],[10,"slice_to","","Deprecated: use `&s[..end]` notation instead.",283],[10,"split_at","","Divides one slice into two at an index.",283],[10,"iter","","Returns an iterator over the slice.",283],[10,"split","","Returns an iterator over subslices separated by elements that match\n`pred`.  The matched element is not contained in the subslices.",283],[10,"splitn","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to splitting at most `n` times.  The matched element is\nnot contained in the subslices.",283],[10,"rsplitn","","Returns an iterator over subslices separated by elements that match\n`pred` limited to splitting at most `n` times. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",283],[10,"windows","","Returns an iterator over all contiguous windows of length\n`size`. The windows overlap. If the slice is shorter than\n`size`, the iterator returns no values.",283],[10,"chunks","","Returns an iterator over `size` elements of the slice at a\ntime. The chunks do not overlap. If `size` does not divide the\nlength of the slice, then the last chunk will not have length\n`size`.",283],[10,"get","","Returns the element of a slice at the given index, or `None` if the\nindex is out of bounds.",283],[10,"first","","Returns the first element of a slice, or `None` if it is empty.",283],[10,"tail","","Returns all but the first element of a slice.",283],[10,"init","","Returns all but the last element of a slice.",283],[10,"last","","Returns the last element of a slice, or `None` if it is empty.",283],[10,"get_unchecked","","Returns a pointer to the element at the given index, without doing\nbounds checking.",283],[10,"as_ptr","","Returns an unsafe pointer to the slice's buffer",283],[10,"binary_search_by","","Binary search a sorted slice with a comparator function.",283],[10,"len","","Return the number of elements in the slice",283],[10,"is_empty","","Returns true if the slice has a length of 0",283],[10,"get_mut","","Returns a mutable reference to the element at the given index,\nor `None` if the index is out of bounds",283],[10,"as_mut_slice","","Work with `self` as a mut slice.\nPrimarily intended for getting a &mut [T] from a [T; N].",283],[10,"slice_mut","","Deprecated: use `&mut s[start .. end]` instead.",283],[10,"slice_from_mut","","Deprecated: use `&mut s[start ..]` instead.",283],[10,"slice_to_mut","","Deprecated: use `&mut s[.. end]` instead.",283],[10,"iter_mut","","Returns an iterator that allows modifying each value",283],[10,"first_mut","","Returns a mutable pointer to the first element of a slice, or `None` if it is empty",283],[10,"tail_mut","","Returns all but the first element of a mutable slice",283],[10,"init_mut","","Returns all but the last element of a mutable slice",283],[10,"last_mut","","Returns a mutable pointer to the last item in the slice.",283],[10,"split_mut","","Returns an iterator over mutable subslices separated by elements that\nmatch `pred`.  The matched element is not contained in the subslices.",283],[10,"splitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to splitting at most `n` times.  The matched element is\nnot contained in the subslices.",283],[10,"rsplitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred` limited to splitting at most `n` times. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",283],[10,"chunks_mut","","Returns an iterator over `chunk_size` elements of the slice at a time.\nThe chunks are mutable and do not overlap. If `chunk_size` does\nnot divide the length of the slice, then the last chunk will not\nhave length `chunk_size`.",283],[10,"swap","","Swaps two elements in a slice.",283],[10,"split_at_mut","","Divides one `&mut` into two at an index.",283],[10,"reverse","","Reverse the order of elements in a slice, in place.",283],[10,"get_unchecked_mut","","Returns an unsafe mutable pointer to the element in index",283],[10,"as_mut_ptr","","Return an unsafe mutable pointer to the slice's buffer.",283],[10,"to_vec","","Copies `self` into a new `Vec`.",283],[10,"permutations","","Creates an iterator that yields every possible permutation of the\nvector in succession.",283],[10,"clone_from_slice","","Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",283],[10,"sort","","Sorts the slice, in place.",283],[10,"binary_search","","Binary search a sorted slice for a given element.",283],[10,"binary_search_elem","","Deprecated: use `binary_search` instead.",283],[10,"next_permutation","","Mutates the slice to the next lexicographic permutation.",283],[10,"prev_permutation","","Mutates the slice to the previous lexicographic permutation.",283],[10,"position_elem","","Find the first index containing a matching value.",283],[10,"rposition_elem","","Find the last index containing a matching value.",283],[10,"contains","","Returns true if the slice contains an element with the given value.",283],[10,"starts_with","","Returns true if `needle` is a prefix of the slice.",283],[10,"ends_with","","Returns true if `needle` is a suffix of the slice.",283],[10,"into_vec","","Convert `self` into a vector without clones or allocation.",283],[8,"SliceConcatExt","","An extension trait for concatenating slices"],[10,"concat","","Flattens a slice of `T` into a single value `U`.",284],[10,"connect","","Flattens a slice of `T` into a single value `U`, placing a given separator between each.",284],[3,"ElementSwaps","","An iterator that yields the element swaps needed to produce\na sequence of all possible permutations for an indexed sequence of\nelements. Each permutation is only a single swap apart."],[3,"Permutations","","An iterator that uses `ElementSwaps` to iterate through\nall possible permutations of a vector."],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"Iter","","Immutable slice iterator"],[5,"from_raw_parts","","Forms a slice from a pointer and a length."],[5,"from_raw_buf","","Forms a slice from a pointer and a length."],[5,"mut_ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[8,"IntSliceExt","","Extension methods for slices containing integers."],[10,"as_unsigned","","Converts the slice to an immutable slice of unsigned integers with the same width.",285],[10,"as_signed","","Converts the slice to an immutable slice of signed integers with the same width.",285],[10,"as_unsigned_mut","","Converts the slice to a mutable slice of unsigned integers with the same width.",285],[10,"as_signed_mut","","Converts the slice to a mutable slice of signed integers with the same width.",285],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction."],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`."],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime)."],[5,"from_raw_mut_buf","","Performs the same functionality as `from_raw_buf`, except that a mutable\nslice is returned."],[3,"Windows","","An iterator over overlapping subslices of length `size`."],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder."],[5,"ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[0,"bytes","","Operations on `[u8]`."],[8,"MutableByteVector","std::slice::bytes","A trait for operations on mutable `[u8]`s."],[10,"set_memory","","Sets all bytes of the receiver to the given value.",286],[5,"copy_memory","","Copies data from `src` to `dst`"],[8,"AsSlice","std::slice","Data that is viewable as a slice."],[10,"as_slice","","Work with `self` as a slice.",287],[3,"IterMut","","Mutable slice iterator."],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned."],[0,"str","std","Unicode string manipulation (the [`str`](../primitive.str.html) type)."],[3,"Decompositions","std::str","External iterator for a string decomposition's characters."],[3,"Recompositions","","External iterator for a string recomposition's characters."],[3,"Utf16Units","","External iterator for a string's UTF16 codeunits."],[8,"StrExt","","Any string that can be represented as a slice."],[10,"escape_default","","Escapes each char in `s` with `char::escape_default`.",288],[10,"escape_unicode","","Escapes each char in `s` with `char::escape_unicode`.",288],[10,"replace","","Replaces all occurrences of one string with another.",288],[10,"nfd_chars","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",288],[10,"nfkd_chars","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",288],[10,"nfc_chars","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",288],[10,"nfkc_chars","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",288],[10,"contains","","Returns `true` if `self` contains another `&str`.",288],[10,"contains_char","","Returns `true` if `self` contains a `char`.",288],[10,"chars","","An iterator over the codepoints of `self`.",288],[10,"bytes","","An iterator over the bytes of `self`.",288],[10,"char_indices","","An iterator over the characters of `self` and their byte offsets.",288],[10,"split","","An iterator over substrings of `self`, separated by characters\nmatched by a pattern.",288],[10,"splitn","","An iterator over substrings of `self`, separated by characters matched by a pattern,\nrestricted to splitting at most `count` times.",288],[10,"split_terminator","","An iterator over substrings of `self`, separated by characters\nmatched by a pattern.",288],[10,"rsplitn","","An iterator over substrings of `self`, separated by characters matched by a pattern,\nstarting from the end of the string.",288],[10,"match_indices","","An iterator over the start and end indices of the disjoint matches of a `&str` within\n`self`.",288],[10,"split_str","","An iterator over the substrings of `self` separated by a `&str`.",288],[10,"lines","","An iterator over the lines of a string, separated by `\\n`.",288],[10,"lines_any","","An iterator over the lines of a string, separated by either `\\n` or `\\r\\n`.",288],[10,"slice","","Deprecated: use `s[a .. b]` instead.",288],[10,"slice_from","","Deprecated: use `s[a..]` instead.",288],[10,"slice_to","","Deprecated: use `s[..a]` instead.",288],[10,"slice_chars","","Returns a slice of the string from the character range [`begin`..`end`).",288],[10,"slice_unchecked","","Takes a bytewise slice from a string.",288],[10,"starts_with","","Returns `true` if the given `&str` is a prefix of the string.",288],[10,"ends_with","","Returns true if the given `&str` is a suffix of the string.",288],[10,"trim_matches","","Returns a string with all pre- and suffixes that match a pattern repeatedly removed.",288],[10,"trim_left_matches","","Returns a string with all prefixes that match a pattern repeatedly removed.",288],[10,"trim_right_matches","","Returns a string with all suffixes that match a pattern repeatedly removed.",288],[10,"is_char_boundary","","Check that `index`-th byte lies at the start and/or end of a UTF-8 code point sequence.",288],[10,"char_range_at","","Given a byte position, return the next char and its index.",288],[10,"char_range_at_reverse","","Given a byte position, return the previous `char` and its position.",288],[10,"char_at","","Given a byte position, return the `char` at that position.",288],[10,"char_at_reverse","","Given a byte position, return the `char` at that position, counting from the end.",288],[10,"as_bytes","","Convert `self` to a byte slice.",288],[10,"find","","Returns the byte index of the first character of `self` that matches the pattern, if it\nexists.",288],[10,"rfind","","Returns the byte index of the last character of `self` that matches the pattern, if it\nexists.",288],[10,"find_str","","Returns the byte index of the first matching substring if it exists.",288],[10,"slice_shift_char","","Retrieves the first character from a `&str` and returns it.",288],[10,"subslice_offset","","Returns the byte offset of an inner slice relative to an enclosing outer slice.",288],[10,"as_ptr","","Return an unsafe pointer to the `&str`'s buffer.",288],[10,"utf16_units","","Return an iterator of `u16` over the string encoded as UTF-16.",288],[10,"len","","Returns the length of `self` in bytes.",288],[10,"is_empty","","Returns true if this slice has a length of zero bytes.",288],[10,"parse","","Parses `self` into the specified type.",288],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",288],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See\n`graphemes()` for more information.",288],[10,"words","","An iterator over the non-empty words of `self`.",288],[10,"width","","Returns a string's displayed width in columns.",288],[10,"trim","","Returns a `&str` with leading and trailing whitespace removed.",288],[10,"trim_left","","Returns a `&str` with leading whitespace removed.",288],[10,"trim_right","","Returns a `&str` with trailing whitespace removed.",288],[4,"Utf8Error","","Errors which can occur when attempting to interpret a byte slice as a `str`."],[13,"InvalidByte","","An invalid byte was detected at the byte offset given.",99],[13,"TooShort","","The byte slice was invalid because more bytes were needed but no more\nbytes were available.",99],[3,"LinesAny","","An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`)."],[3,"SplitStr","","An iterator over the substrings of a string separated by a given\nsearch string"],[3,"CharIndices","","External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."],[11,"clone","unicode::tables::grapheme","",289],[11,"clone","unicode::u_str","",290],[6,"Item","std::str",""],[11,"next","unicode::u_str","",290],[11,"size_hint","","",290],[11,"next_back","","",290],[11,"clone","","",291],[11,"eq","","",292],[11,"ne","","",292],[6,"Item","std::str",""],[11,"size_hint","unicode::u_str","",291],[11,"next","","",291],[11,"next_back","","",291],[11,"clone","","",293],[11,"fmt","","",294],[11,"clone","","",294],[11,"eq","","",294],[11,"ne","","",294],[11,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",294],[6,"Item","std::str",""],[11,"next","unicode::u_str","",293],[11,"size_hint","","",293],[11,"clone","","",295],[11,"new","","Create an UTF-16 encoder from any `char` iterator.",295],[6,"Item","std::str",""],[11,"next","unicode::u_str","",295],[11,"size_hint","","",295],[6,"Item","std::str",""],[11,"next","unicode::u_str","",296],[11,"next_back","","",296],[3,"Graphemes","std::str","External iterator for a string's\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)."],[5,"from_utf8","","Converts a slice of bytes to a string slice without performing any\nallocations."],[3,"SplitTerminator","","Return type of `StrExt::split_terminator`"],[5,"from_c_str","","Constructs a static string slice from a given raw pointer."],[3,"MatchIndices","","An iterator over the start and end indices of the matches of a\nsubstring within a larger string"],[8,"Searcher","","A searcher for a string pattern."],[10,"haystack","","Getter for the underlaying string to be searched in",297],[10,"next","","Performs the next search step starting from the front.",297],[10,"next_match","","Find the next `Match` result. See `next()`",297],[10,"next_reject","","Find the next `Reject` result. See `next()`",297],[3,"RSplitN","","Return type of `StrExt::rsplitn`"],[8,"Str","","Any string that can be represented as a slice"],[10,"as_slice","","Work with `self` as a slice.",298],[3,"Lines","","An iterator over the lines of a string, separated by `\\n`."],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails."],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`."],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",94],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",94],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",94],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets."],[8,"CharEq","","Something that can be used to compare against a character"],[10,"matches","","Determine if the splitter should split at the given character",299],[10,"only_ascii","","Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",299],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring."],[16,"Err","std::str::FromStr",""],[10,"from_str","std::str","Parses a string `s` to return an optional value of this type. If the\nstring is ill-formatted, the None is returned.",300],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module."],[3,"Split","","Return type of `StrExt::split`"],[3,"Words","","An iterator over the words of a string, separated by a sequence of whitespace"],[8,"ReverseSearcher","","A reverse searcher for a string pattern."],[10,"next_back","","Performs the next search step starting from the back.",301],[10,"next_match_back","","Find the next `Match` result. See `next_back()`",301],[10,"next_reject_back","","Find the next `Reject` result. See `next_back()`",301],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation."],[8,"Pattern","","A string pattern."],[16,"Searcher","std::str::Pattern",""],[10,"into_searcher","std::str","Construct the associated searcher from\n`self` and the `haystack` to search in.",302],[10,"is_contained_in","","Check whether the pattern matches anywhere in the haystack",302],[10,"is_prefix_of","","Check whether the pattern matches at the front of the haystack",302],[10,"is_suffix_of","","Check whether the pattern matches at the back of the haystack",302],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."],[12,"ch","","Current `char`",303],[12,"next","","Index of the first byte of the next `char`",303],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string"],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."],[3,"SplitN","","Return type of `StrExt::splitn`"],[0,"string","std","An owned, growable string that enforces that its contents are valid UTF-8."],[3,"String","std::string","A growable string stored as a UTF-8 encoded buffer."],[3,"FromUtf8Error","","A possible error value from the `String::from_utf8` function."],[3,"FromUtf16Error","","A possible error value from the `String::from_utf16` function."],[3,"DerefString","","Wrapper type providing a `&String` reference via `Deref`."],[5,"as_string","","Convert a string slice to a wrapper type providing a `&String` reference."],[8,"ToString","","A generic trait for converting a value to a string"],[10,"to_string","","Converts the value of `self` to an owned string",304],[6,"CowString","",""],[0,"vec","std","A growable list type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'"],[3,"Vec","std::vec","A growable list type, written `Vec<T>` but pronounced 'vector.'"],[6,"CowVec","",""],[3,"IntoIter","","An iterator that moves out of a vector."],[3,"Drain","","An iterator that drains a vector."],[3,"DerefVec","","Wrapper type providing a `&Vec<T>` reference via `Deref`."],[5,"as_vec","","Convert a slice to a wrapper type providing a `&Vec<T>` reference."],[0,"char","std","Character manipulation (`char` type, Unicode Scalar Value)"],[8,"CharExt","std::char","Functionality for manipulating `char`."],[10,"is_digit","","Checks if a `char` parses as a numeric digit in the given radix.",305],[10,"to_digit","","Converts a character to the corresponding digit.",305],[10,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode escape\nof a character, as `char`s.",305],[10,"escape_default","","Returns an iterator that yields the 'default' ASCII and\nC++11-like literal escape of a character, as `char`s.",305],[10,"len_utf8","","Returns the amount of bytes this character would need if encoded in\nUTF-8.",305],[10,"len_utf16","","Returns the amount of bytes this character would need if encoded in\nUTF-16.",305],[10,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer,\nand then returns the number of bytes written.",305],[10,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer,\nand then returns the number of `u16`s written.",305],[10,"is_alphabetic","","Returns whether the specified character is considered a Unicode\nalphabetic code point.",305],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start'\nUnicode property.",305],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue'\nUnicode property.",305],[10,"is_lowercase","","Indicates whether a character is in lowercase.",305],[10,"is_uppercase","","Indicates whether a character is in uppercase.",305],[10,"is_whitespace","","Indicates whether a character is whitespace.",305],[10,"is_alphanumeric","","Indicates whether a character is alphanumeric.",305],[10,"is_control","","Indicates whether a character is a control code point.",305],[10,"is_numeric","","Indicates whether the character is numeric (Nd, Nl, or No).",305],[10,"to_lowercase","","Converts a character to its lowercase equivalent.",305],[10,"to_uppercase","","Converts a character to its uppercase equivalent.",305],[10,"width","","Returns this character's displayed width in columns, or `None` if it is a\ncontrol character other than `'\\x00'`.",305],[5,"canonical_combining_class","",""],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character"],[5,"from_u32","","Converts a `u32` to an `Option<char>`."],[5,"from_digit","","Converts a number to the character representing it."],[5,"compose","",""],[17,"MAX","","The highest valid code point"],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on."],[5,"decompose_canonical","","Compute canonical Unicode decomposition for character"],[0,"prelude","std","The Rust prelude"],[0,"v1","std::prelude","The first version of the prelude of the standard library."],[0,"isize","std","Operations and constants for pointer-sized signed integers (`isize` type)"],[17,"BITS","std::isize",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i8","std","Operations and constants for signed 8-bits integers (`i8` type)"],[17,"BITS","std::i8",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i16","std","Operations and constants for signed 16-bits integers (`i16` type)"],[17,"BITS","std::i16",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i32","std","Operations and constants for signed 32-bits integers (`i32` type)"],[17,"BITS","std::i32",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i64","std","Operations and constants for signed 64-bits integers (`i64` type)"],[17,"BITS","std::i64",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"usize","std","Operations and constants for pointer-sized unsigned integers (`usize` type)"],[17,"BITS","std::usize",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u8","std","Operations and constants for unsigned 8-bits integers (`u8` type)"],[17,"BITS","std::u8",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u16","std","Operations and constants for unsigned 16-bits integers (`u16` type)"],[17,"BITS","std::u16",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u32","std","Operations and constants for unsigned 32-bits integers (`u32` type)"],[17,"BITS","std::u32",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u64","std","Operations and constants for unsigned 64-bits integer (`u64` type)"],[17,"BITS","std::u64",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"f32","std","Operations and constants for 32-bits floats (`f32` type)"],[17,"RADIX","std::f32",""],[17,"MANTISSA_DIGITS","",""],[17,"DIGITS","",""],[17,"EPSILON","",""],[17,"MIN_VALUE","","Smallest finite f32 value"],[17,"MIN_POS_VALUE","","Smallest positive, normalized f32 value"],[17,"MAX_VALUE","","Largest finite f32 value"],[17,"MIN_EXP","",""],[17,"MAX_EXP","",""],[17,"MIN_10_EXP","",""],[17,"MAX_10_EXP","",""],[17,"NAN","",""],[17,"INFINITY","",""],[17,"NEG_INFINITY","",""],[17,"MIN","","Smallest finite f32 value"],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value"],[17,"MAX","","Largest finite f32 value"],[0,"consts","","Various useful constants."],[17,"PI","std::f32::consts","Archimedes' constant"],[17,"PI_2","","pi * 2.0"],[17,"FRAC_PI_2","","pi/2.0"],[17,"FRAC_PI_3","","pi/3.0"],[17,"FRAC_PI_4","","pi/4.0"],[17,"FRAC_PI_6","","pi/6.0"],[17,"FRAC_PI_8","","pi/8.0"],[17,"FRAC_1_PI","","1.0/pi"],[17,"FRAC_2_PI","","2.0/pi"],[17,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[17,"SQRT2","","sqrt(2.0)"],[17,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[17,"E","","Euler's number"],[17,"LOG2_E","","log2(e)"],[17,"LOG10_E","","log10(e)"],[17,"LN_2","","ln(2.0)"],[17,"LN_10","","ln(10.0)"],[5,"to_string","std::f32","Converts a float to a string"],[5,"to_str_hex","","Converts a float to a string in hexadecimal format"],[5,"to_str_radix_special","","Converts a float to a string in a given radix, and a flag indicating\nwhether it's a special value"],[5,"to_str_exact","","Converts a float to a string with exactly the number of\nprovided significant digits"],[5,"to_str_digits","","Converts a float to a string with a maximum number of\nsignificant digits"],[5,"to_str_exp_exact","","Converts a float to a string using the exponential notation with exactly the number of\nprovided digits after the decimal point in the significand"],[5,"to_str_exp_digits","","Converts a float to a string using the exponential notation with the maximum number of\ndigits after the decimal point in the significand"],[0,"f64","std","Operations and constants for 64-bits floats (`f64` type)"],[17,"RADIX","std::f64",""],[17,"MANTISSA_DIGITS","",""],[17,"DIGITS","",""],[17,"EPSILON","",""],[17,"MIN_VALUE","","Smallest finite f64 value"],[17,"MIN_POS_VALUE","","Smallest positive, normalized f64 value"],[17,"MAX_VALUE","","Largest finite f64 value"],[17,"MIN_EXP","",""],[17,"MAX_EXP","",""],[17,"MIN_10_EXP","",""],[17,"MAX_10_EXP","",""],[17,"NAN","",""],[17,"INFINITY","",""],[17,"NEG_INFINITY","",""],[17,"MIN","","Smallest finite f64 value"],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value"],[17,"MAX","","Largest finite f64 value"],[0,"consts","","Various useful constants."],[17,"PI","std::f64::consts","Archimedes' constant"],[17,"PI_2","","pi * 2.0"],[17,"FRAC_PI_2","","pi/2.0"],[17,"FRAC_PI_3","","pi/3.0"],[17,"FRAC_PI_4","","pi/4.0"],[17,"FRAC_PI_6","","pi/6.0"],[17,"FRAC_PI_8","","pi/8.0"],[17,"FRAC_1_PI","","1.0/pi"],[17,"FRAC_2_PI","","2.0/pi"],[17,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[17,"SQRT2","","sqrt(2.0)"],[17,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[17,"E","","Euler's number"],[17,"LOG2_E","","log2(e)"],[17,"LOG10_E","","log10(e)"],[17,"LN_2","","ln(2.0)"],[17,"LN_10","","ln(10.0)"],[5,"to_string","std::f64","Converts a float to a string"],[5,"to_str_hex","","Converts a float to a string in hexadecimal format"],[5,"to_str_radix_special","","Converts a float to a string in a given radix, and a flag indicating\nwhether it's a special value"],[5,"to_str_exact","","Converts a float to a string with exactly the number of\nprovided significant digits"],[5,"to_str_digits","","Converts a float to a string with a maximum number of\nsignificant digits"],[5,"to_str_exp_exact","","Converts a float to a string using the exponential notation with exactly the number of\nprovided digits after the decimal point in the significand"],[5,"to_str_exp_digits","","Converts a float to a string using the exponential notation with the maximum number of\ndigits after the decimal point in the significand"],[0,"ascii","std","Operations on ASCII strings and characters"],[3,"EscapeDefault","std::ascii","An iterator over the escaped version of a byte, constructed via\n`std::ascii::escape_default`."],[5,"escape_default","","Returns a 'default' ASCII and C++11-like literal escape of a `u8`"],[8,"OwnedAsciiExt","","Extension methods for ASCII-subset only operations on owned strings"],[10,"into_ascii_uppercase","","Convert the string to ASCII upper case:\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.",306],[10,"into_ascii_lowercase","","Convert the string to ASCII lower case:\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.",306],[8,"AsciiExt","","Extension methods for ASCII-subset only operations on string slices"],[16,"Owned","std::ascii::AsciiExt","Container type for copied ASCII characters."],[10,"is_ascii","std::ascii","Check if within the ASCII range.",307],[10,"to_ascii_uppercase","","Makes a copy of the string in ASCII upper case:\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.",307],[10,"to_ascii_lowercase","","Makes a copy of the string in ASCII lower case:\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.",307],[10,"eq_ignore_ascii_case","","Check that two strings are an ASCII case-insensitive match.\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporary strings.",307],[10,"make_ascii_uppercase","","Convert this type to its ASCII upper case equivalent in-place.",307],[10,"make_ascii_lowercase","","Convert this type to its ASCII lower case equivalent in-place.",307],[6,"Owned","",""],[11,"into_ascii_uppercase","std::string","",248],[11,"into_ascii_lowercase","","",248],[6,"Owned","std::ascii",""],[11,"into_ascii_uppercase","std::vec","",239],[11,"into_ascii_lowercase","","",239],[6,"Owned","std::ascii",""],[6,"Owned","",""],[6,"Item","",""],[11,"next","","",308],[11,"size_hint","","",308],[11,"next_back","","",308],[0,"thunk","std",""],[3,"Thunk","std::thunk",""],[8,"Invoke","",""],[10,"invoke","","",309],[11,"new","","",310],[11,"with_arg","","",310],[11,"invoke","","",310],[0,"num","std","Numeric traits and functions for generic mathematics"],[8,"Int","std::num","A built-in signed or unsigned integer."],[10,"zero","","Returns the `0` value of this integer type.",311],[10,"one","","Returns the `1` value of this integer type.",311],[10,"min_value","","Returns the smallest value that can be represented by this integer type.",311],[10,"max_value","","Returns the largest value that can be represented by this integer type.",311],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",311],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",311],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",311],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",311],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",311],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",311],[10,"swap_bytes","","Reverses the byte order of the integer.",311],[10,"from_be","","Convert an integer from big endian to the target's endianness.",311],[10,"from_le","","Convert an integer from little endian to the target's endianness.",311],[10,"to_be","","Convert `self` to big endian from the target's endianness.",311],[10,"to_le","","Convert `self` to little endian from the target's endianness.",311],[10,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if\noverflow occurred.",311],[10,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None`\nif underflow occurred.",311],[10,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",311],[10,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if\n`other == 0` or the operation results in underflow or overflow.",311],[10,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",311],[10,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at\nthe numeric bounds instead of overflowing.",311],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",311],[8,"SignedInt","","A built-in two's complement integer."],[10,"abs","","Computes the absolute value of `self`. `Int::min_value()` will be\nreturned if the number is `Int::min_value()`.",312],[10,"signum","","Returns a number representing sign of `self`.",312],[10,"is_positive","","Returns `true` if `self` is positive and `false` if the number\nis zero or negative.",312],[10,"is_negative","","Returns `true` if `self` is negative and `false` if the number\nis zero or positive.",312],[8,"UnsignedInt","","A built-in unsigned integer."],[10,"is_power_of_two","","Returns `true` iff `self == 2^k` for some `k`.",313],[10,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.\nUnspecified behavior on overflow.",313],[10,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the\nnext power of two is greater than the type's maximum value, `None` is\nreturned, otherwise the power of two is wrapped in `Some`.",313],[5,"cast","","Cast from one machine scalar to another."],[8,"FromPrimitive","","A generic trait for converting a number to a value."],[10,"from_int","","Convert an `int` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",314],[10,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",314],[10,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",314],[10,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",314],[10,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",314],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",314],[10,"from_uint","","Convert an `uint` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",314],[10,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",314],[10,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",314],[10,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",314],[10,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",314],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",314],[10,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",314],[10,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",314],[8,"NumCast","","An interface for casting between machine scalars."],[10,"from","","Creates a number from another value that can be converted into a primitive via the\n`ToPrimitive` trait.",315],[8,"ToPrimitive","","A generic trait for converting a value to a number."],[10,"to_int","","Converts the value of `self` to an `int`.",316],[10,"to_isize","","Converts the value of `self` to an `isize`.",316],[10,"to_i8","","Converts the value of `self` to an `i8`.",316],[10,"to_i16","","Converts the value of `self` to an `i16`.",316],[10,"to_i32","","Converts the value of `self` to an `i32`.",316],[10,"to_i64","","Converts the value of `self` to an `i64`.",316],[10,"to_uint","","Converts the value of `self` to an `uint`.",316],[10,"to_usize","","Converts the value of `self` to a `usize`.",316],[10,"to_u8","","Converts the value of `self` to an `u8`.",316],[10,"to_u16","","Converts the value of `self` to an `u16`.",316],[10,"to_u32","","Converts the value of `self` to an `u32`.",316],[10,"to_u64","","Converts the value of `self` to an `u64`.",316],[10,"to_f32","","Converts the value of `self` to an `f32`.",316],[10,"to_f64","","Converts the value of `self` to an `f64`.",316],[5,"from_int","","A utility function that just calls `FromPrimitive::from_int`."],[5,"from_i8","","A utility function that just calls `FromPrimitive::from_i8`."],[5,"from_i16","","A utility function that just calls `FromPrimitive::from_i16`."],[5,"from_i32","","A utility function that just calls `FromPrimitive::from_i32`."],[5,"from_i64","","A utility function that just calls `FromPrimitive::from_i64`."],[5,"from_uint","","A utility function that just calls `FromPrimitive::from_uint`."],[5,"from_u8","","A utility function that just calls `FromPrimitive::from_u8`."],[5,"from_u16","","A utility function that just calls `FromPrimitive::from_u16`."],[5,"from_u32","","A utility function that just calls `FromPrimitive::from_u32`."],[5,"from_u64","","A utility function that just calls `FromPrimitive::from_u64`."],[5,"from_f32","","A utility function that just calls `FromPrimitive::from_f32`."],[5,"from_f64","","A utility function that just calls `FromPrimitive::from_f64`."],[8,"FromStrRadix","","A generic trait for converting a string with a radix (base) to a value"],[16,"Err","std::num::FromStrRadix",""],[10,"from_str_radix","std::num","",317],[5,"from_str_radix","","A utility function that just calls `FromStrRadix::from_str_radix`."],[4,"FpCategory","","Used for representing the classification of floating point numbers"],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero",3],[13,"Infinite","","Positive or negative infinity",3],[13,"Zero","","Positive or negative zero",3],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",3],[13,"Normal","","A regular floating point number",3],[3,"ParseIntError","","An error which can be returned when parsing an integer."],[3,"ParseFloatError","","An error which can be returned when parsing a float."],[0,"wrapping","",""],[8,"WrappingOps","std::num::wrapping",""],[10,"wrapping_add","","",318],[10,"wrapping_sub","","",318],[10,"wrapping_mul","","",318],[8,"OverflowingOps","",""],[10,"overflowing_add","","",319],[10,"overflowing_sub","","",319],[10,"overflowing_mul","","",319],[3,"Wrapping","",""],[0,"strconv","std::num",""],[4,"ExponentFormat","std::num::strconv","A flag that specifies whether to use exponential (scientific) notation."],[13,"ExpNone","","Do not use exponential notation.",320],[13,"ExpDec","","Use exponential notation with the exponent having a base of 10 and the\nexponent sign being `e` or `E`. For example, 1000 would be printed\n1e3.",320],[13,"ExpBin","","Use exponential notation with the exponent having a base of 2 and the\nexponent sign being `p` or `P`. For example, 8 would be printed 1p3.",320],[4,"SignificantDigits","","The number of digits used for emitting the fractional part of a number, if\nany."],[13,"DigAll","","All calculable digits will be printed.",321],[13,"DigMax","","At most the given number of digits will be printed, truncating any\ntrailing zeroes.",321],[13,"DigExact","","Precisely the given number of digits will be printed.",321],[4,"SignFormat","","How to emit the sign of a number."],[13,"SignNone","","No sign will be printed. The exponent sign will also be emitted.",322],[13,"SignNeg","","`-` will be printed for negative values, but no sign will be emitted\nfor positive numbers.",322],[13,"SignAll","","`+` will be printed for positive values, and `-` will be printed for\nnegative values.",322],[5,"float_to_str_bytes_common","","Converts a number to its string representation as a byte vector.\nThis is meant to be a common base implementation for all numeric string\nconversion functions like `to_string()` or `to_str_radix()`."],[5,"float_to_str_common","","Converts a number to its string representation. This is a wrapper for\n`to_str_bytes_common()`, for details see there."],[8,"Float","std::num","Mathematical operations on primitive floating point numbers."],[10,"nan","","Returns the `NaN` value.",323],[10,"infinity","","Returns the infinite value.",323],[10,"neg_infinity","","Returns the negative infinite value.",323],[10,"zero","","Returns `0.0`.",323],[10,"neg_zero","","Returns `-0.0`.",323],[10,"one","","Returns `1.0`.",323],[10,"mantissa_digits","","Deprecated: use `std::f32::MANTISSA_DIGITS` or `std::f64::MANTISSA_DIGITS`\ninstead.",323],[10,"digits","","Deprecated: use `std::f32::DIGITS` or `std::f64::DIGITS` instead.",323],[10,"epsilon","","Deprecated: use `std::f32::EPSILON` or `std::f64::EPSILON` instead.",323],[10,"min_exp","","Deprecated: use `std::f32::MIN_EXP` or `std::f64::MIN_EXP` instead.",323],[10,"max_exp","","Deprecated: use `std::f32::MAX_EXP` or `std::f64::MAX_EXP` instead.",323],[10,"min_10_exp","","Deprecated: use `std::f32::MIN_10_EXP` or `std::f64::MIN_10_EXP` instead.",323],[10,"max_10_exp","","Deprecated: use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` instead.",323],[10,"min_value","","Returns the smallest finite value that this type can represent.",323],[10,"min_pos_value","","Returns the smallest normalized positive number that this type can represent.",323],[10,"max_value","","Returns the largest finite value that this type can represent.",323],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",323],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",323],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",323],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",323],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",323],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",323],[10,"floor","","Returns the largest integer less than or equal to a number.",323],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",323],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",323],[10,"trunc","","Return the integer part of a number.",323],[10,"fract","","Returns the fractional part of a number.",323],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",323],[10,"signum","","Returns a number that represents the sign of `self`.",323],[10,"is_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",323],[10,"is_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",323],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",323],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",323],[10,"powi","","Raise a number to an integer power.",323],[10,"powf","","Raise a number to a floating point power.",323],[10,"sqrt","","Take the square root of a number.",323],[10,"rsqrt","","Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.",323],[10,"exp","","Returns `e^(self)`, (the exponential function).",323],[10,"exp2","","Returns `2^(self)`.",323],[10,"ln","","Returns the natural logarithm of the number.",323],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",323],[10,"log2","","Returns the base 2 logarithm of the number.",323],[10,"log10","","Returns the base 10 logarithm of the number.",323],[10,"to_degrees","","Convert radians to degrees.",323],[10,"to_radians","","Convert degrees to radians.",323],[10,"ldexp","","Constructs a floating point number of `x*2^exp`.",323],[10,"frexp","","Breaks the number into a normalized fraction and a base-2 exponent,\nsatisfying:",323],[10,"next_after","","Returns the next representable floating-point value in the direction of\n`other`.",323],[10,"max","","Returns the maximum of the two numbers.",323],[10,"min","","Returns the minimum of the two numbers.",323],[10,"abs_sub","","The positive difference of two numbers.",323],[10,"cbrt","","Take the cubic root of a number.",323],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",323],[10,"sin","","Computes the sine of a number (in radians).",323],[10,"cos","","Computes the cosine of a number (in radians).",323],[10,"tan","","Computes the tangent of a number (in radians).",323],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",323],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",323],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",323],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",323],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",323],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",323],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",323],[10,"sinh","","Hyperbolic sine function.",323],[10,"cosh","","Hyperbolic cosine function.",323],[10,"tanh","","Hyperbolic tangent function.",323],[10,"asinh","","Inverse hyperbolic sine function.",323],[10,"acosh","","Inverse hyperbolic cosine function.",323],[10,"atanh","","Inverse hyperbolic tangent function.",323],[0,"thread_local","std","Thread local storage"],[3,"Key","std::thread_local","A thread local storage key which owns its contents."],[4,"State","","Indicator of the state of a thread local storage key."],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will\ntransition to the `Valid` state once the first call to `with` happens\nand the initialization expression succeeds.",324],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid`\nstate. Keys in the `Valid` state will remain so until the thread exits,\nat which point the destructor will be run and the key will enter the\n`Destroyed` state.",324],[13,"Destroyed","","When a thread exits, the destructors for keys will be run (if\nnecessary). While a destructor is running, and possibly after a\ndestructor has run, a key is in the `Destroyed` state.",324],[0,"scoped","","Scoped thread-local storage"],[3,"Key","std::thread_local::scoped","Type representing a thread local storage key corresponding to a reference\nto the type parameter `T`."],[11,"set","","Insert a value into this scoped thread local storage slot for a\nduration of a closure.",325],[11,"with","","Get a value out of this scoped variable.",325],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",325],[11,"eq","std::thread_local","",324],[11,"ne","","",324],[11,"with","","Acquire a reference to the value in this TLS key.",326],[11,"state","","Query the current state of this key.",326],[11,"destroyed","","Deprecated",326],[0,"dynamic_lib","std","Dynamic library facilities."],[3,"DynamicLibrary","std::dynamic_lib",""],[11,"drop","","",327],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",327],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",327],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",327],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",327],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",327],[11,"symbol","","Access the value at the symbol of the dynamic library",327],[0,"ffi","std","Utilities related to FFI bindings."],[3,"CString","std::ffi","A type representing an owned C-compatible string"],[3,"CStr","","Representation of a borrowed C string."],[3,"NulError","","An error returned from `CString::new` to indicate that a nul byte was found\nin the vector provided."],[3,"OsString","","Owned, mutable OS strings."],[3,"OsStr","","Slices into OS strings."],[5,"c_str_to_bytes","","Deprecated in favor of `CStr`"],[5,"c_str_to_bytes_with_nul","","Deprecated in favor of `CStr`"],[11,"hash","","",328],[11,"cmp","","",328],[11,"partial_cmp","","",328],[11,"lt","","",328],[11,"le","","",328],[11,"gt","","",328],[11,"ge","","",328],[11,"eq","","",328],[11,"ne","","",328],[11,"clone","","",328],[11,"hash","","",329],[11,"fmt","","",330],[11,"eq","","",330],[11,"ne","","",330],[11,"clone","","",330],[11,"new","","Create a new C-compatible string from a container of bytes.",328],[11,"from_slice","","Create a new C-compatible string from a byte slice.",328],[11,"from_vec","","Create a C-compatible string from a byte vector.",328],[11,"from_vec_unchecked","","Create a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",328],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",328],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",328],[11,"deref","","",328],[11,"fmt","","",328],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::from_vec`.",330],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",330],[11,"description","","",330],[11,"fmt","","",330],[11,"from_ptr","","Cast a raw C string to a safe C string wrapper.",329],[11,"as_ptr","","Return the inner pointer to this C string.",329],[11,"to_bytes","","Convert this C string to a byte slice.",329],[11,"to_bytes_with_nul","","Convert this C string to a byte slice containing the trailing 0 byte.",329],[11,"eq","","",329],[11,"partial_cmp","","",329],[11,"cmp","","",329],[11,"into_bytes","std::string","",248],[11,"into_bytes","std::vec","",239],[11,"clone","std::ffi","",331],[11,"from_string","","Constructs an `OsString` at no cost by consuming a `String`.",331],[11,"from_str","","Constructs an `OsString` by copying from a `&str` slice.",331],[11,"new","","Constructs a new empty `OsString`.",331],[11,"into_string","","Convert the `OsString` into a `String` if it contains valid Unicode data.",331],[11,"push_os_str","","Extend the string with the given `&OsStr` slice.",331],[11,"push","","Extend the string with the given `&OsStr` slice.",331],[11,"index","","",331],[11,"deref","","",331],[11,"fmt","","",331],[11,"eq","","",331],[11,"eq","","",331],[11,"partial_cmp","","",331],[11,"lt","","",331],[11,"le","","",331],[11,"gt","","",331],[11,"ge","","",331],[11,"partial_cmp","","",331],[11,"cmp","","",331],[11,"hash","","",331],[11,"from_str","","Coerce directly from a `&str` slice to a `&OsStr` slice.",332],[11,"to_str","","Yield a `&str` slice if the `OsStr` is valid unicode.",332],[11,"to_string_lossy","","Convert an `OsStr` to a `Cow<str>`.",332],[11,"to_os_string","","Copy the slice into an owned `OsString`.",332],[11,"eq","","",332],[11,"eq","","",332],[11,"partial_cmp","","",332],[11,"lt","","",332],[11,"le","","",332],[11,"gt","","",332],[11,"ge","","",332],[11,"partial_cmp","","",332],[11,"cmp","","",332],[11,"hash","","",332],[11,"fmt","","",332],[11,"borrow","","",331],[11,"to_owned","","",332],[11,"as_os_str","","",332],[11,"as_os_str","","",331],[11,"as_os_str","std::string","",248],[8,"IntoBytes","std::ffi","A conversion trait used by the constructor of `CString` for types that can\nbe converted to a vector of bytes."],[10,"into_bytes","","Consumes this container, returning a vector of bytes.",333],[8,"AsOsStr","","Freely convertible to an `&OsStr` slice."],[10,"as_os_str","","Convert to an `&OsStr` slice.",334],[0,"old_io","std","I/O, including files, networking, timers, and processes"],[3,"TempDir","std::old_io","A wrapper for a path to temporary directory implementing automatic\nscope-based deletion."],[3,"MemReader","","Reads from an owned byte vector"],[3,"BufReader","","Reads from a fixed-size byte slice"],[3,"MemWriter","","Writes to an owned, growable byte vector"],[3,"BufWriter","","Writes to a fixed-size byte slice"],[3,"BufferedReader","","Wraps a Reader and buffers input from it"],[3,"BufferedWriter","","Wraps a Writer and buffers output to it"],[3,"BufferedStream","","Wraps a Stream and buffers input and output to and from it."],[3,"LineBufferedWriter","","Wraps a Writer and buffers output to it, flushing whenever a newline (`0x0a`,\n`'\\n'`) is detected."],[3,"ChanReader","","Allows reading from a rx."],[3,"ChanWriter","","Allows writing to a tx."],[3,"IoError","","The type passed to I/O condition handlers to indicate error"],[12,"kind","","An enumeration which can be matched against for determining the flavor\nof error.",335],[12,"desc","","A human-readable description about the error",335],[12,"detail","","Detailed information about this error, not always available",335],[3,"RefReader","","A `RefReader` is a struct implementing `Reader` which contains a reference\nto another reader. This is often useful when composing streams."],[3,"RefWriter","","A `RefWriter` is a struct implementing `Writer` which contains a reference\nto another writer. This is often useful when composing streams."],[3,"Lines","","An iterator that reads a line on each iteration,\nuntil `.read_line()` encounters `EndOfFile`."],[3,"Chars","","An iterator that reads a utf8-encoded character on each iteration,\nuntil `.read_char()` encounters `EndOfFile`."],[3,"IncomingConnections","","An infinite iterator over incoming connection attempts.\nCalling `next` will block the task until a connection is attempted."],[3,"FileStat","","A structure used to describe metadata information about a file. This\nstructure is created through the `stat` method on a `Path`."],[12,"size","","The size of the file, in bytes",336],[12,"kind","","The kind of file this path points to (directory, file, pipe, etc.)",336],[12,"perm","","The file permissions currently on the file",336],[12,"created","","The time that the file was created at, in platform-dependent\nmilliseconds",336],[12,"modified","","The time that this file was last modified, in platform-dependent\nmilliseconds",336],[12,"accessed","","The time that this file was last accessed, in platform-dependent\nmilliseconds",336],[12,"unstable","","Information returned by stat() which is not guaranteed to be\nplatform-independent. This information may be useful on some platforms,\nbut it may have different meanings or no meaning at all on other\nplatforms.",336],[3,"UnstableFileStat","","This structure represents all of the possible information which can be\nreturned from a `stat` syscall which is not contained in the `FileStat`\nstructure. This information is not necessarily platform independent, and may\nhave different meanings or no meaning at all on some platforms."],[12,"device","","The ID of the device containing the file.",337],[12,"inode","","The file serial number.",337],[12,"rdev","","The device ID.",337],[12,"nlink","","The number of hard links to this file.",337],[12,"uid","","The user ID of the file.",337],[12,"gid","","The group ID of the file.",337],[12,"blksize","","The optimal block size for I/O.",337],[12,"blocks","","The blocks allocated for this file.",337],[12,"flags","","User-defined flags for the file.",337],[12,"gen","","The file generation number.",337],[3,"FilePermission","","/// A set of permissions for a file or directory is represented by a set of\n/// flags which are or'd together."],[4,"IoErrorKind","","A list specifying general categories of I/O error."],[13,"OtherIoError","","Any I/O error not part of this list.",338],[13,"EndOfFile","","The operation could not complete because end of file was reached.",338],[13,"FileNotFound","","The file was not found.",338],[13,"PermissionDenied","","The file permissions disallowed access to this file.",338],[13,"ConnectionFailed","","A network connection failed for some reason not specified in this list.",338],[13,"Closed","","The network operation failed because the network connection was closed.",338],[13,"ConnectionRefused","","The connection was refused by the remote server.",338],[13,"ConnectionReset","","The connection was reset by the remote server.",338],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",338],[13,"NotConnected","","The network operation failed because it was not connected yet.",338],[13,"BrokenPipe","","The operation failed because a pipe was closed.",338],[13,"PathAlreadyExists","","A file already existed with that name.",338],[13,"PathDoesntExist","","No file exists at that location.",338],[13,"MismatchedFileTypeForOperation","","The path did not specify the type of file that this operation required. For example,\nattempting to copy a directory with the `fs::copy()` operation will fail with this error.",338],[13,"ResourceUnavailable","","The operation temporarily failed (for example, because a signal was received), and retrying\nmay succeed.",338],[13,"IoUnavailable","","No I/O functionality is available for this task.",338],[13,"InvalidInput","","A parameter was incorrect in a way that caused an I/O error not part of this list.",338],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",338],[13,"ShortWrite","","This write operation failed to write all of its data.",338],[13,"NoProgress","","The Reader returned 0 bytes from `read()` too many times.",338],[4,"SeekStyle","","When seeking, the resulting cursor is offset from a base by the offset given\nto the `seek` function. The base used is specified by this enumeration."],[13,"SeekSet","","Seek from the beginning of the stream",339],[13,"SeekEnd","","Seek from the end of the stream",339],[13,"SeekCur","","Seek from the current position",339],[4,"FileMode","","A mode specifies how a file should be opened or created. These modes are\npassed to `File::open_mode` and are used to control where the file is\npositioned when it is initially opened."],[13,"Open","","Opens a file positioned at the beginning.",340],[13,"Append","","Opens a file positioned at EOF.",340],[13,"Truncate","","Opens a file, truncating it if it already exists.",340],[4,"FileAccess","","Access permissions with which the file should be opened. `File`s\nopened with `Read` will return an error if written to."],[13,"Read","","Read-only access, requests to write will result in an error",341],[13,"Write","","Write-only access, requests to read will result in an error",341],[13,"ReadWrite","","Read-write access, no requests are denied by default",341],[4,"FileType","","Different kinds of files which can be identified by a call to stat"],[13,"RegularFile","","This is a normal file, corresponding to `S_IFREG`",342],[13,"Directory","","This file is a directory, corresponding to `S_IFDIR`",342],[13,"NamedPipe","","This file is a named pipe, corresponding to `S_IFIFO`",342],[13,"BlockSpecial","","This file is a block device, corresponding to `S_IFBLK`",342],[13,"Symlink","","This file is a symbolic link to another file, corresponding to `S_IFLNK`",342],[13,"Unknown","","The type of this file is not recognized as one of the other categories",342],[5,"standard_error","","Creates a standard error for a commonly used flavor of error. The `detail`\nfield of the returned error will always be `None`."],[11,"fmt","","",343],[11,"with_capacity","","Creates a new `BufferedReader` with the specified buffer capacity",343],[11,"new","","Creates a new `BufferedReader` with a default buffer capacity",343],[11,"get_ref","","Gets a reference to the underlying reader.",343],[11,"get_mut","","Gets a mutable reference to the underlying reader.",343],[11,"into_inner","","Unwraps this `BufferedReader`, returning the underlying reader.",343],[11,"fill_buf","","",343],[11,"consume","","",343],[11,"read","","",343],[11,"fmt","","",344],[11,"with_capacity","","Creates a new `BufferedWriter` with the specified buffer capacity",344],[11,"new","","Creates a new `BufferedWriter` with a default buffer capacity",344],[11,"get_ref","","Gets a reference to the underlying writer.",344],[11,"get_mut","","Gets a mutable reference to the underlying write.",344],[11,"into_inner","","Unwraps this `BufferedWriter`, returning the underlying writer.",344],[11,"write_all","","",344],[11,"flush","","",344],[11,"drop","","",344],[11,"fmt","","",345],[11,"new","","Creates a new `LineBufferedWriter`",345],[11,"get_ref","","Gets a reference to the underlying writer.",345],[11,"into_inner","","Unwraps this `LineBufferedWriter`, returning the underlying writer.",345],[11,"write_all","","",345],[11,"flush","","",345],[11,"fmt","","",346],[11,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",346],[11,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",346],[11,"get_ref","","Gets a reference to the underlying stream.",346],[11,"get_mut","","Gets a mutable reference to the underlying stream.",346],[11,"into_inner","","Unwraps this `BufferedStream`, returning the underlying stream.",346],[11,"fill_buf","","",346],[11,"consume","","",346],[11,"read","","",346],[11,"write_all","","",346],[11,"flush","","",346],[11,"new","","Wraps a `Port` in a `ChanReader` structure",347],[11,"fill_buf","","",347],[11,"consume","","",347],[11,"read","","",347],[11,"new","","Wraps a channel in a `ChanWriter` structure",348],[11,"clone","","",348],[11,"write_all","","",348],[11,"write_all","std::vec","",239],[11,"clone","std::old_io","",349],[11,"new","","Create a new `MemWriter`.",349],[11,"with_capacity","","Create a new `MemWriter`, allocating at least `n` bytes for\nthe internal buffer.",349],[11,"from_vec","","Create a new `MemWriter` that will append to an existing `Vec`.",349],[11,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemWriter`.",349],[11,"into_inner","","Unwraps this `MemWriter`, returning the underlying buffer",349],[11,"write_all","","",349],[11,"new","","Creates a new `MemReader` which will read the buffer given. The buffer\ncan be re-acquired through `unwrap`",350],[11,"eof","","Tests whether this reader has read all bytes in its buffer.",350],[11,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemReader`.",350],[11,"into_inner","","Unwraps this `MemReader`, returning the underlying buffer",350],[11,"read","","",350],[11,"tell","","",350],[11,"seek","","",350],[11,"fill_buf","","",350],[11,"consume","","",350],[11,"new","","Creates a new `BufWriter` which will wrap the specified buffer. The\nwriter initially starts at position 0.",351],[11,"write_all","","",351],[11,"tell","","",351],[11,"seek","","",351],[11,"new","","Creates a new buffered reader which will read the specified buffer",352],[11,"eof","","Tests whether this reader has read all bytes in its buffer.",352],[11,"read","","",352],[11,"tell","","",352],[11,"seek","","",352],[11,"fill_buf","","",352],[11,"consume","","",352],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",353],[11,"new","","Attempts to make a temporary directory inside of `os::tmpdir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",353],[11,"into_inner","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",353],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",353],[11,"close","","Close and remove the temporary directory",353],[11,"drop","","",353],[0,"extensions","","Utility mixins that apply to all Readers and Writers"],[3,"Bytes","std::old_io::extensions","An iterator that reads a single byte on each iteration,\nuntil `.read_byte()` returns `EndOfFile`."],[5,"u64_to_le_bytes","","Converts an 8-bit to 64-bit unsigned value to a little-endian byte\nrepresentation of the given size. If the size is not big enough to\nrepresent the value, then the high-order bytes are truncated."],[5,"u64_to_be_bytes","","Converts an 8-bit to 64-bit unsigned value to a big-endian byte\nrepresentation of the given size. If the size is not big enough to\nrepresent the value, then the high-order bytes are truncated."],[5,"u64_from_be_bytes","","Extracts an 8-bit to 64-bit unsigned big-endian value from the given byte\nbuffer and returns it as a 64-bit value."],[11,"new","","Constructs a new byte iterator from the given Reader instance.",354],[6,"Item","",""],[11,"next","","",354],[0,"fs","std::old_io","Synchronous File I/O"],[3,"File","std::old_io::fs","Unconstrained file access type that exposes read and write operations"],[3,"Directories","","An iterator that walks over a directory"],[5,"unlink","","Unlink a file from the underlying filesystem."],[5,"stat","","Given a path, query the file system to get information about a file,\ndirectory, etc. This function will traverse symlinks to query\ninformation about the destination file."],[5,"lstat","","Perform the same operation as the `stat` function, except that this\nfunction does not traverse through symlinks. This will return\ninformation about the symlink file instead of the file that it points\nto."],[5,"rename","","Rename a file or directory to a new name."],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file."],[5,"chmod","","Changes the permission mode bits found on a file or a directory. This\nfunction takes a mask from the `io` module"],[5,"chown","","Change the user and group owners of a file at the specified path."],[5,"link","","Creates a new hard link on the filesystem. The `dst` path will be a\nlink pointing to the `src` path. Note that systems often require these\ntwo paths to both be located on the same filesystem."],[5,"symlink","","Creates a new symbolic link on the filesystem. The `dst` path will be a\nsymlink pointing to the `src` path."],[5,"readlink","","Reads a symlink, returning the file that the symlink points to."],[5,"mkdir","","Create a new, empty directory at the provided path"],[5,"rmdir","","Remove an existing, empty directory"],[5,"readdir","","Retrieve a vector containing all entries within a provided directory"],[5,"walk_dir","","Returns an iterator that will recursively walk the directory structure\nrooted at `path`. The path given will not be iterated over, and this will\nperform iteration in some top-down order.  The contents of unreadable\nsubdirectories are ignored."],[5,"mkdir_recursive","","Recursively create a directory and all of its parent components if they\nare missing."],[5,"rmdir_recursive","","Removes a directory at this path, after removing all its contents. Use\ncarefully!"],[5,"change_file_times","","Changes the timestamps for a file's last modification and access time.\nThe file at the path specified will have its last access time set to\n`atime` and its modification time set to `mtime`. The times specified should\nbe in milliseconds."],[8,"PathExtensions","","Utility methods for paths."],[10,"stat","","Get information on the file, directory, etc at this path.",355],[10,"lstat","","Get information on the file, directory, etc at this path, not following\nsymlinks.",355],[10,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::stat` fails.",355],[10,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",355],[10,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",355],[11,"open_mode","","Open a file at `path` in the mode specified by the `mode` and `access`\narguments",356],[11,"open","","Attempts to open a file in read-only mode. This function is equivalent to\n`File::open_mode(path, Open, Read)`, and will raise all of the same\nerrors that `File::open_mode` does.",356],[11,"create","","Attempts to create a file in write-only mode. This function is\nequivalent to `File::open_mode(path, Truncate, Write)`, and will\nraise all of the same errors that `File::open_mode` does.",356],[11,"path","","Returns the original path that was used to open this file.",356],[11,"fsync","","Synchronizes all modifications to this file to its permanent storage\ndevice. This will flush any internal buffers necessary to perform this\noperation.",356],[11,"datasync","","This function is similar to `fsync`, except that it may not synchronize\nfile metadata to the filesystem. This is intended for use cases that\nmust synchronize content, but don't need the metadata on disk. The goal\nof this method is to reduce disk operations.",356],[11,"truncate","","Either truncates or extends the underlying file, updating the size of\nthis file to become `size`. This is equivalent to unix's `truncate`\nfunction.",356],[11,"eof","","Returns true if the stream has reached the end of the file.",356],[11,"stat","","Queries information about the underlying file.",356],[11,"clone","","",357],[6,"Item","",""],[11,"next","","",357],[11,"read","","",356],[11,"write_all","","",356],[11,"tell","","",356],[11,"seek","","",356],[0,"net","std::old_io","Networking I/O"],[0,"addrinfo","std::old_io::net","Synchronous DNS Resolution"],[3,"Hint","std::old_io::net::addrinfo","This structure is used to provide hints when fetching addresses for a\nremote host to control how the lookup is performed."],[12,"family","","",358],[12,"socktype","","",358],[12,"protocol","","",358],[12,"flags","","",358],[3,"Info","",""],[12,"address","","",359],[12,"family","","",359],[12,"socktype","","",359],[12,"protocol","","",359],[12,"flags","","",359],[4,"SocketType","","Hints to the types of sockets that are desired when looking up hosts"],[13,"Stream","","",360],[13,"Datagram","","",360],[13,"Raw","","",360],[4,"Flag","","Flags which can be or'd into the `flags` field of a `Hint`. These are used\nto manipulate how a query is performed."],[13,"AddrConfig","","",361],[13,"All","","",361],[13,"CanonName","","",361],[13,"NumericHost","","",361],[13,"NumericServ","","",361],[13,"Passive","","",361],[13,"V4Mapped","","",361],[4,"Protocol","","A transport protocol associated with either a hint or a return value of\n`lookup`"],[13,"TCP","","",362],[13,"UDP","","",362],[5,"get_host_addresses","","Easy name resolution. Given a hostname, returns the list of IP addresses for\nthat hostname."],[5,"get_address_name","","Reverse name resolution. Given an address, returns the corresponding\nhostname."],[11,"fmt","","",360],[11,"fmt","","",361],[11,"fmt","","",362],[11,"fmt","","",358],[11,"fmt","","",359],[0,"tcp","std::old_io::net","TCP network connections"],[3,"TcpStream","std::old_io::net::tcp","A structure which represents a TCP stream between a local socket and a\nremote socket."],[3,"TcpListener","","A structure representing a socket server. This listener is used to create a\n`TcpAcceptor` which can be used to accept sockets on a local port."],[3,"TcpAcceptor","","The accepting half of a TCP socket server. This structure is created through\na `TcpListener`'s `listen` method, and this object can be used to accept new\n`TcpStream` instances."],[11,"connect","","Open a TCP connection to a remote host.",363],[11,"connect_timeout","","Creates a TCP connection to a remote socket address, timing out after\nthe specified duration.",363],[11,"peer_name","","Returns the socket address of the remote peer of this TCP connection.",363],[11,"socket_name","","Returns the socket address of the local half of this TCP connection.",363],[11,"set_nodelay","","Sets the nodelay flag on this connection to the boolean specified",363],[11,"set_keepalive","","Sets the keepalive timeout to the timeout specified.",363],[11,"close_read","","Closes the reading half of this connection.",363],[11,"close_write","","Closes the writing half of this connection.",363],[11,"set_timeout","","Sets a timeout, in milliseconds, for blocking operations on this stream.",363],[11,"set_read_timeout","","Sets the timeout for read operations on this stream.",363],[11,"set_write_timeout","","Sets the timeout for write operations on this stream.",363],[11,"clone","","Creates a new handle to this TCP stream, allowing for simultaneous reads\nand writes of this connection.",363],[11,"read","","",363],[11,"write_all","","",363],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified address.\nThis listener is not ready for accepting connections, `listen` must be called\non it before that's possible.",364],[11,"socket_name","","Returns the local socket address of this listener.",364],[11,"listen","","",364],[11,"set_timeout","","Prevents blocking on all future accepts after `ms` milliseconds have\nelapsed.",365],[11,"close_accept","","Closes the accepting capabilities of this acceptor.",365],[11,"accept","","",365],[11,"clone","","Creates a new handle to this TCP acceptor, allowing for simultaneous\naccepts.",365],[0,"udp","std::old_io::net","UDP (User Datagram Protocol) network connections."],[3,"UdpSocket","std::old_io::net::udp","A User Datagram Protocol socket."],[11,"bind","","Creates a UDP socket from the given address.",366],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",366],[11,"send_to","","Sends data on the socket to the given address. Returns nothing on\nsuccess.",366],[11,"socket_name","","Returns the socket address that this socket was created from.",366],[11,"join_multicast","","Joins a multicast IP address (becomes a member of it)",366],[11,"leave_multicast","","Leaves a multicast IP address (drops membership from it)",366],[11,"set_multicast_loop","","Set the multicast loop flag to the specified value",366],[11,"set_multicast_ttl","","Sets the multicast TTL",366],[11,"set_ttl","","Sets this socket's TTL",366],[11,"set_broadcast","","Sets the broadcast flag on or off",366],[11,"set_timeout","","Sets the read/write timeout for this socket.",366],[11,"set_read_timeout","","Sets the read timeout for this socket.",366],[11,"set_write_timeout","","Sets the write timeout for this socket.",366],[11,"clone","","Creates a new handle to this UDP socket, allowing for simultaneous\nreads and writes of the socket.",366],[0,"ip","std::old_io::net","Internet Protocol (IP) addresses."],[3,"SocketAddr","std::old_io::net::ip",""],[12,"ip","","",367],[12,"port","","",367],[3,"ParseError","",""],[4,"IpAddr","",""],[13,"Ipv4Addr","","",368],[13,"Ipv6Addr","","",368],[6,"Port","",""],[8,"ToSocketAddr","","A trait for objects which can be converted or resolved to one or more `SocketAddr` values."],[11,"to_socket_addr","","Converts this object to single socket address value.",369],[11,"to_socket_addr_all","","Converts this object to all available socket address values.",369],[11,"fmt","","",368],[11,"hash","","",368],[11,"clone","","",368],[11,"eq","","",368],[11,"ne","","",368],[11,"fmt","","",368],[11,"fmt","","",367],[11,"hash","","",367],[11,"clone","","",367],[11,"eq","","",367],[11,"ne","","",367],[11,"fmt","","",367],[6,"Err","",""],[11,"from_str","","",368],[6,"Err","",""],[11,"from_str","","",367],[11,"eq","","",370],[11,"ne","","",370],[11,"clone","","",370],[11,"fmt","","",370],[11,"to_socket_addr","","",367],[0,"pipe","std::old_io::net","Named pipes"],[3,"UnixStream","std::old_io::net::pipe","A stream which communicates over a named pipe."],[3,"UnixListener","","A value that can listen for incoming named pipe connection requests."],[3,"UnixAcceptor","","A value that can accept named pipe connections, returned from `listen()`."],[11,"connect","","Connect to a pipe named by `path`. This will attempt to open a\nconnection to the underlying socket.",371],[11,"connect_timeout","","Connect to a pipe named by `path`, timing out if the specified number of\nmilliseconds.",371],[11,"close_read","","Closes the reading half of this connection.",371],[11,"close_write","","Closes the writing half of this connection.",371],[11,"set_timeout","","Sets the read/write timeout for this socket.",371],[11,"set_read_timeout","","Sets the read timeout for this socket.",371],[11,"set_write_timeout","","Sets the write timeout for this socket.",371],[11,"clone","","",371],[11,"read","","",371],[11,"write_all","","",371],[11,"bind","","Creates a new listener, ready to receive incoming connections on the\nspecified socket. The server will be named by `path`.",372],[11,"listen","","",372],[11,"set_timeout","","Sets a timeout for this acceptor, after which accept() will no longer\nblock indefinitely.",373],[11,"close_accept","","Closes the accepting capabilities of this acceptor.",373],[11,"accept","","",373],[11,"clone","","Creates a new handle to this unix acceptor, allowing for simultaneous\naccepts.",373],[0,"pipe","std::old_io","Synchronous, in-memory pipes."],[3,"PipeStream","std::old_io::pipe","A synchronous, in-memory pipe."],[3,"PipePair","",""],[12,"reader","","",374],[12,"writer","","",374],[11,"open","","Consumes a file descriptor to return a pipe stream that will have\nsynchronous, but non-blocking reads/writes. This is useful if the file\ndescriptor is acquired via means other than the standard methods.",375],[11,"pair","","Creates a pair of in-memory OS pipes for a unidirectional communication\nstream.",375],[11,"clone","","",375],[11,"read","","",375],[11,"write_all","","",375],[0,"process","std::old_io","Bindings for executing child processes"],[3,"Process","std::old_io::process","Representation of a running or exited child process."],[12,"stdin","","Handle to the child's stdin, if the `stdin` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",376],[12,"stdout","","Handle to the child's stdout, if the `stdout` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",376],[12,"stderr","","Handle to the child's stderr, if the `stderr` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",376],[3,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned. A default configuration can be\ngenerated using `Command::new(program)`, where `program` gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:"],[3,"ProcessOutput","","The output of a finished process."],[12,"status","","The status (exit code) of the process.",377],[12,"output","","The data that the process wrote to stdout.",377],[12,"error","","The data that the process wrote to stderr.",377],[4,"StdioContainer","","Describes what to do with a standard io stream for a child process."],[13,"Ignored","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",378],[13,"InheritFd","","The specified file descriptor is inherited for the stream which it is\nspecified for. Ownership of the file descriptor is *not* taken, so the\ncaller must clean it up.",378],[13,"CreatePipe","","Creates a pipe for the specified file descriptor which will be created\nwhen the process is spawned.",378],[4,"ProcessExit","","Describes the result of a process after it has terminated.\nNote that Windows have no signals, so the result is usually ExitStatus."],[13,"ExitStatus","","Normal termination with an exit status.",379],[13,"ExitSignal","","Termination by signal, with the signal number.",379],[6,"EnvMap","","A HashMap representation of environment variables."],[17,"PleaseExitSignal","","Signal a process to exit, without forcibly killing it. Corresponds to\nSIGTERM on unix platforms."],[17,"MustDieSignal","","Signal a process to exit immediately, forcibly killing it. Corresponds to\nSIGKILL on unix platforms."],[11,"clone","","",380],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",380],[11,"arg","","Add an argument to pass to the program.",380],[11,"args","","Add multiple arguments to pass to the program.",380],[11,"env","","Inserts or updates an environment variable mapping.",380],[11,"env_remove","","Removes an environment variable mapping.",380],[11,"env_set_all","","Sets the entire environment map for the child process.",380],[11,"cwd","","Set the working directory for the child process.",380],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).\nDefaults to `CreatePipe(true, false)` so the input can be written to.",380],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",380],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",380],[11,"uid","","Sets the child process's user id. This translates to a `setuid` call in\nthe child process. Setting this value on windows will cause the spawn to\nfail. Failure in the `setuid` call on unix will also cause the spawn to\nfail.",380],[11,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",380],[11,"detached","","Sets the child process to be spawned in a detached state. On unix, this\nmeans that the child is the leader of a new process group.",380],[11,"spawn","","Executes the command as a child process, which is returned.",380],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",380],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",380],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",380],[11,"clone","","",377],[11,"eq","","",377],[11,"ne","","",377],[11,"clone","","",378],[11,"fmt","","",379],[11,"clone","","",379],[11,"eq","","",379],[11,"ne","","",379],[11,"fmt","","Format a ProcessExit enum, to nicely present the information.",379],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",379],[11,"matches_exit_status","","Checks whether this ProcessExit matches the given exit status.\nTermination by signal will never match an exit code.",379],[11,"kill","","Sends `signal` to another process in the system identified by `id`.",376],[11,"id","","Returns the process id of this child process",376],[11,"signal","","Sends the specified signal to the child process, returning whether the\nsignal could be delivered or not.",376],[11,"signal_exit","","Sends a signal to this child requesting that it exits. This is\nequivalent to sending a SIGTERM on unix platforms.",376],[11,"signal_kill","","Sends a signal to this child forcing it to exit. This is equivalent to\nsending a SIGKILL on unix platforms.",376],[11,"wait","","Wait for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",376],[11,"set_timeout","","Sets a timeout, in milliseconds, for future calls to wait().",376],[11,"wait_with_output","","Simultaneously wait for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `ProcessOutput`\ninstance.",376],[11,"forget","","Forgets this process, allowing it to outlive the parent",376],[11,"drop","","",376],[0,"stdio","std::old_io","Non-blocking access to stdin, stdout, and stderr."],[3,"StdinReader","std::old_io::stdio","A synchronized wrapper around a buffered reader from stdin"],[3,"StdinReaderGuard","","A guard for exclusive access to `StdinReader`'s internal `BufferedReader`."],[3,"StdReader","","Representation of a reader of a standard input stream"],[3,"StdWriter","","Representation of a writer to a standard output stream"],[5,"stdin","","Creates a new handle to the stdin of the current process."],[5,"stdin_raw","","Creates a new non-blocking handle to the stdin of the current process."],[5,"stdout","","Creates a line-buffered handle to the stdout of the current process."],[5,"stdout_raw","","Creates an unbuffered handle to the stdout of the current process"],[5,"stderr","","Creates a line-buffered handle to the stderr of the current process."],[5,"stderr_raw","","Creates an unbuffered handle to the stderr of the current process"],[5,"set_stdout","","Resets the task-local stdout handle to the specified writer"],[5,"set_stderr","","Resets the task-local stderr handle to the specified writer"],[5,"flush","","Flushes the local task's stdout handle."],[5,"print","","Prints a string to the stdout of the current process. No newline is emitted\nafter the string is printed."],[5,"println","","Prints a string to the stdout of the current process. A literal\n`\\n` character is printed to the console after the string."],[5,"print_args","","Similar to `print`, but takes a `fmt::Arguments` structure to be compatible\nwith the `format_args!` macro."],[5,"println_args","","Similar to `println`, but takes a `fmt::Arguments` structure to be\ncompatible with the `format_args!` macro."],[11,"clone","","",381],[6,"Target","",""],[11,"deref","","",382],[11,"deref_mut","","",382],[11,"lock","","Locks the `StdinReader`, granting the calling thread exclusive access\nto the underlying `BufferedReader`.",381],[11,"read_line","","Like `Buffer::read_line`.",381],[11,"read_until","","Like `Buffer::read_until`.",381],[11,"read_char","","Like `Buffer::read_char`.",381],[11,"read","","",381],[11,"read_at_least","","",381],[11,"push_at_least","","",381],[11,"read_to_end","","",381],[11,"read_le_uint_n","","",381],[11,"read_be_uint_n","","",381],[11,"isatty","","Returns whether this stream is attached to a TTY instance or not.",383],[11,"read","","",383],[11,"winsize","","Gets the size of this output window, if possible. This is typically used\nwhen the writer is attached to something like a terminal, this is used\nto fetch the dimensions of the terminal.",384],[11,"set_raw","","Controls whether this output stream is a \"raw stream\" or simply a normal\nstream.",384],[11,"isatty","","Returns whether this stream is attached to a TTY instance or not.",384],[11,"write_all","","",384],[0,"timer","std::old_io","Synchronous Timers"],[3,"Timer","std::old_io::timer","A synchronous timer object"],[5,"sleep","","Sleep the current task for the specified duration."],[11,"new","","Creates a new timer which can be used to put the current task to sleep\nfor a number of milliseconds, or to possibly create channels which will\nget notified after an amount of time has passed.",385],[11,"sleep","","Blocks the current task for the specified duration.",385],[11,"oneshot","","Creates a oneshot receiver which will have a notification sent when\nthe specified duration has elapsed.",385],[11,"periodic","","Creates a receiver which will have a continuous stream of notifications\nbeing sent each time the specified duration has elapsed.",385],[0,"util","std::old_io","Utility implementations of Reader and Writer"],[3,"LimitReader","std::old_io::util","Wraps a `Reader`, limiting the number of bytes that can be read from it."],[3,"NullWriter","","A `Writer` which ignores bytes written to it, like /dev/null."],[3,"ZeroReader","","A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero."],[3,"NullReader","","A `Reader` which is always at EOF, like /dev/null."],[3,"MultiWriter","","A `Writer` which multiplexes writes to a set of `Writer`s."],[3,"ChainedReader","","A `Reader` which chains input from multiple `Reader`s, reading each to\ncompletion before moving onto the next."],[3,"TeeReader","","A `Reader` which forwards input from another `Reader`, passing it along to\na `Writer` as well. Similar to the `tee(1)` command."],[3,"IterReader","","An adaptor converting an `Iterator<u8>` to a `Reader`."],[5,"copy","","Copies all data from a `Reader` to a `Writer`."],[11,"fmt","","",386],[11,"new","","Creates a new `LimitReader`",386],[11,"into_inner","","Consumes the `LimitReader`, returning the underlying `Reader`.",386],[11,"limit","","Returns the number of bytes that can be read before the `LimitReader`\nwill return EOF.",386],[11,"read","","",386],[11,"fill_buf","","",386],[11,"consume","","",386],[11,"fmt","","",387],[11,"write_all","","",387],[11,"fmt","","",388],[11,"read","","",388],[11,"fill_buf","","",388],[11,"consume","","",388],[11,"fmt","","",389],[11,"read","","",389],[11,"fill_buf","","",389],[11,"consume","","",389],[11,"fmt","","",390],[11,"new","","Creates a new `MultiWriter`",390],[11,"write_all","","",390],[11,"flush","","",390],[11,"fmt","","",391],[11,"clone","","",391],[11,"new","","Creates a new `ChainedReader`",391],[11,"read","","",391],[11,"fmt","","",392],[11,"new","","Creates a new `TeeReader`",392],[11,"into_inner","","Consumes the `TeeReader`, returning the underlying `Reader` and\n`Writer`.",392],[11,"read","","",392],[11,"fmt","","",393],[11,"clone","","",393],[11,"new","","Creates a new `IterReader` which will read from the specified\n`Iterator`.",393],[11,"read","","",393],[0,"test","std::old_io","Various utility functions useful for writing I/O tests"],[5,"next_test_port","std::old_io::test","Get a port number, starting at 9600, for use in tests"],[5,"next_test_unix","","Get a temporary path which could be the location of a unix socket"],[5,"next_test_ip4","","Get a unique IPv4 localhost:port pair starting at 9600"],[5,"next_test_ip6","","Get a unique IPv6 localhost:port pair starting at 9600"],[5,"raise_fd_limit","","Raises the file descriptor limit when running tests if necessary"],[6,"IoResult","std::old_io","A convenient typedef of the return value of any I/O action."],[17,"USER_READ","",""],[17,"USER_WRITE","",""],[17,"USER_EXECUTE","",""],[17,"GROUP_READ","",""],[17,"GROUP_WRITE","",""],[17,"GROUP_EXECUTE","",""],[17,"OTHER_READ","",""],[17,"OTHER_WRITE","",""],[17,"OTHER_EXECUTE","",""],[17,"USER_RWX","",""],[17,"GROUP_RWX","",""],[17,"OTHER_RWX","",""],[17,"USER_FILE","","/// Permissions for user owned files, equivalent to 0644 on unix-like\n/// systems."],[17,"USER_DIR","","/// Permissions for user owned directories, equivalent to 0755 on\n/// unix-like systems."],[17,"USER_EXEC","","/// Permissions for user owned executables, equivalent to 0755\n/// on unix-like systems."],[17,"ALL_PERMISSIONS","","/// All possible permissions enabled."],[8,"Reader","","A trait for objects which are byte-oriented streams. Readers are defined by\none method, `read`. This function will block until data is available,\nfilling in the provided buffer with any data read."],[10,"read","","Read bytes, up to the length of `buf` and place them in `buf`.\nReturns the number of bytes read. The number of bytes read may\nbe less than the number requested, even 0. Returns `Err` on EOF.",394],[11,"read_at_least","","Reads at least `min` bytes and places them in `buf`.\nReturns the number of bytes read.",394],[11,"read_byte","","Reads a single byte. Returns `Err` on EOF.",394],[11,"push","","Reads up to `len` bytes and appends them to a vector.\nReturns the number of bytes read. The number of bytes read may be\nless than the number requested, even 0. Returns Err on EOF.",394],[11,"push_at_least","","Reads at least `min` bytes, but no more than `len`, and appends them to\na vector.\nReturns the number of bytes read.",394],[11,"read_exact","","Reads exactly `len` bytes and gives you back a new vector of length\n`len`",394],[11,"read_to_end","","Reads all remaining bytes from the stream.",394],[11,"read_to_string","","Reads all of the remaining bytes of this stream, interpreting them as a\nUTF-8 encoded stream. The corresponding string is returned.",394],[11,"read_le_uint_n","","Reads `n` little-endian unsigned integer bytes.",394],[11,"read_le_int_n","","Reads `n` little-endian signed integer bytes.",394],[11,"read_be_uint_n","","Reads `n` big-endian unsigned integer bytes.",394],[11,"read_be_int_n","","Reads `n` big-endian signed integer bytes.",394],[11,"read_le_uint","","Reads a little-endian unsigned integer.",394],[11,"read_le_int","","Reads a little-endian integer.",394],[11,"read_be_uint","","Reads a big-endian unsigned integer.",394],[11,"read_be_int","","Reads a big-endian integer.",394],[11,"read_be_u64","","Reads a big-endian `u64`.",394],[11,"read_be_u32","","Reads a big-endian `u32`.",394],[11,"read_be_u16","","Reads a big-endian `u16`.",394],[11,"read_be_i64","","Reads a big-endian `i64`.",394],[11,"read_be_i32","","Reads a big-endian `i32`.",394],[11,"read_be_i16","","Reads a big-endian `i16`.",394],[11,"read_be_f64","","Reads a big-endian `f64`.",394],[11,"read_be_f32","","Reads a big-endian `f32`.",394],[11,"read_le_u64","","Reads a little-endian `u64`.",394],[11,"read_le_u32","","Reads a little-endian `u32`.",394],[11,"read_le_u16","","Reads a little-endian `u16`.",394],[11,"read_le_i64","","Reads a little-endian `i64`.",394],[11,"read_le_i32","","Reads a little-endian `i32`.",394],[11,"read_le_i16","","Reads a little-endian `i16`.",394],[11,"read_le_f64","","Reads a little-endian `f64`.",394],[11,"read_le_f32","","Reads a little-endian `f32`.",394],[11,"read_u8","","Read a u8.",394],[11,"read_i8","","Read an i8.",394],[8,"ByRefReader","","A reader which can be converted to a RefReader."],[10,"by_ref","","Creates a wrapper around a mutable reference to the reader.",395],[8,"BytesReader","","A reader which can be converted to bytes."],[10,"bytes","","Create an iterator that reads a single byte on\neach iteration, until EOF.",396],[8,"Writer","","A trait for objects which are byte-oriented streams. Writers are defined by\none method, `write`. This function will block until the provided buffer of\nbytes has been entirely written, and it will return any failures which occur."],[10,"write_all","","Write the entirety of a given buffer",397],[11,"write","","Deprecated, this method was renamed to `write_all`",397],[11,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",397],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",397],[11,"write_str","","Write a rust string into this sink.",397],[11,"write_line","","Writes a string into this sink, and then writes a literal newline (`\\n`)\nbyte afterwards. Note that the writing of the newline is *not* atomic in\nthe sense that the call to `write` is invoked twice (once with the\nstring and once with a newline character).",397],[11,"write_char","","Write a single char, encoded as UTF-8.",397],[11,"write_int","","Write the result of passing n through `int::to_str_bytes`.",397],[11,"write_uint","","Write the result of passing n through `uint::to_str_bytes`.",397],[11,"write_le_uint","","Write a little-endian uint (number of bytes depends on system).",397],[11,"write_le_int","","Write a little-endian int (number of bytes depends on system).",397],[11,"write_be_uint","","Write a big-endian uint (number of bytes depends on system).",397],[11,"write_be_int","","Write a big-endian int (number of bytes depends on system).",397],[11,"write_be_u64","","Write a big-endian u64 (8 bytes).",397],[11,"write_be_u32","","Write a big-endian u32 (4 bytes).",397],[11,"write_be_u16","","Write a big-endian u16 (2 bytes).",397],[11,"write_be_i64","","Write a big-endian i64 (8 bytes).",397],[11,"write_be_i32","","Write a big-endian i32 (4 bytes).",397],[11,"write_be_i16","","Write a big-endian i16 (2 bytes).",397],[11,"write_be_f64","","Write a big-endian IEEE754 double-precision floating-point (8 bytes).",397],[11,"write_be_f32","","Write a big-endian IEEE754 single-precision floating-point (4 bytes).",397],[11,"write_le_u64","","Write a little-endian u64 (8 bytes).",397],[11,"write_le_u32","","Write a little-endian u32 (4 bytes).",397],[11,"write_le_u16","","Write a little-endian u16 (2 bytes).",397],[11,"write_le_i64","","Write a little-endian i64 (8 bytes).",397],[11,"write_le_i32","","Write a little-endian i32 (4 bytes).",397],[11,"write_le_i16","","Write a little-endian i16 (2 bytes).",397],[11,"write_le_f64","","Write a little-endian IEEE754 double-precision floating-point\n(8 bytes).",397],[11,"write_le_f32","","Write a little-endian IEEE754 single-precision floating-point\n(4 bytes).",397],[11,"write_u8","","Write a u8 (1 byte).",397],[11,"write_i8","","Write an i8 (1 byte).",397],[8,"ByRefWriter","","A writer which can be converted to a RefWriter."],[10,"by_ref","","Creates a wrapper around a mutable reference to the writer.",398],[8,"Stream","","A Stream is a readable and a writable object. Data written is typically\nreceived by the object which reads receive data from."],[8,"Buffer","","A Buffer is a type of reader which has some form of internal buffering to\nallow certain kinds of reading operations to be more optimized than others.\nThis type extends the `Reader` trait with a few methods that are not\npossible to reasonably implement with purely a read interface."],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.\nNote that none of the contents will be \"read\" in the sense that later\ncalling `read` may return the same contents.",399],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",399],[11,"read_line","","Reads the next line of input, interpreted as a sequence of UTF-8\nencoded Unicode codepoints. If a newline is encountered, then the\nnewline is contained in the returned string.",399],[11,"read_until","","Reads a sequence of bytes leading up to a specified delimiter. Once the\nspecified byte is encountered, reading ceases and the bytes up to and\nincluding the delimiter are returned.",399],[11,"read_char","","Reads the next utf8-encoded character from the underlying stream.",399],[8,"BufferPrelude","","Extension methods for the Buffer trait which are included in the prelude."],[10,"chars","","Create an iterator that reads a utf8-encoded character on each iteration\nuntil EOF.",400],[10,"lines","","Create an iterator that reads a line on each iteration until EOF.",400],[8,"Seek","","An object implementing `Seek` internally has some form of cursor which can\nbe moved within a stream of bytes. The stream typically has a fixed size,\nallowing seeking relative to either end."],[10,"tell","","Return position of file cursor in the stream",401],[10,"seek","","Seek to an offset in a stream",401],[8,"Listener","","A listener is a value that can consume itself to start listening for\nconnections."],[10,"listen","","Spin up the listener and start queuing incoming connections",402],[8,"Acceptor","","An acceptor is a value that presents incoming connections"],[10,"accept","","Wait for and accept an incoming connection",403],[11,"incoming","","Create an iterator over incoming connection attempts.",403],[11,"fmt","","",335],[11,"clone","","",335],[11,"eq","","",335],[11,"ne","","",335],[11,"from_errno","","Convert an `errno` value into an `IoError`.",335],[11,"last_error","","Retrieve the last error to occur as a (detailed) IoError.",335],[11,"fmt","","",335],[11,"description","","",335],[11,"fmt","","",338],[11,"clone","","",338],[11,"eq","","",338],[11,"ne","","",338],[11,"read","std::boxed","",176],[11,"read","std::old_io","",404],[11,"fill_buf","","",404],[11,"consume","","",404],[11,"write_all","std::boxed","",176],[11,"flush","","",176],[11,"write_all","std::old_io","",405],[11,"flush","","",405],[6,"Item","",""],[11,"next","","",406],[6,"Item","",""],[11,"next","","",407],[6,"Item","",""],[11,"next","","",408],[11,"fmt","","",340],[11,"eq","","",340],[11,"ne","","",340],[11,"clone","","",340],[11,"fmt","","",341],[11,"eq","","",341],[11,"ne","","",341],[11,"clone","","",341],[11,"clone","","",342],[11,"hash","","",342],[11,"fmt","","",342],[11,"eq","","",342],[11,"ne","","",342],[11,"hash","","",336],[11,"hash","","",337],[11,"hash","","",409],[11,"cmp","","",409],[11,"partial_cmp","","",409],[11,"lt","","",409],[11,"le","","",409],[11,"gt","","",409],[11,"ge","","",409],[11,"clone","","",409],[11,"eq","","",409],[11,"ne","","",409],[11,"fmt","","",409],[11,"empty","","Returns an empty set of flags.",409],[11,"all","","Returns the set containing all flags.",409],[11,"bits","","Returns the raw value of the flags currently stored.",409],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",409],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",409],[11,"is_empty","","Returns `true` if no flags are currently stored.",409],[11,"is_all","","Returns `true` if all flags are currently set.",409],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",409],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",409],[11,"insert","","Inserts the specified flags in-place.",409],[11,"remove","","Removes the specified flags in-place.",409],[11,"toggle","","Toggles the specified flags in-place.",409],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",409],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",409],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",409],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",409],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",409],[11,"default","","",409],[11,"fmt","","",409],[0,"io","std","Traits, helpers, and type definitions for core I/O functionality."],[3,"BufReader","std::io","Wraps a `Read` and buffers input from it"],[3,"BufWriter","","Wraps a Writer and buffers output to it"],[3,"BufStream","","Wraps a Stream and buffers input and output to and from it."],[3,"LineWriter","","Wraps a Writer and buffers output to it, flushing whenever a newline\n(`0x0a`, `'\\n'`) is detected."],[3,"IntoInnerError","","An error returned by `into_inner` which indicates whether a flush error\nhappened or not."],[3,"Cursor","","A `Cursor` is a type which wraps another I/O object to provide a `Seek`\nimplementation."],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits."],[3,"Sink","","A writer which will move data into the void."],[3,"Empty","","A reader which is always at EOF."],[3,"Repeat","","A reader which infinitely yields one byte."],[3,"Stdin","","A handle to the standard input stream of a process."],[3,"Stdout","","A handle to the global standard output stream of the current process."],[3,"Stderr","","A handle to the standard error stream of a process."],[3,"StdoutLock","","A locked reference to the a `Stdout` handle."],[3,"StderrLock","","A locked reference to the a `Stderr` handle."],[3,"StdinLock","","A locked reference to the a `Stdin` handle."],[3,"Broadcast","","A `Write` adaptor which will write data to multiple locations."],[3,"Chain","","Adaptor to chain together two instances of `Read`."],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader."],[3,"Tee","","An adaptor which will emit all read data to a specified writer as well."],[3,"Bytes","","A bridge from implementations of `Read` to an `Iterator` of `u8`."],[3,"Chars","","A bridge from implementations of `Read` to an `Iterator` of `char`."],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a\nparticular byte."],[3,"Lines","","An iterator over the lines of an instance of `BufRead` split on a newline\nbyte."],[4,"ErrorKind","","A list specifying general categories of I/O error."],[13,"FileNotFound","","The file was not found.",410],[13,"PermissionDenied","","The file permissions disallowed access to this file.",410],[13,"ConnectionRefused","","The connection was refused by the remote server.",410],[13,"ConnectionReset","","The connection was reset by the remote server.",410],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",410],[13,"NotConnected","","The network operation failed because it was not connected yet.",410],[13,"BrokenPipe","","The operation failed because a pipe was closed.",410],[13,"PathAlreadyExists","","A file already existed with that name.",410],[13,"PathDoesntExist","","No file exists at that location.",410],[13,"MismatchedFileTypeForOperation","","The path did not specify the type of file that this operation required.\nFor example, attempting to copy a directory with the `fs::copy()`\noperation will fail with this error.",410],[13,"ResourceUnavailable","","The operation temporarily failed (for example, because a signal was\nreceived), and retrying may succeed.",410],[13,"InvalidInput","","A parameter was incorrect in a way that caused an I/O error not part of\nthis list.",410],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",410],[13,"WriteZero","","An error returned when an operation could not be completed because a\ncall to `write` returned `Ok(0)`.",410],[13,"Interrupted","","This operation was interrupted",410],[13,"Other","","Any I/O error not part of this list.",410],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object."],[13,"Start","","Set the offset to the provided number of bytes.",411],[13,"End","","Set the offset to the size of this object plus the specified number of\nbytes.",411],[13,"Current","","Set the offset to the current position plus the specified number of\nbytes.",411],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars`\nadapter."],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully\nbut it did not contain valid utf8 data.",412],[13,"Other","","Variant representing that an I/O error occurred.",412],[5,"copy","","Copies the entire contents of a reader into a writer."],[5,"sink","","Creates an instance of a writer which will successfully consume all data."],[5,"empty","","Creates an instance of an empty reader."],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte."],[5,"stdin","","Create a new handle to the global standard input stream of this process."],[5,"stdout","","Constructs a new reference to the standard output of the current process."],[5,"stderr","","Constructs a new reference to the standard error stream of a process."],[0,"prelude","","The I/O Prelude"],[11,"new","","Creates a new `BufReader` with a default buffer capacity",413],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity",413],[11,"get_ref","","Gets a reference to the underlying reader.",413],[11,"get_mut","","Gets a mutable reference to the underlying reader.",413],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",413],[11,"read","","",413],[11,"fill_buf","","",413],[11,"consume","","",413],[11,"fmt","","",413],[11,"fmt","","",414],[11,"new","","Creates a new `BufWriter` with a default buffer capacity",415],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity",415],[11,"get_ref","","Gets a reference to the underlying writer.",415],[11,"get_mut","","Gets a mutable reference to the underlying write.",415],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",415],[11,"write","","",415],[11,"flush","","",415],[11,"fmt","","",415],[11,"drop","","",415],[11,"error","","Returns the error which caused the call to `into_inner` to fail.",414],[11,"into_inner","","Returns the underlying `BufWriter` instance which generated the error.",414],[11,"from_error","","",416],[11,"description","","",414],[11,"fmt","","",414],[11,"new","","Creates a new `LineWriter`",417],[11,"get_ref","","Gets a reference to the underlying writer.",417],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",417],[11,"write","","",417],[11,"flush","","",417],[11,"fmt","","",417],[11,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",418],[11,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",418],[11,"get_ref","","Gets a reference to the underlying stream.",418],[11,"get_mut","","Gets a mutable reference to the underlying stream.",418],[11,"into_inner","","Unwraps this `BufStream`, returning the underlying stream.",418],[11,"fill_buf","","",418],[11,"consume","","",418],[11,"read","","",418],[11,"write","","",418],[11,"flush","","",418],[11,"fmt","","",418],[11,"new","","Create a new cursor wrapping the provided underlying I/O object.",419],[11,"into_inner","","Consume this cursor, returning the underlying value.",419],[11,"get_ref","","Get a reference to the underlying value in this cursor.",419],[11,"get_mut","","Get a mutable reference to the underlying value in this cursor.",419],[11,"position","","Returns the current value of this cursor",419],[11,"set_position","","Sets the value of this cursor",419],[11,"seek","","",419],[11,"seek","","",419],[11,"seek","","",419],[11,"read","","",419],[11,"read","","",419],[11,"read","","",419],[11,"fill_buf","","",419],[11,"consume","","",419],[11,"fill_buf","","",419],[11,"consume","","",419],[11,"fill_buf","","",419],[11,"consume","","",419],[11,"write","","",419],[11,"flush","","",419],[11,"write","","",419],[11,"flush","","",419],[11,"fmt","","",416],[11,"clone","","",416],[11,"eq","","",416],[11,"ne","","",416],[11,"fmt","","",410],[11,"clone","","",410],[11,"eq","","",410],[11,"ne","","",410],[11,"new","","Creates a new custom error from a specified kind/description/detail.",416],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",416],[11,"from_os_error","","Creates a new instance of an `Error` from a particular OS error code.",416],[11,"kind","","Return the corresponding `ErrorKind` for this error.",416],[11,"description","","Returns a short description for this error message",416],[11,"detail","","Returns a detailed error message for this error (if one is available)",416],[11,"fmt","","",416],[11,"description","","",416],[11,"read","std::boxed","",176],[11,"read_to_end","","",176],[11,"read_to_string","","",176],[11,"write","","",176],[11,"flush","","",176],[11,"write_all","","",176],[11,"write_fmt","","",176],[11,"seek","","",176],[11,"fill_buf","","",176],[11,"consume","","",176],[11,"read_until","","",176],[11,"read_line","","",176],[11,"write","std::vec","",239],[11,"write_all","","",239],[11,"flush","","",239],[11,"read","std::io","",420],[11,"fill_buf","","",420],[11,"consume","","",420],[11,"read","","",421],[11,"write","","",422],[11,"flush","","",422],[11,"lock","","Lock this handle to the standard input stream, returning a readable\nguard.",423],[11,"read","","",423],[11,"read_to_end","","",423],[11,"read_to_string","","",423],[11,"read","","",424],[11,"fill_buf","","",424],[11,"consume","","",424],[11,"lock","","Lock this handle to the standard output stream, returning a writable\nguard.",425],[11,"write","","",425],[11,"flush","","",425],[11,"write_all","","",425],[11,"write_fmt","","",425],[11,"write","","",426],[11,"flush","","",426],[11,"lock","","Lock this handle to the standard error stream, returning a writable\nguard.",427],[11,"write","","",427],[11,"flush","","",427],[11,"write_all","","",427],[11,"write_fmt","","",427],[11,"write","","",428],[11,"flush","","",428],[6,"Result","","A type for results generated by I/O related functions where the `Err` type\nis hard-wired to `io::Error`."],[8,"Read","","A trait for objects which are byte-oriented sources."],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",429],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",429],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",429],[8,"ReadExt","","Extension methods for all instances of `Read`, typically imported through\n`std::io::prelude::*`."],[11,"by_ref","","Create a \"by reference\" adaptor for this instance of `Read`.",430],[11,"bytes","","Transform this `Read` instance to an `Iterator` over its bytes.",430],[11,"chars","","Transform this `Read` instance to an `Iterator` over `char`s.",430],[11,"chain","","Create an adaptor which will chain this stream with another.",430],[11,"take","","Create an adaptor which will read at most `limit` bytes from it.",430],[11,"tee","","Creates a reader adaptor which will write all read data into the given\noutput stream.",430],[8,"Write","","A trait for objects which are byte-oriented sinks."],[10,"write","","Write a buffer into this object, returning how many bytes were written.",431],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",431],[11,"write_all","","Attempts to write an entire buffer into this write.",431],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",431],[8,"WriteExt","","Extension methods for all instances of `Write`, typically imported through\n`std::io::prelude::*`."],[11,"by_ref","","Create a \"by reference\" adaptor for this instance of `Write`.",432],[11,"broadcast","","Creates a new writer which will write all data to both this writer and\nanother writer.",432],[8,"Seek","","An object implementing `Seek` internally has some form of cursor which can\nbe moved within a stream of bytes."],[10,"seek","","Seek to an offset, in bytes, in a stream",433],[8,"BufRead","","A Buffer is a type of reader which has some form of internal buffering to\nallow certain kinds of reading operations to be more optimized than others."],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",434],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",434],[11,"read_until","","Read all bytes until the delimiter `byte` is reached.",434],[11,"read_line","","Read all bytes until a newline byte (the 0xA byte) is reached.",434],[8,"BufReadExt","","Extension methods for all instances of `BufRead`, typically imported through\n`std::io::prelude::*`."],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",435],[11,"lines","","Returns an iterator over the lines of this reader.",435],[11,"fmt","","",411],[11,"clone","","",411],[11,"eq","","",411],[11,"ne","","",411],[11,"write","","",436],[11,"flush","","",436],[11,"read","","",437],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",438],[11,"read","","",438],[11,"fill_buf","","",438],[11,"consume","","",438],[11,"read","","",439],[6,"Item","",""],[11,"next","","",440],[11,"fmt","","",412],[11,"clone","","",412],[11,"eq","","",412],[11,"ne","","",412],[6,"Item","",""],[11,"next","","",441],[11,"description","","",412],[11,"cause","","",412],[11,"fmt","","",412],[6,"Item","",""],[11,"next","","",442],[6,"Item","",""],[11,"next","","",443],[0,"fs","std","Filesystem manipulation operations"],[3,"TempDir","std::fs","A wrapper for a path to temporary directory implementing automatic\nscope-based deletion."],[3,"File","","A reference to an open file on the filesystem."],[3,"Metadata","","Metadata information about a file."],[3,"ReadDir","","Iterator over the entries in a directory."],[3,"DirEntry","","Entries returned by the `ReadDir` iterator."],[3,"WalkDir","","An iterator that recursively walks over the contents of a directory."],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened."],[3,"Permissions","","Representation of the various permissions on a file."],[5,"remove_file","","Remove a file from the underlying filesystem."],[5,"metadata","","Given a path, query the file system to get information about a file,\ndirectory, etc."],[5,"rename","","Rename a file or directory to a new name."],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file."],[5,"hard_link","","Creates a new hard link on the filesystem."],[5,"soft_link","","Creates a new soft link on the filesystem."],[5,"read_link","","Reads a soft link, returning the file that the link points to."],[5,"create_dir","","Create a new, empty directory at the provided path"],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they\nare missing."],[5,"remove_dir","","Remove an existing, empty directory"],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use\ncarefully!"],[5,"read_dir","","Returns an iterator over the entries within a directory."],[5,"walk_dir","","Returns an iterator that will recursively walk the directory structure\nrooted at `path`."],[5,"set_file_times","","Changes the timestamps for a file's last modification and access time."],[5,"set_permissions","","Changes the permissions found on a file or a directory."],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",444],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",444],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",444],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",444],[11,"close","","Close and remove the temporary directory",444],[11,"drop","","",444],[8,"PathExt","","Utility methods for paths."],[10,"metadata","","Get information on the file, directory, etc at this path.",445],[10,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::stat` fails.",445],[10,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",445],[10,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",445],[11,"clone","","",446],[11,"fmt","","",447],[11,"eq","","",447],[11,"ne","","",447],[11,"clone","","",447],[11,"open","","Attempts to open a file in read-only mode.",448],[11,"create","","Open a file in write-only mode.",448],[11,"path","","Returns the original path that was used to open this file.",448],[11,"sync_all","","Attempt to sync all OS-internal metadata to disk.",448],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",448],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",448],[11,"metadata","","Queries metadata about the underlying file.",448],[11,"read","","",448],[11,"write","","",448],[11,"flush","","",448],[11,"seek","","",448],[11,"new","","Creates a blank net set of options ready for configuration.",446],[11,"read","","Set the option for read access.",446],[11,"write","","Set the option for write access.",446],[11,"append","","Set the option for the append mode.",446],[11,"truncate","","Set the option for truncating a previous file.",446],[11,"create","","Set the option for creating a new file.",446],[11,"open","","Open a file at `path` with the options specified by `self`.",446],[11,"is_dir","","Returns whether this metadata is for a directory.",449],[11,"is_file","","Returns whether this metadata is for a regular file.",449],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",449],[11,"permissions","","Returns the permissions of the file this metadata is for.",449],[11,"accessed","","Returns the most recent access time for a file.",449],[11,"modified","","Returns the most recent modification time for a file.",449],[11,"readonly","","Returns whether these permissions describe a readonly file.",447],[11,"set_readonly","","Modify the readonly flag for this set of permissions.",447],[6,"Item","",""],[11,"next","","",450],[11,"path","","Returns the full path to the file that this entry represents.",451],[6,"Item","",""],[11,"next","","",452],[0,"net","std","Networking primitives for TCP/UDP communication"],[3,"Ipv4Addr","std::net","Representation of an IPv4 address."],[3,"Ipv6Addr","","Representation of an IPv6 address."],[3,"SocketAddr","","Representation of a socket address for networking applications"],[3,"TcpStream","","A structure which represents a TCP stream between a local socket and a\nremote socket."],[3,"TcpListener","","A structure representing a socket server."],[3,"UdpSocket","","A User Datagram Protocol socket."],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation."],[4,"IpAddr","","Enumeration of possible IP addresses"],[13,"V4","","An IPv4 address.",453],[13,"V6","","An IPv6 address.",453],[4,"Ipv6MulticastScope","",""],[13,"InterfaceLocal","","",454],[13,"LinkLocal","","",454],[13,"RealmLocal","","",454],[13,"AdminLocal","","",454],[13,"SiteLocal","","",454],[13,"OrganizationLocal","","",454],[13,"Global","","",454],[4,"Shutdown","","Possible values which can be passed to the `shutdown` method of `TcpStream`\nand `UdpSocket`."],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",455],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",455],[13,"Both","","Shut down both the reading and writing portions of this stream.",455],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances."],[11,"fmt","","",454],[11,"hash","","",454],[11,"clone","","",454],[11,"eq","","",454],[11,"ne","","",454],[11,"fmt","","",453],[11,"hash","","",453],[11,"clone","","",453],[11,"eq","","",453],[11,"ne","","",453],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",453],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",453],[11,"fmt","","",453],[11,"new","","Create a new IPv4 address from four eight-bit octets.",456],[11,"octets","","Returns the four eight-bit integers that make up this address",456],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0",456],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8)",456],[11,"is_private","","Returns true if this is a private address.",456],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16)",456],[11,"is_global","","Returns true if the address appears to be globally routable.",456],[11,"is_multicast","","Returns true if this is a multicast address.",456],[11,"to_ipv6_compatible","","Convert this address to an IPv4-compatible IPv6 address",456],[11,"to_ipv6_mapped","","Convert this address to an IPv4-mapped IPv6 address",456],[11,"fmt","","",456],[11,"fmt","","",456],[11,"clone","","",456],[11,"eq","","",456],[11,"hash","","",456],[11,"partial_cmp","","",456],[11,"cmp","","",456],[11,"new","","Create a new IPv6 address from eight 16-bit segments.",457],[11,"segments","","Return the eight 16-bit segments that make up this address",457],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::",457],[11,"is_loopback","","Returns true if this is a loopback address (::1)",457],[11,"is_global","","Returns true if the address appears to be globally routable.",457],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6)",457],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10)",457],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10)",457],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address",457],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",457],[11,"is_multicast","","Returns true if this is a multicast address.",457],[11,"to_ipv4","","Convert this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",457],[11,"fmt","","",457],[11,"fmt","","",457],[11,"clone","","",457],[11,"eq","","",457],[11,"hash","","",457],[11,"partial_cmp","","",457],[11,"cmp","","",457],[11,"hash","","",458],[11,"eq","","",458],[11,"ne","","",458],[11,"clone","","",458],[11,"new","","Creates a new socket address from the (ip, port) pair.",458],[11,"ip","","Gets the IP address associated with this socket address.",458],[11,"port","","Gets the port number associated with this socket address",458],[11,"fmt","","",458],[11,"fmt","","",458],[11,"to_socket_addrs","","",458],[11,"connect","","Open a TCP connection to a remote host.",459],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",459],[11,"socket_addr","","Returns the socket address of the local half of this TCP connection.",459],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",459],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",459],[11,"set_nodelay","","Sets the nodelay flag on this connection to the boolean specified",459],[11,"set_keepalive","","Sets the keepalive timeout to the timeout specified.",459],[11,"read","","",459],[11,"write","","",459],[11,"flush","","",459],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",460],[11,"socket_addr","","Returns the local socket address of this listener.",460],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",460],[11,"accept","","Accept a new incoming connection from this listener.",460],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",460],[11,"bind","","Creates a UDP socket from the given address.",461],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",461],[11,"send_to","","Sends data on the socket to the given address. Returns nothing on\nsuccess.",461],[11,"socket_addr","","Returns the socket address that this socket was created from.",461],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",461],[11,"set_broadcast","","Sets the broadcast flag on or off",461],[11,"set_multicast_loop","","Set the multicast loop flag to the specified value",461],[11,"join_multicast","","Joins a multicast IP address (becomes a member of it)",461],[11,"leave_multicast","","Leaves a multicast IP address (drops membership from it)",461],[11,"set_multicast_time_to_live","","Sets the multicast TTL",461],[11,"set_time_to_live","","Sets this socket's TTL",461],[11,"from_str","","",453],[11,"from_str","","",456],[11,"from_str","","",457],[11,"from_str","","",458],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more\n`SocketAddr` values."],[16,"Iter","std::net::ToSocketAddrs","Returned iterator over socket addresses which this type may correspond\nto."],[10,"to_socket_addrs","std::net","Converts this object to an iterator of resolved `SocketAddr`s.",462],[11,"eq","","",455],[11,"ne","","",455],[11,"clone","","",455],[6,"Item","",""],[11,"next","","",463],[0,"os","std","Higher-level interfaces to libc::* functions and operating system services."],[3,"Pipe","std::os","A low-level OS in-memory pipe."],[12,"reader","","A file descriptor representing the reading end of the pipe. Data written\non the `out` file descriptor can be read from this file descriptor.",464],[12,"writer","","A file descriptor representing the write end of the pipe. Data written\nto this file descriptor can be read from the `input` file descriptor.",464],[3,"MemoryMap","","A memory mapped file or chunk of memory. This is a very system-specific\ninterface to the OS's memory mapping facilities (`mmap` on POSIX,\n`VirtualAlloc`/`CreateFileMapping` on Windows). It makes no attempt at\nabstracting platform differences, besides in error values returned. Consider\nyourself warned."],[4,"MemoryMapKind","","Type of memory map"],[13,"MapFile","","Virtual memory map. Usually used to change the permissions of a given\nchunk of memory.  Corresponds to `VirtualAlloc` on Windows.",465],[13,"MapVirtual","","Virtual memory map. Usually used to change the permissions of a given\nchunk of memory, or for allocation. Corresponds to `VirtualAlloc` on\nWindows.",465],[4,"MapOption","","Options the memory map is created with"],[13,"MapReadable","","The memory should be readable",466],[13,"MapWritable","","The memory should be writable",466],[13,"MapExecutable","","The memory should be executable",466],[13,"MapAddr","","Create a map for a specific address range. Corresponds to `MAP_FIXED` on\nPOSIX.",466],[13,"MapFd","","Create a memory mapping for a file with a given fd.",466],[13,"MapOffset","","When using `MapFd`, the start of the map is `uint` bytes from the start\nof the file.",466],[13,"MapNonStandardFlags","","On POSIX, this can be used to specify the default flags passed to\n`mmap`. By default it uses `MAP_PRIVATE` and, if not using `MapFd`,\n`MAP_ANON`. This will override both of those. This is platform-specific\n(the exact values used) and ignored on Windows.",466],[4,"MapError","","Possible errors when creating a map."],[13,"ErrFdNotAvail","","# The following are POSIX-specific",467],[13,"ErrInvalidFd","","fd was not valid",467],[13,"ErrUnaligned","","Either the address given by `MapAddr` or offset given by `MapOffset` was\nnot a multiple of `MemoryMap::granularity` (unaligned to page size).",467],[13,"ErrNoMapSupport","","With `MapFd`, the fd does not support mapping.",467],[13,"ErrNoMem","","If using `MapAddr`, the address + `min_len` was outside of the process's\naddress space. If using `MapFd`, the target of the fd didn't have enough\nresources to fulfill the request.",467],[13,"ErrZeroLength","","A zero-length map was requested. This is invalid according to\n[POSIX](http://pubs.opengroup.org/onlinepubs/9699919799/functions/mmap.html).\nNot all platforms obey this, but this wrapper does.",467],[13,"ErrUnknown","","Unrecognized error. The inner value is the unrecognized errno.",467],[13,"ErrUnsupProt","","# The following are Windows-specific",467],[13,"ErrUnsupOffset","","When using `MapFd`, `MapOffset` was given (Windows does not support this\nat all)",467],[13,"ErrAlreadyExists","","When using `MapFd`, there was already a mapping to the file.",467],[13,"ErrVirtualAlloc","","Unrecognized error from `VirtualAlloc`. The inner value is the return\nvalue of GetLastError.",467],[13,"ErrCreateFileMappingW","","Unrecognized error from `CreateFileMapping`. The inner value is the\nreturn value of `GetLastError`.",467],[13,"ErrMapViewOfFile","","Unrecognized error from `MapViewOfFile`. The inner value is the return\nvalue of `GetLastError`.",467],[5,"num_cpus","","Get the number of cores available"],[5,"getcwd","","Returns the current working directory as a `Path`."],[5,"env","","Returns a vector of (variable, value) pairs, for all the environment\nvariables of the current process."],[5,"env_as_bytes","","Returns a vector of (variable, value) byte-vector pairs for all the\nenvironment variables of the current process."],[5,"getenv","","Fetches the environment variable `n` from the current process, returning\nNone if the variable isn't set."],[5,"getenv_as_bytes","","Fetches the environment variable `n` byte vector from the current process,\nreturning None if the variable isn't set."],[5,"setenv","","Sets the environment variable `n` to the value `v` for the currently running\nprocess."],[5,"unsetenv","","Remove a variable from the environment entirely."],[5,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable."],[5,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable."],[5,"pipe","","Creates a new low-level OS in-memory pipe."],[5,"dll_filename","","Returns the proper dll filename for the given basename of a file\nas a String."],[5,"self_exe_name","","Optionally returns the filesystem path to the current executable which is\nrunning but with the executable name."],[5,"self_exe_path","","Optionally returns the filesystem path to the current executable which is\nrunning."],[5,"homedir","","Optionally returns the path to the current user's home directory if known."],[5,"tmpdir","","Returns the path to a temporary directory."],[5,"make_absolute","","Convert a relative path to an absolute path"],[5,"change_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not."],[5,"errno","","Returns the platform-specific value of errno"],[5,"error_string","","Return the string corresponding to an `errno()` value of `errnum`."],[5,"last_os_error","","Get a string representing the platform-dependent last error"],[5,"set_exit_status","","Sets the process exit code"],[5,"get_exit_status","","Fetches the process's current exit code. This defaults to 0 and can change\nby calling `set_exit_status`."],[5,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line)."],[5,"args_as_bytes","","Returns the arguments which this program was started with (normally passed\nvia the command line) as byte vectors."],[5,"page_size","","Returns the page size of the current architecture in bytes."],[0,"unix","","Experimental extensions to `std` for Unix platforms."],[0,"prelude","std::os::unix","A prelude for conveniently writing platform-specific code."],[6,"Fd","std::os::unix::prelude","Raw file descriptors."],[8,"AsRawFd","","Extract raw file descriptor"],[10,"as_raw_fd","","Extract the raw file descriptor, without taking any ownership.",468],[8,"OsStrExt","","Unix-specific extensions to `OsStr`."],[10,"from_bytes","","",469],[10,"as_bytes","","Get the underlying byte view of the `OsStr` slice.",469],[10,"to_cstring","","Convert the `OsStr` slice into a `CString`.",469],[8,"OsStringExt","","Unix-specific extensions to `OsString`."],[10,"from_vec","","Create an `OsString` from a byte vector.",470],[10,"into_vec","","Yield the underlying byte vector of this `OsString`.",470],[8,"PermissionsExt","",""],[10,"mode","","",471],[10,"set_mode","","",471],[8,"CommandExt","","Unix-specific extensions to the `std::process::Command` builder"],[10,"uid","","Sets the child process's user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",472],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",472],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`"],[10,"signal","","If the process was terminated by a signal, returns that signal.",473],[6,"Fd","std::os::unix","Raw file descriptors."],[8,"AsRawFd","","Extract raw file descriptor"],[10,"as_raw_fd","","Extract the raw file descriptor, without taking any ownership.",468],[8,"OsStringExt","","Unix-specific extensions to `OsString`."],[10,"from_vec","","Create an `OsString` from a byte vector.",470],[10,"into_vec","","Yield the underlying byte vector of this `OsString`.",470],[8,"OsStrExt","","Unix-specific extensions to `OsStr`."],[10,"from_bytes","","",469],[10,"as_bytes","","Get the underlying byte view of the `OsStr` slice.",469],[10,"to_cstring","","Convert the `OsStr` slice into a `CString`.",469],[8,"PermissionsExt","",""],[10,"mode","","",471],[10,"set_mode","","",471],[8,"OpenOptionsExt","",""],[10,"mode","","Set the mode bits that a new file will be created with.",474],[8,"CommandExt","","Unix-specific extensions to the `std::process::Command` builder"],[10,"uid","","Sets the child process's user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",472],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",472],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`"],[10,"signal","","If the process was terminated by a signal, returns that signal.",473],[11,"as_raw_fd","std::old_io::fs","",356],[11,"as_raw_fd","std::fs","",448],[11,"as_raw_fd","std::old_io::pipe","",375],[11,"as_raw_fd","std::old_io::net::pipe","",371],[11,"as_raw_fd","","",372],[11,"as_raw_fd","","",373],[11,"as_raw_fd","std::old_io::net::tcp","",363],[11,"as_raw_fd","","",364],[11,"as_raw_fd","","",365],[11,"as_raw_fd","std::old_io::net::udp","",366],[11,"as_raw_fd","std::net","",459],[11,"as_raw_fd","","",460],[11,"as_raw_fd","","",461],[11,"from_vec","std::ffi","",331],[11,"into_vec","","",331],[11,"from_bytes","","",332],[11,"as_bytes","","",332],[11,"to_cstring","","",332],[11,"mode","std::fs","",447],[11,"set_mode","","",447],[11,"mode","","",446],[0,"consts","std::os",""],[17,"ARCH","std::os::consts",""],[17,"FAMILY","",""],[17,"SYSNAME","","A string describing the specific operating system in use: in this\ncase, `linux`."],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform: in this case, `lib`."],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform: in this case, `.so`."],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot: in this case, `so`."],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform: in this case, the empty string."],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform: in this case, the empty string."],[17,"TMPBUF_SZ","std::os",""],[11,"fmt","","",467],[11,"fmt","","",467],[11,"description","","",467],[11,"new","","Create a new mapping with the given `options`, at least `min_len` bytes\nlong. `min_len` must be greater than zero; see the note on\n`ErrZeroLength`.",475],[11,"granularity","","Granularity that the offset or address must be for `MapOffset` and\n`MapAddr` respectively.",475],[11,"drop","","Unmap the mapping. Panics the task if `munmap` panics.",475],[11,"data","","Returns the pointer to the memory created or modified by this map.",475],[11,"len","","Returns the number of bytes this map applies to.",475],[11,"kind","","Returns the type of mapping this represents.",475],[0,"env","std","Inspection and manipulation of the process's environment."],[3,"Vars","std::env","An iterator over a snapshot of the environment variables of this process."],[3,"VarsOs","","An iterator over a snapshot of the environment variables of this process."],[3,"SplitPaths","","An iterator over `Path` instances for parsing an environment variable\naccording to platform-specific conventions."],[3,"JoinPathsError","","Error type returned from `std::env::join_paths` when paths fail to be\njoined."],[3,"Args","","An iterator over the arguments of a process, yielding an `String` value\nfor each argument."],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an `OsString` value\nfor each argument."],[4,"VarError","","Possible errors from the `env::var` method."],[13,"NotPresent","","The specified environment variable was not present in the current\nprocess's environment.",476],[13,"NotUnicode","","The specified environment variable was found, but it did not contain\nvalid unicode data. The found data is returned as a payload of this\nvariant.",476],[5,"current_dir","","Returns the current working directory as a `Path`."],[5,"set_current_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not."],[5,"vars","","Returns an iterator of (variable, value) pairs of strings, for all the\nenvironment variables of the current process."],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS strings, for all the\nenvironment variables of the current process."],[5,"var","","Fetches the environment variable `key` from the current process."],[5,"var_os","","Fetches the environment variable `key` from the current process, returning\nNone if the variable isn't set."],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running\nprocess."],[5,"remove_var","","Remove a variable from the environment entirely."],[5,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable."],[5,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable."],[5,"home_dir","","Optionally returns the path to the current user's home directory if known."],[5,"temp_dir","","Returns the path to a temporary directory."],[5,"current_exe","","Optionally returns the filesystem path to the current executable which is\nrunning but with the executable name."],[5,"set_exit_status","","Sets the process exit code"],[5,"get_exit_status","","Fetches the process's current exit code. This defaults to 0 and can change\nby calling `set_exit_status`."],[5,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line)."],[5,"args_os","","Returns the arguments which this program was started with (normally passed\nvia the command line)."],[5,"page_size","","Returns the page size of the current architecture in bytes."],[0,"consts","","Constants associated with the current target"],[17,"ARCH","std::env::consts","A string describing the architecture of the CPU that this is currently\nin use."],[17,"FAMILY","",""],[17,"OS","","A string describing the specific operating system in use: in this\ncase, `linux`."],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform: in this case, `lib`."],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform: in this case, `.so`."],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot: in this case, `so`."],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform: in this case, the empty string."],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform: in this case, the empty string."],[6,"Item","std::env",""],[11,"next","","",477],[11,"size_hint","","",477],[6,"Item","",""],[11,"next","","",478],[11,"size_hint","","",478],[11,"clone","","",476],[11,"eq","","",476],[11,"ne","","",476],[11,"fmt","","",476],[11,"fmt","","",476],[11,"description","","",476],[6,"Item","",""],[11,"next","","",479],[11,"size_hint","","",479],[11,"fmt","","",480],[11,"fmt","","",480],[11,"description","","",480],[6,"Item","",""],[11,"next","","",481],[11,"size_hint","","",481],[11,"len","","",481],[6,"Item","",""],[11,"next","","",482],[11,"size_hint","","",482],[11,"len","","",482],[0,"path","std","Cross-platform path manipulation."],[3,"Components","std::path","The core iterator giving the components of a path."],[3,"Iter","","An iterator over the components of a path, as `OsStr` slices."],[3,"PathBuf","","An owned, mutable path (akin to `String`)."],[3,"Path","","A slice of a path (akin to `str`)."],[3,"Display","","Helper struct for safely printing paths with `format!()` and `{}`"],[4,"Prefix","","Path prefixes (Windows only)."],[13,"Verbatim","","Prefix `\\\\?\\`, together with the given component immediately following it.",483],[13,"VerbatimUNC","","Prefix `\\\\?\\UNC\\`, with the \"server\" and \"share\" components following it.",483],[13,"VerbatimDisk","","Prefix like `\\\\?\\C:\\`, for the given drive letter",483],[13,"DeviceNS","","Prefix `\\\\.\\`, together with the given component immediately following it.",483],[13,"UNC","","Prefix `\\\\server\\share`, with the given \"server\" and \"share\" components.",483],[13,"Disk","","Prefix `C:` for the given disk drive.",483],[4,"Component","","A single component of a path."],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\server\\share`.",484],[12,"raw","std::path::Component","The prefix as an unparsed `OsStr` slice.",484],[12,"parsed","","The parsed prefix data.",484],[13,"Empty","std::path","An empty component. Only used on Windows for the last component of\nverbatim paths ending with a separator (e.g. the last component of\n`\\\\?\\C:\\windows\\` but not `\\\\?\\C:\\windows` or `C:\\windows`).",484],[13,"RootDir","","The root directory component, appears after any prefix and before anything else",484],[13,"CurDir","","A reference to the current directory, i.e. `.`",484],[13,"ParentDir","","A reference to the parent directory, i.e. `..`",484],[13,"Normal","","A normal component, i.e. `a` and `b` in `a/b`",484],[5,"is_separator","","Determine whether the character is one of the permitted path\nseparators for the current platform."],[17,"MAIN_SEPARATOR","","The primary sperator for the current platform"],[8,"AsPath","","Freely convertible to a `Path`."],[10,"as_path","","Convert to a `Path`.",485],[11,"eq","","",483],[11,"ne","","",483],[11,"cmp","","",483],[11,"partial_cmp","","",483],[11,"lt","","",483],[11,"le","","",483],[11,"gt","","",483],[11,"ge","","",483],[11,"hash","","",483],[11,"fmt","","",483],[11,"clone","","",483],[11,"is_verbatim","","Determine if the prefix is verbatim, i.e. begins `\\\\?\\`.",483],[11,"fmt","","",484],[11,"hash","","",484],[11,"cmp","","",484],[11,"partial_cmp","","",484],[11,"lt","","",484],[11,"le","","",484],[11,"gt","","",484],[11,"ge","","",484],[11,"eq","","",484],[11,"ne","","",484],[11,"clone","","",484],[11,"as_os_str","","Extract the underlying `OsStr` slice",484],[11,"clone","","",486],[11,"clone","","",487],[11,"as_path","","Extract a slice corresponding to the portion of the path remaining for iteration.",486],[11,"peek","","Examine the next component without consuming it.",486],[11,"as_path","","Extract a slice corresponding to the portion of the path remaining for iteration.",487],[6,"Item","",""],[11,"next","","",487],[11,"next_back","","",487],[6,"Item","",""],[11,"next","","",486],[11,"next_back","","",486],[11,"eq","","",486],[11,"partial_cmp","","",486],[11,"cmp","","",486],[11,"hash","","",488],[11,"clone","","",488],[11,"new","","Allocate a `PathBuf` with initial contents given by the\nargument.",488],[11,"push","","Extend `self` with `path`.",488],[11,"pop","","Truncate `self` to `self.parent()`.",488],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",488],[11,"set_extension","","Updates `self.extension()` to `extension`.",488],[11,"into_os_string","","Consume the `PathBuf`, yielding its internal `OsString` storage",488],[11,"from_iter","","",488],[11,"extend","","",488],[11,"fmt","","",488],[6,"Target","",""],[11,"deref","","",488],[11,"borrow","","",488],[11,"into_cow","","",488],[6,"Owned","",""],[11,"to_owned","","",489],[11,"eq","","",488],[11,"partial_cmp","","",488],[11,"cmp","","",488],[11,"as_os_str","","",488],[11,"hash","","",489],[11,"new","","Directly wrap a string slice as a `Path` slice.",489],[11,"to_str","","Yield a `&str` slice if the `Path` is valid unicode.",489],[11,"to_string_lossy","","Convert a `Path` to a `Cow<str>`.",489],[11,"to_path_buf","","Convert a `Path` to an owned `PathBuf`.",489],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",489],[11,"is_relative","","A path is *relative* if it is not absolute.",489],[11,"prefix","","Returns the *prefix* of a path, if any.",489],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",489],[11,"parent","","The path without its final component.",489],[11,"file_name","","The final component of the path, if it is a normal file.",489],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",489],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",489],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",489],[11,"file_stem","","Extract the stem (non-extension) portion of `self.file()`.",489],[11,"extension","","Extract the extension of `self.file()`, if possible.",489],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",489],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",489],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",489],[11,"components","","Produce an iterator over the components of the path.",489],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",489],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",489],[11,"as_os_str","","",489],[11,"fmt","","",489],[11,"fmt","","",490],[11,"fmt","","",490],[11,"eq","","",489],[11,"partial_cmp","","",489],[11,"cmp","","",489],[0,"old_path","std","Cross-platform path support"],[3,"Display","std::old_path","Helper struct for printing paths with format!()"],[0,"posix","","POSIX file path handling"],[3,"Path","std::old_path::posix","Represents a POSIX file path"],[3,"ParsePathError","","Valuelue indicating that a path could not be parsed from a string."],[5,"is_sep_byte","","Returns whether the given byte is a path separator"],[5,"is_sep","","Returns whether the given char is a path separator"],[6,"Components","","Iterator that yields successive components of a Path as &[u8]"],[6,"StrComponents","","Iterator that yields successive components of a Path as Option<&str>"],[17,"SEP","","The standard path separator character"],[17,"SEP_BYTE","","The standard path separator byte"],[11,"clone","","",491],[11,"fmt","","",491],[11,"eq","","",491],[11,"partial_cmp","","",491],[11,"cmp","","",491],[6,"Err","",""],[11,"from_str","","",491],[11,"eq","","",492],[11,"ne","","",492],[11,"clone","","",492],[11,"fmt","","",492],[11,"hash","","",491],[11,"container_as_bytes","","",491],[11,"new_unchecked","","",491],[11,"set_filename_unchecked","","",491],[11,"push_unchecked","","",491],[11,"as_vec","","",491],[11,"into_vec","","",491],[11,"dirname","","",491],[11,"filename","","",491],[11,"pop","","",491],[11,"root_path","","",491],[11,"is_absolute","","",491],[11,"is_ancestor_of","","",491],[11,"path_relative_from","","",491],[11,"ends_with_path","","",491],[11,"new","","Returns a new Path from a byte vector or string",491],[11,"new_opt","","Returns a new Path from a byte vector or string, if possible",491],[11,"components","","Returns an iterator that yields each component of the path in turn.\nDoes not distinguish between absolute and relative paths, e.g.\n/a/b/c and a/b/c yield the same set of components.\nA path of \"/\" yields no components. A path of \".\" yields one component.",491],[11,"str_components","","Returns an iterator that yields each component of the path as Option<&str>.\nSee components() for details.",491],[0,"windows","std::old_path","Windows file path handling"],[3,"Path","std::old_path::windows","Represents a Windows path"],[3,"ParsePathError","","Value indicating that a path could not be parsed from a string."],[4,"PathPrefix","","Prefix types for Path"],[13,"VerbatimPrefix","","Prefix `\\\\?\\`, uint is the length of the following component",493],[13,"VerbatimUNCPrefix","","Prefix `\\\\?\\UNC\\`, uints are the lengths of the UNC components",493],[13,"VerbatimDiskPrefix","","Prefix `\\\\?\\C:\\` (for any alphabetic character)",493],[13,"DeviceNSPrefix","","Prefix `\\\\.\\`, uint is the length of the following component",493],[13,"UNCPrefix","","UNC prefix `\\\\server\\share`, uints are the lengths of the server/share",493],[13,"DiskPrefix","","Prefix `C:` for any alphabetic character",493],[5,"is_vol_relative","","Returns whether the path is considered \"volume-relative\", which means a path\nthat looks like \"\\foo\". Paths of this form are relative to the current volume,\nbut absolute within that volume."],[5,"is_cwd_relative","","Returns whether the path is considered \"cwd-relative\", which means a path\nwith a volume prefix that is not absolute. This look like \"C:foo.txt\". Paths\nof this form are relative to the cwd on the given volume."],[5,"prefix","","Returns the PathPrefix for this Path"],[5,"is_verbatim","","Returns whether the Path's prefix is a verbatim prefix, i.e. `\\\\?\\`"],[5,"make_non_verbatim","","Returns the non-verbatim equivalent of the input path, if possible.\nIf the input path is a device namespace path, None is returned.\nIf the input path is not verbatim, it is returned as-is.\nIf the input path is verbatim, but the same path can be expressed as\nnon-verbatim, the non-verbatim version is returned.\nOtherwise, None is returned."],[5,"is_sep","","Returns whether the given char is a path separator.\nAllows both the primary separator '\\' and the alternative separator '/'."],[5,"is_sep_verbatim","","Returns whether the given char is a path separator.\nOnly allows the primary separator '\\'; use is_sep to allow '/'."],[5,"is_sep_byte","","Returns whether the given byte is a path separator.\nAllows both the primary separator '\\' and the alternative separator '/'."],[5,"is_sep_byte_verbatim","","Returns whether the given byte is a path separator.\nOnly allows the primary separator '\\'; use is_sep_byte to allow '/'."],[6,"StrComponents","","Iterator that yields successive components of a Path as &str"],[6,"Components","","Iterator that yields successive components of a Path as &[u8]"],[17,"SEP","","The standard path separator character"],[17,"SEP_BYTE","","The standard path separator byte"],[17,"SEP2","","The alternative path separator character"],[17,"SEP2_BYTE","","The alternative path separator character"],[11,"clone","","",494],[11,"fmt","","",494],[11,"eq","","",494],[11,"partial_cmp","","",494],[11,"cmp","","",494],[6,"Err","",""],[11,"from_str","","",494],[11,"eq","","",495],[11,"ne","","",495],[11,"clone","","",495],[11,"fmt","","",495],[11,"hash","","",494],[11,"container_as_bytes","","",494],[11,"container_as_str","","",494],[11,"is_str","","",494],[11,"new_unchecked","","See `GenericPathUnsafe::from_vec_unchecked`.",494],[11,"set_filename_unchecked","","See `GenericPathUnsafe::set_filename_unchecked`.",494],[11,"push_unchecked","","See `GenericPathUnsafe::push_unchecked`.",494],[11,"new_opt","","",494],[11,"as_str","","See `GenericPath::as_str` for info.\nAlways returns a `Some` value.",494],[11,"as_vec","","",494],[11,"into_vec","","",494],[11,"dirname","","",494],[11,"dirname_str","","See `GenericPath::dirname_str` for info.\nAlways returns a `Some` value.",494],[11,"filename","","",494],[11,"filename_str","","See `GenericPath::filename_str` for info.\nAlways returns a `Some` value if `filename` returns a `Some` value.",494],[11,"filestem_str","","See `GenericPath::filestem_str` for info.\nAlways returns a `Some` value if `filestem` returns a `Some` value.",494],[11,"extension_str","","",494],[11,"dir_path","","",494],[11,"pop","","",494],[11,"root_path","","",494],[11,"is_absolute","","See `GenericPath::is_absolute` for info.",494],[11,"is_relative","","",494],[11,"is_ancestor_of","","",494],[11,"path_relative_from","","",494],[11,"ends_with_path","","",494],[11,"new","","Returns a new `Path` from a `BytesContainer`.",494],[11,"new_opt","","Returns a new `Some(Path)` from a `BytesContainer`.",494],[11,"str_components","","Returns an iterator that yields each component of the path in turn as a Option<&str>.\nEvery component is guaranteed to be Some.\nDoes not yield the path prefix (including server/share components in UNC paths).\nDoes not distinguish between volume-relative and relative paths, e.g.\n\\a\\b\\c and a\\b\\c.\nDoes not distinguish between absolute and cwd-relative paths, e.g.\nC:\\foo and C:foo.",494],[11,"components","","Returns an iterator that yields each component of the path in turn as a &[u8].\nSee str_components() for details.",494],[11,"fmt","","",493],[11,"clone","","",493],[11,"eq","","",493],[11,"ne","","",493],[8,"GenericPath","std::old_path","A trait that represents the generic operations available on paths"],[11,"new","","Creates a new Path from a byte vector or string.\nThe resulting Path will always be normalized.",496],[11,"new_opt","","Creates a new Path from a byte vector or string, if possible.\nThe resulting Path will always be normalized.",496],[11,"as_str","","Returns the path as a string, if possible.\nIf the path is not representable in utf-8, this returns None.",496],[10,"as_vec","","Returns the path as a byte vector",496],[10,"into_vec","","Converts the Path into an owned byte vector",496],[11,"display","","Returns an object that implements `Display` for printing paths",496],[11,"filename_display","","Returns an object that implements `Display` for printing filenames",496],[10,"dirname","","Returns the directory component of `self`, as a byte vector (with no trailing separator).\nIf `self` has no directory component, returns ['.'].",496],[11,"dirname_str","","Returns the directory component of `self`, as a string, if possible.\nSee `dirname` for details.",496],[10,"filename","","Returns the file component of `self`, as a byte vector.\nIf `self` represents the root of the file hierarchy, returns None.\nIf `self` is \".\" or \"..\", returns None.",496],[11,"filename_str","","Returns the file component of `self`, as a string, if possible.\nSee `filename` for details.",496],[11,"filestem","","Returns the stem of the filename of `self`, as a byte vector.\nThe stem is the portion of the filename just before the last '.'.\nIf there is no '.', the entire filename is returned.",496],[11,"filestem_str","","Returns the stem of the filename of `self`, as a string, if possible.\nSee `filestem` for details.",496],[11,"extension","","Returns the extension of the filename of `self`, as an optional byte vector.\nThe extension is the portion of the filename just after the last '.'.\nIf there is no extension, None is returned.\nIf the filename ends in '.', the empty vector is returned.",496],[11,"extension_str","","Returns the extension of the filename of `self`, as a string, if possible.\nSee `extension` for details.",496],[11,"set_filename","","Replaces the filename portion of the path with the given byte vector or string.\nIf the replacement name is [], this is equivalent to popping the path.",496],[11,"set_extension","","Replaces the extension with the given byte vector or string.\nIf there is no extension in `self`, this adds one.\nIf the argument is [] or \"\", this removes the extension.\nIf `self` has no filename, this is a no-op.",496],[11,"with_filename","","Returns a new Path constructed by replacing the filename with the given\nbyte vector or string.\nSee `set_filename` for details.",496],[11,"with_extension","","Returns a new Path constructed by setting the extension to the given\nbyte vector or string.\nSee `set_extension` for details.",496],[11,"dir_path","","Returns the directory component of `self`, as a Path.\nIf `self` represents the root of the filesystem hierarchy, returns `self`.",496],[10,"root_path","","Returns a Path that represents the filesystem root that `self` is rooted in.",496],[11,"push","","Pushes a path (as a byte vector or string) onto `self`.\nIf the argument represents an absolute path, it replaces `self`.",496],[11,"push_many","","Pushes multiple paths (as byte vectors or strings) onto `self`.\nSee `push` for details.",496],[10,"pop","","Removes the last path component from the receiver.\nReturns `true` if the receiver was modified, or `false` if it already\nrepresented the root of the file hierarchy.",496],[11,"join","","Returns a new Path constructed by joining `self` with the given path\n(as a byte vector or string).\nIf the given path is absolute, the new Path will represent just that.",496],[11,"join_many","","Returns a new Path constructed by joining `self` with the given paths\n(as byte vectors or strings).\nSee `join` for details.",496],[10,"is_absolute","","Returns whether `self` represents an absolute path.\nAn absolute path is defined as one that, when joined to another path, will\nyield back the same absolute path.",496],[11,"is_relative","","Returns whether `self` represents a relative path.\nTypically this is the inverse of `is_absolute`.\nBut for Windows paths, it also means the path is not volume-relative or\nrelative to the current working directory.",496],[10,"is_ancestor_of","","Returns whether `self` is equal to, or is an ancestor of, the given path.\nIf both paths are relative, they are compared as though they are relative\nto the same parent path.",496],[10,"path_relative_from","","Returns the Path that, were it joined to `base`, would yield `self`.\nIf no such path exists, None is returned.\nIf `self` is absolute and `base` is relative, or on Windows if both\npaths refer to separate drives, an absolute path is returned.",496],[10,"ends_with_path","","Returns whether the relative path `child` is a suffix of `self`.",496],[8,"BytesContainer","","A trait that represents something bytes-like (e.g. a &[u8] or a &str)"],[10,"container_as_bytes","","Returns a &[u8] representing the receiver",497],[11,"container_as_str","","Returns the receiver interpreted as a utf-8 string, if possible",497],[11,"is_str","","Returns whether .container_as_str() is guaranteed to not fail",497],[8,"GenericPathUnsafe","","A trait that represents the unsafe operations on GenericPaths"],[10,"new_unchecked","","Creates a new Path without checking for null bytes.\nThe resulting Path will always be normalized.",498],[10,"set_filename_unchecked","","Replaces the filename portion of the path without checking for null\nbytes.\nSee `set_filename` for details.",498],[10,"push_unchecked","","Pushes a path onto `self` without checking for null bytes.\nSee `push` for details.",498],[11,"fmt","","",499],[11,"fmt","","",499],[11,"as_cow","","Returns the path as a possibly-owned string.",499],[11,"container_as_bytes","std::string","",248],[11,"container_as_str","","",248],[11,"is_str","","",248],[11,"container_as_bytes","std::vec","",239],[11,"container_as_bytes","std::ffi","",328],[0,"process","std","Working with processes."],[3,"Child","std::process","Representation of a running or exited child process."],[12,"stdin","","The handle for writing to the child's stdin, if it has been captured",500],[12,"stdout","","The handle for reading from the child's stdout, if it has been captured",500],[12,"stderr","","The handle for reading from the child's stderr, if it has been captured",500],[3,"ChildStdin","","A handle to a child procesess's stdin"],[3,"ChildStdout","","A handle to a child procesess's stdout"],[3,"ChildStderr","","A handle to a child procesess's stderr"],[3,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned. A default configuration can be\ngenerated using `Command::new(program)`, where `program` gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:"],[3,"Output","","The output of a finished process."],[12,"status","","The status (exit code) of the process.",501],[12,"stdout","","The data that the process wrote to stdout.",501],[12,"stderr","","The data that the process wrote to stderr.",501],[3,"Stdio","","Describes what to do with a standard io stream for a child process."],[3,"ExitStatus","","Describes the result of a process after it has terminated."],[11,"write","","",502],[11,"flush","","",502],[11,"read","","",503],[11,"read","","",504],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",505],[11,"arg","","Add an argument to pass to the program.",505],[11,"args","","Add multiple arguments to pass to the program.",505],[11,"env","","Inserts or updates an environment variable mapping.",505],[11,"env_remove","","Removes an environment variable mapping.",505],[11,"env_clear","","Clears the entire environment map for the child process.",505],[11,"current_dir","","Set the working directory for the child process.",505],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).\nDefaults to `CreatePipe(true, false)` so the input can be written to.",505],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",505],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",505],[11,"spawn","","Executes the command as a child process, returning a handle to it.",505],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",505],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",505],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",505],[11,"clone","","",501],[11,"eq","","",501],[11,"ne","","",501],[11,"capture","","A new pipe should be arranged to connect the parent and child processes.",506],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",506],[11,"inherit","","The child inherits from the corresponding parent descriptor.",506],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",506],[11,"fmt","","",507],[11,"clone","","",507],[11,"eq","","",507],[11,"ne","","",507],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",507],[11,"code","","Return the exit code of the process, if any.",507],[11,"fmt","","",507],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",500],[11,"wait","","Wait for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",500],[11,"wait_with_output","","Simultaneously wait for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `Output`\ninstance.",500],[0,"rand","std","Utilities for random number generation"],[8,"Rand","std::rand","A type that can be randomly generated using an `Rng`."],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",508],[8,"Rng","","A random number generator."],[10,"next_u32","","Return the next random u32.",509],[10,"next_u64","","Return the next random u64.",509],[10,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",509],[10,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",509],[10,"fill_bytes","","Fill `dest` with random data.",509],[10,"gen","","Return a random value of a `Rand` type.",509],[10,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",509],[10,"gen_range","","Generate a random value in the range [`low`, `high`).",509],[10,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",509],[10,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",509],[10,"choose","","Return a random element from `values`.",509],[10,"shuffle","","Shuffle a mutable slice in place.",509],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times."],[10,"reseed","","Reseed an RNG with the given seed.",510],[10,"from_seed","","Create a new RNG with the given seed.",510],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",511],[11,"sample","","",511],[11,"ind_sample","","",511],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",512],[11,"sample","","",512],[11,"sample","","",513],[11,"sample","","",514],[11,"ind_sample","","",512],[11,"ind_sample","","",513],[11,"ind_sample","","",514],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",515],[11,"sample","","",515],[11,"ind_sample","","",515],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",516],[11,"sample","","",516],[11,"ind_sample","","",516],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",517],[11,"sample","","",517],[11,"ind_sample","","",517],[11,"rand","rand::distributions::normal","",518],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",519],[11,"sample","","",519],[11,"ind_sample","","",519],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",520],[11,"sample","","",520],[11,"ind_sample","","",520],[11,"rand","rand::distributions::exponential","",521],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",522],[11,"sample","","",522],[11,"ind_sample","","",522],[11,"new","rand::distributions","",523],[11,"sample","","",523],[11,"ind_sample","","",523],[11,"new","","Create a new `WeightedChoice`.",524],[11,"sample","","",524],[11,"ind_sample","","",524],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default\nfixed seed.",525],[11,"clone","","",525],[11,"next_u32","","",525],[11,"reseed","","",525],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",525],[11,"rand","","",525],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",526],[11,"clone","","",526],[11,"next_u32","","",526],[11,"next_u64","","",526],[11,"reseed","","",526],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",526],[11,"rand","","",526],[11,"clone","rand::chacha","",527],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",527],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",527],[11,"next_u32","","",527],[11,"reseed","","",527],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",527],[11,"rand","","",527],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",528],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",528],[11,"next_u32","","",528],[11,"next_u64","","",528],[11,"fill_bytes","","",528],[11,"reseed","","",528],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",528],[11,"reseed","","",529],[11,"default","","",529],[11,"rand","rand","",530],[11,"rand","","",531],[11,"rand","","",530],[11,"rand","","",531],[11,"rand","std::option","",63],[6,"Item","std::rand",""],[11,"next","rand","",532],[6,"Item","std::rand",""],[11,"next","rand","",533],[11,"clone","","",534],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",534],[11,"next_u32","","",534],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",534],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",534],[11,"rand","","",534],[3,"Open01","std::rand","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint)."],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints)."],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator."],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1]."],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm."],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1]."],[0,"distributions","","Sampling from random distributions."],[0,"range","std::rand::distributions","Generating numbers between two others."],[3,"Range","std::rand::distributions::range","Sample values uniformly between two bounds."],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`."],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",535],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",535],[0,"gamma","std::rand::distributions","The Gamma and derived distributions."],[3,"Gamma","std::rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution."],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[3,"FisherF","","The Fisher F distribution `F(m, n)`."],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[0,"normal","std::rand::distributions","The normal and derived distributions."],[3,"StandardNormal","std::rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian)."],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[0,"exponential","std::rand::distributions","The exponential distribution."],[3,"Exp1","std::rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers."],[3,"Exp","","The exponential distribution `Exp(lambda)`."],[8,"Sample","std::rand::distributions","Types that can be used to create a random instance of `Support`."],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",536],[8,"IndependentSample","","`Sample`s that do not require keeping track of state."],[10,"ind_sample","","Generate a random value.",537],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits."],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`."],[12,"weight","","The numerical weight of this item",538],[12,"item","","The actual item which is being weighted",538],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items."],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution."],[3,"Exp","","The exponential distribution `Exp(lambda)`."],[3,"FisherF","","The Fisher F distribution `F(m, n)`."],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[3,"Range","","Sample values uniformly between two bounds."],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[0,"reseeding","std::rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes."],[3,"ReseedingRng","std::rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes."],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",528],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`."],[10,"reseed","","Reseed the given RNG.",539],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call."],[3,"OsRng","std::rand","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:"],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform."],[3,"ThreadRng","","The thread-local RNG."],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed."],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<int>()`."],[5,"random","","Generates a random value using the thread-local random number generator."],[5,"sample","","Randomly sample up to `amount` elements from an iterator."],[0,"os","","Interfaces to the operating system provided random number\ngenerators."],[11,"new","","Create a new `OsRng`.",540],[11,"next_u32","","",540],[11,"next_u64","","",540],[11,"fill_bytes","","",540],[0,"reader","","A wrapper around any Reader to treat it as an RNG."],[3,"ReaderRng","std::rand::reader","An RNG that reads random bytes straight from a `Reader`. This will\nwork best with an infinite reader, but this is not required."],[11,"new","","Create a new `ReaderRng` from a `Reader`.",541],[11,"next_u32","","",541],[11,"next_u64","","",541],[11,"fill_bytes","","",541],[11,"clone","std::rand","",542],[11,"new","","Create a randomly seeded instance of `StdRng`.",542],[11,"next_u32","","",542],[11,"next_u64","","",542],[11,"reseed","","",542],[11,"from_seed","","",542],[11,"clone","","",543],[11,"next_u32","","",543],[11,"next_u64","","",543],[11,"fill_bytes","","",543],[0,"time","std","Temporal quantification."],[0,"duration","std::time","Temporal quantification"],[3,"Duration","std::time::duration","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details."],[17,"MIN","","The minimum possible `Duration`: `i64::MIN` milliseconds."],[17,"MAX","","The maximum possible `Duration`: `i64::MAX` milliseconds."],[11,"fmt","","",544],[11,"cmp","","",544],[11,"partial_cmp","","",544],[11,"lt","","",544],[11,"le","","",544],[11,"gt","","",544],[11,"ge","","",544],[11,"eq","","",544],[11,"ne","","",544],[11,"clone","","",544],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",544],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",544],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",544],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",544],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",544],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",544],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",544],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",544],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",544],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",544],[11,"num_days","","Returns the total number of whole days in the duration.",544],[11,"num_hours","","Returns the total number of whole hours in the duration.",544],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",544],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",544],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",544],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",544],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",544],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",544],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",544],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",544],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",544],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",544],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",544],[6,"Output","",""],[11,"neg","","",544],[6,"Output","",""],[11,"add","","",544],[6,"Output","",""],[11,"sub","","",544],[6,"Output","",""],[11,"mul","","",544],[6,"Output","",""],[11,"div","","",544],[11,"fmt","","",544],[0,"collections","std","Collection types."],[4,"Bound","std::collections","An endpoint of a range of keys."],[13,"Included","","An inclusive bound.",545],[13,"Excluded","","An exclusive bound.",545],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",545],[3,"BinaryHeap","","A priority queue implemented with a binary heap."],[3,"BitVec","","The bitvector type."],[3,"BitSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[3,"BTreeMap","","A map based on a B-Tree."],[3,"BTreeSet","","A set based on a B-Tree."],[3,"LinkedList","","A doubly-linked list."],[3,"VecDeque","","`VecDeque` is a growable ring buffer, which can be used as a\ndouble-ended queue efficiently."],[3,"VecMap","","A map optimized for small integer keys."],[0,"binary_heap","","A priority queue implemented with a binary heap."],[3,"BinaryHeap","std::collections::binary_heap","A priority queue implemented with a binary heap."],[3,"Iter","","`BinaryHeap` iterator."],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`."],[3,"Drain","","An iterator that drains a `BinaryHeap`."],[0,"bit_vec","std::collections",""],[3,"BitVec","std::collections::bit_vec","The bitvector type."],[3,"Iter","","An iterator for `BitVec`."],[3,"BitVec","","The bitvector type."],[0,"bit_set","std::collections",""],[3,"SetIter","std::collections::bit_set","An iterator for `BitSet`."],[3,"SymmetricDifference","",""],[3,"Intersection","",""],[3,"Union","",""],[3,"BitSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[3,"Difference","",""],[3,"BitSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[0,"btree_map","std::collections",""],[3,"Range","std::collections::btree_map","An iterator over a sub-range of BTreeMap's entries."],[3,"BTreeMap","","A map based on a B-Tree."],[3,"Keys","","An iterator over a BTreeMap's keys."],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied."],[13,"Vacant","","A vacant Entry",220],[13,"Occupied","","An occupied Entry",220],[3,"IntoIter","","An owning iterator over a BTreeMap's entries."],[3,"VacantEntry","","A vacant Entry."],[3,"Values","","An iterator over a BTreeMap's values."],[3,"OccupiedEntry","","An occupied Entry."],[3,"IterMut","","A mutable iterator over a BTreeMap's entries."],[3,"Iter","","An iterator over a BTreeMap's entries."],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap's entries."],[0,"btree_set","std::collections",""],[3,"BTreeSet","std::collections::btree_set","A set based on a B-Tree."],[3,"Range","","An iterator over a sub-range of BTreeSet's items."],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order)."],[3,"Iter","","An iterator over a BTreeSet's items."],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order)."],[3,"IntoIter","","An owning iterator over a BTreeSet's items."],[3,"Union","","A lazy iterator producing elements in the set union (in-order)."],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order)."],[0,"linked_list","std::collections","A doubly-linked list with owned nodes."],[3,"LinkedList","std::collections::linked_list","A doubly-linked list."],[3,"Iter","","An iterator over references to the items of a `LinkedList`."],[3,"IterMut","","An iterator over mutable references to the items of a `LinkedList`."],[3,"IntoIter","","An iterator over mutable references to the items of a `LinkedList`."],[3,"LinkedList","","A doubly-linked list."],[0,"vec_deque","std::collections","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer."],[3,"VecDeque","std::collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a\ndouble-ended queue efficiently."],[3,"Iter","","`VecDeque` iterator."],[3,"IterMut","","`VecDeque` mutable iterator."],[3,"IntoIter","","A by-value VecDeque iterator"],[3,"Drain","","A draining VecDeque iterator"],[3,"VecDeque","","`VecDeque` is a growable ring buffer, which can be used as a\ndouble-ended queue efficiently."],[0,"vec_map","std::collections","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key)."],[3,"VecMap","std::collections::vec_map","A map optimized for small integer keys."],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied."],[13,"Vacant","","A vacant Entry",263],[13,"Occupied","","An occupied Entry",263],[3,"VacantEntry","","A vacant Entry."],[3,"OccupiedEntry","","An occupied Entry."],[3,"Iter","","An iterator over the key-value pairs of a map."],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable."],[3,"Keys","","An iterator over the keys of a map."],[3,"Values","","An iterator over the values of a map."],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map."],[3,"Drain","",""],[3,"HashMap","std::collections","A hash map implementation which uses linear probing with Robin\nHood bucket stealing."],[3,"HashSet","","An implementation of a hash set using the underlying representation of a\nHashMap where the value is (). As with the `HashMap` type, a `HashSet`\nrequires that the elements implement the `Eq` and `Hash` traits."],[11,"clone","","",546],[11,"new","","Create an empty HashMap.",546],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",546],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",546],[11,"with_capacity_and_hash_state","","Create an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",546],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",546],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",546],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",546],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",546],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",546],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",546],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",546],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",546],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",546],[11,"len","","Returns the number of elements in the map.",546],[11,"is_empty","","Returns true if the map contains no elements.",546],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",546],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",546],[11,"get","","Returns a reference to the value corresponding to the key.",546],[11,"contains_key","","Returns true if the map contains a value for the specified key.",546],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",546],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",546],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",546],[11,"eq","","",546],[11,"fmt","","",546],[11,"default","","",546],[11,"index","","",546],[11,"index_mut","","",546],[11,"into_iter","","",546],[11,"from_iter","","",546],[11,"extend","","",546],[11,"clone","","",547],[11,"new","","Create an empty HashSet.",547],[11,"with_capacity","","Create an empty HashSet with space for at least `n` elements in\nthe hash table.",547],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",547],[11,"with_capacity_and_hash_state","","Create an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",547],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",547],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",547],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",547],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",547],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",547],[11,"difference","","Visit the values representing the difference.",547],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",547],[11,"intersection","","Visit the values representing the intersection.",547],[11,"union","","Visit the values representing the union.",547],[11,"len","","Return the number of elements in the set",547],[11,"is_empty","","Returns true if the set contains no elements",547],[11,"drain","","Clears the set, returning all elements in an iterator.",547],[11,"clear","","Clears the set, removing all values.",547],[11,"contains","","Returns `true` if the set contains a value.",547],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",547],[11,"is_subset","","Returns `true` if the set is a subset of another.",547],[11,"is_superset","","Returns `true` if the set is a superset of another.",547],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",547],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",547],[11,"eq","","",547],[11,"fmt","","",547],[11,"from_iter","","",547],[11,"extend","","",547],[11,"default","","",547],[11,"into_iter","","",547],[0,"hash_map","","A hashmap"],[3,"HashMap","std::collections::hash_map","A hash map implementation which uses linear probing with Robin\nHood bucket stealing."],[3,"Iter","","HashMap iterator."],[3,"IterMut","","HashMap mutable values iterator."],[3,"IntoIter","","HashMap move iterator."],[3,"Keys","","HashMap keys iterator."],[3,"Values","","HashMap values iterator."],[3,"Drain","","HashMap drain iterator."],[3,"OccupiedEntry","","A view into a single occupied location in a HashMap."],[3,"VacantEntry","","A view into a single empty location in a HashMap."],[3,"RandomState","","`RandomState` is the default state for `HashMap` types."],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied."],[13,"Occupied","","An occupied Entry.",548],[13,"Vacant","","A vacant Entry.",548],[17,"INITIAL_CAPACITY","",""],[11,"clone","std::collections","",546],[11,"new","","Create an empty HashMap.",546],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",546],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",546],[11,"with_capacity_and_hash_state","","Create an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",546],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",546],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",546],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",546],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",546],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",546],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",546],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",546],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",546],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",546],[11,"len","","Returns the number of elements in the map.",546],[11,"is_empty","","Returns true if the map contains no elements.",546],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",546],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",546],[11,"get","","Returns a reference to the value corresponding to the key.",546],[11,"contains_key","","Returns true if the map contains a value for the specified key.",546],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",546],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",546],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",546],[11,"eq","","",546],[11,"fmt","","",546],[11,"default","","",546],[6,"Output","std::collections::hash_map",""],[11,"index","std::collections","",546],[11,"index_mut","","",546],[11,"clone","std::collections::hash_map","",549],[11,"clone","","",550],[11,"clone","","",551],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","std::collections","",546],[6,"Item","std::collections::hash_map",""],[11,"next","","",549],[11,"size_hint","","",549],[11,"len","","",549],[6,"Item","",""],[11,"next","","",552],[11,"size_hint","","",552],[11,"len","","",552],[6,"Item","",""],[11,"next","","",553],[11,"size_hint","","",553],[11,"len","","",553],[6,"Item","",""],[11,"next","","",550],[11,"size_hint","","",550],[11,"len","","",550],[6,"Item","",""],[11,"next","","",551],[11,"size_hint","","",551],[11,"len","","",551],[6,"Item","",""],[11,"next","","",554],[11,"size_hint","","",554],[11,"len","","",554],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant.",548],[11,"get","","Gets a reference to the value in the entry.",555],[11,"get_mut","","Gets a mutable reference to the value in the entry.",555],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",555],[11,"insert","","Sets the value of the entry, and returns the entry's old value",555],[11,"remove","","Takes the value out of the entry, and returns it",555],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",556],[11,"from_iter","std::collections","",546],[11,"extend","","",546],[11,"clone","std::collections::hash_map","",557],[11,"new","","Construct a new `RandomState` that is initialized with random keys.",557],[6,"Hasher","",""],[11,"hasher","","",557],[11,"default","","",557],[0,"hash_set","std::collections","A hashset"],[3,"HashSet","std::collections::hash_set","An implementation of a hash set using the underlying representation of a\nHashMap where the value is (). As with the `HashMap` type, a `HashSet`\nrequires that the elements implement the `Eq` and `Hash` traits."],[3,"Iter","","HashSet iterator"],[3,"IntoIter","","HashSet move iterator"],[3,"Drain","","HashSet drain iterator"],[3,"Intersection","","Intersection iterator"],[3,"Difference","","Difference iterator"],[3,"SymmetricDifference","","Symmetric difference iterator."],[3,"Union","","Set union iterator."],[11,"clone","std::collections","",547],[11,"new","","Create an empty HashSet.",547],[11,"with_capacity","","Create an empty HashSet with space for at least `n` elements in\nthe hash table.",547],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",547],[11,"with_capacity_and_hash_state","","Create an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",547],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",547],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",547],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",547],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",547],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",547],[11,"difference","","Visit the values representing the difference.",547],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",547],[11,"intersection","","Visit the values representing the intersection.",547],[11,"union","","Visit the values representing the union.",547],[11,"len","","Return the number of elements in the set",547],[11,"is_empty","","Returns true if the set contains no elements",547],[11,"drain","","Clears the set, returning all elements in an iterator.",547],[11,"clear","","Clears the set, removing all values.",547],[11,"contains","","Returns `true` if the set contains a value.",547],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",547],[11,"is_subset","","Returns `true` if the set is a subset of another.",547],[11,"is_superset","","Returns `true` if the set is a superset of another.",547],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",547],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",547],[11,"eq","","",547],[11,"fmt","","",547],[11,"from_iter","","",547],[11,"extend","","",547],[11,"default","","",547],[6,"Output","std::collections::hash_set",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","std::collections","",547],[6,"Item","std::collections::hash_set",""],[11,"next","","",558],[11,"size_hint","","",558],[11,"len","","",558],[6,"Item","",""],[11,"next","","",559],[11,"size_hint","","",559],[11,"len","","",559],[6,"Item","",""],[11,"next","","",560],[11,"size_hint","","",560],[11,"len","","",560],[6,"Item","",""],[11,"next","","",561],[11,"size_hint","","",561],[6,"Item","",""],[11,"next","","",562],[11,"size_hint","","",562],[6,"Item","",""],[11,"next","","",563],[11,"size_hint","","",563],[6,"Item","",""],[11,"next","","",564],[11,"size_hint","","",564],[0,"hash_state","std::collections","Experimental support for providing custom hash algorithms to a HashMap and\nHashSet."],[3,"DefaultState","std::collections::hash_state","A structure which is a factory for instances of `Hasher` which implement the\ndefault trait."],[8,"HashState","","A trait representing stateful hashes which can be used to hash keys in a\n`HashMap`."],[16,"Hasher","std::collections::hash_state::HashState","Type of the hasher that will be created."],[10,"hasher","std::collections::hash_state","Creates a new hasher based on the given state of this object.",565],[6,"Hasher","",""],[11,"hasher","","",566],[11,"clone","","",566],[11,"default","","",566],[0,"thread","std","Native threads"],[3,"Builder","std::thread","Thread configuration. Provides detailed control over the properties\nand behavior of new threads."],[3,"Thread","","A handle to a thread."],[3,"JoinHandle","","An owned permission to join on a thread (block on its termination)."],[3,"JoinGuard","","An RAII-style guard that will block until thread termination when dropped."],[5,"spawn","","Spawn a new thread, returning a `JoinHandle` for it."],[5,"scoped","","Spawn a new *scoped* thread, returning a `JoinGuard` for it."],[5,"current","","Gets a handle to the thread that invokes it."],[5,"yield_now","","Cooperatively give up a timeslice to the OS scheduler."],[5,"panicking","","Determines whether the current thread is unwinding because of panic."],[5,"park","","Block unless or until the current thread's token is made available (may wake spuriously)."],[5,"park_timeout","","Block unless or until the current thread's token is made available or\nthe specified duration has been reached (may wake spuriously)."],[6,"Result","","Indicates the manner in which a thread exited."],[11,"new","","Generate the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",567],[11,"name","","Name the thread-to-be. Currently the name is used for identification\nonly in panic messages.",567],[11,"stack_size","","Set the size of the stack for the new thread.",567],[11,"stdout","","Redirect thread-local stdout.",567],[11,"stderr","","Redirect thread-local stderr.",567],[11,"spawn","","Spawn a new thread, and return a join handle for it.",567],[11,"scoped","","Spawn a new child thread that must be joined within a given\nscope, and return a `JoinGuard`.",567],[11,"clone","","",568],[11,"spawn","","Deprecated: use module-level free function.",568],[11,"scoped","","Deprecated: use module-level free function.",568],[11,"current","","Deprecated: use module-level free function.",568],[11,"yield_now","","Deprecated: use module-level free function.",568],[11,"panicking","","Deprecated: use module-level free function.",568],[11,"park","","Deprecated: use module-level free function.",568],[11,"park_timeout","","Deprecated: use module-level free function.",568],[11,"unpark","","Atomically makes the handle's token available if it is not already.",568],[11,"name","","Get the thread's name.",568],[11,"fmt","","",568],[11,"new","","",568],[11,"thread","","Extract a handle to the underlying thread",569],[11,"join","","Wait for the associated thread to finish.",569],[11,"drop","","",569],[11,"thread","","Extract a handle to the thread this guard will join on.",570],[11,"join","","Wait for the associated thread to finish, returning the result of the thread's\ncalculation.",570],[11,"detach","","Detaches the child thread, allowing it to outlive its parent.",570],[11,"drop","","",570],[0,"sync","std","Useful synchronization primitives"],[3,"Arc","std::sync","An atomically reference counted wrapper for shared state."],[3,"Weak","","A weak pointer to an `Arc`."],[0,"atomic","","Atomic types"],[3,"AtomicBool","std::sync::atomic","A boolean type which can be safely shared between threads."],[3,"AtomicIsize","","A signed integer type which can be safely shared between threads."],[3,"AtomicUsize","","An unsigned integer type which can be safely shared between threads."],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads."],[4,"Ordering","","Atomic memory orderings"],[13,"Relaxed","","No ordering constraints, only atomic operations.",571],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",571],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",571],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",571],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",571],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`."],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`."],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`."],[5,"fence","","An atomic fence."],[3,"AtomicInt","",""],[3,"AtomicUint","",""],[17,"ATOMIC_INT_INIT","",""],[17,"ATOMIC_UINT_INIT","",""],[3,"Mutex","std::sync","A mutual exclusion primitive useful for protecting shared data"],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked."],[3,"StaticMutex","","The static mutex type is provided to allow for static allocation of mutexes."],[3,"RwLock","","A reader-writer lock"],[3,"StaticRwLock","","Structure representing a statically allocated RwLock."],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when\ndropped."],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when\ndropped."],[3,"Condvar","","A Condition Variable"],[3,"StaticCondvar","","Statically allocated condition variables."],[3,"Once","","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue."],[3,"Semaphore","","A counting, blocking, semaphore."],[3,"SemaphoreGuard","","An RAII guard which will release a resource acquired from a semaphore when\ndropped."],[3,"Barrier","","A barrier enables multiple tasks to synchronize the beginning\nof some computation."],[3,"BarrierWaitResult","","A result returned from wait."],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired."],[3,"Future","","A type encapsulating the result of a computation which may not be complete"],[3,"TaskPool","","A thread pool used to execute functions in parallel."],[4,"TryLockError","","An enumeration of possible errors which can occur while calling the\n`try_lock` method."],[13,"Poisoned","","The lock could not be acquired because another task failed while holding\nthe lock.",572],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would\notherwise block.",572],[0,"mpsc","","Multi-producer, single-consumer FIFO queue communication primitives."],[3,"Select","std::sync::mpsc","The \"receiver set\" of the select interface. This structure is used to manage\na set of receivers which are being selected over."],[3,"Handle","","A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver."],[3,"Receiver","","The receiving-half of Rust's channel type. This half can only be owned by\none task"],[3,"Iter","","An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up."],[3,"Sender","","The sending-half of Rust's asynchronous channel type. This half can only be\nowned by one task, but it can be cloned to send to other tasks."],[3,"SyncSender","","The sending-half of Rust's synchronous channel type. This half can only be\nowned by one task, but it can be cloned to send to other tasks."],[3,"SendError","","An error returned from the `send` function on channels."],[3,"RecvError","","An error returned from the `recv` function on a `Receiver`."],[4,"TryRecvError","","This enumeration is the list of the possible reasons that try_recv could not\nreturn data when called."],[13,"Empty","","This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",573],[13,"Disconnected","","This channel's sending half has become disconnected, and there will\nnever be any more data received on this channel",573],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the\n`SyncSender::try_send` method."],[13,"Full","","The data could not be sent on the channel because it would require that\nthe callee block to send the data.",574],[13,"Disconnected","","This channel's receiving half has disconnected, so the data could not be\nsent. The data is returned back to the callee in this case.",574],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves."],[5,"sync_channel","","Creates a new synchronous, bounded channel."],[11,"new","","Creates a new selection structure. This set is initially empty.",575],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",575],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",575],[11,"id","","Retrieve the id of this handle.",576],[11,"recv","","Block to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",576],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",576],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",576],[11,"drop","","",575],[11,"drop","","",576],[11,"clone","","",577],[11,"eq","","",577],[11,"ne","","",577],[11,"fmt","","",578],[11,"clone","","",578],[11,"eq","","",578],[11,"ne","","",578],[11,"fmt","","",573],[11,"clone","","",573],[11,"eq","","",573],[11,"ne","","",573],[11,"clone","","",574],[11,"eq","","",574],[11,"ne","","",574],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",579],[11,"clone","","",579],[11,"drop","","",579],[11,"send","","Sends a value on this synchronous channel.",580],[11,"try_send","","Attempts to send a value on this channel without blocking.",580],[11,"clone","","",580],[11,"drop","","",580],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",581],[11,"recv","","Attempt to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",581],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",581],[6,"Item","",""],[11,"next","","",582],[11,"drop","","",581],[11,"fmt","","",577],[11,"fmt","","",577],[11,"fmt","","",574],[11,"fmt","","",574],[11,"fmt","","",578],[11,"fmt","","",573],[11,"new","std::sync","Create a new barrier that can block a given number of threads.",583],[11,"wait","","Block the current thread until all threads has rendezvoused here.",583],[11,"is_leader","","Return whether this thread from `wait` is the \"leader thread\".",584],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",585],[11,"wait","","Block the current thread until this condition variable receives a\nnotification.",585],[11,"wait_timeout","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",585],[11,"wait_timeout_with","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",585],[11,"notify_one","","Wake up one blocked thread on this condvar.",585],[11,"notify_all","","Wake up all blocked threads on this condvar.",585],[11,"drop","","",585],[11,"wait","","Block the current thread until this condition variable receives a\nnotification.",586],[11,"wait_timeout","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",586],[11,"wait_timeout_with","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",586],[11,"notify_one","","Wake up one blocked thread on this condvar.",586],[11,"notify_all","","Wake up all blocked threads on this condvar.",586],[11,"destroy","","Deallocate all resources associated with this static condvar.",586],[11,"get","","Get the value of the future.",587],[11,"into_inner","","Gets the value from this future, forcing evaluation.",587],[11,"get_ref","","Executes the future's closure and then returns a reference\nto the result.  The reference lasts as long as\nthe future.",587],[11,"from_value","","Create a future from a value.",587],[11,"from_fn","","Create a future from a function.",587],[11,"from_receiver","","Create a future from a port",587],[11,"spawn","","Create a future from a unique closure.",587],[11,"new","","Creates a new mutex in an unlocked state ready for use.",588],[11,"lock","","Acquires a mutex, blocking the current task until it is able to do so.",588],[11,"try_lock","","Attempts to acquire this lock.",588],[11,"is_poisoned","","Determine whether the lock is poisoned.",588],[11,"drop","","",588],[11,"fmt","","",588],[11,"lock","","Acquires this lock, see `Mutex::lock`",589],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",589],[11,"destroy","","Deallocates resources associated with this static mutex.",589],[11,"deref","","",590],[11,"deref_mut","","",590],[11,"drop","","",590],[11,"call_once","","Perform an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",591],[11,"fmt","","",592],[11,"fmt","","",592],[11,"description","","",592],[11,"new","","Create a `PoisonError`.",592],[11,"into_guard","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",592],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",592],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",592],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",592],[11,"from_error","","",572],[11,"fmt","","",572],[11,"fmt","","",572],[11,"description","","",572],[11,"cause","","",572],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",593],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",593],[11,"try_read","","Attempt to acquire this lock with shared read access.",593],[11,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",593],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",593],[11,"is_poisoned","","Determine whether the lock is poisoned.",593],[11,"drop","","",593],[11,"fmt","","",593],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",594],[11,"try_read","","Attempt to acquire this lock with shared read access.",594],[11,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",594],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",594],[11,"destroy","","Deallocate all resources associated with this static lock.",594],[11,"deref","","",595],[11,"deref","","",596],[11,"deref_mut","","",596],[11,"drop","","",595],[11,"drop","","",596],[11,"new","","Creates a new semaphore with the initial count specified.",597],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",597],[11,"release","","Release a resource from this semaphore.",597],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",597],[11,"drop","","",598],[11,"new","","Spawns a new thread pool with `threads` threads.",599],[11,"execute","","Executes the function `job` on a thread in the pool.",599],[6,"TryLockResult","","A type alias for the result of a nonblocking locking method."],[6,"LockResult","","A type alias for the result of a lock method which can be poisoned."],[17,"MUTEX_INIT","","Static initialization of a mutex. This constant can be used to initialize\nother mutex constants."],[17,"RW_LOCK_INIT","","Constant initialization for a statically-initialized rwlock."],[17,"CONDVAR_INIT","","Constant initializer for a statically allocated condition variable."],[17,"ONCE_INIT","","Initialization value for static `Once` values."],[11,"as_raw_fd","std::old_io::fs","",356],[11,"as_raw_fd","std::fs","",448],[11,"as_raw_fd","std::old_io::pipe","",375],[11,"as_raw_fd","std::old_io::net::pipe","",371],[11,"as_raw_fd","","",372],[11,"as_raw_fd","","",373],[11,"as_raw_fd","std::old_io::net::tcp","",363],[11,"as_raw_fd","","",364],[11,"as_raw_fd","","",365],[11,"as_raw_fd","std::old_io::net::udp","",366],[11,"as_raw_fd","std::net","",459],[11,"as_raw_fd","","",460],[11,"as_raw_fd","","",461],[11,"from_vec","std::ffi","",331],[11,"into_vec","","",331],[11,"from_bytes","","",332],[11,"as_bytes","","",332],[11,"to_cstring","","",332],[11,"mode","std::fs","",447],[11,"set_mode","","",447],[11,"mode","","",446],[11,"uid","std::process","",505],[11,"gid","","",505],[11,"signal","","",507],[0,"rt","std","Runtime services"],[0,"heap","std::rt",""],[5,"allocate","std::rt::heap","Return a pointer to `size` bytes of memory aligned to `align`."],[5,"reallocate","","Resize the allocation referenced by `ptr` to `size` bytes."],[5,"reallocate_inplace","","Resize the allocation referenced by `ptr` to `size` bytes."],[5,"deallocate","","Deallocates the memory referenced by `ptr`."],[5,"usable_size","","Returns the usable size of an allocation created with the specified the\n`size` and `align`."],[5,"stats_print","","Prints implementation-defined allocator statistics."],[17,"EMPTY","","An arbitrary non-null address to represent zero-size allocations."],[5,"at_exit","std::rt","Enqueues a procedure to run when the runtime is cleaned up"],[5,"cleanup","","One-time runtime cleanup."],[0,"backtrace","","Simple backtrace functionality (to print on panic)"],[5,"write","std::rt::backtrace",""],[5,"log_enabled","",""],[0,"util","std::rt",""],[3,"Stdio","std::rt::util",""],[5,"running_on_valgrind","","Dynamically inquire about whether we're running under V.\nYou should usually not use this unless your test definitely\ncan't run correctly un-altered. Valgrind is there to help\nyou notice weirdness in normal, un-doctored code paths!"],[5,"limit_thread_creation_due_to_osx_and_valgrind","","Valgrind has a fixed-sized array (size around 2000) of segment descriptors\nwired into it; this is a hard limit and requires rebuilding valgrind if you\nwant to go beyond it. Normally this is not a problem, but in some tests, we\nproduce a lot of threads casually.  Making lots of threads alone might not\nbe a problem _either_, except on OSX, the segments produced for new threads\n_take a while_ to get reclaimed by the OS. Combined with the fact that libuv\nschedulers fork off a separate thread for polling fsevents on OSX, we get a\nperfect storm of creating \"too many mappings\" for valgrind to handle when\nrunning certain stress tests in the runtime."],[5,"min_stack","",""],[5,"default_sched_threads","","Get's the number of scheduler threads requested by the environment\neither `RUST_THREADS` or `num_cpus`."],[5,"dumb_print","",""],[5,"abort","",""],[5,"report_overflow","",""],[17,"ENFORCE_SANITY","",""],[17,"Stdout","",""],[17,"Stderr","",""],[11,"write_bytes","","",600],[11,"write_str","","",600],[0,"unwind","std::rt","Implementation of Rust stack unwinding"],[5,"try","std::rt::unwind","Invoke a closure, capturing the cause of panic if one occurs."],[5,"panicking","","Determines whether the current thread is unwinding because of panic."],[5,"rust_begin_unwind","","Entry point of panic from the libcore crate."],[5,"begin_unwind_fmt","","The entry point for unwinding with a formatted message."],[5,"begin_unwind","","This is the entry point of unwinding for panic!() and assert!()."],[5,"register","","Register a callback to be invoked when a thread unwinds."],[6,"Callback","",""],[0,"args","std::rt","Global storage for command line arguments"],[5,"init","std::rt::args","One-time global initialization."],[5,"cleanup","","One-time global cleanup."],[5,"take","","Take the global arguments from global storage."],[5,"put","","Give the global arguments to global storage."],[5,"clone","","Make a clone of the global arguments."],[17,"DEFAULT_ERROR_CODE","std::rt","The default error code of the rust runtime if the main thread panics instead\nof exiting cleanly."],[11,"write_all","std::rt::util","",600],[14,"assert!","std","Ensure that a boolean expression is `true` at runtime."],[14,"assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[14,"debug_assert!","","Ensure that a boolean expression is `true` at runtime."],[14,"debug_assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[14,"write!","","Use the `format!` syntax to write data into a buffer of type `&mut Writer`.\nSee `std::fmt` for more information."],[14,"writeln!","","Equivalent to the `write!` macro, except that a newline is appended after\nthe message is written."],[14,"unreachable!","","A utility macro for indicating unreachable code."],[14,"unimplemented!","","A standardised placeholder for marking unfinished code. It panics with the\nmessage `\"not yet implemented\"` when executed."],[14,"vec!","","Creates a `Vec` containing the arguments."],[14,"format!","","Use the syntax described in `std::fmt` to create a value of type `String`.\nSee `std::fmt` for more information."],[14,"panic!","","The entry point for panic of Rust tasks."],[14,"print!","","Equivalent to the `println!` macro except that a newline is not printed at\nthe end of the message."],[14,"println!","","Macro for printing to a task's stdout handle."],[14,"try!","","Helper macro for unwrapping `Result` values while returning early with an\nerror if the value of the expression is `Err`. For more information, see\n`std::io`."],[14,"select!","","A macro to select an event from a number of receivers."],[14,"format_args!","","The core macro for formatted string creation & output."],[14,"env!","","Inspect an environment variable at compile time."],[14,"option_env!","","Optionally inspect an environment variable at compile time."],[14,"concat_idents!","","Concatenate identifiers into one identifier."],[14,"concat!","","Concatenates literals into a static string slice."],[14,"line!","","A macro which expands to the line number on which it was invoked."],[14,"column!","","A macro which expands to the column number on which it was invoked."],[14,"file!","","A macro which expands to the file name from which it was invoked."],[14,"stringify!","","A macro which stringifies its argument."],[14,"include_str!","","Includes a utf8-encoded file as a string."],[14,"include_bytes!","","Includes a file as a byte slice."],[14,"module_path!","","Expands to a string that represents the current module path."],[14,"cfg!","","Boolean evaluation of configuration flags."],[14,"scoped_thread_local!","","Declare a new scoped thread local storage key."],[14,"thread_local!","","Declare a new thread local storage key of type `std::thread_local::Key`."],[15,"slice","","Utilities for slice manipulation"],[15,"str","","Unicode string manipulation (the [`str`](../primitive.str.html) type)."],[15,"char","","Character manipulation (`char` type, Unicode Scalar Value)"],[15,"isize","","Operations and constants for pointer-sized signed integers (`isize` type)"],[15,"i8","","Operations and constants for signed 8-bits integers (`i8` type)"],[15,"i16","","Operations and constants for signed 16-bits integers (`i16` type)"],[15,"i32","","Operations and constants for signed 32-bits integers (`i32` type)"],[15,"i64","","Operations and constants for signed 64-bits integers (`i64` type)"],[15,"usize","","Operations and constants for pointer-sized unsigned integers (`usize` type)"],[15,"u8","","Operations and constants for unsigned 8-bits integers (`u8` type)"],[15,"u16","","Operations and constants for unsigned 16-bits integers (`u16` type)"],[15,"u32","","Operations and constants for unsigned 32-bits integers (`u32` type)"],[15,"u64","","Operations and constants for unsigned 64-bits integer (`u64` type)"],[15,"f32","","Operations and constants for 32-bits floats (`f32` type)"],[15,"f64","","Operations and constants for 64-bits floats (`f64` type)"],[15,"bool","","The boolean type"],[15,"tuple","","Operations on tuples"],[11,"from_error","std::io","",416],[11,"from_error","std::old_io","",335],[11,"as_os_str","std::old_path::posix","",491],[11,"write_all","std::old_io","",601],[11,"flush","","",601],[11,"read","","",601],[11,"tell","","",601],[11,"seek","","",601],[11,"listen","","",601],[11,"accept","","",601],[11,"stat","std::old_path::posix","",491],[11,"lstat","","",491],[11,"exists","","",491],[11,"is_file","","",491],[11,"is_dir","","",491],[11,"metadata","std::path","",489],[11,"exists","","",489],[11,"is_file","","",489],[11,"is_dir","","",489],[11,"uid","std::process","",505],[11,"gid","","",505],[11,"signal","","",507],[11,"clone","std::collections::hash_map","",549],[11,"clone","","",550],[11,"clone","","",551],[11,"next","","",549],[11,"size_hint","","",549],[11,"len","","",549],[11,"next","","",552],[11,"size_hint","","",552],[11,"len","","",552],[11,"next","","",553],[11,"size_hint","","",553],[11,"len","","",553],[11,"next","","",550],[11,"size_hint","","",550],[11,"len","","",550],[11,"next","","",551],[11,"size_hint","","",551],[11,"len","","",551],[11,"next","","",554],[11,"size_hint","","",554],[11,"len","","",554],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant.",548],[11,"get","","Gets a reference to the value in the entry.",555],[11,"get_mut","","Gets a mutable reference to the value in the entry.",555],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",555],[11,"insert","","Sets the value of the entry, and returns the entry's old value",555],[11,"remove","","Takes the value out of the entry, and returns it",555],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",556],[11,"clone","","",557],[11,"new","","Construct a new `RandomState` that is initialized with random keys.",557],[11,"hasher","","",557],[11,"default","","",557],[11,"next","std::collections::hash_set","",558],[11,"size_hint","","",558],[11,"len","","",558],[11,"next","","",559],[11,"size_hint","","",559],[11,"len","","",559],[11,"next","","",560],[11,"size_hint","","",560],[11,"len","","",560],[11,"next","","",561],[11,"size_hint","","",561],[11,"next","","",562],[11,"size_hint","","",562],[11,"next","","",563],[11,"size_hint","","",563],[11,"next","","",564],[11,"size_hint","","",564],[11,"hasher","std::collections::hash_state","",566],[11,"clone","","",566],[11,"default","","",566]],"paths":[[8,"Any"],[3,"TypeId"],[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"NoCopy"],[3,"Managed"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"BorrowRefMut"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Finallyalizer"],[3,"Rev"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Unfold"],[3,"Counter"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Repeat"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqPattern"],[3,"CharEqSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[4,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"BytesDeref"],[3,"CharSplits"],[3,"CharSplitsN"],[3,"TwoWaySearcher"],[4,"OldSearcher"],[3,"OldMatchIndices"],[3,"MatchIndices"],[3,"SplitStr"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[4,"Alignment"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"Default"],[8,"Finally"],[8,"Hash"],[8,"Hasher"],[3,"TyDesc"],[8,"Iterator"],[8,"FromIterator"],[8,"IntoIterator"],[8,"Extend"],[8,"IteratorExt"],[8,"DoubleEndedIterator"],[8,"RandomAccessIterator"],[8,"ExactSizeIterator"],[8,"AdditiveIterator"],[8,"MultiplicativeIterator"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"PtrExt"],[8,"MutPtrExt"],[3,"Slice"],[3,"Closure"],[3,"TraitObject"],[8,"Repr"],[8,"Error"],[8,"FromError"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[8,"BoxAny"],[8,"Borrow"],[8,"BorrowMut"],[8,"ToOwned"],[4,"Cow"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BitVec"],[3,"Iter"],[3,"BitSet"],[3,"SetIter"],[3,"TwoBitPositions"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"AbsIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"ElementSwaps"],[3,"Vec"],[4,"Direction"],[3,"SizeDirection"],[3,"Permutations"],[4,"DecompositionType"],[3,"Decompositions"],[4,"RecompositionState"],[3,"Recompositions"],[3,"Utf16Units"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"DerefString"],[3,"IntoIter"],[3,"Drain"],[3,"DerefVec"],[3,"PartialVecNonZeroSized"],[3,"PartialVecZeroSized"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"VecMap"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[8,"IntoCow"],[8,"Write"],[8,"Octal"],[8,"Debug"],[8,"LowerHex"],[8,"UpperHex"],[8,"Binary"],[8,"UpperExp"],[8,"Pointer"],[8,"LowerExp"],[8,"Display"],[8,"SliceExt"],[8,"SliceConcatExt"],[8,"IntSliceExt"],[8,"MutableByteVector"],[8,"AsSlice"],[8,"StrExt"],[4,"GraphemeCat"],[3,"GraphemeIndices"],[3,"Graphemes"],[4,"GraphemeState"],[3,"Utf16Items"],[4,"Utf16Item"],[3,"Utf16Encoder"],[3,"Words"],[8,"Searcher"],[8,"Str"],[8,"CharEq"],[8,"FromStr"],[8,"ReverseSearcher"],[8,"Pattern"],[3,"CharRange"],[8,"ToString"],[8,"CharExt"],[8,"OwnedAsciiExt"],[8,"AsciiExt"],[3,"EscapeDefault"],[8,"Invoke"],[3,"Thunk"],[8,"Int"],[8,"SignedInt"],[8,"UnsignedInt"],[8,"FromPrimitive"],[8,"NumCast"],[8,"ToPrimitive"],[8,"FromStrRadix"],[8,"WrappingOps"],[8,"OverflowingOps"],[4,"ExponentFormat"],[4,"SignificantDigits"],[4,"SignFormat"],[8,"Float"],[4,"State"],[3,"Key"],[3,"Key"],[3,"DynamicLibrary"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"OsString"],[3,"OsStr"],[8,"IntoBytes"],[8,"AsOsStr"],[3,"IoError"],[3,"FileStat"],[3,"UnstableFileStat"],[4,"IoErrorKind"],[4,"SeekStyle"],[4,"FileMode"],[4,"FileAccess"],[4,"FileType"],[3,"BufferedReader"],[3,"BufferedWriter"],[3,"LineBufferedWriter"],[3,"BufferedStream"],[3,"ChanReader"],[3,"ChanWriter"],[3,"MemWriter"],[3,"MemReader"],[3,"BufWriter"],[3,"BufReader"],[3,"TempDir"],[3,"Bytes"],[8,"PathExtensions"],[3,"File"],[3,"Directories"],[3,"Hint"],[3,"Info"],[4,"SocketType"],[4,"Flag"],[4,"Protocol"],[3,"TcpStream"],[3,"TcpListener"],[3,"TcpAcceptor"],[3,"UdpSocket"],[3,"SocketAddr"],[4,"IpAddr"],[8,"ToSocketAddr"],[3,"ParseError"],[3,"UnixStream"],[3,"UnixListener"],[3,"UnixAcceptor"],[3,"PipePair"],[3,"PipeStream"],[3,"Process"],[3,"ProcessOutput"],[4,"StdioContainer"],[4,"ProcessExit"],[3,"Command"],[3,"StdinReader"],[3,"StdinReaderGuard"],[3,"StdReader"],[3,"StdWriter"],[3,"Timer"],[3,"LimitReader"],[3,"NullWriter"],[3,"ZeroReader"],[3,"NullReader"],[3,"MultiWriter"],[3,"ChainedReader"],[3,"TeeReader"],[3,"IterReader"],[8,"Reader"],[8,"ByRefReader"],[8,"BytesReader"],[8,"Writer"],[8,"ByRefWriter"],[8,"Buffer"],[8,"BufferPrelude"],[8,"Seek"],[8,"Listener"],[8,"Acceptor"],[3,"RefReader"],[3,"RefWriter"],[3,"Lines"],[3,"Chars"],[3,"IncomingConnections"],[3,"FilePermission"],[4,"ErrorKind"],[4,"SeekFrom"],[4,"CharsError"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"Error"],[3,"LineWriter"],[3,"BufStream"],[3,"Cursor"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[8,"Read"],[8,"ReadExt"],[8,"Write"],[8,"WriteExt"],[8,"Seek"],[8,"BufRead"],[8,"BufReadExt"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[3,"Chars"],[3,"Split"],[3,"Lines"],[3,"TempDir"],[8,"PathExt"],[3,"OpenOptions"],[3,"Permissions"],[3,"File"],[3,"Metadata"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[4,"Shutdown"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"SocketAddr"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"ToSocketAddrs"],[3,"LookupHost"],[3,"Pipe"],[4,"MemoryMapKind"],[4,"MapOption"],[4,"MapError"],[8,"AsRawFd"],[8,"OsStrExt"],[8,"OsStringExt"],[8,"PermissionsExt"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"OpenOptionsExt"],[3,"MemoryMap"],[4,"VarError"],[3,"Vars"],[3,"VarsOs"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[4,"Prefix"],[4,"Component"],[8,"AsPath"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"Display"],[3,"Path"],[3,"ParsePathError"],[4,"PathPrefix"],[3,"Path"],[3,"ParsePathError"],[8,"GenericPath"],[8,"BytesContainer"],[8,"GenericPathUnsafe"],[3,"Display"],[3,"Child"],[3,"Output"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"Command"],[3,"Stdio"],[3,"ExitStatus"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Range"],[3,"Gamma"],[3,"GammaSmallShape"],[3,"GammaLargeShape"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[8,"SampleRange"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[8,"Reseeder"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"Duration"],[4,"Bound"],[3,"HashMap"],[3,"HashSet"],[4,"Entry"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[8,"HashState"],[3,"DefaultState"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"JoinGuard"],[4,"Ordering"],[4,"TryLockError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Select"],[3,"Handle"],[3,"SendError"],[3,"RecvError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Future"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"PoisonError"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"TaskPool"],[3,"Stdio"],[6,"IoResult"]]};
initSearch(searchIndex);
