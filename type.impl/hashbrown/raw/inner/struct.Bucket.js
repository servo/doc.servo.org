(function() {var type_impls = {
"indexmap":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Bucket%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/raw/mod.rs.html#307\">source</a><a href=\"#impl-Bucket%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"hashbrown/raw/inner/struct.Bucket.html\" title=\"struct hashbrown::raw::inner::Bucket\">Bucket</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/raw/mod.rs.html#513\">source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/raw/inner/struct.Bucket.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Acquires the underlying raw pointer <code>*mut T</code> to <code>data</code>.</p>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h5>\n<p>If <code>T</code> is not <a href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\"><code>Copy</code></a>, do not use <code>*mut T</code> methods that can cause calling the\ndestructor of <code>T</code> (for example the <a href=\"https://doc.rust-lang.org/core/primitive.pointer.html#method.drop_in_place\"><code>&lt;*mut T&gt;::drop_in_place</code></a> method), because\nfor properly dropping the data we also need to clear <code>data</code> control bytes. If we\ndrop data, but do not clear <code>data control byte</code> it leads to double drop when\n<a href=\"hashbrown/raw/inner/struct.RawTable.html\" title=\"struct hashbrown::raw::inner::RawTable\"><code>RawTable</code></a> goes out of scope.</p>\n<p>If you modify an already initialized <code>value</code>, so <a href=\"https://doc.rust-lang.org/core/hash/trait.Hash.html\"><code>Hash</code></a> and <a href=\"https://doc.rust-lang.org/core/cmp/trait.Eq.html\"><code>Eq</code></a> on the new\n<code>T</code> value and its borrowed form <em>must</em> match those for the old <code>T</code> value, as the map\nwill not re-evaluate where the new value should go, meaning the value may become\n“lost” if their location does not reflect their state.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::hash::{BuildHasher, Hash};\n<span class=\"kw\">use </span>hashbrown::raw::{Bucket, RawTable};\n\n<span class=\"kw\">type </span>NewHashBuilder = core::hash::BuildHasherDefault&lt;ahash::AHasher&gt;;\n\n<span class=\"kw\">fn </span>make_hash&lt;K: Hash + <span class=\"question-mark\">?</span>Sized, S: BuildHasher&gt;(hash_builder: <span class=\"kw-2\">&amp;</span>S, key: <span class=\"kw-2\">&amp;</span>K) -&gt; u64 {\n    <span class=\"kw\">use </span>core::hash::Hasher;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>state = hash_builder.build_hasher();\n    key.hash(<span class=\"kw-2\">&amp;mut </span>state);\n    state.finish()\n}\n\n<span class=\"kw\">let </span>hash_builder = NewHashBuilder::default();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = RawTable::new();\n\n<span class=\"kw\">let </span>value = (<span class=\"string\">\"a\"</span>, <span class=\"number\">100</span>);\n<span class=\"kw\">let </span>hash = make_hash(<span class=\"kw-2\">&amp;</span>hash_builder, <span class=\"kw-2\">&amp;</span>value.<span class=\"number\">0</span>);\n\ntable.insert(hash, value.clone(), |val| make_hash(<span class=\"kw-2\">&amp;</span>hash_builder, <span class=\"kw-2\">&amp;</span>val.<span class=\"number\">0</span>));\n\n<span class=\"kw\">let </span>bucket: Bucket&lt;(<span class=\"kw-2\">&amp;</span>str, i32)&gt; = table.find(hash, |(k1, <span class=\"kw\">_</span>)| k1 == <span class=\"kw-2\">&amp;</span>value.<span class=\"number\">0</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>bucket.as_ptr() }, <span class=\"kw-2\">&amp;</span>(<span class=\"string\">\"a\"</span>, <span class=\"number\">100</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/raw/mod.rs.html#682\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"hashbrown/raw/inner/struct.Bucket.html#tymethod.as_ref\" class=\"fn\">as_ref</a>&lt;'a&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class=\"docblock\"><p>Returns a shared immutable reference to the <code>value</code>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>See <a href=\"https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.as_ref\"><code>NonNull::as_ref</code></a> for safety concerns.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::hash::{BuildHasher, Hash};\n<span class=\"kw\">use </span>hashbrown::raw::{Bucket, RawTable};\n\n<span class=\"kw\">type </span>NewHashBuilder = core::hash::BuildHasherDefault&lt;ahash::AHasher&gt;;\n\n<span class=\"kw\">fn </span>make_hash&lt;K: Hash + <span class=\"question-mark\">?</span>Sized, S: BuildHasher&gt;(hash_builder: <span class=\"kw-2\">&amp;</span>S, key: <span class=\"kw-2\">&amp;</span>K) -&gt; u64 {\n    <span class=\"kw\">use </span>core::hash::Hasher;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>state = hash_builder.build_hasher();\n    key.hash(<span class=\"kw-2\">&amp;mut </span>state);\n    state.finish()\n}\n\n<span class=\"kw\">let </span>hash_builder = NewHashBuilder::default();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = RawTable::new();\n\n<span class=\"kw\">let </span>value: (<span class=\"kw-2\">&amp;</span>str, String) = (<span class=\"string\">\"A pony\"</span>, <span class=\"string\">\"is a small horse\"</span>.to_owned());\n<span class=\"kw\">let </span>hash = make_hash(<span class=\"kw-2\">&amp;</span>hash_builder, <span class=\"kw-2\">&amp;</span>value.<span class=\"number\">0</span>);\n\ntable.insert(hash, value.clone(), |val| make_hash(<span class=\"kw-2\">&amp;</span>hash_builder, <span class=\"kw-2\">&amp;</span>val.<span class=\"number\">0</span>));\n\n<span class=\"kw\">let </span>bucket: Bucket&lt;(<span class=\"kw-2\">&amp;</span>str, String)&gt; = table.find(hash, |(k, <span class=\"kw\">_</span>)| k == <span class=\"kw-2\">&amp;</span>value.<span class=\"number\">0</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"kw\">unsafe </span>{ bucket.as_ref() },\n    <span class=\"kw-2\">&amp;</span>(<span class=\"string\">\"A pony\"</span>, <span class=\"string\">\"is a small horse\"</span>.to_owned())\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/raw/mod.rs.html#750\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"hashbrown/raw/inner/struct.Bucket.html#tymethod.as_mut\" class=\"fn\">as_mut</a>&lt;'a&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;'a mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a unique mutable reference to the <code>value</code>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>See <a href=\"https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.as_mut\"><code>NonNull::as_mut</code></a> for safety concerns.</p>\n<h5 id=\"note-1\"><a class=\"doc-anchor\" href=\"#note-1\">§</a>Note</h5>\n<p><a href=\"https://doc.rust-lang.org/core/hash/trait.Hash.html\"><code>Hash</code></a> and <a href=\"https://doc.rust-lang.org/core/cmp/trait.Eq.html\"><code>Eq</code></a> on the new <code>T</code> value and its borrowed form <em>must</em> match\nthose for the old <code>T</code> value, as the map will not re-evaluate where the new\nvalue should go, meaning the value may become “lost” if their location\ndoes not reflect their state.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::hash::{BuildHasher, Hash};\n<span class=\"kw\">use </span>hashbrown::raw::{Bucket, RawTable};\n\n<span class=\"kw\">type </span>NewHashBuilder = core::hash::BuildHasherDefault&lt;ahash::AHasher&gt;;\n\n<span class=\"kw\">fn </span>make_hash&lt;K: Hash + <span class=\"question-mark\">?</span>Sized, S: BuildHasher&gt;(hash_builder: <span class=\"kw-2\">&amp;</span>S, key: <span class=\"kw-2\">&amp;</span>K) -&gt; u64 {\n    <span class=\"kw\">use </span>core::hash::Hasher;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>state = hash_builder.build_hasher();\n    key.hash(<span class=\"kw-2\">&amp;mut </span>state);\n    state.finish()\n}\n\n<span class=\"kw\">let </span>hash_builder = NewHashBuilder::default();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = RawTable::new();\n\n<span class=\"kw\">let </span>value: (<span class=\"kw-2\">&amp;</span>str, String) = (<span class=\"string\">\"A pony\"</span>, <span class=\"string\">\"is a small horse\"</span>.to_owned());\n<span class=\"kw\">let </span>hash = make_hash(<span class=\"kw-2\">&amp;</span>hash_builder, <span class=\"kw-2\">&amp;</span>value.<span class=\"number\">0</span>);\n\ntable.insert(hash, value.clone(), |val| make_hash(<span class=\"kw-2\">&amp;</span>hash_builder, <span class=\"kw-2\">&amp;</span>val.<span class=\"number\">0</span>));\n\n<span class=\"kw\">let </span>bucket: Bucket&lt;(<span class=\"kw-2\">&amp;</span>str, String)&gt; = table.find(hash, |(k, <span class=\"kw\">_</span>)| k == <span class=\"kw-2\">&amp;</span>value.<span class=\"number\">0</span>).unwrap();\n\n<span class=\"kw\">unsafe </span>{\n    bucket\n        .as_mut()\n        .<span class=\"number\">1\n        </span>.push_str(<span class=\"string\">\" less than 147 cm at the withers\"</span>)\n};\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"kw\">unsafe </span>{ bucket.as_ref() },\n    <span class=\"kw-2\">&amp;</span>(\n        <span class=\"string\">\"A pony\"</span>,\n        <span class=\"string\">\"is a small horse less than 147 cm at the withers\"</span>.to_owned()\n    )\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_from_nonoverlapping\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/raw/mod.rs.html#780\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"hashbrown/raw/inner/struct.Bucket.html#tymethod.copy_from_nonoverlapping\" class=\"fn\">copy_from_nonoverlapping</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"hashbrown/raw/inner/struct.Bucket.html\" title=\"struct hashbrown::raw::inner::Bucket\">Bucket</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Copies <code>size_of&lt;T&gt;</code> bytes from <code>other</code> to <code>self</code>. The source\nand destination may <em>not</em> overlap.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>See <a href=\"https://doc.rust-lang.org/core/ptr/fn.copy_nonoverlapping.html\"><code>ptr::copy_nonoverlapping</code></a> for safety concerns.</p>\n<p>Like <a href=\"https://doc.rust-lang.org/core/ptr/fn.read.html\"><code>read</code></a>, <code>copy_nonoverlapping</code> creates a bitwise copy of <code>T</code>, regardless of\nwhether <code>T</code> is <a href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\"><code>Copy</code></a>. If <code>T</code> is not <a href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\"><code>Copy</code></a>, using <em>both</em> the values\nin the region beginning at <code>*self</code> and the region beginning at <code>*other</code> can\n<a href=\"https://doc.rust-lang.org/std/ptr/fn.read.html#ownership-of-the-returned-value\">violate memory safety</a>.</p>\n<h5 id=\"note-2\"><a class=\"doc-anchor\" href=\"#note-2\">§</a>Note</h5>\n<p><a href=\"https://doc.rust-lang.org/core/hash/trait.Hash.html\"><code>Hash</code></a> and <a href=\"https://doc.rust-lang.org/core/cmp/trait.Eq.html\"><code>Eq</code></a> on the new <code>T</code> value and its borrowed form <em>must</em> match\nthose for the old <code>T</code> value, as the map will not re-evaluate where the new\nvalue should go, meaning the value may become “lost” if their location\ndoes not reflect their state.</p>\n</div></details></div></details>",0,"indexmap::map::core::raw::RawBucket"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Bucket%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/raw/mod.rs.html#300\">source</a><a href=\"#impl-Clone-for-Bucket%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"hashbrown/raw/inner/struct.Bucket.html\" title=\"struct hashbrown::raw::inner::Bucket\">Bucket</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/raw/mod.rs.html#302\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"hashbrown/raw/inner/struct.Bucket.html\" title=\"struct hashbrown::raw::inner::Bucket\">Bucket</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","indexmap::map::core::raw::RawBucket"],["<section id=\"impl-Send-for-Bucket%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/raw/mod.rs.html#298\">source</a><a href=\"#impl-Send-for-Bucket%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"hashbrown/raw/inner/struct.Bucket.html\" title=\"struct hashbrown::raw::inner::Bucket\">Bucket</a>&lt;T&gt;</h3></section>","Send","indexmap::map::core::raw::RawBucket"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()