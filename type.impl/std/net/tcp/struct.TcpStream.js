(function() {var type_impls = {
"socket2":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsFd-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/fd/owned.rs.html#311\">source</a></span><a href=\"#impl-AsFd-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/owned/trait.AsFd.html\" title=\"trait std::os::fd::owned::AsFd\">AsFd</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/fd/owned.rs.html#313\">source</a><a href=\"#method.as_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/owned/trait.AsFd.html#tymethod.as_fd\" class=\"fn\">as_fd</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/owned/struct.BorrowedFd.html\" title=\"struct std::os::fd::owned::BorrowedFd\">BorrowedFd</a>&lt;'_&gt;</h4></section></summary><div class='docblock'>Borrows the file descriptor. <a href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/owned/trait.AsFd.html#tymethod.as_fd\">Read more</a></div></details></div></details>","AsFd","socket2::socket::Inner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRawFd-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/fd/net.rs.html#17\">source</a></span><a href=\"#impl-AsRawFd-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/raw/trait.AsRawFd.html\" title=\"trait std::os::fd::raw::AsRawFd\">AsRawFd</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/fd/net.rs.html#17\">source</a><a href=\"#method.as_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/raw/trait.AsRawFd.html#tymethod.as_raw_fd\" class=\"fn\">as_raw_fd</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Extracts the raw file descriptor. <a href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/raw/trait.AsRawFd.html#tymethod.as_raw_fd\">Read more</a></div></details></div></details>","AsRawFd","socket2::socket::Inner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#715\">source</a></span><a href=\"#impl-Debug-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#716\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","socket2::socket::Inner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3COwnedFd%3E-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/fd/owned.rs.html#328\">source</a></span><a href=\"#impl-From%3COwnedFd%3E-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/owned/struct.OwnedFd.html\" title=\"struct std::os::fd::owned::OwnedFd\">OwnedFd</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/fd/owned.rs.html#330\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(owned_fd: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/owned/struct.OwnedFd.html\" title=\"struct std::os::fd::owned::OwnedFd\">OwnedFd</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"TcpStream\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<OwnedFd>","socket2::socket::Inner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSocket%3E-for-TcpStream\" class=\"impl\"><a class=\"src rightside\" href=\"src/socket2/socket.rs.html#2212\">source</a><a href=\"#impl-From%3CSocket%3E-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"socket2/socket/struct.Socket.html\" title=\"struct socket2::socket::Socket\">Socket</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/socket2/socket.rs.html#2212\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(socket: <a class=\"struct\" href=\"socket2/socket/struct.Socket.html\" title=\"struct socket2::socket::Socket\">Socket</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"TcpStream\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Socket>","socket2::socket::Inner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromRawFd-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/fd/net.rs.html#33\">source</a></span><a href=\"#impl-FromRawFd-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/raw/trait.FromRawFd.html\" title=\"trait std::os::fd::raw::FromRawFd\">FromRawFd</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/fd/net.rs.html#33\">source</a><a href=\"#method.from_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/raw/trait.FromRawFd.html#tymethod.from_raw_fd\" class=\"fn\">from_raw_fd</a>(fd: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"TcpStream\">ⓘ</a></h4></section></summary><div class='docblock'>Constructs a new instance of <code>Self</code> from the given raw file\ndescriptor. <a href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/raw/trait.FromRawFd.html#tymethod.from_raw_fd\">Read more</a></div></details></div></details>","FromRawFd","socket2::socket::Inner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoRawFd-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/fd/net.rs.html#46\">source</a></span><a href=\"#impl-IntoRawFd-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/raw/trait.IntoRawFd.html\" title=\"trait std::os::fd::raw::IntoRawFd\">IntoRawFd</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/fd/net.rs.html#46\">source</a><a href=\"#method.into_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/raw/trait.IntoRawFd.html#tymethod.into_raw_fd\" class=\"fn\">into_raw_fd</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Consumes this object, returning the raw underlying file descriptor. <a href=\"https://doc.rust-lang.org/1.80.1/std/os/fd/raw/trait.IntoRawFd.html#tymethod.into_raw_fd\">Read more</a></div></details></div></details>","IntoRawFd","socket2::socket::Inner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Read-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#617\">source</a></span><a href=\"#impl-Read-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#618\">source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#622\">source</a><a href=\"#method.read_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, buf: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/io/borrowed_buf/struct.BorrowedCursor.html\" title=\"struct core::io::borrowed_buf::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>)</span></div></span><div class='docblock'>Pull some bytes from this source into the specified buffer. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#626\">source</a><a href=\"#method.read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#631\">source</a><a href=\"#method.is_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_to_end\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/io/mod.rs.html#865\">source</a></span><a href=\"#method.read_to_end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_to_string\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/io/mod.rs.html#908\">source</a></span><a href=\"#method.read_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/io/mod.rs.html#961\">source</a></span><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read the exact number of bytes required to fill <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_buf_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/io/mod.rs.html#995\">source</a><a href=\"#method.read_buf_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/io/borrowed_buf/struct.BorrowedCursor.html\" title=\"struct core::io::borrowed_buf::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>)</span></div></span><div class='docblock'>Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/io/mod.rs.html#1034-1036\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bytes\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/io/mod.rs.html#1077-1079\">source</a></span><a href=\"#method.bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Transforms this <code>Read</code> instance to an <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/io/mod.rs.html#1115-1117\">source</a></span><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adapter which will chain this stream with another. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/io/mod.rs.html#1154-1156\">source</a></span><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#method.take\">Read more</a></div></details></div></details>","Read","socket2::socket::Inner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TcpStreamExt-for-TcpStream\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/net/linux_ext/tcp.rs.html#107\">source</a><a href=\"#impl-TcpStreamExt-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/std/os/net/linux_ext/tcp/trait.TcpStreamExt.html\" title=\"trait std::os::net::linux_ext::tcp::TcpStreamExt\">TcpStreamExt</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_quickack\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/net/linux_ext/tcp.rs.html#108\">source</a><a href=\"#method.set_quickack\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/os/net/linux_ext/tcp/trait.TcpStreamExt.html#tymethod.set_quickack\" class=\"fn\">set_quickack</a>(&amp;self, quickack: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>tcp_quickack</code>)</span></div></span><div class='docblock'>Enable or disable <code>TCP_QUICKACK</code>. <a href=\"https://doc.rust-lang.org/1.80.1/std/os/net/linux_ext/tcp/trait.TcpStreamExt.html#tymethod.set_quickack\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.quickack\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/net/linux_ext/tcp.rs.html#112\">source</a><a href=\"#method.quickack\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/os/net/linux_ext/tcp/trait.TcpStreamExt.html#tymethod.quickack\" class=\"fn\">quickack</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>tcp_quickack</code>)</span></div></span><div class='docblock'>Gets the value of the <code>TCP_QUICKACK</code> option on this socket. <a href=\"https://doc.rust-lang.org/1.80.1/std/os/net/linux_ext/tcp/trait.TcpStreamExt.html#tymethod.quickack\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_deferaccept\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/net/linux_ext/tcp.rs.html#117\">source</a><a href=\"#method.set_deferaccept\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/os/net/linux_ext/tcp/trait.TcpStreamExt.html#tymethod.set_deferaccept\" class=\"fn\">set_deferaccept</a>(&amp;self, accept: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>tcp_deferaccept</code>)</span></div></span><div class='docblock'>A socket listener will be awakened solely when data arrives. <a href=\"https://doc.rust-lang.org/1.80.1/std/os/net/linux_ext/tcp/trait.TcpStreamExt.html#tymethod.set_deferaccept\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deferaccept\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/os/net/linux_ext/tcp.rs.html#122\">source</a><a href=\"#method.deferaccept\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/os/net/linux_ext/tcp/trait.TcpStreamExt.html#tymethod.deferaccept\" class=\"fn\">deferaccept</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>tcp_deferaccept</code>)</span></div></span><div class='docblock'>Gets the accept delay value (in seconds) of the <code>TCP_DEFER_ACCEPT</code> option. <a href=\"https://doc.rust-lang.org/1.80.1/std/os/net/linux_ext/tcp/trait.TcpStreamExt.html#tymethod.deferaccept\">Read more</a></div></details></div></details>","TcpStreamExt","socket2::socket::Inner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TcpStream\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#113\">source</a><a href=\"#impl-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.connect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#156\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.connect\" class=\"fn\">connect</a>&lt;A&gt;(addr: A) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/std/net/socket_addr/trait.ToSocketAddrs.html\" title=\"trait std::net::socket_addr::ToSocketAddrs\">ToSocketAddrs</a>,</div></h4></section></summary><div class=\"docblock\"><p>Opens a TCP connection to a remote host.</p>\n<p><code>addr</code> is an address of the remote host. Anything which implements\n<a href=\"https://doc.rust-lang.org/1.80.1/std/net/socket_addr/trait.ToSocketAddrs.html\" title=\"trait std::net::socket_addr::ToSocketAddrs\"><code>ToSocketAddrs</code></a> trait can be supplied for the address; see this trait\ndocumentation for concrete examples.</p>\n<p>If <code>addr</code> yields multiple addresses, <code>connect</code> will be attempted with\neach of the addresses until a connection is successful. If none of\nthe addresses result in a successful connection, the error returned from\nthe last connection attempt (the last address) is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Open a TCP connection to <code>127.0.0.1:8080</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(stream) = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Connected to the server!\"</span>);\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Couldn't connect to server...\"</span>);\n}</code></pre></div>\n<p>Open a TCP connection to <code>127.0.0.1:8080</code>. If the connection fails, open\na TCP connection to <code>127.0.0.1:8081</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{SocketAddr, TcpStream};\n\n<span class=\"kw\">let </span>addrs = [\n    SocketAddr::from(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">8080</span>)),\n    SocketAddr::from(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">8081</span>)),\n];\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(stream) = TcpStream::connect(<span class=\"kw-2\">&amp;</span>addrs[..]) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Connected to the server!\"</span>);\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Couldn't connect to server...\"</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.connect_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#172\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.connect_timeout\" class=\"fn\">connect_timeout</a>(\n    addr: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>,\n    timeout: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Opens a TCP connection to a remote host with a timeout.</p>\n<p>Unlike <code>connect</code>, <code>connect_timeout</code> takes a single <a href=\"https://doc.rust-lang.org/1.80.1/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\"><code>SocketAddr</code></a> since\ntimeout must be applied to individual addresses.</p>\n<p>It is an error to pass a zero <code>Duration</code> to this function.</p>\n<p>Unlike other methods on <code>TcpStream</code>, this does not correspond to a\nsingle system call. It instead calls <code>connect</code> in nonblocking mode and\nthen uses an OS-specific mechanism to await the completion of the\nconnection request.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peer_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#189\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.peer_addr\" class=\"fn\">peer_addr</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the socket address of the remote peer of this TCP connection.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{Ipv4Addr, SocketAddr, SocketAddrV4, TcpStream};\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.peer_addr().unwrap(),\n           SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"number\">8080</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.local_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#206\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.local_addr\" class=\"fn\">local_addr</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the socket address of the local half of this TCP connection.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{IpAddr, Ipv4Addr, TcpStream};\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.local_addr().unwrap().ip(),\n           IpAddr::V4(Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shutdown\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#233\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.shutdown\" class=\"fn\">shutdown</a>(&amp;self, how: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/std/net/enum.Shutdown.html\" title=\"enum std::net::Shutdown\">Shutdown</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Shuts down the read, write, or both halves of this connection.</p>\n<p>This function will cause all pending and future I/O on the specified\nportions to return immediately with an appropriate value (see the\ndocumentation of <a href=\"https://doc.rust-lang.org/1.80.1/std/net/enum.Shutdown.html\" title=\"enum std::net::Shutdown\"><code>Shutdown</code></a>).</p>\n<h5 id=\"platform-specific-behavior\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior\">§</a>Platform-specific behavior</h5>\n<p>Calling this function multiple times may result in different behavior,\ndepending on the operating system. On Linux, the second call will\nreturn <code>Ok(())</code>, but on macOS, it will return <code>ErrorKind::NotConnected</code>.\nThis may change in the future.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{Shutdown, TcpStream};\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.shutdown(Shutdown::Both).expect(<span class=\"string\">\"shutdown call failed\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_clone\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#254\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.try_clone\" class=\"fn\">try_clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new independently owned handle to the underlying socket.</p>\n<p>The returned <code>TcpStream</code> is a reference to the same stream that this\nobject references. Both handles will read and write the same stream of\ndata, and options set on one stream will be propagated to the other\nstream.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\n<span class=\"kw\">let </span>stream_clone = stream.try_clone().expect(<span class=\"string\">\"clone failed...\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_read_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#298\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.set_read_timeout\" class=\"fn\">set_read_timeout</a>(&amp;self, dur: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the read timeout to the timeout specified.</p>\n<p>If the value specified is <a href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read</code></a> calls will block\nindefinitely. An <a href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> is returned if the zero <a href=\"https://doc.rust-lang.org/1.80.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\"><code>Duration</code></a> is\npassed to this method.</p>\n<h5 id=\"platform-specific-behavior-1\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-1\">§</a>Platform-specific behavior</h5>\n<p>Platforms may return a different error code whenever a read times out as\na result of setting this option. For example Unix typically returns an\nerror of the kind <a href=\"https://doc.rust-lang.org/1.80.1/std/io/error/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::error::ErrorKind::WouldBlock\"><code>WouldBlock</code></a>, but Windows may return <a href=\"https://doc.rust-lang.org/1.80.1/std/io/error/enum.ErrorKind.html#variant.TimedOut\" title=\"variant std::io::error::ErrorKind::TimedOut\"><code>TimedOut</code></a>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_read_timeout(<span class=\"prelude-val\">None</span>).expect(<span class=\"string\">\"set_read_timeout call failed\"</span>);</code></pre></div>\n<p>An <a href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> is returned if the zero <a href=\"https://doc.rust-lang.org/1.80.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\"><code>Duration</code></a> is passed to this\nmethod:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::net::TcpStream;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>).unwrap();\n<span class=\"kw\">let </span>result = stream.set_read_timeout(<span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>err = result.unwrap_err();\n<span class=\"macro\">assert_eq!</span>(err.kind(), io::ErrorKind::InvalidInput)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_write_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#342\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.set_write_timeout\" class=\"fn\">set_write_timeout</a>(&amp;self, dur: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the write timeout to the timeout specified.</p>\n<p>If the value specified is <a href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a> calls will block\nindefinitely. An <a href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> is returned if the zero <a href=\"https://doc.rust-lang.org/1.80.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\"><code>Duration</code></a> is\npassed to this method.</p>\n<h5 id=\"platform-specific-behavior-2\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-2\">§</a>Platform-specific behavior</h5>\n<p>Platforms may return a different error code whenever a write times out\nas a result of setting this option. For example Unix typically returns\nan error of the kind <a href=\"https://doc.rust-lang.org/1.80.1/std/io/error/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::error::ErrorKind::WouldBlock\"><code>WouldBlock</code></a>, but Windows may return <a href=\"https://doc.rust-lang.org/1.80.1/std/io/error/enum.ErrorKind.html#variant.TimedOut\" title=\"variant std::io::error::ErrorKind::TimedOut\"><code>TimedOut</code></a>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_write_timeout(<span class=\"prelude-val\">None</span>).expect(<span class=\"string\">\"set_write_timeout call failed\"</span>);</code></pre></div>\n<p>An <a href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> is returned if the zero <a href=\"https://doc.rust-lang.org/1.80.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\"><code>Duration</code></a> is passed to this\nmethod:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::net::TcpStream;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>).unwrap();\n<span class=\"kw\">let </span>result = stream.set_write_timeout(<span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>err = result.unwrap_err();\n<span class=\"macro\">assert_eq!</span>(err.kind(), io::ErrorKind::InvalidInput)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#367\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.read_timeout\" class=\"fn\">read_timeout</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the read timeout of this socket.</p>\n<p>If the timeout is <a href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read</code></a> calls will block indefinitely.</p>\n<h5 id=\"platform-specific-behavior-3\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-3\">§</a>Platform-specific behavior</h5>\n<p>Some platforms do not provide access to the current timeout.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_read_timeout(<span class=\"prelude-val\">None</span>).expect(<span class=\"string\">\"set_read_timeout call failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.read_timeout().unwrap(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#392\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.write_timeout\" class=\"fn\">write_timeout</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the write timeout of this socket.</p>\n<p>If the timeout is <a href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a> calls will block indefinitely.</p>\n<h5 id=\"platform-specific-behavior-4\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-4\">§</a>Platform-specific behavior</h5>\n<p>Some platforms do not provide access to the current timeout.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_write_timeout(<span class=\"prelude-val\">None</span>).expect(<span class=\"string\">\"set_write_timeout call failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.write_timeout().unwrap(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#414\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.peek\" class=\"fn\">peek</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Receives data on the socket from the remote address to which it is\nconnected, without removing that data from the queue. On success,\nreturns the number of bytes peeked.</p>\n<p>Successive calls return the same data. This is accomplished by passing\n<code>MSG_PEEK</code> as a flag to the underlying <code>recv</code> system call.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8000\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = [<span class=\"number\">0</span>; <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>len = stream.peek(<span class=\"kw-2\">&amp;mut </span>buf).expect(<span class=\"string\">\"peek failed\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_linger\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#439\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.set_linger\" class=\"fn\">set_linger</a>(&amp;self, linger: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>tcp_linger</code>)</span></div></span></summary><div class=\"docblock\"><p>Sets the value of the <code>SO_LINGER</code> option on this socket.</p>\n<p>This value controls how the socket is closed when data remains\nto be sent. If <code>SO_LINGER</code> is set, the socket will remain open\nfor the specified duration as the system attempts to send pending data.\nOtherwise, the system may close the socket immediately, or wait for a\ndefault timeout.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(tcp_linger)]\n\n</span><span class=\"kw\">use </span>std::net::TcpStream;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_linger(<span class=\"prelude-val\">Some</span>(Duration::from_secs(<span class=\"number\">0</span>))).expect(<span class=\"string\">\"set_linger call failed\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.linger\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#461\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.linger\" class=\"fn\">linger</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>tcp_linger</code>)</span></div></span></summary><div class=\"docblock\"><p>Gets the value of the <code>SO_LINGER</code> option on this socket.</p>\n<p>For more information about this option, see <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#method.set_linger\" title=\"method std::net::tcp::TcpStream::set_linger\"><code>TcpStream::set_linger</code></a>.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(tcp_linger)]\n\n</span><span class=\"kw\">use </span>std::net::TcpStream;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_linger(<span class=\"prelude-val\">Some</span>(Duration::from_secs(<span class=\"number\">0</span>))).expect(<span class=\"string\">\"set_linger call failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.linger().unwrap(), <span class=\"prelude-val\">Some</span>(Duration::from_secs(<span class=\"number\">0</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_nodelay\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#483\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.set_nodelay\" class=\"fn\">set_nodelay</a>(&amp;self, nodelay: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the value of the <code>TCP_NODELAY</code> option on this socket.</p>\n<p>If set, this option disables the Nagle algorithm. This means that\nsegments are always sent as soon as possible, even if there is only a\nsmall amount of data. When not set, data is buffered until there is a\nsufficient amount to send out, thereby avoiding the frequent sending of\nsmall packets.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_nodelay(<span class=\"bool-val\">true</span>).expect(<span class=\"string\">\"set_nodelay call failed\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nodelay\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.nodelay\" class=\"fn\">nodelay</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the value of the <code>TCP_NODELAY</code> option on this socket.</p>\n<p>For more information about this option, see <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#method.set_nodelay\" title=\"method std::net::tcp::TcpStream::set_nodelay\"><code>TcpStream::set_nodelay</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_nodelay(<span class=\"bool-val\">true</span>).expect(<span class=\"string\">\"set_nodelay call failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.nodelay().unwrap_or(<span class=\"bool-val\">false</span>), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_ttl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#521\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.set_ttl\" class=\"fn\">set_ttl</a>(&amp;self, ttl: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the value for the <code>IP_TTL</code> option on this socket.</p>\n<p>This value sets the time-to-live field that is used in every packet sent\nfrom this socket.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_ttl(<span class=\"number\">100</span>).expect(<span class=\"string\">\"set_ttl call failed\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ttl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#540\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.ttl\" class=\"fn\">ttl</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the value of the <code>IP_TTL</code> option for this socket.</p>\n<p>For more information about this option, see <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#method.set_ttl\" title=\"method std::net::tcp::TcpStream::set_ttl\"><code>TcpStream::set_ttl</code></a>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_ttl(<span class=\"number\">100</span>).expect(<span class=\"string\">\"set_ttl call failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.ttl().unwrap_or(<span class=\"number\">0</span>), <span class=\"number\">100</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_error\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#560\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.take_error\" class=\"fn\">take_error</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the value of the <code>SO_ERROR</code> option on this socket.</p>\n<p>This will retrieve the stored error in the underlying socket, clearing\nthe field in the process. This can be useful for checking errors between\ncalls.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.take_error().expect(<span class=\"string\">\"No error was expected...\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_nonblocking\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#605\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html#tymethod.set_nonblocking\" class=\"fn\">set_nonblocking</a>(&amp;self, nonblocking: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Moves this TCP stream into or out of nonblocking mode.</p>\n<p>This will result in <code>read</code>, <code>write</code>, <code>recv</code> and <code>send</code> operations\nbecoming nonblocking, i.e., immediately returning from their calls.\nIf the IO operation is successful, <code>Ok</code> is returned and no further\naction is required. If the IO operation could not be completed and needs\nto be retried, an error with kind <a href=\"https://doc.rust-lang.org/1.80.1/std/io/error/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::error::ErrorKind::WouldBlock\"><code>io::ErrorKind::WouldBlock</code></a> is\nreturned.</p>\n<p>On Unix platforms, calling this method corresponds to calling <code>fcntl</code>\n<code>FIONBIO</code>. On Windows calling this method corresponds to calling\n<code>ioctlsocket</code> <code>FIONBIO</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<p>Reading bytes from a TCP stream in non-blocking mode:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Read};\n<span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:7878\"</span>)\n    .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_nonblocking(<span class=\"bool-val\">true</span>).expect(<span class=\"string\">\"set_nonblocking call failed\"</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">loop </span>{\n    <span class=\"kw\">match </span>stream.read_to_end(<span class=\"kw-2\">&amp;mut </span>buf) {\n        <span class=\"prelude-val\">Ok</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">break</span>,\n        <span class=\"prelude-val\">Err</span>(<span class=\"kw-2\">ref </span>e) <span class=\"kw\">if </span>e.kind() == io::ErrorKind::WouldBlock =&gt; {\n            <span class=\"comment\">// wait until network socket is ready, typically implemented\n            // via platform-specific APIs such as epoll or IOCP\n            </span>wait_for_fd();\n        }\n        <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"macro\">panic!</span>(<span class=\"string\">\"encountered IO error: {e}\"</span>),\n    };\n};\n<span class=\"macro\">println!</span>(<span class=\"string\">\"bytes: {buf:?}\"</span>);</code></pre></div>\n</div></details></div></details>",0,"socket2::socket::Inner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#636\">source</a></span><a href=\"#impl-Write-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#637\">source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Write a buffer into this writer, returning how many bytes were written. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#641\">source</a><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#646\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Write</code>r has an efficient <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/tcp.rs.html#651\">source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/io/mod.rs.html#1699\">source</a></span><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Attempts to write an entire buffer into this writer. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/io/mod.rs.html#1761\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>)</span></div></span><div class='docblock'>Attempts to write multiple buffers into this writer. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/io/mod.rs.html#1814\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a formatted string into this writer, returning any error\nencountered. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/io/mod.rs.html#1874-1876\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"https://doc.rust-lang.org/1.80.1/std/io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details>","Write","socket2::socket::Inner"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()