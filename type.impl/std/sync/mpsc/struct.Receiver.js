(function() {var type_impls = {
"winit":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Receiver%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mpsc/mod.rs.html#1090\">source</a></span><a href=\"#impl-Debug-for-Receiver%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Receiver.html\" title=\"struct std::sync::mpsc::Receiver\">Receiver</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mpsc/mod.rs.html#1091\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","winit::platform_impl::linux::x11::ime::ImeReceiver","winit::platform_impl::linux::x11::ime::ImeEventReceiver"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Receiver%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mpsc/mod.rs.html#1080\">source</a></span><a href=\"#impl-IntoIterator-for-Receiver%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Receiver.html\" title=\"struct std::sync::mpsc::Receiver\">Receiver</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.IntoIter.html\" title=\"struct std::sync::mpsc::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mpsc/mod.rs.html#1084\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.IntoIter.html\" title=\"struct std::sync::mpsc::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","winit::platform_impl::linux::x11::ime::ImeReceiver","winit::platform_impl::linux::x11::ime::ImeEventReceiver"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Receiver%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mpsc/mod.rs.html#764\">source</a><a href=\"#impl-Receiver%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Receiver.html\" title=\"struct std::sync::mpsc::Receiver\">Receiver</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_recv\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mpsc/mod.rs.html#789\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Receiver.html#tymethod.try_recv\" class=\"fn\">try_recv</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/enum.TryRecvError.html\" title=\"enum std::sync::mpsc::TryRecvError\">TryRecvError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to return a pending value on this receiver without blocking.</p>\n<p>This method will never block the caller in order to wait for data to\nbecome available. Instead, this will always return immediately with a\npossible option of pending data on the channel.</p>\n<p>This is useful for a flavor of “optimistic check” before deciding to\nblock on a receiver.</p>\n<p>Compared with <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Receiver.html#method.recv\" title=\"method std::sync::mpsc::Receiver::recv\"><code>recv</code></a>, this function has two failure cases instead of one\n(one for disconnection, one for an empty buffer).</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::mpsc::{Receiver, channel};\n\n<span class=\"kw\">let </span>(<span class=\"kw\">_</span>, receiver): (<span class=\"kw\">_</span>, Receiver&lt;i32&gt;) = channel();\n\n<span class=\"macro\">assert!</span>(receiver.try_recv().is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.recv\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mpsc/mod.rs.html#848\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Receiver.html#tymethod.recv\" class=\"fn\">recv</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.RecvError.html\" title=\"struct std::sync::mpsc::RecvError\">RecvError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.</p>\n<p>This function will always block the current thread if there is no data\navailable and it’s possible for more data to be sent (at least one sender\nstill exists). Once a message is sent to the corresponding <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Sender.html\" title=\"struct std::sync::mpsc::Sender\"><code>Sender</code></a>\n(or <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.SyncSender.html\" title=\"struct std::sync::mpsc::SyncSender\"><code>SyncSender</code></a>), this receiver will wake up and return that\nmessage.</p>\n<p>If the corresponding <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Sender.html\" title=\"struct std::sync::mpsc::Sender\"><code>Sender</code></a> has disconnected, or it disconnects while\nthis call is blocking, this call will wake up and return <a href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> to\nindicate that no more messages can ever be received on this channel.\nHowever, since channels are buffered, messages sent before the disconnect\nwill still be properly received.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::mpsc;\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>(send, recv) = mpsc::channel();\n<span class=\"kw\">let </span>handle = thread::spawn(<span class=\"kw\">move </span>|| {\n    send.send(<span class=\"number\">1u8</span>).unwrap();\n});\n\nhandle.join().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>), recv.recv());</code></pre></div>\n<p>Buffering behavior:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::mpsc;\n<span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::sync::mpsc::RecvError;\n\n<span class=\"kw\">let </span>(send, recv) = mpsc::channel();\n<span class=\"kw\">let </span>handle = thread::spawn(<span class=\"kw\">move </span>|| {\n    send.send(<span class=\"number\">1u8</span>).unwrap();\n    send.send(<span class=\"number\">2</span>).unwrap();\n    send.send(<span class=\"number\">3</span>).unwrap();\n    drop(send);\n});\n\n<span class=\"comment\">// wait for the thread to join so we ensure the sender is dropped\n</span>handle.join().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>), recv.recv());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>), recv.recv());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">3</span>), recv.recv());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Err</span>(RecvError), recv.recv());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.recv_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mpsc/mod.rs.html#908\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Receiver.html#tymethod.recv_timeout\" class=\"fn\">recv_timeout</a>(&amp;self, timeout: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/enum.RecvTimeoutError.html\" title=\"enum std::sync::mpsc::RecvTimeoutError\">RecvTimeoutError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up, or if it waits more than <code>timeout</code>.</p>\n<p>This function will always block the current thread if there is no data\navailable and it’s possible for more data to be sent (at least one sender\nstill exists). Once a message is sent to the corresponding <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Sender.html\" title=\"struct std::sync::mpsc::Sender\"><code>Sender</code></a>\n(or <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.SyncSender.html\" title=\"struct std::sync::mpsc::SyncSender\"><code>SyncSender</code></a>), this receiver will wake up and return that\nmessage.</p>\n<p>If the corresponding <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Sender.html\" title=\"struct std::sync::mpsc::Sender\"><code>Sender</code></a> has disconnected, or it disconnects while\nthis call is blocking, this call will wake up and return <a href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> to\nindicate that no more messages can ever be received on this channel.\nHowever, since channels are buffered, messages sent before the disconnect\nwill still be properly received.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Successfully receiving value before encountering timeout:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::time::Duration;\n<span class=\"kw\">use </span>std::sync::mpsc;\n\n<span class=\"kw\">let </span>(send, recv) = mpsc::channel();\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    send.send(<span class=\"string\">'a'</span>).unwrap();\n});\n\n<span class=\"macro\">assert_eq!</span>(\n    recv.recv_timeout(Duration::from_millis(<span class=\"number\">400</span>)),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"string\">'a'</span>)\n);</code></pre></div>\n<p>Receiving an error upon reaching timeout:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::time::Duration;\n<span class=\"kw\">use </span>std::sync::mpsc;\n\n<span class=\"kw\">let </span>(send, recv) = mpsc::channel();\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    thread::sleep(Duration::from_millis(<span class=\"number\">800</span>));\n    send.send(<span class=\"string\">'a'</span>).unwrap();\n});\n\n<span class=\"macro\">assert_eq!</span>(\n    recv.recv_timeout(Duration::from_millis(<span class=\"number\">400</span>)),\n    <span class=\"prelude-val\">Err</span>(mpsc::RecvTimeoutError::Timeout)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.recv_deadline\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mpsc/mod.rs.html#969\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Receiver.html#tymethod.recv_deadline\" class=\"fn\">recv_deadline</a>(&amp;self, deadline: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/time/struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/enum.RecvTimeoutError.html\" title=\"enum std::sync::mpsc::RecvTimeoutError\">RecvTimeoutError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>deadline_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up, or if <code>deadline</code> is reached.</p>\n<p>This function will always block the current thread if there is no data\navailable and it’s possible for more data to be sent. Once a message is\nsent to the corresponding <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Sender.html\" title=\"struct std::sync::mpsc::Sender\"><code>Sender</code></a> (or <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.SyncSender.html\" title=\"struct std::sync::mpsc::SyncSender\"><code>SyncSender</code></a>), then this\nreceiver will wake up and return that message.</p>\n<p>If the corresponding <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Sender.html\" title=\"struct std::sync::mpsc::Sender\"><code>Sender</code></a> has disconnected, or it disconnects while\nthis call is blocking, this call will wake up and return <a href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> to\nindicate that no more messages can ever be received on this channel.\nHowever, since channels are buffered, messages sent before the disconnect\nwill still be properly received.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Successfully receiving value before reaching deadline:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(deadline_api)]\n</span><span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::time::{Duration, Instant};\n<span class=\"kw\">use </span>std::sync::mpsc;\n\n<span class=\"kw\">let </span>(send, recv) = mpsc::channel();\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    send.send(<span class=\"string\">'a'</span>).unwrap();\n});\n\n<span class=\"macro\">assert_eq!</span>(\n    recv.recv_deadline(Instant::now() + Duration::from_millis(<span class=\"number\">400</span>)),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"string\">'a'</span>)\n);</code></pre></div>\n<p>Receiving an error upon reaching deadline:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(deadline_api)]\n</span><span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::time::{Duration, Instant};\n<span class=\"kw\">use </span>std::sync::mpsc;\n\n<span class=\"kw\">let </span>(send, recv) = mpsc::channel();\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    thread::sleep(Duration::from_millis(<span class=\"number\">800</span>));\n    send.send(<span class=\"string\">'a'</span>).unwrap();\n});\n\n<span class=\"macro\">assert_eq!</span>(\n    recv.recv_deadline(Instant::now() + Duration::from_millis(<span class=\"number\">400</span>)),\n    <span class=\"prelude-val\">Err</span>(mpsc::RecvTimeoutError::Timeout)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mpsc/mod.rs.html#997\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Receiver.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Iter.html\" title=\"struct std::sync::mpsc::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator that will block waiting for messages, but never\n<a href=\"https://doc.rust-lang.org/1.80.1/std/macro.panic.html\" title=\"macro std::panic\"><code>panic!</code></a>. It will return <a href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> when the channel has hung up.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::mpsc::channel;\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>(send, recv) = channel();\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    send.send(<span class=\"number\">1</span>).unwrap();\n    send.send(<span class=\"number\">2</span>).unwrap();\n    send.send(<span class=\"number\">3</span>).unwrap();\n});\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = recv.iter();\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mpsc/mod.rs.html#1038\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Receiver.html#tymethod.try_iter\" class=\"fn\">try_iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.TryIter.html\" title=\"struct std::sync::mpsc::TryIter\">TryIter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator that will attempt to yield all pending values.\nIt will return <code>None</code> if there are no more pending values or if the\nchannel has hung up. The iterator will never <a href=\"https://doc.rust-lang.org/1.80.1/std/macro.panic.html\" title=\"macro std::panic\"><code>panic!</code></a> or block the\nuser by waiting for values.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::mpsc::channel;\n<span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>(sender, receiver) = channel();\n\n<span class=\"comment\">// nothing is in the buffer yet\n</span><span class=\"macro\">assert!</span>(receiver.try_iter().next().is_none());\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    thread::sleep(Duration::from_secs(<span class=\"number\">1</span>));\n    sender.send(<span class=\"number\">1</span>).unwrap();\n    sender.send(<span class=\"number\">2</span>).unwrap();\n    sender.send(<span class=\"number\">3</span>).unwrap();\n});\n\n<span class=\"comment\">// nothing is in the buffer yet\n</span><span class=\"macro\">assert!</span>(receiver.try_iter().next().is_none());\n\n<span class=\"comment\">// block for two seconds\n</span>thread::sleep(Duration::from_secs(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = receiver.try_iter();\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"winit::platform_impl::linux::x11::ime::ImeReceiver","winit::platform_impl::linux::x11::ime::ImeEventReceiver"],["<section id=\"impl-Send-for-Receiver%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mpsc/mod.rs.html#191\">source</a></span><a href=\"#impl-Send-for-Receiver%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Receiver.html\" title=\"struct std::sync::mpsc::Receiver\">Receiver</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Send","winit::platform_impl::linux::x11::ime::ImeReceiver","winit::platform_impl::linux::x11::ime::ImeEventReceiver"],["<section id=\"impl-Sync-for-Receiver%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mpsc/mod.rs.html#194\">source</a></span><a href=\"#impl-Sync-for-Receiver%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mpsc/struct.Receiver.html\" title=\"struct std::sync::mpsc::Receiver\">Receiver</a>&lt;T&gt;</h3></section>","Sync","winit::platform_impl::linux::x11::ime::ImeReceiver","winit::platform_impl::linux::x11::ime::ImeEventReceiver"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()