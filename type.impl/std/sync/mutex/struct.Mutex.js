(function() {var type_impls = {
"flume":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#504\">source</a></span><a href=\"#impl-Debug-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#505\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","flume::ChanLock"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#496\">source</a></span><a href=\"#impl-Default-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#498\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Mutex&lt;T&gt;</code>, with the <code>Default</code> value for T.</p>\n</div></details></div></details>","Default","flume::ChanLock"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#487\">source</a></span><a href=\"#impl-From%3CT%3E-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#490\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new mutex in an unlocked state ready for use.\nThis is equivalent to <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#method.new\" title=\"associated function std::sync::mutex::Mutex::new\"><code>Mutex::new</code></a>.</p>\n</div></details></div></details>","From<T>","flume::ChanLock"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mutex%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#260\">source</a><a href=\"#impl-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.63.0\">1.0.0 (const: 1.63.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#273\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.new\" class=\"fn\">new</a>(t: T) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new mutex in an unlocked state ready for use.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Mutex;\n\n<span class=\"kw\">let </span>mutex = Mutex::new(<span class=\"number\">0</span>);</code></pre></div>\n</div></details></div></details>",0,"flume::ChanLock"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mutex%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#278\">source</a><a href=\"#impl-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lock\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#315\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.lock\" class=\"fn\">lock</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.MutexGuard.html\" title=\"struct std::sync::mutex::MutexGuard\">MutexGuard</a>&lt;'_, T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/poison/struct.PoisonError.html\" title=\"struct std::sync::poison::PoisonError\">PoisonError</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.MutexGuard.html\" title=\"struct std::sync::mutex::MutexGuard\">MutexGuard</a>&lt;'_, T&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Acquires a mutex, blocking the current thread until it is able to do so.</p>\n<p>This function will block the local thread until it is available to acquire\nthe mutex. Upon returning, the thread is the only thread with the lock\nheld. An RAII guard is returned to allow scoped unlock of the lock. When\nthe guard goes out of scope, the mutex will be unlocked.</p>\n<p>The exact behavior on locking a mutex in the thread which already holds\nthe lock is left unspecified. However, this function will not return on\nthe second call (it might panic or deadlock, for example).</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>If another user of this mutex panicked while holding the mutex, then\nthis call will return an error once the mutex is acquired.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function might panic when called if the lock is already held by\nthe current thread.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>mutex = Arc::new(Mutex::new(<span class=\"number\">0</span>));\n<span class=\"kw\">let </span>c_mutex = Arc::clone(<span class=\"kw-2\">&amp;</span>mutex);\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"kw-2\">*</span>c_mutex.lock().unwrap() = <span class=\"number\">10</span>;\n}).join().expect(<span class=\"string\">\"thread::spawn failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>mutex.lock().unwrap(), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_lock\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#362\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.try_lock\" class=\"fn\">try_lock</a>(\n    &amp;self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.MutexGuard.html\" title=\"struct std::sync::mutex::MutexGuard\">MutexGuard</a>&lt;'_, T&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/poison/enum.TryLockError.html\" title=\"enum std::sync::poison::TryLockError\">TryLockError</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.MutexGuard.html\" title=\"struct std::sync::mutex::MutexGuard\">MutexGuard</a>&lt;'_, T&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to acquire this lock.</p>\n<p>If the lock could not be acquired at this time, then <a href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> is returned.\nOtherwise, an RAII guard is returned. The lock will be unlocked when the\nguard is dropped.</p>\n<p>This function does not block.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If another user of this mutex panicked while holding the mutex, then\nthis call will return the <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/poison/enum.TryLockError.html#variant.Poisoned\" title=\"variant std::sync::poison::TryLockError::Poisoned\"><code>Poisoned</code></a> error if the mutex would\notherwise be acquired.</p>\n<p>If the mutex could not be acquired because it is already locked, then\nthis call will return the <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/poison/enum.TryLockError.html#variant.WouldBlock\" title=\"variant std::sync::poison::TryLockError::WouldBlock\"><code>WouldBlock</code></a> error.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>mutex = Arc::new(Mutex::new(<span class=\"number\">0</span>));\n<span class=\"kw\">let </span>c_mutex = Arc::clone(<span class=\"kw-2\">&amp;</span>mutex);\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lock = c_mutex.try_lock();\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">ref mut </span>mutex) = lock {\n        <span class=\"kw-2\">**</span>mutex = <span class=\"number\">10</span>;\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"try_lock failed\"</span>);\n    }\n}).join().expect(<span class=\"string\">\"thread::spawn failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>mutex.lock().unwrap(), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_poisoned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#395\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.is_poisoned\" class=\"fn\">is_poisoned</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether the mutex is poisoned.</p>\n<p>If another thread is active, the mutex can still become poisoned at any\ntime. You should not trust a <code>false</code> value for program correctness\nwithout additional synchronization.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>mutex = Arc::new(Mutex::new(<span class=\"number\">0</span>));\n<span class=\"kw\">let </span>c_mutex = Arc::clone(<span class=\"kw-2\">&amp;</span>mutex);\n\n<span class=\"kw\">let _ </span>= thread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"kw\">let </span>_lock = c_mutex.lock().unwrap();\n    <span class=\"macro\">panic!</span>(); <span class=\"comment\">// the mutex gets poisoned\n</span>}).join();\n<span class=\"macro\">assert_eq!</span>(mutex.is_poisoned(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear_poison\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#432\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.clear_poison\" class=\"fn\">clear_poison</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>Clear the poisoned state from a mutex.</p>\n<p>If the mutex is poisoned, it will remain poisoned until this function is called. This\nallows recovering from a poisoned state and marking that it has recovered. For example, if\nthe value is overwritten by a known-good value, then the mutex can be marked as\nun-poisoned. Or possibly, the value could be inspected to determine if it is in a\nconsistent state, and if so the poison is removed.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>mutex = Arc::new(Mutex::new(<span class=\"number\">0</span>));\n<span class=\"kw\">let </span>c_mutex = Arc::clone(<span class=\"kw-2\">&amp;</span>mutex);\n\n<span class=\"kw\">let _ </span>= thread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"kw\">let </span>_lock = c_mutex.lock().unwrap();\n    <span class=\"macro\">panic!</span>(); <span class=\"comment\">// the mutex gets poisoned\n</span>}).join();\n\n<span class=\"macro\">assert_eq!</span>(mutex.is_poisoned(), <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>x = mutex.lock().unwrap_or_else(|<span class=\"kw-2\">mut </span>e| {\n    <span class=\"kw-2\">**</span>e.get_mut() = <span class=\"number\">1</span>;\n    mutex.clear_poison();\n    e.into_inner()\n});\n<span class=\"macro\">assert_eq!</span>(mutex.is_poisoned(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x, <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#452-454\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/poison/struct.PoisonError.html\" title=\"struct std::sync::poison::PoisonError\">PoisonError</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Consumes this mutex, returning the underlying data.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If another user of this mutex panicked while holding the mutex, then\nthis call will return an error instead.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Mutex;\n\n<span class=\"kw\">let </span>mutex = Mutex::new(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(mutex.into_inner().unwrap(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#480\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/poison/struct.PoisonError.html\" title=\"struct std::sync::poison::PoisonError\">PoisonError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying data.</p>\n<p>Since this call borrows the <code>Mutex</code> mutably, no actual locking needs to\ntake place – the mutable borrow statically guarantees no locks exist.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>If another user of this mutex panicked while holding the mutex, then\nthis call will return an error instead.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Mutex;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mutex = Mutex::new(<span class=\"number\">0</span>);\n<span class=\"kw-2\">*</span>mutex.get_mut().unwrap() = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>mutex.lock().unwrap(), <span class=\"number\">10</span>);</code></pre></div>\n</div></details></div></details>",0,"flume::ChanLock"],["<section id=\"impl-RefUnwindSafe-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/panic.rs.html#74\">source</a></span><a href=\"#impl-RefUnwindSafe-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","RefUnwindSafe","flume::ChanLock"],["<section id=\"impl-Send-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#187\">source</a></span><a href=\"#impl-Send-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Send","flume::ChanLock"],["<section id=\"impl-Sync-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#189\">source</a></span><a href=\"#impl-Sync-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Sync","flume::ChanLock"],["<section id=\"impl-UnwindSafe-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/panic.rs.html#67\">source</a></span><a href=\"#impl-UnwindSafe-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/panic/unwind_safe/trait.UnwindSafe.html\" title=\"trait core::panic::unwind_safe::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","UnwindSafe","flume::ChanLock"]],
"net":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ClockSequence-for-Mutex%3CC%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/uuid/timestamp.rs.html#628\">source</a><a href=\"#impl-ClockSequence-for-Mutex%3CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C&gt; <a class=\"trait\" href=\"uuid/timestamp/trait.ClockSequence.html\" title=\"trait uuid::timestamp::ClockSequence\">ClockSequence</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;C&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"uuid/timestamp/trait.ClockSequence.html\" title=\"trait uuid::timestamp::ClockSequence\">ClockSequence</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"uuid/timestamp/trait.ClockSequence.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;C as <a class=\"trait\" href=\"uuid/timestamp/trait.ClockSequence.html\" title=\"trait uuid::timestamp::ClockSequence\">ClockSequence</a>&gt;::<a class=\"associatedtype\" href=\"uuid/timestamp/trait.ClockSequence.html#associatedtype.Output\" title=\"type uuid::timestamp::ClockSequence::Output\">Output</a></h4></section></summary><div class='docblock'>The type of sequence returned by this counter.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generate_sequence\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/uuid/timestamp.rs.html#631\">source</a><a href=\"#method.generate_sequence\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"uuid/timestamp/trait.ClockSequence.html#tymethod.generate_sequence\" class=\"fn\">generate_sequence</a>(\n    &amp;self,\n    seconds: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u64.html\">u64</a>,\n    subsec_nanos: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u32.html\">u32</a>,\n) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;C&gt; as <a class=\"trait\" href=\"uuid/timestamp/trait.ClockSequence.html\" title=\"trait uuid::timestamp::ClockSequence\">ClockSequence</a>&gt;::<a class=\"associatedtype\" href=\"uuid/timestamp/trait.ClockSequence.html#associatedtype.Output\" title=\"type uuid::timestamp::ClockSequence::Output\">Output</a></h4></section></summary><div class='docblock'>Get the next value in the sequence to feed into a timestamp. <a href=\"uuid/timestamp/trait.ClockSequence.html#tymethod.generate_sequence\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generate_timestamp_sequence\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/uuid/timestamp.rs.html#637-641\">source</a><a href=\"#method.generate_timestamp_sequence\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"uuid/timestamp/trait.ClockSequence.html#method.generate_timestamp_sequence\" class=\"fn\">generate_timestamp_sequence</a>(\n    &amp;self,\n    seconds: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u64.html\">u64</a>,\n    subsec_nanos: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u32.html\">u32</a>,\n) -&gt; (&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;C&gt; as <a class=\"trait\" href=\"uuid/timestamp/trait.ClockSequence.html\" title=\"trait uuid::timestamp::ClockSequence\">ClockSequence</a>&gt;::<a class=\"associatedtype\" href=\"uuid/timestamp/trait.ClockSequence.html#associatedtype.Output\" title=\"type uuid::timestamp::ClockSequence::Output\">Output</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u64.html\">u64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Get the next value in the sequence, potentially also adjusting the timestamp. <a href=\"uuid/timestamp/trait.ClockSequence.html#method.generate_timestamp_sequence\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.usable_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/uuid/timestamp.rs.html#647-649\">source</a><a href=\"#method.usable_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"uuid/timestamp/trait.ClockSequence.html#method.usable_bits\" class=\"fn\">usable_bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a><div class=\"where\">where\n    &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;C&gt; as <a class=\"trait\" href=\"uuid/timestamp/trait.ClockSequence.html\" title=\"trait uuid::timestamp::ClockSequence\">ClockSequence</a>&gt;::<a class=\"associatedtype\" href=\"uuid/timestamp/trait.ClockSequence.html#associatedtype.Output\" title=\"type uuid::timestamp::ClockSequence::Output\">Output</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>The number of usable bits from the least significant bit in the result of <a href=\"uuid/timestamp/trait.ClockSequence.html#tymethod.generate_sequence\" title=\"method uuid::timestamp::ClockSequence::generate_sequence\"><code>ClockSequence::generate_sequence</code></a>\nor <a href=\"uuid/timestamp/trait.ClockSequence.html#method.generate_timestamp_sequence\" title=\"method uuid::timestamp::ClockSequence::generate_timestamp_sequence\"><code>ClockSequence::generate_timestamp_sequence</code></a>. <a href=\"uuid/timestamp/trait.ClockSequence.html#method.usable_bits\">Read more</a></div></details></div></details>","ClockSequence","net::http_loader::HttpCacheState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#504\">source</a></span><a href=\"#impl-Debug-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#505\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","net::http_loader::HttpCacheState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#496\">source</a></span><a href=\"#impl-Default-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#498\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Mutex&lt;T&gt;</code>, with the <code>Default</code> value for T.</p>\n</div></details></div></details>","Default","net::http_loader::HttpCacheState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Mutex%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#2118-2122\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#2118-2122\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","net::http_loader::HttpCacheState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#487\">source</a></span><a href=\"#impl-From%3CT%3E-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#490\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new mutex in an unlocked state ready for use.\nThis is equivalent to <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#method.new\" title=\"associated function std::sync::mutex::Mutex::new\"><code>Mutex::new</code></a>.</p>\n</div></details></div></details>","From<T>","net::http_loader::HttpCacheState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MallocSizeOf-for-Mutex%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/malloc_size_of/lib.rs.html#613\">source</a><a href=\"#impl-MallocSizeOf-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"malloc_size_of/trait.MallocSizeOf.html\" title=\"trait malloc_size_of::MallocSizeOf\">MallocSizeOf</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"malloc_size_of/trait.MallocSizeOf.html\" title=\"trait malloc_size_of::MallocSizeOf\">MallocSizeOf</a>,</div></h3></section></summary><div class=\"docblock\"><p>If a mutex is stored directly as a member of a data type that is being measured,\nit is the unique owner of its contents and deserves to be measured.</p>\n<p>If a mutex is stored inside of an Arc value as a member of a data type that is being measured,\nthe Arc will not be automatically measured so there is no risk of overcounting the mutex’s\ncontents.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/malloc_size_of/lib.rs.html#614\">source</a><a href=\"#method.size_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"malloc_size_of/trait.MallocSizeOf.html#tymethod.size_of\" class=\"fn\">size_of</a>(&amp;self, ops: &amp;mut <a class=\"struct\" href=\"malloc_size_of/struct.MallocSizeOfOps.html\" title=\"struct malloc_size_of::MallocSizeOfOps\">MallocSizeOfOps</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Measure the heap usage of all descendant heap-allocated structures, but\nnot the space taken up by the value itself.</div></details></div></details>","MallocSizeOf","net::http_loader::HttpCacheState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mutex%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#260\">source</a><a href=\"#impl-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.63.0\">1.0.0 (const: 1.63.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#273\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.new\" class=\"fn\">new</a>(t: T) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new mutex in an unlocked state ready for use.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Mutex;\n\n<span class=\"kw\">let </span>mutex = Mutex::new(<span class=\"number\">0</span>);</code></pre></div>\n</div></details></div></details>",0,"net::http_loader::HttpCacheState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mutex%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#278\">source</a><a href=\"#impl-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lock\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#315\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.lock\" class=\"fn\">lock</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.MutexGuard.html\" title=\"struct std::sync::mutex::MutexGuard\">MutexGuard</a>&lt;'_, T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/poison/struct.PoisonError.html\" title=\"struct std::sync::poison::PoisonError\">PoisonError</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.MutexGuard.html\" title=\"struct std::sync::mutex::MutexGuard\">MutexGuard</a>&lt;'_, T&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Acquires a mutex, blocking the current thread until it is able to do so.</p>\n<p>This function will block the local thread until it is available to acquire\nthe mutex. Upon returning, the thread is the only thread with the lock\nheld. An RAII guard is returned to allow scoped unlock of the lock. When\nthe guard goes out of scope, the mutex will be unlocked.</p>\n<p>The exact behavior on locking a mutex in the thread which already holds\nthe lock is left unspecified. However, this function will not return on\nthe second call (it might panic or deadlock, for example).</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>If another user of this mutex panicked while holding the mutex, then\nthis call will return an error once the mutex is acquired.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function might panic when called if the lock is already held by\nthe current thread.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>mutex = Arc::new(Mutex::new(<span class=\"number\">0</span>));\n<span class=\"kw\">let </span>c_mutex = Arc::clone(<span class=\"kw-2\">&amp;</span>mutex);\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"kw-2\">*</span>c_mutex.lock().unwrap() = <span class=\"number\">10</span>;\n}).join().expect(<span class=\"string\">\"thread::spawn failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>mutex.lock().unwrap(), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_lock\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#362\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.try_lock\" class=\"fn\">try_lock</a>(\n    &amp;self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.MutexGuard.html\" title=\"struct std::sync::mutex::MutexGuard\">MutexGuard</a>&lt;'_, T&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/poison/enum.TryLockError.html\" title=\"enum std::sync::poison::TryLockError\">TryLockError</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.MutexGuard.html\" title=\"struct std::sync::mutex::MutexGuard\">MutexGuard</a>&lt;'_, T&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to acquire this lock.</p>\n<p>If the lock could not be acquired at this time, then <a href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> is returned.\nOtherwise, an RAII guard is returned. The lock will be unlocked when the\nguard is dropped.</p>\n<p>This function does not block.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If another user of this mutex panicked while holding the mutex, then\nthis call will return the <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/poison/enum.TryLockError.html#variant.Poisoned\" title=\"variant std::sync::poison::TryLockError::Poisoned\"><code>Poisoned</code></a> error if the mutex would\notherwise be acquired.</p>\n<p>If the mutex could not be acquired because it is already locked, then\nthis call will return the <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/poison/enum.TryLockError.html#variant.WouldBlock\" title=\"variant std::sync::poison::TryLockError::WouldBlock\"><code>WouldBlock</code></a> error.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>mutex = Arc::new(Mutex::new(<span class=\"number\">0</span>));\n<span class=\"kw\">let </span>c_mutex = Arc::clone(<span class=\"kw-2\">&amp;</span>mutex);\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lock = c_mutex.try_lock();\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">ref mut </span>mutex) = lock {\n        <span class=\"kw-2\">**</span>mutex = <span class=\"number\">10</span>;\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"try_lock failed\"</span>);\n    }\n}).join().expect(<span class=\"string\">\"thread::spawn failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>mutex.lock().unwrap(), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_poisoned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#395\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.is_poisoned\" class=\"fn\">is_poisoned</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether the mutex is poisoned.</p>\n<p>If another thread is active, the mutex can still become poisoned at any\ntime. You should not trust a <code>false</code> value for program correctness\nwithout additional synchronization.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>mutex = Arc::new(Mutex::new(<span class=\"number\">0</span>));\n<span class=\"kw\">let </span>c_mutex = Arc::clone(<span class=\"kw-2\">&amp;</span>mutex);\n\n<span class=\"kw\">let _ </span>= thread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"kw\">let </span>_lock = c_mutex.lock().unwrap();\n    <span class=\"macro\">panic!</span>(); <span class=\"comment\">// the mutex gets poisoned\n</span>}).join();\n<span class=\"macro\">assert_eq!</span>(mutex.is_poisoned(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear_poison\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#432\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.clear_poison\" class=\"fn\">clear_poison</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>Clear the poisoned state from a mutex.</p>\n<p>If the mutex is poisoned, it will remain poisoned until this function is called. This\nallows recovering from a poisoned state and marking that it has recovered. For example, if\nthe value is overwritten by a known-good value, then the mutex can be marked as\nun-poisoned. Or possibly, the value could be inspected to determine if it is in a\nconsistent state, and if so the poison is removed.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Mutex};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>mutex = Arc::new(Mutex::new(<span class=\"number\">0</span>));\n<span class=\"kw\">let </span>c_mutex = Arc::clone(<span class=\"kw-2\">&amp;</span>mutex);\n\n<span class=\"kw\">let _ </span>= thread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"kw\">let </span>_lock = c_mutex.lock().unwrap();\n    <span class=\"macro\">panic!</span>(); <span class=\"comment\">// the mutex gets poisoned\n</span>}).join();\n\n<span class=\"macro\">assert_eq!</span>(mutex.is_poisoned(), <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>x = mutex.lock().unwrap_or_else(|<span class=\"kw-2\">mut </span>e| {\n    <span class=\"kw-2\">**</span>e.get_mut() = <span class=\"number\">1</span>;\n    mutex.clear_poison();\n    e.into_inner()\n});\n<span class=\"macro\">assert_eq!</span>(mutex.is_poisoned(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x, <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#452-454\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/poison/struct.PoisonError.html\" title=\"struct std::sync::poison::PoisonError\">PoisonError</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Consumes this mutex, returning the underlying data.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If another user of this mutex panicked while holding the mutex, then\nthis call will return an error instead.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Mutex;\n\n<span class=\"kw\">let </span>mutex = Mutex::new(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(mutex.into_inner().unwrap(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#480\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/poison/struct.PoisonError.html\" title=\"struct std::sync::poison::PoisonError\">PoisonError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying data.</p>\n<p>Since this call borrows the <code>Mutex</code> mutably, no actual locking needs to\ntake place – the mutable borrow statically guarantees no locks exist.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>If another user of this mutex panicked while holding the mutex, then\nthis call will return an error instead.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Mutex;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mutex = Mutex::new(<span class=\"number\">0</span>);\n<span class=\"kw-2\">*</span>mutex.get_mut().unwrap() = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>mutex.lock().unwrap(), <span class=\"number\">10</span>);</code></pre></div>\n</div></details></div></details>",0,"net::http_loader::HttpCacheState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Mutex%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#682-684\">source</a><a href=\"#impl-Serialize-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#686-688\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","net::http_loader::HttpCacheState"],["<section id=\"impl-RefUnwindSafe-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/panic.rs.html#74\">source</a></span><a href=\"#impl-RefUnwindSafe-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","RefUnwindSafe","net::http_loader::HttpCacheState"],["<section id=\"impl-Send-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#187\">source</a></span><a href=\"#impl-Send-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Send","net::http_loader::HttpCacheState"],["<section id=\"impl-Sync-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/sync/mutex.rs.html#189\">source</a></span><a href=\"#impl-Sync-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Sync","net::http_loader::HttpCacheState"],["<section id=\"impl-UnwindSafe-for-Mutex%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/panic.rs.html#67\">source</a></span><a href=\"#impl-UnwindSafe-for-Mutex%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/panic/unwind_safe/trait.UnwindSafe.html\" title=\"trait core::panic::unwind_safe::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\">Mutex</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","UnwindSafe","net::http_loader::HttpCacheState"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()