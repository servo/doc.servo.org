(function() {var type_impls = {
"icu_locid_transform":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3Cstr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/convert/mod.rs.html#846\">source</a></span><a href=\"#impl-AsMut%3Cstr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/convert/mod.rs.html#848\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<str>","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bu8%5D%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2741\">source</a></span><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2743\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[u8]>","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3COsStr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ffi/os_str.rs.html#1576\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ffi/os_str.rs.html#1578\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<OsStr>","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CPath%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/path.rs.html#3174\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/path.rs.html#3176\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Path>","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3Cstr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/convert/mod.rs.html#838\">source</a></span><a href=\"#impl-AsRef%3Cstr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/convert/mod.rs.html#840\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<str>","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsciiExt-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ascii.rs.html#207\">source</a></span><a href=\"#impl-AsciiExt-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html\" title=\"trait std::ascii::AsciiExt\">AsciiExt</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Container type for copied ASCII characters.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ascii.rs.html#210\">source</a><a href=\"#method.is_ascii\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#tymethod.is_ascii\" class=\"fn\">is_ascii</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Checks if the value is within the ASCII range. <a href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#tymethod.is_ascii\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ascii_uppercase\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ascii.rs.html#210\">source</a><a href=\"#method.to_ascii_uppercase\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#tymethod.to_ascii_uppercase\" class=\"fn\">to_ascii_uppercase</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html\" title=\"trait std::ascii::AsciiExt\">AsciiExt</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#associatedtype.Owned\" title=\"type std::ascii::AsciiExt::Owned\">Owned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Makes a copy of the value in its ASCII upper case equivalent. <a href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#tymethod.to_ascii_uppercase\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ascii_lowercase\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ascii.rs.html#210\">source</a><a href=\"#method.to_ascii_lowercase\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#tymethod.to_ascii_lowercase\" class=\"fn\">to_ascii_lowercase</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html\" title=\"trait std::ascii::AsciiExt\">AsciiExt</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#associatedtype.Owned\" title=\"type std::ascii::AsciiExt::Owned\">Owned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Makes a copy of the value in its ASCII lower case equivalent. <a href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#tymethod.to_ascii_lowercase\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq_ignore_ascii_case\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ascii.rs.html#210\">source</a><a href=\"#method.eq_ignore_ascii_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#tymethod.eq_ignore_ascii_case\" class=\"fn\">eq_ignore_ascii_case</a>(&amp;self, o: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Checks that two values are an ASCII case-insensitive match. <a href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#tymethod.eq_ignore_ascii_case\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_ascii_uppercase\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ascii.rs.html#210\">source</a><a href=\"#method.make_ascii_uppercase\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_uppercase\" class=\"fn\">make_ascii_uppercase</a>(&amp;mut self)</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Converts this type to its ASCII upper case equivalent in-place. <a href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_uppercase\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_ascii_lowercase\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ascii.rs.html#210\">source</a><a href=\"#method.make_ascii_lowercase\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_lowercase\" class=\"fn\">make_ascii_lowercase</a>(&amp;mut self)</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Converts this type to its ASCII lower case equivalent in-place. <a href=\"https://doc.rust-lang.org/1.80.1/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_lowercase\">Read more</a></div></details></div></details>","AsciiExt","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/fmt/mod.rs.html#2398\">source</a></span><a href=\"#impl-Debug-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/fmt/mod.rs.html#2399\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/fmt/mod.rs.html#2447\">source</a></span><a href=\"#impl-Display-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/fmt/mod.rs.html#2448\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/hash/mod.rs.html#868\">source</a></span><a href=\"#impl-Hash-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/hash/mod.rs.html#870\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details></div></details>","Hash","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/traits.rs.html#54-56\">source</a></span><a href=\"#impl-Index%3CI%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/traits.rs.html#61\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/traits.rs.html#67-69\">source</a></span><a href=\"#impl-IndexMut%3CI%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/traits.rs.html#72\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/traits.rs.html#20\">source</a></span><a href=\"#impl-Ord-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Implements ordering of strings.</p>\n<p>Strings are ordered  <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a> by their byte values. This orders Unicode code\npoints based on their positions in the code charts. This is not necessarily the same as\n“alphabetical” order, which varies by language and locale. Sorting strings according to\nculturally-accepted standards requires locale-specific data that is outside the scope of\nthe <code>str</code> type.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/traits.rs.html#22\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details></div></details>","Ord","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/string.rs.html#2354\">source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/string.rs.html#2354\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/string.rs.html#2354\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'a, str>>","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3COsStr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ffi/os_str.rs.html#1372\">source</a></span><a href=\"#impl-PartialEq%3COsStr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ffi/os_str.rs.html#1374\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<OsStr>","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3COsString%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ffi/os_str.rs.html#649\">source</a></span><a href=\"#impl-PartialEq%3COsString%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\">OsString</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ffi/os_str.rs.html#651\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\">OsString</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<OsString>","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CString%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/string.rs.html#2351\">source</a></span><a href=\"#impl-PartialEq%3CString%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/string.rs.html#2351\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/string.rs.html#2351\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<String>","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/traits.rs.html#28\">source</a></span><a href=\"#impl-PartialEq-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/traits.rs.html#30\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/traits.rs.html#46\">source</a></span><a href=\"#impl-PartialOrd-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Implements comparison operations on strings.</p>\n<p>Strings are compared <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a> by their byte values. This compares Unicode code\npoints based on their positions in the code charts. This is not necessarily the same as\n“alphabetical” order, which varies by language and locale. Comparing strings according to\nculturally-accepted standards requires locale-specific data that is outside the scope of\nthe <code>str</code> type.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/traits.rs.html#48\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToOwned-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/str.rs.html#207\">source</a></span><a href=\"#impl-ToOwned-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/str.rs.html#210\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Creates owned data from borrowed data, usually by cloning. <a href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/str.rs.html#214\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>)</h4></section></summary><div class='docblock'>Uses borrowed data to replace owned data, usually by cloning. <a href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details>","ToOwned","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSocketAddrs-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/socket_addr.rs.html#280\">source</a></span><a href=\"#impl-ToSocketAddrs-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/std/net/socket_addr/trait.ToSocketAddrs.html\" title=\"trait std::net::socket_addr::ToSocketAddrs\">ToSocketAddrs</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/std/net/socket_addr/trait.ToSocketAddrs.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class='docblock'>Returned iterator over socket addresses which this type may correspond\nto.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_socket_addrs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/net/socket_addr.rs.html#282\">source</a><a href=\"#method.to_socket_addrs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/std/net/socket_addr/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\" class=\"fn\">to_socket_addrs</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Converts this object to an iterator of resolved <a href=\"https://doc.rust-lang.org/1.80.1/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\"><code>SocketAddr</code></a>s. <a href=\"https://doc.rust-lang.org/1.80.1/std/net/socket_addr/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\">Read more</a></div></details></div></details>","ToSocketAddrs","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VarULE-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/slices.rs.html#45\">source</a><a href=\"#impl-VarULE-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_byte_slice_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/slices.rs.html#59\">source</a><a href=\"#method.from_byte_slice_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"zerovec/ule/trait.VarULE.html#tymethod.from_byte_slice_unchecked\" class=\"fn\">from_byte_slice_unchecked</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Invariant: must be safe to call when called on a slice that previously\nsucceeded with <code>parse_byte_slice</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.validate_byte_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/slices.rs.html#47\">source</a><a href=\"#method.validate_byte_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.VarULE.html#tymethod.validate_byte_slice\" class=\"fn\">validate_byte_slice</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"zerovec/error/enum.ZeroVecError.html\" title=\"enum zerovec::error::ZeroVecError\">ZeroVecError</a>&gt;</h4></section></summary><div class='docblock'>Validates a byte slice, <code>&amp;[u8]</code>. <a href=\"zerovec/ule/trait.VarULE.html#tymethod.validate_byte_slice\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_byte_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/slices.rs.html#53\">source</a><a href=\"#method.parse_byte_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.VarULE.html#method.parse_byte_slice\" class=\"fn\">parse_byte_slice</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, <a class=\"enum\" href=\"zerovec/error/enum.ZeroVecError.html\" title=\"enum zerovec::error::ZeroVecError\">ZeroVecError</a>&gt;</h4></section></summary><div class='docblock'>Parses a byte slice, <code>&amp;[u8]</code>, and return it as <code>&amp;Self</code> with the same lifetime. <a href=\"zerovec/ule/trait.VarULE.html#method.parse_byte_slice\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_byte_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/mod.rs.html#352\">source</a><a href=\"#method.as_byte_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.VarULE.html#method.as_byte_slice\" class=\"fn\">as_byte_slice</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Given <code>&amp;Self</code>, returns a <code>&amp;[u8]</code> with the same lifetime. <a href=\"zerovec/ule/trait.VarULE.html#method.as_byte_slice\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_boxed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/mod.rs.html#358\">source</a><a href=\"#method.to_boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.VarULE.html#method.to_boxed\" class=\"fn\">to_boxed</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Allocate on the heap as a <code>Box&lt;T&gt;</code></div></details></div></details>","VarULE","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Writeable-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"src/writeable/impls.rs.html#92\">source</a><a href=\"#impl-Writeable-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"writeable/trait.Writeable.html\" title=\"trait writeable::Writeable\">Writeable</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/writeable/impls.rs.html#115\">source</a><a href=\"#method.write_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"writeable/trait.Writeable.html#method.write_to_string\" class=\"fn\">write_to_string</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a borrowed <code>str</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::borrow::Cow;\n<span class=\"kw\">use </span>writeable::Writeable;\n\n<span class=\"kw\">let </span>cow = <span class=\"string\">\"foo\"</span>.write_to_string();\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(cow, Cow::Borrowed(<span class=\"kw\">_</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/writeable/impls.rs.html#94\">source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"writeable/trait.Writeable.html#method.write_to\" class=\"fn\">write_to</a>&lt;W&gt;(&amp;self, sink: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">Write</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Writes a string to the given sink. Errors from the sink are bubbled up.\nThe default implementation delegates to <code>write_to_parts</code>, and discards any\n<code>Part</code> annotations.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writeable_length_hint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/writeable/impls.rs.html#99\">source</a><a href=\"#method.writeable_length_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"writeable/trait.Writeable.html#method.writeable_length_hint\" class=\"fn\">writeable_length_hint</a>(&amp;self) -&gt; <a class=\"struct\" href=\"writeable/struct.LengthHint.html\" title=\"struct writeable::LengthHint\">LengthHint</a></h4></section></summary><div class='docblock'>Returns a hint for the number of UTF-8 bytes that will be written to the sink. <a href=\"writeable/trait.Writeable.html#method.writeable_length_hint\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writeable_cmp_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/writeable/impls.rs.html#120\">source</a><a href=\"#method.writeable_cmp_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"writeable/trait.Writeable.html#method.writeable_cmp_bytes\" class=\"fn\">writeable_cmp_bytes</a>(&amp;self, other: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>Compares the contents of this <code>Writeable</code> to the given bytes\nwithout allocating a String to hold the <code>Writeable</code> contents. <a href=\"writeable/trait.Writeable.html#method.writeable_cmp_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_parts\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/writeable/lib.rs.html#223\">source</a><a href=\"#method.write_to_parts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"writeable/trait.Writeable.html#method.write_to_parts\" class=\"fn\">write_to_parts</a>&lt;S&gt;(&amp;self, sink: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut S</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"writeable/trait.PartsWrite.html\" title=\"trait writeable::PartsWrite\">PartsWrite</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Write bytes and <code>Part</code> annotations to the given sink. Errors from the\nsink are bubbled up. The default implementation delegates to <code>write_to</code>,\nand doesn’t produce any <code>Part</code> annotations.</div></details></div></details>","Writeable","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroMapKV%3C'a%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/map/kv.rs.html#96\">source</a><a href=\"#impl-ZeroMapKV%3C'a%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"zerovec/map/kv/trait.ZeroMapKV.html\" title=\"trait zerovec::map::kv::ZeroMapKV\">ZeroMapKV</a>&lt;'a&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Container\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Container\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.Container\" class=\"associatedtype\">Container</a> = <a class=\"enum\" href=\"zerovec/varzerovec/vec/enum.VarZeroVec.html\" title=\"enum zerovec::varzerovec::vec::VarZeroVec\">VarZeroVec</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>The container that can be used with this type: <a href=\"zerovec/zerovec/struct.ZeroVec.html\" title=\"struct zerovec::zerovec::ZeroVec\"><code>ZeroVec</code></a> or <a href=\"zerovec/varzerovec/vec/enum.VarZeroVec.html\" title=\"enum zerovec::varzerovec::vec::VarZeroVec\"><code>VarZeroVec</code></a>.</div></details><section id=\"associatedtype.Slice\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Slice\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.Slice\" class=\"associatedtype\">Slice</a> = <a class=\"struct\" href=\"zerovec/varzerovec/slice/struct.VarZeroSlice.html\" title=\"struct zerovec::varzerovec::slice::VarZeroSlice\">VarZeroSlice</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;</h4></section><details class=\"toggle\" open><summary><section id=\"associatedtype.GetType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.GetType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.GetType\" class=\"associatedtype\">GetType</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The type produced by <code>Container::get()</code> <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.GetType\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.OwnedType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.OwnedType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.OwnedType\" class=\"associatedtype\">OwnedType</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>The type produced by <code>Container::replace()</code> and <code>Container::remove()</code>,\nalso used during deserialization. If <code>Self</code> is human readable serialized,\ndeserializing to <code>Self::OwnedType</code> should produce the same value once\npassed through <code>Self::owned_as_self()</code> <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.OwnedType\">Read more</a></div></details></div></details>","ZeroMapKV<'a>","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/str.rs.html#223\">source</a><a href=\"#impl-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Methods for string slices.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/str.rs.html#238\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.into_boxed_bytes\" class=\"fn\">into_boxed_bytes</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code> without copying or allocating.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"this is a string\"</span>;\n<span class=\"kw\">let </span>boxed_str = s.to_owned().into_boxed_str();\n<span class=\"kw\">let </span>boxed_bytes = boxed_str.into_boxed_bytes();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>boxed_bytes, <span class=\"kw-2\">*</span>s.as_bytes());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/str.rs.html#271\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.replace\" class=\"fn\">replace</a>&lt;'a, P&gt;(&amp;'a self, from: P, to: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Replaces all matches of a pattern with another string.</p>\n<p><code>replace</code> creates a new <a href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a>, and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"this is old\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"this is new\"</span>, s.replace(<span class=\"string\">\"old\"</span>, <span class=\"string\">\"new\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"than an old\"</span>, s.replace(<span class=\"string\">\"is\"</span>, <span class=\"string\">\"an\"</span>));</code></pre></div>\n<p>When the pattern doesn’t match, it returns this string slice as <a href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"this is old\"</span>;\n<span class=\"macro\">assert_eq!</span>(s, s.replace(<span class=\"string\">\"cookie monster\"</span>, <span class=\"string\">\"little lamb\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replacen\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/str.rs.html#311\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.replacen\" class=\"fn\">replacen</a>&lt;'a, P&gt;(&amp;'a self, pat: P, to: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Replaces first N matches of a pattern with another string.</p>\n<p><code>replacen</code> creates a new <a href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a>, and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most <code>count</code> times.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"foo foo 123 foo\"</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"new new 123 foo\"</span>, s.replacen(<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"new\"</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"faa fao 123 foo\"</span>, s.replacen(<span class=\"string\">'o'</span>, <span class=\"string\">\"a\"</span>, <span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo foo new23 foo\"</span>, s.replacen(char::is_numeric, <span class=\"string\">\"new\"</span>, <span class=\"number\">1</span>));</code></pre></div>\n<p>When the pattern doesn’t match, it returns this string slice as <a href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"this is old\"</span>;\n<span class=\"macro\">assert_eq!</span>(s, s.replacen(<span class=\"string\">\"cookie monster\"</span>, <span class=\"string\">\"little lamb\"</span>, <span class=\"number\">10</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/str.rs.html#368\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.to_lowercase\" class=\"fn\">to_lowercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Returns the lowercase equivalent of this string slice, as a new <a href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a>.</p>\n<p>‘Lowercase’ is defined according to the terms of the Unicode Derived Core Property\n<code>Lowercase</code>.</p>\n<p>Since some characters can expand into multiple characters when changing\nthe case, this function returns a <a href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a> instead of modifying the\nparameter in-place.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"HELLO\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, s.to_lowercase());</code></pre></div>\n<p>A tricky example, with sigma:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>sigma = <span class=\"string\">\"Σ\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"σ\"</span>, sigma.to_lowercase());\n\n<span class=\"comment\">// but at the end of a word, it's ς, not σ:\n</span><span class=\"kw\">let </span>odysseus = <span class=\"string\">\"ὈΔΥΣΣΕΎΣ\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"ὀδυσσεύς\"</span>, odysseus.to_lowercase());</code></pre></div>\n<p>Languages without case are not changed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>new_year = <span class=\"string\">\"农历新年\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(new_year, new_year.to_lowercase());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/str.rs.html#461\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.to_uppercase\" class=\"fn\">to_uppercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Returns the uppercase equivalent of this string slice, as a new <a href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a>.</p>\n<p>‘Uppercase’ is defined according to the terms of the Unicode Derived Core Property\n<code>Uppercase</code>.</p>\n<p>Since some characters can expand into multiple characters when changing\nthe case, this function returns a <a href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a> instead of modifying the\nparameter in-place.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"hello\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"HELLO\"</span>, s.to_uppercase());</code></pre></div>\n<p>Scripts without case are not changed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>new_year = <span class=\"string\">\"农历新年\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(new_year, new_year.to_uppercase());</code></pre></div>\n<p>One character can become multiple:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"tschüß\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"TSCHÜSS\"</span>, s.to_uppercase());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_string\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/str.rs.html#502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.into_string\" class=\"fn\">into_string</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;str&gt;</code></a> into a <a href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a> without copying or allocating.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>string = String::from(<span class=\"string\">\"birthday gift\"</span>);\n<span class=\"kw\">let </span>boxed_str = string.clone().into_boxed_str();\n\n<span class=\"macro\">assert_eq!</span>(boxed_str.into_string(), string);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.repeat\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/str.rs.html#531\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.repeat\" class=\"fn\">repeat</a>(&amp;self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <a href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a> by repeating a string <code>n</code> times.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function will panic if the capacity would overflow.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abc\"</span>.repeat(<span class=\"number\">4</span>), String::from(<span class=\"string\">\"abcabcabcabc\"</span>));</code></pre></div>\n<p>A panic upon overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// this will panic at runtime\n</span><span class=\"kw\">let </span>huge = <span class=\"string\">\"0123456789abcdef\"</span>.repeat(usize::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/str.rs.html#561\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.to_ascii_uppercase\" class=\"fn\">to_ascii_uppercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.</p>\n<p>ASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To uppercase the value in-place, use <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.make_ascii_uppercase\" title=\"method str::make_ascii_uppercase\"><code>make_ascii_uppercase</code></a>.</p>\n<p>To uppercase ASCII characters in addition to non-ASCII characters, use\n<a href=\"#method.to_uppercase\"><code>to_uppercase</code></a>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Grüße, Jürgen ❤\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"GRüßE, JüRGEN ❤\"</span>, s.to_ascii_uppercase());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/str.rs.html#593\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.to_ascii_lowercase\" class=\"fn\">to_ascii_lowercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.</p>\n<p>ASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To lowercase the value in-place, use <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.make_ascii_lowercase\" title=\"method str::make_ascii_lowercase\"><code>make_ascii_lowercase</code></a>.</p>\n<p>To lowercase ASCII characters in addition to non-ASCII characters, use\n<a href=\"#method.to_lowercase\"><code>to_lowercase</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Grüße, Jürgen ❤\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"grüße, jürgen ❤\"</span>, s.to_ascii_lowercase());</code></pre></div>\n</div></details></div></details>",0,"icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#139\">source</a><a href=\"#impl-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of <code>self</code>.</p>\n<p>This length is in bytes, not <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s or graphemes. In other words,\nit might not be what a human considers the length of the string.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>len = <span class=\"string\">\"foo\"</span>.len();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3</span>, len);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"ƒoo\"</span>.len(), <span class=\"number\">4</span>); <span class=\"comment\">// fancy f!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"ƒoo\"</span>.chars().count(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#179\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> has a length of zero bytes.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"\"</span>;\n<span class=\"macro\">assert!</span>(s.is_empty());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"not empty\"</span>;\n<span class=\"macro\">assert!</span>(!s.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_char_boundary\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#209\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.is_char_boundary\" class=\"fn\">is_char_boundary</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks that <code>index</code>-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.</p>\n<p>The start and end of the string (when <code>index == self.len()</code>) are\nconsidered to be boundaries.</p>\n<p>Returns <code>false</code> if <code>index</code> is greater than <code>self.len()</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n<span class=\"macro\">assert!</span>(s.is_char_boundary(<span class=\"number\">0</span>));\n<span class=\"comment\">// start of `老`\n</span><span class=\"macro\">assert!</span>(s.is_char_boundary(<span class=\"number\">6</span>));\n<span class=\"macro\">assert!</span>(s.is_char_boundary(s.len()));\n\n<span class=\"comment\">// second byte of `ö`\n</span><span class=\"macro\">assert!</span>(!s.is_char_boundary(<span class=\"number\">2</span>));\n\n<span class=\"comment\">// third byte of `老`\n</span><span class=\"macro\">assert!</span>(!s.is_char_boundary(<span class=\"number\">8</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor_char_boundary\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#256\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.floor_char_boundary\" class=\"fn\">floor_char_boundary</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>round_char_boundary</code>)</span></div></span></summary><div class=\"docblock\"><p>Finds the closest <code>x</code> not exceeding <code>index</code> where <code>is_char_boundary(x)</code> is <code>true</code>.</p>\n<p>This method can help you truncate a string so that it’s still valid UTF-8, but doesn’t\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren’t\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(round_char_boundary)]\n</span><span class=\"kw\">let </span>s = <span class=\"string\">\"❤️🧡💛💚💙💜\"</span>;\n<span class=\"macro\">assert_eq!</span>(s.len(), <span class=\"number\">26</span>);\n<span class=\"macro\">assert!</span>(!s.is_char_boundary(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>closest = s.floor_char_boundary(<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(closest, <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s[..closest], <span class=\"string\">\"❤️🧡\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceil_char_boundary\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#294\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.ceil_char_boundary\" class=\"fn\">ceil_char_boundary</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>round_char_boundary</code>)</span></div></span></summary><div class=\"docblock\"><p>Finds the closest <code>x</code> not below <code>index</code> where <code>is_char_boundary(x)</code> is <code>true</code>.</p>\n<p>If <code>index</code> is greater than the length of the string, this returns the length of the string.</p>\n<p>This method is the natural complement to <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.floor_char_boundary\" title=\"method str::floor_char_boundary\"><code>floor_char_boundary</code></a>. See that method\nfor more details.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(round_char_boundary)]\n</span><span class=\"kw\">let </span>s = <span class=\"string\">\"❤️🧡💛💚💙💜\"</span>;\n<span class=\"macro\">assert_eq!</span>(s.len(), <span class=\"number\">26</span>);\n<span class=\"macro\">assert!</span>(!s.is_char_boundary(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>closest = s.ceil_char_boundary(<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(closest, <span class=\"number\">14</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s[..closest], <span class=\"string\">\"❤️🧡💛\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#320\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the <a href=\"https://doc.rust-lang.org/1.80.1/core/str/converts/fn.from_utf8.html\" title=\"fn core::str::converts::from_utf8\"><code>from_utf8</code></a> function.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"string\">\"bors\"</span>.as_bytes();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\"bors\"</span>, bytes);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#364\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut [u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a mutable string slice to a mutable byte slice.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying <code>str</code> is used.</p>\n<p>Use of a <code>str</code> whose contents are not valid UTF-8 is undefined behavior.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"Hello\"</span>);\n<span class=\"kw\">let </span>bytes = <span class=\"kw\">unsafe </span>{ s.as_bytes_mut() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\"Hello\"</span>, bytes);</code></pre></div>\n<p>Mutability:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"🗻∈🌏\"</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>bytes = s.as_bytes_mut();\n\n    bytes[<span class=\"number\">0</span>] = <span class=\"number\">0xF0</span>;\n    bytes[<span class=\"number\">1</span>] = <span class=\"number\">0x9F</span>;\n    bytes[<span class=\"number\">2</span>] = <span class=\"number\">0x8D</span>;\n    bytes[<span class=\"number\">3</span>] = <span class=\"number\">0x94</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"🍔∈🌏\"</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#394\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Converts a string slice to a raw pointer.</p>\n<p>As string slices are a slice of bytes, the raw pointer points to a\n<a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>. This pointer will be pointing to the first byte of the string\nslice.</p>\n<p>The caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.as_mut_ptr\" title=\"method str::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Hello\"</span>;\n<span class=\"kw\">let </span>ptr = s.as_ptr();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#410\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Converts a mutable string slice to a raw pointer.</p>\n<p>As string slices are a slice of bytes, the raw pointer points to a\n<a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>. This pointer will be pointing to the first byte of the string\nslice.</p>\n<p>It is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#435\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.get\" class=\"fn\">get</a>&lt;I&gt;(&amp;self, i: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a subslice of <code>str</code>.</p>\n<p>This is the non-panicking alternative to indexing the <code>str</code>. Returns\n<a href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> whenever equivalent indexing operation would panic.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = String::from(<span class=\"string\">\"🗻∈🌏\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"🗻\"</span>), v.get(<span class=\"number\">0</span>..<span class=\"number\">4</span>));\n\n<span class=\"comment\">// indices not on UTF-8 sequence boundaries\n</span><span class=\"macro\">assert!</span>(v.get(<span class=\"number\">1</span>..).is_none());\n<span class=\"macro\">assert!</span>(v.get(..<span class=\"number\">8</span>).is_none());\n\n<span class=\"comment\">// out of bounds\n</span><span class=\"macro\">assert!</span>(v.get(..<span class=\"number\">42</span>).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#467\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.get_mut\" class=\"fn\">get_mut</a>&lt;I&gt;(\n    &amp;mut self,\n    i: I,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable subslice of <code>str</code>.</p>\n<p>This is the non-panicking alternative to indexing the <code>str</code>. Returns\n<a href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> whenever equivalent indexing operation would panic.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = String::from(<span class=\"string\">\"hello\"</span>);\n<span class=\"comment\">// correct length\n</span><span class=\"macro\">assert!</span>(v.get_mut(<span class=\"number\">0</span>..<span class=\"number\">5</span>).is_some());\n<span class=\"comment\">// out of bounds\n</span><span class=\"macro\">assert!</span>(v.get_mut(..<span class=\"number\">42</span>).is_none());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"he\"</span>), v.get_mut(<span class=\"number\">0</span>..<span class=\"number\">2</span>).map(|v| <span class=\"kw-2\">&amp;*</span>v));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, v);\n{\n    <span class=\"kw\">let </span>s = v.get_mut(<span class=\"number\">0</span>..<span class=\"number\">2</span>);\n    <span class=\"kw\">let </span>s = s.map(|s| {\n        s.make_ascii_uppercase();\n        <span class=\"kw-2\">&amp;*</span>s\n    });\n    <span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HE\"</span>), s);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"HEllo\"</span>, v);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#499\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>&lt;I&gt;(&amp;self, i: I) -&gt; &amp;&lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns an unchecked subslice of <code>str</code>.</p>\n<p>This is the unchecked alternative to indexing the <code>str</code>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>Callers of this function are responsible that these preconditions are\nsatisfied:</p>\n<ul>\n<li>The starting index must not exceed the ending index;</li>\n<li>Indexes must be within bounds of the original slice;</li>\n<li>Indexes must lie on UTF-8 sequence boundaries.</li>\n</ul>\n<p>Failing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the <code>str</code> type.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"string\">\"🗻∈🌏\"</span>;\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"🗻\"</span>, v.get_unchecked(<span class=\"number\">0</span>..<span class=\"number\">4</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"∈\"</span>, v.get_unchecked(<span class=\"number\">4</span>..<span class=\"number\">7</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"🌏\"</span>, v.get_unchecked(<span class=\"number\">7</span>..<span class=\"number\">11</span>));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#534\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>&lt;I&gt;(\n    &amp;mut self,\n    i: I,\n) -&gt; &amp;mut &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable, unchecked subslice of <code>str</code>.</p>\n<p>This is the unchecked alternative to indexing the <code>str</code>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>Callers of this function are responsible that these preconditions are\nsatisfied:</p>\n<ul>\n<li>The starting index must not exceed the ending index;</li>\n<li>Indexes must be within bounds of the original slice;</li>\n<li>Indexes must lie on UTF-8 sequence boundaries.</li>\n</ul>\n<p>Failing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the <code>str</code> type.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = String::from(<span class=\"string\">\"🗻∈🌏\"</span>);\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"🗻\"</span>, v.get_unchecked_mut(<span class=\"number\">0</span>..<span class=\"number\">4</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"∈\"</span>, v.get_unchecked_mut(<span class=\"number\">4</span>..<span class=\"number\">7</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"🌏\"</span>, v.get_unchecked_mut(<span class=\"number\">7</span>..<span class=\"number\">11</span>));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#585\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.slice_unchecked\" class=\"fn\">slice_unchecked</a>(&amp;self, begin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.29.0: use <code>get_unchecked(begin..end)</code> instead</span></div></span></summary><div class=\"docblock\"><p>Creates a string slice from another string slice, bypassing safety\nchecks.</p>\n<p>This is generally not recommended, use with caution! For a safe\nalternative see <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a> and <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\"><code>Index</code></a>.</p>\n<p>This new slice goes from <code>begin</code> to <code>end</code>, including <code>begin</code> but\nexcluding <code>end</code>.</p>\n<p>To get a mutable string slice instead, see the\n<a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.slice_mut_unchecked\" title=\"method str::slice_mut_unchecked\"><code>slice_mut_unchecked</code></a> method.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>Callers of this function are responsible that three preconditions are\nsatisfied:</p>\n<ul>\n<li><code>begin</code> must not exceed <code>end</code>.</li>\n<li><code>begin</code> and <code>end</code> must be byte positions within the string slice.</li>\n<li><code>begin</code> and <code>end</code> must lie on UTF-8 sequence boundaries.</li>\n</ul>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Löwe 老虎 Léopard\"</span>, s.slice_unchecked(<span class=\"number\">0</span>, <span class=\"number\">21</span>));\n}\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"Hello, world!\"</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"world\"</span>, s.slice_unchecked(<span class=\"number\">7</span>, <span class=\"number\">12</span>));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_mut_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#618\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.slice_mut_unchecked\" class=\"fn\">slice_mut_unchecked</a>(\n    &amp;mut self,\n    begin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>,\n) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.29.0: use <code>get_unchecked_mut(begin..end)</code> instead</span></div></span></summary><div class=\"docblock\"><p>Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a> and <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\"><code>IndexMut</code></a>.</p>\n<p>This new slice goes from <code>begin</code> to <code>end</code>, including <code>begin</code> but\nexcluding <code>end</code>.</p>\n<p>To get an immutable string slice instead, see the\n<a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.slice_unchecked\" title=\"method str::slice_unchecked\"><code>slice_unchecked</code></a> method.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>Callers of this function are responsible that three preconditions are\nsatisfied:</p>\n<ul>\n<li><code>begin</code> must not exceed <code>end</code>.</li>\n<li><code>begin</code> and <code>end</code> must be byte positions within the string slice.</li>\n<li><code>begin</code> and <code>end</code> must lie on UTF-8 sequence boundaries.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#657\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.split_at\" class=\"fn\">split_at</a>(&amp;self, mid: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>) -&gt; (&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Divide one string slice into two at an index.</p>\n<p>The argument, <code>mid</code>, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.</p>\n<p>The two slices returned go from the start of the string slice to <code>mid</code>,\nand from <code>mid</code> to the end of the string slice.</p>\n<p>To get mutable string slices instead, see the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.split_at_mut\" title=\"method str::split_at_mut\"><code>split_at_mut</code></a>\nmethod.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>mid</code> is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.split_at_checked\" title=\"method str::split_at_checked\"><code>split_at_checked</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Per Martin-Löf\"</span>;\n\n<span class=\"kw\">let </span>(first, last) = s.split_at(<span class=\"number\">3</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Per\"</span>, first);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\" Martin-Löf\"</span>, last);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#697\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.split_at_mut\" class=\"fn\">split_at_mut</a>(&amp;mut self, mid: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>) -&gt; (&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Divide one mutable string slice into two at an index.</p>\n<p>The argument, <code>mid</code>, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.</p>\n<p>The two slices returned go from the start of the string slice to <code>mid</code>,\nand from <code>mid</code> to the end of the string slice.</p>\n<p>To get immutable string slices instead, see the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.split_at\" title=\"method str::split_at\"><code>split_at</code></a> method.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>mid</code> is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.split_at_mut_checked\" title=\"method str::split_at_mut_checked\"><code>split_at_mut_checked</code></a>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"string\">\"Per Martin-Löf\"</span>.to_string();\n{\n    <span class=\"kw\">let </span>(first, last) = s.split_at_mut(<span class=\"number\">3</span>);\n    first.make_ascii_uppercase();\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"PER\"</span>, first);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\" Martin-Löf\"</span>, last);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"PER Martin-Löf\"</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_checked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#736\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.split_at_checked\" class=\"fn\">split_at_checked</a>(&amp;self, mid: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Divide one string slice into two at an index.</p>\n<p>The argument, <code>mid</code>, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns <code>None</code> if that’s not the case.</p>\n<p>The two slices returned go from the start of the string slice to <code>mid</code>,\nand from <code>mid</code> to the end of the string slice.</p>\n<p>To get mutable string slices instead, see the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.split_at_mut_checked\" title=\"method str::split_at_mut_checked\"><code>split_at_mut_checked</code></a>\nmethod.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Per Martin-Löf\"</span>;\n\n<span class=\"kw\">let </span>(first, last) = s.split_at_checked(<span class=\"number\">3</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Per\"</span>, first);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\" Martin-Löf\"</span>, last);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, s.split_at_checked(<span class=\"number\">13</span>));  <span class=\"comment\">// Inside “ö”\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, s.split_at_checked(<span class=\"number\">16</span>));  <span class=\"comment\">// Beyond the string length</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_mut_checked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#776\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.split_at_mut_checked\" class=\"fn\">split_at_mut_checked</a>(\n    &amp;mut self,\n    mid: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Divide one mutable string slice into two at an index.</p>\n<p>The argument, <code>mid</code>, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns <code>None</code> if that’s not the case.</p>\n<p>The two slices returned go from the start of the string slice to <code>mid</code>,\nand from <code>mid</code> to the end of the string slice.</p>\n<p>To get immutable string slices instead, see the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.split_at_checked\" title=\"method str::split_at_checked\"><code>split_at_checked</code></a> method.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"string\">\"Per Martin-Löf\"</span>.to_string();\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((first, last)) = s.split_at_mut_checked(<span class=\"number\">3</span>) {\n    first.make_ascii_uppercase();\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"PER\"</span>, first);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">\" Martin-Löf\"</span>, last);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"PER Martin-Löf\"</span>, s);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, s.split_at_mut_checked(<span class=\"number\">13</span>));  <span class=\"comment\">// Inside “ö”\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, s.split_at_mut_checked(<span class=\"number\">16</span>));  <span class=\"comment\">// Beyond the string length</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chars\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#853\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.chars\" class=\"fn\">chars</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.Chars.html\" title=\"struct core::str::iter::Chars\">Chars</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s of a string slice.</p>\n<p>As a string slice consists of valid UTF-8, we can iterate through a\nstring slice by <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>. This method returns such an iterator.</p>\n<p>It’s important to remember that <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> represents a Unicode Scalar\nValue, and might not match your idea of what a ‘character’ is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust’s standard library, check crates.io instead.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>word = <span class=\"string\">\"goodbye\"</span>;\n\n<span class=\"kw\">let </span>count = word.chars().count();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">7</span>, count);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>chars = word.chars();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'g'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'o'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'o'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'d'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'b'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'y'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'e'</span>), chars.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, chars.next());</code></pre></div>\n<p>Remember, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s might not match your intuition about characters:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>y = <span class=\"string\">\"y̆\"</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>chars = y.chars();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'y'</span>), chars.next()); <span class=\"comment\">// not 'y̆'\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'\\u{0306}'</span>), chars.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, chars.next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.char_indices\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#910\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.char_indices\" class=\"fn\">char_indices</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.CharIndices.html\" title=\"struct core::str::iter::CharIndices\">CharIndices</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s of a string slice, and their\npositions.</p>\n<p>As a string slice consists of valid UTF-8, we can iterate through a\nstring slice by <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>. This method returns an iterator of both\nthese <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, as well as their byte positions.</p>\n<p>The iterator yields tuples. The position is first, the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> is\nsecond.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>word = <span class=\"string\">\"goodbye\"</span>;\n\n<span class=\"kw\">let </span>count = word.char_indices().count();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">7</span>, count);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>char_indices = word.char_indices();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">0</span>, <span class=\"string\">'g'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">'o'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">2</span>, <span class=\"string\">'o'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">3</span>, <span class=\"string\">'d'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">4</span>, <span class=\"string\">'b'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">5</span>, <span class=\"string\">'y'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">6</span>, <span class=\"string\">'e'</span>)), char_indices.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, char_indices.next());</code></pre></div>\n<p>Remember, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s might not match your intuition about characters:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>yes = <span class=\"string\">\"y̆es\"</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>char_indices = yes.char_indices();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">0</span>, <span class=\"string\">'y'</span>)), char_indices.next()); <span class=\"comment\">// not (0, 'y̆')\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">'\\u{0306}'</span>)), char_indices.next());\n\n<span class=\"comment\">// note the 3 here - the previous character took up two bytes\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">3</span>, <span class=\"string\">'e'</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">4</span>, <span class=\"string\">'s'</span>)), char_indices.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, char_indices.next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#933\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.bytes\" class=\"fn\">bytes</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.Bytes.html\" title=\"struct core::str::iter::Bytes\">Bytes</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator over the bytes of a string slice.</p>\n<p>As a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = <span class=\"string\">\"bors\"</span>.bytes();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">b'b'</span>), bytes.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">b'o'</span>), bytes.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">b'r'</span>), bytes.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">b's'</span>), bytes.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, bytes.next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_whitespace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#985\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.split_whitespace\" class=\"fn\">split_whitespace</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.SplitWhitespace.html\" title=\"struct core::str::iter::SplitWhitespace\">SplitWhitespace</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Splits a string slice by whitespace.</p>\n<p>The iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>. If you only want to split on ASCII whitespace\ninstead, use <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.split_ascii_whitespace\" title=\"method str::split_ascii_whitespace\"><code>split_ascii_whitespace</code></a>.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = <span class=\"string\">\"A few words\"</span>.split_whitespace();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"A\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"few\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"words\"</span>), iter.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());</code></pre></div>\n<p>All kinds of whitespace are considered:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = <span class=\"string\">\" Mary   had\\ta\\u{2009}little  \\n\\t lamb\"</span>.split_whitespace();\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Mary\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"had\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"little\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"lamb\"</span>), iter.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());</code></pre></div>\n<p>If the string is empty or all whitespace, the iterator yields no string slices:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\"</span>.split_whitespace().next(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"   \"</span>.split_whitespace().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_ascii_whitespace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1034\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.split_ascii_whitespace\" class=\"fn\">split_ascii_whitespace</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.SplitAsciiWhitespace.html\" title=\"struct core::str::iter::SplitAsciiWhitespace\">SplitAsciiWhitespace</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Splits a string slice by ASCII whitespace.</p>\n<p>The iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.</p>\n<p>To split by Unicode <code>Whitespace</code> instead, use <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.split_whitespace\" title=\"method str::split_whitespace\"><code>split_whitespace</code></a>.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = <span class=\"string\">\"A few words\"</span>.split_ascii_whitespace();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"A\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"few\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"words\"</span>), iter.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());</code></pre></div>\n<p>All kinds of ASCII whitespace are considered:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = <span class=\"string\">\" Mary   had\\ta little  \\n\\t lamb\"</span>.split_ascii_whitespace();\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Mary\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"had\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"little\"</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"lamb\"</span>), iter.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());</code></pre></div>\n<p>If the string is empty or all ASCII whitespace, the iterator yields no string slices:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\"</span>.split_ascii_whitespace().next(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"   \"</span>.split_ascii_whitespace().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lines\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.lines\" class=\"fn\">lines</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.Lines.html\" title=\"struct core::str::iter::Lines\">Lines</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator over the lines of a string, as string slices.</p>\n<p>Lines are split at line endings that are either newlines (<code>\\n</code>) or\nsequences of a carriage return followed by a line feed (<code>\\r\\n</code>).</p>\n<p>Line terminators are not included in the lines returned by the iterator.</p>\n<p>Note that any carriage return (<code>\\r</code>) not immediately followed by a\nline feed (<code>\\n</code>) does not split a line. These carriage returns are\nthereby included in the produced lines.</p>\n<p>The final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text = <span class=\"string\">\"foo\\r\\nbar\\n\\nbaz\\r\"</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lines = text.lines();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"bar\"</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"\"</span>), lines.next());\n<span class=\"comment\">// Trailing carriage return is included in the last line\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"baz\\r\"</span>), lines.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, lines.next());</code></pre></div>\n<p>The final line does not require any ending:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text = <span class=\"string\">\"foo\\nbar\\n\\r\\nbaz\"</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lines = text.lines();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"bar\"</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"\"</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"baz\"</span>), lines.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, lines.next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lines_any\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1105\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.lines_any\" class=\"fn\">lines_any</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.LinesAny.html\" title=\"struct core::str::iter::LinesAny\">LinesAny</a>&lt;'_&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.4.0: use lines() instead now</span></div></span></summary><div class=\"docblock\"><p>An iterator over the lines of a string.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_utf16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1124\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.encode_utf16\" class=\"fn\">encode_utf16</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.EncodeUtf16.html\" title=\"struct core::str::iter::EncodeUtf16\">EncodeUtf16</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator of <code>u16</code> over the string encoded as UTF-16.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text = <span class=\"string\">\"Zażółć gęślą jaźń\"</span>;\n\n<span class=\"kw\">let </span>utf8_len = text.len();\n<span class=\"kw\">let </span>utf16_len = text.encode_utf16().count();\n\n<span class=\"macro\">assert!</span>(utf16_len &lt;= utf8_len);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1149\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.contains\" class=\"fn\">contains</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the given pattern matches a sub-slice of\nthis string slice.</p>\n<p>Returns <code>false</code> if it does not.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bananas = <span class=\"string\">\"bananas\"</span>;\n\n<span class=\"macro\">assert!</span>(bananas.contains(<span class=\"string\">\"nana\"</span>));\n<span class=\"macro\">assert!</span>(!bananas.contains(<span class=\"string\">\"apples\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.starts_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1186\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.starts_with\" class=\"fn\">starts_with</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the given pattern matches a prefix of this\nstring slice.</p>\n<p>Returns <code>false</code> if it does not.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, in which case this function will return true if\nthe <code>&amp;str</code> is a prefix of this string slice.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can also be a <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bananas = <span class=\"string\">\"bananas\"</span>;\n\n<span class=\"macro\">assert!</span>(bananas.starts_with(<span class=\"string\">\"bana\"</span>));\n<span class=\"macro\">assert!</span>(!bananas.starts_with(<span class=\"string\">\"nana\"</span>));</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bananas = <span class=\"string\">\"bananas\"</span>;\n\n<span class=\"comment\">// Note that both of these assert successfully.\n</span><span class=\"macro\">assert!</span>(bananas.starts_with(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'n'</span>, <span class=\"string\">'a'</span>]));\n<span class=\"macro\">assert!</span>(bananas.starts_with(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ends_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1210-1212\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.ends_with\" class=\"fn\">ends_with</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type core::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.ReverseSearcher.html\" title=\"trait core::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the given pattern matches a suffix of this\nstring slice.</p>\n<p>Returns <code>false</code> if it does not.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bananas = <span class=\"string\">\"bananas\"</span>;\n\n<span class=\"macro\">assert!</span>(bananas.ends_with(<span class=\"string\">\"anas\"</span>));\n<span class=\"macro\">assert!</span>(!bananas.ends_with(<span class=\"string\">\"nana\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1261\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.find\" class=\"fn\">find</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the byte index of the first character of this string slice that\nmatches the pattern.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the pattern doesn’t match.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard Gepardi\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.find(<span class=\"string\">'L'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(<span class=\"string\">'é'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">14</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(<span class=\"string\">\"pard\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">17</span>));</code></pre></div>\n<p>More complex patterns using point-free style and closures:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.find(char::is_whitespace), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(char::is_lowercase), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(|c: char| (c &lt; <span class=\"string\">'o'</span>) &amp;&amp; (c &gt; <span class=\"string\">'a'</span>)), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n<p>Not finding the pattern:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n\n<span class=\"macro\">assert_eq!</span>(s.find(x), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rfind\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1307-1309\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.rfind\" class=\"fn\">rfind</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type core::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.ReverseSearcher.html\" title=\"trait core::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the byte index for the first character of the last match of the pattern in\nthis string slice.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the pattern doesn’t match.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard Gepardi\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.rfind(<span class=\"string\">'L'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n<span class=\"macro\">assert_eq!</span>(s.rfind(<span class=\"string\">'é'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">14</span>));\n<span class=\"macro\">assert_eq!</span>(s.rfind(<span class=\"string\">\"pard\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));</code></pre></div>\n<p>More complex patterns with closures:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.rfind(char::is_whitespace), <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));\n<span class=\"macro\">assert_eq!</span>(s.rfind(char::is_lowercase), <span class=\"prelude-val\">Some</span>(<span class=\"number\">20</span>));</code></pre></div>\n<p>Not finding the pattern:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"Löwe 老虎 Léopard\"</span>;\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n\n<span class=\"macro\">assert_eq!</span>(s.rfind(x), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1429\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.split\" class=\"fn\">split</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.Split.html\" title=\"struct core::str::iter::Split\">Split</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior\"><a class=\"doc-anchor\" href=\"#iterator-behavior\">§</a>Iterator behavior</h5>\n<p>The returned iterator will be a <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, but not for <code>&amp;str</code>.</p>\n<p>If the pattern allows a reverse search but its results might differ\nfrom a forward search, the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.rsplit\" title=\"method str::rsplit\"><code>rsplit</code></a> method can be used.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"Mary had a little lamb\"</span>.split(<span class=\"string\">' '</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"had\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"little\"</span>, <span class=\"string\">\"lamb\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"\"</span>.split(<span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lionXXtigerXleopard\"</span>.split(<span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"lion\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"tiger\"</span>, <span class=\"string\">\"leopard\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lion::tiger::leopard\"</span>.split(<span class=\"string\">\"::\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"lion\"</span>, <span class=\"string\">\"tiger\"</span>, <span class=\"string\">\"leopard\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abc1def2ghi\"</span>.split(char::is_numeric).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"ghi\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lionXtigerXleopard\"</span>.split(char::is_uppercase).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"lion\"</span>, <span class=\"string\">\"tiger\"</span>, <span class=\"string\">\"leopard\"</span>]);</code></pre></div>\n<p>If the pattern is a slice of chars, split on each occurrence of any of the characters:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"2020-11-03 23:59\"</span>.split(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'-'</span>, <span class=\"string\">' '</span>, <span class=\"string\">':'</span>, <span class=\"string\">'@'</span>][..]).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"2020\"</span>, <span class=\"string\">\"11\"</span>, <span class=\"string\">\"03\"</span>, <span class=\"string\">\"23\"</span>, <span class=\"string\">\"59\"</span>]);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abc1defXghi\"</span>.split(|c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"ghi\"</span>]);</code></pre></div>\n<p>If a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"string\">\"||||a||b|c\"</span>.to_string();\n<span class=\"kw\">let </span>d: Vec&lt;<span class=\"kw\">_</span>&gt; = x.split(<span class=\"string\">'|'</span>).collect();\n\n<span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]);</code></pre></div>\n<p>Contiguous separators are separated by the empty string.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"string\">\"(///)\"</span>.to_string();\n<span class=\"kw\">let </span>d: Vec&lt;<span class=\"kw\">_</span>&gt; = x.split(<span class=\"string\">'/'</span>).collect();\n\n<span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"(\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\")\"</span>]);</code></pre></div>\n<p>Separators at the start or end of a string are neighbored\nby empty strings.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>d: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"010\"</span>.split(<span class=\"string\">\"0\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"\"</span>]);</code></pre></div>\n<p>When the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"rust\"</span>.split(<span class=\"string\">\"\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(f, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"string\">\"u\"</span>, <span class=\"string\">\"s\"</span>, <span class=\"string\">\"t\"</span>, <span class=\"string\">\"\"</span>]);</code></pre></div>\n<p>Contiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"string\">\"    a  b c\"</span>.to_string();\n<span class=\"kw\">let </span>d: Vec&lt;<span class=\"kw\">_</span>&gt; = x.split(<span class=\"string\">' '</span>).collect();\n\n<span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]);</code></pre></div>\n<p>It does <em>not</em> give you:</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]);</code></pre></div>\n<p>Use <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.split_whitespace\" title=\"method str::split_whitespace\"><code>split_whitespace</code></a> for this behavior.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_inclusive\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1469\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.split_inclusive\" class=\"fn\">split_inclusive</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.SplitInclusive.html\" title=\"struct core::str::iter::SplitInclusive\">SplitInclusive</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n<code>split</code> in that <code>split_inclusive</code> leaves the matched part as the\nterminator of the substring.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    </span>.split_inclusive(<span class=\"string\">'\\n'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"Mary had a little lamb\\n\"</span>, <span class=\"string\">\"little lamb\\n\"</span>, <span class=\"string\">\"little lamb.\"</span>]);</code></pre></div>\n<p>If the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    </span>.split_inclusive(<span class=\"string\">'\\n'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"Mary had a little lamb\\n\"</span>, <span class=\"string\">\"little lamb\\n\"</span>, <span class=\"string\">\"little lamb.\\n\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rsplit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1524-1526\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.rsplit\" class=\"fn\">rsplit</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.RSplit.html\" title=\"struct core::str::iter::RSplit\">RSplit</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type core::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.ReverseSearcher.html\" title=\"trait core::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-1\"><a class=\"doc-anchor\" href=\"#iterator-behavior-1\">§</a>Iterator behavior</h5>\n<p>The returned iterator requires that the pattern supports a reverse\nsearch, and it will be a <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if a forward/reverse\nsearch yields the same elements.</p>\n<p>For iterating from the front, the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.split\" title=\"method str::split\"><code>split</code></a> method can be used.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"Mary had a little lamb\"</span>.rsplit(<span class=\"string\">' '</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"lamb\"</span>, <span class=\"string\">\"little\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"had\"</span>, <span class=\"string\">\"Mary\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"\"</span>.rsplit(<span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lionXXtigerXleopard\"</span>.rsplit(<span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"leopard\"</span>, <span class=\"string\">\"tiger\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"lion\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lion::tiger::leopard\"</span>.rsplit(<span class=\"string\">\"::\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"leopard\"</span>, <span class=\"string\">\"tiger\"</span>, <span class=\"string\">\"lion\"</span>]);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abc1defXghi\"</span>.rsplit(|c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"ghi\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"abc\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_terminator\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1573\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.split_terminator\" class=\"fn\">split_terminator</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.SplitTerminator.html\" title=\"struct core::str::iter::SplitTerminator\">SplitTerminator</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<p>Equivalent to <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.split\" title=\"method str::split\"><code>split</code></a>, except that the trailing substring\nis skipped if empty.</p>\n<p>This method can be used for string data that is <em>terminated</em>,\nrather than <em>separated</em> by a pattern.</p>\n<h5 id=\"iterator-behavior-2\"><a class=\"doc-anchor\" href=\"#iterator-behavior-2\">§</a>Iterator behavior</h5>\n<p>The returned iterator will be a <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, but not for <code>&amp;str</code>.</p>\n<p>If the pattern allows a reverse search but its results might differ\nfrom a forward search, the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.rsplit_terminator\" title=\"method str::rsplit_terminator\"><code>rsplit_terminator</code></a> method can be used.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"A.B.\"</span>.split_terminator(<span class=\"string\">'.'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"A..B..\"</span>.split_terminator(<span class=\"string\">\".\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"A\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"A.B:C.D\"</span>.split_terminator(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'.'</span>, <span class=\"string\">':'</span>][..]).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"D\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rsplit_terminator\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1619-1621\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.rsplit_terminator\" class=\"fn\">rsplit_terminator</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.RSplitTerminator.html\" title=\"struct core::str::iter::RSplitTerminator\">RSplitTerminator</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type core::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.ReverseSearcher.html\" title=\"trait core::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of <code>self</code>, separated by characters\nmatched by a pattern and yielded in reverse order.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<p>Equivalent to <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.split\" title=\"method str::split\"><code>split</code></a>, except that the trailing substring is\nskipped if empty.</p>\n<p>This method can be used for string data that is <em>terminated</em>,\nrather than <em>separated</em> by a pattern.</p>\n<h5 id=\"iterator-behavior-3\"><a class=\"doc-anchor\" href=\"#iterator-behavior-3\">§</a>Iterator behavior</h5>\n<p>The returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.</p>\n<p>For iterating from the front, the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.split_terminator\" title=\"method str::split_terminator\"><code>split_terminator</code></a> method can be\nused.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"A.B.\"</span>.rsplit_terminator(<span class=\"string\">'.'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"B\"</span>, <span class=\"string\">\"A\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"A..B..\"</span>.rsplit_terminator(<span class=\"string\">\".\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"A\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"A.B:C.D\"</span>.rsplit_terminator(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'.'</span>, <span class=\"string\">':'</span>][..]).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"D\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"A\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.splitn\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1674\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.splitn\" class=\"fn\">splitn</a>&lt;'a, P&gt;(&amp;'a self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>, pat: P) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.SplitN.html\" title=\"struct core::str::iter::SplitN\">SplitN</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most <code>n</code> items.</p>\n<p>If <code>n</code> substrings are returned, the last substring (the <code>n</code>th substring)\nwill contain the remainder of the string.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-4\"><a class=\"doc-anchor\" href=\"#iterator-behavior-4\">§</a>Iterator behavior</h5>\n<p>The returned iterator will not be double ended, because it is\nnot efficient to support.</p>\n<p>If the pattern allows a reverse search, the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.rsplitn\" title=\"method str::rsplitn\"><code>rsplitn</code></a> method can be\nused.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"Mary had a little lambda\"</span>.splitn(<span class=\"number\">3</span>, <span class=\"string\">' '</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"had\"</span>, <span class=\"string\">\"a little lambda\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lionXXtigerXleopard\"</span>.splitn(<span class=\"number\">3</span>, <span class=\"string\">\"X\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"lion\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"tigerXleopard\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abcXdef\"</span>.splitn(<span class=\"number\">1</span>, <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"abcXdef\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"\"</span>.splitn(<span class=\"number\">1</span>, <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"\"</span>]);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abc1defXghi\"</span>.splitn(<span class=\"number\">2</span>, |c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"defXghi\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rsplitn\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1723-1725\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.rsplitn\" class=\"fn\">rsplitn</a>&lt;'a, P&gt;(&amp;'a self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>, pat: P) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.RSplitN.html\" title=\"struct core::str::iter::RSplitN\">RSplitN</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type core::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.ReverseSearcher.html\" title=\"trait core::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most <code>n</code> items.</p>\n<p>If <code>n</code> substrings are returned, the last substring (the <code>n</code>th substring)\nwill contain the remainder of the string.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-5\"><a class=\"doc-anchor\" href=\"#iterator-behavior-5\">§</a>Iterator behavior</h5>\n<p>The returned iterator will not be double ended, because it is not\nefficient to support.</p>\n<p>For splitting from the front, the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.splitn\" title=\"method str::splitn\"><code>splitn</code></a> method can be used.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"Mary had a little lamb\"</span>.rsplitn(<span class=\"number\">3</span>, <span class=\"string\">' '</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"lamb\"</span>, <span class=\"string\">\"little\"</span>, <span class=\"string\">\"Mary had a\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lionXXtigerXleopard\"</span>.rsplitn(<span class=\"number\">3</span>, <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"leopard\"</span>, <span class=\"string\">\"tiger\"</span>, <span class=\"string\">\"lionX\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"lion::tiger::leopard\"</span>.rsplitn(<span class=\"number\">2</span>, <span class=\"string\">\"::\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"leopard\"</span>, <span class=\"string\">\"lion::tiger\"</span>]);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abc1defXghi\"</span>.rsplitn(<span class=\"number\">2</span>, |c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"ghi\"</span>, <span class=\"string\">\"abc1def\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_once\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1743\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.split_once\" class=\"fn\">split_once</a>&lt;'a, P&gt;(&amp;'a self, delimiter: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>)&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg\"</span>.split_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg=\"</span>.split_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"cfg\"</span>, <span class=\"string\">\"\"</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg=foo\"</span>.split_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"cfg\"</span>, <span class=\"string\">\"foo\"</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg=foo=bar\"</span>.split_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"cfg\"</span>, <span class=\"string\">\"foo=bar\"</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rsplit_once\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1761-1763\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.rsplit_once\" class=\"fn\">rsplit_once</a>&lt;'a, P&gt;(&amp;'a self, delimiter: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>)&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type core::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.ReverseSearcher.html\" title=\"trait core::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg\"</span>.rsplit_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg=foo\"</span>.rsplit_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"cfg\"</span>, <span class=\"string\">\"foo\"</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"cfg=foo=bar\"</span>.rsplit_once(<span class=\"string\">'='</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"cfg=foo\"</span>, <span class=\"string\">\"bar\"</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1801\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.matches\" class=\"fn\">matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.Matches.html\" title=\"struct core::str::iter::Matches\">Matches</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over the disjoint matches of a pattern within the given string\nslice.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-6\"><a class=\"doc-anchor\" href=\"#iterator-behavior-6\">§</a>Iterator behavior</h5>\n<p>The returned iterator will be a <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, but not for <code>&amp;str</code>.</p>\n<p>If the pattern allows a reverse search but its results might differ\nfrom a forward search, the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.rmatches\" title=\"method str::rmatches\"><code>rmatches</code></a> method can be used.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abcXXXabcYYYabc\"</span>.matches(<span class=\"string\">\"abc\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"abc\"</span>, <span class=\"string\">\"abc\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"1abc2abc3\"</span>.matches(char::is_numeric).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rmatches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1835-1837\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.rmatches\" class=\"fn\">rmatches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.RMatches.html\" title=\"struct core::str::iter::RMatches\">RMatches</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type core::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.ReverseSearcher.html\" title=\"trait core::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-7\"><a class=\"doc-anchor\" href=\"#iterator-behavior-7\">§</a>Iterator behavior</h5>\n<p>The returned iterator requires that the pattern supports a reverse\nsearch, and it will be a <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if a forward/reverse\nsearch yields the same elements.</p>\n<p>For iterating from the front, the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.matches\" title=\"method str::matches\"><code>matches</code></a> method can be used.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"abcXXXabcYYYabc\"</span>.rmatches(<span class=\"string\">\"abc\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"abc\"</span>, <span class=\"string\">\"abc\"</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">\"1abc2abc3\"</span>.rmatches(char::is_numeric).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"3\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"1\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.match_indices\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1879\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.match_indices\" class=\"fn\">match_indices</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.MatchIndices.html\" title=\"struct core::str::iter::MatchIndices\">MatchIndices</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.</p>\n<p>For matches of <code>pat</code> within <code>self</code> that overlap, only the indices\ncorresponding to the first match are returned.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-8\"><a class=\"doc-anchor\" href=\"#iterator-behavior-8\">§</a>Iterator behavior</h5>\n<p>The returned iterator will be a <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, but not for <code>&amp;str</code>.</p>\n<p>If the pattern allows a reverse search but its results might differ\nfrom a forward search, the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.rmatch_indices\" title=\"method str::rmatch_indices\"><code>rmatch_indices</code></a> method can be used.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"abcXXXabcYYYabc\"</span>.match_indices(<span class=\"string\">\"abc\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">0</span>, <span class=\"string\">\"abc\"</span>), (<span class=\"number\">6</span>, <span class=\"string\">\"abc\"</span>), (<span class=\"number\">12</span>, <span class=\"string\">\"abc\"</span>)]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"1abcabc2\"</span>.match_indices(<span class=\"string\">\"abc\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">1</span>, <span class=\"string\">\"abc\"</span>), (<span class=\"number\">4</span>, <span class=\"string\">\"abc\"</span>)]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"ababa\"</span>.match_indices(<span class=\"string\">\"aba\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">0</span>, <span class=\"string\">\"aba\"</span>)]); <span class=\"comment\">// only the first `aba`</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rmatch_indices\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1919-1921\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.rmatch_indices\" class=\"fn\">rmatch_indices</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.RMatchIndices.html\" title=\"struct core::str::iter::RMatchIndices\">RMatchIndices</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type core::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.ReverseSearcher.html\" title=\"trait core::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>An iterator over the disjoint matches of a pattern within <code>self</code>,\nyielded in reverse order along with the index of the match.</p>\n<p>For matches of <code>pat</code> within <code>self</code> that overlap, only the indices\ncorresponding to the last match are returned.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-9\"><a class=\"doc-anchor\" href=\"#iterator-behavior-9\">§</a>Iterator behavior</h5>\n<p>The returned iterator requires that the pattern supports a reverse\nsearch, and it will be a <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if a forward/reverse\nsearch yields the same elements.</p>\n<p>For iterating from the front, the <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.match_indices\" title=\"method str::match_indices\"><code>match_indices</code></a> method can be used.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"abcXXXabcYYYabc\"</span>.rmatch_indices(<span class=\"string\">\"abc\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">12</span>, <span class=\"string\">\"abc\"</span>), (<span class=\"number\">6</span>, <span class=\"string\">\"abc\"</span>), (<span class=\"number\">0</span>, <span class=\"string\">\"abc\"</span>)]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"1abcabc2\"</span>.rmatch_indices(<span class=\"string\">\"abc\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">4</span>, <span class=\"string\">\"abc\"</span>), (<span class=\"number\">1</span>, <span class=\"string\">\"abc\"</span>)]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">\"ababa\"</span>.rmatch_indices(<span class=\"string\">\"aba\"</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">2</span>, <span class=\"string\">\"aba\"</span>)]); <span class=\"comment\">// only the last `aba`</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1943\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.trim\" class=\"fn\">trim</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with leading and trailing whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>, which includes newlines.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"\\n Hello\\tworld\\t\\n\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello\\tworld\"</span>, s.trim());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_start\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#1982\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.trim_start\" class=\"fn\">trim_start</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with leading whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>, which includes newlines.</p>\n<h5 id=\"text-directionality\"><a class=\"doc-anchor\" href=\"#text-directionality\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. <code>start</code> in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"\\n Hello\\tworld\\t\\n\"</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello\\tworld\\t\\n\"</span>, s.trim_start());</code></pre></div>\n<p>Directionality:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"  English  \"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'E'</span>) == s.trim_start().chars().next());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"  עברית  \"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'ע'</span>) == s.trim_start().chars().next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_end\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2021\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.trim_end\" class=\"fn\">trim_end</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with trailing whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>, which includes newlines.</p>\n<h5 id=\"text-directionality-1\"><a class=\"doc-anchor\" href=\"#text-directionality-1\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. <code>end</code> in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"\\n Hello\\tworld\\t\\n\"</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\\n Hello\\tworld\"</span>, s.trim_end());</code></pre></div>\n<p>Directionality:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"  English  \"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'h'</span>) == s.trim_end().chars().rev().next());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"  עברית  \"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'ת'</span>) == s.trim_end().chars().rev().next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_left\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2061\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.trim_left\" class=\"fn\">trim_left</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: superseded by <code>trim_start</code></span></div></span></summary><div class=\"docblock\"><p>Returns a string slice with leading whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>.</p>\n<h5 id=\"text-directionality-2\"><a class=\"doc-anchor\" href=\"#text-directionality-2\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. ‘Left’ in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are ‘right to left’ rather than ‘left to right’, this will be\nthe <em>right</em> side, not the left.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\" Hello\\tworld\\t\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello\\tworld\\t\"</span>, s.trim_left());</code></pre></div>\n<p>Directionality:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"  English\"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'E'</span>) == s.trim_left().chars().next());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"  עברית\"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'ע'</span>) == s.trim_left().chars().next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_right\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2101\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.trim_right\" class=\"fn\">trim_right</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: superseded by <code>trim_end</code></span></div></span></summary><div class=\"docblock\"><p>Returns a string slice with trailing whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>.</p>\n<h5 id=\"text-directionality-3\"><a class=\"doc-anchor\" href=\"#text-directionality-3\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. ‘Right’ in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are ‘right to left’ rather than ‘left to right’, this will be\nthe <em>left</em> side, not the right.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\" Hello\\tworld\\t\"</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\" Hello\\tworld\"</span>, s.trim_right());</code></pre></div>\n<p>Directionality:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">\"English  \"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'h'</span>) == s.trim_right().chars().rev().next());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">\"עברית  \"</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'ת'</span>) == s.trim_right().chars().rev().next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2134-2136\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.trim_matches\" class=\"fn\">trim_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type core::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.DoubleEndedSearcher.html\" title=\"trait core::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a function\nor closure that determines if a character matches.</p>\n<h5 id=\"examples-47\"><a class=\"doc-anchor\" href=\"#examples-47\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"11foo1bar11\"</span>.trim_matches(<span class=\"string\">'1'</span>), <span class=\"string\">\"foo1bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"123foo1bar123\"</span>.trim_matches(char::is_numeric), <span class=\"string\">\"foo1bar\"</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"12foo1bar12\"</span>.trim_matches(x), <span class=\"string\">\"foo1bar\"</span>);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"1foo1barXX\"</span>.trim_matches(|c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>), <span class=\"string\">\"foo1bar\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_start_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2181\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.trim_start_matches\" class=\"fn\">trim_start_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"text-directionality-4\"><a class=\"doc-anchor\" href=\"#text-directionality-4\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. <code>start</code> in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.</p>\n<h5 id=\"examples-48\"><a class=\"doc-anchor\" href=\"#examples-48\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"11foo1bar11\"</span>.trim_start_matches(<span class=\"string\">'1'</span>), <span class=\"string\">\"foo1bar11\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"123foo1bar123\"</span>.trim_start_matches(char::is_numeric), <span class=\"string\">\"foo1bar123\"</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"12foo1bar12\"</span>.trim_start_matches(x), <span class=\"string\">\"foo1bar12\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strip_prefix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2214\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.strip_prefix\" class=\"fn\">strip_prefix</a>&lt;'a, P&gt;(&amp;'a self, prefix: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with the prefix removed.</p>\n<p>If the string starts with the pattern <code>prefix</code>, returns the substring after the prefix,\nwrapped in <code>Some</code>. Unlike <code>trim_start_matches</code>, this method removes the prefix exactly once.</p>\n<p>If the string does not start with <code>prefix</code>, returns <code>None</code>.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-49\"><a class=\"doc-anchor\" href=\"#examples-49\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo:bar\"</span>.strip_prefix(<span class=\"string\">\"foo:\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"bar\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo:bar\"</span>.strip_prefix(<span class=\"string\">\"bar\"</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foofoo\"</span>.strip_prefix(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strip_suffix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2241-2244\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.strip_suffix\" class=\"fn\">strip_suffix</a>&lt;'a, P&gt;(&amp;'a self, suffix: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type core::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.ReverseSearcher.html\" title=\"trait core::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with the suffix removed.</p>\n<p>If the string ends with the pattern <code>suffix</code>, returns the substring before the suffix,\nwrapped in <code>Some</code>.  Unlike <code>trim_end_matches</code>, this method removes the suffix exactly once.</p>\n<p>If the string does not end with <code>suffix</code>, returns <code>None</code>.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-50\"><a class=\"doc-anchor\" href=\"#examples-50\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"bar:foo\"</span>.strip_suffix(<span class=\"string\">\":foo\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"bar\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"bar:foo\"</span>.strip_suffix(<span class=\"string\">\"bar\"</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foofoo\"</span>.strip_suffix(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_end_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2285-2287\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.trim_end_matches\" class=\"fn\">trim_end_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type core::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.ReverseSearcher.html\" title=\"trait core::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"text-directionality-5\"><a class=\"doc-anchor\" href=\"#text-directionality-5\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. <code>end</code> in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.</p>\n<h5 id=\"examples-51\"><a class=\"doc-anchor\" href=\"#examples-51\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"11foo1bar11\"</span>.trim_end_matches(<span class=\"string\">'1'</span>), <span class=\"string\">\"11foo1bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"123foo1bar123\"</span>.trim_end_matches(char::is_numeric), <span class=\"string\">\"123foo1bar\"</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"12foo1bar12\"</span>.trim_end_matches(x), <span class=\"string\">\"12foo1bar\"</span>);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"1fooX\"</span>.trim_end_matches(|c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>), <span class=\"string\">\"1foo\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_left_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2329\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.trim_left_matches\" class=\"fn\">trim_left_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: superseded by <code>trim_start_matches</code></span></div></span></summary><div class=\"docblock\"><p>Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"text-directionality-6\"><a class=\"doc-anchor\" href=\"#text-directionality-6\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. ‘Left’ in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are ‘right to left’ rather than ‘left to right’, this will be\nthe <em>right</em> side, not the left.</p>\n<h5 id=\"examples-52\"><a class=\"doc-anchor\" href=\"#examples-52\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"11foo1bar11\"</span>.trim_left_matches(<span class=\"string\">'1'</span>), <span class=\"string\">\"foo1bar11\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"123foo1bar123\"</span>.trim_left_matches(char::is_numeric), <span class=\"string\">\"foo1bar123\"</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"12foo1bar12\"</span>.trim_left_matches(x), <span class=\"string\">\"foo1bar12\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_right_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2372-2374\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.trim_right_matches\" class=\"fn\">trim_right_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type core::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.ReverseSearcher.html\" title=\"trait core::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: superseded by <code>trim_end_matches</code></span></div></span></summary><div class=\"docblock\"><p>Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.</p>\n<p>The <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/index.html\" title=\"mod core::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"text-directionality-7\"><a class=\"doc-anchor\" href=\"#text-directionality-7\">§</a>Text directionality</h5>\n<p>A string is a sequence of bytes. ‘Right’ in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are ‘right to left’ rather than ‘left to right’, this will be\nthe <em>left</em> side, not the right.</p>\n<h5 id=\"examples-53\"><a class=\"doc-anchor\" href=\"#examples-53\">§</a>Examples</h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"11foo1bar11\"</span>.trim_right_matches(<span class=\"string\">'1'</span>), <span class=\"string\">\"11foo1bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"123foo1bar123\"</span>.trim_right_matches(char::is_numeric), <span class=\"string\">\"123foo1bar\"</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"12foo1bar12\"</span>.trim_right_matches(x), <span class=\"string\">\"12foo1bar\"</span>);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"1fooX\"</span>.trim_right_matches(|c| c == <span class=\"string\">'1' </span>|| c == <span class=\"string\">'X'</span>), <span class=\"string\">\"1foo\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2424\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.parse\" class=\"fn\">parse</a>&lt;F&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;F, &lt;F as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::traits::FromStr::Err\">Err</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>,</div></h4></section></summary><div class=\"docblock\"><p>Parses this string slice into another type.</p>\n<p>Because <code>parse</code> is so general, it can cause problems with type\ninference. As such, <code>parse</code> is one of the few times you’ll see\nthe syntax affectionately known as the ‘turbofish’: <code>::&lt;&gt;</code>. This\nhelps the inference algorithm understand specifically which type\nyou’re trying to parse into.</p>\n<p><code>parse</code> can parse into any type that implements the <a href=\"https://doc.rust-lang.org/1.80.1/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\"><code>FromStr</code></a> trait.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Will return <a href=\"https://doc.rust-lang.org/1.80.1/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"associated type core::str::traits::FromStr::Err\"><code>Err</code></a> if it’s not possible to parse this string slice into\nthe desired type.</p>\n<h5 id=\"examples-54\"><a class=\"doc-anchor\" href=\"#examples-54\">§</a>Examples</h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>four: u32 = <span class=\"string\">\"4\"</span>.parse().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">4</span>, four);</code></pre></div>\n<p>Using the ‘turbofish’ instead of annotating <code>four</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>four = <span class=\"string\">\"4\"</span>.parse::&lt;u32&gt;();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">4</span>), four);</code></pre></div>\n<p>Failing to parse:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nope = <span class=\"string\">\"j\"</span>.parse::&lt;u32&gt;();\n\n<span class=\"macro\">assert!</span>(nope.is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0, const since 1.74.0\">1.23.0 (const: 1.74.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2443\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.is_ascii\" class=\"fn\">is_ascii</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if all characters in this string are within the ASCII range.</p>\n<h5 id=\"examples-55\"><a class=\"doc-anchor\" href=\"#examples-55\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ascii = <span class=\"string\">\"hello!\\n\"</span>;\n<span class=\"kw\">let </span>non_ascii = <span class=\"string\">\"Grüße, Jürgen ❤\"</span>;\n\n<span class=\"macro\">assert!</span>(ascii.is_ascii());\n<span class=\"macro\">assert!</span>(!non_ascii.is_ascii());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ascii\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2455\">source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.as_ascii\" class=\"fn\">as_ascii</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;[<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/ascii/ascii_char/enum.AsciiChar.html\" title=\"enum core::ascii::ascii_char::AsciiChar\">AsciiChar</a>]&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>)</span></div></span></summary><div class=\"docblock\"><p>If this string slice <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#method.is_ascii\" title=\"method str::is_ascii\"><code>is_ascii</code></a>, returns it as a slice\nof <a href=\"https://doc.rust-lang.org/1.80.1/core/ascii/ascii_char/enum.AsciiChar.html\" title=\"enum core::ascii::ascii_char::AsciiChar\">ASCII characters</a>, otherwise returns <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq_ignore_ascii_case\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2475\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.eq_ignore_ascii_case\" class=\"fn\">eq_ignore_ascii_case</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks that two strings are an ASCII case-insensitive match.</p>\n<p>Same as <code>to_ascii_lowercase(a) == to_ascii_lowercase(b)</code>,\nbut without allocating and copying temporaries.</p>\n<h5 id=\"examples-56\"><a class=\"doc-anchor\" href=\"#examples-56\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"string\">\"Ferris\"</span>.eq_ignore_ascii_case(<span class=\"string\">\"FERRIS\"</span>));\n<span class=\"macro\">assert!</span>(<span class=\"string\">\"Ferrös\"</span>.eq_ignore_ascii_case(<span class=\"string\">\"FERRöS\"</span>));\n<span class=\"macro\">assert!</span>(!<span class=\"string\">\"Ferrös\"</span>.eq_ignore_ascii_case(<span class=\"string\">\"FERRÖS\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2500\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.make_ascii_uppercase\" class=\"fn\">make_ascii_uppercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Converts this string to its ASCII upper case equivalent in-place.</p>\n<p>ASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new uppercased value without modifying the existing one, use\n<a href=\"#method.to_ascii_uppercase\"><code>to_ascii_uppercase()</code></a>.</p>\n<h5 id=\"examples-57\"><a class=\"doc-anchor\" href=\"#examples-57\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"Grüße, Jürgen ❤\"</span>);\n\ns.make_ascii_uppercase();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"GRüßE, JüRGEN ❤\"</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2527\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.make_ascii_lowercase\" class=\"fn\">make_ascii_lowercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Converts this string to its ASCII lower case equivalent in-place.</p>\n<p>ASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new lowercased value without modifying the existing one, use\n<a href=\"#method.to_ascii_lowercase\"><code>to_ascii_lowercase()</code></a>.</p>\n<h5 id=\"examples-58\"><a class=\"doc-anchor\" href=\"#examples-58\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"GRÜßE, JÜRGEN ❤\"</span>);\n\ns.make_ascii_lowercase();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"grÜße, jÜrgen ❤\"</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_ascii_start\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2552\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.trim_ascii_start\" class=\"fn\">trim_ascii_start</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with leading ASCII whitespace removed.</p>\n<p>‘Whitespace’ refers to the definition used by\n<a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html#method.is_ascii_whitespace\" title=\"method u8::is_ascii_whitespace\"><code>u8::is_ascii_whitespace</code></a>.</p>\n<h5 id=\"examples-59\"><a class=\"doc-anchor\" href=\"#examples-59\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\" \\t \\u{3000}hello world\\n\"</span>.trim_ascii_start(), <span class=\"string\">\"\\u{3000}hello world\\n\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"  \"</span>.trim_ascii_start(), <span class=\"string\">\"\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\"</span>.trim_ascii_start(), <span class=\"string\">\"\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_ascii_end\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2577\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.trim_ascii_end\" class=\"fn\">trim_ascii_end</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with trailing ASCII whitespace removed.</p>\n<p>‘Whitespace’ refers to the definition used by\n<a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html#method.is_ascii_whitespace\" title=\"method u8::is_ascii_whitespace\"><code>u8::is_ascii_whitespace</code></a>.</p>\n<h5 id=\"examples-60\"><a class=\"doc-anchor\" href=\"#examples-60\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\\r hello world\\u{3000}\\n \"</span>.trim_ascii_end(), <span class=\"string\">\"\\r hello world\\u{3000}\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"  \"</span>.trim_ascii_end(), <span class=\"string\">\"\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\"</span>.trim_ascii_end(), <span class=\"string\">\"\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_ascii\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2603\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.trim_ascii\" class=\"fn\">trim_ascii</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with leading and trailing ASCII whitespace\nremoved.</p>\n<p>‘Whitespace’ refers to the definition used by\n<a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html#method.is_ascii_whitespace\" title=\"method u8::is_ascii_whitespace\"><code>u8::is_ascii_whitespace</code></a>.</p>\n<h5 id=\"examples-61\"><a class=\"doc-anchor\" href=\"#examples-61\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\\r hello world\\n \"</span>.trim_ascii(), <span class=\"string\">\"hello world\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"  \"</span>.trim_ascii(), <span class=\"string\">\"\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"\"</span>.trim_ascii(), <span class=\"string\">\"\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.escape_debug\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2646\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.escape_debug\" class=\"fn\">escape_debug</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.EscapeDebug.html\" title=\"struct core::str::iter::EscapeDebug\">EscapeDebug</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator that escapes each char in <code>self</code> with <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html#method.escape_debug\" title=\"method char::escape_debug\"><code>char::escape_debug</code></a>.</p>\n<p>Note: only extended grapheme codepoints that begin the string will be\nescaped.</p>\n<h5 id=\"examples-62\"><a class=\"doc-anchor\" href=\"#examples-62\">§</a>Examples</h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">\"❤\\n!\"</span>.escape_debug() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"{c}\"</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"string\">\"❤\\n!\"</span>.escape_debug());</code></pre></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"❤\\\\n!\"</span>);</code></pre></div>\n<p>Using <code>to_string</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"❤\\n!\"</span>.escape_debug().to_string(), <span class=\"string\">\"❤\\\\n!\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.escape_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2697\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.escape_default\" class=\"fn\">escape_default</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.EscapeDefault.html\" title=\"struct core::str::iter::EscapeDefault\">EscapeDefault</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator that escapes each char in <code>self</code> with <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html#method.escape_default\" title=\"method char::escape_default\"><code>char::escape_default</code></a>.</p>\n<h5 id=\"examples-63\"><a class=\"doc-anchor\" href=\"#examples-63\">§</a>Examples</h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">\"❤\\n!\"</span>.escape_default() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"{c}\"</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"string\">\"❤\\n!\"</span>.escape_default());</code></pre></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"\\\\u{{2764}}\\\\n!\"</span>);</code></pre></div>\n<p>Using <code>to_string</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"❤\\n!\"</span>.escape_default().to_string(), <span class=\"string\">\"\\\\u{2764}\\\\n!\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.escape_unicode\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2735\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html#tymethod.escape_unicode\" class=\"fn\">escape_unicode</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.EscapeUnicode.html\" title=\"struct core::str::iter::EscapeUnicode\">EscapeUnicode</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator that escapes each char in <code>self</code> with <a href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html#method.escape_unicode\" title=\"method char::escape_unicode\"><code>char::escape_unicode</code></a>.</p>\n<h5 id=\"examples-64\"><a class=\"doc-anchor\" href=\"#examples-64\">§</a>Examples</h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">\"❤\\n!\"</span>.escape_unicode() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"{c}\"</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"string\">\"❤\\n!\"</span>.escape_unicode());</code></pre></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\"</span>);</code></pre></div>\n<p>Using <code>to_string</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"❤\\n!\"</span>.escape_unicode().to_string(), <span class=\"string\">\"\\\\u{2764}\\\\u{a}\\\\u{21}\"</span>);</code></pre></div>\n</div></details></div></details>",0,"icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<section id=\"impl-ConstParamTy-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/marker.rs.html#992-1003\">source</a><a href=\"#impl-ConstParamTy-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.ConstParamTy.html\" title=\"trait core::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section>","ConstParamTy","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<section id=\"impl-Eq-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/traits.rs.html#36\">source</a></span><a href=\"#impl-Eq-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section>","Eq","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"],["<section id=\"impl-StructuralPartialEq-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/marker.rs.html#214-226\">source</a><a href=\"#impl-StructuralPartialEq-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section>","StructuralPartialEq","icu_locid_transform::provider::UnvalidatedLanguageIdentifier"]],
"winnow":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBStr-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2005-2010\">source</a><a href=\"#impl-AsBStr-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"winnow/stream/trait.AsBStr.html\" title=\"trait winnow::stream::AsBStr\">AsBStr</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bstr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2007-2009\">source</a><a href=\"#method.as_bstr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.AsBStr.html#tymethod.as_bstr\" class=\"fn\">as_bstr</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Casts the input type to a byte slice</div></details></div></details>","AsBStr","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Compare%3C%26%5Bu8%5D%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2332-2342\">source</a><a href=\"#impl-Compare%3C%26%5Bu8%5D%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"winnow/stream/trait.Compare.html\" title=\"trait winnow::stream::Compare\">Compare</a>&lt;&amp;'b [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2334-2336\">source</a><a href=\"#method.compare\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare\" class=\"fn\">compare</a>(&amp;self, t: &amp;'b [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><div class='docblock'>Compares self to another value for equality</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_no_case\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2339-2341\">source</a><a href=\"#method.compare_no_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\" class=\"fn\">compare_no_case</a>(&amp;self, t: &amp;'b [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.5.20: Replaced with <code>compare(ascii::Caseless(_))</code></span></div></span><div class='docblock'>Compares self to another value for equality\nindependently of the case. <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\">Read more</a></div></details></div></details>","Compare<&'b [u8]>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Compare%3C%26str%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2256-2267\">source</a><a href=\"#impl-Compare%3C%26str%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"winnow/stream/trait.Compare.html\" title=\"trait winnow::stream::Compare\">Compare</a>&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2258-2260\">source</a><a href=\"#method.compare\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare\" class=\"fn\">compare</a>(&amp;self, t: &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><div class='docblock'>Compares self to another value for equality</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_no_case\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2264-2266\">source</a><a href=\"#method.compare_no_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\" class=\"fn\">compare_no_case</a>(&amp;self, t: &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.5.20: Replaced with <code>compare(ascii::Caseless(_))</code></span></div></span><div class='docblock'>Compares self to another value for equality\nindependently of the case. <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\">Read more</a></div></details></div></details>","Compare<&'b str>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Compare%3CCaseless%3C%26%5Bu8%5D%3E%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2344-2354\">source</a><a href=\"#impl-Compare%3CCaseless%3C%26%5Bu8%5D%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"winnow/stream/trait.Compare.html\" title=\"trait winnow::stream::Compare\">Compare</a>&lt;<a class=\"struct\" href=\"winnow/ascii/struct.Caseless.html\" title=\"struct winnow::ascii::Caseless\">Caseless</a>&lt;&amp;'b [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2346-2348\">source</a><a href=\"#method.compare\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare\" class=\"fn\">compare</a>(&amp;self, t: <a class=\"struct\" href=\"winnow/ascii/struct.Caseless.html\" title=\"struct winnow::ascii::Caseless\">AsciiCaseless</a>&lt;&amp;'b [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]&gt;) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><div class='docblock'>Compares self to another value for equality</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_no_case\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2351-2353\">source</a><a href=\"#method.compare_no_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\" class=\"fn\">compare_no_case</a>(&amp;self, t: <a class=\"struct\" href=\"winnow/ascii/struct.Caseless.html\" title=\"struct winnow::ascii::Caseless\">AsciiCaseless</a>&lt;&amp;'b [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>]&gt;) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.5.20: Replaced with <code>compare(ascii::Caseless(_))</code></span></div></span><div class='docblock'>Compares self to another value for equality\nindependently of the case. <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\">Read more</a></div></details></div></details>","Compare<Caseless<&'b [u8]>>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Compare%3CCaseless%3C%26str%3E%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2269-2280\">source</a><a href=\"#impl-Compare%3CCaseless%3C%26str%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"winnow/stream/trait.Compare.html\" title=\"trait winnow::stream::Compare\">Compare</a>&lt;<a class=\"struct\" href=\"winnow/ascii/struct.Caseless.html\" title=\"struct winnow::ascii::Caseless\">Caseless</a>&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2271-2273\">source</a><a href=\"#method.compare\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare\" class=\"fn\">compare</a>(&amp;self, t: <a class=\"struct\" href=\"winnow/ascii/struct.Caseless.html\" title=\"struct winnow::ascii::Caseless\">AsciiCaseless</a>&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><div class='docblock'>Compares self to another value for equality</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_no_case\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2277-2279\">source</a><a href=\"#method.compare_no_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\" class=\"fn\">compare_no_case</a>(&amp;self, t: <a class=\"struct\" href=\"winnow/ascii/struct.Caseless.html\" title=\"struct winnow::ascii::Caseless\">AsciiCaseless</a>&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.5.20: Replaced with <code>compare(ascii::Caseless(_))</code></span></div></span><div class='docblock'>Compares self to another value for equality\nindependently of the case. <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\">Read more</a></div></details></div></details>","Compare<Caseless<&'b str>>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Compare%3CCaseless%3Cchar%3E%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2319-2330\">source</a><a href=\"#impl-Compare%3CCaseless%3Cchar%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"winnow/stream/trait.Compare.html\" title=\"trait winnow::stream::Compare\">Compare</a>&lt;<a class=\"struct\" href=\"winnow/ascii/struct.Caseless.html\" title=\"struct winnow::ascii::Caseless\">Caseless</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2321-2323\">source</a><a href=\"#method.compare\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare\" class=\"fn\">compare</a>(&amp;self, t: <a class=\"struct\" href=\"winnow/ascii/struct.Caseless.html\" title=\"struct winnow::ascii::Caseless\">AsciiCaseless</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>&gt;) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><div class='docblock'>Compares self to another value for equality</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_no_case\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2327-2329\">source</a><a href=\"#method.compare_no_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\" class=\"fn\">compare_no_case</a>(&amp;self, t: <a class=\"struct\" href=\"winnow/ascii/struct.Caseless.html\" title=\"struct winnow::ascii::Caseless\">AsciiCaseless</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>&gt;) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.5.20: Replaced with <code>compare(ascii::Caseless(_))</code></span></div></span><div class='docblock'>Compares self to another value for equality\nindependently of the case. <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\">Read more</a></div></details></div></details>","Compare<Caseless<char>>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Compare%3CCaseless%3Cu8%3E%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2294-2304\">source</a><a href=\"#impl-Compare%3CCaseless%3Cu8%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"winnow/stream/trait.Compare.html\" title=\"trait winnow::stream::Compare\">Compare</a>&lt;<a class=\"struct\" href=\"winnow/ascii/struct.Caseless.html\" title=\"struct winnow::ascii::Caseless\">Caseless</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2296-2298\">source</a><a href=\"#method.compare\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare\" class=\"fn\">compare</a>(&amp;self, t: <a class=\"struct\" href=\"winnow/ascii/struct.Caseless.html\" title=\"struct winnow::ascii::Caseless\">AsciiCaseless</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><div class='docblock'>Compares self to another value for equality</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_no_case\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2301-2303\">source</a><a href=\"#method.compare_no_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\" class=\"fn\">compare_no_case</a>(&amp;self, t: <a class=\"struct\" href=\"winnow/ascii/struct.Caseless.html\" title=\"struct winnow::ascii::Caseless\">AsciiCaseless</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.5.20: Replaced with <code>compare(ascii::Caseless(_))</code></span></div></span><div class='docblock'>Compares self to another value for equality\nindependently of the case. <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\">Read more</a></div></details></div></details>","Compare<Caseless<u8>>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Compare%3Cchar%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2306-2317\">source</a><a href=\"#impl-Compare%3Cchar%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"winnow/stream/trait.Compare.html\" title=\"trait winnow::stream::Compare\">Compare</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2308-2310\">source</a><a href=\"#method.compare\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare\" class=\"fn\">compare</a>(&amp;self, t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><div class='docblock'>Compares self to another value for equality</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_no_case\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2314-2316\">source</a><a href=\"#method.compare_no_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\" class=\"fn\">compare_no_case</a>(&amp;self, t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.5.20: Replaced with <code>compare(ascii::Caseless(_))</code></span></div></span><div class='docblock'>Compares self to another value for equality\nindependently of the case. <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\">Read more</a></div></details></div></details>","Compare<char>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Compare%3Cu8%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2282-2292\">source</a><a href=\"#impl-Compare%3Cu8%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"winnow/stream/trait.Compare.html\" title=\"trait winnow::stream::Compare\">Compare</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2284-2286\">source</a><a href=\"#method.compare\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare\" class=\"fn\">compare</a>(&amp;self, t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><div class='docblock'>Compares self to another value for equality</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_no_case\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2289-2291\">source</a><a href=\"#method.compare_no_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\" class=\"fn\">compare_no_case</a>(&amp;self, t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"winnow/stream/enum.CompareResult.html\" title=\"enum winnow::stream::CompareResult\">CompareResult</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.5.20: Replaced with <code>compare(ascii::Caseless(_))</code></span></div></span><div class='docblock'>Compares self to another value for equality\nindependently of the case. <a href=\"winnow/stream/trait.Compare.html#tymethod.compare_no_case\">Read more</a></div></details></div></details>","Compare<u8>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2749\">source</a></span><a href=\"#impl-Default-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2752\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty str</p>\n</div></details></div></details>","Default","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/mod.rs.html#2779\">source</a></span><a href=\"#impl-Error-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl !<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.source\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/error.rs.html#84\">source</a></span><a href=\"#method.source\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/error/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + 'static)&gt;</h4></section></summary><div class='docblock'>The lower-level source of this error, if any. <a href=\"https://doc.rust-lang.org/1.80.1/core/error/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.description\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/error.rs.html#110\">source</a></span><a href=\"#method.description\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/error/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class='docblock'> <a href=\"https://doc.rust-lang.org/1.80.1/core/error/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cause\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/error.rs.html#120\">source</a></span><a href=\"#method.cause\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/error/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/error.rs.html#184\">source</a><a href=\"#method.provide\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/error/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'a&gt;(&amp;'a self, request: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/error/struct.Request.html\" title=\"struct core::error::Request\">Request</a>&lt;'a&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>)</span></div></span><div class='docblock'>Provides type based access to context intended for error reports. <a href=\"https://doc.rust-lang.org/1.80.1/core/error/trait.Error.html#method.provide\">Read more</a></div></details></div></details>","Error","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSlice%3C%26str%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2597-2602\">source</a><a href=\"#impl-FindSlice%3C%26str%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i, 's&gt; <a class=\"trait\" href=\"winnow/stream/trait.FindSlice.html\" title=\"trait winnow::stream::FindSlice\">FindSlice</a>&lt;&amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt; for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2599-2601\">source</a><a href=\"#method.find_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.FindSlice.html#tymethod.find_slice\" class=\"fn\">find_slice</a>(&amp;self, substr: &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the offset of the slice if it is found</div></details></div></details>","FindSlice<&'s str>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSlice%3C(%26str,)%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2604-2609\">source</a><a href=\"#impl-FindSlice%3C(%26str,)%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i, 's&gt; <a class=\"trait\" href=\"winnow/stream/trait.FindSlice.html\" title=\"trait winnow::stream::FindSlice\">FindSlice</a>&lt;(&amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>,)&gt; for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2606-2608\">source</a><a href=\"#method.find_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.FindSlice.html#tymethod.find_slice\" class=\"fn\">find_slice</a>(&amp;self, substr: (&amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>,)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the offset of the slice if it is found</div></details></div></details>","FindSlice<(&'s str,)>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSlice%3C(%26str,+%26str)%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2611-2616\">source</a><a href=\"#impl-FindSlice%3C(%26str,+%26str)%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i, 's&gt; <a class=\"trait\" href=\"winnow/stream/trait.FindSlice.html\" title=\"trait winnow::stream::FindSlice\">FindSlice</a>&lt;(&amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>)&gt; for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2613-2615\">source</a><a href=\"#method.find_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.FindSlice.html#tymethod.find_slice\" class=\"fn\">find_slice</a>(&amp;self, substr: (&amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the offset of the slice if it is found</div></details></div></details>","FindSlice<(&'s str, &'s str)>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSlice%3C(%26str,+%26str,+%26str)%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2618-2623\">source</a><a href=\"#impl-FindSlice%3C(%26str,+%26str,+%26str)%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i, 's&gt; <a class=\"trait\" href=\"winnow/stream/trait.FindSlice.html\" title=\"trait winnow::stream::FindSlice\">FindSlice</a>&lt;(&amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>)&gt; for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2620-2622\">source</a><a href=\"#method.find_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.FindSlice.html#tymethod.find_slice\" class=\"fn\">find_slice</a>(&amp;self, substr: (&amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the offset of the slice if it is found</div></details></div></details>","FindSlice<(&'s str, &'s str, &'s str)>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSlice%3C(char,)%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2632-2637\">source</a><a href=\"#impl-FindSlice%3C(char,)%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i&gt; <a class=\"trait\" href=\"winnow/stream/trait.FindSlice.html\" title=\"trait winnow::stream::FindSlice\">FindSlice</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>,)&gt; for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2634-2636\">source</a><a href=\"#method.find_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.FindSlice.html#tymethod.find_slice\" class=\"fn\">find_slice</a>(&amp;self, substr: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>,)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the offset of the slice if it is found</div></details></div></details>","FindSlice<(char,)>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSlice%3C(char,+char)%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2639-2644\">source</a><a href=\"#impl-FindSlice%3C(char,+char)%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i&gt; <a class=\"trait\" href=\"winnow/stream/trait.FindSlice.html\" title=\"trait winnow::stream::FindSlice\">FindSlice</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>)&gt; for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2641-2643\">source</a><a href=\"#method.find_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.FindSlice.html#tymethod.find_slice\" class=\"fn\">find_slice</a>(&amp;self, substr: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the offset of the slice if it is found</div></details></div></details>","FindSlice<(char, char)>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSlice%3C(char,+char,+char)%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2646-2651\">source</a><a href=\"#impl-FindSlice%3C(char,+char,+char)%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i&gt; <a class=\"trait\" href=\"winnow/stream/trait.FindSlice.html\" title=\"trait winnow::stream::FindSlice\">FindSlice</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>)&gt; for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2648-2650\">source</a><a href=\"#method.find_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.FindSlice.html#tymethod.find_slice\" class=\"fn\">find_slice</a>(&amp;self, substr: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the offset of the slice if it is found</div></details></div></details>","FindSlice<(char, char, char)>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSlice%3C(u8,)%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2660-2665\">source</a><a href=\"#impl-FindSlice%3C(u8,)%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i&gt; <a class=\"trait\" href=\"winnow/stream/trait.FindSlice.html\" title=\"trait winnow::stream::FindSlice\">FindSlice</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>,)&gt; for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2662-2664\">source</a><a href=\"#method.find_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.FindSlice.html#tymethod.find_slice\" class=\"fn\">find_slice</a>(&amp;self, substr: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>,)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the offset of the slice if it is found</div></details></div></details>","FindSlice<(u8,)>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSlice%3C(u8,+u8)%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2667-2672\">source</a><a href=\"#impl-FindSlice%3C(u8,+u8)%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i&gt; <a class=\"trait\" href=\"winnow/stream/trait.FindSlice.html\" title=\"trait winnow::stream::FindSlice\">FindSlice</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>)&gt; for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2669-2671\">source</a><a href=\"#method.find_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.FindSlice.html#tymethod.find_slice\" class=\"fn\">find_slice</a>(&amp;self, substr: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the offset of the slice if it is found</div></details></div></details>","FindSlice<(u8, u8)>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSlice%3C(u8,+u8,+u8)%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2674-2679\">source</a><a href=\"#impl-FindSlice%3C(u8,+u8,+u8)%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i&gt; <a class=\"trait\" href=\"winnow/stream/trait.FindSlice.html\" title=\"trait winnow::stream::FindSlice\">FindSlice</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>)&gt; for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2676-2678\">source</a><a href=\"#method.find_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.FindSlice.html#tymethod.find_slice\" class=\"fn\">find_slice</a>(&amp;self, substr: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the offset of the slice if it is found</div></details></div></details>","FindSlice<(u8, u8, u8)>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSlice%3Cchar%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2625-2630\">source</a><a href=\"#impl-FindSlice%3Cchar%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i&gt; <a class=\"trait\" href=\"winnow/stream/trait.FindSlice.html\" title=\"trait winnow::stream::FindSlice\">FindSlice</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>&gt; for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2627-2629\">source</a><a href=\"#method.find_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.FindSlice.html#tymethod.find_slice\" class=\"fn\">find_slice</a>(&amp;self, substr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the offset of the slice if it is found</div></details></div></details>","FindSlice<char>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSlice%3Cu8%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2653-2658\">source</a><a href=\"#impl-FindSlice%3Cu8%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i&gt; <a class=\"trait\" href=\"winnow/stream/trait.FindSlice.html\" title=\"trait winnow::stream::FindSlice\">FindSlice</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>&gt; for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2655-2657\">source</a><a href=\"#method.find_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.FindSlice.html#tymethod.find_slice\" class=\"fn\">find_slice</a>(&amp;self, substr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the offset of the slice if it is found</div></details></div></details>","FindSlice<u8>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Offset%3C%3C%26str+as+Stream%3E::Checkpoint%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1772-1777\">source</a><a href=\"#impl-Offset%3C%3C%26str+as+Stream%3E::Checkpoint%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"winnow/stream/trait.Offset.html\" title=\"trait winnow::stream::Offset\">Offset</a>&lt;&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a> as <a class=\"trait\" href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\">Stream</a>&gt;::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Checkpoint\" title=\"type winnow::stream::Stream::Checkpoint\">Checkpoint</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1774-1776\">source</a><a href=\"#method.offset_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Offset.html#tymethod.offset_from\" class=\"fn\">offset_from</a>(&amp;self, other: &amp;&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a> as <a class=\"trait\" href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\">Stream</a>&gt;::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Checkpoint\" title=\"type winnow::stream::Stream::Checkpoint\">Checkpoint</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Offset between the first byte of <code>start</code> and the first byte of <code>self</code>a <a href=\"winnow/stream/trait.Offset.html#tymethod.offset_from\">Read more</a></div></details></div></details>","Offset<<&'a str as Stream>::Checkpoint>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Offset-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1765-1770\">source</a><a href=\"#impl-Offset-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"winnow/stream/trait.Offset.html\" title=\"trait winnow::stream::Offset\">Offset</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1767-1769\">source</a><a href=\"#method.offset_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Offset.html#tymethod.offset_from\" class=\"fn\">offset_from</a>(&amp;self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Offset between the first byte of <code>start</code> and the first byte of <code>self</code>a <a href=\"winnow/stream/trait.Offset.html#tymethod.offset_from\">Read more</a></div></details></div></details>","Offset","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParseSlice%3CR%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2763-2768\">source</a><a href=\"#impl-ParseSlice%3CR%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>&gt; <a class=\"trait\" href=\"winnow/stream/trait.ParseSlice.html\" title=\"trait winnow::stream::ParseSlice\">ParseSlice</a>&lt;R&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2765-2767\">source</a><a href=\"#method.parse_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.ParseSlice.html#tymethod.parse_slice\" class=\"fn\">parse_slice</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;</h4></section></summary><div class='docblock'>Succeeds if <code>parse()</code> succeededThe <a href=\"winnow/stream/trait.ParseSlice.html#tymethod.parse_slice\">Read more</a></div></details></div></details>","ParseSlice<R>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Parser%3CI,+%3CI+as+Stream%3E::Slice,+E%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#915-924\">source</a><a href=\"#impl-Parser%3CI,+%3CI+as+Stream%3E::Slice,+E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'s, I, E: <a class=\"trait\" href=\"winnow/error/trait.ParserError.html\" title=\"trait winnow::error::ParserError\">ParserError</a>&lt;I&gt;&gt; <a class=\"trait\" href=\"winnow/parser/trait.Parser.html\" title=\"trait winnow::parser::Parser\">Parser</a>&lt;I, &lt;I as <a class=\"trait\" href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\">Stream</a>&gt;::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Slice\" title=\"type winnow::stream::Stream::Slice\">Slice</a>, E&gt; for &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"winnow/stream/trait.Compare.html\" title=\"trait winnow::stream::Compare\">Compare</a>&lt;&amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt; + <a class=\"trait\" href=\"winnow/stream/trait.StreamIsPartial.html\" title=\"trait winnow::stream::StreamIsPartial\">StreamIsPartial</a> + <a class=\"trait\" href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\">Stream</a>,</div></h3></section></summary><div class=\"docblock\"><p>This is a shortcut for <a href=\"winnow/token/fn.tag.html\" title=\"fn winnow::token::tag\"><code>tag</code></a>.</p>\n<h4 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">fn </span>parser&lt;<span class=\"lifetime\">'s</span>&gt;(s: <span class=\"kw-2\">&amp;mut &amp;</span><span class=\"lifetime\">'s </span>str) -&gt; PResult&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'s </span>str, InputError&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'s </span>str&gt;&gt; {\n  alt((<span class=\"string\">\"Hello\"</span>, take(<span class=\"number\">5usize</span>))).parse_next(s)\n}\n\n<span class=\"macro\">assert_eq!</span>(parser.parse_peek(<span class=\"string\">\"Hello, World!\"</span>), <span class=\"prelude-val\">Ok</span>((<span class=\"string\">\", World!\"</span>, <span class=\"string\">\"Hello\"</span>)));\n<span class=\"macro\">assert_eq!</span>(parser.parse_peek(<span class=\"string\">\"Something\"</span>), <span class=\"prelude-val\">Ok</span>((<span class=\"string\">\"hing\"</span>, <span class=\"string\">\"Somet\"</span>)));\n<span class=\"macro\">assert_eq!</span>(parser.parse_peek(<span class=\"string\">\"Some\"</span>), <span class=\"prelude-val\">Err</span>(ErrMode::Backtrack(InputError::new(<span class=\"string\">\"Some\"</span>, ErrorKind::Slice))));\n<span class=\"macro\">assert_eq!</span>(parser.parse_peek(<span class=\"string\">\"\"</span>), <span class=\"prelude-val\">Err</span>(ErrMode::Backtrack(InputError::new(<span class=\"string\">\"\"</span>, ErrorKind::Slice))));</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_next\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#921-923\">source</a><a href=\"#method.parse_next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#tymethod.parse_next\" class=\"fn\">parse_next</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"type\" href=\"winnow/error/type.PResult.html\" title=\"type winnow::error::PResult\">PResult</a>&lt;&lt;I as <a class=\"trait\" href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\">Stream</a>&gt;::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Slice\" title=\"type winnow::stream::Stream::Slice\">Slice</a>, E&gt;</h4></section></summary><div class='docblock'>Take tokens from the <a href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\"><code>Stream</code></a>, turning it into the output <a href=\"winnow/parser/trait.Parser.html#tymethod.parse_next\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_peek\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#86-91\">source</a><a href=\"#method.parse_peek\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.parse_peek\" class=\"fn\">parse_peek</a>(&amp;mut self, input: I) -&gt; <a class=\"type\" href=\"winnow/error/type.IResult.html\" title=\"type winnow::error::IResult\">IResult</a>&lt;I, O, E&gt;</h4></section></summary><div class='docblock'>Take tokens from the <a href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\"><code>Stream</code></a>, turning it into the output <a href=\"winnow/parser/trait.Parser.html#method.parse_peek\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#137-142\">source</a><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.ByRef.html\" title=\"struct winnow::combinator::parser::ByRef\">ByRef</a>&lt;'_, Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Treat <code>&amp;mut Self</code> as a parser <a href=\"winnow/parser/trait.Parser.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#161-167\">source</a><a href=\"#method.value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.value\" class=\"fn\">value</a>&lt;O2&gt;(self, val: O2) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.Value.html\" title=\"struct winnow::combinator::parser::Value\">Value</a>&lt;Self, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    O2: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Produce the provided value <a href=\"winnow/parser/trait.Parser.html#method.value\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#185-191\">source</a><a href=\"#method.default_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.default_value\" class=\"fn\">default_value</a>&lt;O2&gt;(self) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.DefaultValue.html\" title=\"struct winnow::combinator::parser::DefaultValue\">DefaultValue</a>&lt;Self, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    O2: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class='docblock'>Produce a type’s default value <a href=\"winnow/parser/trait.Parser.html#method.default_value\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.void\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#209-214\">source</a><a href=\"#method.void\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.void\" class=\"fn\">void</a>(self) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.Void.html\" title=\"struct winnow::combinator::parser::Void\">Void</a>&lt;Self, I, O, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Discards the output of the <code>Parser</code> <a href=\"winnow/parser/trait.Parser.html#method.void\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.output_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#238-244\">source</a><a href=\"#method.output_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.output_into\" class=\"fn\">output_into</a>&lt;O2&gt;(self) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.OutputInto.html\" title=\"struct winnow::combinator::parser::OutputInto\">OutputInto</a>&lt;Self, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;O2&gt;,</div></h4></section></summary><div class='docblock'>Convert the parser’s output to another type using <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html\" title=\"trait core::convert::From\"><code>std::convert::From</code></a> <a href=\"winnow/parser/trait.Parser.html#method.output_into\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.recognize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#264-270\">source</a><a href=\"#method.recognize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.recognize\" class=\"fn\">recognize</a>(self) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.Recognize.html\" title=\"struct winnow::combinator::parser::Recognize\">Recognize</a>&lt;Self, I, O, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\">Stream</a>,</div></h4></section></summary><div class='docblock'>Produce the consumed input as produced value. <a href=\"winnow/parser/trait.Parser.html#method.recognize\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_recognized\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#310-316\">source</a><a href=\"#method.with_recognized\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.with_recognized\" class=\"fn\">with_recognized</a>(self) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.WithRecognized.html\" title=\"struct winnow::combinator::parser::WithRecognized\">WithRecognized</a>&lt;Self, I, O, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\">Stream</a>,</div></h4></section></summary><div class='docblock'>Produce the consumed input with the output <a href=\"winnow/parser/trait.Parser.html#method.with_recognized\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#411-417\">source</a><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.map\" class=\"fn\">map</a>&lt;G, O2&gt;(self, map: G) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.Map.html\" title=\"struct winnow::combinator::parser::Map\">Map</a>&lt;Self, G, I, O, O2, E&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(O) -&gt; O2,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Maps a function over the output of a parser <a href=\"winnow/parser/trait.Parser.html#method.map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_map\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#441-449\">source</a><a href=\"#method.try_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.try_map\" class=\"fn\">try_map</a>&lt;G, O2, E2&gt;(self, map: G) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.TryMap.html\" title=\"struct winnow::combinator::parser::TryMap\">TryMap</a>&lt;Self, G, I, O, O2, E, E2&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(O) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;O2, E2&gt;,\n    I: <a class=\"trait\" href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\">Stream</a>,\n    E: <a class=\"trait\" href=\"winnow/error/trait.FromExternalError.html\" title=\"trait winnow::error::FromExternalError\">FromExternalError</a>&lt;I, E2&gt;,</div></h4></section></summary><div class='docblock'>Applies a function returning a <code>Result</code> over the output of a parser. <a href=\"winnow/parser/trait.Parser.html#method.try_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.verify_map\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#476-484\">source</a><a href=\"#method.verify_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.verify_map\" class=\"fn\">verify_map</a>&lt;G, O2&gt;(self, map: G) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.VerifyMap.html\" title=\"struct winnow::combinator::parser::VerifyMap\">VerifyMap</a>&lt;Self, G, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(O) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;O2&gt;,\n    I: <a class=\"trait\" href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\">Stream</a>,\n    E: <a class=\"trait\" href=\"winnow/error/trait.ParserError.html\" title=\"trait winnow::error::ParserError\">ParserError</a>&lt;I&gt;,</div></h4></section></summary><div class='docblock'>Apply both <a href=\"winnow/parser/trait.Parser.html#method.verify\" title=\"method winnow::parser::Parser::verify\"><code>Parser::verify</code></a> and <a href=\"winnow/parser/trait.Parser.html#method.map\" title=\"method winnow::parser::Parser::map\"><code>Parser::map</code></a>. <a href=\"winnow/parser/trait.Parser.html#method.verify_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flat_map\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#519-526\">source</a><a href=\"#method.flat_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.flat_map\" class=\"fn\">flat_map</a>&lt;G, H, O2&gt;(self, map: G) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.FlatMap.html\" title=\"struct winnow::combinator::parser::FlatMap\">FlatMap</a>&lt;Self, G, H, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(O) -&gt; H,\n    H: <a class=\"trait\" href=\"winnow/parser/trait.Parser.html\" title=\"trait winnow::parser::Parser\">Parser</a>&lt;I, O2, E&gt;,</div></h4></section></summary><div class='docblock'>Creates a parser from the output of this one <a href=\"winnow/parser/trait.Parser.html#method.flat_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#577-585\">source</a><a href=\"#method.parse_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.parse_to\" class=\"fn\">parse_to</a>&lt;O2&gt;(self) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.ParseTo.html\" title=\"struct winnow::combinator::parser::ParseTo\">ParseTo</a>&lt;Self, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\">Stream</a>,\n    O: <a class=\"trait\" href=\"winnow/stream/trait.ParseSlice.html\" title=\"trait winnow::stream::ParseSlice\">ParseSlice</a>&lt;O2&gt;,\n    E: <a class=\"trait\" href=\"winnow/error/trait.ParserError.html\" title=\"trait winnow::error::ParserError\">ParserError</a>&lt;I&gt;,</div></h4></section></summary><div class='docblock'>Apply <a href=\"https://doc.rust-lang.org/1.80.1/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\"><code>std::str::FromStr</code></a> to the output of the parser <a href=\"winnow/parser/trait.Parser.html#method.parse_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.verify\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#609-619\">source</a><a href=\"#method.verify\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.verify\" class=\"fn\">verify</a>&lt;G, O2&gt;(self, filter: G) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.Verify.html\" title=\"struct winnow::combinator::parser::Verify\">Verify</a>&lt;Self, G, I, O, O2, E&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;O2</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>,\n    I: <a class=\"trait\" href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\">Stream</a>,\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;O2&gt;,\n    O2: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: <a class=\"trait\" href=\"winnow/error/trait.ParserError.html\" title=\"trait winnow::error::ParserError\">ParserError</a>&lt;I&gt;,</div></h4></section></summary><div class='docblock'>Returns the output of the child parser if it satisfies a verification function. <a href=\"winnow/parser/trait.Parser.html#method.verify\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.context\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#627-635\">source</a><a href=\"#method.context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.context\" class=\"fn\">context</a>&lt;C&gt;(self, context: C) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.Context.html\" title=\"struct winnow::combinator::parser::Context\">Context</a>&lt;Self, I, O, E, C&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\">Stream</a>,\n    E: <a class=\"trait\" href=\"winnow/error/trait.AddContext.html\" title=\"trait winnow::error::AddContext\">AddContext</a>&lt;I, C&gt;,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h4></section></summary><div class='docblock'>If parsing fails, add context to the error <a href=\"winnow/parser/trait.Parser.html#method.context\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.complete_err\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#653-658\">source</a><a href=\"#method.complete_err\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.complete_err\" class=\"fn\">complete_err</a>(self) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.CompleteErr.html\" title=\"struct winnow::combinator::parser::CompleteErr\">CompleteErr</a>&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Transforms <a href=\"winnow/error/enum.ErrMode.html#variant.Incomplete\" title=\"variant winnow::error::ErrMode::Incomplete\"><code>Incomplete</code></a> into <a href=\"winnow/error/enum.ErrMode.html#variant.Backtrack\" title=\"variant winnow::error::ErrMode::Backtrack\"><code>Backtrack</code></a> <a href=\"winnow/parser/trait.Parser.html#method.complete_err\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.err_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/parser.rs.html#662-668\">source</a><a href=\"#method.err_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/parser/trait.Parser.html#method.err_into\" class=\"fn\">err_into</a>&lt;E2&gt;(self) -&gt; <a class=\"struct\" href=\"winnow/combinator/parser/struct.ErrInto.html\" title=\"struct winnow::combinator::parser::ErrInto\">ErrInto</a>&lt;Self, I, O, E, E2&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;E2&gt;,</div></h4></section></summary><div class='docblock'>Convert the parser’s error to another type using <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html\" title=\"trait core::convert::From\"><code>std::convert::From</code></a></div></details></div></details>","Parser<I, <I as Stream>::Slice, E>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBStr%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/impls.rs.html#483\">source</a><a href=\"#impl-PartialEq%3CBStr%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"winnow/stream/struct.BStr.html\" title=\"struct winnow::stream::BStr\">BStr</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/impls.rs.html#483\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"winnow/stream/struct.BStr.html\" title=\"struct winnow::stream::BStr\">BStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<BStr>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytes%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/impls.rs.html#236\">source</a><a href=\"#impl-PartialEq%3CBytes%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"winnow/stream/struct.Bytes.html\" title=\"struct winnow::stream::Bytes\">Bytes</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/impls.rs.html#236\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"winnow/stream/struct.Bytes.html\" title=\"struct winnow::stream::Bytes\">Bytes</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Bytes>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/string.rs.html#2356\">source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;&gt; for &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/string.rs.html#2356\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/string.rs.html#2356\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'a, str>>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3COsString%3E-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ffi/os_str.rs.html#665\">source</a></span><a href=\"#impl-PartialEq%3COsString%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\">OsString</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ffi/os_str.rs.html#667\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\">OsString</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<OsString>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CString%3E-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/string.rs.html#2352\">source</a></span><a href=\"#impl-PartialEq%3CString%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/string.rs.html#2352\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/alloc/string.rs.html#2352\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<String>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CBStr%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/impls.rs.html#502\">source</a><a href=\"#impl-PartialOrd%3CBStr%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"winnow/stream/struct.BStr.html\" title=\"struct winnow::stream::BStr\">BStr</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/impls.rs.html#502\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"winnow/stream/struct.BStr.html\" title=\"struct winnow::stream::BStr\">BStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<BStr>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CBytes%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/impls.rs.html#255\">source</a><a href=\"#impl-PartialOrd%3CBytes%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"winnow/stream/struct.Bytes.html\" title=\"struct winnow::stream::Bytes\">Bytes</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/impls.rs.html#255\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"winnow/stream/struct.Bytes.html\" title=\"struct winnow::stream::Bytes\">Bytes</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Bytes>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pattern%3C'a%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/pattern.rs.html#952\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Non-allocating substring search.</p>\n<p>Will handle the pattern <code>&quot;&quot;</code> as returning empty matches at each character\nboundary.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find(<span class=\"string\">\"world\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>));</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/pattern.rs.html#962\">source</a><a href=\"#method.is_prefix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#method.is_prefix_of\" class=\"fn\">is_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span></summary><div class=\"docblock\"><p>Checks whether the pattern matches at the front of the haystack.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_contained_in\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/pattern.rs.html#968\">source</a><a href=\"#method.is_contained_in\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#method.is_contained_in\" class=\"fn\">is_contained_in</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span></summary><div class=\"docblock\"><p>Checks whether the pattern matches anywhere in the haystack</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strip_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/pattern.rs.html#994\">source</a><a href=\"#method.strip_prefix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#method.strip_prefix_of\" class=\"fn\">strip_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span></summary><div class=\"docblock\"><p>Removes the pattern from the front of haystack, if it matches.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/pattern.rs.html#1005\">source</a><a href=\"#method.is_suffix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#method.is_suffix_of\" class=\"fn\">is_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span></summary><div class=\"docblock\"><p>Checks whether the pattern matches at the back of the haystack.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strip_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/pattern.rs.html#1011\">source</a><a href=\"#method.strip_suffix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#method.strip_suffix_of\" class=\"fn\">strip_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span></summary><div class=\"docblock\"><p>Removes the pattern from the back of haystack, if it matches.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Searcher\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/struct.StrSearcher.html\" title=\"struct core::str::pattern::StrSearcher\">StrSearcher</a>&lt;'a, 'b&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span><div class='docblock'>Associated searcher for this pattern</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_searcher\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/core/str/pattern.rs.html#956\">source</a><a href=\"#method.into_searcher\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/trait.Pattern.html#tymethod.into_searcher\" class=\"fn\">into_searcher</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/pattern/struct.StrSearcher.html\" title=\"struct core::str::pattern::StrSearcher\">StrSearcher</a>&lt;'a, 'b&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span><div class='docblock'>Constructs the associated searcher from\n<code>self</code> and the <code>haystack</code> to search in.</div></details></div></details>","Pattern<'a>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SliceLen-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#450-455\">source</a><a href=\"#impl-SliceLen-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"winnow/stream/trait.SliceLen.html\" title=\"trait winnow::stream::SliceLen\">SliceLen</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#452-454\">source</a><a href=\"#method.slice_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.SliceLen.html#tymethod.slice_len\" class=\"fn\">slice_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Calculates the input length, as indicated by its name,\nand the name of the trait itself</div></details></div></details>","SliceLen","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stream-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#703-776\">source</a><a href=\"#impl-Stream-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i&gt; <a class=\"trait\" href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\">Stream</a> for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Token\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Token\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"winnow/stream/trait.Stream.html#associatedtype.Token\" class=\"associatedtype\">Token</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.char.html\">char</a></h4></section></summary><div class='docblock'>The smallest unit being parsed <a href=\"winnow/stream/trait.Stream.html#associatedtype.Token\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Slice\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Slice\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"winnow/stream/trait.Stream.html#associatedtype.Slice\" class=\"associatedtype\">Slice</a> = &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Sequence of <code>Token</code>s <a href=\"winnow/stream/trait.Stream.html#associatedtype.Slice\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IterOffsets\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IterOffsets\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"winnow/stream/trait.Stream.html#associatedtype.IterOffsets\" class=\"associatedtype\">IterOffsets</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/iter/struct.CharIndices.html\" title=\"struct core::str::iter::CharIndices\">CharIndices</a>&lt;'i&gt;</h4></section></summary><div class='docblock'>Iterate with the offset from the current location</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Checkpoint\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Checkpoint\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"winnow/stream/trait.Stream.html#associatedtype.Checkpoint\" class=\"associatedtype\">Checkpoint</a> = <a class=\"struct\" href=\"winnow/stream/struct.Checkpoint.html\" title=\"struct winnow::stream::Checkpoint\">Checkpoint</a>&lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>A parse location within the stream</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_offsets\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#712-714\">source</a><a href=\"#method.iter_offsets\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Stream.html#tymethod.iter_offsets\" class=\"fn\">iter_offsets</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.IterOffsets\" title=\"type winnow::stream::Stream::IterOffsets\">IterOffsets</a></h4></section></summary><div class='docblock'>Iterate with the offset from the current location</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eof_offset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#716-718\">source</a><a href=\"#method.eof_offset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Stream.html#tymethod.eof_offset\" class=\"fn\">eof_offset</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the offset to the end of the input</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_token\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#721-726\">source</a><a href=\"#method.next_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Stream.html#tymethod.next_token\" class=\"fn\">next_token</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Token\" title=\"type winnow::stream::Stream::Token\">Token</a>&gt;</h4></section></summary><div class='docblock'>Split off the next token from the input</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_for\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#729-739\">source</a><a href=\"#method.offset_for\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Stream.html#tymethod.offset_for\" class=\"fn\">offset_for</a>&lt;P&gt;(&amp;self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Token\" title=\"type winnow::stream::Stream::Token\">Token</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Finds the offset of the next matching token</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_at\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#741-755\">source</a><a href=\"#method.offset_at\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Stream.html#tymethod.offset_at\" class=\"fn\">offset_at</a>(&amp;self, tokens: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"winnow/error/enum.Needed.html\" title=\"enum winnow::error::Needed\">Needed</a>&gt;</h4></section></summary><div class='docblock'>Get the offset for the number of <code>tokens</code> into the stream <a href=\"winnow/stream/trait.Stream.html#tymethod.offset_at\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#757-761\">source</a><a href=\"#method.next_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Stream.html#tymethod.next_slice\" class=\"fn\">next_slice</a>(&amp;mut self, offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>) -&gt; Self::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Slice\" title=\"type winnow::stream::Stream::Slice\">Slice</a></h4></section></summary><div class='docblock'>Split off a slice of tokens from the input <a href=\"winnow/stream/trait.Stream.html#tymethod.next_slice\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checkpoint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#764-766\">source</a><a href=\"#method.checkpoint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Stream.html#tymethod.checkpoint\" class=\"fn\">checkpoint</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Checkpoint\" title=\"type winnow::stream::Stream::Checkpoint\">Checkpoint</a></h4></section></summary><div class='docblock'>Save the current parse location within the stream</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#768-770\">source</a><a href=\"#method.reset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Stream.html#tymethod.reset\" class=\"fn\">reset</a>(&amp;mut self, checkpoint: Self::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Checkpoint\" title=\"type winnow::stream::Stream::Checkpoint\">Checkpoint</a>)</h4></section></summary><div class='docblock'>Revert the stream to a prior <a href=\"winnow/stream/trait.Stream.html#associatedtype.Checkpoint\"><code>Self::Checkpoint</code></a> <a href=\"winnow/stream/trait.Stream.html#tymethod.reset\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#773-775\">source</a><a href=\"#method.raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Stream.html#tymethod.raw\" class=\"fn\">raw</a>(&amp;self) -&gt; &amp;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a></h4></section></summary><div class='docblock'>Return the inner-most stream</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_token\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#564-571\">source</a><a href=\"#method.peek_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Stream.html#method.peek_token\" class=\"fn\">peek_token</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(Self, Self::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Token\" title=\"type winnow::stream::Stream::Token\">Token</a>)&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Split off the next token from the input</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#601-608\">source</a><a href=\"#method.peek_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Stream.html#method.peek_slice\" class=\"fn\">peek_slice</a>(&amp;self, offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a>) -&gt; (Self, Self::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Slice\" title=\"type winnow::stream::Stream::Slice\">Slice</a>)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Split off a slice of tokens from the input</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.finish\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#612-614\">source</a><a href=\"#method.finish\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Stream.html#method.finish\" class=\"fn\">finish</a>(&amp;mut self) -&gt; Self::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Slice\" title=\"type winnow::stream::Stream::Slice\">Slice</a></h4></section></summary><div class='docblock'>Advance to the end of the stream</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_finish\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#617-624\">source</a><a href=\"#method.peek_finish\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Stream.html#method.peek_finish\" class=\"fn\">peek_finish</a>(&amp;self) -&gt; (Self, Self::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Slice\" title=\"type winnow::stream::Stream::Slice\">Slice</a>)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Advance to the end of the stream</div></details></div></details>","Stream","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StreamIsPartial-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1560-1573\">source</a><a href=\"#impl-StreamIsPartial-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"winnow/stream/trait.StreamIsPartial.html\" title=\"trait winnow::stream::StreamIsPartial\">StreamIsPartial</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.PartialState\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PartialState\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"winnow/stream/trait.StreamIsPartial.html#associatedtype.PartialState\" class=\"associatedtype\">PartialState</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>Whether the stream is currently partial or complete</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.complete\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1563-1565\">source</a><a href=\"#method.complete\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.StreamIsPartial.html#tymethod.complete\" class=\"fn\">complete</a>(&amp;mut self) -&gt; Self::<a class=\"associatedtype\" href=\"winnow/stream/trait.StreamIsPartial.html#associatedtype.PartialState\" title=\"type winnow::stream::StreamIsPartial::PartialState\">PartialState</a></h4></section></summary><div class='docblock'>Mark the stream is complete</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.restore_partial\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1567\">source</a><a href=\"#method.restore_partial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.StreamIsPartial.html#tymethod.restore_partial\" class=\"fn\">restore_partial</a>(&amp;mut self, _state: Self::<a class=\"associatedtype\" href=\"winnow/stream/trait.StreamIsPartial.html#associatedtype.PartialState\" title=\"type winnow::stream::StreamIsPartial::PartialState\">PartialState</a>)</h4></section></summary><div class='docblock'>Restore the stream back to its previous state</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_partial_supported\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1570-1572\">source</a><a href=\"#method.is_partial_supported\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.StreamIsPartial.html#tymethod.is_partial_supported\" class=\"fn\">is_partial_supported</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Report whether the <a href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\"><code>Stream</code></a> is can ever be incomplete</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_partial\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1542-1544\">source</a><a href=\"#method.is_partial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.StreamIsPartial.html#method.is_partial\" class=\"fn\">is_partial</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Report whether the <a href=\"winnow/stream/trait.Stream.html\" title=\"trait winnow::stream::Stream\"><code>Stream</code></a> is currently incomplete</div></details></div></details>","StreamIsPartial","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26OsStr%3E-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.72.0\">1.72.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ffi/os_str.rs.html#1320\">source</a></span><a href=\"#impl-TryFrom%3C%26OsStr%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.1/src/std/ffi/os_str.rs.html#1332\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a>, &lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to convert an <code>&amp;OsStr</code> to a <code>&amp;str</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span>os_str = OsStr::new(<span class=\"string\">\"foo\"</span>);\n<span class=\"kw\">let </span>as_str = &lt;<span class=\"kw-2\">&amp;</span>str&gt;::try_from(os_str).unwrap();\n<span class=\"macro\">assert_eq!</span>(as_str, <span class=\"string\">\"foo\"</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/str/error/struct.Utf8Error.html\" title=\"struct core::str::error::Utf8Error\">Utf8Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<&'a OsStr>","winnow::stream::Str"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpdateSlice-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2786-2791\">source</a><a href=\"#impl-UpdateSlice-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"winnow/stream/trait.UpdateSlice.html\" title=\"trait winnow::stream::UpdateSlice\">UpdateSlice</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#2788-2790\">source</a><a href=\"#method.update_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.UpdateSlice.html#tymethod.update_slice\" class=\"fn\">update_slice</a>(self, inner: Self::<a class=\"associatedtype\" href=\"winnow/stream/trait.Stream.html#associatedtype.Slice\" title=\"type winnow::stream::Stream::Slice\">Slice</a>) -&gt; Self</h4></section></summary><div class='docblock'>Convert an <code>Output</code> type to be used as <code>Stream</code></div></details></div></details>","UpdateSlice","winnow::stream::Str"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()