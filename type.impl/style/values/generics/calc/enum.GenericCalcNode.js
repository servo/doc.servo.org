(function() {var type_impls = {
"style":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-GenericCalcNode%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#177\">source</a><a href=\"#impl-Clone-for-GenericCalcNode%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">GenericCalcNode</a>&lt;L&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#177\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">GenericCalcNode</a>&lt;L&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","style::values::computed::length_percentage::CalcNode","style::values::specified::calc::CalcNode"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GenericCalcNode%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#178\">source</a><a href=\"#impl-Debug-for-GenericCalcNode%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">GenericCalcNode</a>&lt;L&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#178\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","style::values::computed::length_percentage::CalcNode","style::values::specified::calc::CalcNode"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-GenericCalcNode%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#179\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-GenericCalcNode%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, L&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">GenericCalcNode</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#179\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;__D&gt;(__deserializer: __D) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, __D::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","style::values::computed::length_percentage::CalcNode","style::values::specified::calc::CalcNode"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericCalcNode%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#430-1840\">source</a><a href=\"#impl-GenericCalcNode%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L: <a class=\"trait\" href=\"style/values/generics/calc/trait.CalcNodeLeaf.html\" title=\"trait style::values::generics::calc::CalcNodeLeaf\">CalcNodeLeaf</a>&gt; <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">CalcNode</a>&lt;L&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dummy\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#432-434\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.dummy\" class=\"fn\">dummy</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a dummy CalcNode that can be used to do replacements of other nodes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.coerce_to_value\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#439-441\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.coerce_to_value\" class=\"fn\">coerce_to_value</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Change all the leaf nodes to have the given value. This is useful when\nyou have <code>calc(1px * nan)</code> and you want to replace the product node with\n<code>calc(nan)</code>, in which case the unit will be retained.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_product_distributive\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#447-453\">source</a><h4 class=\"code-header\">pub fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.is_product_distributive\" class=\"fn\">is_product_distributive</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Return true if a product is distributive over this node.\nIs distributive: (2 + 3) * 4 = 8 + 12\nNot distributive: sign(2 + 3) * 4 != sign(8 + 12)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unit\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#456-547\">source</a><h4 class=\"code-header\">pub fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.unit\" class=\"fn\">unit</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"style/values/generics/calc/struct.CalcUnits.html\" title=\"struct style::values::generics::calc::CalcUnits\">CalcUnits</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the node has a valid unit outcome, then return it, otherwise fail.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.negate\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#551-649\">source</a><h4 class=\"code-header\">pub fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.negate\" class=\"fn\">negate</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Negate the node inline.  If the node is distributive, it is replaced by the result,\notherwise the node is wrapped in a [<code>Negate</code>] node.</p>\n</div></details><section id=\"method.sort_key\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#651-656\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.sort_key\" class=\"fn\">sort_key</a>(&amp;self) -&gt; <a class=\"enum\" href=\"style/values/generics/calc/enum.SortKey.html\" title=\"enum style::values::generics::calc::SortKey\">SortKey</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_leaf\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#659-664\">source</a><h4 class=\"code-header\">pub fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.as_leaf\" class=\"fn\">as_leaf</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;L</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the leaf if we can (if simplification has allowed it).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_sum_in_place\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#667-674\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.try_sum_in_place\" class=\"fn\">try_sum_in_place</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to merge one node into another using the sum, that is, perform <code>x</code> + <code>y</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_product_in_place\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#677-711\">source</a><h4 class=\"code-header\">pub fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.try_product_in_place\" class=\"fn\">try_product_in_place</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut Self</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Tries to merge one node into another using the product, that is, perform <code>x</code> * <code>y</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_op\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#714-724\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.try_op\" class=\"fn\">try_op</a>&lt;O&gt;(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Self</a>, op: O) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.f32.html\">f32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.f32.html\">f32</a>,</div></h4></section></summary><div class=\"docblock\"><p>Tries to apply a generic arithmetic operator</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#727-773\">source</a><h4 class=\"code-header\">pub fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.map\" class=\"fn\">map</a>(&amp;mut self, op: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Map the value of this node with the given operation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_leaves\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#776-782\">source</a><h4 class=\"code-header\">pub fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.map_leaves\" class=\"fn\">map_leaves</a>&lt;O, F&gt;(&amp;self, map: F) -&gt; <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">CalcNode</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"style/values/generics/calc/trait.CalcNodeLeaf.html\" title=\"trait style::values::generics::calc::CalcNodeLeaf\">CalcNodeLeaf</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;L</a>) -&gt; O,</div></h4></section></summary><div class=\"docblock\"><p>Convert this <code>CalcNode</code> into a <code>CalcNode</code> with a different leaf kind.</p>\n</div></details><section id=\"method.map_leaves_internal\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#784-851\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.map_leaves_internal\" class=\"fn\">map_leaves_internal</a>&lt;O, F&gt;(&amp;self, map: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut F</a>) -&gt; <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">CalcNode</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"style/values/generics/calc/trait.CalcNodeLeaf.html\" title=\"trait style::values::generics::calc::CalcNodeLeaf\">CalcNodeLeaf</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;L</a>) -&gt; O,</div></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.resolve\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#854-856\">source</a><h4 class=\"code-header\">pub fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.resolve\" class=\"fn\">resolve</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;L, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Resolve this node into a value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resolve_map\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#859-864\">source</a><h4 class=\"code-header\">pub fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.resolve_map\" class=\"fn\">resolve_map</a>&lt;F&gt;(&amp;self, leaf_to_output_fn: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;L, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;L</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;L, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Resolve this node into a value, given a function that maps the leaf values.</p>\n</div></details><section id=\"method.resolve_internal\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#866-1121\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.resolve_internal\" class=\"fn\">resolve_internal</a>&lt;F&gt;(&amp;self, leaf_to_output_fn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut F</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;L, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;L</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;L, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;,</div></h4></section><section id=\"method.is_negative_leaf\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1123-1128\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.is_negative_leaf\" class=\"fn\">is_negative_leaf</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;</h4></section><section id=\"method.is_zero_leaf\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1130-1135\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.is_zero_leaf\" class=\"fn\">is_zero_leaf</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;</h4></section><section id=\"method.is_infinite_leaf\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1137-1142\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.is_infinite_leaf\" class=\"fn\">is_infinite_leaf</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;</h4></section><section id=\"method.is_nan_leaf\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1144-1149\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.is_nan_leaf\" class=\"fn\">is_nan_leaf</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.visit_depth_first\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1156-1158\">source</a><h4 class=\"code-header\">pub fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.visit_depth_first\" class=\"fn\">visit_depth_first</a>(&amp;mut self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut Self</a>))</h4></section></summary><div class=\"docblock\"><p>Visits all the nodes in this calculation tree recursively, starting by\nthe leaves and bubbling all the way up.</p>\n<p>This is useful for simplification, but can also be used for validation\nand such.</p>\n</div></details><section id=\"method.visit_depth_first_internal\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1160-1204\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.visit_depth_first_internal\" class=\"fn\">visit_depth_first_internal</a>(&amp;mut self, f: &amp;mut impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut Self</a>))</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.simplify_and_sort_direct_children\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1216-1630\">source</a><h4 class=\"code-header\">pub fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.simplify_and_sort_direct_children\" class=\"fn\">simplify_and_sort_direct_children</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>This function simplifies and sorts the calculation of the specified node. It simplifies\ndirectly nested nodes while assuming that all nodes below it have already been simplified.\nIt is recommended to use this function in combination with <code>visit_depth_first()</code>.</p>\n<p>This function is necessary only if the node needs to be preserved after parsing,\nspecifically for <code>&lt;length-percentage&gt;</code> cases where the calculation contains percentages or\nrelative units. Otherwise, the node can be evaluated using <code>resolve()</code>, which will\nautomatically provide a simplified value.</p>\n<p><a href=\"https://drafts.csswg.org/css-values-4/#calc-simplification\">https://drafts.csswg.org/css-values-4/#calc-simplification</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.simplify_and_sort\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1633-1635\">source</a><h4 class=\"code-header\">pub fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.simplify_and_sort\" class=\"fn\">simplify_and_sort</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Simplifies and sorts the kids in the whole calculation subtree.</p>\n</div></details><section id=\"method.to_css_impl\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1637-1824\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.to_css_impl\" class=\"fn\">to_css_impl</a>&lt;W&gt;(\n    &amp;self,\n    dest: &amp;mut <a class=\"struct\" href=\"style_traits/values/struct.CssWriter.html\" title=\"struct style_traits::values::CssWriter\">CssWriter</a>&lt;'_, W&gt;,\n    level: <a class=\"enum\" href=\"style/values/generics/calc/enum.ArgumentLevel.html\" title=\"enum style::values::generics::calc::ArgumentLevel\">ArgumentLevel</a>,\n) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a><div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">Write</a>,</div></h4></section><section id=\"method.compare\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1826-1837\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.compare\" class=\"fn\">compare</a>(\n    &amp;self,\n    other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Self</a>,\n    basis_positive: <a class=\"enum\" href=\"style/values/generics/calc/enum.PositivePercentageBasis.html\" title=\"enum style::values::generics::calc::PositivePercentageBasis\">PositivePercentageBasis</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1839\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Self</a>, basis_positive: <a class=\"enum\" href=\"style/values/generics/calc/enum.PositivePercentageBasis.html\" title=\"enum style::values::generics::calc::PositivePercentageBasis\">PositivePercentageBasis</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Return whether a leaf is greater than another.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1839\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Self</a>, basis_positive: <a class=\"enum\" href=\"style/values/generics/calc/enum.PositivePercentageBasis.html\" title=\"enum style::values::generics::calc::PositivePercentageBasis\">PositivePercentageBasis</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Return whether a leaf is less than another.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lte\" class=\"method\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1839\">source</a><h4 class=\"code-header\">fn <a href=\"style/values/generics/calc/enum.GenericCalcNode.html#tymethod.lte\" class=\"fn\">lte</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Self</a>, basis_positive: <a class=\"enum\" href=\"style/values/generics/calc/enum.PositivePercentageBasis.html\" title=\"enum style::values::generics::calc::PositivePercentageBasis\">PositivePercentageBasis</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Return whether a leaf is smaller or equal than another.</p>\n</div></details></div></details>",0,"style::values::computed::length_percentage::CalcNode","style::values::specified::calc::CalcNode"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MallocSizeOf-for-GenericCalcNode%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#180\">source</a><a href=\"#impl-MallocSizeOf-for-GenericCalcNode%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"malloc_size_of/trait.MallocSizeOf.html\" title=\"trait malloc_size_of::MallocSizeOf\">MallocSizeOf</a> for <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">GenericCalcNode</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"malloc_size_of/trait.MallocSizeOf.html\" title=\"trait malloc_size_of::MallocSizeOf\">MallocSizeOf</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#180\">source</a><a href=\"#method.size_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"malloc_size_of/trait.MallocSizeOf.html#tymethod.size_of\" class=\"fn\">size_of</a>(&amp;self, ops: &amp;mut <a class=\"struct\" href=\"malloc_size_of/struct.MallocSizeOfOps.html\" title=\"struct malloc_size_of::MallocSizeOfOps\">MallocSizeOfOps</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Measure the heap usage of all descendant heap-allocated structures, but\nnot the space taken up by the value itself.</div></details></div></details>","MallocSizeOf","style::values::computed::length_percentage::CalcNode","style::values::specified::calc::CalcNode"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-GenericCalcNode%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#181\">source</a><a href=\"#impl-PartialEq-for-GenericCalcNode%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">GenericCalcNode</a>&lt;L&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#181\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">GenericCalcNode</a>&lt;L&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","style::values::computed::length_percentage::CalcNode","style::values::specified::calc::CalcNode"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-GenericCalcNode%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#182\">source</a><a href=\"#impl-Serialize-for-GenericCalcNode%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">GenericCalcNode</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#182\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;__S&gt;(&amp;self, __serializer: __S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;__S::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, __S::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","style::values::computed::length_percentage::CalcNode","style::values::specified::calc::CalcNode"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToAnimatedZero-for-GenericCalcNode%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#183\">source</a><a href=\"#impl-ToAnimatedZero-for-GenericCalcNode%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"style/values/animated/trait.ToAnimatedZero.html\" title=\"trait style::values::animated::ToAnimatedZero\">ToAnimatedZero</a> for <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">GenericCalcNode</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"style/values/animated/trait.ToAnimatedZero.html\" title=\"trait style::values::animated::ToAnimatedZero\">ToAnimatedZero</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_animated_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#183\">source</a><a href=\"#method.to_animated_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"style/values/animated/trait.ToAnimatedZero.html#tymethod.to_animated_zero\" class=\"fn\">to_animated_zero</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Returns a value that, when added with an underlying value, will produce the underlying\nvalue. This is used for SMIL animation’s “by-animation” where SMIL first interpolates from\nthe zero value to the ‘by’ value, and then adds the result to the underlying value. <a href=\"style/values/animated/trait.ToAnimatedZero.html#tymethod.to_animated_zero\">Read more</a></div></details></div></details>","ToAnimatedZero","style::values::computed::length_percentage::CalcNode","style::values::specified::calc::CalcNode"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToCss-for-GenericCalcNode%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1842-1850\">source</a><a href=\"#impl-ToCss-for-GenericCalcNode%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L: <a class=\"trait\" href=\"style/values/generics/calc/trait.CalcNodeLeaf.html\" title=\"trait style::values::generics::calc::CalcNodeLeaf\">CalcNodeLeaf</a>&gt; <a class=\"trait\" href=\"style_traits/values/trait.ToCss.html\" title=\"trait style_traits::values::ToCss\">ToCss</a> for <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">CalcNode</a>&lt;L&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_css\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#1844-1849\">source</a><a href=\"#method.to_css\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"style_traits/values/trait.ToCss.html#tymethod.to_css\" class=\"fn\">to_css</a>&lt;W&gt;(&amp;self, dest: &amp;mut <a class=\"struct\" href=\"style_traits/values/struct.CssWriter.html\" title=\"struct style_traits::values::CssWriter\">CssWriter</a>&lt;'_, W&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a><div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">Write</a>,</div></h4></section></summary><div class=\"docblock\"><p><a href=\"https://drafts.csswg.org/css-values/#calc-serialize\">https://drafts.csswg.org/css-values/#calc-serialize</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_css_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/style_traits/values.rs.html#93\">source</a><a href=\"#method.to_css_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"style_traits/values/trait.ToCss.html#method.to_css_string\" class=\"fn\">to_css_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Serialize <code>self</code> in CSS syntax and return a string. <a href=\"style_traits/values/trait.ToCss.html#method.to_css_string\">Read more</a></div></details></div></details>","ToCss","style::values::computed::length_percentage::CalcNode","style::values::specified::calc::CalcNode"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToResolvedValue-for-GenericCalcNode%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#184\">source</a><a href=\"#impl-ToResolvedValue-for-GenericCalcNode%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"style/values/resolved/trait.ToResolvedValue.html\" title=\"trait style::values::resolved::ToResolvedValue\">ToResolvedValue</a> for <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">GenericCalcNode</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"style/values/resolved/trait.ToResolvedValue.html\" title=\"trait style::values::resolved::ToResolvedValue\">ToResolvedValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.ResolvedValue\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ResolvedValue\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"style/values/resolved/trait.ToResolvedValue.html#associatedtype.ResolvedValue\" class=\"associatedtype\">ResolvedValue</a> = <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">GenericCalcNode</a>&lt;&lt;L as <a class=\"trait\" href=\"style/values/resolved/trait.ToResolvedValue.html\" title=\"trait style::values::resolved::ToResolvedValue\">ToResolvedValue</a>&gt;::<a class=\"associatedtype\" href=\"style/values/resolved/trait.ToResolvedValue.html#associatedtype.ResolvedValue\" title=\"type style::values::resolved::ToResolvedValue::ResolvedValue\">ResolvedValue</a>&gt;</h4></section></summary><div class='docblock'>The resolved value type we’re going to be converted to.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_resolved_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#184\">source</a><a href=\"#method.from_resolved_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"style/values/resolved/trait.ToResolvedValue.html#tymethod.from_resolved_value\" class=\"fn\">from_resolved_value</a>(from: Self::<a class=\"associatedtype\" href=\"style/values/resolved/trait.ToResolvedValue.html#associatedtype.ResolvedValue\" title=\"type style::values::resolved::ToResolvedValue::ResolvedValue\">ResolvedValue</a>) -&gt; Self</h4></section></summary><div class='docblock'>Convert a resolved value to resolved value form.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_resolved_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#184\">source</a><a href=\"#method.to_resolved_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"style/values/resolved/trait.ToResolvedValue.html#tymethod.to_resolved_value\" class=\"fn\">to_resolved_value</a>(self, context: &amp;<a class=\"struct\" href=\"style/values/resolved/struct.Context.html\" title=\"struct style::values::resolved::Context\">Context</a>&lt;'_&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"style/values/resolved/trait.ToResolvedValue.html#associatedtype.ResolvedValue\" title=\"type style::values::resolved::ToResolvedValue::ResolvedValue\">ResolvedValue</a></h4></section></summary><div class='docblock'>Convert a resolved value to a resolved value.</div></details></div></details>","ToResolvedValue","style::values::computed::length_percentage::CalcNode","style::values::specified::calc::CalcNode"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToShmem-for-GenericCalcNode%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#185\">source</a><a href=\"#impl-ToShmem-for-GenericCalcNode%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"to_shmem/trait.ToShmem.html\" title=\"trait to_shmem::ToShmem\">ToShmem</a> for <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">GenericCalcNode</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"to_shmem/trait.ToShmem.html\" title=\"trait to_shmem::ToShmem\">ToShmem</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_shmem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#185\">source</a><a href=\"#method.to_shmem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"to_shmem/trait.ToShmem.html#tymethod.to_shmem\" class=\"fn\">to_shmem</a>(&amp;self, builder: &amp;mut <a class=\"struct\" href=\"to_shmem/struct.SharedMemoryBuilder.html\" title=\"struct to_shmem::SharedMemoryBuilder\">SharedMemoryBuilder</a>) -&gt; <a class=\"type\" href=\"to_shmem/type.Result.html\" title=\"type to_shmem::Result\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Clones this value into a form suitable for writing into a\nSharedMemoryBuilder. <a href=\"to_shmem/trait.ToShmem.html#tymethod.to_shmem\">Read more</a></div></details></div></details>","ToShmem","style::values::computed::length_percentage::CalcNode","style::values::specified::calc::CalcNode"],["<section id=\"impl-StructuralPartialEq-for-GenericCalcNode%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/style/values/generics/calc.rs.html#181\">source</a><a href=\"#impl-StructuralPartialEq-for-GenericCalcNode%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"style/values/generics/calc/enum.GenericCalcNode.html\" title=\"enum style::values::generics::calc::GenericCalcNode\">GenericCalcNode</a>&lt;L&gt;</h3></section>","StructuralPartialEq","style::values::computed::length_percentage::CalcNode","style::values::specified::calc::CalcNode"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()