initSidebarItems({"macro":[["malloc_size_of_hash_map",""],["malloc_size_of_hash_set",""],["malloc_size_of_is_0","For use on types where size_of() returns 0."]],"struct":[["MallocSizeOfOps","Operations used when measuring heap usage of data structures."],["Measurable","Measurable that defers to inner value and used to verify MallocSizeOf implementation in a struct."]],"trait":[["MallocConditionalShallowSizeOf","`MallocConditionalSizeOf` combined with `MallocShallowSizeOf`."],["MallocConditionalSizeOf","Like `MallocSizeOf`, but only measures if the value hasn’t already been measured. For use with types like `Rc` and `Arc` when appropriate (e.g. when there is no “primary” reference)."],["MallocShallowSizeOf","Trait for measuring the “shallow” heap usage of a container."],["MallocSizeOf","Trait for measuring the “deep” heap usage of a data structure. This is the most commonly-used of the traits."],["MallocUnconditionalShallowSizeOf","`MallocUnconditionalSizeOf` combined with `MallocShallowSizeOf`."],["MallocUnconditionalSizeOf","Like `MallocSizeOf`, but with a different name so it cannot be used accidentally with derive(MallocSizeOf). For use with types like `Rc` and `Arc` when appropriate (e.g. when measuring a “primary” reference)."]],"type":[["VoidPtrToBoolFnMut","A closure implementing a stateful predicate on pointers."],["VoidPtrToSizeFn","A C function that takes a pointer to a heap allocation and returns its size."]]});