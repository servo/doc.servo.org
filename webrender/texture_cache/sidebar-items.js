initSidebarItems({"constant":[["PICTURE_TEXTURE_ADD_SLICES",""],["PICTURE_TILE_FORMAT","The chosen image format for picture tiles."],["TEXTURE_REGION_DIMENSIONS","The size of each region/layer in shared cache texture arrays."],["TEXTURE_REGION_PIXELS","The number of pixels in a region. Derived from the above."]],"enum":[["CacheEntryMarker",""],["EntryDetails","Items in the texture cache can either be standalone textures, or a sub-rect inside the shared cache."],["Eviction","Describes the eviction policy for a given entry in the texture cache."]],"fn":[["quantize_dimension",""]],"struct":[["CacheAllocParams","Container struct for the various parameters used in cache allocation."],["CacheEntry",""],["EvictionNotice",""],["PictureTextures","The texture arrays used to hold picture cache tiles."],["SharedTextures","A set of lazily allocated, fixed size, texture arrays for each format the texture cache supports."],["SlabSize",""],["TextureArray","A texture array contains a number of textures, each with a number of layers, where each layer contains a region that can act as a slab allocator."],["TextureArrayUnit",""],["TextureCache","General-purpose manager for images in GPU memory. This includes images, rasterized glyphs, rasterized blobs, cached render tasks, etc."],["TextureLocation",""],["TextureRegion","A region corresponds to a layer in a shared cache texture."],["WholeTextureArray","A texture array that allocates whole slices and doesnâ€™t do any region tracking."],["WholeTextureSlice","A tracking structure for each slice in `WholeTextureArray`."]],"type":[["TextureCacheHandle","A texture cache handle is a weak reference to a cache entry."]]});