initSidebarItems({"constant":[["MAX_MASK_SIZE",""],["MIN_BRUSH_SPLIT_AREA",""],["VECS_PER_SEGMENT",""]],"enum":[["ClipMaskKind","Represents the visibility state of a segment (wrt clip masks)."],["PrimitiveInstanceKind",""],["PrimitiveTemplateKind","The shared information for a given primitive. This is interned and retained both across frames and display lists, by comparing the matching PrimitiveKey."]],"fn":[["adjust_mask_scale_for_max_size",""],["compute_conservative_visible_rect",""],["decompose_repeated_primitive",""],["edge_flags_for_tile_spacing",""],["get_clipped_device_rect","Given an unclipped device rect, try to find a minimal device space rect to allocate a clip mask for, by clipping to the screen. This function is very similar to get_raster_rects below. It is far from ideal, and should be refactored as part of the support for setting scale per-raster-root."],["get_line_decoration_size","Choose the decoration mask tile size for a given line."],["get_raster_rects",""],["get_unclipped_device_rect","Retrieve the exact unsnapped device space rectangle for a primitive."],["register_prim_chase_id",""],["update_opacity_binding",""],["write_brush_segment_description",""],["write_segment",""]],"mod":[["backdrop",""],["borders",""],["gradient",""],["image",""],["interned",""],["line_dec",""],["picture",""],["text_run",""]],"static":[["NEXT_PRIM_ID","Counter for unique primitive IDs for debug tracing."],["PRIM_CHASE_ID",""]],"struct":[["BorderSegmentInfo","Information about how to cache a border segment, along with the current render task cache entry."],["BrushSegment",""],["CachedGradientSegment",""],["ClipCorner",""],["ClipData",""],["ClipRect",""],["ClipTaskIndex",""],["DeferredResolve","For external images, itâ€™s not possible to know the UV coords of the image (or the image data itself) until the render thread receives the frame and issues callbacks to the client application. For external images that are visible, a DeferredResolve is created that is stored in the frame. This allows the render thread to iterate this list and update any changed texture data and update the UV rect. Any filtering is handled externally for NativeTexture external images."],["ImageMaskData",""],["NinePatchDescriptor","A hashable descriptor for nine-patches, used by image and gradient borders."],["OpacityBinding",""],["PictureIndex",""],["PointKey","A hashable point for using as a key during primitive interning."],["PrimKey",""],["PrimKeyCommonData",""],["PrimTemplate",""],["PrimTemplateCommonData",""],["PrimitiveDebugId",""],["PrimitiveInstance",""],["PrimitiveKey",""],["PrimitiveOpacity",""],["PrimitiveScratchBuffer","Contains various vecs of data that is used only during frame building, where we want to recycle the memory each new display list, to avoid constantly re-allocating and moving memory around. Written during primitive preparation, and read during batching."],["PrimitiveStore",""],["PrimitiveStoreStats",""],["PrimitiveTemplate",""],["PrimitiveVisibility","Information stored for a visible primitive about the visible rect and associated clip information."],["PrimitiveVisibilityFlags","A set of bitflags that can be set in the visibility information for a primitive instance. This can be used to control how primitives are treated during batching."],["PrimitiveVisibilityIndex",""],["PrimitiveVisibilityMask","A bit mask describing which dirty regions a primitive is visible in. A value of 0 means not visible in any region, while a mask of 0xffff would be considered visible in all regions."],["RectangleKey",""],["SegmentedInstance",""],["SideOffsetsKey","A hashable SideOffset2D that can be used in primitive keys."],["SizeKey","A hashable size for using as a key during primitive interning."],["SpaceMapper",""],["SpaceSnapper",""],["VectorKey","A hashable vec for using as a key during primitive interning."],["VisibleGradientTile",""],["VisibleMaskImageTile",""]],"trait":[["InternablePrimitive","Trait for primitives that are directly internable. see SceneBuilder::add_primitive"]],"type":[["BorderHandleStorage",""],["ColorBindingIndex",""],["ColorBindingStorage",""],["GlyphKeyStorage",""],["GradientTileRange",""],["GradientTileStorage",""],["ImageInstanceIndex",""],["ImageInstanceStorage",""],["LinearGradientIndex",""],["LinearGradientStorage",""],["OpacityBindingIndex",""],["OpacityBindingStorage",""],["PrimitiveDataHandle",""],["SegmentInstanceIndex",""],["SegmentInstanceStorage",""],["SegmentStorage",""],["SegmentsRange",""],["TextRunIndex",""],["TextRunStorage",""]]});