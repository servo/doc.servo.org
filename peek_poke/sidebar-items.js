initSidebarItems({"derive":[["PeekPoke",""]],"fn":[["ensure_red_zone","Add `T::max_size()` “red zone” (padding of zeroes) to the end of the vec of `bytes`. This allows deserialization to assert that at least `T::max_size()` bytes exist at all times."],["peek_from_default","Peek helper for constructing a `T` by `Default` initialized stack allocation."],["peek_from_slice","Peek inplace a `T` from a slice of bytes, returning a slice of the remaining bytes. `src` must contain at least `T::max_size()` bytes."],["peek_from_uninit","Peek helper for constructing a `T` by `Copy`ing into an uninitialized stack allocation."],["poke_extend_vec",""],["poke_inplace_slice","Poke helper to insert a serialized version of `src` at the beginning for `dst`."],["poke_into_vec","Poke helper to append a serialized version of `src` to the end of `dst`."],["read_verbatim",""],["write_verbatim",""]],"macro":[["impl_for_arrays",""],["impl_for_primitive",""],["impl_for_tuple",""],["impl_poke_for_deref",""]],"mod":[["euclid",""],["slice_ext",""],["vec_ext",""]],"trait":[["Peek","A trait for values that provide deserialization from buffers of bytes."],["Poke","A trait for values that provide serialization into buffers of bytes."]],"union":[["MaybeUninitShim",""]]});