initSidebarItems({"enum":[["CompareResult","Indicates wether a comparison was successful, an error, or if more data was needed"]],"fn":[["lowercase_byte",""]],"macro":[["array_impls",""],["as_bytes_array_impls",""],["impl_fn_slice",""],["slice_range_impl",""],["slice_ranges_impl",""]],"trait":[["AsBytes","Helper trait for types that can be viewed as a byte slice"],["AsChar","Transforms common types to a char for basic token parsing"],["Compare","Abstracts comparison operations"],["ErrorConvert","Equivalent From implementation to avoid orphan rules in bits parsers"],["ExtendInto","Abstracts something which can extend an `Extend`. Used to build modified input slices in `escaped_transform`"],["FindSubstring","Look for a substring in self"],["FindToken","Look for a token in self"],["InputIter","Abstracts common iteration operations on the input type"],["InputLength","Abstract method to calculate the input length"],["InputTake","Abstracts slicing operations"],["InputTakeAtPosition","Methods to take as much input as possible until the provided function returns true for the current element."],["Offset","Useful functions to calculate the offset between slices and show a hexdump of a slice"],["ParseTo","Used to integrate `str`â€™s `parse()` method"],["Slice","Slicing operations using ranges."],["ToUsize","Helper trait to convert numbers to usize."],["UnspecializedInput","Dummy trait used for default implementations (currently only used for `InputTakeAtPosition` and `Compare`)."]]});