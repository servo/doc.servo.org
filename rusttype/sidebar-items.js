initSidebarItems({"enum":[["Font","A single font. This may or may not own the font data."]],"fn":[["point","A convenience function for generating `Point`s."],["vector","A convenience function for generating `Vector`s."]],"mod":[["font",""],["geometry",""],["outliner",""]],"struct":[["Glyph","A single glyph of a font."],["GlyphId",""],["GlyphIter",""],["HMetrics","The “horizontal metrics” of a glyph. This is useful for calculating the horizontal offset of a glyph from the previous one in a string when laying a string out horizontally."],["LayoutIter",""],["Point","A point in 2-dimensional space, with each dimension of type `N`."],["PositionedGlyph","A glyph augmented with positioning and scaling information. You can query such a glyph for information that depends on the scale and position of the glyph."],["Rect","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`."],["Scale","Defines the size of a rendered face of a font, in pixels, horizontally and vertically. A vertical scale of `y` pixels means that the distance between the ascent and descent lines (see `VMetrics`) of the face will be `y` pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling by a factor f in the horizontal direction is achieved by setting `x` equal to f times `y`."],["ScaledGlyph","A glyph augmented with scaling information. You can query such a glyph for information that depends on the scale of the glyph."],["VMetrics","The “vertical metrics” of a font at a particular scale. This is useful for calculating the amount of vertical space to give a line of text, and for computing the vertical offset between successive lines."],["Vector","A vector in 2-dimensional space, with each dimension of type `N`."]],"trait":[["IntoGlyphId","A trait for types that can be converted into a `GlyphId`, in the context of a specific font."],["NearZero",""],["OutlineBuilder","A trait for glyph outline construction."]]});