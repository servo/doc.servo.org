initSidebarItems({"constant":[["UNIX_EPOCH","An anchor in time which can be used to create new `SystemTime` instances or learn about where in time a `SystemTime` lies."]],"enum":[["Bound","An endpoint of a range of keys."],["Cow","A clone-on-write smart pointer."],["Option","The `Option` type. See the module level documentation for more."],["Ordering","Atomic memory orderings"],["Result","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`])."]],"macro":[["Clone","Derive macro generating an impl of the trait `Clone`."],["Debug","Derive macro generating an impl of the trait `Debug`."],["Default","Derive macro generating an impl of the trait `Default`."],["Hash","Derive macro generating an impl of the trait `Hash`."]],"mod":[["clone","The `Clone` trait for types that cannot be ‘implicitly copied’."],["cmp","Functionality for ordering and comparison."],["convert","Traits for conversions between types."],["core",""],["default","The `Default` trait for types which may have meaningful default values."],["error","Traits for working with Errors."],["f32","Constants specific to the `f32` single-precision floating point type."],["f64","Constants specific to the `f64` double-precision floating point type."],["fmt","Utilities for formatting and printing `String`s."],["i16","Constants for the 16-bit signed integer type."],["i32","Constants for the 32-bit signed integer type."],["i64","Constants for the 64-bit signed integer type."],["i8","Constants for the 8-bit signed integer type."],["isize","Constants for the pointer-sized signed integer type."],["iter","Composable external iteration."],["marker","Primitive traits and types representing basic properties of types."],["mem","Basic functions for dealing with memory."],["net","Networking primitives for TCP/UDP communication."],["num","Additional functionality for numerics."],["option","Optional values."],["result","Error handling with the `Result` type."],["slice","A dynamically-sized view into a contiguous sequence, `[T]`."],["str","Unicode string slices."],["u16","Constants for the 16-bit unsigned integer type."],["u32","Constants for the 32-bit unsigned integer type."],["u64","Constants for the 64-bit unsigned integer type."],["u8","Constants for the 8-bit unsigned integer type."],["usize","Constants for the pointer-sized unsigned integer type."]],"struct":[["Arc","A thread-safe reference-counting pointer. ‘Arc’ stands for ‘Atomically Reference Counted’."],["ArcWeak","`Weak` is a version of [`Arc`] that holds a non-owning reference to the managed allocation. The allocation is accessed by calling `upgrade` on the `Weak` pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`."],["AtomicBool","A boolean type which can be safely shared between threads."],["AtomicI16","An integer type which can be safely shared between threads."],["AtomicI32","An integer type which can be safely shared between threads."],["AtomicI64","An integer type which can be safely shared between threads."],["AtomicI8","An integer type which can be safely shared between threads."],["AtomicIsize","An integer type which can be safely shared between threads."],["AtomicU16","An integer type which can be safely shared between threads."],["AtomicU32","An integer type which can be safely shared between threads."],["AtomicU64","An integer type which can be safely shared between threads."],["AtomicU8","An integer type which can be safely shared between threads."],["AtomicUsize","An integer type which can be safely shared between threads."],["BTreeMap","A map based on a B-Tree."],["BTreeSet","A set based on a B-Tree."],["BinaryHeap","A priority queue implemented with a binary heap."],["Box","A pointer type for heap allocation."],["CStr","Representation of a borrowed C string."],["CString","A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the middle."],["Cell","A mutable memory location."],["Duration","A `Duration` type to represent a span of time, typically used for system timeouts."],["HashMap","A hash map implemented with quadratic probing and SIMD lookup."],["HashSet","A hash set implemented as a `HashMap` where the value is `()`."],["LinkedList","A doubly-linked list with owned nodes."],["Mutex","A mutual exclusion primitive useful for protecting shared data"],["OsStr","Borrowed reference to an OS string (see [`OsString`])."],["OsString","A type that can represent owned, mutable platform-native strings, but is cheaply inter-convertible with Rust strings."],["Path","A slice of a path (akin to [`str`])."],["PathBuf","An owned, mutable path (akin to [`String`])."],["PhantomData","Zero-sized type used to mark things that “act like” they own a `T`."],["Range","A (half-open) range bounded inclusively below and exclusively above (`start..end`)."],["RangeInclusive","A range bounded inclusively below and above (`start..=end`)."],["Rc","A single-threaded reference-counting pointer. ‘Rc’ stands for ‘Reference Counted’."],["RcWeak","`Weak` is a version of [`Rc`] that holds a non-owning reference to the managed allocation. The allocation is accessed by calling `upgrade` on the `Weak` pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`."],["RefCell","A mutable memory location with dynamically checked borrow rules"],["Reverse","A helper struct for reverse ordering."],["RwLock","A reader-writer lock"],["String","A UTF-8–encoded, growable string."],["SystemTime","A measurement of the system clock, useful for talking to external entities like the file system or other processes."],["Vec","A contiguous growable array type, written as `Vec<T>` and pronounced ‘vector’."],["VecDeque","A double-ended queue implemented with a growable ring buffer."],["Wrapping","Provides intentionally-wrapped arithmetic on `T`."]],"trait":[["BuildHasher","A trait for creating instances of [`Hasher`]."],["Clone","A common trait for the ability to explicitly duplicate an object."],["Debug","`?` formatting."],["Default","A trait for giving a type a useful default value."],["Display","Format trait for an empty format, `{}`."],["From","Used to do value-to-value conversions while consuming the input value. It is the reciprocal of [`Into`]."],["Hash","A hashable type."],["Into","A value-to-value conversion that consumes the input value. The opposite of [`From`]."],["ToOwned","A generalization of `Clone` to borrowed data."],["ToString","A trait for converting a value to a `String`."],["Write","A trait for objects which are byte-oriented sinks."]]});