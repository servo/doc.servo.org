initSidebarItems({"fn":[["batching","Create a new Batching iterator."],["cartesian_product","Create a new cartesian product iterator"],["coalesce","Create a new `Coalesce`."],["dedup","Create a new `Dedup`."],["interleave","Create an iterator that interleaves elements in `i` and `j`."],["interleave_shortest","Create a new `InterleaveShortest` iterator."],["map_into","Create a new `MapInto` iterator."],["map_results","Create a new `MapResults` iterator."],["merge","Create an iterator that merges elements in `i` and `j`."],["merge_by_new","Create a `MergeBy` iterator."],["positions","Create a new `Positions` iterator."],["put_back","Create an iterator where you can put back a single item"],["step","Create a `Step` iterator."],["take_while_ref","Create a new `TakeWhileRef` from a reference to clonable iterator."],["tuple_combinations","Create a new `TupleCombinations` from a clonable iterator."],["update","Create a new `Update` iterator."],["while_some","Create a new `WhileSome<I>`."]],"mod":[["multi_product",""]],"struct":[["Batching","A “meta iterator adaptor”. Its closure receives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element."],["Coalesce","An iterator adaptor that may join together adjacent elements."],["CoalesceCore",""],["Dedup","An iterator adaptor that removes repeated duplicates."],["Interleave","An iterator adaptor that alternates elements from two iterators until both run out."],["InterleaveShortest","An iterator adaptor that alternates elements from the two iterators until one of them runs out."],["MapInto","An iterator adapter to apply `Into` conversion to each element."],["MapResults","An iterator adapter to apply a transformation within a nested `Result`."],["Merge","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted."],["MergeBy","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted."],["MergeCore",""],["Positions","An iterator adapter to get the positions of each element that matches a predicate."],["Product","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`."],["PutBack","An iterator adaptor that allows putting back a single item to the front of the iterator."],["Step","An iterator adaptor that steps a number elements in the base iterator for each iteration."],["TakeWhileRef","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`."],["Tuple1Combination",""],["Tuple2Combination",""],["Tuple3Combination",""],["Tuple4Combination",""],["TupleCombinations","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size."],["Update","An iterator adapter to apply a mutating function to each element before yielding it."],["WhileSome","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered."]],"trait":[["HasCombination",""]]});