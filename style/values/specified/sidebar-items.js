initSidebarItems({"enum":[["AllowQuirks","Whether quirks are allowed in this context."],["AngleOrPercentage"," |  https://drafts.csswg.org/css-values/#typedef-angle-percentage"],["NumberOrPercentage"," | "]],"fn":[["get_namespace_for_prefix","Get the Namespace for a given prefix from the namespace map."],["parse_number_with_clamping_mode","Parse a `<number>` value, with a given clamping mode."]],"mod":[["angle","Specified angles."],["background","Specified types for CSS values related to backgrounds."],["basic_shape","CSS handling for the specified value of `basic-shape`s"],["border","Specified types for CSS values related to borders."],["box_","Specified types for box properties."],["calc","Calc expressions."],["color","Specified color values."],["column","Specified types for the column properties."],["counters","Specified types for counter properties."],["easing","Specified types for CSS Easing functions."],["effects","Specified types for CSS values related to effects."],["flex","Specified types for CSS values related to flexbox."],["font","Specified values for font properties"],["grid","CSS handling for the computed value of grids"],["image","CSS handling for the specified value of `image`s"],["length","Length values."],["list","`list` specified values."],["motion","Specified types for CSS values that are related to motion path."],["outline","Specified values for outline properties"],["page","Specified @page at-rule properties"],["percentage","Specified percentages."],["position","CSS handling for the specified value of `position`s"],["ratio","Specified types for ."],["rect","Specified types for CSS borders."],["resolution","Resolution values:"],["source_size_list","https://html.spec.whatwg.org/multipage/#source-size-list"],["svg","Specified types for SVG properties."],["svg_path","Specified types for SVG Path."],["table","Specified types for CSS values related to tables."],["text","Specified types for text properties."],["time","Specified time values."],["transform","Specified types for CSS values that are related to transformations."],["ui","Specified types for UI properties."],["url","Common handling for the specified value CSS url() values."]],"struct":[["Attr","An attr(…) rule"],["Integer","A specified `<integer>`, optionally coming from a `calc()` expression."],["Number","A CSS `<number>` specified value."],["Opacity","The value of Opacity is , which is “ | ”. However, we serialize the specified value as number, so it’s ok to store the Opacity as Number."]],"type":[["ClipRect","rect(…)"],["ClipRectOrAuto","rect(…) | auto"],["GreaterThanOrEqualToOneNumber","A Number which is >= 1.0."],["GridLine","The specified value of a `<grid-line>`."],["GridTemplateComponent","`<grid-template-rows> | <grid-template-columns>`"],["ImplicitGridTracks","The specified value of a grid `<track-size>+`"],["NonNegativeNumber","A Number which is >= 0.0."],["NonNegativeNumberOrPercentage","A non-negative  | ."],["PositiveInteger","A wrapper of Integer, with value >= 1."],["PositiveIntegerOrNone","A specified positive `<integer>` value or `none`."],["TrackBreadth","The specified value of a grid `<track-breadth>`"],["TrackList","The specified value of a grid `<track-list>` (could also be `<auto-track-list>` or `<explicit-track-list>`)"],["TrackSize","The specified value of a grid `<track-size>`"]]});