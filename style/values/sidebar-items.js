initSidebarItems({"enum":[["Either","A struct representing one of two kinds of values."],["Impossible","Convenience void type to disable some properties and values through types."],["KeyframesName","https://drafts.csswg.org/css-animations/#typedef-keyframes-name"],["Token","One of the pieces the CSS input is broken into."]],"fn":[["normalize","Normalizes a float value to zero after a set of operations that might turn it into NaN."],["serialize_atom_identifier","Serialize an identifier which is represented as an atom."],["serialize_atom_name","Serialize a name which is represented as an Atom."],["serialize_identifier","Write a CSS identifier, escaping characters as necessary."],["serialize_name","Write a CSS name, like a custom property name."],["serialize_percentage","Serialize a normalized value into percentage."]],"mod":[["animated","Animated values."],["computed","Computed values."],["distance","Machinery to compute distances between animatable values."],["generics","Generic types that share their serialization implementations for both specified and computed values."],["resolved","Resolved values. These are almost always computed values, but in some cases there are used values."],["specified","Specified values."]],"struct":[["AtomString","A CSS string stored as an `Atom`."],["Auto",""],["CowRcStr","A string that is either shared (heap-allocated and reference-counted) or borrowed."],["CustomIdent","https://drafts.csswg.org/css-values-4/#custom-idents"],["GenericAtomIdent","A generic CSS `<ident>` stored as an `Atom`."],["None_",""],["Parser","A CSS parser that borrows its `&str` input, yields `Token`s, and keeps track of nested blocks and functions."],["RGBA","A color with red, green, blue, and alpha components, in a byte each."],["SourceLocation","The line and column number for a given position within the input."]],"trait":[["IsAuto","A trait that returns whether a given type is the `auto` value or not. So far only needed for background-size serialization, which special-cases `auto`."]],"type":[["AtomIdent","A generic CSS `<ident>` stored as an `Atom`, for the default atom set."],["CSSFloat","A CSS float value."],["CSSInteger","A CSS integer value."]]});