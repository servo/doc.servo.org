initSidebarItems({"enum":[["AngleOrPercentage",""],["NumberOrPercentage",""]],"mod":[["angle","Computed angles."],["background","Computed types for CSS values related to backgrounds."],["basic_shape","CSS handling for the computed value of `basic-shape`s"],["border","Computed types for CSS values related to borders."],["box_","Computed types for box properties."],["color","Computed color values."],["column","Computed types for the column properties."],["counters","Computed values for counter properties"],["easing","Computed types for CSS Easing functions."],["effects","Computed types for CSS values related to effects."],["flex","Computed types for CSS values related to flexbox."],["font","Computed values for font properties"],["image","CSS handling for the computed value of `image`s"],["length","`<length>` computed values, and related ones."],["length_percentage","`<length-percentage>` computed values, and related ones."],["list","`list` computed values."],["motion","Computed types for CSS values that are related to motion path."],["outline","Computed values for outline properties"],["page","Computed @page at-rule properties"],["percentage","Computed percentages."],["position","CSS handling for the computed value of `position` values."],["ratio","`<ratio>` computed values."],["rect","Computed types for CSS borders."],["resolution","Resolution values:"],["svg","Computed types for SVG properties."],["table","Computed types for CSS values related to tables."],["text","Computed types for text properties."],["time","Computed time values."],["transform","Computed types for CSS values that are related to transformations."],["ui","Computed values for UI properties"],["url","Common handling for the computed value CSS url() values."]],"struct":[["Au","An App Unit, the fundamental unit of length in Servo. Usually 1/60th of a pixel (see `AU_PER_PX`)"],["ComputedVecIter","An iterator over a slice of computed values"],["Context","A `Context` is all the data a specified value could ever need to compute itself and be transformed to a computed value."]],"trait":[["ToComputedValue","A trait to represent the conversion between computed and specified values."]],"type":[["ClipRect","rect(…) | auto"],["ClipRectOrAuto","rect(…) | auto"],["GreaterThanOrEqualToOneNumber","A wrapper of Number, but the value >= 1."],["GridLine","The computed value of a `<grid-line>`."],["GridTemplateComponent","`<grid-template-rows> | <grid-template-columns>`"],["ImplicitGridTracks","The computed value of a grid `<track-size>+`"],["Integer","A `<integer>` value."],["NonNegativeNumber","A wrapper of Number, but the value >= 0."],["NonNegativeNumberOrPercentage","A non-negative ."],["Number","A `<number>` value."],["Opacity","A type used for opacity."],["PositiveInteger","A wrapper of Integer, but only accept a value >= 1."],["PositiveIntegerOrNone","A computed positive `<integer>` value or `none`."],["TrackBreadth","The computed value of a grid `<track-breadth>`"],["TrackList","The computed value of a grid `<track-list>` (could also be `<auto-track-list>` or `<explicit-track-list>`)"],["TrackSize","The computed value of a grid `<track-size>`"],["ZeroToOneNumber","A wrapper of Number, but the value between 0 and 1"]]});