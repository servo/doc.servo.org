initSidebarItems({"constant":[["_IMPL_NUM_FromPrimitive_FOR_CssRuleType",""]],"enum":[["AllowImportRules","Whether @import rules are allowed."],["CorsMode","The CORS mode used for a CSS load."],["CssRule","A CSS rule."],["CssRuleType",""],["RulesMutateError",""],["SanitizationKind","The kind of sanitization to use when parsing a stylesheet."],["State","The current state of the parser."]],"mod":[["cascading_at_rule","Cascading at-rule types and traits"],["counter_style_rule",""],["document_rule","@document rules initially in CSS Conditional Rules Module Level 3, @document has been postponed to the level 4. We implement the prefixed `@-moz-document`."],["font_face_rule",""],["font_feature_values_rule","The `@font-feature-values` at-rule."],["import_rule","The `@import` at-rule."],["keyframes_rule","Keyframes: https://drafts.csswg.org/css-animations/#keyframes"],["loader","The stylesheet loader is the abstraction used to trigger network requests for `@import` rules."],["media_rule","An `@media` urle."],["namespace_rule","The `@namespace` at-rule."],["origin","CSS cascade origins."],["page_rule","A `@page` rule."],["rule_list","A list of CSS rules."],["rule_parser","Parsing of the stylesheet contents."],["rules_iterator","An iterator over a list of rules."],["style_rule","A style rule."],["stylesheet",""],["supports_rule","@supports rules"],["viewport_rule","The `@viewport` at-rule and `meta` element."]],"struct":[["AllRules","A filter that processes all the rules in a rule list."],["CssRules","A list of CSS rules."],["DocumentRule","A @-moz-document rule"],["DocumentStyleSheet","A simple wrapper over an `Arc<Stylesheet>`, with pointer comparison, and suitable for its use in a `StylesheetSet`."],["EffectiveRules","A struct that represents the condition that a rule applies to the document."],["InsertRuleContext","The information we need particularly to do CSSOM insertRule stuff."],["MediaRule","An `@media` urle."],["NamespaceRule","A `@namespace` rule."],["Namespaces","A set of namespaces applying to a given stylesheet."],["PageRule","A `@page` rule."],["RulesIterator","An iterator over a list of rules."],["SanitizationData","A struct to hold the data relevant to style sheet sanitization."],["StyleRule","A style rule, with selectors and declarations."],["Stylesheet","The structure servo uses to represent a stylesheet."],["StylesheetContents","The contents of a given stylesheet. This effectively maps to a StyleSheetInner in Gecko."],["TopLevelRuleParser","The parser for the top-level rules in a stylesheet."],["UserAgentStylesheets","This structure holds the user-agent and user stylesheets."]],"trait":[["CssRulesHelpers","A trait to implement helpers for `Arc<Locked<CssRules>>`."],["NestedRuleIterationCondition","RulesIterator."],["StylesheetInDocument","A trait to represent a given stylesheet in a document."],["StylesheetLoader","The stylesheet loader is the abstraction used to trigger network requests for `@import` rules."]],"type":[["EffectiveRulesIterator","An iterator over all the effective rules of a stylesheet."],["UrlExtraData","Extra data that the backend may need to resolve url values."]]});